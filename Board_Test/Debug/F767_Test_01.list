
F767_Test_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037c4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  080039c4  080039c4  000139c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003ab0  08003ab0  00013ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003ab8  08003ab8  00013ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003abc  08003abc  00013abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  08003ac0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000054c  20000070  08003b30  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200005bc  08003b30  000205bc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   00018cb5  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000370e  00000000  00000000  00038d53  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000a7c3  00000000  00000000  0003c461  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000f10  00000000  00000000  00046c28  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001270  00000000  00000000  00047b38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000812e  00000000  00000000  00048da8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000064cb  00000000  00000000  00050ed6  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000573a1  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000031d8  00000000  00000000  00057420  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	080039ac 	.word	0x080039ac

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	080039ac 	.word	0x080039ac

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b97a 	b.w	80005ec <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	468c      	mov	ip, r1
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	9e08      	ldr	r6, [sp, #32]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d151      	bne.n	80003c4 <__udivmoddi4+0xb4>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d96d      	bls.n	8000402 <__udivmoddi4+0xf2>
 8000326:	fab2 fe82 	clz	lr, r2
 800032a:	f1be 0f00 	cmp.w	lr, #0
 800032e:	d00b      	beq.n	8000348 <__udivmoddi4+0x38>
 8000330:	f1ce 0c20 	rsb	ip, lr, #32
 8000334:	fa01 f50e 	lsl.w	r5, r1, lr
 8000338:	fa20 fc0c 	lsr.w	ip, r0, ip
 800033c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000340:	ea4c 0c05 	orr.w	ip, ip, r5
 8000344:	fa00 f40e 	lsl.w	r4, r0, lr
 8000348:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800034c:	0c25      	lsrs	r5, r4, #16
 800034e:	fbbc f8fa 	udiv	r8, ip, sl
 8000352:	fa1f f987 	uxth.w	r9, r7
 8000356:	fb0a cc18 	mls	ip, sl, r8, ip
 800035a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800035e:	fb08 f309 	mul.w	r3, r8, r9
 8000362:	42ab      	cmp	r3, r5
 8000364:	d90a      	bls.n	800037c <__udivmoddi4+0x6c>
 8000366:	19ed      	adds	r5, r5, r7
 8000368:	f108 32ff 	add.w	r2, r8, #4294967295
 800036c:	f080 8123 	bcs.w	80005b6 <__udivmoddi4+0x2a6>
 8000370:	42ab      	cmp	r3, r5
 8000372:	f240 8120 	bls.w	80005b6 <__udivmoddi4+0x2a6>
 8000376:	f1a8 0802 	sub.w	r8, r8, #2
 800037a:	443d      	add	r5, r7
 800037c:	1aed      	subs	r5, r5, r3
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb5 f0fa 	udiv	r0, r5, sl
 8000384:	fb0a 5510 	mls	r5, sl, r0, r5
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb00 f909 	mul.w	r9, r0, r9
 8000390:	45a1      	cmp	r9, r4
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x98>
 8000394:	19e4      	adds	r4, r4, r7
 8000396:	f100 33ff 	add.w	r3, r0, #4294967295
 800039a:	f080 810a 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8107 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 0409 	sub.w	r4, r4, r9
 80003ac:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003b0:	2100      	movs	r1, #0
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d061      	beq.n	800047a <__udivmoddi4+0x16a>
 80003b6:	fa24 f40e 	lsr.w	r4, r4, lr
 80003ba:	2300      	movs	r3, #0
 80003bc:	6034      	str	r4, [r6, #0]
 80003be:	6073      	str	r3, [r6, #4]
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d907      	bls.n	80003d8 <__udivmoddi4+0xc8>
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d054      	beq.n	8000476 <__udivmoddi4+0x166>
 80003cc:	2100      	movs	r1, #0
 80003ce:	e886 0021 	stmia.w	r6, {r0, r5}
 80003d2:	4608      	mov	r0, r1
 80003d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d8:	fab3 f183 	clz	r1, r3
 80003dc:	2900      	cmp	r1, #0
 80003de:	f040 808e 	bne.w	80004fe <__udivmoddi4+0x1ee>
 80003e2:	42ab      	cmp	r3, r5
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xdc>
 80003e6:	4282      	cmp	r2, r0
 80003e8:	f200 80fa 	bhi.w	80005e0 <__udivmoddi4+0x2d0>
 80003ec:	1a84      	subs	r4, r0, r2
 80003ee:	eb65 0503 	sbc.w	r5, r5, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	46ac      	mov	ip, r5
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	d03f      	beq.n	800047a <__udivmoddi4+0x16a>
 80003fa:	e886 1010 	stmia.w	r6, {r4, ip}
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	b912      	cbnz	r2, 800040a <__udivmoddi4+0xfa>
 8000404:	2701      	movs	r7, #1
 8000406:	fbb7 f7f2 	udiv	r7, r7, r2
 800040a:	fab7 fe87 	clz	lr, r7
 800040e:	f1be 0f00 	cmp.w	lr, #0
 8000412:	d134      	bne.n	800047e <__udivmoddi4+0x16e>
 8000414:	1beb      	subs	r3, r5, r7
 8000416:	0c3a      	lsrs	r2, r7, #16
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	2101      	movs	r1, #1
 800041e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000422:	0c25      	lsrs	r5, r4, #16
 8000424:	fb02 3318 	mls	r3, r2, r8, r3
 8000428:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800042c:	fb0c f308 	mul.w	r3, ip, r8
 8000430:	42ab      	cmp	r3, r5
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x134>
 8000434:	19ed      	adds	r5, r5, r7
 8000436:	f108 30ff 	add.w	r0, r8, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x132>
 800043c:	42ab      	cmp	r3, r5
 800043e:	f200 80d1 	bhi.w	80005e4 <__udivmoddi4+0x2d4>
 8000442:	4680      	mov	r8, r0
 8000444:	1aed      	subs	r5, r5, r3
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb5 f0f2 	udiv	r0, r5, r2
 800044c:	fb02 5510 	mls	r5, r2, r0, r5
 8000450:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000454:	fb0c fc00 	mul.w	ip, ip, r0
 8000458:	45a4      	cmp	ip, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x15c>
 800045c:	19e4      	adds	r4, r4, r7
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x15a>
 8000464:	45a4      	cmp	ip, r4
 8000466:	f200 80b8 	bhi.w	80005da <__udivmoddi4+0x2ca>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 040c 	sub.w	r4, r4, ip
 8000470:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000474:	e79d      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000476:	4631      	mov	r1, r6
 8000478:	4630      	mov	r0, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	f1ce 0420 	rsb	r4, lr, #32
 8000482:	fa05 f30e 	lsl.w	r3, r5, lr
 8000486:	fa07 f70e 	lsl.w	r7, r7, lr
 800048a:	fa20 f804 	lsr.w	r8, r0, r4
 800048e:	0c3a      	lsrs	r2, r7, #16
 8000490:	fa25 f404 	lsr.w	r4, r5, r4
 8000494:	ea48 0803 	orr.w	r8, r8, r3
 8000498:	fbb4 f1f2 	udiv	r1, r4, r2
 800049c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80004a0:	fb02 4411 	mls	r4, r2, r1, r4
 80004a4:	fa1f fc87 	uxth.w	ip, r7
 80004a8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80004ac:	fb01 f30c 	mul.w	r3, r1, ip
 80004b0:	42ab      	cmp	r3, r5
 80004b2:	fa00 f40e 	lsl.w	r4, r0, lr
 80004b6:	d909      	bls.n	80004cc <__udivmoddi4+0x1bc>
 80004b8:	19ed      	adds	r5, r5, r7
 80004ba:	f101 30ff 	add.w	r0, r1, #4294967295
 80004be:	f080 808a 	bcs.w	80005d6 <__udivmoddi4+0x2c6>
 80004c2:	42ab      	cmp	r3, r5
 80004c4:	f240 8087 	bls.w	80005d6 <__udivmoddi4+0x2c6>
 80004c8:	3902      	subs	r1, #2
 80004ca:	443d      	add	r5, r7
 80004cc:	1aeb      	subs	r3, r5, r3
 80004ce:	fa1f f588 	uxth.w	r5, r8
 80004d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80004d6:	fb02 3310 	mls	r3, r2, r0, r3
 80004da:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004de:	fb00 f30c 	mul.w	r3, r0, ip
 80004e2:	42ab      	cmp	r3, r5
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x1e6>
 80004e6:	19ed      	adds	r5, r5, r7
 80004e8:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ec:	d26f      	bcs.n	80005ce <__udivmoddi4+0x2be>
 80004ee:	42ab      	cmp	r3, r5
 80004f0:	d96d      	bls.n	80005ce <__udivmoddi4+0x2be>
 80004f2:	3802      	subs	r0, #2
 80004f4:	443d      	add	r5, r7
 80004f6:	1aeb      	subs	r3, r5, r3
 80004f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004fc:	e78f      	b.n	800041e <__udivmoddi4+0x10e>
 80004fe:	f1c1 0720 	rsb	r7, r1, #32
 8000502:	fa22 f807 	lsr.w	r8, r2, r7
 8000506:	408b      	lsls	r3, r1
 8000508:	fa05 f401 	lsl.w	r4, r5, r1
 800050c:	ea48 0303 	orr.w	r3, r8, r3
 8000510:	fa20 fe07 	lsr.w	lr, r0, r7
 8000514:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000518:	40fd      	lsrs	r5, r7
 800051a:	ea4e 0e04 	orr.w	lr, lr, r4
 800051e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000522:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000526:	fb0c 5519 	mls	r5, ip, r9, r5
 800052a:	fa1f f883 	uxth.w	r8, r3
 800052e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000532:	fb09 f408 	mul.w	r4, r9, r8
 8000536:	42ac      	cmp	r4, r5
 8000538:	fa02 f201 	lsl.w	r2, r2, r1
 800053c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x244>
 8000542:	18ed      	adds	r5, r5, r3
 8000544:	f109 30ff 	add.w	r0, r9, #4294967295
 8000548:	d243      	bcs.n	80005d2 <__udivmoddi4+0x2c2>
 800054a:	42ac      	cmp	r4, r5
 800054c:	d941      	bls.n	80005d2 <__udivmoddi4+0x2c2>
 800054e:	f1a9 0902 	sub.w	r9, r9, #2
 8000552:	441d      	add	r5, r3
 8000554:	1b2d      	subs	r5, r5, r4
 8000556:	fa1f fe8e 	uxth.w	lr, lr
 800055a:	fbb5 f0fc 	udiv	r0, r5, ip
 800055e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000562:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000566:	fb00 f808 	mul.w	r8, r0, r8
 800056a:	45a0      	cmp	r8, r4
 800056c:	d907      	bls.n	800057e <__udivmoddi4+0x26e>
 800056e:	18e4      	adds	r4, r4, r3
 8000570:	f100 35ff 	add.w	r5, r0, #4294967295
 8000574:	d229      	bcs.n	80005ca <__udivmoddi4+0x2ba>
 8000576:	45a0      	cmp	r8, r4
 8000578:	d927      	bls.n	80005ca <__udivmoddi4+0x2ba>
 800057a:	3802      	subs	r0, #2
 800057c:	441c      	add	r4, r3
 800057e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000582:	eba4 0408 	sub.w	r4, r4, r8
 8000586:	fba0 8902 	umull	r8, r9, r0, r2
 800058a:	454c      	cmp	r4, r9
 800058c:	46c6      	mov	lr, r8
 800058e:	464d      	mov	r5, r9
 8000590:	d315      	bcc.n	80005be <__udivmoddi4+0x2ae>
 8000592:	d012      	beq.n	80005ba <__udivmoddi4+0x2aa>
 8000594:	b156      	cbz	r6, 80005ac <__udivmoddi4+0x29c>
 8000596:	ebba 030e 	subs.w	r3, sl, lr
 800059a:	eb64 0405 	sbc.w	r4, r4, r5
 800059e:	fa04 f707 	lsl.w	r7, r4, r7
 80005a2:	40cb      	lsrs	r3, r1
 80005a4:	431f      	orrs	r7, r3
 80005a6:	40cc      	lsrs	r4, r1
 80005a8:	6037      	str	r7, [r6, #0]
 80005aa:	6074      	str	r4, [r6, #4]
 80005ac:	2100      	movs	r1, #0
 80005ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005b2:	4618      	mov	r0, r3
 80005b4:	e6f8      	b.n	80003a8 <__udivmoddi4+0x98>
 80005b6:	4690      	mov	r8, r2
 80005b8:	e6e0      	b.n	800037c <__udivmoddi4+0x6c>
 80005ba:	45c2      	cmp	sl, r8
 80005bc:	d2ea      	bcs.n	8000594 <__udivmoddi4+0x284>
 80005be:	ebb8 0e02 	subs.w	lr, r8, r2
 80005c2:	eb69 0503 	sbc.w	r5, r9, r3
 80005c6:	3801      	subs	r0, #1
 80005c8:	e7e4      	b.n	8000594 <__udivmoddi4+0x284>
 80005ca:	4628      	mov	r0, r5
 80005cc:	e7d7      	b.n	800057e <__udivmoddi4+0x26e>
 80005ce:	4640      	mov	r0, r8
 80005d0:	e791      	b.n	80004f6 <__udivmoddi4+0x1e6>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e7be      	b.n	8000554 <__udivmoddi4+0x244>
 80005d6:	4601      	mov	r1, r0
 80005d8:	e778      	b.n	80004cc <__udivmoddi4+0x1bc>
 80005da:	3802      	subs	r0, #2
 80005dc:	443c      	add	r4, r7
 80005de:	e745      	b.n	800046c <__udivmoddi4+0x15c>
 80005e0:	4608      	mov	r0, r1
 80005e2:	e708      	b.n	80003f6 <__udivmoddi4+0xe6>
 80005e4:	f1a8 0802 	sub.w	r8, r8, #2
 80005e8:	443d      	add	r5, r7
 80005ea:	e72b      	b.n	8000444 <__udivmoddi4+0x134>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005f0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005f2:	4b0e      	ldr	r3, [pc, #56]	; (800062c <HAL_InitTick+0x3c>)
{
 80005f4:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005f6:	4a0e      	ldr	r2, [pc, #56]	; (8000630 <HAL_InitTick+0x40>)
 80005f8:	7818      	ldrb	r0, [r3, #0]
 80005fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005fe:	fbb3 f3f0 	udiv	r3, r3, r0
 8000602:	6810      	ldr	r0, [r2, #0]
 8000604:	fbb0 f0f3 	udiv	r0, r0, r3
 8000608:	f000 f89e 	bl	8000748 <HAL_SYSTICK_Config>
 800060c:	4604      	mov	r4, r0
 800060e:	b958      	cbnz	r0, 8000628 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000610:	2d0f      	cmp	r5, #15
 8000612:	d809      	bhi.n	8000628 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000614:	4602      	mov	r2, r0
 8000616:	4629      	mov	r1, r5
 8000618:	f04f 30ff 	mov.w	r0, #4294967295
 800061c:	f000 f84e 	bl	80006bc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000620:	4b04      	ldr	r3, [pc, #16]	; (8000634 <HAL_InitTick+0x44>)
 8000622:	4620      	mov	r0, r4
 8000624:	601d      	str	r5, [r3, #0]
 8000626:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000628:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800062a:	bd38      	pop	{r3, r4, r5, pc}
 800062c:	20000000 	.word	0x20000000
 8000630:	20000008 	.word	0x20000008
 8000634:	20000004 	.word	0x20000004

08000638 <HAL_Init>:
{
 8000638:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800063a:	2003      	movs	r0, #3
 800063c:	f000 f82c 	bl	8000698 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000640:	2000      	movs	r0, #0
 8000642:	f7ff ffd5 	bl	80005f0 <HAL_InitTick>
  HAL_MspInit();
 8000646:	f002 f8e1 	bl	800280c <HAL_MspInit>
}
 800064a:	2000      	movs	r0, #0
 800064c:	bd08      	pop	{r3, pc}
	...

08000650 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000650:	4a03      	ldr	r2, [pc, #12]	; (8000660 <HAL_IncTick+0x10>)
 8000652:	4b04      	ldr	r3, [pc, #16]	; (8000664 <HAL_IncTick+0x14>)
 8000654:	6811      	ldr	r1, [r2, #0]
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	440b      	add	r3, r1
 800065a:	6013      	str	r3, [r2, #0]
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	200000a8 	.word	0x200000a8
 8000664:	20000000 	.word	0x20000000

08000668 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000668:	4b01      	ldr	r3, [pc, #4]	; (8000670 <HAL_GetTick+0x8>)
 800066a:	6818      	ldr	r0, [r3, #0]
}
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	200000a8 	.word	0x200000a8

08000674 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000674:	b538      	push	{r3, r4, r5, lr}
 8000676:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000678:	f7ff fff6 	bl	8000668 <HAL_GetTick>
 800067c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800067e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000680:	bf1e      	ittt	ne
 8000682:	4b04      	ldrne	r3, [pc, #16]	; (8000694 <HAL_Delay+0x20>)
 8000684:	781b      	ldrbne	r3, [r3, #0]
 8000686:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000688:	f7ff ffee 	bl	8000668 <HAL_GetTick>
 800068c:	1b40      	subs	r0, r0, r5
 800068e:	4284      	cmp	r4, r0
 8000690:	d8fa      	bhi.n	8000688 <HAL_Delay+0x14>
  {
  }
}
 8000692:	bd38      	pop	{r3, r4, r5, pc}
 8000694:	20000000 	.word	0x20000000

08000698 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000698:	4a07      	ldr	r2, [pc, #28]	; (80006b8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800069a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800069c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800069e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006a2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80006a6:	041b      	lsls	r3, r3, #16
 80006a8:	0c1b      	lsrs	r3, r3, #16
 80006aa:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80006b2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80006b4:	60d3      	str	r3, [r2, #12]
 80006b6:	4770      	bx	lr
 80006b8:	e000ed00 	.word	0xe000ed00

080006bc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006bc:	4b19      	ldr	r3, [pc, #100]	; (8000724 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006be:	b530      	push	{r4, r5, lr}
 80006c0:	68dc      	ldr	r4, [r3, #12]
 80006c2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006c6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ca:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006cc:	2b04      	cmp	r3, #4
 80006ce:	bf28      	it	cs
 80006d0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006d2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d4:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006d8:	bf8c      	ite	hi
 80006da:	3c03      	subhi	r4, #3
 80006dc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006de:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 80006e2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e4:	f103 33ff 	add.w	r3, r3, #4294967295
 80006e8:	ea01 0103 	and.w	r1, r1, r3
 80006ec:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006f0:	fa05 f404 	lsl.w	r4, r5, r4
 80006f4:	f104 34ff 	add.w	r4, r4, #4294967295
 80006f8:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006fc:	ea42 0201 	orr.w	r2, r2, r1
 8000700:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) >= 0)
 8000704:	db07      	blt.n	8000716 <HAL_NVIC_SetPriority+0x5a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000706:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800070a:	b2d2      	uxtb	r2, r2
 800070c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000710:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 8000714:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000716:	f000 000f 	and.w	r0, r0, #15
 800071a:	b2d2      	uxtb	r2, r2
 800071c:	4b02      	ldr	r3, [pc, #8]	; (8000728 <HAL_NVIC_SetPriority+0x6c>)
 800071e:	541a      	strb	r2, [r3, r0]
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	bf00      	nop
 8000724:	e000ed00 	.word	0xe000ed00
 8000728:	e000ed14 	.word	0xe000ed14

0800072c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800072c:	2800      	cmp	r0, #0
 800072e:	db08      	blt.n	8000742 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000730:	0942      	lsrs	r2, r0, #5
 8000732:	2301      	movs	r3, #1
 8000734:	f000 001f 	and.w	r0, r0, #31
 8000738:	fa03 f000 	lsl.w	r0, r3, r0
 800073c:	4b01      	ldr	r3, [pc, #4]	; (8000744 <HAL_NVIC_EnableIRQ+0x18>)
 800073e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000742:	4770      	bx	lr
 8000744:	e000e100 	.word	0xe000e100

08000748 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000748:	3801      	subs	r0, #1
 800074a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800074e:	d20a      	bcs.n	8000766 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000752:	21f0      	movs	r1, #240	; 0xf0
 8000754:	4a06      	ldr	r2, [pc, #24]	; (8000770 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000756:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000758:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800075a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800075e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000760:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000766:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	e000e010 	.word	0xe000e010
 8000770:	e000ed00 	.word	0xe000ed00

08000774 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8000774:	b570      	push	{r4, r5, r6, lr}
 8000776:	4604      	mov	r4, r0
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8000778:	b129      	cbz	r1, 8000786 <ETH_MACDMAConfig+0x12>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800077a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800077e:	60c3      	str	r3, [r0, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8000780:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000784:	6083      	str	r3, [r0, #8]
  macinit.Jabber = ETH_JABBER_ENABLE;
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8000786:	69e3      	ldr	r3, [r4, #28]
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
  macinit.VLANTagIdentifier = 0x0;
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8000788:	6822      	ldr	r2, [r4, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800078a:	2b00      	cmp	r3, #0
                       macinit.Jabber | 
                       macinit.InterFrameGap |
                       macinit.CarrierSense |
                       (heth->Init).Speed | 
                       macinit.ReceiveOwn |
                       macinit.LoopbackMode |
 800078c:	68e0      	ldr	r0, [r4, #12]
 800078e:	68a3      	ldr	r3, [r4, #8]
  tmpreg = (heth->Instance)->MACCR;
 8000790:	6815      	ldr	r5, [r2, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8000792:	bf08      	it	eq
 8000794:	f44f 6180 	moveq.w	r1, #1024	; 0x400
                       macinit.LoopbackMode |
 8000798:	ea43 0300 	orr.w	r3, r3, r0
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 800079c:	482e      	ldr	r0, [pc, #184]	; (8000858 <ETH_MACDMAConfig+0xe4>)
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800079e:	bf18      	it	ne
 80007a0:	2100      	movne	r1, #0
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 80007a2:	4028      	ands	r0, r5
 80007a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007a8:	4303      	orrs	r3, r0
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80007aa:	2001      	movs	r0, #1
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80007ac:	430b      	orrs	r3, r1
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80007ae:	6013      	str	r3, [r2, #0]
  tmpreg = (heth->Instance)->MACCR;
 80007b0:	6815      	ldr	r5, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80007b2:	f7ff ff5f 	bl	8000674 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 80007b6:	6823      	ldr	r3, [r4, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80007b8:	2240      	movs	r2, #64	; 0x40
                                        macinit.UnicastFramesFilter);
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80007ba:	2001      	movs	r0, #1
  (heth->Instance)->MACCR = tmpreg; 
 80007bc:	601d      	str	r5, [r3, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80007be:	605a      	str	r2, [r3, #4]
   tmpreg = (heth->Instance)->MACFFR;
 80007c0:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80007c2:	f7ff ff57 	bl	8000674 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 80007c6:	6823      	ldr	r3, [r4, #0]
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80007c8:	2001      	movs	r0, #1
   (heth->Instance)->MACFFR = tmpreg;
 80007ca:	605d      	str	r5, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80007cc:	2500      	movs	r5, #0
 80007ce:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80007d0:	60dd      	str	r5, [r3, #12]
   tmpreg = (heth->Instance)->MACFCR;
 80007d2:	699a      	ldr	r2, [r3, #24]
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80007d4:	f022 02be 	bic.w	r2, r2, #190	; 0xbe
 80007d8:	0412      	lsls	r2, r2, #16
 80007da:	0c12      	lsrs	r2, r2, #16
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80007dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80007e0:	619a      	str	r2, [r3, #24]
   tmpreg = (heth->Instance)->MACFCR;
 80007e2:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80007e4:	f7ff ff46 	bl	8000674 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 80007e8:	6823      	ldr	r3, [r4, #0]
                                            macinit.VLANTagIdentifier);
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80007ea:	2001      	movs	r0, #1
   (heth->Instance)->MACFCR = tmpreg;
 80007ec:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80007ee:	61dd      	str	r5, [r3, #28]
    tmpreg = (heth->Instance)->MACVLANTR;
 80007f0:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80007f2:	f7ff ff3f 	bl	8000674 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80007f6:	6822      	ldr	r2, [r4, #0]
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80007f8:	2001      	movs	r0, #1
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80007fa:	4b18      	ldr	r3, [pc, #96]	; (800085c <ETH_MACDMAConfig+0xe8>)
    (heth->Instance)->MACVLANTR = tmpreg;
 80007fc:	61d5      	str	r5, [r2, #28]
    tmpreg = (heth->Instance)->DMAOMR;
 80007fe:	f241 0518 	movw	r5, #4120	; 0x1018
 8000802:	5951      	ldr	r1, [r2, r5]
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8000804:	400b      	ands	r3, r1
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8000806:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 800080a:	f043 0304 	orr.w	r3, r3, #4
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 800080e:	5153      	str	r3, [r2, r5]
    tmpreg = (heth->Instance)->DMAOMR;
 8000810:	5956      	ldr	r6, [r2, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000812:	f7ff ff2f 	bl	8000674 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8000816:	6823      	ldr	r3, [r4, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8000818:	2001      	movs	r0, #1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800081a:	4a11      	ldr	r2, [pc, #68]	; (8000860 <ETH_MACDMAConfig+0xec>)
    (heth->Instance)->DMAOMR = tmpreg;
 800081c:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800081e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000822:	601a      	str	r2, [r3, #0]
     tmpreg = (heth->Instance)->DMABMR;
 8000824:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8000826:	f7ff ff25 	bl	8000674 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 800082a:	6822      	ldr	r2, [r4, #0]
 800082c:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 8000830:	601d      	str	r5, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8000832:	69a3      	ldr	r3, [r4, #24]
 8000834:	2b01      	cmp	r3, #1
 8000836:	d107      	bne.n	8000848 <ETH_MACDMAConfig+0xd4>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8000838:	f241 011c 	movw	r1, #4124	; 0x101c
 800083c:	5853      	ldr	r3, [r2, r1]
 800083e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000842:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000846:	5053      	str	r3, [r2, r1]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8000848:	6963      	ldr	r3, [r4, #20]
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800084a:	4a06      	ldr	r2, [pc, #24]	; (8000864 <ETH_MACDMAConfig+0xf0>)
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 800084c:	8899      	ldrh	r1, [r3, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800084e:	6011      	str	r1, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8000850:	681a      	ldr	r2, [r3, #0]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8000852:	4b05      	ldr	r3, [pc, #20]	; (8000868 <ETH_MACDMAConfig+0xf4>)
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	bd70      	pop	{r4, r5, r6, pc}
 8000858:	ff20810f 	.word	0xff20810f
 800085c:	f8de3f23 	.word	0xf8de3f23
 8000860:	02c12080 	.word	0x02c12080
 8000864:	40028040 	.word	0x40028040
 8000868:	40028044 	.word	0x40028044

0800086c <HAL_ETH_ReadPHYRegister>:
{
 800086c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800086e:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
{
 8000872:	4605      	mov	r5, r0
 8000874:	4616      	mov	r6, r2
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000876:	2b82      	cmp	r3, #130	; 0x82
 8000878:	d030      	beq.n	80008dc <HAL_ETH_ReadPHYRegister+0x70>
  tmpreg = heth->Instance->MACMIIAR;
 800087a:	6802      	ldr	r2, [r0, #0]
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800087c:	2382      	movs	r3, #130	; 0x82
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800087e:	0189      	lsls	r1, r1, #6
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8000880:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg = heth->Instance->MACMIIAR;
 8000884:	6913      	ldr	r3, [r2, #16]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8000886:	f401 64f8 	and.w	r4, r1, #1984	; 0x7c0
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800088a:	f003 011c 	and.w	r1, r3, #28
 800088e:	4321      	orrs	r1, r4
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8000890:	8a04      	ldrh	r4, [r0, #16]
 8000892:	02e4      	lsls	r4, r4, #11
 8000894:	b2a4      	uxth	r4, r4
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8000896:	430c      	orrs	r4, r1
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8000898:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg;
 800089c:	6114      	str	r4, [r2, #16]
  tickstart = HAL_GetTick();
 800089e:	f7ff fee3 	bl	8000668 <HAL_GetTick>
 80008a2:	4607      	mov	r7, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80008a4:	f014 0001 	ands.w	r0, r4, #1
 80008a8:	d107      	bne.n	80008ba <HAL_ETH_ReadPHYRegister+0x4e>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80008aa:	682b      	ldr	r3, [r5, #0]
 80008ac:	695b      	ldr	r3, [r3, #20]
 80008ae:	b29b      	uxth	r3, r3
 80008b0:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 80008b2:	2301      	movs	r3, #1
 80008b4:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 80008b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80008ba:	f7ff fed5 	bl	8000668 <HAL_GetTick>
 80008be:	1bc0      	subs	r0, r0, r7
 80008c0:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80008c4:	d307      	bcc.n	80008d6 <HAL_ETH_ReadPHYRegister+0x6a>
      heth->State= HAL_ETH_STATE_READY;
 80008c6:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 80008c8:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 80008ca:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 80008ce:	2300      	movs	r3, #0
 80008d0:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 80008d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpreg = heth->Instance->MACMIIAR;
 80008d6:	682b      	ldr	r3, [r5, #0]
 80008d8:	691c      	ldr	r4, [r3, #16]
 80008da:	e7e3      	b.n	80008a4 <HAL_ETH_ReadPHYRegister+0x38>
    return HAL_BUSY;
 80008dc:	2002      	movs	r0, #2
}
 80008de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080008e0 <HAL_ETH_WritePHYRegister>:
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80008e0:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80008e4:	2b42      	cmp	r3, #66	; 0x42
{
 80008e6:	b570      	push	{r4, r5, r6, lr}
 80008e8:	4605      	mov	r5, r0
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80008ea:	d02e      	beq.n	800094a <HAL_ETH_WritePHYRegister+0x6a>
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80008ec:	2342      	movs	r3, #66	; 0x42
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80008ee:	018c      	lsls	r4, r1, #6
 80008f0:	b292      	uxth	r2, r2
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80008f2:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80008f6:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
  tmpreg = heth->Instance->MACMIIAR;
 80008fa:	6803      	ldr	r3, [r0, #0]
 80008fc:	f044 0403 	orr.w	r4, r4, #3
 8000900:	6918      	ldr	r0, [r3, #16]
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8000902:	f000 001c 	and.w	r0, r0, #28
 8000906:	4320      	orrs	r0, r4
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8000908:	8a2c      	ldrh	r4, [r5, #16]
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800090a:	615a      	str	r2, [r3, #20]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800090c:	02e4      	lsls	r4, r4, #11
 800090e:	b2a4      	uxth	r4, r4
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8000910:	4304      	orrs	r4, r0
  heth->Instance->MACMIIAR = tmpreg;
 8000912:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 8000914:	f7ff fea8 	bl	8000668 <HAL_GetTick>
 8000918:	4606      	mov	r6, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800091a:	f014 0001 	ands.w	r0, r4, #1
 800091e:	d103      	bne.n	8000928 <HAL_ETH_WritePHYRegister+0x48>
  heth->State = HAL_ETH_STATE_READY;
 8000920:	2301      	movs	r3, #1
 8000922:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 8000926:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8000928:	f7ff fe9e 	bl	8000668 <HAL_GetTick>
 800092c:	1b80      	subs	r0, r0, r6
 800092e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000932:	d307      	bcc.n	8000944 <HAL_ETH_WritePHYRegister+0x64>
      heth->State= HAL_ETH_STATE_READY;
 8000934:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 8000936:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 8000938:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800093c:	2300      	movs	r3, #0
 800093e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
 8000942:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg = heth->Instance->MACMIIAR;
 8000944:	682b      	ldr	r3, [r5, #0]
 8000946:	691c      	ldr	r4, [r3, #16]
 8000948:	e7e7      	b.n	800091a <HAL_ETH_WritePHYRegister+0x3a>
    return HAL_BUSY;
 800094a:	2002      	movs	r0, #2
}
 800094c:	bd70      	pop	{r4, r5, r6, pc}
	...

08000950 <HAL_ETH_Init>:
  uint32_t tempreg = 0, phyreg = 0;
 8000950:	2300      	movs	r3, #0
{
 8000952:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(heth == NULL)
 8000954:	4604      	mov	r4, r0
  uint32_t tempreg = 0, phyreg = 0;
 8000956:	9300      	str	r3, [sp, #0]
  if(heth == NULL)
 8000958:	2800      	cmp	r0, #0
 800095a:	f000 80dc 	beq.w	8000b16 <HAL_ETH_Init+0x1c6>
  if(heth->State == HAL_ETH_STATE_RESET)
 800095e:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000962:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000966:	b91b      	cbnz	r3, 8000970 <HAL_ETH_Init+0x20>
    heth->Lock = HAL_UNLOCKED;
 8000968:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 800096c:	f001 fd78 	bl	8002460 <HAL_ETH_MspInit>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000970:	4b6a      	ldr	r3, [pc, #424]	; (8000b1c <HAL_ETH_Init+0x1cc>)
 8000972:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000974:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000978:	645a      	str	r2, [r3, #68]	; 0x44
 800097a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000980:	9301      	str	r3, [sp, #4]
 8000982:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000984:	4b66      	ldr	r3, [pc, #408]	; (8000b20 <HAL_ETH_Init+0x1d0>)
 8000986:	685a      	ldr	r2, [r3, #4]
 8000988:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800098c:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800098e:	685a      	ldr	r2, [r3, #4]
 8000990:	6a21      	ldr	r1, [r4, #32]
 8000992:	430a      	orrs	r2, r1
 8000994:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000996:	6823      	ldr	r3, [r4, #0]
 8000998:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	f042 0201 	orr.w	r2, r2, #1
 80009a2:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80009a4:	f7ff fe60 	bl	8000668 <HAL_GetTick>
 80009a8:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80009aa:	6823      	ldr	r3, [r4, #0]
 80009ac:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80009b0:	6812      	ldr	r2, [r2, #0]
 80009b2:	07d0      	lsls	r0, r2, #31
 80009b4:	d41d      	bmi.n	80009f2 <HAL_ETH_Init+0xa2>
  tempreg = (heth->Instance)->MACMIIAR;
 80009b6:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 80009b8:	f000 fd04 	bl	80013c4 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000)&&(hclk < 35000000))
 80009bc:	4b59      	ldr	r3, [pc, #356]	; (8000b24 <HAL_ETH_Init+0x1d4>)
 80009be:	4a5a      	ldr	r2, [pc, #360]	; (8000b28 <HAL_ETH_Init+0x1d8>)
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80009c0:	f025 051c 	bic.w	r5, r5, #28
  if((hclk >= 20000000)&&(hclk < 35000000))
 80009c4:	4403      	add	r3, r0
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d822      	bhi.n	8000a10 <HAL_ETH_Init+0xc0>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80009ca:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 80009ce:	6823      	ldr	r3, [r4, #0]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80009d0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80009d4:	2100      	movs	r1, #0
 80009d6:	4620      	mov	r0, r4
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 80009d8:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80009da:	f7ff ff81 	bl	80008e0 <HAL_ETH_WritePHYRegister>
 80009de:	4605      	mov	r5, r0
 80009e0:	b368      	cbz	r0, 8000a3e <HAL_ETH_Init+0xee>
      heth->State = HAL_ETH_STATE_READY;
 80009e2:	2501      	movs	r5, #1
      ETH_MACDMAConfig(heth, err);
 80009e4:	2101      	movs	r1, #1
 80009e6:	4620      	mov	r0, r4
 80009e8:	f7ff fec4 	bl	8000774 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 80009ec:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 80009f0:	e00b      	b.n	8000a0a <HAL_ETH_Init+0xba>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80009f2:	f7ff fe39 	bl	8000668 <HAL_GetTick>
 80009f6:	1b40      	subs	r0, r0, r5
 80009f8:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 80009fc:	d9d5      	bls.n	80009aa <HAL_ETH_Init+0x5a>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80009fe:	2503      	movs	r5, #3
      __HAL_UNLOCK(heth);
 8000a00:	2300      	movs	r3, #0
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000a02:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000a06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8000a0a:	4628      	mov	r0, r5
 8000a0c:	b003      	add	sp, #12
 8000a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8000a10:	4b46      	ldr	r3, [pc, #280]	; (8000b2c <HAL_ETH_Init+0x1dc>)
 8000a12:	4a47      	ldr	r2, [pc, #284]	; (8000b30 <HAL_ETH_Init+0x1e0>)
 8000a14:	4403      	add	r3, r0
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d802      	bhi.n	8000a20 <HAL_ETH_Init+0xd0>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000a1a:	f045 050c 	orr.w	r5, r5, #12
 8000a1e:	e7d6      	b.n	80009ce <HAL_ETH_Init+0x7e>
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8000a20:	4b44      	ldr	r3, [pc, #272]	; (8000b34 <HAL_ETH_Init+0x1e4>)
 8000a22:	4a45      	ldr	r2, [pc, #276]	; (8000b38 <HAL_ETH_Init+0x1e8>)
 8000a24:	4403      	add	r3, r0
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d9d1      	bls.n	80009ce <HAL_ETH_Init+0x7e>
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8000a2a:	4b44      	ldr	r3, [pc, #272]	; (8000b3c <HAL_ETH_Init+0x1ec>)
 8000a2c:	4a44      	ldr	r2, [pc, #272]	; (8000b40 <HAL_ETH_Init+0x1f0>)
 8000a2e:	4403      	add	r3, r0
 8000a30:	4293      	cmp	r3, r2
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000a32:	bf94      	ite	ls
 8000a34:	f045 0504 	orrls.w	r5, r5, #4
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000a38:	f045 0510 	orrhi.w	r5, r5, #16
 8000a3c:	e7c7      	b.n	80009ce <HAL_ETH_Init+0x7e>
  HAL_Delay(PHY_RESET_DELAY);
 8000a3e:	20ff      	movs	r0, #255	; 0xff
 8000a40:	f7ff fe18 	bl	8000674 <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000a44:	6863      	ldr	r3, [r4, #4]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d053      	beq.n	8000af2 <HAL_ETH_Init+0x1a2>
    tickstart = HAL_GetTick();
 8000a4a:	f7ff fe0d 	bl	8000668 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000a4e:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000a52:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000a54:	466a      	mov	r2, sp
 8000a56:	2101      	movs	r1, #1
 8000a58:	4620      	mov	r0, r4
 8000a5a:	f7ff ff07 	bl	800086c <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000a5e:	f7ff fe03 	bl	8000668 <HAL_GetTick>
 8000a62:	1b80      	subs	r0, r0, r6
 8000a64:	42b8      	cmp	r0, r7
 8000a66:	d90b      	bls.n	8000a80 <HAL_ETH_Init+0x130>
        ETH_MACDMAConfig(heth, err);
 8000a68:	2101      	movs	r1, #1
 8000a6a:	4620      	mov	r0, r4
 8000a6c:	f7ff fe82 	bl	8000774 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8000a70:	2301      	movs	r3, #1
        return HAL_TIMEOUT;
 8000a72:	2503      	movs	r5, #3
        heth->State= HAL_ETH_STATE_READY;
 8000a74:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8000a78:	2300      	movs	r3, #0
 8000a7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8000a7e:	e7c4      	b.n	8000a0a <HAL_ETH_Init+0xba>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000a80:	9b00      	ldr	r3, [sp, #0]
 8000a82:	0759      	lsls	r1, r3, #29
 8000a84:	d5e6      	bpl.n	8000a54 <HAL_ETH_Init+0x104>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000a86:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	4620      	mov	r0, r4
 8000a8e:	f7ff ff27 	bl	80008e0 <HAL_ETH_WritePHYRegister>
 8000a92:	2800      	cmp	r0, #0
 8000a94:	d1a5      	bne.n	80009e2 <HAL_ETH_Init+0x92>
    tickstart = HAL_GetTick();
 8000a96:	f7ff fde7 	bl	8000668 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000a9a:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000a9e:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000aa0:	466a      	mov	r2, sp
 8000aa2:	2101      	movs	r1, #1
 8000aa4:	4620      	mov	r0, r4
 8000aa6:	f7ff fee1 	bl	800086c <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000aaa:	f7ff fddd 	bl	8000668 <HAL_GetTick>
 8000aae:	1b80      	subs	r0, r0, r6
 8000ab0:	42b8      	cmp	r0, r7
 8000ab2:	d8d9      	bhi.n	8000a68 <HAL_ETH_Init+0x118>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000ab4:	9b00      	ldr	r3, [sp, #0]
 8000ab6:	069a      	lsls	r2, r3, #26
 8000ab8:	d5f2      	bpl.n	8000aa0 <HAL_ETH_Init+0x150>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000aba:	466a      	mov	r2, sp
 8000abc:	211f      	movs	r1, #31
 8000abe:	4620      	mov	r0, r4
 8000ac0:	f7ff fed4 	bl	800086c <HAL_ETH_ReadPHYRegister>
 8000ac4:	2800      	cmp	r0, #0
 8000ac6:	d18c      	bne.n	80009e2 <HAL_ETH_Init+0x92>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000ac8:	9b00      	ldr	r3, [sp, #0]
 8000aca:	f013 0210 	ands.w	r2, r3, #16
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000ace:	bf18      	it	ne
 8000ad0:	f44f 6200 	movne.w	r2, #2048	; 0x800
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000ad4:	075b      	lsls	r3, r3, #29
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000ad6:	bf4c      	ite	mi
 8000ad8:	2300      	movmi	r3, #0
      (heth->Init).Speed = ETH_SPEED_100M;
 8000ada:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000ade:	60e2      	str	r2, [r4, #12]
      (heth->Init).Speed = ETH_SPEED_100M;
 8000ae0:	60a3      	str	r3, [r4, #8]
  ETH_MACDMAConfig(heth, err);
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	4620      	mov	r0, r4
 8000ae6:	f7ff fe45 	bl	8000774 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 8000aea:	2301      	movs	r3, #1
 8000aec:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 8000af0:	e78b      	b.n	8000a0a <HAL_ETH_Init+0xba>
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8000af2:	68a3      	ldr	r3, [r4, #8]
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8000af4:	4629      	mov	r1, r5
 8000af6:	68e2      	ldr	r2, [r4, #12]
 8000af8:	4620      	mov	r0, r4
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8000afa:	085b      	lsrs	r3, r3, #1
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8000afc:	ea43 02d2 	orr.w	r2, r3, r2, lsr #3
 8000b00:	b292      	uxth	r2, r2
 8000b02:	f7ff feed 	bl	80008e0 <HAL_ETH_WritePHYRegister>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	f47f af6b 	bne.w	80009e2 <HAL_ETH_Init+0x92>
    HAL_Delay(PHY_CONFIG_DELAY);
 8000b0c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000b10:	f7ff fdb0 	bl	8000674 <HAL_Delay>
 8000b14:	e7e5      	b.n	8000ae2 <HAL_ETH_Init+0x192>
    return HAL_ERROR;
 8000b16:	2501      	movs	r5, #1
 8000b18:	e777      	b.n	8000a0a <HAL_ETH_Init+0xba>
 8000b1a:	bf00      	nop
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40013800 	.word	0x40013800
 8000b24:	feced300 	.word	0xfeced300
 8000b28:	00e4e1bf 	.word	0x00e4e1bf
 8000b2c:	fde9f140 	.word	0xfde9f140
 8000b30:	017d783f 	.word	0x017d783f
 8000b34:	fc6c7900 	.word	0xfc6c7900
 8000b38:	026259ff 	.word	0x026259ff
 8000b3c:	fa0a1f00 	.word	0xfa0a1f00
 8000b40:	02faf07f 	.word	0x02faf07f

08000b44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b48:	680b      	ldr	r3, [r1, #0]
{
 8000b4a:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000d10 <HAL_GPIO_Init+0x1cc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b50:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000b52:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b54:	4a6c      	ldr	r2, [pc, #432]	; (8000d08 <HAL_GPIO_Init+0x1c4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000b56:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8000d14 <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 8000b5a:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b5e:	9c01      	ldr	r4, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 8000b60:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b64:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000b68:	45b6      	cmp	lr, r6
 8000b6a:	f040 80b3 	bne.w	8000cd4 <HAL_GPIO_Init+0x190>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b6e:	684c      	ldr	r4, [r1, #4]
 8000b70:	f024 0710 	bic.w	r7, r4, #16
 8000b74:	2f02      	cmp	r7, #2
 8000b76:	d116      	bne.n	8000ba6 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 8000b78:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000b7c:	f003 0b07 	and.w	fp, r3, #7
 8000b80:	f04f 0c0f 	mov.w	ip, #15
 8000b84:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8000b88:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8000b8c:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000b90:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000b94:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000b98:	690d      	ldr	r5, [r1, #16]
 8000b9a:	fa05 f50b 	lsl.w	r5, r5, fp
 8000b9e:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8000ba2:	f8ca 5020 	str.w	r5, [sl, #32]
 8000ba6:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000baa:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000bac:	f8d0 b000 	ldr.w	fp, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000bb0:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000bb4:	fa05 f50a 	lsl.w	r5, r5, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bb8:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000bba:	fa0c fc0a 	lsl.w	ip, ip, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000bbe:	43ed      	mvns	r5, r5
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bc0:	2f01      	cmp	r7, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000bc2:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000bc6:	ea4c 0c0b 	orr.w	ip, ip, fp
      GPIOx->MODER = temp;
 8000bca:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bce:	d811      	bhi.n	8000bf4 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000bd0:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000bd2:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8000bd6:	68cf      	ldr	r7, [r1, #12]
 8000bd8:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000bdc:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000be0:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000be2:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000be4:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000be8:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000bec:	409f      	lsls	r7, r3
 8000bee:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000bf2:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000bf4:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000bf6:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000bf8:	688f      	ldr	r7, [r1, #8]
 8000bfa:	fa07 f70a 	lsl.w	r7, r7, sl
 8000bfe:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000c00:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c02:	00e5      	lsls	r5, r4, #3
 8000c04:	d566      	bpl.n	8000cd4 <HAL_GPIO_Init+0x190>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c06:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 8000c0a:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000c0e:	f003 0e03 	and.w	lr, r3, #3
 8000c12:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c16:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 8000c1a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000c1e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c22:	f8c8 5044 	str.w	r5, [r8, #68]	; 0x44
 8000c26:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8000c2a:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 8000c2e:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 8000c32:	9503      	str	r5, [sp, #12]
 8000c34:	9d03      	ldr	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000c36:	fa0c f50e 	lsl.w	r5, ip, lr
        temp = SYSCFG->EXTICR[position >> 2];
 8000c3a:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000c3e:	ea2a 0c05 	bic.w	ip, sl, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000c42:	4d32      	ldr	r5, [pc, #200]	; (8000d0c <HAL_GPIO_Init+0x1c8>)
 8000c44:	42a8      	cmp	r0, r5
 8000c46:	d04c      	beq.n	8000ce2 <HAL_GPIO_Init+0x19e>
 8000c48:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c4c:	42a8      	cmp	r0, r5
 8000c4e:	d04a      	beq.n	8000ce6 <HAL_GPIO_Init+0x1a2>
 8000c50:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c54:	42a8      	cmp	r0, r5
 8000c56:	d048      	beq.n	8000cea <HAL_GPIO_Init+0x1a6>
 8000c58:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c5c:	42a8      	cmp	r0, r5
 8000c5e:	d046      	beq.n	8000cee <HAL_GPIO_Init+0x1aa>
 8000c60:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c64:	42a8      	cmp	r0, r5
 8000c66:	d044      	beq.n	8000cf2 <HAL_GPIO_Init+0x1ae>
 8000c68:	4548      	cmp	r0, r9
 8000c6a:	d044      	beq.n	8000cf6 <HAL_GPIO_Init+0x1b2>
 8000c6c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000c70:	42a8      	cmp	r0, r5
 8000c72:	d042      	beq.n	8000cfa <HAL_GPIO_Init+0x1b6>
 8000c74:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c78:	42a8      	cmp	r0, r5
 8000c7a:	d040      	beq.n	8000cfe <HAL_GPIO_Init+0x1ba>
 8000c7c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c80:	42a8      	cmp	r0, r5
 8000c82:	d03e      	beq.n	8000d02 <HAL_GPIO_Init+0x1be>
 8000c84:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c88:	42a8      	cmp	r0, r5
 8000c8a:	bf14      	ite	ne
 8000c8c:	250a      	movne	r5, #10
 8000c8e:	2509      	moveq	r5, #9
 8000c90:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c94:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000c98:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8000c9c:	60bd      	str	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 8000c9e:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->IMR;
 8000ca2:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000ca4:	bf0c      	ite	eq
 8000ca6:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000ca8:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000caa:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 8000cae:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000cb0:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8000cb2:	bf0c      	ite	eq
 8000cb4:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000cb6:	4335      	orrne	r5, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cb8:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 8000cbc:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000cbe:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000cc0:	bf0c      	ite	eq
 8000cc2:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000cc4:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cc6:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8000cc8:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000cca:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8000ccc:	bf54      	ite	pl
 8000cce:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000cd0:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000cd2:	60d5      	str	r5, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	2b10      	cmp	r3, #16
 8000cd8:	f47f af3f 	bne.w	8000b5a <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000cdc:	b005      	add	sp, #20
 8000cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000ce2:	2500      	movs	r5, #0
 8000ce4:	e7d4      	b.n	8000c90 <HAL_GPIO_Init+0x14c>
 8000ce6:	2501      	movs	r5, #1
 8000ce8:	e7d2      	b.n	8000c90 <HAL_GPIO_Init+0x14c>
 8000cea:	2502      	movs	r5, #2
 8000cec:	e7d0      	b.n	8000c90 <HAL_GPIO_Init+0x14c>
 8000cee:	2503      	movs	r5, #3
 8000cf0:	e7ce      	b.n	8000c90 <HAL_GPIO_Init+0x14c>
 8000cf2:	2504      	movs	r5, #4
 8000cf4:	e7cc      	b.n	8000c90 <HAL_GPIO_Init+0x14c>
 8000cf6:	2505      	movs	r5, #5
 8000cf8:	e7ca      	b.n	8000c90 <HAL_GPIO_Init+0x14c>
 8000cfa:	2506      	movs	r5, #6
 8000cfc:	e7c8      	b.n	8000c90 <HAL_GPIO_Init+0x14c>
 8000cfe:	2507      	movs	r5, #7
 8000d00:	e7c6      	b.n	8000c90 <HAL_GPIO_Init+0x14c>
 8000d02:	2508      	movs	r5, #8
 8000d04:	e7c4      	b.n	8000c90 <HAL_GPIO_Init+0x14c>
 8000d06:	bf00      	nop
 8000d08:	40013c00 	.word	0x40013c00
 8000d0c:	40020000 	.word	0x40020000
 8000d10:	40023800 	.word	0x40023800
 8000d14:	40021400 	.word	0x40021400

08000d18 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000d18:	6903      	ldr	r3, [r0, #16]
 8000d1a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000d1c:	bf14      	ite	ne
 8000d1e:	2001      	movne	r0, #1
 8000d20:	2000      	moveq	r0, #0
 8000d22:	4770      	bx	lr

08000d24 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d24:	b10a      	cbz	r2, 8000d2a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000d26:	6181      	str	r1, [r0, #24]
 8000d28:	4770      	bx	lr
 8000d2a:	0409      	lsls	r1, r1, #16
 8000d2c:	e7fb      	b.n	8000d26 <HAL_GPIO_WritePin+0x2>

08000d2e <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000d2e:	6943      	ldr	r3, [r0, #20]
 8000d30:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000d34:	bf08      	it	eq
 8000d36:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d38:	6181      	str	r1, [r0, #24]
 8000d3a:	4770      	bx	lr

08000d3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000d3c:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000d3e:	4b04      	ldr	r3, [pc, #16]	; (8000d50 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000d40:	6959      	ldr	r1, [r3, #20]
 8000d42:	4201      	tst	r1, r0
 8000d44:	d002      	beq.n	8000d4c <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000d46:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000d48:	f001 fd3e 	bl	80027c8 <HAL_GPIO_EXTI_Callback>
 8000d4c:	bd08      	pop	{r3, pc}
 8000d4e:	bf00      	nop
 8000d50:	40013c00 	.word	0x40013c00

08000d54 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000d54:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000d56:	4604      	mov	r4, r0
{
 8000d58:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 8000d5a:	b330      	cbz	r0, 8000daa <HAL_PCD_Init+0x56>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000d5c:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 8000d60:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000d64:	b91b      	cbnz	r3, 8000d6e <HAL_PCD_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000d66:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000d6a:	f001 fe85 	bl	8002a78 <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000d6e:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000d70:	2303      	movs	r3, #3

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000d72:	466e      	mov	r6, sp
 8000d74:	1d27      	adds	r7, r4, #4
  __HAL_PCD_DISABLE(hpcd);
 8000d76:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000d7a:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  __HAL_PCD_DISABLE(hpcd);
 8000d7e:	f001 fa30 	bl	80021e2 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000d82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d84:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000d86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d88:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000d8a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d8e:	4625      	mov	r5, r4
 8000d90:	e886 0003 	stmia.w	r6, {r0, r1}
 8000d94:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000d98:	f855 0b10 	ldr.w	r0, [r5], #16
 8000d9c:	f001 f9e6 	bl	800216c <USB_CoreInit>
 8000da0:	4606      	mov	r6, r0
 8000da2:	b120      	cbz	r0, 8000dae <HAL_PCD_Init+0x5a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000da4:	2302      	movs	r3, #2
 8000da6:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8000daa:	2501      	movs	r5, #1
 8000dac:	e054      	b.n	8000e58 <HAL_PCD_Init+0x104>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000dae:	4601      	mov	r1, r0
 8000db0:	6820      	ldr	r0, [r4, #0]
 8000db2:	f001 fa1c 	bl	80021ee <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000db6:	4630      	mov	r0, r6
 8000db8:	f8d4 e004 	ldr.w	lr, [r4, #4]
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000dbc:	261c      	movs	r6, #28
 8000dbe:	f04f 0c01 	mov.w	ip, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000dc2:	4601      	mov	r1, r0
 8000dc4:	b2c2      	uxtb	r2, r0
 8000dc6:	3001      	adds	r0, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000dc8:	4596      	cmp	lr, r2
 8000dca:	d81b      	bhi.n	8000e04 <HAL_PCD_Init+0xb0>
 8000dcc:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000dce:	261c      	movs	r6, #28
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	b2d8      	uxtb	r0, r3
 8000dd4:	3301      	adds	r3, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000dd6:	4586      	cmp	lr, r0
 8000dd8:	d822      	bhi.n	8000e20 <HAL_PCD_Init+0xcc>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000dda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ddc:	466e      	mov	r6, sp
 8000dde:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000de0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000de2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000de4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000de8:	e886 0003 	stmia.w	r6, {r0, r1}
 8000dec:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000df0:	6820      	ldr	r0, [r4, #0]
 8000df2:	f001 fa3d 	bl	8002270 <USB_DevInit>
 8000df6:	2301      	movs	r3, #1
 8000df8:	4605      	mov	r5, r0
 8000dfa:	b300      	cbz	r0, 8000e3e <HAL_PCD_Init+0xea>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000dfc:	2202      	movs	r2, #2
 8000dfe:	f884 23bd 	strb.w	r2, [r4, #957]	; 0x3bd
 8000e02:	e7d2      	b.n	8000daa <HAL_PCD_Init+0x56>
    hpcd->IN_ep[i].is_in = 1U;
 8000e04:	fb06 4302 	mla	r3, r6, r2, r4
 8000e08:	f883 c03d 	strb.w	ip, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8000e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000e10:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000e14:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 8000e18:	6459      	str	r1, [r3, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000e1a:	6499      	str	r1, [r3, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 8000e1c:	6519      	str	r1, [r3, #80]	; 0x50
 8000e1e:	e7d1      	b.n	8000dc4 <HAL_PCD_Init+0x70>
    hpcd->OUT_ep[i].is_in = 0U;
 8000e20:	fb06 4200 	mla	r2, r6, r0, r4
 8000e24:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 8000e28:	f882 01fc 	strb.w	r0, [r2, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000e2c:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000e30:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000e34:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000e38:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
 8000e3c:	e7c9      	b.n	8000dd2 <HAL_PCD_Init+0x7e>
    return HAL_ERROR;
  }

  hpcd->USB_Address = 0U;
 8000e3e:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000e42:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000e46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d102      	bne.n	8000e52 <HAL_PCD_Init+0xfe>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000e4c:	4620      	mov	r0, r4
 8000e4e:	f000 f806 	bl	8000e5e <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8000e52:	6820      	ldr	r0, [r4, #0]
 8000e54:	f001 fad0 	bl	80023f8 <USB_DevDisconnect>

  return HAL_OK;
}
 8000e58:	4628      	mov	r0, r5
 8000e5a:	b00b      	add	sp, #44	; 0x2c
 8000e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000e5e <HAL_PCDEx_ActivateLPM>:
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  hpcd->lpm_active = 1U;
 8000e5e:	2101      	movs	r1, #1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000e60:	6802      	ldr	r2, [r0, #0]
{
 8000e62:	4603      	mov	r3, r0
  hpcd->lpm_active = 1U;
 8000e64:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8000e68:	2000      	movs	r0, #0
 8000e6a:	f883 03f4 	strb.w	r0, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8000e6e:	6993      	ldr	r3, [r2, #24]
 8000e70:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000e74:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8000e76:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8000e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e7c:	f043 0303 	orr.w	r3, r3, #3
 8000e80:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8000e82:	4770      	bx	lr

08000e84 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000e84:	4a02      	ldr	r2, [pc, #8]	; (8000e90 <HAL_PWR_EnableBkUpAccess+0xc>)
 8000e86:	6813      	ldr	r3, [r2, #0]
 8000e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e8c:	6013      	str	r3, [r2, #0]
 8000e8e:	4770      	bx	lr
 8000e90:	40007000 	.word	0x40007000

08000e94 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e94:	4b19      	ldr	r3, [pc, #100]	; (8000efc <HAL_PWREx_EnableOverDrive+0x68>)
{
 8000e96:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000e9a:	4c19      	ldr	r4, [pc, #100]	; (8000f00 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e9c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000ea0:	641a      	str	r2, [r3, #64]	; 0x40
 8000ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea8:	9301      	str	r3, [sp, #4]
 8000eaa:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000eac:	6823      	ldr	r3, [r4, #0]
 8000eae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eb2:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000eb4:	f7ff fbd8 	bl	8000668 <HAL_GetTick>
 8000eb8:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000eba:	6863      	ldr	r3, [r4, #4]
 8000ebc:	03da      	lsls	r2, r3, #15
 8000ebe:	d50c      	bpl.n	8000eda <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000ec0:	6823      	ldr	r3, [r4, #0]
 8000ec2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ec6:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ec8:	f7ff fbce 	bl	8000668 <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000ecc:	4c0c      	ldr	r4, [pc, #48]	; (8000f00 <HAL_PWREx_EnableOverDrive+0x6c>)
  tickstart = HAL_GetTick();
 8000ece:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000ed0:	6863      	ldr	r3, [r4, #4]
 8000ed2:	039b      	lsls	r3, r3, #14
 8000ed4:	d50a      	bpl.n	8000eec <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	e006      	b.n	8000ee8 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000eda:	f7ff fbc5 	bl	8000668 <HAL_GetTick>
 8000ede:	1b40      	subs	r0, r0, r5
 8000ee0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000ee4:	d9e9      	bls.n	8000eba <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8000ee6:	2003      	movs	r0, #3
}
 8000ee8:	b003      	add	sp, #12
 8000eea:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000eec:	f7ff fbbc 	bl	8000668 <HAL_GetTick>
 8000ef0:	1b40      	subs	r0, r0, r5
 8000ef2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000ef6:	d9eb      	bls.n	8000ed0 <HAL_PWREx_EnableOverDrive+0x3c>
 8000ef8:	e7f5      	b.n	8000ee6 <HAL_PWREx_EnableOverDrive+0x52>
 8000efa:	bf00      	nop
 8000efc:	40023800 	.word	0x40023800
 8000f00:	40007000 	.word	0x40007000

08000f04 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f04:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f08:	4604      	mov	r4, r0
 8000f0a:	b918      	cbnz	r0, 8000f14 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000f0c:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000f0e:	b002      	add	sp, #8
 8000f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f14:	6803      	ldr	r3, [r0, #0]
 8000f16:	07d8      	lsls	r0, r3, #31
 8000f18:	d410      	bmi.n	8000f3c <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f1a:	6823      	ldr	r3, [r4, #0]
 8000f1c:	0799      	lsls	r1, r3, #30
 8000f1e:	d45e      	bmi.n	8000fde <HAL_RCC_OscConfig+0xda>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f20:	6823      	ldr	r3, [r4, #0]
 8000f22:	0719      	lsls	r1, r3, #28
 8000f24:	f100 80a3 	bmi.w	800106e <HAL_RCC_OscConfig+0x16a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f28:	6823      	ldr	r3, [r4, #0]
 8000f2a:	075a      	lsls	r2, r3, #29
 8000f2c:	f100 80c4 	bmi.w	80010b8 <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f30:	69a2      	ldr	r2, [r4, #24]
 8000f32:	2a00      	cmp	r2, #0
 8000f34:	f040 812e 	bne.w	8001194 <HAL_RCC_OscConfig+0x290>
  return HAL_OK;
 8000f38:	2000      	movs	r0, #0
 8000f3a:	e7e8      	b.n	8000f0e <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f3c:	4b93      	ldr	r3, [pc, #588]	; (800118c <HAL_RCC_OscConfig+0x288>)
 8000f3e:	689a      	ldr	r2, [r3, #8]
 8000f40:	f002 020c 	and.w	r2, r2, #12
 8000f44:	2a04      	cmp	r2, #4
 8000f46:	d007      	beq.n	8000f58 <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f48:	689a      	ldr	r2, [r3, #8]
 8000f4a:	f002 020c 	and.w	r2, r2, #12
 8000f4e:	2a08      	cmp	r2, #8
 8000f50:	d10a      	bne.n	8000f68 <HAL_RCC_OscConfig+0x64>
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	025a      	lsls	r2, r3, #9
 8000f56:	d507      	bpl.n	8000f68 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f58:	4b8c      	ldr	r3, [pc, #560]	; (800118c <HAL_RCC_OscConfig+0x288>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	039b      	lsls	r3, r3, #14
 8000f5e:	d5dc      	bpl.n	8000f1a <HAL_RCC_OscConfig+0x16>
 8000f60:	6863      	ldr	r3, [r4, #4]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d1d9      	bne.n	8000f1a <HAL_RCC_OscConfig+0x16>
 8000f66:	e7d1      	b.n	8000f0c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f68:	6863      	ldr	r3, [r4, #4]
 8000f6a:	4d88      	ldr	r5, [pc, #544]	; (800118c <HAL_RCC_OscConfig+0x288>)
 8000f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f70:	d111      	bne.n	8000f96 <HAL_RCC_OscConfig+0x92>
 8000f72:	682b      	ldr	r3, [r5, #0]
 8000f74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f78:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000f7a:	f7ff fb75 	bl	8000668 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f7e:	4d83      	ldr	r5, [pc, #524]	; (800118c <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 8000f80:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f82:	682b      	ldr	r3, [r5, #0]
 8000f84:	039f      	lsls	r7, r3, #14
 8000f86:	d4c8      	bmi.n	8000f1a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f88:	f7ff fb6e 	bl	8000668 <HAL_GetTick>
 8000f8c:	1b80      	subs	r0, r0, r6
 8000f8e:	2864      	cmp	r0, #100	; 0x64
 8000f90:	d9f7      	bls.n	8000f82 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8000f92:	2003      	movs	r0, #3
 8000f94:	e7bb      	b.n	8000f0e <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f96:	b99b      	cbnz	r3, 8000fc0 <HAL_RCC_OscConfig+0xbc>
 8000f98:	682b      	ldr	r3, [r5, #0]
 8000f9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f9e:	602b      	str	r3, [r5, #0]
 8000fa0:	682b      	ldr	r3, [r5, #0]
 8000fa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fa6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000fa8:	f7ff fb5e 	bl	8000668 <HAL_GetTick>
 8000fac:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fae:	682b      	ldr	r3, [r5, #0]
 8000fb0:	0398      	lsls	r0, r3, #14
 8000fb2:	d5b2      	bpl.n	8000f1a <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fb4:	f7ff fb58 	bl	8000668 <HAL_GetTick>
 8000fb8:	1b80      	subs	r0, r0, r6
 8000fba:	2864      	cmp	r0, #100	; 0x64
 8000fbc:	d9f7      	bls.n	8000fae <HAL_RCC_OscConfig+0xaa>
 8000fbe:	e7e8      	b.n	8000f92 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fc4:	682b      	ldr	r3, [r5, #0]
 8000fc6:	d103      	bne.n	8000fd0 <HAL_RCC_OscConfig+0xcc>
 8000fc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fcc:	602b      	str	r3, [r5, #0]
 8000fce:	e7d0      	b.n	8000f72 <HAL_RCC_OscConfig+0x6e>
 8000fd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fd4:	602b      	str	r3, [r5, #0]
 8000fd6:	682b      	ldr	r3, [r5, #0]
 8000fd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fdc:	e7cc      	b.n	8000f78 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fde:	4b6b      	ldr	r3, [pc, #428]	; (800118c <HAL_RCC_OscConfig+0x288>)
 8000fe0:	689a      	ldr	r2, [r3, #8]
 8000fe2:	f012 0f0c 	tst.w	r2, #12
 8000fe6:	d007      	beq.n	8000ff8 <HAL_RCC_OscConfig+0xf4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000fe8:	689a      	ldr	r2, [r3, #8]
 8000fea:	f002 020c 	and.w	r2, r2, #12
 8000fee:	2a08      	cmp	r2, #8
 8000ff0:	d111      	bne.n	8001016 <HAL_RCC_OscConfig+0x112>
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	0259      	lsls	r1, r3, #9
 8000ff6:	d40e      	bmi.n	8001016 <HAL_RCC_OscConfig+0x112>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ff8:	4b64      	ldr	r3, [pc, #400]	; (800118c <HAL_RCC_OscConfig+0x288>)
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	0792      	lsls	r2, r2, #30
 8000ffe:	d502      	bpl.n	8001006 <HAL_RCC_OscConfig+0x102>
 8001000:	68e2      	ldr	r2, [r4, #12]
 8001002:	2a01      	cmp	r2, #1
 8001004:	d182      	bne.n	8000f0c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	6921      	ldr	r1, [r4, #16]
 800100a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800100e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001012:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001014:	e784      	b.n	8000f20 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001016:	68e3      	ldr	r3, [r4, #12]
 8001018:	4d5c      	ldr	r5, [pc, #368]	; (800118c <HAL_RCC_OscConfig+0x288>)
 800101a:	b1bb      	cbz	r3, 800104c <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 800101c:	682b      	ldr	r3, [r5, #0]
 800101e:	f043 0301 	orr.w	r3, r3, #1
 8001022:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001024:	f7ff fb20 	bl	8000668 <HAL_GetTick>
 8001028:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800102a:	682b      	ldr	r3, [r5, #0]
 800102c:	079f      	lsls	r7, r3, #30
 800102e:	d507      	bpl.n	8001040 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001030:	682b      	ldr	r3, [r5, #0]
 8001032:	6922      	ldr	r2, [r4, #16]
 8001034:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001038:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800103c:	602b      	str	r3, [r5, #0]
 800103e:	e76f      	b.n	8000f20 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001040:	f7ff fb12 	bl	8000668 <HAL_GetTick>
 8001044:	1b80      	subs	r0, r0, r6
 8001046:	2802      	cmp	r0, #2
 8001048:	d9ef      	bls.n	800102a <HAL_RCC_OscConfig+0x126>
 800104a:	e7a2      	b.n	8000f92 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 800104c:	682b      	ldr	r3, [r5, #0]
 800104e:	f023 0301 	bic.w	r3, r3, #1
 8001052:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001054:	f7ff fb08 	bl	8000668 <HAL_GetTick>
 8001058:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800105a:	682b      	ldr	r3, [r5, #0]
 800105c:	0798      	lsls	r0, r3, #30
 800105e:	f57f af5f 	bpl.w	8000f20 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001062:	f7ff fb01 	bl	8000668 <HAL_GetTick>
 8001066:	1b80      	subs	r0, r0, r6
 8001068:	2802      	cmp	r0, #2
 800106a:	d9f6      	bls.n	800105a <HAL_RCC_OscConfig+0x156>
 800106c:	e791      	b.n	8000f92 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800106e:	6963      	ldr	r3, [r4, #20]
 8001070:	4d46      	ldr	r5, [pc, #280]	; (800118c <HAL_RCC_OscConfig+0x288>)
 8001072:	b183      	cbz	r3, 8001096 <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 8001074:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001076:	f043 0301 	orr.w	r3, r3, #1
 800107a:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800107c:	f7ff faf4 	bl	8000668 <HAL_GetTick>
 8001080:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001082:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001084:	079b      	lsls	r3, r3, #30
 8001086:	f53f af4f 	bmi.w	8000f28 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800108a:	f7ff faed 	bl	8000668 <HAL_GetTick>
 800108e:	1b80      	subs	r0, r0, r6
 8001090:	2802      	cmp	r0, #2
 8001092:	d9f6      	bls.n	8001082 <HAL_RCC_OscConfig+0x17e>
 8001094:	e77d      	b.n	8000f92 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8001096:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001098:	f023 0301 	bic.w	r3, r3, #1
 800109c:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800109e:	f7ff fae3 	bl	8000668 <HAL_GetTick>
 80010a2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010a4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80010a6:	079f      	lsls	r7, r3, #30
 80010a8:	f57f af3e 	bpl.w	8000f28 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010ac:	f7ff fadc 	bl	8000668 <HAL_GetTick>
 80010b0:	1b80      	subs	r0, r0, r6
 80010b2:	2802      	cmp	r0, #2
 80010b4:	d9f6      	bls.n	80010a4 <HAL_RCC_OscConfig+0x1a0>
 80010b6:	e76c      	b.n	8000f92 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010b8:	4b34      	ldr	r3, [pc, #208]	; (800118c <HAL_RCC_OscConfig+0x288>)
 80010ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010bc:	00d0      	lsls	r0, r2, #3
 80010be:	d427      	bmi.n	8001110 <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 80010c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 80010c2:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80010c4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80010c8:	641a      	str	r2, [r3, #64]	; 0x40
 80010ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d0:	9301      	str	r3, [sp, #4]
 80010d2:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010d4:	4d2e      	ldr	r5, [pc, #184]	; (8001190 <HAL_RCC_OscConfig+0x28c>)
 80010d6:	682b      	ldr	r3, [r5, #0]
 80010d8:	05d9      	lsls	r1, r3, #23
 80010da:	d51b      	bpl.n	8001114 <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010dc:	68a3      	ldr	r3, [r4, #8]
 80010de:	4d2b      	ldr	r5, [pc, #172]	; (800118c <HAL_RCC_OscConfig+0x288>)
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d127      	bne.n	8001134 <HAL_RCC_OscConfig+0x230>
 80010e4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80010e6:	f043 0301 	orr.w	r3, r3, #1
 80010ea:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010ec:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80010f0:	f7ff faba 	bl	8000668 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010f4:	4f25      	ldr	r7, [pc, #148]	; (800118c <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 80010f6:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80010fa:	079b      	lsls	r3, r3, #30
 80010fc:	d53f      	bpl.n	800117e <HAL_RCC_OscConfig+0x27a>
    if(pwrclkchanged == SET)
 80010fe:	2e00      	cmp	r6, #0
 8001100:	f43f af16 	beq.w	8000f30 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001104:	4a21      	ldr	r2, [pc, #132]	; (800118c <HAL_RCC_OscConfig+0x288>)
 8001106:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001108:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800110c:	6413      	str	r3, [r2, #64]	; 0x40
 800110e:	e70f      	b.n	8000f30 <HAL_RCC_OscConfig+0x2c>
  FlagStatus pwrclkchanged = RESET;
 8001110:	2600      	movs	r6, #0
 8001112:	e7df      	b.n	80010d4 <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 8001114:	682b      	ldr	r3, [r5, #0]
 8001116:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800111a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800111c:	f7ff faa4 	bl	8000668 <HAL_GetTick>
 8001120:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001122:	682b      	ldr	r3, [r5, #0]
 8001124:	05da      	lsls	r2, r3, #23
 8001126:	d4d9      	bmi.n	80010dc <HAL_RCC_OscConfig+0x1d8>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001128:	f7ff fa9e 	bl	8000668 <HAL_GetTick>
 800112c:	1bc0      	subs	r0, r0, r7
 800112e:	2864      	cmp	r0, #100	; 0x64
 8001130:	d9f7      	bls.n	8001122 <HAL_RCC_OscConfig+0x21e>
 8001132:	e72e      	b.n	8000f92 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001134:	b9ab      	cbnz	r3, 8001162 <HAL_RCC_OscConfig+0x25e>
 8001136:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001138:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800113c:	f023 0301 	bic.w	r3, r3, #1
 8001140:	672b      	str	r3, [r5, #112]	; 0x70
 8001142:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001144:	f023 0304 	bic.w	r3, r3, #4
 8001148:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800114a:	f7ff fa8d 	bl	8000668 <HAL_GetTick>
 800114e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001150:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001152:	0798      	lsls	r0, r3, #30
 8001154:	d5d3      	bpl.n	80010fe <HAL_RCC_OscConfig+0x1fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001156:	f7ff fa87 	bl	8000668 <HAL_GetTick>
 800115a:	1bc0      	subs	r0, r0, r7
 800115c:	4540      	cmp	r0, r8
 800115e:	d9f7      	bls.n	8001150 <HAL_RCC_OscConfig+0x24c>
 8001160:	e717      	b.n	8000f92 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001162:	2b05      	cmp	r3, #5
 8001164:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001166:	d103      	bne.n	8001170 <HAL_RCC_OscConfig+0x26c>
 8001168:	f043 0304 	orr.w	r3, r3, #4
 800116c:	672b      	str	r3, [r5, #112]	; 0x70
 800116e:	e7b9      	b.n	80010e4 <HAL_RCC_OscConfig+0x1e0>
 8001170:	f023 0301 	bic.w	r3, r3, #1
 8001174:	672b      	str	r3, [r5, #112]	; 0x70
 8001176:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001178:	f023 0304 	bic.w	r3, r3, #4
 800117c:	e7b5      	b.n	80010ea <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800117e:	f7ff fa73 	bl	8000668 <HAL_GetTick>
 8001182:	eba0 0008 	sub.w	r0, r0, r8
 8001186:	42a8      	cmp	r0, r5
 8001188:	d9b6      	bls.n	80010f8 <HAL_RCC_OscConfig+0x1f4>
 800118a:	e702      	b.n	8000f92 <HAL_RCC_OscConfig+0x8e>
 800118c:	40023800 	.word	0x40023800
 8001190:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001194:	4d24      	ldr	r5, [pc, #144]	; (8001228 <HAL_RCC_OscConfig+0x324>)
 8001196:	68ab      	ldr	r3, [r5, #8]
 8001198:	f003 030c 	and.w	r3, r3, #12
 800119c:	2b08      	cmp	r3, #8
 800119e:	f43f aeb5 	beq.w	8000f0c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 80011a2:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011a4:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80011a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80011aa:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011ac:	d12f      	bne.n	800120e <HAL_RCC_OscConfig+0x30a>
        tickstart = HAL_GetTick();
 80011ae:	f7ff fa5b 	bl	8000668 <HAL_GetTick>
 80011b2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011b4:	682b      	ldr	r3, [r5, #0]
 80011b6:	0199      	lsls	r1, r3, #6
 80011b8:	d423      	bmi.n	8001202 <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011ba:	6a22      	ldr	r2, [r4, #32]
 80011bc:	69e3      	ldr	r3, [r4, #28]
 80011be:	4313      	orrs	r3, r2
 80011c0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80011c2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80011c6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80011c8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80011cc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80011ce:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80011d2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011d4:	4c14      	ldr	r4, [pc, #80]	; (8001228 <HAL_RCC_OscConfig+0x324>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011d6:	0852      	lsrs	r2, r2, #1
 80011d8:	3a01      	subs	r2, #1
 80011da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80011de:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80011e0:	682b      	ldr	r3, [r5, #0]
 80011e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80011e6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80011e8:	f7ff fa3e 	bl	8000668 <HAL_GetTick>
 80011ec:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011ee:	6823      	ldr	r3, [r4, #0]
 80011f0:	019a      	lsls	r2, r3, #6
 80011f2:	f53f aea1 	bmi.w	8000f38 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011f6:	f7ff fa37 	bl	8000668 <HAL_GetTick>
 80011fa:	1b40      	subs	r0, r0, r5
 80011fc:	2802      	cmp	r0, #2
 80011fe:	d9f6      	bls.n	80011ee <HAL_RCC_OscConfig+0x2ea>
 8001200:	e6c7      	b.n	8000f92 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001202:	f7ff fa31 	bl	8000668 <HAL_GetTick>
 8001206:	1b80      	subs	r0, r0, r6
 8001208:	2802      	cmp	r0, #2
 800120a:	d9d3      	bls.n	80011b4 <HAL_RCC_OscConfig+0x2b0>
 800120c:	e6c1      	b.n	8000f92 <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
 800120e:	f7ff fa2b 	bl	8000668 <HAL_GetTick>
 8001212:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001214:	682b      	ldr	r3, [r5, #0]
 8001216:	019b      	lsls	r3, r3, #6
 8001218:	f57f ae8e 	bpl.w	8000f38 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800121c:	f7ff fa24 	bl	8000668 <HAL_GetTick>
 8001220:	1b00      	subs	r0, r0, r4
 8001222:	2802      	cmp	r0, #2
 8001224:	d9f6      	bls.n	8001214 <HAL_RCC_OscConfig+0x310>
 8001226:	e6b4      	b.n	8000f92 <HAL_RCC_OscConfig+0x8e>
 8001228:	40023800 	.word	0x40023800

0800122c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800122c:	4913      	ldr	r1, [pc, #76]	; (800127c <HAL_RCC_GetSysClockFreq+0x50>)
{
 800122e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001230:	688b      	ldr	r3, [r1, #8]
 8001232:	f003 030c 	and.w	r3, r3, #12
 8001236:	2b04      	cmp	r3, #4
 8001238:	d003      	beq.n	8001242 <HAL_RCC_GetSysClockFreq+0x16>
 800123a:	2b08      	cmp	r3, #8
 800123c:	d003      	beq.n	8001246 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800123e:	4810      	ldr	r0, [pc, #64]	; (8001280 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001240:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001242:	4810      	ldr	r0, [pc, #64]	; (8001284 <HAL_RCC_GetSysClockFreq+0x58>)
 8001244:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001246:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001248:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800124a:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800124c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001250:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001254:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001258:	bf1a      	itte	ne
 800125a:	480a      	ldrne	r0, [pc, #40]	; (8001284 <HAL_RCC_GetSysClockFreq+0x58>)
 800125c:	2300      	movne	r3, #0
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800125e:	4808      	ldreq	r0, [pc, #32]	; (8001280 <HAL_RCC_GetSysClockFreq+0x54>)
 8001260:	fba1 0100 	umull	r0, r1, r1, r0
 8001264:	f7ff f83c 	bl	80002e0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8001268:	4b04      	ldr	r3, [pc, #16]	; (800127c <HAL_RCC_GetSysClockFreq+0x50>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001270:	3301      	adds	r3, #1
 8001272:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001274:	fbb0 f0f3 	udiv	r0, r0, r3
 8001278:	bd08      	pop	{r3, pc}
 800127a:	bf00      	nop
 800127c:	40023800 	.word	0x40023800
 8001280:	00f42400 	.word	0x00f42400
 8001284:	007a1200 	.word	0x007a1200

08001288 <HAL_RCC_ClockConfig>:
{
 8001288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800128c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800128e:	4604      	mov	r4, r0
 8001290:	b910      	cbnz	r0, 8001298 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001292:	2001      	movs	r0, #1
 8001294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001298:	4a46      	ldr	r2, [pc, #280]	; (80013b4 <HAL_RCC_ClockConfig+0x12c>)
 800129a:	6813      	ldr	r3, [r2, #0]
 800129c:	f003 030f 	and.w	r3, r3, #15
 80012a0:	428b      	cmp	r3, r1
 80012a2:	d328      	bcc.n	80012f6 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012a4:	6821      	ldr	r1, [r4, #0]
 80012a6:	078f      	lsls	r7, r1, #30
 80012a8:	d430      	bmi.n	800130c <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012aa:	07c8      	lsls	r0, r1, #31
 80012ac:	d443      	bmi.n	8001336 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80012ae:	4a41      	ldr	r2, [pc, #260]	; (80013b4 <HAL_RCC_ClockConfig+0x12c>)
 80012b0:	6813      	ldr	r3, [r2, #0]
 80012b2:	f003 030f 	and.w	r3, r3, #15
 80012b6:	429d      	cmp	r5, r3
 80012b8:	d367      	bcc.n	800138a <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012ba:	6822      	ldr	r2, [r4, #0]
 80012bc:	0751      	lsls	r1, r2, #29
 80012be:	d470      	bmi.n	80013a2 <HAL_RCC_ClockConfig+0x11a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012c0:	0713      	lsls	r3, r2, #28
 80012c2:	d507      	bpl.n	80012d4 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80012c4:	4a3c      	ldr	r2, [pc, #240]	; (80013b8 <HAL_RCC_ClockConfig+0x130>)
 80012c6:	6921      	ldr	r1, [r4, #16]
 80012c8:	6893      	ldr	r3, [r2, #8]
 80012ca:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80012ce:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80012d2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80012d4:	f7ff ffaa 	bl	800122c <HAL_RCC_GetSysClockFreq>
 80012d8:	4b37      	ldr	r3, [pc, #220]	; (80013b8 <HAL_RCC_ClockConfig+0x130>)
 80012da:	4a38      	ldr	r2, [pc, #224]	; (80013bc <HAL_RCC_ClockConfig+0x134>)
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80012e2:	5cd3      	ldrb	r3, [r2, r3]
 80012e4:	40d8      	lsrs	r0, r3
 80012e6:	4b36      	ldr	r3, [pc, #216]	; (80013c0 <HAL_RCC_ClockConfig+0x138>)
 80012e8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80012ea:	2000      	movs	r0, #0
 80012ec:	f7ff f980 	bl	80005f0 <HAL_InitTick>
  return HAL_OK;
 80012f0:	2000      	movs	r0, #0
 80012f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012f6:	6813      	ldr	r3, [r2, #0]
 80012f8:	f023 030f 	bic.w	r3, r3, #15
 80012fc:	430b      	orrs	r3, r1
 80012fe:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001300:	6813      	ldr	r3, [r2, #0]
 8001302:	f003 030f 	and.w	r3, r3, #15
 8001306:	4299      	cmp	r1, r3
 8001308:	d1c3      	bne.n	8001292 <HAL_RCC_ClockConfig+0xa>
 800130a:	e7cb      	b.n	80012a4 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800130c:	f011 0f04 	tst.w	r1, #4
 8001310:	4b29      	ldr	r3, [pc, #164]	; (80013b8 <HAL_RCC_ClockConfig+0x130>)
 8001312:	d003      	beq.n	800131c <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001314:	689a      	ldr	r2, [r3, #8]
 8001316:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 800131a:	609a      	str	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800131c:	070e      	lsls	r6, r1, #28
 800131e:	d503      	bpl.n	8001328 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001320:	689a      	ldr	r2, [r3, #8]
 8001322:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8001326:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001328:	689a      	ldr	r2, [r3, #8]
 800132a:	68a0      	ldr	r0, [r4, #8]
 800132c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001330:	4302      	orrs	r2, r0
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	e7b9      	b.n	80012aa <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001336:	6861      	ldr	r1, [r4, #4]
 8001338:	4b1f      	ldr	r3, [pc, #124]	; (80013b8 <HAL_RCC_ClockConfig+0x130>)
 800133a:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800133c:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800133e:	d11c      	bne.n	800137a <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001340:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001344:	d0a5      	beq.n	8001292 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001346:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001348:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800134c:	4e1a      	ldr	r6, [pc, #104]	; (80013b8 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800134e:	f022 0203 	bic.w	r2, r2, #3
 8001352:	430a      	orrs	r2, r1
 8001354:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001356:	f7ff f987 	bl	8000668 <HAL_GetTick>
 800135a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800135c:	68b3      	ldr	r3, [r6, #8]
 800135e:	6862      	ldr	r2, [r4, #4]
 8001360:	f003 030c 	and.w	r3, r3, #12
 8001364:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001368:	d0a1      	beq.n	80012ae <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800136a:	f7ff f97d 	bl	8000668 <HAL_GetTick>
 800136e:	1bc0      	subs	r0, r0, r7
 8001370:	4540      	cmp	r0, r8
 8001372:	d9f3      	bls.n	800135c <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8001374:	2003      	movs	r0, #3
}
 8001376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800137a:	2902      	cmp	r1, #2
 800137c:	d102      	bne.n	8001384 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800137e:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001382:	e7df      	b.n	8001344 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001384:	f012 0f02 	tst.w	r2, #2
 8001388:	e7dc      	b.n	8001344 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800138a:	6813      	ldr	r3, [r2, #0]
 800138c:	f023 030f 	bic.w	r3, r3, #15
 8001390:	432b      	orrs	r3, r5
 8001392:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001394:	6813      	ldr	r3, [r2, #0]
 8001396:	f003 030f 	and.w	r3, r3, #15
 800139a:	429d      	cmp	r5, r3
 800139c:	f47f af79 	bne.w	8001292 <HAL_RCC_ClockConfig+0xa>
 80013a0:	e78b      	b.n	80012ba <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013a2:	4905      	ldr	r1, [pc, #20]	; (80013b8 <HAL_RCC_ClockConfig+0x130>)
 80013a4:	68e0      	ldr	r0, [r4, #12]
 80013a6:	688b      	ldr	r3, [r1, #8]
 80013a8:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80013ac:	4303      	orrs	r3, r0
 80013ae:	608b      	str	r3, [r1, #8]
 80013b0:	e786      	b.n	80012c0 <HAL_RCC_ClockConfig+0x38>
 80013b2:	bf00      	nop
 80013b4:	40023c00 	.word	0x40023c00
 80013b8:	40023800 	.word	0x40023800
 80013bc:	080039fd 	.word	0x080039fd
 80013c0:	20000008 	.word	0x20000008

080013c4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80013c4:	4b01      	ldr	r3, [pc, #4]	; (80013cc <HAL_RCC_GetHCLKFreq+0x8>)
 80013c6:	6818      	ldr	r0, [r3, #0]
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	20000008 	.word	0x20000008

080013d0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80013d0:	4b04      	ldr	r3, [pc, #16]	; (80013e4 <HAL_RCC_GetPCLK1Freq+0x14>)
 80013d2:	4a05      	ldr	r2, [pc, #20]	; (80013e8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80013da:	5cd3      	ldrb	r3, [r2, r3]
 80013dc:	4a03      	ldr	r2, [pc, #12]	; (80013ec <HAL_RCC_GetPCLK1Freq+0x1c>)
 80013de:	6810      	ldr	r0, [r2, #0]
}
 80013e0:	40d8      	lsrs	r0, r3
 80013e2:	4770      	bx	lr
 80013e4:	40023800 	.word	0x40023800
 80013e8:	08003a0d 	.word	0x08003a0d
 80013ec:	20000008 	.word	0x20000008

080013f0 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80013f0:	4b04      	ldr	r3, [pc, #16]	; (8001404 <HAL_RCC_GetPCLK2Freq+0x14>)
 80013f2:	4a05      	ldr	r2, [pc, #20]	; (8001408 <HAL_RCC_GetPCLK2Freq+0x18>)
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80013fa:	5cd3      	ldrb	r3, [r2, r3]
 80013fc:	4a03      	ldr	r2, [pc, #12]	; (800140c <HAL_RCC_GetPCLK2Freq+0x1c>)
 80013fe:	6810      	ldr	r0, [r2, #0]
}
 8001400:	40d8      	lsrs	r0, r3
 8001402:	4770      	bx	lr
 8001404:	40023800 	.word	0x40023800
 8001408:	08003a0d 	.word	0x08003a0d
 800140c:	20000008 	.word	0x20000008

08001410 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001410:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001414:	6802      	ldr	r2, [r0, #0]
{
 8001416:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001418:	f012 0601 	ands.w	r6, r2, #1
 800141c:	d00b      	beq.n	8001436 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800141e:	4bba      	ldr	r3, [pc, #744]	; (8001708 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001420:	6899      	ldr	r1, [r3, #8]
 8001422:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8001426:	6099      	str	r1, [r3, #8]
 8001428:	6b46      	ldr	r6, [r0, #52]	; 0x34
 800142a:	6899      	ldr	r1, [r3, #8]
 800142c:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800142e:	fab6 f686 	clz	r6, r6
 8001432:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001434:	6099      	str	r1, [r3, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001436:	f412 2500 	ands.w	r5, r2, #524288	; 0x80000
 800143a:	d012      	beq.n	8001462 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800143c:	49b2      	ldr	r1, [pc, #712]	; (8001708 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800143e:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8001440:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001444:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001448:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1;
 800144c:	bf08      	it	eq
 800144e:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001450:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001454:	bf16      	itet	ne
 8001456:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 800145a:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800145c:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800145e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001462:	02d7      	lsls	r7, r2, #11
 8001464:	d510      	bpl.n	8001488 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001466:	48a8      	ldr	r0, [pc, #672]	; (8001708 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001468:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800146a:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800146e:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001472:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001476:	ea43 0301 	orr.w	r3, r3, r1
 800147a:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800147e:	f000 81a9 	beq.w	80017d4 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8001482:	2900      	cmp	r1, #0
 8001484:	bf08      	it	eq
 8001486:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8001488:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 800148c:	bf18      	it	ne
 800148e:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001490:	0690      	lsls	r0, r2, #26
 8001492:	d531      	bpl.n	80014f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001494:	4b9c      	ldr	r3, [pc, #624]	; (8001708 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001496:	4f9d      	ldr	r7, [pc, #628]	; (800170c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8001498:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800149a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800149e:	641a      	str	r2, [r3, #64]	; 0x40
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a6:	9301      	str	r3, [sp, #4]
 80014a8:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b0:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80014b2:	f7ff f8d9 	bl	8000668 <HAL_GetTick>
 80014b6:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	05d9      	lsls	r1, r3, #23
 80014bc:	f140 818c 	bpl.w	80017d8 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80014c0:	4f91      	ldr	r7, [pc, #580]	; (8001708 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80014c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80014c4:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80014c8:	f040 8191 	bne.w	80017ee <HAL_RCCEx_PeriphCLKConfig+0x3de>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80014cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80014ce:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80014d2:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80014d6:	4a8c      	ldr	r2, [pc, #560]	; (8001708 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80014d8:	f040 81af 	bne.w	800183a <HAL_RCCEx_PeriphCLKConfig+0x42a>
 80014dc:	6891      	ldr	r1, [r2, #8]
 80014de:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 80014e2:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80014e6:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 80014ea:	4301      	orrs	r1, r0
 80014ec:	6091      	str	r1, [r2, #8]
 80014ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014f2:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80014f4:	430b      	orrs	r3, r1
 80014f6:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80014f8:	6823      	ldr	r3, [r4, #0]
 80014fa:	06df      	lsls	r7, r3, #27
 80014fc:	d50c      	bpl.n	8001518 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80014fe:	4a82      	ldr	r2, [pc, #520]	; (8001708 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001500:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8001504:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8001508:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 800150c:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8001510:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001512:	4301      	orrs	r1, r0
 8001514:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001518:	0458      	lsls	r0, r3, #17
 800151a:	d508      	bpl.n	800152e <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800151c:	497a      	ldr	r1, [pc, #488]	; (8001708 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800151e:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8001520:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001524:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001528:	4302      	orrs	r2, r0
 800152a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800152e:	0419      	lsls	r1, r3, #16
 8001530:	d508      	bpl.n	8001544 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001532:	4975      	ldr	r1, [pc, #468]	; (8001708 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001534:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8001536:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800153a:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800153e:	4302      	orrs	r2, r0
 8001540:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001544:	03da      	lsls	r2, r3, #15
 8001546:	d508      	bpl.n	800155a <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001548:	496f      	ldr	r1, [pc, #444]	; (8001708 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800154a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800154c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001550:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001554:	4302      	orrs	r2, r0
 8001556:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800155a:	039f      	lsls	r7, r3, #14
 800155c:	d508      	bpl.n	8001570 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800155e:	496a      	ldr	r1, [pc, #424]	; (8001708 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001560:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8001562:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001566:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800156a:	4302      	orrs	r2, r0
 800156c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001570:	0658      	lsls	r0, r3, #25
 8001572:	d508      	bpl.n	8001586 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001574:	4964      	ldr	r1, [pc, #400]	; (8001708 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001576:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001578:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800157c:	f022 0203 	bic.w	r2, r2, #3
 8001580:	4302      	orrs	r2, r0
 8001582:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001586:	0619      	lsls	r1, r3, #24
 8001588:	d508      	bpl.n	800159c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800158a:	495f      	ldr	r1, [pc, #380]	; (8001708 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800158c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800158e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001592:	f022 020c 	bic.w	r2, r2, #12
 8001596:	4302      	orrs	r2, r0
 8001598:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800159c:	05da      	lsls	r2, r3, #23
 800159e:	d508      	bpl.n	80015b2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80015a0:	4959      	ldr	r1, [pc, #356]	; (8001708 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80015a2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80015a4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80015a8:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80015ac:	4302      	orrs	r2, r0
 80015ae:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80015b2:	059f      	lsls	r7, r3, #22
 80015b4:	d508      	bpl.n	80015c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80015b6:	4954      	ldr	r1, [pc, #336]	; (8001708 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80015b8:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80015ba:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80015be:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80015c2:	4302      	orrs	r2, r0
 80015c4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80015c8:	0558      	lsls	r0, r3, #21
 80015ca:	d508      	bpl.n	80015de <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80015cc:	494e      	ldr	r1, [pc, #312]	; (8001708 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80015ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80015d0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80015d4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80015d8:	4302      	orrs	r2, r0
 80015da:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80015de:	0519      	lsls	r1, r3, #20
 80015e0:	d508      	bpl.n	80015f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80015e2:	4949      	ldr	r1, [pc, #292]	; (8001708 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80015e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80015e6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80015ea:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80015ee:	4302      	orrs	r2, r0
 80015f0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80015f4:	04da      	lsls	r2, r3, #19
 80015f6:	d508      	bpl.n	800160a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80015f8:	4943      	ldr	r1, [pc, #268]	; (8001708 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80015fa:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80015fc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001600:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001604:	4302      	orrs	r2, r0
 8001606:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800160a:	049f      	lsls	r7, r3, #18
 800160c:	d508      	bpl.n	8001620 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800160e:	493e      	ldr	r1, [pc, #248]	; (8001708 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001610:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001612:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001616:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800161a:	4302      	orrs	r2, r0
 800161c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001620:	0258      	lsls	r0, r3, #9
 8001622:	d508      	bpl.n	8001636 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001624:	4938      	ldr	r1, [pc, #224]	; (8001708 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001626:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8001628:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800162c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001630:	4302      	orrs	r2, r0
 8001632:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001636:	0299      	lsls	r1, r3, #10
 8001638:	d50c      	bpl.n	8001654 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800163a:	4833      	ldr	r0, [pc, #204]	; (8001708 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800163c:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800163e:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8001642:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001646:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 800164a:	bf08      	it	eq
 800164c:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800164e:	430a      	orrs	r2, r1
 8001650:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8001654:	f013 0f08 	tst.w	r3, #8
 8001658:	bf18      	it	ne
 800165a:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800165c:	035a      	lsls	r2, r3, #13
 800165e:	d508      	bpl.n	8001672 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001660:	4929      	ldr	r1, [pc, #164]	; (8001708 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001662:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8001664:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001668:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800166c:	4302      	orrs	r2, r0
 800166e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001672:	021f      	lsls	r7, r3, #8
 8001674:	d509      	bpl.n	800168a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001676:	4924      	ldr	r1, [pc, #144]	; (8001708 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001678:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800167c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001680:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001684:	4302      	orrs	r2, r0
 8001686:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800168a:	0158      	lsls	r0, r3, #5
 800168c:	d509      	bpl.n	80016a2 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800168e:	491e      	ldr	r1, [pc, #120]	; (8001708 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001690:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8001694:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001698:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800169c:	4302      	orrs	r2, r0
 800169e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80016a2:	0119      	lsls	r1, r3, #4
 80016a4:	d509      	bpl.n	80016ba <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80016a6:	4918      	ldr	r1, [pc, #96]	; (8001708 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80016a8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80016ac:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 80016b0:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80016b4:	4302      	orrs	r2, r0
 80016b6:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80016ba:	00da      	lsls	r2, r3, #3
 80016bc:	d509      	bpl.n	80016d2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80016be:	4912      	ldr	r1, [pc, #72]	; (8001708 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80016c0:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 80016c4:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 80016c8:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80016cc:	4302      	orrs	r2, r0
 80016ce:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80016d2:	2e01      	cmp	r6, #1
 80016d4:	f000 80b5 	beq.w	8001842 <HAL_RCCEx_PeriphCLKConfig+0x432>
 80016d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80016dc:	f000 80b1 	beq.w	8001842 <HAL_RCCEx_PeriphCLKConfig+0x432>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80016e0:	2d01      	cmp	r5, #1
 80016e2:	d175      	bne.n	80017d0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80016e4:	4d08      	ldr	r5, [pc, #32]	; (8001708 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80016e6:	682b      	ldr	r3, [r5, #0]
 80016e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016ec:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80016ee:	f7fe ffbb 	bl	8000668 <HAL_GetTick>
 80016f2:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80016f4:	682b      	ldr	r3, [r5, #0]
 80016f6:	009f      	lsls	r7, r3, #2
 80016f8:	f100 8127 	bmi.w	800194a <HAL_RCCEx_PeriphCLKConfig+0x53a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80016fc:	6821      	ldr	r1, [r4, #0]
 80016fe:	030e      	lsls	r6, r1, #12
 8001700:	d506      	bpl.n	8001710 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8001702:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001704:	b143      	cbz	r3, 8001718 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8001706:	e003      	b.n	8001710 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8001708:	40023800 	.word	0x40023800
 800170c:	40007000 	.word	0x40007000
 8001710:	02cd      	lsls	r5, r1, #11
 8001712:	d51d      	bpl.n	8001750 <HAL_RCCEx_PeriphCLKConfig+0x340>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001714:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001716:	b9db      	cbnz	r3, 8001750 <HAL_RCCEx_PeriphCLKConfig+0x340>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001718:	4a93      	ldr	r2, [pc, #588]	; (8001968 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800171a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800171e:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001722:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001726:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800172a:	4303      	orrs	r3, r0
 800172c:	6960      	ldr	r0, [r4, #20]
 800172e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001732:	69a0      	ldr	r0, [r4, #24]
 8001734:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001738:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800173c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001740:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001742:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8001746:	3801      	subs	r0, #1
 8001748:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800174c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001750:	0288      	lsls	r0, r1, #10
 8001752:	d515      	bpl.n	8001780 <HAL_RCCEx_PeriphCLKConfig+0x370>
 8001754:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001756:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800175a:	d111      	bne.n	8001780 <HAL_RCCEx_PeriphCLKConfig+0x370>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800175c:	4a82      	ldr	r2, [pc, #520]	; (8001968 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800175e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001762:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8001766:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800176a:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800176e:	4303      	orrs	r3, r0
 8001770:	6960      	ldr	r0, [r4, #20]
 8001772:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001776:	6a20      	ldr	r0, [r4, #32]
 8001778:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800177c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001780:	070a      	lsls	r2, r1, #28
 8001782:	d519      	bpl.n	80017b8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001784:	4978      	ldr	r1, [pc, #480]	; (8001968 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001786:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800178a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800178e:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8001792:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001796:	4313      	orrs	r3, r2
 8001798:	6962      	ldr	r2, [r4, #20]
 800179a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800179e:	69e2      	ldr	r2, [r4, #28]
 80017a0:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80017a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80017a8:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 80017ac:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80017ae:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80017b2:	4313      	orrs	r3, r2
 80017b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80017b8:	4c6b      	ldr	r4, [pc, #428]	; (8001968 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80017ba:	6823      	ldr	r3, [r4, #0]
 80017bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017c0:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80017c2:	f7fe ff51 	bl	8000668 <HAL_GetTick>
 80017c6:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80017c8:	6823      	ldr	r3, [r4, #0]
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	f140 80c4 	bpl.w	8001958 <HAL_RCCEx_PeriphCLKConfig+0x548>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80017d0:	2000      	movs	r0, #0
 80017d2:	e009      	b.n	80017e8 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      plli2sused = 1;
 80017d4:	2601      	movs	r6, #1
 80017d6:	e657      	b.n	8001488 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017d8:	f7fe ff46 	bl	8000668 <HAL_GetTick>
 80017dc:	eba0 0008 	sub.w	r0, r0, r8
 80017e0:	2864      	cmp	r0, #100	; 0x64
 80017e2:	f67f ae69 	bls.w	80014b8 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 80017e6:	2003      	movs	r0, #3
}
 80017e8:	b003      	add	sp, #12
 80017ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80017ee:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80017f0:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80017f4:	4293      	cmp	r3, r2
 80017f6:	f43f ae69 	beq.w	80014cc <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80017fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80017fc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80017fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8001802:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001806:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001808:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800180a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800180e:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8001810:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001812:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001814:	07da      	lsls	r2, r3, #31
 8001816:	f57f ae59 	bpl.w	80014cc <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 800181a:	f7fe ff25 	bl	8000668 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800181e:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001822:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001824:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001826:	079b      	lsls	r3, r3, #30
 8001828:	f53f ae50 	bmi.w	80014cc <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800182c:	f7fe ff1c 	bl	8000668 <HAL_GetTick>
 8001830:	eba0 0008 	sub.w	r0, r0, r8
 8001834:	4548      	cmp	r0, r9
 8001836:	d9f5      	bls.n	8001824 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8001838:	e7d5      	b.n	80017e6 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800183a:	6891      	ldr	r1, [r2, #8]
 800183c:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001840:	e654      	b.n	80014ec <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 8001842:	4e49      	ldr	r6, [pc, #292]	; (8001968 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001844:	6833      	ldr	r3, [r6, #0]
 8001846:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800184a:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800184c:	f7fe ff0c 	bl	8000668 <HAL_GetTick>
 8001850:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001852:	6833      	ldr	r3, [r6, #0]
 8001854:	011b      	lsls	r3, r3, #4
 8001856:	d472      	bmi.n	800193e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001858:	6822      	ldr	r2, [r4, #0]
 800185a:	07d7      	lsls	r7, r2, #31
 800185c:	d512      	bpl.n	8001884 <HAL_RCCEx_PeriphCLKConfig+0x474>
 800185e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001860:	b983      	cbnz	r3, 8001884 <HAL_RCCEx_PeriphCLKConfig+0x474>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001862:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001866:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800186a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800186e:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8001872:	430b      	orrs	r3, r1
 8001874:	6861      	ldr	r1, [r4, #4]
 8001876:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800187a:	68a1      	ldr	r1, [r4, #8]
 800187c:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8001880:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001884:	0316      	lsls	r6, r2, #12
 8001886:	d503      	bpl.n	8001890 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8001888:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800188a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800188e:	d005      	beq.n	800189c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8001890:	02d0      	lsls	r0, r2, #11
 8001892:	d51e      	bpl.n	80018d2 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001894:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001896:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800189a:	d11a      	bne.n	80018d2 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800189c:	4932      	ldr	r1, [pc, #200]	; (8001968 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800189e:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80018a2:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80018a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018aa:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80018ae:	4303      	orrs	r3, r0
 80018b0:	6860      	ldr	r0, [r4, #4]
 80018b2:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80018b6:	68e0      	ldr	r0, [r4, #12]
 80018b8:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80018bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80018c0:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 80018c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80018c6:	f020 001f 	bic.w	r0, r0, #31
 80018ca:	3b01      	subs	r3, #1
 80018cc:	4303      	orrs	r3, r0
 80018ce:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80018d2:	01d1      	lsls	r1, r2, #7
 80018d4:	d511      	bpl.n	80018fa <HAL_RCCEx_PeriphCLKConfig+0x4ea>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80018d6:	4924      	ldr	r1, [pc, #144]	; (8001968 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80018d8:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80018dc:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80018e0:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80018e4:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80018e8:	4303      	orrs	r3, r0
 80018ea:	6860      	ldr	r0, [r4, #4]
 80018ec:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80018f0:	6920      	ldr	r0, [r4, #16]
 80018f2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80018f6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80018fa:	0192      	lsls	r2, r2, #6
 80018fc:	d50d      	bpl.n	800191a <HAL_RCCEx_PeriphCLKConfig+0x50a>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80018fe:	6923      	ldr	r3, [r4, #16]
 8001900:	6862      	ldr	r2, [r4, #4]
 8001902:	041b      	lsls	r3, r3, #16
 8001904:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001908:	68e2      	ldr	r2, [r4, #12]
 800190a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800190e:	68a2      	ldr	r2, [r4, #8]
 8001910:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001914:	4a14      	ldr	r2, [pc, #80]	; (8001968 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001916:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800191a:	4e13      	ldr	r6, [pc, #76]	; (8001968 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800191c:	6833      	ldr	r3, [r6, #0]
 800191e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001922:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001924:	f7fe fea0 	bl	8000668 <HAL_GetTick>
 8001928:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800192a:	6833      	ldr	r3, [r6, #0]
 800192c:	011b      	lsls	r3, r3, #4
 800192e:	f53f aed7 	bmi.w	80016e0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001932:	f7fe fe99 	bl	8000668 <HAL_GetTick>
 8001936:	1bc0      	subs	r0, r0, r7
 8001938:	2864      	cmp	r0, #100	; 0x64
 800193a:	d9f6      	bls.n	800192a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800193c:	e753      	b.n	80017e6 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800193e:	f7fe fe93 	bl	8000668 <HAL_GetTick>
 8001942:	1bc0      	subs	r0, r0, r7
 8001944:	2864      	cmp	r0, #100	; 0x64
 8001946:	d984      	bls.n	8001852 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8001948:	e74d      	b.n	80017e6 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800194a:	f7fe fe8d 	bl	8000668 <HAL_GetTick>
 800194e:	1b80      	subs	r0, r0, r6
 8001950:	2864      	cmp	r0, #100	; 0x64
 8001952:	f67f aecf 	bls.w	80016f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8001956:	e746      	b.n	80017e6 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001958:	f7fe fe86 	bl	8000668 <HAL_GetTick>
 800195c:	1b40      	subs	r0, r0, r5
 800195e:	2864      	cmp	r0, #100	; 0x64
 8001960:	f67f af32 	bls.w	80017c8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 8001964:	e73f      	b.n	80017e6 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
 8001966:	bf00      	nop
 8001968:	40023800 	.word	0x40023800

0800196c <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800196c:	6803      	ldr	r3, [r0, #0]
 800196e:	68da      	ldr	r2, [r3, #12]
 8001970:	f042 0201 	orr.w	r2, r2, #1
 8001974:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001976:	4a07      	ldr	r2, [pc, #28]	; (8001994 <HAL_TIM_Base_Start_IT+0x28>)
 8001978:	6899      	ldr	r1, [r3, #8]
 800197a:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800197c:	2a06      	cmp	r2, #6
 800197e:	d006      	beq.n	800198e <HAL_TIM_Base_Start_IT+0x22>
 8001980:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001984:	d003      	beq.n	800198e <HAL_TIM_Base_Start_IT+0x22>
  {
    __HAL_TIM_ENABLE(htim);
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	f042 0201 	orr.w	r2, r2, #1
 800198c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 800198e:	2000      	movs	r0, #0
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	00010007 	.word	0x00010007

08001998 <HAL_TIM_OC_DelayElapsedCallback>:
 8001998:	4770      	bx	lr

0800199a <HAL_TIM_IC_CaptureCallback>:
 800199a:	4770      	bx	lr

0800199c <HAL_TIM_PWM_PulseFinishedCallback>:
 800199c:	4770      	bx	lr

0800199e <HAL_TIM_TriggerCallback>:
 800199e:	4770      	bx	lr

080019a0 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80019a0:	6803      	ldr	r3, [r0, #0]
 80019a2:	691a      	ldr	r2, [r3, #16]
 80019a4:	0791      	lsls	r1, r2, #30
{
 80019a6:	b510      	push	{r4, lr}
 80019a8:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80019aa:	d50f      	bpl.n	80019cc <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80019ac:	68da      	ldr	r2, [r3, #12]
 80019ae:	0792      	lsls	r2, r2, #30
 80019b0:	d50c      	bpl.n	80019cc <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80019b2:	f06f 0202 	mvn.w	r2, #2
 80019b6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80019b8:	2201      	movs	r2, #1

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80019ba:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80019bc:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80019be:	0799      	lsls	r1, r3, #30
 80019c0:	f000 8085 	beq.w	8001ace <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80019c4:	f7ff ffe9 	bl	800199a <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019c8:	2300      	movs	r3, #0
 80019ca:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80019cc:	6823      	ldr	r3, [r4, #0]
 80019ce:	691a      	ldr	r2, [r3, #16]
 80019d0:	0752      	lsls	r2, r2, #29
 80019d2:	d510      	bpl.n	80019f6 <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80019d4:	68da      	ldr	r2, [r3, #12]
 80019d6:	0750      	lsls	r0, r2, #29
 80019d8:	d50d      	bpl.n	80019f6 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80019da:	f06f 0204 	mvn.w	r2, #4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019de:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80019e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80019e2:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80019e4:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80019e6:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80019e8:	f413 7f40 	tst.w	r3, #768	; 0x300
 80019ec:	d075      	beq.n	8001ada <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 80019ee:	f7ff ffd4 	bl	800199a <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019f2:	2300      	movs	r3, #0
 80019f4:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80019f6:	6823      	ldr	r3, [r4, #0]
 80019f8:	691a      	ldr	r2, [r3, #16]
 80019fa:	0711      	lsls	r1, r2, #28
 80019fc:	d50f      	bpl.n	8001a1e <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80019fe:	68da      	ldr	r2, [r3, #12]
 8001a00:	0712      	lsls	r2, r2, #28
 8001a02:	d50c      	bpl.n	8001a1e <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001a04:	f06f 0208 	mvn.w	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a08:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001a0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a0c:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a0e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a10:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a12:	079b      	lsls	r3, r3, #30
 8001a14:	d067      	beq.n	8001ae6 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8001a16:	f7ff ffc0 	bl	800199a <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001a1e:	6823      	ldr	r3, [r4, #0]
 8001a20:	691a      	ldr	r2, [r3, #16]
 8001a22:	06d0      	lsls	r0, r2, #27
 8001a24:	d510      	bpl.n	8001a48 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001a26:	68da      	ldr	r2, [r3, #12]
 8001a28:	06d1      	lsls	r1, r2, #27
 8001a2a:	d50d      	bpl.n	8001a48 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001a2c:	f06f 0210 	mvn.w	r2, #16
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a30:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001a32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a34:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a36:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a38:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a3a:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001a3e:	d058      	beq.n	8001af2 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8001a40:	f7ff ffab 	bl	800199a <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a44:	2300      	movs	r3, #0
 8001a46:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001a48:	6823      	ldr	r3, [r4, #0]
 8001a4a:	691a      	ldr	r2, [r3, #16]
 8001a4c:	07d2      	lsls	r2, r2, #31
 8001a4e:	d508      	bpl.n	8001a62 <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001a50:	68da      	ldr	r2, [r3, #12]
 8001a52:	07d0      	lsls	r0, r2, #31
 8001a54:	d505      	bpl.n	8001a62 <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001a56:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001a5a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001a5c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001a5e:	f000 feb5 	bl	80027cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001a62:	6823      	ldr	r3, [r4, #0]
 8001a64:	691a      	ldr	r2, [r3, #16]
 8001a66:	0611      	lsls	r1, r2, #24
 8001a68:	d508      	bpl.n	8001a7c <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001a6a:	68da      	ldr	r2, [r3, #12]
 8001a6c:	0612      	lsls	r2, r2, #24
 8001a6e:	d505      	bpl.n	8001a7c <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001a70:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001a74:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001a76:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001a78:	f000 f8ef 	bl	8001c5a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001a7c:	6823      	ldr	r3, [r4, #0]
 8001a7e:	691a      	ldr	r2, [r3, #16]
 8001a80:	05d0      	lsls	r0, r2, #23
 8001a82:	d508      	bpl.n	8001a96 <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001a84:	68da      	ldr	r2, [r3, #12]
 8001a86:	0611      	lsls	r1, r2, #24
 8001a88:	d505      	bpl.n	8001a96 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001a8a:	f46f 7280 	mvn.w	r2, #256	; 0x100
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001a8e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001a90:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8001a92:	f000 f8e3 	bl	8001c5c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001a96:	6823      	ldr	r3, [r4, #0]
 8001a98:	691a      	ldr	r2, [r3, #16]
 8001a9a:	0652      	lsls	r2, r2, #25
 8001a9c:	d508      	bpl.n	8001ab0 <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001a9e:	68da      	ldr	r2, [r3, #12]
 8001aa0:	0650      	lsls	r0, r2, #25
 8001aa2:	d505      	bpl.n	8001ab0 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001aa4:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001aa8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001aaa:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001aac:	f7ff ff77 	bl	800199e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ab0:	6823      	ldr	r3, [r4, #0]
 8001ab2:	691a      	ldr	r2, [r3, #16]
 8001ab4:	0691      	lsls	r1, r2, #26
 8001ab6:	d522      	bpl.n	8001afe <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001ab8:	68da      	ldr	r2, [r3, #12]
 8001aba:	0692      	lsls	r2, r2, #26
 8001abc:	d51f      	bpl.n	8001afe <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001abe:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ac2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ac4:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ac6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8001aca:	f000 b8c5 	b.w	8001c58 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ace:	f7ff ff63 	bl	8001998 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ad2:	4620      	mov	r0, r4
 8001ad4:	f7ff ff62 	bl	800199c <HAL_TIM_PWM_PulseFinishedCallback>
 8001ad8:	e776      	b.n	80019c8 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ada:	f7ff ff5d 	bl	8001998 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ade:	4620      	mov	r0, r4
 8001ae0:	f7ff ff5c 	bl	800199c <HAL_TIM_PWM_PulseFinishedCallback>
 8001ae4:	e785      	b.n	80019f2 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ae6:	f7ff ff57 	bl	8001998 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001aea:	4620      	mov	r0, r4
 8001aec:	f7ff ff56 	bl	800199c <HAL_TIM_PWM_PulseFinishedCallback>
 8001af0:	e793      	b.n	8001a1a <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001af2:	f7ff ff51 	bl	8001998 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001af6:	4620      	mov	r0, r4
 8001af8:	f7ff ff50 	bl	800199c <HAL_TIM_PWM_PulseFinishedCallback>
 8001afc:	e7a2      	b.n	8001a44 <HAL_TIM_IRQHandler+0xa4>
 8001afe:	bd10      	pop	{r4, pc}

08001b00 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b00:	4a30      	ldr	r2, [pc, #192]	; (8001bc4 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8001b02:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b04:	4290      	cmp	r0, r2
 8001b06:	d012      	beq.n	8001b2e <TIM_Base_SetConfig+0x2e>
 8001b08:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001b0c:	d00f      	beq.n	8001b2e <TIM_Base_SetConfig+0x2e>
 8001b0e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001b12:	4290      	cmp	r0, r2
 8001b14:	d00b      	beq.n	8001b2e <TIM_Base_SetConfig+0x2e>
 8001b16:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b1a:	4290      	cmp	r0, r2
 8001b1c:	d007      	beq.n	8001b2e <TIM_Base_SetConfig+0x2e>
 8001b1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b22:	4290      	cmp	r0, r2
 8001b24:	d003      	beq.n	8001b2e <TIM_Base_SetConfig+0x2e>
 8001b26:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001b2a:	4290      	cmp	r0, r2
 8001b2c:	d119      	bne.n	8001b62 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001b2e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001b34:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b36:	4a23      	ldr	r2, [pc, #140]	; (8001bc4 <TIM_Base_SetConfig+0xc4>)
 8001b38:	4290      	cmp	r0, r2
 8001b3a:	d029      	beq.n	8001b90 <TIM_Base_SetConfig+0x90>
 8001b3c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001b40:	d026      	beq.n	8001b90 <TIM_Base_SetConfig+0x90>
 8001b42:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001b46:	4290      	cmp	r0, r2
 8001b48:	d022      	beq.n	8001b90 <TIM_Base_SetConfig+0x90>
 8001b4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b4e:	4290      	cmp	r0, r2
 8001b50:	d01e      	beq.n	8001b90 <TIM_Base_SetConfig+0x90>
 8001b52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b56:	4290      	cmp	r0, r2
 8001b58:	d01a      	beq.n	8001b90 <TIM_Base_SetConfig+0x90>
 8001b5a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001b5e:	4290      	cmp	r0, r2
 8001b60:	d016      	beq.n	8001b90 <TIM_Base_SetConfig+0x90>
 8001b62:	4a19      	ldr	r2, [pc, #100]	; (8001bc8 <TIM_Base_SetConfig+0xc8>)
 8001b64:	4290      	cmp	r0, r2
 8001b66:	d013      	beq.n	8001b90 <TIM_Base_SetConfig+0x90>
 8001b68:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b6c:	4290      	cmp	r0, r2
 8001b6e:	d00f      	beq.n	8001b90 <TIM_Base_SetConfig+0x90>
 8001b70:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b74:	4290      	cmp	r0, r2
 8001b76:	d00b      	beq.n	8001b90 <TIM_Base_SetConfig+0x90>
 8001b78:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001b7c:	4290      	cmp	r0, r2
 8001b7e:	d007      	beq.n	8001b90 <TIM_Base_SetConfig+0x90>
 8001b80:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b84:	4290      	cmp	r0, r2
 8001b86:	d003      	beq.n	8001b90 <TIM_Base_SetConfig+0x90>
 8001b88:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b8c:	4290      	cmp	r0, r2
 8001b8e:	d103      	bne.n	8001b98 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b94:	68ca      	ldr	r2, [r1, #12]
 8001b96:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b98:	694a      	ldr	r2, [r1, #20]
 8001b9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b9e:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001ba0:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ba2:	688b      	ldr	r3, [r1, #8]
 8001ba4:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ba6:	680b      	ldr	r3, [r1, #0]
 8001ba8:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001baa:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <TIM_Base_SetConfig+0xc4>)
 8001bac:	4298      	cmp	r0, r3
 8001bae:	d003      	beq.n	8001bb8 <TIM_Base_SetConfig+0xb8>
 8001bb0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001bb4:	4298      	cmp	r0, r3
 8001bb6:	d101      	bne.n	8001bbc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001bb8:	690b      	ldr	r3, [r1, #16]
 8001bba:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	6143      	str	r3, [r0, #20]
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	40010000 	.word	0x40010000
 8001bc8:	40014000 	.word	0x40014000

08001bcc <HAL_TIM_Base_Init>:
{
 8001bcc:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001bce:	4604      	mov	r4, r0
 8001bd0:	b1a0      	cbz	r0, 8001bfc <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001bd2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001bd6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001bda:	b91b      	cbnz	r3, 8001be4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001bdc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001be0:	f000 febe 	bl	8002960 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001be4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001be6:	6820      	ldr	r0, [r4, #0]
 8001be8:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 8001bea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bee:	f7ff ff87 	bl	8001b00 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001bf2:	2301      	movs	r3, #1
  return HAL_OK;
 8001bf4:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001bf6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001bfa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001bfc:	2001      	movs	r0, #1
}
 8001bfe:	bd10      	pop	{r4, pc}

08001c00 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001c00:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	f04f 0302 	mov.w	r3, #2
{
 8001c0a:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8001c0c:	d01f      	beq.n	8001c4e <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001c0e:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001c10:	4d10      	ldr	r5, [pc, #64]	; (8001c54 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
  htim->State = HAL_TIM_STATE_BUSY;
 8001c12:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001c16:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 8001c18:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8001c1a:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001c1c:	d003      	beq.n	8001c26 <HAL_TIMEx_MasterConfigSynchronization+0x26>
 8001c1e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001c22:	42aa      	cmp	r2, r5
 8001c24:	d103      	bne.n	8001c2e <HAL_TIMEx_MasterConfigSynchronization+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001c26:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001c2a:	684d      	ldr	r5, [r1, #4]
 8001c2c:	432b      	orrs	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001c2e:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001c30:	f023 0370 	bic.w	r3, r3, #112	; 0x70

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001c34:	6889      	ldr	r1, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001c36:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001c3a:	432b      	orrs	r3, r5
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001c3c:	4321      	orrs	r1, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001c3e:	6053      	str	r3, [r2, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001c40:	2301      	movs	r3, #1
  htim->Instance->SMCR = tmpsmcr;
 8001c42:	6091      	str	r1, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8001c44:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001c48:	2300      	movs	r3, #0
 8001c4a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001c4e:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001c50:	bd30      	pop	{r4, r5, pc}
 8001c52:	bf00      	nop
 8001c54:	40010000 	.word	0x40010000

08001c58 <HAL_TIMEx_CommutCallback>:
 8001c58:	4770      	bx	lr

08001c5a <HAL_TIMEx_BreakCallback>:
 8001c5a:	4770      	bx	lr

08001c5c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001c5c:	4770      	bx	lr
	...

08001c60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c60:	b538      	push	{r3, r4, r5, lr}
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001c62:	69c2      	ldr	r2, [r0, #28]
{
 8001c64:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001c66:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001c68:	6881      	ldr	r1, [r0, #8]
 8001c6a:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001c6c:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001c6e:	4301      	orrs	r1, r0
 8001c70:	6960      	ldr	r0, [r4, #20]
 8001c72:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001c74:	4890      	ldr	r0, [pc, #576]	; (8001eb8 <UART_SetConfig+0x258>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001c76:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001c78:	4028      	ands	r0, r5
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  tmpreg |= huart->Init.OneBitSampling;
 8001c7a:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001c7c:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c7e:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001c80:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c82:	6859      	ldr	r1, [r3, #4]
 8001c84:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8001c88:	4301      	orrs	r1, r0
 8001c8a:	6059      	str	r1, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001c8c:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001c8e:	6898      	ldr	r0, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8001c90:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001c92:	f420 6030 	bic.w	r0, r0, #2816	; 0xb00
 8001c96:	4301      	orrs	r1, r0
 8001c98:	6099      	str	r1, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001c9a:	4988      	ldr	r1, [pc, #544]	; (8001ebc <UART_SetConfig+0x25c>)
 8001c9c:	428b      	cmp	r3, r1
 8001c9e:	d117      	bne.n	8001cd0 <UART_SetConfig+0x70>
 8001ca0:	4b87      	ldr	r3, [pc, #540]	; (8001ec0 <UART_SetConfig+0x260>)
 8001ca2:	4988      	ldr	r1, [pc, #544]	; (8001ec4 <UART_SetConfig+0x264>)
 8001ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ca8:	f003 0303 	and.w	r3, r3, #3

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001cac:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001cb0:	5ccb      	ldrb	r3, [r1, r3]
 8001cb2:	d129      	bne.n	8001d08 <UART_SetConfig+0xa8>
  {
    switch (clocksource)
 8001cb4:	2b08      	cmp	r3, #8
 8001cb6:	f200 809d 	bhi.w	8001df4 <UART_SetConfig+0x194>
 8001cba:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001cbe:	008c      	.short	0x008c
 8001cc0:	00ee00e8 	.word	0x00ee00e8
 8001cc4:	00fa009b 	.word	0x00fa009b
 8001cc8:	009b009b 	.word	0x009b009b
 8001ccc:	0076009b 	.word	0x0076009b
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001cd0:	497d      	ldr	r1, [pc, #500]	; (8001ec8 <UART_SetConfig+0x268>)
 8001cd2:	428b      	cmp	r3, r1
 8001cd4:	d106      	bne.n	8001ce4 <UART_SetConfig+0x84>
 8001cd6:	4b7a      	ldr	r3, [pc, #488]	; (8001ec0 <UART_SetConfig+0x260>)
 8001cd8:	497c      	ldr	r1, [pc, #496]	; (8001ecc <UART_SetConfig+0x26c>)
 8001cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cde:	f003 030c 	and.w	r3, r3, #12
 8001ce2:	e7e3      	b.n	8001cac <UART_SetConfig+0x4c>
 8001ce4:	497a      	ldr	r1, [pc, #488]	; (8001ed0 <UART_SetConfig+0x270>)
 8001ce6:	428b      	cmp	r3, r1
 8001ce8:	d11d      	bne.n	8001d26 <UART_SetConfig+0xc6>
 8001cea:	4b75      	ldr	r3, [pc, #468]	; (8001ec0 <UART_SetConfig+0x260>)
 8001cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cf0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001cf4:	2b10      	cmp	r3, #16
 8001cf6:	f000 80d9 	beq.w	8001eac <UART_SetConfig+0x24c>
 8001cfa:	d80e      	bhi.n	8001d1a <UART_SetConfig+0xba>
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d067      	beq.n	8001dd0 <UART_SetConfig+0x170>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d00:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001d04:	d076      	beq.n	8001df4 <UART_SetConfig+0x194>
 8001d06:	2310      	movs	r3, #16
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 8001d08:	2b08      	cmp	r3, #8
 8001d0a:	d873      	bhi.n	8001df4 <UART_SetConfig+0x194>
 8001d0c:	e8df f003 	tbb	[pc, r3]
 8001d10:	72a29f99 	.word	0x72a29f99
 8001d14:	727272b4 	.word	0x727272b4
 8001d18:	b7          	.byte	0xb7
 8001d19:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001d1a:	2b20      	cmp	r3, #32
 8001d1c:	f000 80ba 	beq.w	8001e94 <UART_SetConfig+0x234>
 8001d20:	2b30      	cmp	r3, #48	; 0x30
 8001d22:	d03f      	beq.n	8001da4 <UART_SetConfig+0x144>
 8001d24:	e7ec      	b.n	8001d00 <UART_SetConfig+0xa0>
 8001d26:	496b      	ldr	r1, [pc, #428]	; (8001ed4 <UART_SetConfig+0x274>)
 8001d28:	428b      	cmp	r3, r1
 8001d2a:	d10d      	bne.n	8001d48 <UART_SetConfig+0xe8>
 8001d2c:	4b64      	ldr	r3, [pc, #400]	; (8001ec0 <UART_SetConfig+0x260>)
 8001d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d32:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001d36:	2b40      	cmp	r3, #64	; 0x40
 8001d38:	f000 80b8 	beq.w	8001eac <UART_SetConfig+0x24c>
 8001d3c:	d9de      	bls.n	8001cfc <UART_SetConfig+0x9c>
 8001d3e:	2b80      	cmp	r3, #128	; 0x80
 8001d40:	f000 80a8 	beq.w	8001e94 <UART_SetConfig+0x234>
 8001d44:	2bc0      	cmp	r3, #192	; 0xc0
 8001d46:	e7ec      	b.n	8001d22 <UART_SetConfig+0xc2>
 8001d48:	4963      	ldr	r1, [pc, #396]	; (8001ed8 <UART_SetConfig+0x278>)
 8001d4a:	428b      	cmp	r3, r1
 8001d4c:	d110      	bne.n	8001d70 <UART_SetConfig+0x110>
 8001d4e:	4b5c      	ldr	r3, [pc, #368]	; (8001ec0 <UART_SetConfig+0x260>)
 8001d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d5c:	f000 80a6 	beq.w	8001eac <UART_SetConfig+0x24c>
 8001d60:	d9cc      	bls.n	8001cfc <UART_SetConfig+0x9c>
 8001d62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d66:	f000 8095 	beq.w	8001e94 <UART_SetConfig+0x234>
 8001d6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001d6e:	e7d8      	b.n	8001d22 <UART_SetConfig+0xc2>
 8001d70:	495a      	ldr	r1, [pc, #360]	; (8001edc <UART_SetConfig+0x27c>)
 8001d72:	428b      	cmp	r3, r1
 8001d74:	d11e      	bne.n	8001db4 <UART_SetConfig+0x154>
 8001d76:	4b52      	ldr	r3, [pc, #328]	; (8001ec0 <UART_SetConfig+0x260>)
 8001d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d7c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001d80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d84:	f000 8092 	beq.w	8001eac <UART_SetConfig+0x24c>
 8001d88:	d806      	bhi.n	8001d98 <UART_SetConfig+0x138>
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d07c      	beq.n	8001e88 <UART_SetConfig+0x228>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d8e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001d92:	d12f      	bne.n	8001df4 <UART_SetConfig+0x194>
 8001d94:	2310      	movs	r3, #16
 8001d96:	e78d      	b.n	8001cb4 <UART_SetConfig+0x54>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001d98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d9c:	d07a      	beq.n	8001e94 <UART_SetConfig+0x234>
 8001d9e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001da2:	d1f4      	bne.n	8001d8e <UART_SetConfig+0x12e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001da4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001da8:	d169      	bne.n	8001e7e <UART_SetConfig+0x21e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001daa:	6863      	ldr	r3, [r4, #4]
 8001dac:	0858      	lsrs	r0, r3, #1
 8001dae:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 8001db2:	e078      	b.n	8001ea6 <UART_SetConfig+0x246>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001db4:	494a      	ldr	r1, [pc, #296]	; (8001ee0 <UART_SetConfig+0x280>)
 8001db6:	428b      	cmp	r3, r1
 8001db8:	d124      	bne.n	8001e04 <UART_SetConfig+0x1a4>
 8001dba:	4b41      	ldr	r3, [pc, #260]	; (8001ec0 <UART_SetConfig+0x260>)
 8001dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dc0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001dc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dc8:	d070      	beq.n	8001eac <UART_SetConfig+0x24c>
 8001dca:	d815      	bhi.n	8001df8 <UART_SetConfig+0x198>
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d1de      	bne.n	8001d8e <UART_SetConfig+0x12e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001dd0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001dd4:	d135      	bne.n	8001e42 <UART_SetConfig+0x1e2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001dd6:	f7ff fafb 	bl	80013d0 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001dda:	6862      	ldr	r2, [r4, #4]
 8001ddc:	0853      	lsrs	r3, r2, #1
 8001dde:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8001de2:	fbb0 f0f2 	udiv	r0, r0, r2
 8001de6:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001de8:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8001dec:	f1a0 0210 	sub.w	r2, r0, #16
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d91a      	bls.n	8001e2a <UART_SetConfig+0x1ca>
    {
      huart->Instance->BRR = usartdiv;
    }
    else
    {
      ret = HAL_ERROR;
 8001df4:	2001      	movs	r0, #1
 8001df6:	e020      	b.n	8001e3a <UART_SetConfig+0x1da>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001df8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dfc:	d04a      	beq.n	8001e94 <UART_SetConfig+0x234>
 8001dfe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001e02:	e7ce      	b.n	8001da2 <UART_SetConfig+0x142>
 8001e04:	4937      	ldr	r1, [pc, #220]	; (8001ee4 <UART_SetConfig+0x284>)
 8001e06:	428b      	cmp	r3, r1
 8001e08:	d1f4      	bne.n	8001df4 <UART_SetConfig+0x194>
 8001e0a:	4b2d      	ldr	r3, [pc, #180]	; (8001ec0 <UART_SetConfig+0x260>)
 8001e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e10:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e18:	d048      	beq.n	8001eac <UART_SetConfig+0x24c>
 8001e1a:	f67f af6f 	bls.w	8001cfc <UART_SetConfig+0x9c>
 8001e1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e22:	d037      	beq.n	8001e94 <UART_SetConfig+0x234>
 8001e24:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001e28:	e77b      	b.n	8001d22 <UART_SetConfig+0xc2>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001e2a:	f020 030f 	bic.w	r3, r0, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001e2e:	f3c0 0042 	ubfx	r0, r0, #1, #3
      huart->Instance->BRR = brrtemp;
 8001e32:	6822      	ldr	r2, [r4, #0]
 8001e34:	4318      	orrs	r0, r3
 8001e36:	60d0      	str	r0, [r2, #12]
 8001e38:	2000      	movs	r0, #0
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8001e3e:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8001e40:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001e42:	f7ff fac5 	bl	80013d0 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001e46:	6863      	ldr	r3, [r4, #4]
 8001e48:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001e4c:	e008      	b.n	8001e60 <UART_SetConfig+0x200>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001e4e:	f7ff facf 	bl	80013f0 <HAL_RCC_GetPCLK2Freq>
 8001e52:	e7f8      	b.n	8001e46 <UART_SetConfig+0x1e6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001e54:	6863      	ldr	r3, [r4, #4]
 8001e56:	0858      	lsrs	r0, r3, #1
 8001e58:	f500 0074 	add.w	r0, r0, #15990784	; 0xf40000
 8001e5c:	f500 5010 	add.w	r0, r0, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001e60:	fbb0 f0f3 	udiv	r0, r0, r3
 8001e64:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001e66:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8001e6a:	f1a0 0210 	sub.w	r2, r0, #16
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d8c0      	bhi.n	8001df4 <UART_SetConfig+0x194>
      huart->Instance->BRR = usartdiv;
 8001e72:	6823      	ldr	r3, [r4, #0]
 8001e74:	60d8      	str	r0, [r3, #12]
 8001e76:	e7df      	b.n	8001e38 <UART_SetConfig+0x1d8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001e78:	f7ff f9d8 	bl	800122c <HAL_RCC_GetSysClockFreq>
 8001e7c:	e7e3      	b.n	8001e46 <UART_SetConfig+0x1e6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001e7e:	6863      	ldr	r3, [r4, #4]
 8001e80:	0858      	lsrs	r0, r3, #1
 8001e82:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 8001e86:	e7eb      	b.n	8001e60 <UART_SetConfig+0x200>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e88:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001e8c:	d1df      	bne.n	8001e4e <UART_SetConfig+0x1ee>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001e8e:	f7ff faaf 	bl	80013f0 <HAL_RCC_GetPCLK2Freq>
 8001e92:	e7a2      	b.n	8001dda <UART_SetConfig+0x17a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e94:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001e98:	d1dc      	bne.n	8001e54 <UART_SetConfig+0x1f4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001e9a:	6863      	ldr	r3, [r4, #4]
 8001e9c:	0858      	lsrs	r0, r3, #1
 8001e9e:	f100 70f4 	add.w	r0, r0, #31981568	; 0x1e80000
 8001ea2:	f500 4090 	add.w	r0, r0, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001ea6:	fbb0 f0f3 	udiv	r0, r0, r3
 8001eaa:	e79c      	b.n	8001de6 <UART_SetConfig+0x186>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001eac:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001eb0:	d1e2      	bne.n	8001e78 <UART_SetConfig+0x218>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001eb2:	f7ff f9bb 	bl	800122c <HAL_RCC_GetSysClockFreq>
 8001eb6:	e790      	b.n	8001dda <UART_SetConfig+0x17a>
 8001eb8:	efff69f3 	.word	0xefff69f3
 8001ebc:	40011000 	.word	0x40011000
 8001ec0:	40023800 	.word	0x40023800
 8001ec4:	080039c4 	.word	0x080039c4
 8001ec8:	40004400 	.word	0x40004400
 8001ecc:	080039c8 	.word	0x080039c8
 8001ed0:	40004800 	.word	0x40004800
 8001ed4:	40004c00 	.word	0x40004c00
 8001ed8:	40005000 	.word	0x40005000
 8001edc:	40011400 	.word	0x40011400
 8001ee0:	40007800 	.word	0x40007800
 8001ee4:	40007c00 	.word	0x40007c00

08001ee8 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001ee8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001eea:	07da      	lsls	r2, r3, #31
{
 8001eec:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001eee:	d506      	bpl.n	8001efe <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001ef0:	6801      	ldr	r1, [r0, #0]
 8001ef2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001ef4:	684a      	ldr	r2, [r1, #4]
 8001ef6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001efa:	4322      	orrs	r2, r4
 8001efc:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001efe:	079c      	lsls	r4, r3, #30
 8001f00:	d506      	bpl.n	8001f10 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001f02:	6801      	ldr	r1, [r0, #0]
 8001f04:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001f06:	684a      	ldr	r2, [r1, #4]
 8001f08:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001f0c:	4322      	orrs	r2, r4
 8001f0e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001f10:	0759      	lsls	r1, r3, #29
 8001f12:	d506      	bpl.n	8001f22 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001f14:	6801      	ldr	r1, [r0, #0]
 8001f16:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001f18:	684a      	ldr	r2, [r1, #4]
 8001f1a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f1e:	4322      	orrs	r2, r4
 8001f20:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001f22:	071a      	lsls	r2, r3, #28
 8001f24:	d506      	bpl.n	8001f34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001f26:	6801      	ldr	r1, [r0, #0]
 8001f28:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001f2a:	684a      	ldr	r2, [r1, #4]
 8001f2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f30:	4322      	orrs	r2, r4
 8001f32:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001f34:	06dc      	lsls	r4, r3, #27
 8001f36:	d506      	bpl.n	8001f46 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001f38:	6801      	ldr	r1, [r0, #0]
 8001f3a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001f3c:	688a      	ldr	r2, [r1, #8]
 8001f3e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f42:	4322      	orrs	r2, r4
 8001f44:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001f46:	0699      	lsls	r1, r3, #26
 8001f48:	d506      	bpl.n	8001f58 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001f4a:	6801      	ldr	r1, [r0, #0]
 8001f4c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001f4e:	688a      	ldr	r2, [r1, #8]
 8001f50:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f54:	4322      	orrs	r2, r4
 8001f56:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001f58:	065a      	lsls	r2, r3, #25
 8001f5a:	d510      	bpl.n	8001f7e <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001f5c:	6801      	ldr	r1, [r0, #0]
 8001f5e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001f60:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001f62:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001f66:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001f6a:	ea42 0204 	orr.w	r2, r2, r4
 8001f6e:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001f70:	d105      	bne.n	8001f7e <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001f72:	684a      	ldr	r2, [r1, #4]
 8001f74:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001f76:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001f7a:	4322      	orrs	r2, r4
 8001f7c:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001f7e:	061b      	lsls	r3, r3, #24
 8001f80:	d506      	bpl.n	8001f90 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001f82:	6802      	ldr	r2, [r0, #0]
 8001f84:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001f86:	6853      	ldr	r3, [r2, #4]
 8001f88:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001f8c:	430b      	orrs	r3, r1
 8001f8e:	6053      	str	r3, [r2, #4]
 8001f90:	bd10      	pop	{r4, pc}

08001f92 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001f92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f96:	9d06      	ldr	r5, [sp, #24]
 8001f98:	4604      	mov	r4, r0
 8001f9a:	460f      	mov	r7, r1
 8001f9c:	4616      	mov	r6, r2
 8001f9e:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001fa0:	6821      	ldr	r1, [r4, #0]
 8001fa2:	69ca      	ldr	r2, [r1, #28]
 8001fa4:	ea37 0302 	bics.w	r3, r7, r2
 8001fa8:	bf0c      	ite	eq
 8001faa:	2201      	moveq	r2, #1
 8001fac:	2200      	movne	r2, #0
 8001fae:	42b2      	cmp	r2, r6
 8001fb0:	d002      	beq.n	8001fb8 <UART_WaitOnFlagUntilTimeout+0x26>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001fb2:	2000      	movs	r0, #0
}
 8001fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001fb8:	1c6b      	adds	r3, r5, #1
 8001fba:	d0f2      	beq.n	8001fa2 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fbc:	f7fe fb54 	bl	8000668 <HAL_GetTick>
 8001fc0:	eba0 0008 	sub.w	r0, r0, r8
 8001fc4:	4285      	cmp	r5, r0
 8001fc6:	d301      	bcc.n	8001fcc <UART_WaitOnFlagUntilTimeout+0x3a>
 8001fc8:	2d00      	cmp	r5, #0
 8001fca:	d1e9      	bne.n	8001fa0 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001fcc:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8001fce:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001fd6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fd8:	689a      	ldr	r2, [r3, #8]
 8001fda:	f022 0201 	bic.w	r2, r2, #1
 8001fde:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8001fe0:	2320      	movs	r3, #32
 8001fe2:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8001fe4:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 8001fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001ff0 <HAL_UART_Transmit>:
{
 8001ff0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001ff4:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001ff6:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 8001ff8:	4604      	mov	r4, r0
 8001ffa:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8001ffc:	2b20      	cmp	r3, #32
{
 8001ffe:	4691      	mov	r9, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8002000:	d14b      	bne.n	800209a <HAL_UART_Transmit+0xaa>
    if ((pData == NULL) || (Size == 0U))
 8002002:	2900      	cmp	r1, #0
 8002004:	d047      	beq.n	8002096 <HAL_UART_Transmit+0xa6>
 8002006:	2a00      	cmp	r2, #0
 8002008:	d045      	beq.n	8002096 <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 800200a:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800200e:	2b01      	cmp	r3, #1
 8002010:	d043      	beq.n	800209a <HAL_UART_Transmit+0xaa>
 8002012:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002014:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 8002016:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800201a:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800201c:	67c5      	str	r5, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800201e:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 8002020:	f7fe fb22 	bl	8000668 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002024:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8002026:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8002028:	f8a4 9050 	strh.w	r9, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800202c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 8002030:	f8a4 9052 	strh.w	r9, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002034:	d103      	bne.n	800203e <HAL_UART_Transmit+0x4e>
 8002036:	6923      	ldr	r3, [r4, #16]
 8002038:	b90b      	cbnz	r3, 800203e <HAL_UART_Transmit+0x4e>
 800203a:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 800203c:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 800203e:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002042:	463b      	mov	r3, r7
 8002044:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8002048:	b292      	uxth	r2, r2
 800204a:	b94a      	cbnz	r2, 8002060 <HAL_UART_Transmit+0x70>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800204c:	2140      	movs	r1, #64	; 0x40
 800204e:	4620      	mov	r0, r4
 8002050:	f7ff ff9f 	bl	8001f92 <UART_WaitOnFlagUntilTimeout>
 8002054:	b950      	cbnz	r0, 800206c <HAL_UART_Transmit+0x7c>
    huart->gState = HAL_UART_STATE_READY;
 8002056:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8002058:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    huart->gState = HAL_UART_STATE_READY;
 800205c:	6763      	str	r3, [r4, #116]	; 0x74
    return HAL_OK;
 800205e:	e006      	b.n	800206e <HAL_UART_Transmit+0x7e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002060:	2200      	movs	r2, #0
 8002062:	2180      	movs	r1, #128	; 0x80
 8002064:	4620      	mov	r0, r4
 8002066:	f7ff ff94 	bl	8001f92 <UART_WaitOnFlagUntilTimeout>
 800206a:	b118      	cbz	r0, 8002074 <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 800206c:	2003      	movs	r0, #3
}
 800206e:	b003      	add	sp, #12
 8002070:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002074:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8002076:	b95e      	cbnz	r6, 8002090 <HAL_UART_Transmit+0xa0>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002078:	f835 3b02 	ldrh.w	r3, [r5], #2
 800207c:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002080:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8002082:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8002086:	3b01      	subs	r3, #1
 8002088:	b29b      	uxth	r3, r3
 800208a:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 800208e:	e7d6      	b.n	800203e <HAL_UART_Transmit+0x4e>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002090:	f816 3b01 	ldrb.w	r3, [r6], #1
 8002094:	e7f4      	b.n	8002080 <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 8002096:	2001      	movs	r0, #1
 8002098:	e7e9      	b.n	800206e <HAL_UART_Transmit+0x7e>
    return HAL_BUSY;
 800209a:	2002      	movs	r0, #2
 800209c:	e7e7      	b.n	800206e <HAL_UART_Transmit+0x7e>

0800209e <UART_CheckIdleState>:
{
 800209e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020a0:	2500      	movs	r5, #0
{
 80020a2:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020a4:	67c5      	str	r5, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 80020a6:	f7fe fadf 	bl	8000668 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80020aa:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 80020ac:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80020ae:	6812      	ldr	r2, [r2, #0]
 80020b0:	0712      	lsls	r2, r2, #28
 80020b2:	d407      	bmi.n	80020c4 <UART_CheckIdleState+0x26>
  huart->gState = HAL_UART_STATE_READY;
 80020b4:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80020b6:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80020b8:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 80020ba:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 80020be:	67a3      	str	r3, [r4, #120]	; 0x78
}
 80020c0:	b003      	add	sp, #12
 80020c2:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80020c4:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 80020c8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80020cc:	4620      	mov	r0, r4
 80020ce:	9200      	str	r2, [sp, #0]
 80020d0:	462a      	mov	r2, r5
 80020d2:	f7ff ff5e 	bl	8001f92 <UART_WaitOnFlagUntilTimeout>
 80020d6:	2800      	cmp	r0, #0
 80020d8:	d0ec      	beq.n	80020b4 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80020da:	2003      	movs	r0, #3
 80020dc:	e7f0      	b.n	80020c0 <UART_CheckIdleState+0x22>

080020de <HAL_UART_Init>:
{
 80020de:	b510      	push	{r4, lr}
  if (huart == NULL)
 80020e0:	4604      	mov	r4, r0
 80020e2:	b340      	cbz	r0, 8002136 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80020e4:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80020e6:	b91b      	cbnz	r3, 80020f0 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 80020e8:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 80020ec:	f000 fc74 	bl	80029d8 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80020f0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80020f2:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 80020f4:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 80020f6:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 80020f8:	6813      	ldr	r3, [r2, #0]
 80020fa:	f023 0301 	bic.w	r3, r3, #1
 80020fe:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002100:	f7ff fdae 	bl	8001c60 <UART_SetConfig>
 8002104:	2801      	cmp	r0, #1
 8002106:	d016      	beq.n	8002136 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002108:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800210a:	b113      	cbz	r3, 8002112 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 800210c:	4620      	mov	r0, r4
 800210e:	f7ff feeb 	bl	8001ee8 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002112:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8002114:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002116:	685a      	ldr	r2, [r3, #4]
 8002118:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800211c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800211e:	689a      	ldr	r2, [r3, #8]
 8002120:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002124:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	f042 0201 	orr.w	r2, r2, #1
}
 800212c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8002130:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8002132:	f7ff bfb4 	b.w	800209e <UART_CheckIdleState>
}
 8002136:	2001      	movs	r0, #1
 8002138:	bd10      	pop	{r4, pc}
	...

0800213c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800213c:	4b0a      	ldr	r3, [pc, #40]	; (8002168 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800213e:	3b01      	subs	r3, #1
 8002140:	d101      	bne.n	8002146 <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 8002142:	2003      	movs	r0, #3
 8002144:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002146:	6902      	ldr	r2, [r0, #16]
 8002148:	2a00      	cmp	r2, #0
 800214a:	daf8      	bge.n	800213e <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800214c:	6903      	ldr	r3, [r0, #16]
 800214e:	4a06      	ldr	r2, [pc, #24]	; (8002168 <USB_CoreReset+0x2c>)
 8002150:	f043 0301 	orr.w	r3, r3, #1
 8002154:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8002156:	3a01      	subs	r2, #1
 8002158:	d0f3      	beq.n	8002142 <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800215a:	6903      	ldr	r3, [r0, #16]
 800215c:	f013 0301 	ands.w	r3, r3, #1
 8002160:	d1f9      	bne.n	8002156 <USB_CoreReset+0x1a>

  return HAL_OK;
 8002162:	4618      	mov	r0, r3
}
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	00030d41 	.word	0x00030d41

0800216c <USB_CoreInit>:
{
 800216c:	b084      	sub	sp, #16
 800216e:	b538      	push	{r3, r4, r5, lr}
 8002170:	ad05      	add	r5, sp, #20
 8002172:	4604      	mov	r4, r0
 8002174:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002178:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800217a:	2b01      	cmp	r3, #1
 800217c:	d126      	bne.n	80021cc <USB_CoreInit+0x60>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800217e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002180:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002184:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002186:	68c3      	ldr	r3, [r0, #12]
 8002188:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800218c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002190:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002192:	68c3      	ldr	r3, [r0, #12]
 8002194:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002198:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 800219a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800219c:	2b01      	cmp	r3, #1
 800219e:	d103      	bne.n	80021a8 <USB_CoreInit+0x3c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80021a0:	68c3      	ldr	r3, [r0, #12]
 80021a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021a6:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 80021a8:	4620      	mov	r0, r4
 80021aa:	f7ff ffc7 	bl	800213c <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 80021ae:	9b08      	ldr	r3, [sp, #32]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d107      	bne.n	80021c4 <USB_CoreInit+0x58>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80021b4:	68a3      	ldr	r3, [r4, #8]
 80021b6:	f043 0306 	orr.w	r3, r3, #6
 80021ba:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80021bc:	68a3      	ldr	r3, [r4, #8]
 80021be:	f043 0320 	orr.w	r3, r3, #32
 80021c2:	60a3      	str	r3, [r4, #8]
}
 80021c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80021c8:	b004      	add	sp, #16
 80021ca:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80021cc:	68c3      	ldr	r3, [r0, #12]
 80021ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021d2:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 80021d4:	f7ff ffb2 	bl	800213c <USB_CoreReset>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80021d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80021da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021de:	63a3      	str	r3, [r4, #56]	; 0x38
 80021e0:	e7e5      	b.n	80021ae <USB_CoreInit+0x42>

080021e2 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80021e2:	6883      	ldr	r3, [r0, #8]
 80021e4:	f023 0301 	bic.w	r3, r3, #1
 80021e8:	6083      	str	r3, [r0, #8]
}
 80021ea:	2000      	movs	r0, #0
 80021ec:	4770      	bx	lr

080021ee <USB_SetCurrentMode>:
{
 80021ee:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80021f0:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80021f2:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80021f4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80021f8:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80021fa:	d108      	bne.n	800220e <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80021fc:	68c3      	ldr	r3, [r0, #12]
 80021fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002202:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8002204:	2032      	movs	r0, #50	; 0x32
 8002206:	f7fe fa35 	bl	8000674 <HAL_Delay>
  return HAL_OK;
 800220a:	2000      	movs	r0, #0
 800220c:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 800220e:	b919      	cbnz	r1, 8002218 <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002210:	68c3      	ldr	r3, [r0, #12]
 8002212:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002216:	e7f4      	b.n	8002202 <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 8002218:	2001      	movs	r0, #1
}
 800221a:	bd08      	pop	{r3, pc}

0800221c <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800221c:	0189      	lsls	r1, r1, #6
 800221e:	4a07      	ldr	r2, [pc, #28]	; (800223c <USB_FlushTxFifo+0x20>)
 8002220:	f041 0120 	orr.w	r1, r1, #32
 8002224:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 8002226:	3a01      	subs	r2, #1
 8002228:	d005      	beq.n	8002236 <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800222a:	6903      	ldr	r3, [r0, #16]
 800222c:	f013 0320 	ands.w	r3, r3, #32
 8002230:	d1f9      	bne.n	8002226 <USB_FlushTxFifo+0xa>
  return HAL_OK;
 8002232:	4618      	mov	r0, r3
 8002234:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002236:	2003      	movs	r0, #3
}
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	00030d41 	.word	0x00030d41

08002240 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002240:	2310      	movs	r3, #16
 8002242:	4a06      	ldr	r2, [pc, #24]	; (800225c <USB_FlushRxFifo+0x1c>)
 8002244:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 8002246:	3a01      	subs	r2, #1
 8002248:	d005      	beq.n	8002256 <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800224a:	6903      	ldr	r3, [r0, #16]
 800224c:	f013 0310 	ands.w	r3, r3, #16
 8002250:	d1f9      	bne.n	8002246 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 8002252:	4618      	mov	r0, r3
 8002254:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002256:	2003      	movs	r0, #3
}
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	00030d41 	.word	0x00030d41

08002260 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8002260:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8002264:	4319      	orrs	r1, r3
 8002266:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 800226a:	2000      	movs	r0, #0
 800226c:	4770      	bx	lr
	...

08002270 <USB_DevInit>:
{
 8002270:	b084      	sub	sp, #16
 8002272:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002276:	4604      	mov	r4, r0
 8002278:	a809      	add	r0, sp, #36	; 0x24
 800227a:	4688      	mov	r8, r1
 800227c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8002280:	2300      	movs	r3, #0
 8002282:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002284:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8002286:	990e      	ldr	r1, [sp, #56]	; 0x38
    USBx->DIEPTXF[i] = 0U;
 8002288:	461d      	mov	r5, r3
 800228a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800228c:	f103 0040 	add.w	r0, r3, #64	; 0x40
  for (i = 0U; i < 15U; i++)
 8002290:	3301      	adds	r3, #1
    USBx->DIEPTXF[i] = 0U;
 8002292:	eb04 0080 	add.w	r0, r4, r0, lsl #2
  for (i = 0U; i < 15U; i++)
 8002296:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 8002298:	6045      	str	r5, [r0, #4]
  for (i = 0U; i < 15U; i++)
 800229a:	d1f7      	bne.n	800228c <USB_DevInit+0x1c>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800229c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  if (cfg.vbus_sensing_enable == 0U)
 800229e:	2e00      	cmp	r6, #0
 80022a0:	d171      	bne.n	8002386 <USB_DevInit+0x116>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80022a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80022a6:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80022a8:	6823      	ldr	r3, [r4, #0]
 80022aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022ae:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80022b0:	6823      	ldr	r3, [r4, #0]
 80022b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022b6:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 80022b8:	2300      	movs	r3, #0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80022ba:	2901      	cmp	r1, #1
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80022bc:	f504 6500 	add.w	r5, r4, #2048	; 0x800
  USBx_PCGCCTL = 0U;
 80022c0:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80022c4:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 80022c8:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80022cc:	d161      	bne.n	8002392 <USB_DevInit+0x122>
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 80022ce:	2a00      	cmp	r2, #0
 80022d0:	d15d      	bne.n	800238e <USB_DevInit+0x11e>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80022d2:	2100      	movs	r1, #0
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80022d4:	4620      	mov	r0, r4
 80022d6:	f7ff ffc3 	bl	8002260 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80022da:	2110      	movs	r1, #16
 80022dc:	4620      	mov	r0, r4
 80022de:	f7ff ff9d 	bl	800221c <USB_FlushTxFifo>
 80022e2:	4601      	mov	r1, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80022e4:	4620      	mov	r0, r4
 80022e6:	f7ff ffab 	bl	8002240 <USB_FlushRxFifo>
 80022ea:	2800      	cmp	r0, #0
 80022ec:	d155      	bne.n	800239a <USB_DevInit+0x12a>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80022ee:	1c08      	adds	r0, r1, #0
 80022f0:	bf18      	it	ne
 80022f2:	2001      	movne	r0, #1
  USBx_DEVICE->DIEPMSK = 0U;
 80022f4:	2300      	movs	r3, #0
 80022f6:	f504 6210 	add.w	r2, r4, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80022fa:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80022fe:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
      USBx_INEP(i)->DIEPCTL = 0U;
 8002302:	4619      	mov	r1, r3
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002304:	f64f 397f 	movw	r9, #64383	; 0xfb7f
  USBx_DEVICE->DIEPMSK = 0U;
 8002308:	612b      	str	r3, [r5, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800230a:	616b      	str	r3, [r5, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800230c:	61eb      	str	r3, [r5, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800230e:	4543      	cmp	r3, r8
 8002310:	d145      	bne.n	800239e <USB_DevInit+0x12e>
 8002312:	2100      	movs	r1, #0
 8002314:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002318:	f04f 4c90 	mov.w	ip, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800231c:	f04f 6800 	mov.w	r8, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002320:	468e      	mov	lr, r1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002322:	f64f 397f 	movw	r9, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002326:	428b      	cmp	r3, r1
 8002328:	d14c      	bne.n	80023c4 <USB_DevInit+0x154>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800232a:	692b      	ldr	r3, [r5, #16]
  if (cfg.dma_enable == 1U)
 800232c:	2f01      	cmp	r7, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800232e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002332:	612b      	str	r3, [r5, #16]
  if (cfg.dma_enable == 1U)
 8002334:	d107      	bne.n	8002346 <USB_DevInit+0xd6>
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8002336:	4b2e      	ldr	r3, [pc, #184]	; (80023f0 <USB_DevInit+0x180>)
 8002338:	632b      	str	r3, [r5, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800233a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800233c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002340:	f043 0303 	orr.w	r3, r3, #3
 8002344:	632b      	str	r3, [r5, #48]	; 0x30
  USBx->GINTMSK = 0U;
 8002346:	2300      	movs	r3, #0
 8002348:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 800234a:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 800234e:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 8002350:	b91f      	cbnz	r7, 800235a <USB_DevInit+0xea>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002352:	69a3      	ldr	r3, [r4, #24]
 8002354:	f043 0310 	orr.w	r3, r3, #16
 8002358:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800235a:	69a2      	ldr	r2, [r4, #24]
 800235c:	4b25      	ldr	r3, [pc, #148]	; (80023f4 <USB_DevInit+0x184>)
 800235e:	4313      	orrs	r3, r2
 8002360:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8002362:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002364:	b11b      	cbz	r3, 800236e <USB_DevInit+0xfe>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002366:	69a3      	ldr	r3, [r4, #24]
 8002368:	f043 0308 	orr.w	r3, r3, #8
 800236c:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 800236e:	2e01      	cmp	r6, #1
 8002370:	d105      	bne.n	800237e <USB_DevInit+0x10e>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002372:	69a3      	ldr	r3, [r4, #24]
 8002374:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002378:	f043 0304 	orr.w	r3, r3, #4
 800237c:	61a3      	str	r3, [r4, #24]
}
 800237e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002382:	b004      	add	sp, #16
 8002384:	4770      	bx	lr
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8002386:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800238a:	63a3      	str	r3, [r4, #56]	; 0x38
 800238c:	e794      	b.n	80022b8 <USB_DevInit+0x48>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800238e:	2101      	movs	r1, #1
 8002390:	e7a0      	b.n	80022d4 <USB_DevInit+0x64>
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8002392:	2903      	cmp	r1, #3
 8002394:	d09b      	beq.n	80022ce <USB_DevInit+0x5e>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002396:	2103      	movs	r1, #3
 8002398:	e79c      	b.n	80022d4 <USB_DevInit+0x64>
 800239a:	2001      	movs	r0, #1
 800239c:	e7aa      	b.n	80022f4 <USB_DevInit+0x84>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800239e:	f8d2 a000 	ldr.w	sl, [r2]
 80023a2:	f1ba 0f00 	cmp.w	sl, #0
 80023a6:	da0b      	bge.n	80023c0 <USB_DevInit+0x150>
      if (i == 0U)
 80023a8:	b93b      	cbnz	r3, 80023ba <USB_DevInit+0x14a>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80023aa:	f8c2 c000 	str.w	ip, [r2]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 80023ae:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80023b0:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80023b2:	f8c2 9008 	str.w	r9, [r2, #8]
 80023b6:	3220      	adds	r2, #32
 80023b8:	e7a9      	b.n	800230e <USB_DevInit+0x9e>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80023ba:	f8c2 e000 	str.w	lr, [r2]
 80023be:	e7f6      	b.n	80023ae <USB_DevInit+0x13e>
      USBx_INEP(i)->DIEPCTL = 0U;
 80023c0:	6011      	str	r1, [r2, #0]
 80023c2:	e7f4      	b.n	80023ae <USB_DevInit+0x13e>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80023c4:	f8d2 a000 	ldr.w	sl, [r2]
 80023c8:	f1ba 0f00 	cmp.w	sl, #0
 80023cc:	da0c      	bge.n	80023e8 <USB_DevInit+0x178>
      if (i == 0U)
 80023ce:	b941      	cbnz	r1, 80023e2 <USB_DevInit+0x172>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80023d0:	f8c2 8000 	str.w	r8, [r2]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80023d4:	f8c2 e010 	str.w	lr, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80023d8:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80023da:	f8c2 9008 	str.w	r9, [r2, #8]
 80023de:	3220      	adds	r2, #32
 80023e0:	e7a1      	b.n	8002326 <USB_DevInit+0xb6>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80023e2:	f8c2 c000 	str.w	ip, [r2]
 80023e6:	e7f5      	b.n	80023d4 <USB_DevInit+0x164>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80023e8:	f8c2 e000 	str.w	lr, [r2]
 80023ec:	e7f2      	b.n	80023d4 <USB_DevInit+0x164>
 80023ee:	bf00      	nop
 80023f0:	00800100 	.word	0x00800100
 80023f4:	803c3800 	.word	0x803c3800

080023f8 <USB_DevDisconnect>:
{
 80023f8:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80023fa:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80023fe:	f043 0302 	orr.w	r3, r3, #2
 8002402:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8002406:	2003      	movs	r0, #3
 8002408:	f7fe f934 	bl	8000674 <HAL_Delay>
}
 800240c:	2000      	movs	r0, #0
 800240e:	bd08      	pop	{r3, pc}

08002410 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8002410:	b508      	push	{r3, lr}

  heth.Instance = ETH;
 8002412:	4811      	ldr	r0, [pc, #68]	; (8002458 <MX_ETH_Init+0x48>)
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8002414:	2301      	movs	r3, #1
 8002416:	4a11      	ldr	r2, [pc, #68]	; (800245c <MX_ETH_Init+0x4c>)
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
  heth.Init.MACAddr[0] =   0x00;
  heth.Init.MACAddr[1] =   0x80;
 8002418:	2180      	movs	r1, #128	; 0x80
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800241a:	e880 000c 	stmia.w	r0, {r2, r3}
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800241e:	2300      	movs	r3, #0
  heth.Init.MACAddr[0] =   0x00;
 8002420:	6942      	ldr	r2, [r0, #20]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8002422:	8203      	strh	r3, [r0, #16]
  heth.Init.MACAddr[0] =   0x00;
 8002424:	7013      	strb	r3, [r2, #0]
  heth.Init.MACAddr[1] =   0x80;
 8002426:	6942      	ldr	r2, [r0, #20]
 8002428:	7051      	strb	r1, [r2, #1]
  heth.Init.MACAddr[2] =   0xE1;
 800242a:	21e1      	movs	r1, #225	; 0xe1
 800242c:	6942      	ldr	r2, [r0, #20]
 800242e:	7091      	strb	r1, [r2, #2]
  heth.Init.MACAddr[3] =   0x00;
 8002430:	6942      	ldr	r2, [r0, #20]
 8002432:	70d3      	strb	r3, [r2, #3]
  heth.Init.MACAddr[4] =   0x00;
 8002434:	6942      	ldr	r2, [r0, #20]
 8002436:	7113      	strb	r3, [r2, #4]
  heth.Init.MACAddr[5] =   0x00;
 8002438:	6942      	ldr	r2, [r0, #20]
 800243a:	7153      	strb	r3, [r2, #5]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800243c:	6183      	str	r3, [r0, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800243e:	61c3      	str	r3, [r0, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8002440:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8002444:	6203      	str	r3, [r0, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8002446:	f7fe fa83 	bl	8000950 <HAL_ETH_Init>
 800244a:	b118      	cbz	r0, 8002454 <MX_ETH_Init+0x44>
  {
    Error_Handler();
  }

}
 800244c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002450:	f000 b9da 	b.w	8002808 <Error_Handler>
 8002454:	bd08      	pop	{r3, pc}
 8002456:	bf00      	nop
 8002458:	200000ac 	.word	0x200000ac
 800245c:	40028000 	.word	0x40028000

08002460 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8002460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002462:	b08d      	sub	sp, #52	; 0x34
 8002464:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002466:	2214      	movs	r2, #20
 8002468:	2100      	movs	r1, #0
 800246a:	a807      	add	r0, sp, #28
 800246c:	f000 fb9e 	bl	8002bac <memset>
  if(ethHandle->Instance==ETH)
 8002470:	6822      	ldr	r2, [r4, #0]
 8002472:	4b39      	ldr	r3, [pc, #228]	; (8002558 <HAL_ETH_MspInit+0xf8>)
 8002474:	429a      	cmp	r2, r3
 8002476:	d16d      	bne.n	8002554 <HAL_ETH_MspInit+0xf4>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8002478:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247c:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800247e:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002480:	240b      	movs	r4, #11
    __HAL_RCC_ETH_CLK_ENABLE();
 8002482:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002484:	a907      	add	r1, sp, #28
 8002486:	4835      	ldr	r0, [pc, #212]	; (800255c <HAL_ETH_MspInit+0xfc>)

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002488:	2700      	movs	r7, #0
    __HAL_RCC_ETH_CLK_ENABLE();
 800248a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800248e:	631a      	str	r2, [r3, #48]	; 0x30
 8002490:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002492:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8002496:	9200      	str	r2, [sp, #0]
 8002498:	9a00      	ldr	r2, [sp, #0]
 800249a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800249c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80024a0:	631a      	str	r2, [r3, #48]	; 0x30
 80024a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024a4:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 80024a8:	9201      	str	r2, [sp, #4]
 80024aa:	9a01      	ldr	r2, [sp, #4]
 80024ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024ae:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80024b2:	631a      	str	r2, [r3, #48]	; 0x30
 80024b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024b6:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80024ba:	9202      	str	r2, [sp, #8]
 80024bc:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024c0:	f042 0204 	orr.w	r2, r2, #4
 80024c4:	631a      	str	r2, [r3, #48]	; 0x30
 80024c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024c8:	f002 0204 	and.w	r2, r2, #4
 80024cc:	9203      	str	r2, [sp, #12]
 80024ce:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024d2:	f042 0201 	orr.w	r2, r2, #1
 80024d6:	631a      	str	r2, [r3, #48]	; 0x30
 80024d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024da:	f002 0201 	and.w	r2, r2, #1
 80024de:	9204      	str	r2, [sp, #16]
 80024e0:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024e4:	f042 0202 	orr.w	r2, r2, #2
 80024e8:	631a      	str	r2, [r3, #48]	; 0x30
 80024ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024ec:	f002 0202 	and.w	r2, r2, #2
 80024f0:	9205      	str	r2, [sp, #20]
 80024f2:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80024f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024fa:	631a      	str	r2, [r3, #48]	; 0x30
 80024fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fe:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002500:	f003 0340 	and.w	r3, r3, #64	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002504:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002506:	940b      	str	r4, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002508:	9306      	str	r3, [sp, #24]
 800250a:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800250c:	2332      	movs	r3, #50	; 0x32
 800250e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002510:	f7fe fb18 	bl	8000b44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002514:	2386      	movs	r3, #134	; 0x86
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002516:	a907      	add	r1, sp, #28
 8002518:	4811      	ldr	r0, [pc, #68]	; (8002560 <HAL_ETH_MspInit+0x100>)
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800251a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800251c:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251e:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002520:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002522:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002524:	f7fe fb0e 	bl	8000b44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002528:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800252c:	a907      	add	r1, sp, #28
 800252e:	480d      	ldr	r0, [pc, #52]	; (8002564 <HAL_ETH_MspInit+0x104>)
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002530:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002532:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002534:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002536:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002538:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800253a:	f7fe fb03 	bl	8000b44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800253e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002542:	a907      	add	r1, sp, #28
 8002544:	4808      	ldr	r0, [pc, #32]	; (8002568 <HAL_ETH_MspInit+0x108>)
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002546:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002548:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254a:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800254c:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800254e:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002550:	f7fe faf8 	bl	8000b44 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8002554:	b00d      	add	sp, #52	; 0x34
 8002556:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002558:	40028000 	.word	0x40028000
 800255c:	40020800 	.word	0x40020800
 8002560:	40020000 	.word	0x40020000
 8002564:	40020400 	.word	0x40020400
 8002568:	40021800 	.word	0x40021800

0800256c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800256c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800256e:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002570:	2214      	movs	r2, #20
 8002572:	2100      	movs	r1, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002574:	4f3b      	ldr	r7, [pc, #236]	; (8002664 <MX_GPIO_Init+0xf8>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002576:	a807      	add	r0, sp, #28

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002578:	4d3b      	ldr	r5, [pc, #236]	; (8002668 <MX_GPIO_Init+0xfc>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800257a:	f000 fb17 	bl	8002bac <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800257e:	4b3b      	ldr	r3, [pc, #236]	; (800266c <MX_GPIO_Init+0x100>)
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002580:	4638      	mov	r0, r7
 8002582:	f244 0181 	movw	r1, #16513	; 0x4081
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002586:	6b1a      	ldr	r2, [r3, #48]	; 0x30

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002588:	2400      	movs	r4, #0
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800258a:	2601      	movs	r6, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800258c:	f042 0204 	orr.w	r2, r2, #4
 8002590:	631a      	str	r2, [r3, #48]	; 0x30
 8002592:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002594:	f002 0204 	and.w	r2, r2, #4
 8002598:	9201      	str	r2, [sp, #4]
 800259a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800259c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800259e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025a2:	631a      	str	r2, [r3, #48]	; 0x30
 80025a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025a6:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80025aa:	9202      	str	r2, [sp, #8]
 80025ac:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025b0:	f042 0201 	orr.w	r2, r2, #1
 80025b4:	631a      	str	r2, [r3, #48]	; 0x30
 80025b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025b8:	f002 0201 	and.w	r2, r2, #1
 80025bc:	9203      	str	r2, [sp, #12]
 80025be:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025c2:	f042 0202 	orr.w	r2, r2, #2
 80025c6:	631a      	str	r2, [r3, #48]	; 0x30
 80025c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025ca:	f002 0202 	and.w	r2, r2, #2
 80025ce:	9204      	str	r2, [sp, #16]
 80025d0:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025d4:	f042 0208 	orr.w	r2, r2, #8
 80025d8:	631a      	str	r2, [r3, #48]	; 0x30
 80025da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025dc:	f002 0208 	and.w	r2, r2, #8
 80025e0:	9205      	str	r2, [sp, #20]
 80025e2:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80025e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025ea:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80025ec:	2200      	movs	r2, #0
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80025ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025f4:	9306      	str	r3, [sp, #24]
 80025f6:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80025f8:	f7fe fb94 	bl	8000d24 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80025fc:	2200      	movs	r2, #0
 80025fe:	4628      	mov	r0, r5
 8002600:	2140      	movs	r1, #64	; 0x40
 8002602:	f7fe fb8f 	bl	8000d24 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002606:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800260a:	a907      	add	r1, sp, #28
 800260c:	4818      	ldr	r0, [pc, #96]	; (8002670 <MX_GPIO_Init+0x104>)
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800260e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002610:	4b18      	ldr	r3, [pc, #96]	; (8002674 <MX_GPIO_Init+0x108>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002612:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002614:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002616:	f7fe fa95 	bl	8000b44 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800261a:	f244 0381 	movw	r3, #16513	; 0x4081
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800261e:	a907      	add	r1, sp, #28
 8002620:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002622:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002624:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002626:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002628:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800262a:	f7fe fa8b 	bl	8000b44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800262e:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002630:	a907      	add	r1, sp, #28
 8002632:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002634:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002636:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002638:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800263a:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800263c:	f7fe fa82 	bl	8000b44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002640:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002642:	a907      	add	r1, sp, #28
 8002644:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002646:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002648:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264a:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800264c:	f7fe fa7a 	bl	8000b44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002650:	4622      	mov	r2, r4
 8002652:	4621      	mov	r1, r4
 8002654:	2028      	movs	r0, #40	; 0x28
 8002656:	f7fe f831 	bl	80006bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800265a:	2028      	movs	r0, #40	; 0x28
 800265c:	f7fe f866 	bl	800072c <HAL_NVIC_EnableIRQ>

}
 8002660:	b00d      	add	sp, #52	; 0x34
 8002662:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002664:	40020400 	.word	0x40020400
 8002668:	40021800 	.word	0x40021800
 800266c:	40023800 	.word	0x40023800
 8002670:	40020800 	.word	0x40020800
 8002674:	10110000 	.word	0x10110000

08002678 <_write>:

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#ifdef __GNUC__
int _write(int file,uint8_t*ptr,int len)
{
 8002678:	b510      	push	{r4, lr}
 800267a:	4614      	mov	r4, r2
  HAL_UART_Transmit(&huart3,ptr,len,1000);
 800267c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002680:	b292      	uxth	r2, r2
 8002682:	4802      	ldr	r0, [pc, #8]	; (800268c <_write+0x14>)
 8002684:	f7ff fcb4 	bl	8001ff0 <HAL_UART_Transmit>
  return len;
}
 8002688:	4620      	mov	r0, r4
 800268a:	bd10      	pop	{r4, pc}
 800268c:	20000134 	.word	0x20000134

08002690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002690:	b510      	push	{r4, lr}
 8002692:	b0b8      	sub	sp, #224	; 0xe0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002694:	2234      	movs	r2, #52	; 0x34
 8002696:	2100      	movs	r1, #0
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002698:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800269a:	a807      	add	r0, sp, #28
 800269c:	f000 fa86 	bl	8002bac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026a0:	2214      	movs	r2, #20
 80026a2:	2100      	movs	r1, #0
 80026a4:	a802      	add	r0, sp, #8
 80026a6:	f000 fa81 	bl	8002bac <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026aa:	2100      	movs	r1, #0
 80026ac:	2290      	movs	r2, #144	; 0x90
 80026ae:	a814      	add	r0, sp, #80	; 0x50
 80026b0:	f000 fa7c 	bl	8002bac <memset>
  HAL_PWR_EnableBkUpAccess();
 80026b4:	f7fe fbe6 	bl	8000e84 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_PWR_CLK_ENABLE();
 80026b8:	4b20      	ldr	r3, [pc, #128]	; (800273c <SystemClock_Config+0xac>)
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 216;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026ba:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 80026bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026be:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80026c2:	641a      	str	r2, [r3, #64]	; 0x40
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ca:	9300      	str	r3, [sp, #0]
 80026cc:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80026ce:	4b1c      	ldr	r3, [pc, #112]	; (8002740 <SystemClock_Config+0xb0>)
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026da:	940d      	str	r4, [sp, #52]	; 0x34
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80026dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80026e0:	9411      	str	r4, [sp, #68]	; 0x44
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80026e2:	9301      	str	r3, [sp, #4]
 80026e4:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80026e6:	2301      	movs	r3, #1
 80026e8:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80026ea:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80026ee:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80026f0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80026f4:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80026f6:	2304      	movs	r3, #4
 80026f8:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80026fa:	23d8      	movs	r3, #216	; 0xd8
 80026fc:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80026fe:	2309      	movs	r3, #9
 8002700:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002702:	f7fe fbff 	bl	8000f04 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002706:	f7fe fbc5 	bl	8000e94 <HAL_PWREx_EnableOverDrive>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800270a:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800270c:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800270e:	2400      	movs	r4, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002710:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002712:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002716:	2107      	movs	r1, #7
 8002718:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800271a:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800271c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002720:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002722:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002724:	f7fe fdb0 	bl	8001288 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8002728:	4b06      	ldr	r3, [pc, #24]	; (8002744 <SystemClock_Config+0xb4>)
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800272a:	a814      	add	r0, sp, #80	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800272c:	9427      	str	r4, [sp, #156]	; 0x9c
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 800272e:	9314      	str	r3, [sp, #80]	; 0x50
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002730:	9433      	str	r4, [sp, #204]	; 0xcc
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002732:	f7fe fe6d 	bl	8001410 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8002736:	b038      	add	sp, #224	; 0xe0
 8002738:	bd10      	pop	{r4, pc}
 800273a:	bf00      	nop
 800273c:	40023800 	.word	0x40023800
 8002740:	40007000 	.word	0x40007000
 8002744:	00200100 	.word	0x00200100

08002748 <main>:
{
 8002748:	b580      	push	{r7, lr}
    itval =  intime - mytime ;
 800274a:	4d18      	ldr	r5, [pc, #96]	; (80027ac <main+0x64>)
  HAL_Init();
 800274c:	f7fd ff74 	bl	8000638 <HAL_Init>
    itval =  intime - mytime ;
 8002750:	4e17      	ldr	r6, [pc, #92]	; (80027b0 <main+0x68>)
  SystemClock_Config();
 8002752:	f7ff ff9d 	bl	8002690 <SystemClock_Config>
    if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port,USER_Btn_Pin)== 1)
 8002756:	4f17      	ldr	r7, [pc, #92]	; (80027b4 <main+0x6c>)
  MX_GPIO_Init();
 8002758:	f7ff ff08 	bl	800256c <MX_GPIO_Init>
  MX_ETH_Init();
 800275c:	f7ff fe58 	bl	8002410 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8002760:	f000 f91c 	bl	800299c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8002764:	f000 f96c 	bl	8002a40 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM7_Init();
 8002768:	f000 f8d6 	bl	8002918 <MX_TIM7_Init>
  HAL_TIM_Base_Start_IT(&htim7);
 800276c:	4812      	ldr	r0, [pc, #72]	; (80027b8 <main+0x70>)
 800276e:	f7ff f8fd 	bl	800196c <HAL_TIM_Base_Start_IT>
    itval =  intime - mytime ;
 8002772:	4c12      	ldr	r4, [pc, #72]	; (80027bc <main+0x74>)
    if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port,USER_Btn_Pin)== 1)
 8002774:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    itval =  intime - mytime ;
 8002778:	6833      	ldr	r3, [r6, #0]
    if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port,USER_Btn_Pin)== 1)
 800277a:	4638      	mov	r0, r7
    itval =  intime - mytime ;
 800277c:	6822      	ldr	r2, [r4, #0]
 800277e:	1a9b      	subs	r3, r3, r2
 8002780:	602b      	str	r3, [r5, #0]
    if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port,USER_Btn_Pin)== 1)
 8002782:	f7fe fac9 	bl	8000d18 <HAL_GPIO_ReadPin>
 8002786:	2801      	cmp	r0, #1
 8002788:	4b0d      	ldr	r3, [pc, #52]	; (80027c0 <main+0x78>)
 800278a:	d108      	bne.n	800279e <main+0x56>
        pintoggle = 1;
 800278c:	7018      	strb	r0, [r3, #0]
        intime = HAL_GetTick();
 800278e:	f7fd ff6b 	bl	8000668 <HAL_GetTick>
        printf("buteen is pressed!! : %d\r\n",itval);
 8002792:	6829      	ldr	r1, [r5, #0]
        intime = HAL_GetTick();
 8002794:	6030      	str	r0, [r6, #0]
        printf("buteen is pressed!! : %d\r\n",itval);
 8002796:	480b      	ldr	r0, [pc, #44]	; (80027c4 <main+0x7c>)
 8002798:	f000 fa10 	bl	8002bbc <iprintf>
 800279c:	e7e9      	b.n	8002772 <main+0x2a>
      pintoggle = 0;
 800279e:	2200      	movs	r2, #0
 80027a0:	701a      	strb	r2, [r3, #0]
      mytime = HAL_GetTick();
 80027a2:	f7fd ff61 	bl	8000668 <HAL_GetTick>
 80027a6:	6020      	str	r0, [r4, #0]
 80027a8:	e7e3      	b.n	8002772 <main+0x2a>
 80027aa:	bf00      	nop
 80027ac:	20000090 	.word	0x20000090
 80027b0:	2000008c 	.word	0x2000008c
 80027b4:	40020800 	.word	0x40020800
 80027b8:	200000f4 	.word	0x200000f4
 80027bc:	20000094 	.word	0x20000094
 80027c0:	20000098 	.word	0x20000098
 80027c4:	080039e2 	.word	0x080039e2

080027c8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80027c8:	4770      	bx	lr
	...

080027cc <HAL_TIM_PeriodElapsedCallback>:
*/
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  if(htim->Instance == TIM7)
 80027cc:	6802      	ldr	r2, [r0, #0]
 80027ce:	4b0a      	ldr	r3, [pc, #40]	; (80027f8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80027d0:	429a      	cmp	r2, r3
{
 80027d2:	b510      	push	{r4, lr}
  if(htim->Instance == TIM7)
 80027d4:	d10e      	bne.n	80027f4 <HAL_TIM_PeriodElapsedCallback+0x28>
  {
    intime = HAL_GetTick();
 80027d6:	4c09      	ldr	r4, [pc, #36]	; (80027fc <HAL_TIM_PeriodElapsedCallback+0x30>)
 80027d8:	f7fd ff46 	bl	8000668 <HAL_GetTick>
    HAL_GPIO_TogglePin(LD3_GPIO_Port,LD3_Pin);
 80027dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    intime = HAL_GetTick();
 80027e0:	6020      	str	r0, [r4, #0]
    HAL_GPIO_TogglePin(LD3_GPIO_Port,LD3_Pin);
 80027e2:	4807      	ldr	r0, [pc, #28]	; (8002800 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80027e4:	f7fe faa3 	bl	8000d2e <HAL_GPIO_TogglePin>
    printf("Tick : %d \r\n",intime);
 80027e8:	6821      	ldr	r1, [r4, #0]
 80027ea:	4806      	ldr	r0, [pc, #24]	; (8002804 <HAL_TIM_PeriodElapsedCallback+0x38>)
    /*if(pintoggle == 0)
    {
         printf("TIMEOUT!\r\n");
    }*/
  }
}
 80027ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    printf("Tick : %d \r\n",intime);
 80027f0:	f000 b9e4 	b.w	8002bbc <iprintf>
 80027f4:	bd10      	pop	{r4, pc}
 80027f6:	bf00      	nop
 80027f8:	40001400 	.word	0x40001400
 80027fc:	2000008c 	.word	0x2000008c
 8002800:	40020400 	.word	0x40020400
 8002804:	080039d5 	.word	0x080039d5

08002808 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002808:	4770      	bx	lr
	...

0800280c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800280c:	4b0a      	ldr	r3, [pc, #40]	; (8002838 <HAL_MspInit+0x2c>)
{
 800280e:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8002810:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002812:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002816:	641a      	str	r2, [r3, #64]	; 0x40
 8002818:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800281a:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800281e:	9200      	str	r2, [sp, #0]
 8002820:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002822:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002824:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002828:	645a      	str	r2, [r3, #68]	; 0x44
 800282a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002830:	9301      	str	r3, [sp, #4]
 8002832:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002834:	b002      	add	sp, #8
 8002836:	4770      	bx	lr
 8002838:	40023800 	.word	0x40023800

0800283c <NMI_Handler>:
 800283c:	4770      	bx	lr

0800283e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800283e:	e7fe      	b.n	800283e <HardFault_Handler>

08002840 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002840:	e7fe      	b.n	8002840 <MemManage_Handler>

08002842 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002842:	e7fe      	b.n	8002842 <BusFault_Handler>

08002844 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002844:	e7fe      	b.n	8002844 <UsageFault_Handler>

08002846 <SVC_Handler>:
 8002846:	4770      	bx	lr

08002848 <DebugMon_Handler>:
 8002848:	4770      	bx	lr

0800284a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800284a:	4770      	bx	lr

0800284c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800284c:	f7fd bf00 	b.w	8000650 <HAL_IncTick>

08002850 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002850:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002854:	f7fe ba72 	b.w	8000d3c <HAL_GPIO_EXTI_IRQHandler>

08002858 <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002858:	4801      	ldr	r0, [pc, #4]	; (8002860 <TIM7_IRQHandler+0x8>)
 800285a:	f7ff b8a1 	b.w	80019a0 <HAL_TIM_IRQHandler>
 800285e:	bf00      	nop
 8002860:	200000f4 	.word	0x200000f4

08002864 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002864:	b570      	push	{r4, r5, r6, lr}
 8002866:	460e      	mov	r6, r1
 8002868:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800286a:	460c      	mov	r4, r1
 800286c:	1ba3      	subs	r3, r4, r6
 800286e:	429d      	cmp	r5, r3
 8002870:	dc01      	bgt.n	8002876 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8002872:	4628      	mov	r0, r5
 8002874:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8002876:	f3af 8000 	nop.w
 800287a:	f804 0b01 	strb.w	r0, [r4], #1
 800287e:	e7f5      	b.n	800286c <_read+0x8>

08002880 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8002880:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002882:	4b0a      	ldr	r3, [pc, #40]	; (80028ac <_sbrk+0x2c>)
{
 8002884:	4602      	mov	r2, r0
	if (heap_end == 0)
 8002886:	6819      	ldr	r1, [r3, #0]
 8002888:	b909      	cbnz	r1, 800288e <_sbrk+0xe>
		heap_end = &end;
 800288a:	4909      	ldr	r1, [pc, #36]	; (80028b0 <_sbrk+0x30>)
 800288c:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 800288e:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8002890:	4669      	mov	r1, sp
 8002892:	4402      	add	r2, r0
 8002894:	428a      	cmp	r2, r1
 8002896:	d906      	bls.n	80028a6 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8002898:	f000 f95e 	bl	8002b58 <__errno>
 800289c:	230c      	movs	r3, #12
 800289e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80028a0:	f04f 30ff 	mov.w	r0, #4294967295
 80028a4:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80028a6:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 80028a8:	bd08      	pop	{r3, pc}
 80028aa:	bf00      	nop
 80028ac:	2000009c 	.word	0x2000009c
 80028b0:	200005bc 	.word	0x200005bc

080028b4 <_close>:

int _close(int file)
{
	return -1;
}
 80028b4:	f04f 30ff 	mov.w	r0, #4294967295
 80028b8:	4770      	bx	lr

080028ba <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80028ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 80028be:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80028c0:	604b      	str	r3, [r1, #4]
}
 80028c2:	4770      	bx	lr

080028c4 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80028c4:	2001      	movs	r0, #1
 80028c6:	4770      	bx	lr

080028c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80028c8:	2000      	movs	r0, #0
 80028ca:	4770      	bx	lr

080028cc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028cc:	490f      	ldr	r1, [pc, #60]	; (800290c <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80028ce:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028d0:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80028d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 80028dc:	4b0c      	ldr	r3, [pc, #48]	; (8002910 <SystemInit+0x44>)
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	f042 0201 	orr.w	r2, r2, #1
 80028e4:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80028e6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80028ee:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80028f2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80028f4:	4a07      	ldr	r2, [pc, #28]	; (8002914 <SystemInit+0x48>)
 80028f6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80028fe:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002900:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002902:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002906:	608b      	str	r3, [r1, #8]
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	e000ed00 	.word	0xe000ed00
 8002910:	40023800 	.word	0x40023800
 8002914:	24003010 	.word	0x24003010

08002918 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002918:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim7.Instance = TIM7;
 800291a:	480f      	ldr	r0, [pc, #60]	; (8002958 <MX_TIM7_Init+0x40>)
  htim7.Init.Prescaler = 60000-1; //10000-1;
 800291c:	f64e 235f 	movw	r3, #59999	; 0xea5f
 8002920:	4a0e      	ldr	r2, [pc, #56]	; (800295c <MX_TIM7_Init+0x44>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002922:	2400      	movs	r4, #0
  htim7.Init.Prescaler = 60000-1; //10000-1;
 8002924:	e880 000c 	stmia.w	r0, {r2, r3}
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim7.Init.Period = 18000-1;//10800-1; //1초 기준 period 10800 , prescaler값이 많은것이 비해 period는 제한이 없다.
 8002928:	f244 634f 	movw	r3, #17999	; 0x464f
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800292c:	9401      	str	r4, [sp, #4]
 800292e:	9402      	str	r4, [sp, #8]
 8002930:	9403      	str	r4, [sp, #12]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002932:	6084      	str	r4, [r0, #8]
  htim7.Init.Period = 18000-1;//10800-1; //1초 기준 period 10800 , prescaler값이 많은것이 비해 period는 제한이 없다.
 8002934:	60c3      	str	r3, [r0, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002936:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002938:	f7ff f948 	bl	8001bcc <HAL_TIM_Base_Init>
 800293c:	b108      	cbz	r0, 8002942 <MX_TIM7_Init+0x2a>
  {
    Error_Handler();
 800293e:	f7ff ff63 	bl	8002808 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002942:	a901      	add	r1, sp, #4
 8002944:	4804      	ldr	r0, [pc, #16]	; (8002958 <MX_TIM7_Init+0x40>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002946:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002948:	9403      	str	r4, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800294a:	f7ff f959 	bl	8001c00 <HAL_TIMEx_MasterConfigSynchronization>
 800294e:	b108      	cbz	r0, 8002954 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8002950:	f7ff ff5a 	bl	8002808 <Error_Handler>
  }

}
 8002954:	b004      	add	sp, #16
 8002956:	bd10      	pop	{r4, pc}
 8002958:	200000f4 	.word	0x200000f4
 800295c:	40001400 	.word	0x40001400

08002960 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002960:	b507      	push	{r0, r1, r2, lr}

  if(tim_baseHandle->Instance==TIM7)
 8002962:	4b0d      	ldr	r3, [pc, #52]	; (8002998 <HAL_TIM_Base_MspInit+0x38>)
 8002964:	6802      	ldr	r2, [r0, #0]
 8002966:	429a      	cmp	r2, r3
 8002968:	d112      	bne.n	8002990 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800296a:	f503 3309 	add.w	r3, r3, #140288	; 0x22400

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800296e:	2037      	movs	r0, #55	; 0x37
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002970:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002972:	f042 0220 	orr.w	r2, r2, #32
 8002976:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002978:	2200      	movs	r2, #0
    __HAL_RCC_TIM7_CLK_ENABLE();
 800297a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800297c:	4611      	mov	r1, r2
    __HAL_RCC_TIM7_CLK_ENABLE();
 800297e:	f003 0320 	and.w	r3, r3, #32
 8002982:	9301      	str	r3, [sp, #4]
 8002984:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002986:	f7fd fe99 	bl	80006bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800298a:	2037      	movs	r0, #55	; 0x37
 800298c:	f7fd fece 	bl	800072c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8002990:	b003      	add	sp, #12
 8002992:	f85d fb04 	ldr.w	pc, [sp], #4
 8002996:	bf00      	nop
 8002998:	40001400 	.word	0x40001400

0800299c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800299c:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
 800299e:	480c      	ldr	r0, [pc, #48]	; (80029d0 <MX_USART3_UART_Init+0x34>)
  huart3.Init.BaudRate = 115200;
 80029a0:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 80029a4:	4b0b      	ldr	r3, [pc, #44]	; (80029d4 <MX_USART3_UART_Init+0x38>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 80029a6:	220c      	movs	r2, #12
  huart3.Init.BaudRate = 115200;
 80029a8:	e880 4008 	stmia.w	r0, {r3, lr}
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80029ac:	2300      	movs	r3, #0
  huart3.Init.Mode = UART_MODE_TX_RX;
 80029ae:	6142      	str	r2, [r0, #20]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80029b0:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80029b2:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80029b4:	6103      	str	r3, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029b6:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80029b8:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029ba:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029bc:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80029be:	f7ff fb8e 	bl	80020de <HAL_UART_Init>
 80029c2:	b118      	cbz	r0, 80029cc <MX_USART3_UART_Init+0x30>
  {
    Error_Handler();
  }

}
 80029c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80029c8:	f7ff bf1e 	b.w	8002808 <Error_Handler>
 80029cc:	bd08      	pop	{r3, pc}
 80029ce:	bf00      	nop
 80029d0:	20000134 	.word	0x20000134
 80029d4:	40004800 	.word	0x40004800

080029d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80029d8:	b510      	push	{r4, lr}
 80029da:	b088      	sub	sp, #32
 80029dc:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029de:	2214      	movs	r2, #20
 80029e0:	2100      	movs	r1, #0
 80029e2:	a803      	add	r0, sp, #12
 80029e4:	f000 f8e2 	bl	8002bac <memset>
  if(uartHandle->Instance==USART3)
 80029e8:	6822      	ldr	r2, [r4, #0]
 80029ea:	4b13      	ldr	r3, [pc, #76]	; (8002a38 <HAL_UART_MspInit+0x60>)
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d120      	bne.n	8002a32 <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80029f0:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029f4:	a903      	add	r1, sp, #12
 80029f6:	4811      	ldr	r0, [pc, #68]	; (8002a3c <HAL_UART_MspInit+0x64>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80029f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029fa:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80029fe:	641a      	str	r2, [r3, #64]	; 0x40
 8002a00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a02:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8002a06:	9201      	str	r2, [sp, #4]
 8002a08:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a0c:	f042 0208 	orr.w	r2, r2, #8
 8002a10:	631a      	str	r2, [r3, #48]	; 0x30
 8002a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a14:	f003 0308 	and.w	r3, r3, #8
 8002a18:	9302      	str	r3, [sp, #8]
 8002a1a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002a1c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a20:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a22:	2302      	movs	r3, #2
 8002a24:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a26:	2303      	movs	r3, #3
 8002a28:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002a2a:	2307      	movs	r3, #7
 8002a2c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a2e:	f7fe f889 	bl	8000b44 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002a32:	b008      	add	sp, #32
 8002a34:	bd10      	pop	{r4, pc}
 8002a36:	bf00      	nop
 8002a38:	40004800 	.word	0x40004800
 8002a3c:	40020c00 	.word	0x40020c00

08002a40 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8002a40:	b508      	push	{r3, lr}

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002a42:	480c      	ldr	r0, [pc, #48]	; (8002a74 <MX_USB_OTG_FS_PCD_Init+0x34>)
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002a44:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002a48:	2306      	movs	r3, #6
 8002a4a:	e880 000c 	stmia.w	r0, {r2, r3}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002a4e:	2202      	movs	r2, #2
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002a50:	2300      	movs	r3, #0
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002a52:	60c2      	str	r2, [r0, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002a54:	6182      	str	r2, [r0, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002a56:	2201      	movs	r2, #1
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002a58:	6103      	str	r3, [r0, #16]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002a5a:	61c2      	str	r2, [r0, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002a5c:	6203      	str	r3, [r0, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002a5e:	6243      	str	r3, [r0, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002a60:	62c2      	str	r2, [r0, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002a62:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002a64:	f7fe f976 	bl	8000d54 <HAL_PCD_Init>
 8002a68:	b118      	cbz	r0, 8002a72 <MX_USB_OTG_FS_PCD_Init+0x32>
  {
    Error_Handler();
  }

}
 8002a6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002a6e:	f7ff becb 	b.w	8002808 <Error_Handler>
 8002a72:	bd08      	pop	{r3, pc}
 8002a74:	200001b4 	.word	0x200001b4

08002a78 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002a78:	b510      	push	{r4, lr}
 8002a7a:	b088      	sub	sp, #32
 8002a7c:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a7e:	2214      	movs	r2, #20
 8002a80:	2100      	movs	r1, #0
 8002a82:	a803      	add	r0, sp, #12
 8002a84:	f000 f892 	bl	8002bac <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8002a88:	6823      	ldr	r3, [r4, #0]
 8002a8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a8e:	d132      	bne.n	8002af6 <HAL_PCD_MspInit+0x7e>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a90:	4c1a      	ldr	r4, [pc, #104]	; (8002afc <HAL_PCD_MspInit+0x84>)
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a92:	a903      	add	r1, sp, #12
 8002a94:	481a      	ldr	r0, [pc, #104]	; (8002b00 <HAL_PCD_MspInit+0x88>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a96:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002a98:	f043 0301 	orr.w	r3, r3, #1
 8002a9c:	6323      	str	r3, [r4, #48]	; 0x30
 8002a9e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002aa0:	f003 0301 	and.w	r3, r3, #1
 8002aa4:	9300      	str	r3, [sp, #0]
 8002aa6:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002aa8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002aac:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aae:	2302      	movs	r3, #2
 8002ab0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002ab6:	230a      	movs	r3, #10
 8002ab8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aba:	f7fe f843 	bl	8000b44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002abe:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002ac2:	a903      	add	r1, sp, #12
 8002ac4:	480e      	ldr	r0, [pc, #56]	; (8002b00 <HAL_PCD_MspInit+0x88>)
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002ac6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002acc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002ace:	f7fe f839 	bl	8000b44 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002ad2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002ad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ad8:	6363      	str	r3, [r4, #52]	; 0x34
 8002ada:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ae0:	9301      	str	r3, [sp, #4]
 8002ae2:	9b01      	ldr	r3, [sp, #4]
 8002ae4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002ae6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002aea:	6463      	str	r3, [r4, #68]	; 0x44
 8002aec:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002aee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002af2:	9302      	str	r3, [sp, #8]
 8002af4:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002af6:	b008      	add	sp, #32
 8002af8:	bd10      	pop	{r4, pc}
 8002afa:	bf00      	nop
 8002afc:	40023800 	.word	0x40023800
 8002b00:	40020000 	.word	0x40020000

08002b04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002b04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b3c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002b08:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002b0a:	e003      	b.n	8002b14 <LoopCopyDataInit>

08002b0c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002b0c:	4b0c      	ldr	r3, [pc, #48]	; (8002b40 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002b0e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002b10:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002b12:	3104      	adds	r1, #4

08002b14 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002b14:	480b      	ldr	r0, [pc, #44]	; (8002b44 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002b16:	4b0c      	ldr	r3, [pc, #48]	; (8002b48 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002b18:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002b1a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002b1c:	d3f6      	bcc.n	8002b0c <CopyDataInit>
  ldr  r2, =_sbss
 8002b1e:	4a0b      	ldr	r2, [pc, #44]	; (8002b4c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002b20:	e002      	b.n	8002b28 <LoopFillZerobss>

08002b22 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002b22:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002b24:	f842 3b04 	str.w	r3, [r2], #4

08002b28 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002b28:	4b09      	ldr	r3, [pc, #36]	; (8002b50 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002b2a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002b2c:	d3f9      	bcc.n	8002b22 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002b2e:	f7ff fecd 	bl	80028cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b32:	f000 f817 	bl	8002b64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b36:	f7ff fe07 	bl	8002748 <main>
  bx  lr    
 8002b3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002b3c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8002b40:	08003ac0 	.word	0x08003ac0
  ldr  r0, =_sdata
 8002b44:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002b48:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8002b4c:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8002b50:	200005bc 	.word	0x200005bc

08002b54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b54:	e7fe      	b.n	8002b54 <ADC_IRQHandler>
	...

08002b58 <__errno>:
 8002b58:	4b01      	ldr	r3, [pc, #4]	; (8002b60 <__errno+0x8>)
 8002b5a:	6818      	ldr	r0, [r3, #0]
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	2000000c 	.word	0x2000000c

08002b64 <__libc_init_array>:
 8002b64:	b570      	push	{r4, r5, r6, lr}
 8002b66:	4e0d      	ldr	r6, [pc, #52]	; (8002b9c <__libc_init_array+0x38>)
 8002b68:	4c0d      	ldr	r4, [pc, #52]	; (8002ba0 <__libc_init_array+0x3c>)
 8002b6a:	1ba4      	subs	r4, r4, r6
 8002b6c:	10a4      	asrs	r4, r4, #2
 8002b6e:	2500      	movs	r5, #0
 8002b70:	42a5      	cmp	r5, r4
 8002b72:	d109      	bne.n	8002b88 <__libc_init_array+0x24>
 8002b74:	4e0b      	ldr	r6, [pc, #44]	; (8002ba4 <__libc_init_array+0x40>)
 8002b76:	4c0c      	ldr	r4, [pc, #48]	; (8002ba8 <__libc_init_array+0x44>)
 8002b78:	f000 ff18 	bl	80039ac <_init>
 8002b7c:	1ba4      	subs	r4, r4, r6
 8002b7e:	10a4      	asrs	r4, r4, #2
 8002b80:	2500      	movs	r5, #0
 8002b82:	42a5      	cmp	r5, r4
 8002b84:	d105      	bne.n	8002b92 <__libc_init_array+0x2e>
 8002b86:	bd70      	pop	{r4, r5, r6, pc}
 8002b88:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b8c:	4798      	blx	r3
 8002b8e:	3501      	adds	r5, #1
 8002b90:	e7ee      	b.n	8002b70 <__libc_init_array+0xc>
 8002b92:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b96:	4798      	blx	r3
 8002b98:	3501      	adds	r5, #1
 8002b9a:	e7f2      	b.n	8002b82 <__libc_init_array+0x1e>
 8002b9c:	08003ab8 	.word	0x08003ab8
 8002ba0:	08003ab8 	.word	0x08003ab8
 8002ba4:	08003ab8 	.word	0x08003ab8
 8002ba8:	08003abc 	.word	0x08003abc

08002bac <memset>:
 8002bac:	4402      	add	r2, r0
 8002bae:	4603      	mov	r3, r0
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d100      	bne.n	8002bb6 <memset+0xa>
 8002bb4:	4770      	bx	lr
 8002bb6:	f803 1b01 	strb.w	r1, [r3], #1
 8002bba:	e7f9      	b.n	8002bb0 <memset+0x4>

08002bbc <iprintf>:
 8002bbc:	b40f      	push	{r0, r1, r2, r3}
 8002bbe:	4b0a      	ldr	r3, [pc, #40]	; (8002be8 <iprintf+0x2c>)
 8002bc0:	b513      	push	{r0, r1, r4, lr}
 8002bc2:	681c      	ldr	r4, [r3, #0]
 8002bc4:	b124      	cbz	r4, 8002bd0 <iprintf+0x14>
 8002bc6:	69a3      	ldr	r3, [r4, #24]
 8002bc8:	b913      	cbnz	r3, 8002bd0 <iprintf+0x14>
 8002bca:	4620      	mov	r0, r4
 8002bcc:	f000 f84e 	bl	8002c6c <__sinit>
 8002bd0:	ab05      	add	r3, sp, #20
 8002bd2:	9a04      	ldr	r2, [sp, #16]
 8002bd4:	68a1      	ldr	r1, [r4, #8]
 8002bd6:	9301      	str	r3, [sp, #4]
 8002bd8:	4620      	mov	r0, r4
 8002bda:	f000 f959 	bl	8002e90 <_vfiprintf_r>
 8002bde:	b002      	add	sp, #8
 8002be0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002be4:	b004      	add	sp, #16
 8002be6:	4770      	bx	lr
 8002be8:	2000000c 	.word	0x2000000c

08002bec <_cleanup_r>:
 8002bec:	4901      	ldr	r1, [pc, #4]	; (8002bf4 <_cleanup_r+0x8>)
 8002bee:	f000 b8a9 	b.w	8002d44 <_fwalk_reent>
 8002bf2:	bf00      	nop
 8002bf4:	08003765 	.word	0x08003765

08002bf8 <std.isra.0>:
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	b510      	push	{r4, lr}
 8002bfc:	4604      	mov	r4, r0
 8002bfe:	6003      	str	r3, [r0, #0]
 8002c00:	6043      	str	r3, [r0, #4]
 8002c02:	6083      	str	r3, [r0, #8]
 8002c04:	8181      	strh	r1, [r0, #12]
 8002c06:	6643      	str	r3, [r0, #100]	; 0x64
 8002c08:	81c2      	strh	r2, [r0, #14]
 8002c0a:	6103      	str	r3, [r0, #16]
 8002c0c:	6143      	str	r3, [r0, #20]
 8002c0e:	6183      	str	r3, [r0, #24]
 8002c10:	4619      	mov	r1, r3
 8002c12:	2208      	movs	r2, #8
 8002c14:	305c      	adds	r0, #92	; 0x5c
 8002c16:	f7ff ffc9 	bl	8002bac <memset>
 8002c1a:	4b05      	ldr	r3, [pc, #20]	; (8002c30 <std.isra.0+0x38>)
 8002c1c:	6263      	str	r3, [r4, #36]	; 0x24
 8002c1e:	4b05      	ldr	r3, [pc, #20]	; (8002c34 <std.isra.0+0x3c>)
 8002c20:	62a3      	str	r3, [r4, #40]	; 0x28
 8002c22:	4b05      	ldr	r3, [pc, #20]	; (8002c38 <std.isra.0+0x40>)
 8002c24:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002c26:	4b05      	ldr	r3, [pc, #20]	; (8002c3c <std.isra.0+0x44>)
 8002c28:	6224      	str	r4, [r4, #32]
 8002c2a:	6323      	str	r3, [r4, #48]	; 0x30
 8002c2c:	bd10      	pop	{r4, pc}
 8002c2e:	bf00      	nop
 8002c30:	08003409 	.word	0x08003409
 8002c34:	0800342b 	.word	0x0800342b
 8002c38:	08003463 	.word	0x08003463
 8002c3c:	08003487 	.word	0x08003487

08002c40 <__sfmoreglue>:
 8002c40:	b570      	push	{r4, r5, r6, lr}
 8002c42:	1e4a      	subs	r2, r1, #1
 8002c44:	2568      	movs	r5, #104	; 0x68
 8002c46:	4355      	muls	r5, r2
 8002c48:	460e      	mov	r6, r1
 8002c4a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002c4e:	f000 f897 	bl	8002d80 <_malloc_r>
 8002c52:	4604      	mov	r4, r0
 8002c54:	b140      	cbz	r0, 8002c68 <__sfmoreglue+0x28>
 8002c56:	2100      	movs	r1, #0
 8002c58:	e880 0042 	stmia.w	r0, {r1, r6}
 8002c5c:	300c      	adds	r0, #12
 8002c5e:	60a0      	str	r0, [r4, #8]
 8002c60:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002c64:	f7ff ffa2 	bl	8002bac <memset>
 8002c68:	4620      	mov	r0, r4
 8002c6a:	bd70      	pop	{r4, r5, r6, pc}

08002c6c <__sinit>:
 8002c6c:	6983      	ldr	r3, [r0, #24]
 8002c6e:	b510      	push	{r4, lr}
 8002c70:	4604      	mov	r4, r0
 8002c72:	bb33      	cbnz	r3, 8002cc2 <__sinit+0x56>
 8002c74:	6483      	str	r3, [r0, #72]	; 0x48
 8002c76:	64c3      	str	r3, [r0, #76]	; 0x4c
 8002c78:	6503      	str	r3, [r0, #80]	; 0x50
 8002c7a:	4b12      	ldr	r3, [pc, #72]	; (8002cc4 <__sinit+0x58>)
 8002c7c:	4a12      	ldr	r2, [pc, #72]	; (8002cc8 <__sinit+0x5c>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	6282      	str	r2, [r0, #40]	; 0x28
 8002c82:	4298      	cmp	r0, r3
 8002c84:	bf04      	itt	eq
 8002c86:	2301      	moveq	r3, #1
 8002c88:	6183      	streq	r3, [r0, #24]
 8002c8a:	f000 f81f 	bl	8002ccc <__sfp>
 8002c8e:	6060      	str	r0, [r4, #4]
 8002c90:	4620      	mov	r0, r4
 8002c92:	f000 f81b 	bl	8002ccc <__sfp>
 8002c96:	60a0      	str	r0, [r4, #8]
 8002c98:	4620      	mov	r0, r4
 8002c9a:	f000 f817 	bl	8002ccc <__sfp>
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	60e0      	str	r0, [r4, #12]
 8002ca2:	2104      	movs	r1, #4
 8002ca4:	6860      	ldr	r0, [r4, #4]
 8002ca6:	f7ff ffa7 	bl	8002bf8 <std.isra.0>
 8002caa:	2201      	movs	r2, #1
 8002cac:	2109      	movs	r1, #9
 8002cae:	68a0      	ldr	r0, [r4, #8]
 8002cb0:	f7ff ffa2 	bl	8002bf8 <std.isra.0>
 8002cb4:	2202      	movs	r2, #2
 8002cb6:	2112      	movs	r1, #18
 8002cb8:	68e0      	ldr	r0, [r4, #12]
 8002cba:	f7ff ff9d 	bl	8002bf8 <std.isra.0>
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	61a3      	str	r3, [r4, #24]
 8002cc2:	bd10      	pop	{r4, pc}
 8002cc4:	08003a18 	.word	0x08003a18
 8002cc8:	08002bed 	.word	0x08002bed

08002ccc <__sfp>:
 8002ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cce:	4b1c      	ldr	r3, [pc, #112]	; (8002d40 <__sfp+0x74>)
 8002cd0:	681e      	ldr	r6, [r3, #0]
 8002cd2:	69b3      	ldr	r3, [r6, #24]
 8002cd4:	4607      	mov	r7, r0
 8002cd6:	b913      	cbnz	r3, 8002cde <__sfp+0x12>
 8002cd8:	4630      	mov	r0, r6
 8002cda:	f7ff ffc7 	bl	8002c6c <__sinit>
 8002cde:	3648      	adds	r6, #72	; 0x48
 8002ce0:	68b4      	ldr	r4, [r6, #8]
 8002ce2:	6873      	ldr	r3, [r6, #4]
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	d503      	bpl.n	8002cf0 <__sfp+0x24>
 8002ce8:	6833      	ldr	r3, [r6, #0]
 8002cea:	b133      	cbz	r3, 8002cfa <__sfp+0x2e>
 8002cec:	6836      	ldr	r6, [r6, #0]
 8002cee:	e7f7      	b.n	8002ce0 <__sfp+0x14>
 8002cf0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002cf4:	b16d      	cbz	r5, 8002d12 <__sfp+0x46>
 8002cf6:	3468      	adds	r4, #104	; 0x68
 8002cf8:	e7f4      	b.n	8002ce4 <__sfp+0x18>
 8002cfa:	2104      	movs	r1, #4
 8002cfc:	4638      	mov	r0, r7
 8002cfe:	f7ff ff9f 	bl	8002c40 <__sfmoreglue>
 8002d02:	6030      	str	r0, [r6, #0]
 8002d04:	2800      	cmp	r0, #0
 8002d06:	d1f1      	bne.n	8002cec <__sfp+0x20>
 8002d08:	230c      	movs	r3, #12
 8002d0a:	603b      	str	r3, [r7, #0]
 8002d0c:	4604      	mov	r4, r0
 8002d0e:	4620      	mov	r0, r4
 8002d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d16:	81e3      	strh	r3, [r4, #14]
 8002d18:	2301      	movs	r3, #1
 8002d1a:	81a3      	strh	r3, [r4, #12]
 8002d1c:	6665      	str	r5, [r4, #100]	; 0x64
 8002d1e:	6025      	str	r5, [r4, #0]
 8002d20:	60a5      	str	r5, [r4, #8]
 8002d22:	6065      	str	r5, [r4, #4]
 8002d24:	6125      	str	r5, [r4, #16]
 8002d26:	6165      	str	r5, [r4, #20]
 8002d28:	61a5      	str	r5, [r4, #24]
 8002d2a:	2208      	movs	r2, #8
 8002d2c:	4629      	mov	r1, r5
 8002d2e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002d32:	f7ff ff3b 	bl	8002bac <memset>
 8002d36:	6365      	str	r5, [r4, #52]	; 0x34
 8002d38:	63a5      	str	r5, [r4, #56]	; 0x38
 8002d3a:	64a5      	str	r5, [r4, #72]	; 0x48
 8002d3c:	64e5      	str	r5, [r4, #76]	; 0x4c
 8002d3e:	e7e6      	b.n	8002d0e <__sfp+0x42>
 8002d40:	08003a18 	.word	0x08003a18

08002d44 <_fwalk_reent>:
 8002d44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d48:	4680      	mov	r8, r0
 8002d4a:	4689      	mov	r9, r1
 8002d4c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002d50:	2600      	movs	r6, #0
 8002d52:	b914      	cbnz	r4, 8002d5a <_fwalk_reent+0x16>
 8002d54:	4630      	mov	r0, r6
 8002d56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d5a:	68a5      	ldr	r5, [r4, #8]
 8002d5c:	6867      	ldr	r7, [r4, #4]
 8002d5e:	3f01      	subs	r7, #1
 8002d60:	d501      	bpl.n	8002d66 <_fwalk_reent+0x22>
 8002d62:	6824      	ldr	r4, [r4, #0]
 8002d64:	e7f5      	b.n	8002d52 <_fwalk_reent+0xe>
 8002d66:	89ab      	ldrh	r3, [r5, #12]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d907      	bls.n	8002d7c <_fwalk_reent+0x38>
 8002d6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002d70:	3301      	adds	r3, #1
 8002d72:	d003      	beq.n	8002d7c <_fwalk_reent+0x38>
 8002d74:	4629      	mov	r1, r5
 8002d76:	4640      	mov	r0, r8
 8002d78:	47c8      	blx	r9
 8002d7a:	4306      	orrs	r6, r0
 8002d7c:	3568      	adds	r5, #104	; 0x68
 8002d7e:	e7ee      	b.n	8002d5e <_fwalk_reent+0x1a>

08002d80 <_malloc_r>:
 8002d80:	b570      	push	{r4, r5, r6, lr}
 8002d82:	1ccd      	adds	r5, r1, #3
 8002d84:	f025 0503 	bic.w	r5, r5, #3
 8002d88:	3508      	adds	r5, #8
 8002d8a:	2d0c      	cmp	r5, #12
 8002d8c:	bf38      	it	cc
 8002d8e:	250c      	movcc	r5, #12
 8002d90:	2d00      	cmp	r5, #0
 8002d92:	4606      	mov	r6, r0
 8002d94:	db01      	blt.n	8002d9a <_malloc_r+0x1a>
 8002d96:	42a9      	cmp	r1, r5
 8002d98:	d903      	bls.n	8002da2 <_malloc_r+0x22>
 8002d9a:	230c      	movs	r3, #12
 8002d9c:	6033      	str	r3, [r6, #0]
 8002d9e:	2000      	movs	r0, #0
 8002da0:	bd70      	pop	{r4, r5, r6, pc}
 8002da2:	f000 fd7f 	bl	80038a4 <__malloc_lock>
 8002da6:	4a23      	ldr	r2, [pc, #140]	; (8002e34 <_malloc_r+0xb4>)
 8002da8:	6814      	ldr	r4, [r2, #0]
 8002daa:	4621      	mov	r1, r4
 8002dac:	b991      	cbnz	r1, 8002dd4 <_malloc_r+0x54>
 8002dae:	4c22      	ldr	r4, [pc, #136]	; (8002e38 <_malloc_r+0xb8>)
 8002db0:	6823      	ldr	r3, [r4, #0]
 8002db2:	b91b      	cbnz	r3, 8002dbc <_malloc_r+0x3c>
 8002db4:	4630      	mov	r0, r6
 8002db6:	f000 fb17 	bl	80033e8 <_sbrk_r>
 8002dba:	6020      	str	r0, [r4, #0]
 8002dbc:	4629      	mov	r1, r5
 8002dbe:	4630      	mov	r0, r6
 8002dc0:	f000 fb12 	bl	80033e8 <_sbrk_r>
 8002dc4:	1c43      	adds	r3, r0, #1
 8002dc6:	d126      	bne.n	8002e16 <_malloc_r+0x96>
 8002dc8:	230c      	movs	r3, #12
 8002dca:	6033      	str	r3, [r6, #0]
 8002dcc:	4630      	mov	r0, r6
 8002dce:	f000 fd6a 	bl	80038a6 <__malloc_unlock>
 8002dd2:	e7e4      	b.n	8002d9e <_malloc_r+0x1e>
 8002dd4:	680b      	ldr	r3, [r1, #0]
 8002dd6:	1b5b      	subs	r3, r3, r5
 8002dd8:	d41a      	bmi.n	8002e10 <_malloc_r+0x90>
 8002dda:	2b0b      	cmp	r3, #11
 8002ddc:	d90f      	bls.n	8002dfe <_malloc_r+0x7e>
 8002dde:	600b      	str	r3, [r1, #0]
 8002de0:	50cd      	str	r5, [r1, r3]
 8002de2:	18cc      	adds	r4, r1, r3
 8002de4:	4630      	mov	r0, r6
 8002de6:	f000 fd5e 	bl	80038a6 <__malloc_unlock>
 8002dea:	f104 000b 	add.w	r0, r4, #11
 8002dee:	1d23      	adds	r3, r4, #4
 8002df0:	f020 0007 	bic.w	r0, r0, #7
 8002df4:	1ac3      	subs	r3, r0, r3
 8002df6:	d01b      	beq.n	8002e30 <_malloc_r+0xb0>
 8002df8:	425a      	negs	r2, r3
 8002dfa:	50e2      	str	r2, [r4, r3]
 8002dfc:	bd70      	pop	{r4, r5, r6, pc}
 8002dfe:	428c      	cmp	r4, r1
 8002e00:	bf0d      	iteet	eq
 8002e02:	6863      	ldreq	r3, [r4, #4]
 8002e04:	684b      	ldrne	r3, [r1, #4]
 8002e06:	6063      	strne	r3, [r4, #4]
 8002e08:	6013      	streq	r3, [r2, #0]
 8002e0a:	bf18      	it	ne
 8002e0c:	460c      	movne	r4, r1
 8002e0e:	e7e9      	b.n	8002de4 <_malloc_r+0x64>
 8002e10:	460c      	mov	r4, r1
 8002e12:	6849      	ldr	r1, [r1, #4]
 8002e14:	e7ca      	b.n	8002dac <_malloc_r+0x2c>
 8002e16:	1cc4      	adds	r4, r0, #3
 8002e18:	f024 0403 	bic.w	r4, r4, #3
 8002e1c:	42a0      	cmp	r0, r4
 8002e1e:	d005      	beq.n	8002e2c <_malloc_r+0xac>
 8002e20:	1a21      	subs	r1, r4, r0
 8002e22:	4630      	mov	r0, r6
 8002e24:	f000 fae0 	bl	80033e8 <_sbrk_r>
 8002e28:	3001      	adds	r0, #1
 8002e2a:	d0cd      	beq.n	8002dc8 <_malloc_r+0x48>
 8002e2c:	6025      	str	r5, [r4, #0]
 8002e2e:	e7d9      	b.n	8002de4 <_malloc_r+0x64>
 8002e30:	bd70      	pop	{r4, r5, r6, pc}
 8002e32:	bf00      	nop
 8002e34:	200000a0 	.word	0x200000a0
 8002e38:	200000a4 	.word	0x200000a4

08002e3c <__sfputc_r>:
 8002e3c:	6893      	ldr	r3, [r2, #8]
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	b410      	push	{r4}
 8002e44:	6093      	str	r3, [r2, #8]
 8002e46:	da09      	bge.n	8002e5c <__sfputc_r+0x20>
 8002e48:	6994      	ldr	r4, [r2, #24]
 8002e4a:	42a3      	cmp	r3, r4
 8002e4c:	db02      	blt.n	8002e54 <__sfputc_r+0x18>
 8002e4e:	b2cb      	uxtb	r3, r1
 8002e50:	2b0a      	cmp	r3, #10
 8002e52:	d103      	bne.n	8002e5c <__sfputc_r+0x20>
 8002e54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e58:	f000 bb1a 	b.w	8003490 <__swbuf_r>
 8002e5c:	6813      	ldr	r3, [r2, #0]
 8002e5e:	1c58      	adds	r0, r3, #1
 8002e60:	6010      	str	r0, [r2, #0]
 8002e62:	7019      	strb	r1, [r3, #0]
 8002e64:	b2c8      	uxtb	r0, r1
 8002e66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <__sfputs_r>:
 8002e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e6e:	4606      	mov	r6, r0
 8002e70:	460f      	mov	r7, r1
 8002e72:	4614      	mov	r4, r2
 8002e74:	18d5      	adds	r5, r2, r3
 8002e76:	42ac      	cmp	r4, r5
 8002e78:	d101      	bne.n	8002e7e <__sfputs_r+0x12>
 8002e7a:	2000      	movs	r0, #0
 8002e7c:	e007      	b.n	8002e8e <__sfputs_r+0x22>
 8002e7e:	463a      	mov	r2, r7
 8002e80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e84:	4630      	mov	r0, r6
 8002e86:	f7ff ffd9 	bl	8002e3c <__sfputc_r>
 8002e8a:	1c43      	adds	r3, r0, #1
 8002e8c:	d1f3      	bne.n	8002e76 <__sfputs_r+0xa>
 8002e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002e90 <_vfiprintf_r>:
 8002e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e94:	b09d      	sub	sp, #116	; 0x74
 8002e96:	460c      	mov	r4, r1
 8002e98:	4617      	mov	r7, r2
 8002e9a:	9303      	str	r3, [sp, #12]
 8002e9c:	4606      	mov	r6, r0
 8002e9e:	b118      	cbz	r0, 8002ea8 <_vfiprintf_r+0x18>
 8002ea0:	6983      	ldr	r3, [r0, #24]
 8002ea2:	b90b      	cbnz	r3, 8002ea8 <_vfiprintf_r+0x18>
 8002ea4:	f7ff fee2 	bl	8002c6c <__sinit>
 8002ea8:	4b7c      	ldr	r3, [pc, #496]	; (800309c <_vfiprintf_r+0x20c>)
 8002eaa:	429c      	cmp	r4, r3
 8002eac:	d157      	bne.n	8002f5e <_vfiprintf_r+0xce>
 8002eae:	6874      	ldr	r4, [r6, #4]
 8002eb0:	89a3      	ldrh	r3, [r4, #12]
 8002eb2:	0718      	lsls	r0, r3, #28
 8002eb4:	d55d      	bpl.n	8002f72 <_vfiprintf_r+0xe2>
 8002eb6:	6923      	ldr	r3, [r4, #16]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d05a      	beq.n	8002f72 <_vfiprintf_r+0xe2>
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	9309      	str	r3, [sp, #36]	; 0x24
 8002ec0:	2320      	movs	r3, #32
 8002ec2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002ec6:	2330      	movs	r3, #48	; 0x30
 8002ec8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002ecc:	f04f 0b01 	mov.w	fp, #1
 8002ed0:	46b8      	mov	r8, r7
 8002ed2:	4645      	mov	r5, r8
 8002ed4:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d155      	bne.n	8002f88 <_vfiprintf_r+0xf8>
 8002edc:	ebb8 0a07 	subs.w	sl, r8, r7
 8002ee0:	d00b      	beq.n	8002efa <_vfiprintf_r+0x6a>
 8002ee2:	4653      	mov	r3, sl
 8002ee4:	463a      	mov	r2, r7
 8002ee6:	4621      	mov	r1, r4
 8002ee8:	4630      	mov	r0, r6
 8002eea:	f7ff ffbf 	bl	8002e6c <__sfputs_r>
 8002eee:	3001      	adds	r0, #1
 8002ef0:	f000 80c4 	beq.w	800307c <_vfiprintf_r+0x1ec>
 8002ef4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ef6:	4453      	add	r3, sl
 8002ef8:	9309      	str	r3, [sp, #36]	; 0x24
 8002efa:	f898 3000 	ldrb.w	r3, [r8]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	f000 80bc 	beq.w	800307c <_vfiprintf_r+0x1ec>
 8002f04:	2300      	movs	r3, #0
 8002f06:	f04f 32ff 	mov.w	r2, #4294967295
 8002f0a:	9304      	str	r3, [sp, #16]
 8002f0c:	9307      	str	r3, [sp, #28]
 8002f0e:	9205      	str	r2, [sp, #20]
 8002f10:	9306      	str	r3, [sp, #24]
 8002f12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002f16:	931a      	str	r3, [sp, #104]	; 0x68
 8002f18:	2205      	movs	r2, #5
 8002f1a:	7829      	ldrb	r1, [r5, #0]
 8002f1c:	4860      	ldr	r0, [pc, #384]	; (80030a0 <_vfiprintf_r+0x210>)
 8002f1e:	f7fd f98f 	bl	8000240 <memchr>
 8002f22:	f105 0801 	add.w	r8, r5, #1
 8002f26:	9b04      	ldr	r3, [sp, #16]
 8002f28:	2800      	cmp	r0, #0
 8002f2a:	d131      	bne.n	8002f90 <_vfiprintf_r+0x100>
 8002f2c:	06d9      	lsls	r1, r3, #27
 8002f2e:	bf44      	itt	mi
 8002f30:	2220      	movmi	r2, #32
 8002f32:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002f36:	071a      	lsls	r2, r3, #28
 8002f38:	bf44      	itt	mi
 8002f3a:	222b      	movmi	r2, #43	; 0x2b
 8002f3c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002f40:	782a      	ldrb	r2, [r5, #0]
 8002f42:	2a2a      	cmp	r2, #42	; 0x2a
 8002f44:	d02c      	beq.n	8002fa0 <_vfiprintf_r+0x110>
 8002f46:	9a07      	ldr	r2, [sp, #28]
 8002f48:	2100      	movs	r1, #0
 8002f4a:	200a      	movs	r0, #10
 8002f4c:	46a8      	mov	r8, r5
 8002f4e:	3501      	adds	r5, #1
 8002f50:	f898 3000 	ldrb.w	r3, [r8]
 8002f54:	3b30      	subs	r3, #48	; 0x30
 8002f56:	2b09      	cmp	r3, #9
 8002f58:	d96d      	bls.n	8003036 <_vfiprintf_r+0x1a6>
 8002f5a:	b371      	cbz	r1, 8002fba <_vfiprintf_r+0x12a>
 8002f5c:	e026      	b.n	8002fac <_vfiprintf_r+0x11c>
 8002f5e:	4b51      	ldr	r3, [pc, #324]	; (80030a4 <_vfiprintf_r+0x214>)
 8002f60:	429c      	cmp	r4, r3
 8002f62:	d101      	bne.n	8002f68 <_vfiprintf_r+0xd8>
 8002f64:	68b4      	ldr	r4, [r6, #8]
 8002f66:	e7a3      	b.n	8002eb0 <_vfiprintf_r+0x20>
 8002f68:	4b4f      	ldr	r3, [pc, #316]	; (80030a8 <_vfiprintf_r+0x218>)
 8002f6a:	429c      	cmp	r4, r3
 8002f6c:	bf08      	it	eq
 8002f6e:	68f4      	ldreq	r4, [r6, #12]
 8002f70:	e79e      	b.n	8002eb0 <_vfiprintf_r+0x20>
 8002f72:	4621      	mov	r1, r4
 8002f74:	4630      	mov	r0, r6
 8002f76:	f000 faef 	bl	8003558 <__swsetup_r>
 8002f7a:	2800      	cmp	r0, #0
 8002f7c:	d09e      	beq.n	8002ebc <_vfiprintf_r+0x2c>
 8002f7e:	f04f 30ff 	mov.w	r0, #4294967295
 8002f82:	b01d      	add	sp, #116	; 0x74
 8002f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f88:	2b25      	cmp	r3, #37	; 0x25
 8002f8a:	d0a7      	beq.n	8002edc <_vfiprintf_r+0x4c>
 8002f8c:	46a8      	mov	r8, r5
 8002f8e:	e7a0      	b.n	8002ed2 <_vfiprintf_r+0x42>
 8002f90:	4a43      	ldr	r2, [pc, #268]	; (80030a0 <_vfiprintf_r+0x210>)
 8002f92:	1a80      	subs	r0, r0, r2
 8002f94:	fa0b f000 	lsl.w	r0, fp, r0
 8002f98:	4318      	orrs	r0, r3
 8002f9a:	9004      	str	r0, [sp, #16]
 8002f9c:	4645      	mov	r5, r8
 8002f9e:	e7bb      	b.n	8002f18 <_vfiprintf_r+0x88>
 8002fa0:	9a03      	ldr	r2, [sp, #12]
 8002fa2:	1d11      	adds	r1, r2, #4
 8002fa4:	6812      	ldr	r2, [r2, #0]
 8002fa6:	9103      	str	r1, [sp, #12]
 8002fa8:	2a00      	cmp	r2, #0
 8002faa:	db01      	blt.n	8002fb0 <_vfiprintf_r+0x120>
 8002fac:	9207      	str	r2, [sp, #28]
 8002fae:	e004      	b.n	8002fba <_vfiprintf_r+0x12a>
 8002fb0:	4252      	negs	r2, r2
 8002fb2:	f043 0302 	orr.w	r3, r3, #2
 8002fb6:	9207      	str	r2, [sp, #28]
 8002fb8:	9304      	str	r3, [sp, #16]
 8002fba:	f898 3000 	ldrb.w	r3, [r8]
 8002fbe:	2b2e      	cmp	r3, #46	; 0x2e
 8002fc0:	d110      	bne.n	8002fe4 <_vfiprintf_r+0x154>
 8002fc2:	f898 3001 	ldrb.w	r3, [r8, #1]
 8002fc6:	2b2a      	cmp	r3, #42	; 0x2a
 8002fc8:	f108 0101 	add.w	r1, r8, #1
 8002fcc:	d137      	bne.n	800303e <_vfiprintf_r+0x1ae>
 8002fce:	9b03      	ldr	r3, [sp, #12]
 8002fd0:	1d1a      	adds	r2, r3, #4
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	9203      	str	r2, [sp, #12]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	bfb8      	it	lt
 8002fda:	f04f 33ff 	movlt.w	r3, #4294967295
 8002fde:	f108 0802 	add.w	r8, r8, #2
 8002fe2:	9305      	str	r3, [sp, #20]
 8002fe4:	4d31      	ldr	r5, [pc, #196]	; (80030ac <_vfiprintf_r+0x21c>)
 8002fe6:	f898 1000 	ldrb.w	r1, [r8]
 8002fea:	2203      	movs	r2, #3
 8002fec:	4628      	mov	r0, r5
 8002fee:	f7fd f927 	bl	8000240 <memchr>
 8002ff2:	b140      	cbz	r0, 8003006 <_vfiprintf_r+0x176>
 8002ff4:	2340      	movs	r3, #64	; 0x40
 8002ff6:	1b40      	subs	r0, r0, r5
 8002ff8:	fa03 f000 	lsl.w	r0, r3, r0
 8002ffc:	9b04      	ldr	r3, [sp, #16]
 8002ffe:	4303      	orrs	r3, r0
 8003000:	9304      	str	r3, [sp, #16]
 8003002:	f108 0801 	add.w	r8, r8, #1
 8003006:	f898 1000 	ldrb.w	r1, [r8]
 800300a:	4829      	ldr	r0, [pc, #164]	; (80030b0 <_vfiprintf_r+0x220>)
 800300c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003010:	2206      	movs	r2, #6
 8003012:	f108 0701 	add.w	r7, r8, #1
 8003016:	f7fd f913 	bl	8000240 <memchr>
 800301a:	2800      	cmp	r0, #0
 800301c:	d034      	beq.n	8003088 <_vfiprintf_r+0x1f8>
 800301e:	4b25      	ldr	r3, [pc, #148]	; (80030b4 <_vfiprintf_r+0x224>)
 8003020:	bb03      	cbnz	r3, 8003064 <_vfiprintf_r+0x1d4>
 8003022:	9b03      	ldr	r3, [sp, #12]
 8003024:	3307      	adds	r3, #7
 8003026:	f023 0307 	bic.w	r3, r3, #7
 800302a:	3308      	adds	r3, #8
 800302c:	9303      	str	r3, [sp, #12]
 800302e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003030:	444b      	add	r3, r9
 8003032:	9309      	str	r3, [sp, #36]	; 0x24
 8003034:	e74c      	b.n	8002ed0 <_vfiprintf_r+0x40>
 8003036:	fb00 3202 	mla	r2, r0, r2, r3
 800303a:	2101      	movs	r1, #1
 800303c:	e786      	b.n	8002f4c <_vfiprintf_r+0xbc>
 800303e:	2300      	movs	r3, #0
 8003040:	9305      	str	r3, [sp, #20]
 8003042:	4618      	mov	r0, r3
 8003044:	250a      	movs	r5, #10
 8003046:	4688      	mov	r8, r1
 8003048:	3101      	adds	r1, #1
 800304a:	f898 2000 	ldrb.w	r2, [r8]
 800304e:	3a30      	subs	r2, #48	; 0x30
 8003050:	2a09      	cmp	r2, #9
 8003052:	d903      	bls.n	800305c <_vfiprintf_r+0x1cc>
 8003054:	2b00      	cmp	r3, #0
 8003056:	d0c5      	beq.n	8002fe4 <_vfiprintf_r+0x154>
 8003058:	9005      	str	r0, [sp, #20]
 800305a:	e7c3      	b.n	8002fe4 <_vfiprintf_r+0x154>
 800305c:	fb05 2000 	mla	r0, r5, r0, r2
 8003060:	2301      	movs	r3, #1
 8003062:	e7f0      	b.n	8003046 <_vfiprintf_r+0x1b6>
 8003064:	ab03      	add	r3, sp, #12
 8003066:	9300      	str	r3, [sp, #0]
 8003068:	4622      	mov	r2, r4
 800306a:	4b13      	ldr	r3, [pc, #76]	; (80030b8 <_vfiprintf_r+0x228>)
 800306c:	a904      	add	r1, sp, #16
 800306e:	4630      	mov	r0, r6
 8003070:	f3af 8000 	nop.w
 8003074:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003078:	4681      	mov	r9, r0
 800307a:	d1d8      	bne.n	800302e <_vfiprintf_r+0x19e>
 800307c:	89a3      	ldrh	r3, [r4, #12]
 800307e:	065b      	lsls	r3, r3, #25
 8003080:	f53f af7d 	bmi.w	8002f7e <_vfiprintf_r+0xee>
 8003084:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003086:	e77c      	b.n	8002f82 <_vfiprintf_r+0xf2>
 8003088:	ab03      	add	r3, sp, #12
 800308a:	9300      	str	r3, [sp, #0]
 800308c:	4622      	mov	r2, r4
 800308e:	4b0a      	ldr	r3, [pc, #40]	; (80030b8 <_vfiprintf_r+0x228>)
 8003090:	a904      	add	r1, sp, #16
 8003092:	4630      	mov	r0, r6
 8003094:	f000 f888 	bl	80031a8 <_printf_i>
 8003098:	e7ec      	b.n	8003074 <_vfiprintf_r+0x1e4>
 800309a:	bf00      	nop
 800309c:	08003a3c 	.word	0x08003a3c
 80030a0:	08003a7c 	.word	0x08003a7c
 80030a4:	08003a5c 	.word	0x08003a5c
 80030a8:	08003a1c 	.word	0x08003a1c
 80030ac:	08003a82 	.word	0x08003a82
 80030b0:	08003a86 	.word	0x08003a86
 80030b4:	00000000 	.word	0x00000000
 80030b8:	08002e6d 	.word	0x08002e6d

080030bc <_printf_common>:
 80030bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030c0:	4691      	mov	r9, r2
 80030c2:	461f      	mov	r7, r3
 80030c4:	688a      	ldr	r2, [r1, #8]
 80030c6:	690b      	ldr	r3, [r1, #16]
 80030c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80030cc:	4293      	cmp	r3, r2
 80030ce:	bfb8      	it	lt
 80030d0:	4613      	movlt	r3, r2
 80030d2:	f8c9 3000 	str.w	r3, [r9]
 80030d6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80030da:	4606      	mov	r6, r0
 80030dc:	460c      	mov	r4, r1
 80030de:	b112      	cbz	r2, 80030e6 <_printf_common+0x2a>
 80030e0:	3301      	adds	r3, #1
 80030e2:	f8c9 3000 	str.w	r3, [r9]
 80030e6:	6823      	ldr	r3, [r4, #0]
 80030e8:	0699      	lsls	r1, r3, #26
 80030ea:	bf42      	ittt	mi
 80030ec:	f8d9 3000 	ldrmi.w	r3, [r9]
 80030f0:	3302      	addmi	r3, #2
 80030f2:	f8c9 3000 	strmi.w	r3, [r9]
 80030f6:	6825      	ldr	r5, [r4, #0]
 80030f8:	f015 0506 	ands.w	r5, r5, #6
 80030fc:	d107      	bne.n	800310e <_printf_common+0x52>
 80030fe:	f104 0a19 	add.w	sl, r4, #25
 8003102:	68e3      	ldr	r3, [r4, #12]
 8003104:	f8d9 2000 	ldr.w	r2, [r9]
 8003108:	1a9b      	subs	r3, r3, r2
 800310a:	429d      	cmp	r5, r3
 800310c:	db29      	blt.n	8003162 <_printf_common+0xa6>
 800310e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003112:	6822      	ldr	r2, [r4, #0]
 8003114:	3300      	adds	r3, #0
 8003116:	bf18      	it	ne
 8003118:	2301      	movne	r3, #1
 800311a:	0692      	lsls	r2, r2, #26
 800311c:	d42e      	bmi.n	800317c <_printf_common+0xc0>
 800311e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003122:	4639      	mov	r1, r7
 8003124:	4630      	mov	r0, r6
 8003126:	47c0      	blx	r8
 8003128:	3001      	adds	r0, #1
 800312a:	d021      	beq.n	8003170 <_printf_common+0xb4>
 800312c:	6823      	ldr	r3, [r4, #0]
 800312e:	68e5      	ldr	r5, [r4, #12]
 8003130:	f8d9 2000 	ldr.w	r2, [r9]
 8003134:	f003 0306 	and.w	r3, r3, #6
 8003138:	2b04      	cmp	r3, #4
 800313a:	bf08      	it	eq
 800313c:	1aad      	subeq	r5, r5, r2
 800313e:	68a3      	ldr	r3, [r4, #8]
 8003140:	6922      	ldr	r2, [r4, #16]
 8003142:	bf0c      	ite	eq
 8003144:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003148:	2500      	movne	r5, #0
 800314a:	4293      	cmp	r3, r2
 800314c:	bfc4      	itt	gt
 800314e:	1a9b      	subgt	r3, r3, r2
 8003150:	18ed      	addgt	r5, r5, r3
 8003152:	f04f 0900 	mov.w	r9, #0
 8003156:	341a      	adds	r4, #26
 8003158:	454d      	cmp	r5, r9
 800315a:	d11b      	bne.n	8003194 <_printf_common+0xd8>
 800315c:	2000      	movs	r0, #0
 800315e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003162:	2301      	movs	r3, #1
 8003164:	4652      	mov	r2, sl
 8003166:	4639      	mov	r1, r7
 8003168:	4630      	mov	r0, r6
 800316a:	47c0      	blx	r8
 800316c:	3001      	adds	r0, #1
 800316e:	d103      	bne.n	8003178 <_printf_common+0xbc>
 8003170:	f04f 30ff 	mov.w	r0, #4294967295
 8003174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003178:	3501      	adds	r5, #1
 800317a:	e7c2      	b.n	8003102 <_printf_common+0x46>
 800317c:	18e1      	adds	r1, r4, r3
 800317e:	1c5a      	adds	r2, r3, #1
 8003180:	2030      	movs	r0, #48	; 0x30
 8003182:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003186:	4422      	add	r2, r4
 8003188:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800318c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003190:	3302      	adds	r3, #2
 8003192:	e7c4      	b.n	800311e <_printf_common+0x62>
 8003194:	2301      	movs	r3, #1
 8003196:	4622      	mov	r2, r4
 8003198:	4639      	mov	r1, r7
 800319a:	4630      	mov	r0, r6
 800319c:	47c0      	blx	r8
 800319e:	3001      	adds	r0, #1
 80031a0:	d0e6      	beq.n	8003170 <_printf_common+0xb4>
 80031a2:	f109 0901 	add.w	r9, r9, #1
 80031a6:	e7d7      	b.n	8003158 <_printf_common+0x9c>

080031a8 <_printf_i>:
 80031a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80031ac:	4617      	mov	r7, r2
 80031ae:	7e0a      	ldrb	r2, [r1, #24]
 80031b0:	b085      	sub	sp, #20
 80031b2:	2a6e      	cmp	r2, #110	; 0x6e
 80031b4:	4698      	mov	r8, r3
 80031b6:	4606      	mov	r6, r0
 80031b8:	460c      	mov	r4, r1
 80031ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80031bc:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80031c0:	f000 80bc 	beq.w	800333c <_printf_i+0x194>
 80031c4:	d81a      	bhi.n	80031fc <_printf_i+0x54>
 80031c6:	2a63      	cmp	r2, #99	; 0x63
 80031c8:	d02e      	beq.n	8003228 <_printf_i+0x80>
 80031ca:	d80a      	bhi.n	80031e2 <_printf_i+0x3a>
 80031cc:	2a00      	cmp	r2, #0
 80031ce:	f000 80c8 	beq.w	8003362 <_printf_i+0x1ba>
 80031d2:	2a58      	cmp	r2, #88	; 0x58
 80031d4:	f000 808a 	beq.w	80032ec <_printf_i+0x144>
 80031d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80031dc:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80031e0:	e02a      	b.n	8003238 <_printf_i+0x90>
 80031e2:	2a64      	cmp	r2, #100	; 0x64
 80031e4:	d001      	beq.n	80031ea <_printf_i+0x42>
 80031e6:	2a69      	cmp	r2, #105	; 0x69
 80031e8:	d1f6      	bne.n	80031d8 <_printf_i+0x30>
 80031ea:	6821      	ldr	r1, [r4, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	f011 0f80 	tst.w	r1, #128	; 0x80
 80031f2:	d023      	beq.n	800323c <_printf_i+0x94>
 80031f4:	1d11      	adds	r1, r2, #4
 80031f6:	6019      	str	r1, [r3, #0]
 80031f8:	6813      	ldr	r3, [r2, #0]
 80031fa:	e027      	b.n	800324c <_printf_i+0xa4>
 80031fc:	2a73      	cmp	r2, #115	; 0x73
 80031fe:	f000 80b4 	beq.w	800336a <_printf_i+0x1c2>
 8003202:	d808      	bhi.n	8003216 <_printf_i+0x6e>
 8003204:	2a6f      	cmp	r2, #111	; 0x6f
 8003206:	d02a      	beq.n	800325e <_printf_i+0xb6>
 8003208:	2a70      	cmp	r2, #112	; 0x70
 800320a:	d1e5      	bne.n	80031d8 <_printf_i+0x30>
 800320c:	680a      	ldr	r2, [r1, #0]
 800320e:	f042 0220 	orr.w	r2, r2, #32
 8003212:	600a      	str	r2, [r1, #0]
 8003214:	e003      	b.n	800321e <_printf_i+0x76>
 8003216:	2a75      	cmp	r2, #117	; 0x75
 8003218:	d021      	beq.n	800325e <_printf_i+0xb6>
 800321a:	2a78      	cmp	r2, #120	; 0x78
 800321c:	d1dc      	bne.n	80031d8 <_printf_i+0x30>
 800321e:	2278      	movs	r2, #120	; 0x78
 8003220:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003224:	496e      	ldr	r1, [pc, #440]	; (80033e0 <_printf_i+0x238>)
 8003226:	e064      	b.n	80032f2 <_printf_i+0x14a>
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800322e:	1d11      	adds	r1, r2, #4
 8003230:	6019      	str	r1, [r3, #0]
 8003232:	6813      	ldr	r3, [r2, #0]
 8003234:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003238:	2301      	movs	r3, #1
 800323a:	e0a3      	b.n	8003384 <_printf_i+0x1dc>
 800323c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003240:	f102 0104 	add.w	r1, r2, #4
 8003244:	6019      	str	r1, [r3, #0]
 8003246:	d0d7      	beq.n	80031f8 <_printf_i+0x50>
 8003248:	f9b2 3000 	ldrsh.w	r3, [r2]
 800324c:	2b00      	cmp	r3, #0
 800324e:	da03      	bge.n	8003258 <_printf_i+0xb0>
 8003250:	222d      	movs	r2, #45	; 0x2d
 8003252:	425b      	negs	r3, r3
 8003254:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003258:	4962      	ldr	r1, [pc, #392]	; (80033e4 <_printf_i+0x23c>)
 800325a:	220a      	movs	r2, #10
 800325c:	e017      	b.n	800328e <_printf_i+0xe6>
 800325e:	6820      	ldr	r0, [r4, #0]
 8003260:	6819      	ldr	r1, [r3, #0]
 8003262:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003266:	d003      	beq.n	8003270 <_printf_i+0xc8>
 8003268:	1d08      	adds	r0, r1, #4
 800326a:	6018      	str	r0, [r3, #0]
 800326c:	680b      	ldr	r3, [r1, #0]
 800326e:	e006      	b.n	800327e <_printf_i+0xd6>
 8003270:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003274:	f101 0004 	add.w	r0, r1, #4
 8003278:	6018      	str	r0, [r3, #0]
 800327a:	d0f7      	beq.n	800326c <_printf_i+0xc4>
 800327c:	880b      	ldrh	r3, [r1, #0]
 800327e:	4959      	ldr	r1, [pc, #356]	; (80033e4 <_printf_i+0x23c>)
 8003280:	2a6f      	cmp	r2, #111	; 0x6f
 8003282:	bf14      	ite	ne
 8003284:	220a      	movne	r2, #10
 8003286:	2208      	moveq	r2, #8
 8003288:	2000      	movs	r0, #0
 800328a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800328e:	6865      	ldr	r5, [r4, #4]
 8003290:	60a5      	str	r5, [r4, #8]
 8003292:	2d00      	cmp	r5, #0
 8003294:	f2c0 809c 	blt.w	80033d0 <_printf_i+0x228>
 8003298:	6820      	ldr	r0, [r4, #0]
 800329a:	f020 0004 	bic.w	r0, r0, #4
 800329e:	6020      	str	r0, [r4, #0]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d13f      	bne.n	8003324 <_printf_i+0x17c>
 80032a4:	2d00      	cmp	r5, #0
 80032a6:	f040 8095 	bne.w	80033d4 <_printf_i+0x22c>
 80032aa:	4675      	mov	r5, lr
 80032ac:	2a08      	cmp	r2, #8
 80032ae:	d10b      	bne.n	80032c8 <_printf_i+0x120>
 80032b0:	6823      	ldr	r3, [r4, #0]
 80032b2:	07da      	lsls	r2, r3, #31
 80032b4:	d508      	bpl.n	80032c8 <_printf_i+0x120>
 80032b6:	6923      	ldr	r3, [r4, #16]
 80032b8:	6862      	ldr	r2, [r4, #4]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	bfde      	ittt	le
 80032be:	2330      	movle	r3, #48	; 0x30
 80032c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80032c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80032c8:	ebae 0305 	sub.w	r3, lr, r5
 80032cc:	6123      	str	r3, [r4, #16]
 80032ce:	f8cd 8000 	str.w	r8, [sp]
 80032d2:	463b      	mov	r3, r7
 80032d4:	aa03      	add	r2, sp, #12
 80032d6:	4621      	mov	r1, r4
 80032d8:	4630      	mov	r0, r6
 80032da:	f7ff feef 	bl	80030bc <_printf_common>
 80032de:	3001      	adds	r0, #1
 80032e0:	d155      	bne.n	800338e <_printf_i+0x1e6>
 80032e2:	f04f 30ff 	mov.w	r0, #4294967295
 80032e6:	b005      	add	sp, #20
 80032e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80032ec:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80032f0:	493c      	ldr	r1, [pc, #240]	; (80033e4 <_printf_i+0x23c>)
 80032f2:	6822      	ldr	r2, [r4, #0]
 80032f4:	6818      	ldr	r0, [r3, #0]
 80032f6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80032fa:	f100 0504 	add.w	r5, r0, #4
 80032fe:	601d      	str	r5, [r3, #0]
 8003300:	d001      	beq.n	8003306 <_printf_i+0x15e>
 8003302:	6803      	ldr	r3, [r0, #0]
 8003304:	e002      	b.n	800330c <_printf_i+0x164>
 8003306:	0655      	lsls	r5, r2, #25
 8003308:	d5fb      	bpl.n	8003302 <_printf_i+0x15a>
 800330a:	8803      	ldrh	r3, [r0, #0]
 800330c:	07d0      	lsls	r0, r2, #31
 800330e:	bf44      	itt	mi
 8003310:	f042 0220 	orrmi.w	r2, r2, #32
 8003314:	6022      	strmi	r2, [r4, #0]
 8003316:	b91b      	cbnz	r3, 8003320 <_printf_i+0x178>
 8003318:	6822      	ldr	r2, [r4, #0]
 800331a:	f022 0220 	bic.w	r2, r2, #32
 800331e:	6022      	str	r2, [r4, #0]
 8003320:	2210      	movs	r2, #16
 8003322:	e7b1      	b.n	8003288 <_printf_i+0xe0>
 8003324:	4675      	mov	r5, lr
 8003326:	fbb3 f0f2 	udiv	r0, r3, r2
 800332a:	fb02 3310 	mls	r3, r2, r0, r3
 800332e:	5ccb      	ldrb	r3, [r1, r3]
 8003330:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003334:	4603      	mov	r3, r0
 8003336:	2800      	cmp	r0, #0
 8003338:	d1f5      	bne.n	8003326 <_printf_i+0x17e>
 800333a:	e7b7      	b.n	80032ac <_printf_i+0x104>
 800333c:	6808      	ldr	r0, [r1, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	6949      	ldr	r1, [r1, #20]
 8003342:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003346:	d004      	beq.n	8003352 <_printf_i+0x1aa>
 8003348:	1d10      	adds	r0, r2, #4
 800334a:	6018      	str	r0, [r3, #0]
 800334c:	6813      	ldr	r3, [r2, #0]
 800334e:	6019      	str	r1, [r3, #0]
 8003350:	e007      	b.n	8003362 <_printf_i+0x1ba>
 8003352:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003356:	f102 0004 	add.w	r0, r2, #4
 800335a:	6018      	str	r0, [r3, #0]
 800335c:	6813      	ldr	r3, [r2, #0]
 800335e:	d0f6      	beq.n	800334e <_printf_i+0x1a6>
 8003360:	8019      	strh	r1, [r3, #0]
 8003362:	2300      	movs	r3, #0
 8003364:	6123      	str	r3, [r4, #16]
 8003366:	4675      	mov	r5, lr
 8003368:	e7b1      	b.n	80032ce <_printf_i+0x126>
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	1d11      	adds	r1, r2, #4
 800336e:	6019      	str	r1, [r3, #0]
 8003370:	6815      	ldr	r5, [r2, #0]
 8003372:	6862      	ldr	r2, [r4, #4]
 8003374:	2100      	movs	r1, #0
 8003376:	4628      	mov	r0, r5
 8003378:	f7fc ff62 	bl	8000240 <memchr>
 800337c:	b108      	cbz	r0, 8003382 <_printf_i+0x1da>
 800337e:	1b40      	subs	r0, r0, r5
 8003380:	6060      	str	r0, [r4, #4]
 8003382:	6863      	ldr	r3, [r4, #4]
 8003384:	6123      	str	r3, [r4, #16]
 8003386:	2300      	movs	r3, #0
 8003388:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800338c:	e79f      	b.n	80032ce <_printf_i+0x126>
 800338e:	6923      	ldr	r3, [r4, #16]
 8003390:	462a      	mov	r2, r5
 8003392:	4639      	mov	r1, r7
 8003394:	4630      	mov	r0, r6
 8003396:	47c0      	blx	r8
 8003398:	3001      	adds	r0, #1
 800339a:	d0a2      	beq.n	80032e2 <_printf_i+0x13a>
 800339c:	6823      	ldr	r3, [r4, #0]
 800339e:	079b      	lsls	r3, r3, #30
 80033a0:	d507      	bpl.n	80033b2 <_printf_i+0x20a>
 80033a2:	2500      	movs	r5, #0
 80033a4:	f104 0919 	add.w	r9, r4, #25
 80033a8:	68e3      	ldr	r3, [r4, #12]
 80033aa:	9a03      	ldr	r2, [sp, #12]
 80033ac:	1a9b      	subs	r3, r3, r2
 80033ae:	429d      	cmp	r5, r3
 80033b0:	db05      	blt.n	80033be <_printf_i+0x216>
 80033b2:	68e0      	ldr	r0, [r4, #12]
 80033b4:	9b03      	ldr	r3, [sp, #12]
 80033b6:	4298      	cmp	r0, r3
 80033b8:	bfb8      	it	lt
 80033ba:	4618      	movlt	r0, r3
 80033bc:	e793      	b.n	80032e6 <_printf_i+0x13e>
 80033be:	2301      	movs	r3, #1
 80033c0:	464a      	mov	r2, r9
 80033c2:	4639      	mov	r1, r7
 80033c4:	4630      	mov	r0, r6
 80033c6:	47c0      	blx	r8
 80033c8:	3001      	adds	r0, #1
 80033ca:	d08a      	beq.n	80032e2 <_printf_i+0x13a>
 80033cc:	3501      	adds	r5, #1
 80033ce:	e7eb      	b.n	80033a8 <_printf_i+0x200>
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d1a7      	bne.n	8003324 <_printf_i+0x17c>
 80033d4:	780b      	ldrb	r3, [r1, #0]
 80033d6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80033da:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80033de:	e765      	b.n	80032ac <_printf_i+0x104>
 80033e0:	08003a9e 	.word	0x08003a9e
 80033e4:	08003a8d 	.word	0x08003a8d

080033e8 <_sbrk_r>:
 80033e8:	b538      	push	{r3, r4, r5, lr}
 80033ea:	4c06      	ldr	r4, [pc, #24]	; (8003404 <_sbrk_r+0x1c>)
 80033ec:	2300      	movs	r3, #0
 80033ee:	4605      	mov	r5, r0
 80033f0:	4608      	mov	r0, r1
 80033f2:	6023      	str	r3, [r4, #0]
 80033f4:	f7ff fa44 	bl	8002880 <_sbrk>
 80033f8:	1c43      	adds	r3, r0, #1
 80033fa:	d102      	bne.n	8003402 <_sbrk_r+0x1a>
 80033fc:	6823      	ldr	r3, [r4, #0]
 80033fe:	b103      	cbz	r3, 8003402 <_sbrk_r+0x1a>
 8003400:	602b      	str	r3, [r5, #0]
 8003402:	bd38      	pop	{r3, r4, r5, pc}
 8003404:	200005b8 	.word	0x200005b8

08003408 <__sread>:
 8003408:	b510      	push	{r4, lr}
 800340a:	460c      	mov	r4, r1
 800340c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003410:	f000 fa98 	bl	8003944 <_read_r>
 8003414:	2800      	cmp	r0, #0
 8003416:	bfab      	itete	ge
 8003418:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800341a:	89a3      	ldrhlt	r3, [r4, #12]
 800341c:	181b      	addge	r3, r3, r0
 800341e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003422:	bfac      	ite	ge
 8003424:	6563      	strge	r3, [r4, #84]	; 0x54
 8003426:	81a3      	strhlt	r3, [r4, #12]
 8003428:	bd10      	pop	{r4, pc}

0800342a <__swrite>:
 800342a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800342e:	461f      	mov	r7, r3
 8003430:	898b      	ldrh	r3, [r1, #12]
 8003432:	05db      	lsls	r3, r3, #23
 8003434:	4605      	mov	r5, r0
 8003436:	460c      	mov	r4, r1
 8003438:	4616      	mov	r6, r2
 800343a:	d505      	bpl.n	8003448 <__swrite+0x1e>
 800343c:	2302      	movs	r3, #2
 800343e:	2200      	movs	r2, #0
 8003440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003444:	f000 f9b8 	bl	80037b8 <_lseek_r>
 8003448:	89a3      	ldrh	r3, [r4, #12]
 800344a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800344e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003452:	81a3      	strh	r3, [r4, #12]
 8003454:	4632      	mov	r2, r6
 8003456:	463b      	mov	r3, r7
 8003458:	4628      	mov	r0, r5
 800345a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800345e:	f000 b869 	b.w	8003534 <_write_r>

08003462 <__sseek>:
 8003462:	b510      	push	{r4, lr}
 8003464:	460c      	mov	r4, r1
 8003466:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800346a:	f000 f9a5 	bl	80037b8 <_lseek_r>
 800346e:	1c43      	adds	r3, r0, #1
 8003470:	89a3      	ldrh	r3, [r4, #12]
 8003472:	bf15      	itete	ne
 8003474:	6560      	strne	r0, [r4, #84]	; 0x54
 8003476:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800347a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800347e:	81a3      	strheq	r3, [r4, #12]
 8003480:	bf18      	it	ne
 8003482:	81a3      	strhne	r3, [r4, #12]
 8003484:	bd10      	pop	{r4, pc}

08003486 <__sclose>:
 8003486:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800348a:	f000 b8d3 	b.w	8003634 <_close_r>
	...

08003490 <__swbuf_r>:
 8003490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003492:	460e      	mov	r6, r1
 8003494:	4614      	mov	r4, r2
 8003496:	4605      	mov	r5, r0
 8003498:	b118      	cbz	r0, 80034a2 <__swbuf_r+0x12>
 800349a:	6983      	ldr	r3, [r0, #24]
 800349c:	b90b      	cbnz	r3, 80034a2 <__swbuf_r+0x12>
 800349e:	f7ff fbe5 	bl	8002c6c <__sinit>
 80034a2:	4b21      	ldr	r3, [pc, #132]	; (8003528 <__swbuf_r+0x98>)
 80034a4:	429c      	cmp	r4, r3
 80034a6:	d12a      	bne.n	80034fe <__swbuf_r+0x6e>
 80034a8:	686c      	ldr	r4, [r5, #4]
 80034aa:	69a3      	ldr	r3, [r4, #24]
 80034ac:	60a3      	str	r3, [r4, #8]
 80034ae:	89a3      	ldrh	r3, [r4, #12]
 80034b0:	071a      	lsls	r2, r3, #28
 80034b2:	d52e      	bpl.n	8003512 <__swbuf_r+0x82>
 80034b4:	6923      	ldr	r3, [r4, #16]
 80034b6:	b363      	cbz	r3, 8003512 <__swbuf_r+0x82>
 80034b8:	6923      	ldr	r3, [r4, #16]
 80034ba:	6820      	ldr	r0, [r4, #0]
 80034bc:	1ac0      	subs	r0, r0, r3
 80034be:	6963      	ldr	r3, [r4, #20]
 80034c0:	b2f6      	uxtb	r6, r6
 80034c2:	4298      	cmp	r0, r3
 80034c4:	4637      	mov	r7, r6
 80034c6:	db04      	blt.n	80034d2 <__swbuf_r+0x42>
 80034c8:	4621      	mov	r1, r4
 80034ca:	4628      	mov	r0, r5
 80034cc:	f000 f94a 	bl	8003764 <_fflush_r>
 80034d0:	bb28      	cbnz	r0, 800351e <__swbuf_r+0x8e>
 80034d2:	68a3      	ldr	r3, [r4, #8]
 80034d4:	3b01      	subs	r3, #1
 80034d6:	60a3      	str	r3, [r4, #8]
 80034d8:	6823      	ldr	r3, [r4, #0]
 80034da:	1c5a      	adds	r2, r3, #1
 80034dc:	6022      	str	r2, [r4, #0]
 80034de:	701e      	strb	r6, [r3, #0]
 80034e0:	6963      	ldr	r3, [r4, #20]
 80034e2:	3001      	adds	r0, #1
 80034e4:	4298      	cmp	r0, r3
 80034e6:	d004      	beq.n	80034f2 <__swbuf_r+0x62>
 80034e8:	89a3      	ldrh	r3, [r4, #12]
 80034ea:	07db      	lsls	r3, r3, #31
 80034ec:	d519      	bpl.n	8003522 <__swbuf_r+0x92>
 80034ee:	2e0a      	cmp	r6, #10
 80034f0:	d117      	bne.n	8003522 <__swbuf_r+0x92>
 80034f2:	4621      	mov	r1, r4
 80034f4:	4628      	mov	r0, r5
 80034f6:	f000 f935 	bl	8003764 <_fflush_r>
 80034fa:	b190      	cbz	r0, 8003522 <__swbuf_r+0x92>
 80034fc:	e00f      	b.n	800351e <__swbuf_r+0x8e>
 80034fe:	4b0b      	ldr	r3, [pc, #44]	; (800352c <__swbuf_r+0x9c>)
 8003500:	429c      	cmp	r4, r3
 8003502:	d101      	bne.n	8003508 <__swbuf_r+0x78>
 8003504:	68ac      	ldr	r4, [r5, #8]
 8003506:	e7d0      	b.n	80034aa <__swbuf_r+0x1a>
 8003508:	4b09      	ldr	r3, [pc, #36]	; (8003530 <__swbuf_r+0xa0>)
 800350a:	429c      	cmp	r4, r3
 800350c:	bf08      	it	eq
 800350e:	68ec      	ldreq	r4, [r5, #12]
 8003510:	e7cb      	b.n	80034aa <__swbuf_r+0x1a>
 8003512:	4621      	mov	r1, r4
 8003514:	4628      	mov	r0, r5
 8003516:	f000 f81f 	bl	8003558 <__swsetup_r>
 800351a:	2800      	cmp	r0, #0
 800351c:	d0cc      	beq.n	80034b8 <__swbuf_r+0x28>
 800351e:	f04f 37ff 	mov.w	r7, #4294967295
 8003522:	4638      	mov	r0, r7
 8003524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003526:	bf00      	nop
 8003528:	08003a3c 	.word	0x08003a3c
 800352c:	08003a5c 	.word	0x08003a5c
 8003530:	08003a1c 	.word	0x08003a1c

08003534 <_write_r>:
 8003534:	b538      	push	{r3, r4, r5, lr}
 8003536:	4c07      	ldr	r4, [pc, #28]	; (8003554 <_write_r+0x20>)
 8003538:	4605      	mov	r5, r0
 800353a:	4608      	mov	r0, r1
 800353c:	4611      	mov	r1, r2
 800353e:	2200      	movs	r2, #0
 8003540:	6022      	str	r2, [r4, #0]
 8003542:	461a      	mov	r2, r3
 8003544:	f7ff f898 	bl	8002678 <_write>
 8003548:	1c43      	adds	r3, r0, #1
 800354a:	d102      	bne.n	8003552 <_write_r+0x1e>
 800354c:	6823      	ldr	r3, [r4, #0]
 800354e:	b103      	cbz	r3, 8003552 <_write_r+0x1e>
 8003550:	602b      	str	r3, [r5, #0]
 8003552:	bd38      	pop	{r3, r4, r5, pc}
 8003554:	200005b8 	.word	0x200005b8

08003558 <__swsetup_r>:
 8003558:	4b32      	ldr	r3, [pc, #200]	; (8003624 <__swsetup_r+0xcc>)
 800355a:	b570      	push	{r4, r5, r6, lr}
 800355c:	681d      	ldr	r5, [r3, #0]
 800355e:	4606      	mov	r6, r0
 8003560:	460c      	mov	r4, r1
 8003562:	b125      	cbz	r5, 800356e <__swsetup_r+0x16>
 8003564:	69ab      	ldr	r3, [r5, #24]
 8003566:	b913      	cbnz	r3, 800356e <__swsetup_r+0x16>
 8003568:	4628      	mov	r0, r5
 800356a:	f7ff fb7f 	bl	8002c6c <__sinit>
 800356e:	4b2e      	ldr	r3, [pc, #184]	; (8003628 <__swsetup_r+0xd0>)
 8003570:	429c      	cmp	r4, r3
 8003572:	d10f      	bne.n	8003594 <__swsetup_r+0x3c>
 8003574:	686c      	ldr	r4, [r5, #4]
 8003576:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800357a:	b29a      	uxth	r2, r3
 800357c:	0715      	lsls	r5, r2, #28
 800357e:	d42c      	bmi.n	80035da <__swsetup_r+0x82>
 8003580:	06d0      	lsls	r0, r2, #27
 8003582:	d411      	bmi.n	80035a8 <__swsetup_r+0x50>
 8003584:	2209      	movs	r2, #9
 8003586:	6032      	str	r2, [r6, #0]
 8003588:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800358c:	81a3      	strh	r3, [r4, #12]
 800358e:	f04f 30ff 	mov.w	r0, #4294967295
 8003592:	bd70      	pop	{r4, r5, r6, pc}
 8003594:	4b25      	ldr	r3, [pc, #148]	; (800362c <__swsetup_r+0xd4>)
 8003596:	429c      	cmp	r4, r3
 8003598:	d101      	bne.n	800359e <__swsetup_r+0x46>
 800359a:	68ac      	ldr	r4, [r5, #8]
 800359c:	e7eb      	b.n	8003576 <__swsetup_r+0x1e>
 800359e:	4b24      	ldr	r3, [pc, #144]	; (8003630 <__swsetup_r+0xd8>)
 80035a0:	429c      	cmp	r4, r3
 80035a2:	bf08      	it	eq
 80035a4:	68ec      	ldreq	r4, [r5, #12]
 80035a6:	e7e6      	b.n	8003576 <__swsetup_r+0x1e>
 80035a8:	0751      	lsls	r1, r2, #29
 80035aa:	d512      	bpl.n	80035d2 <__swsetup_r+0x7a>
 80035ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80035ae:	b141      	cbz	r1, 80035c2 <__swsetup_r+0x6a>
 80035b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80035b4:	4299      	cmp	r1, r3
 80035b6:	d002      	beq.n	80035be <__swsetup_r+0x66>
 80035b8:	4630      	mov	r0, r6
 80035ba:	f000 f975 	bl	80038a8 <_free_r>
 80035be:	2300      	movs	r3, #0
 80035c0:	6363      	str	r3, [r4, #52]	; 0x34
 80035c2:	89a3      	ldrh	r3, [r4, #12]
 80035c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80035c8:	81a3      	strh	r3, [r4, #12]
 80035ca:	2300      	movs	r3, #0
 80035cc:	6063      	str	r3, [r4, #4]
 80035ce:	6923      	ldr	r3, [r4, #16]
 80035d0:	6023      	str	r3, [r4, #0]
 80035d2:	89a3      	ldrh	r3, [r4, #12]
 80035d4:	f043 0308 	orr.w	r3, r3, #8
 80035d8:	81a3      	strh	r3, [r4, #12]
 80035da:	6923      	ldr	r3, [r4, #16]
 80035dc:	b94b      	cbnz	r3, 80035f2 <__swsetup_r+0x9a>
 80035de:	89a3      	ldrh	r3, [r4, #12]
 80035e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80035e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035e8:	d003      	beq.n	80035f2 <__swsetup_r+0x9a>
 80035ea:	4621      	mov	r1, r4
 80035ec:	4630      	mov	r0, r6
 80035ee:	f000 f919 	bl	8003824 <__smakebuf_r>
 80035f2:	89a2      	ldrh	r2, [r4, #12]
 80035f4:	f012 0301 	ands.w	r3, r2, #1
 80035f8:	d00c      	beq.n	8003614 <__swsetup_r+0xbc>
 80035fa:	2300      	movs	r3, #0
 80035fc:	60a3      	str	r3, [r4, #8]
 80035fe:	6963      	ldr	r3, [r4, #20]
 8003600:	425b      	negs	r3, r3
 8003602:	61a3      	str	r3, [r4, #24]
 8003604:	6923      	ldr	r3, [r4, #16]
 8003606:	b953      	cbnz	r3, 800361e <__swsetup_r+0xc6>
 8003608:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800360c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003610:	d1ba      	bne.n	8003588 <__swsetup_r+0x30>
 8003612:	bd70      	pop	{r4, r5, r6, pc}
 8003614:	0792      	lsls	r2, r2, #30
 8003616:	bf58      	it	pl
 8003618:	6963      	ldrpl	r3, [r4, #20]
 800361a:	60a3      	str	r3, [r4, #8]
 800361c:	e7f2      	b.n	8003604 <__swsetup_r+0xac>
 800361e:	2000      	movs	r0, #0
 8003620:	e7f7      	b.n	8003612 <__swsetup_r+0xba>
 8003622:	bf00      	nop
 8003624:	2000000c 	.word	0x2000000c
 8003628:	08003a3c 	.word	0x08003a3c
 800362c:	08003a5c 	.word	0x08003a5c
 8003630:	08003a1c 	.word	0x08003a1c

08003634 <_close_r>:
 8003634:	b538      	push	{r3, r4, r5, lr}
 8003636:	4c06      	ldr	r4, [pc, #24]	; (8003650 <_close_r+0x1c>)
 8003638:	2300      	movs	r3, #0
 800363a:	4605      	mov	r5, r0
 800363c:	4608      	mov	r0, r1
 800363e:	6023      	str	r3, [r4, #0]
 8003640:	f7ff f938 	bl	80028b4 <_close>
 8003644:	1c43      	adds	r3, r0, #1
 8003646:	d102      	bne.n	800364e <_close_r+0x1a>
 8003648:	6823      	ldr	r3, [r4, #0]
 800364a:	b103      	cbz	r3, 800364e <_close_r+0x1a>
 800364c:	602b      	str	r3, [r5, #0]
 800364e:	bd38      	pop	{r3, r4, r5, pc}
 8003650:	200005b8 	.word	0x200005b8

08003654 <__sflush_r>:
 8003654:	898a      	ldrh	r2, [r1, #12]
 8003656:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800365a:	4605      	mov	r5, r0
 800365c:	0710      	lsls	r0, r2, #28
 800365e:	460c      	mov	r4, r1
 8003660:	d45a      	bmi.n	8003718 <__sflush_r+0xc4>
 8003662:	684b      	ldr	r3, [r1, #4]
 8003664:	2b00      	cmp	r3, #0
 8003666:	dc05      	bgt.n	8003674 <__sflush_r+0x20>
 8003668:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800366a:	2b00      	cmp	r3, #0
 800366c:	dc02      	bgt.n	8003674 <__sflush_r+0x20>
 800366e:	2000      	movs	r0, #0
 8003670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003674:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003676:	2e00      	cmp	r6, #0
 8003678:	d0f9      	beq.n	800366e <__sflush_r+0x1a>
 800367a:	2300      	movs	r3, #0
 800367c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003680:	682f      	ldr	r7, [r5, #0]
 8003682:	602b      	str	r3, [r5, #0]
 8003684:	d033      	beq.n	80036ee <__sflush_r+0x9a>
 8003686:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003688:	89a3      	ldrh	r3, [r4, #12]
 800368a:	075a      	lsls	r2, r3, #29
 800368c:	d505      	bpl.n	800369a <__sflush_r+0x46>
 800368e:	6863      	ldr	r3, [r4, #4]
 8003690:	1ac0      	subs	r0, r0, r3
 8003692:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003694:	b10b      	cbz	r3, 800369a <__sflush_r+0x46>
 8003696:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003698:	1ac0      	subs	r0, r0, r3
 800369a:	2300      	movs	r3, #0
 800369c:	4602      	mov	r2, r0
 800369e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80036a0:	6a21      	ldr	r1, [r4, #32]
 80036a2:	4628      	mov	r0, r5
 80036a4:	47b0      	blx	r6
 80036a6:	1c43      	adds	r3, r0, #1
 80036a8:	89a3      	ldrh	r3, [r4, #12]
 80036aa:	d106      	bne.n	80036ba <__sflush_r+0x66>
 80036ac:	6829      	ldr	r1, [r5, #0]
 80036ae:	291d      	cmp	r1, #29
 80036b0:	d84b      	bhi.n	800374a <__sflush_r+0xf6>
 80036b2:	4a2b      	ldr	r2, [pc, #172]	; (8003760 <__sflush_r+0x10c>)
 80036b4:	40ca      	lsrs	r2, r1
 80036b6:	07d6      	lsls	r6, r2, #31
 80036b8:	d547      	bpl.n	800374a <__sflush_r+0xf6>
 80036ba:	2200      	movs	r2, #0
 80036bc:	6062      	str	r2, [r4, #4]
 80036be:	04d9      	lsls	r1, r3, #19
 80036c0:	6922      	ldr	r2, [r4, #16]
 80036c2:	6022      	str	r2, [r4, #0]
 80036c4:	d504      	bpl.n	80036d0 <__sflush_r+0x7c>
 80036c6:	1c42      	adds	r2, r0, #1
 80036c8:	d101      	bne.n	80036ce <__sflush_r+0x7a>
 80036ca:	682b      	ldr	r3, [r5, #0]
 80036cc:	b903      	cbnz	r3, 80036d0 <__sflush_r+0x7c>
 80036ce:	6560      	str	r0, [r4, #84]	; 0x54
 80036d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80036d2:	602f      	str	r7, [r5, #0]
 80036d4:	2900      	cmp	r1, #0
 80036d6:	d0ca      	beq.n	800366e <__sflush_r+0x1a>
 80036d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80036dc:	4299      	cmp	r1, r3
 80036de:	d002      	beq.n	80036e6 <__sflush_r+0x92>
 80036e0:	4628      	mov	r0, r5
 80036e2:	f000 f8e1 	bl	80038a8 <_free_r>
 80036e6:	2000      	movs	r0, #0
 80036e8:	6360      	str	r0, [r4, #52]	; 0x34
 80036ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036ee:	6a21      	ldr	r1, [r4, #32]
 80036f0:	2301      	movs	r3, #1
 80036f2:	4628      	mov	r0, r5
 80036f4:	47b0      	blx	r6
 80036f6:	1c41      	adds	r1, r0, #1
 80036f8:	d1c6      	bne.n	8003688 <__sflush_r+0x34>
 80036fa:	682b      	ldr	r3, [r5, #0]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d0c3      	beq.n	8003688 <__sflush_r+0x34>
 8003700:	2b1d      	cmp	r3, #29
 8003702:	d001      	beq.n	8003708 <__sflush_r+0xb4>
 8003704:	2b16      	cmp	r3, #22
 8003706:	d101      	bne.n	800370c <__sflush_r+0xb8>
 8003708:	602f      	str	r7, [r5, #0]
 800370a:	e7b0      	b.n	800366e <__sflush_r+0x1a>
 800370c:	89a3      	ldrh	r3, [r4, #12]
 800370e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003712:	81a3      	strh	r3, [r4, #12]
 8003714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003718:	690f      	ldr	r7, [r1, #16]
 800371a:	2f00      	cmp	r7, #0
 800371c:	d0a7      	beq.n	800366e <__sflush_r+0x1a>
 800371e:	0793      	lsls	r3, r2, #30
 8003720:	680e      	ldr	r6, [r1, #0]
 8003722:	bf08      	it	eq
 8003724:	694b      	ldreq	r3, [r1, #20]
 8003726:	600f      	str	r7, [r1, #0]
 8003728:	bf18      	it	ne
 800372a:	2300      	movne	r3, #0
 800372c:	eba6 0807 	sub.w	r8, r6, r7
 8003730:	608b      	str	r3, [r1, #8]
 8003732:	f1b8 0f00 	cmp.w	r8, #0
 8003736:	dd9a      	ble.n	800366e <__sflush_r+0x1a>
 8003738:	4643      	mov	r3, r8
 800373a:	463a      	mov	r2, r7
 800373c:	6a21      	ldr	r1, [r4, #32]
 800373e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003740:	4628      	mov	r0, r5
 8003742:	47b0      	blx	r6
 8003744:	2800      	cmp	r0, #0
 8003746:	dc07      	bgt.n	8003758 <__sflush_r+0x104>
 8003748:	89a3      	ldrh	r3, [r4, #12]
 800374a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800374e:	81a3      	strh	r3, [r4, #12]
 8003750:	f04f 30ff 	mov.w	r0, #4294967295
 8003754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003758:	4407      	add	r7, r0
 800375a:	eba8 0800 	sub.w	r8, r8, r0
 800375e:	e7e8      	b.n	8003732 <__sflush_r+0xde>
 8003760:	20400001 	.word	0x20400001

08003764 <_fflush_r>:
 8003764:	b538      	push	{r3, r4, r5, lr}
 8003766:	690b      	ldr	r3, [r1, #16]
 8003768:	4605      	mov	r5, r0
 800376a:	460c      	mov	r4, r1
 800376c:	b1db      	cbz	r3, 80037a6 <_fflush_r+0x42>
 800376e:	b118      	cbz	r0, 8003778 <_fflush_r+0x14>
 8003770:	6983      	ldr	r3, [r0, #24]
 8003772:	b90b      	cbnz	r3, 8003778 <_fflush_r+0x14>
 8003774:	f7ff fa7a 	bl	8002c6c <__sinit>
 8003778:	4b0c      	ldr	r3, [pc, #48]	; (80037ac <_fflush_r+0x48>)
 800377a:	429c      	cmp	r4, r3
 800377c:	d109      	bne.n	8003792 <_fflush_r+0x2e>
 800377e:	686c      	ldr	r4, [r5, #4]
 8003780:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003784:	b17b      	cbz	r3, 80037a6 <_fflush_r+0x42>
 8003786:	4621      	mov	r1, r4
 8003788:	4628      	mov	r0, r5
 800378a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800378e:	f7ff bf61 	b.w	8003654 <__sflush_r>
 8003792:	4b07      	ldr	r3, [pc, #28]	; (80037b0 <_fflush_r+0x4c>)
 8003794:	429c      	cmp	r4, r3
 8003796:	d101      	bne.n	800379c <_fflush_r+0x38>
 8003798:	68ac      	ldr	r4, [r5, #8]
 800379a:	e7f1      	b.n	8003780 <_fflush_r+0x1c>
 800379c:	4b05      	ldr	r3, [pc, #20]	; (80037b4 <_fflush_r+0x50>)
 800379e:	429c      	cmp	r4, r3
 80037a0:	bf08      	it	eq
 80037a2:	68ec      	ldreq	r4, [r5, #12]
 80037a4:	e7ec      	b.n	8003780 <_fflush_r+0x1c>
 80037a6:	2000      	movs	r0, #0
 80037a8:	bd38      	pop	{r3, r4, r5, pc}
 80037aa:	bf00      	nop
 80037ac:	08003a3c 	.word	0x08003a3c
 80037b0:	08003a5c 	.word	0x08003a5c
 80037b4:	08003a1c 	.word	0x08003a1c

080037b8 <_lseek_r>:
 80037b8:	b538      	push	{r3, r4, r5, lr}
 80037ba:	4c07      	ldr	r4, [pc, #28]	; (80037d8 <_lseek_r+0x20>)
 80037bc:	4605      	mov	r5, r0
 80037be:	4608      	mov	r0, r1
 80037c0:	4611      	mov	r1, r2
 80037c2:	2200      	movs	r2, #0
 80037c4:	6022      	str	r2, [r4, #0]
 80037c6:	461a      	mov	r2, r3
 80037c8:	f7ff f87e 	bl	80028c8 <_lseek>
 80037cc:	1c43      	adds	r3, r0, #1
 80037ce:	d102      	bne.n	80037d6 <_lseek_r+0x1e>
 80037d0:	6823      	ldr	r3, [r4, #0]
 80037d2:	b103      	cbz	r3, 80037d6 <_lseek_r+0x1e>
 80037d4:	602b      	str	r3, [r5, #0]
 80037d6:	bd38      	pop	{r3, r4, r5, pc}
 80037d8:	200005b8 	.word	0x200005b8

080037dc <__swhatbuf_r>:
 80037dc:	b570      	push	{r4, r5, r6, lr}
 80037de:	460e      	mov	r6, r1
 80037e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037e4:	2900      	cmp	r1, #0
 80037e6:	b090      	sub	sp, #64	; 0x40
 80037e8:	4614      	mov	r4, r2
 80037ea:	461d      	mov	r5, r3
 80037ec:	da07      	bge.n	80037fe <__swhatbuf_r+0x22>
 80037ee:	2300      	movs	r3, #0
 80037f0:	602b      	str	r3, [r5, #0]
 80037f2:	89b3      	ldrh	r3, [r6, #12]
 80037f4:	061a      	lsls	r2, r3, #24
 80037f6:	d410      	bmi.n	800381a <__swhatbuf_r+0x3e>
 80037f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037fc:	e00e      	b.n	800381c <__swhatbuf_r+0x40>
 80037fe:	aa01      	add	r2, sp, #4
 8003800:	f000 f8b2 	bl	8003968 <_fstat_r>
 8003804:	2800      	cmp	r0, #0
 8003806:	dbf2      	blt.n	80037ee <__swhatbuf_r+0x12>
 8003808:	9a02      	ldr	r2, [sp, #8]
 800380a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800380e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003812:	425a      	negs	r2, r3
 8003814:	415a      	adcs	r2, r3
 8003816:	602a      	str	r2, [r5, #0]
 8003818:	e7ee      	b.n	80037f8 <__swhatbuf_r+0x1c>
 800381a:	2340      	movs	r3, #64	; 0x40
 800381c:	2000      	movs	r0, #0
 800381e:	6023      	str	r3, [r4, #0]
 8003820:	b010      	add	sp, #64	; 0x40
 8003822:	bd70      	pop	{r4, r5, r6, pc}

08003824 <__smakebuf_r>:
 8003824:	898b      	ldrh	r3, [r1, #12]
 8003826:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003828:	079d      	lsls	r5, r3, #30
 800382a:	4606      	mov	r6, r0
 800382c:	460c      	mov	r4, r1
 800382e:	d507      	bpl.n	8003840 <__smakebuf_r+0x1c>
 8003830:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003834:	6023      	str	r3, [r4, #0]
 8003836:	6123      	str	r3, [r4, #16]
 8003838:	2301      	movs	r3, #1
 800383a:	6163      	str	r3, [r4, #20]
 800383c:	b002      	add	sp, #8
 800383e:	bd70      	pop	{r4, r5, r6, pc}
 8003840:	ab01      	add	r3, sp, #4
 8003842:	466a      	mov	r2, sp
 8003844:	f7ff ffca 	bl	80037dc <__swhatbuf_r>
 8003848:	9900      	ldr	r1, [sp, #0]
 800384a:	4605      	mov	r5, r0
 800384c:	4630      	mov	r0, r6
 800384e:	f7ff fa97 	bl	8002d80 <_malloc_r>
 8003852:	b948      	cbnz	r0, 8003868 <__smakebuf_r+0x44>
 8003854:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003858:	059a      	lsls	r2, r3, #22
 800385a:	d4ef      	bmi.n	800383c <__smakebuf_r+0x18>
 800385c:	f023 0303 	bic.w	r3, r3, #3
 8003860:	f043 0302 	orr.w	r3, r3, #2
 8003864:	81a3      	strh	r3, [r4, #12]
 8003866:	e7e3      	b.n	8003830 <__smakebuf_r+0xc>
 8003868:	4b0d      	ldr	r3, [pc, #52]	; (80038a0 <__smakebuf_r+0x7c>)
 800386a:	62b3      	str	r3, [r6, #40]	; 0x28
 800386c:	89a3      	ldrh	r3, [r4, #12]
 800386e:	6020      	str	r0, [r4, #0]
 8003870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003874:	81a3      	strh	r3, [r4, #12]
 8003876:	9b00      	ldr	r3, [sp, #0]
 8003878:	6163      	str	r3, [r4, #20]
 800387a:	9b01      	ldr	r3, [sp, #4]
 800387c:	6120      	str	r0, [r4, #16]
 800387e:	b15b      	cbz	r3, 8003898 <__smakebuf_r+0x74>
 8003880:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003884:	4630      	mov	r0, r6
 8003886:	f000 f881 	bl	800398c <_isatty_r>
 800388a:	b128      	cbz	r0, 8003898 <__smakebuf_r+0x74>
 800388c:	89a3      	ldrh	r3, [r4, #12]
 800388e:	f023 0303 	bic.w	r3, r3, #3
 8003892:	f043 0301 	orr.w	r3, r3, #1
 8003896:	81a3      	strh	r3, [r4, #12]
 8003898:	89a3      	ldrh	r3, [r4, #12]
 800389a:	431d      	orrs	r5, r3
 800389c:	81a5      	strh	r5, [r4, #12]
 800389e:	e7cd      	b.n	800383c <__smakebuf_r+0x18>
 80038a0:	08002bed 	.word	0x08002bed

080038a4 <__malloc_lock>:
 80038a4:	4770      	bx	lr

080038a6 <__malloc_unlock>:
 80038a6:	4770      	bx	lr

080038a8 <_free_r>:
 80038a8:	b538      	push	{r3, r4, r5, lr}
 80038aa:	4605      	mov	r5, r0
 80038ac:	2900      	cmp	r1, #0
 80038ae:	d045      	beq.n	800393c <_free_r+0x94>
 80038b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038b4:	1f0c      	subs	r4, r1, #4
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	bfb8      	it	lt
 80038ba:	18e4      	addlt	r4, r4, r3
 80038bc:	f7ff fff2 	bl	80038a4 <__malloc_lock>
 80038c0:	4a1f      	ldr	r2, [pc, #124]	; (8003940 <_free_r+0x98>)
 80038c2:	6813      	ldr	r3, [r2, #0]
 80038c4:	4610      	mov	r0, r2
 80038c6:	b933      	cbnz	r3, 80038d6 <_free_r+0x2e>
 80038c8:	6063      	str	r3, [r4, #4]
 80038ca:	6014      	str	r4, [r2, #0]
 80038cc:	4628      	mov	r0, r5
 80038ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038d2:	f7ff bfe8 	b.w	80038a6 <__malloc_unlock>
 80038d6:	42a3      	cmp	r3, r4
 80038d8:	d90c      	bls.n	80038f4 <_free_r+0x4c>
 80038da:	6821      	ldr	r1, [r4, #0]
 80038dc:	1862      	adds	r2, r4, r1
 80038de:	4293      	cmp	r3, r2
 80038e0:	bf04      	itt	eq
 80038e2:	681a      	ldreq	r2, [r3, #0]
 80038e4:	685b      	ldreq	r3, [r3, #4]
 80038e6:	6063      	str	r3, [r4, #4]
 80038e8:	bf04      	itt	eq
 80038ea:	1852      	addeq	r2, r2, r1
 80038ec:	6022      	streq	r2, [r4, #0]
 80038ee:	6004      	str	r4, [r0, #0]
 80038f0:	e7ec      	b.n	80038cc <_free_r+0x24>
 80038f2:	4613      	mov	r3, r2
 80038f4:	685a      	ldr	r2, [r3, #4]
 80038f6:	b10a      	cbz	r2, 80038fc <_free_r+0x54>
 80038f8:	42a2      	cmp	r2, r4
 80038fa:	d9fa      	bls.n	80038f2 <_free_r+0x4a>
 80038fc:	6819      	ldr	r1, [r3, #0]
 80038fe:	1858      	adds	r0, r3, r1
 8003900:	42a0      	cmp	r0, r4
 8003902:	d10b      	bne.n	800391c <_free_r+0x74>
 8003904:	6820      	ldr	r0, [r4, #0]
 8003906:	4401      	add	r1, r0
 8003908:	1858      	adds	r0, r3, r1
 800390a:	4282      	cmp	r2, r0
 800390c:	6019      	str	r1, [r3, #0]
 800390e:	d1dd      	bne.n	80038cc <_free_r+0x24>
 8003910:	6810      	ldr	r0, [r2, #0]
 8003912:	6852      	ldr	r2, [r2, #4]
 8003914:	605a      	str	r2, [r3, #4]
 8003916:	4401      	add	r1, r0
 8003918:	6019      	str	r1, [r3, #0]
 800391a:	e7d7      	b.n	80038cc <_free_r+0x24>
 800391c:	d902      	bls.n	8003924 <_free_r+0x7c>
 800391e:	230c      	movs	r3, #12
 8003920:	602b      	str	r3, [r5, #0]
 8003922:	e7d3      	b.n	80038cc <_free_r+0x24>
 8003924:	6820      	ldr	r0, [r4, #0]
 8003926:	1821      	adds	r1, r4, r0
 8003928:	428a      	cmp	r2, r1
 800392a:	bf04      	itt	eq
 800392c:	6811      	ldreq	r1, [r2, #0]
 800392e:	6852      	ldreq	r2, [r2, #4]
 8003930:	6062      	str	r2, [r4, #4]
 8003932:	bf04      	itt	eq
 8003934:	1809      	addeq	r1, r1, r0
 8003936:	6021      	streq	r1, [r4, #0]
 8003938:	605c      	str	r4, [r3, #4]
 800393a:	e7c7      	b.n	80038cc <_free_r+0x24>
 800393c:	bd38      	pop	{r3, r4, r5, pc}
 800393e:	bf00      	nop
 8003940:	200000a0 	.word	0x200000a0

08003944 <_read_r>:
 8003944:	b538      	push	{r3, r4, r5, lr}
 8003946:	4c07      	ldr	r4, [pc, #28]	; (8003964 <_read_r+0x20>)
 8003948:	4605      	mov	r5, r0
 800394a:	4608      	mov	r0, r1
 800394c:	4611      	mov	r1, r2
 800394e:	2200      	movs	r2, #0
 8003950:	6022      	str	r2, [r4, #0]
 8003952:	461a      	mov	r2, r3
 8003954:	f7fe ff86 	bl	8002864 <_read>
 8003958:	1c43      	adds	r3, r0, #1
 800395a:	d102      	bne.n	8003962 <_read_r+0x1e>
 800395c:	6823      	ldr	r3, [r4, #0]
 800395e:	b103      	cbz	r3, 8003962 <_read_r+0x1e>
 8003960:	602b      	str	r3, [r5, #0]
 8003962:	bd38      	pop	{r3, r4, r5, pc}
 8003964:	200005b8 	.word	0x200005b8

08003968 <_fstat_r>:
 8003968:	b538      	push	{r3, r4, r5, lr}
 800396a:	4c07      	ldr	r4, [pc, #28]	; (8003988 <_fstat_r+0x20>)
 800396c:	2300      	movs	r3, #0
 800396e:	4605      	mov	r5, r0
 8003970:	4608      	mov	r0, r1
 8003972:	4611      	mov	r1, r2
 8003974:	6023      	str	r3, [r4, #0]
 8003976:	f7fe ffa0 	bl	80028ba <_fstat>
 800397a:	1c43      	adds	r3, r0, #1
 800397c:	d102      	bne.n	8003984 <_fstat_r+0x1c>
 800397e:	6823      	ldr	r3, [r4, #0]
 8003980:	b103      	cbz	r3, 8003984 <_fstat_r+0x1c>
 8003982:	602b      	str	r3, [r5, #0]
 8003984:	bd38      	pop	{r3, r4, r5, pc}
 8003986:	bf00      	nop
 8003988:	200005b8 	.word	0x200005b8

0800398c <_isatty_r>:
 800398c:	b538      	push	{r3, r4, r5, lr}
 800398e:	4c06      	ldr	r4, [pc, #24]	; (80039a8 <_isatty_r+0x1c>)
 8003990:	2300      	movs	r3, #0
 8003992:	4605      	mov	r5, r0
 8003994:	4608      	mov	r0, r1
 8003996:	6023      	str	r3, [r4, #0]
 8003998:	f7fe ff94 	bl	80028c4 <_isatty>
 800399c:	1c43      	adds	r3, r0, #1
 800399e:	d102      	bne.n	80039a6 <_isatty_r+0x1a>
 80039a0:	6823      	ldr	r3, [r4, #0]
 80039a2:	b103      	cbz	r3, 80039a6 <_isatty_r+0x1a>
 80039a4:	602b      	str	r3, [r5, #0]
 80039a6:	bd38      	pop	{r3, r4, r5, pc}
 80039a8:	200005b8 	.word	0x200005b8

080039ac <_init>:
 80039ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ae:	bf00      	nop
 80039b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039b2:	bc08      	pop	{r3}
 80039b4:	469e      	mov	lr, r3
 80039b6:	4770      	bx	lr

080039b8 <_fini>:
 80039b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ba:	bf00      	nop
 80039bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039be:	bc08      	pop	{r3}
 80039c0:	469e      	mov	lr, r3
 80039c2:	4770      	bx	lr
