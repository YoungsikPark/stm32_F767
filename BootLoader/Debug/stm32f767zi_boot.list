
stm32f767zi_boot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009830  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000075c  08009a30  08009a30  00019a30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a18c  0800a18c  00020368  2**0
                  CONTENTS
  4 .ARM          00000008  0800a18c  0800a18c  0001a18c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a194  0800a194  00020368  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a194  0800a194  0001a194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a198  0800a198  0001a198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000368  20000000  0800a19c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015dc  20000368  0800a504  00020368  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001944  0800a504  00021944  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020368  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028e9f  00000000  00000000  00020396  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000068b6  00000000  00000000  00049235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f0  00000000  00000000  0004faf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b38  00000000  00000000  00050ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d985  00000000  00000000  00052818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021567  00000000  00000000  0008019d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100c8c  00000000  00000000  000a1704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a2390  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004234  00000000  00000000  001a23e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0000dcf2  00000000  00000000  001a6618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000368 	.word	0x20000368
 800021c:	00000000 	.word	0x00000000
 8000220:	08009a18 	.word	0x08009a18

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000036c 	.word	0x2000036c
 800023c:	08009a18 	.word	0x08009a18

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_drsub>:
 8000310:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000314:	e002      	b.n	800031c <__adddf3>
 8000316:	bf00      	nop

08000318 <__aeabi_dsub>:
 8000318:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800031c <__adddf3>:
 800031c:	b530      	push	{r4, r5, lr}
 800031e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000322:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000326:	ea94 0f05 	teq	r4, r5
 800032a:	bf08      	it	eq
 800032c:	ea90 0f02 	teqeq	r0, r2
 8000330:	bf1f      	itttt	ne
 8000332:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000336:	ea55 0c02 	orrsne.w	ip, r5, r2
 800033a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800033e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000342:	f000 80e2 	beq.w	800050a <__adddf3+0x1ee>
 8000346:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800034a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800034e:	bfb8      	it	lt
 8000350:	426d      	neglt	r5, r5
 8000352:	dd0c      	ble.n	800036e <__adddf3+0x52>
 8000354:	442c      	add	r4, r5
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	ea82 0000 	eor.w	r0, r2, r0
 8000362:	ea83 0101 	eor.w	r1, r3, r1
 8000366:	ea80 0202 	eor.w	r2, r0, r2
 800036a:	ea81 0303 	eor.w	r3, r1, r3
 800036e:	2d36      	cmp	r5, #54	; 0x36
 8000370:	bf88      	it	hi
 8000372:	bd30      	pophi	{r4, r5, pc}
 8000374:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000378:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800037c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000380:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000384:	d002      	beq.n	800038c <__adddf3+0x70>
 8000386:	4240      	negs	r0, r0
 8000388:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800038c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000390:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000394:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000398:	d002      	beq.n	80003a0 <__adddf3+0x84>
 800039a:	4252      	negs	r2, r2
 800039c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003a0:	ea94 0f05 	teq	r4, r5
 80003a4:	f000 80a7 	beq.w	80004f6 <__adddf3+0x1da>
 80003a8:	f1a4 0401 	sub.w	r4, r4, #1
 80003ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80003b0:	db0d      	blt.n	80003ce <__adddf3+0xb2>
 80003b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003b6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ba:	1880      	adds	r0, r0, r2
 80003bc:	f141 0100 	adc.w	r1, r1, #0
 80003c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003c4:	1880      	adds	r0, r0, r2
 80003c6:	fa43 f305 	asr.w	r3, r3, r5
 80003ca:	4159      	adcs	r1, r3
 80003cc:	e00e      	b.n	80003ec <__adddf3+0xd0>
 80003ce:	f1a5 0520 	sub.w	r5, r5, #32
 80003d2:	f10e 0e20 	add.w	lr, lr, #32
 80003d6:	2a01      	cmp	r2, #1
 80003d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003dc:	bf28      	it	cs
 80003de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003e2:	fa43 f305 	asr.w	r3, r3, r5
 80003e6:	18c0      	adds	r0, r0, r3
 80003e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003f0:	d507      	bpl.n	8000402 <__adddf3+0xe6>
 80003f2:	f04f 0e00 	mov.w	lr, #0
 80003f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000402:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000406:	d31b      	bcc.n	8000440 <__adddf3+0x124>
 8000408:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800040c:	d30c      	bcc.n	8000428 <__adddf3+0x10c>
 800040e:	0849      	lsrs	r1, r1, #1
 8000410:	ea5f 0030 	movs.w	r0, r0, rrx
 8000414:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000418:	f104 0401 	add.w	r4, r4, #1
 800041c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000420:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000424:	f080 809a 	bcs.w	800055c <__adddf3+0x240>
 8000428:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800042c:	bf08      	it	eq
 800042e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000432:	f150 0000 	adcs.w	r0, r0, #0
 8000436:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800043a:	ea41 0105 	orr.w	r1, r1, r5
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000444:	4140      	adcs	r0, r0
 8000446:	eb41 0101 	adc.w	r1, r1, r1
 800044a:	3c01      	subs	r4, #1
 800044c:	bf28      	it	cs
 800044e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000452:	d2e9      	bcs.n	8000428 <__adddf3+0x10c>
 8000454:	f091 0f00 	teq	r1, #0
 8000458:	bf04      	itt	eq
 800045a:	4601      	moveq	r1, r0
 800045c:	2000      	moveq	r0, #0
 800045e:	fab1 f381 	clz	r3, r1
 8000462:	bf08      	it	eq
 8000464:	3320      	addeq	r3, #32
 8000466:	f1a3 030b 	sub.w	r3, r3, #11
 800046a:	f1b3 0220 	subs.w	r2, r3, #32
 800046e:	da0c      	bge.n	800048a <__adddf3+0x16e>
 8000470:	320c      	adds	r2, #12
 8000472:	dd08      	ble.n	8000486 <__adddf3+0x16a>
 8000474:	f102 0c14 	add.w	ip, r2, #20
 8000478:	f1c2 020c 	rsb	r2, r2, #12
 800047c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000480:	fa21 f102 	lsr.w	r1, r1, r2
 8000484:	e00c      	b.n	80004a0 <__adddf3+0x184>
 8000486:	f102 0214 	add.w	r2, r2, #20
 800048a:	bfd8      	it	le
 800048c:	f1c2 0c20 	rsble	ip, r2, #32
 8000490:	fa01 f102 	lsl.w	r1, r1, r2
 8000494:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000498:	bfdc      	itt	le
 800049a:	ea41 010c 	orrle.w	r1, r1, ip
 800049e:	4090      	lslle	r0, r2
 80004a0:	1ae4      	subs	r4, r4, r3
 80004a2:	bfa2      	ittt	ge
 80004a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004a8:	4329      	orrge	r1, r5
 80004aa:	bd30      	popge	{r4, r5, pc}
 80004ac:	ea6f 0404 	mvn.w	r4, r4
 80004b0:	3c1f      	subs	r4, #31
 80004b2:	da1c      	bge.n	80004ee <__adddf3+0x1d2>
 80004b4:	340c      	adds	r4, #12
 80004b6:	dc0e      	bgt.n	80004d6 <__adddf3+0x1ba>
 80004b8:	f104 0414 	add.w	r4, r4, #20
 80004bc:	f1c4 0220 	rsb	r2, r4, #32
 80004c0:	fa20 f004 	lsr.w	r0, r0, r4
 80004c4:	fa01 f302 	lsl.w	r3, r1, r2
 80004c8:	ea40 0003 	orr.w	r0, r0, r3
 80004cc:	fa21 f304 	lsr.w	r3, r1, r4
 80004d0:	ea45 0103 	orr.w	r1, r5, r3
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f1c4 040c 	rsb	r4, r4, #12
 80004da:	f1c4 0220 	rsb	r2, r4, #32
 80004de:	fa20 f002 	lsr.w	r0, r0, r2
 80004e2:	fa01 f304 	lsl.w	r3, r1, r4
 80004e6:	ea40 0003 	orr.w	r0, r0, r3
 80004ea:	4629      	mov	r1, r5
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	fa21 f004 	lsr.w	r0, r1, r4
 80004f2:	4629      	mov	r1, r5
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f094 0f00 	teq	r4, #0
 80004fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004fe:	bf06      	itte	eq
 8000500:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000504:	3401      	addeq	r4, #1
 8000506:	3d01      	subne	r5, #1
 8000508:	e74e      	b.n	80003a8 <__adddf3+0x8c>
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf18      	it	ne
 8000510:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000514:	d029      	beq.n	800056a <__adddf3+0x24e>
 8000516:	ea94 0f05 	teq	r4, r5
 800051a:	bf08      	it	eq
 800051c:	ea90 0f02 	teqeq	r0, r2
 8000520:	d005      	beq.n	800052e <__adddf3+0x212>
 8000522:	ea54 0c00 	orrs.w	ip, r4, r0
 8000526:	bf04      	itt	eq
 8000528:	4619      	moveq	r1, r3
 800052a:	4610      	moveq	r0, r2
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	ea91 0f03 	teq	r1, r3
 8000532:	bf1e      	ittt	ne
 8000534:	2100      	movne	r1, #0
 8000536:	2000      	movne	r0, #0
 8000538:	bd30      	popne	{r4, r5, pc}
 800053a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800053e:	d105      	bne.n	800054c <__adddf3+0x230>
 8000540:	0040      	lsls	r0, r0, #1
 8000542:	4149      	adcs	r1, r1
 8000544:	bf28      	it	cs
 8000546:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000550:	bf3c      	itt	cc
 8000552:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000556:	bd30      	popcc	{r4, r5, pc}
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800055c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000560:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000564:	f04f 0000 	mov.w	r0, #0
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf1a      	itte	ne
 8000570:	4619      	movne	r1, r3
 8000572:	4610      	movne	r0, r2
 8000574:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000578:	bf1c      	itt	ne
 800057a:	460b      	movne	r3, r1
 800057c:	4602      	movne	r2, r0
 800057e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000582:	bf06      	itte	eq
 8000584:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000588:	ea91 0f03 	teqeq	r1, r3
 800058c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	bf00      	nop

08000594 <__aeabi_ui2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f04f 0500 	mov.w	r5, #0
 80005ac:	f04f 0100 	mov.w	r1, #0
 80005b0:	e750      	b.n	8000454 <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_i2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005cc:	bf48      	it	mi
 80005ce:	4240      	negmi	r0, r0
 80005d0:	f04f 0100 	mov.w	r1, #0
 80005d4:	e73e      	b.n	8000454 <__adddf3+0x138>
 80005d6:	bf00      	nop

080005d8 <__aeabi_f2d>:
 80005d8:	0042      	lsls	r2, r0, #1
 80005da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005de:	ea4f 0131 	mov.w	r1, r1, rrx
 80005e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005e6:	bf1f      	itttt	ne
 80005e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005f4:	4770      	bxne	lr
 80005f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005fa:	bf08      	it	eq
 80005fc:	4770      	bxeq	lr
 80005fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000602:	bf04      	itt	eq
 8000604:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000608:	4770      	bxeq	lr
 800060a:	b530      	push	{r4, r5, lr}
 800060c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000610:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000614:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000618:	e71c      	b.n	8000454 <__adddf3+0x138>
 800061a:	bf00      	nop

0800061c <__aeabi_ul2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f04f 0500 	mov.w	r5, #0
 800062a:	e00a      	b.n	8000642 <__aeabi_l2d+0x16>

0800062c <__aeabi_l2d>:
 800062c:	ea50 0201 	orrs.w	r2, r0, r1
 8000630:	bf08      	it	eq
 8000632:	4770      	bxeq	lr
 8000634:	b530      	push	{r4, r5, lr}
 8000636:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800063a:	d502      	bpl.n	8000642 <__aeabi_l2d+0x16>
 800063c:	4240      	negs	r0, r0
 800063e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000642:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000646:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800064e:	f43f aed8 	beq.w	8000402 <__adddf3+0xe6>
 8000652:	f04f 0203 	mov.w	r2, #3
 8000656:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800065a:	bf18      	it	ne
 800065c:	3203      	addne	r2, #3
 800065e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000662:	bf18      	it	ne
 8000664:	3203      	addne	r2, #3
 8000666:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800066a:	f1c2 0320 	rsb	r3, r2, #32
 800066e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000672:	fa20 f002 	lsr.w	r0, r0, r2
 8000676:	fa01 fe03 	lsl.w	lr, r1, r3
 800067a:	ea40 000e 	orr.w	r0, r0, lr
 800067e:	fa21 f102 	lsr.w	r1, r1, r2
 8000682:	4414      	add	r4, r2
 8000684:	e6bd      	b.n	8000402 <__adddf3+0xe6>
 8000686:	bf00      	nop

08000688 <__aeabi_uldivmod>:
 8000688:	b953      	cbnz	r3, 80006a0 <__aeabi_uldivmod+0x18>
 800068a:	b94a      	cbnz	r2, 80006a0 <__aeabi_uldivmod+0x18>
 800068c:	2900      	cmp	r1, #0
 800068e:	bf08      	it	eq
 8000690:	2800      	cmpeq	r0, #0
 8000692:	bf1c      	itt	ne
 8000694:	f04f 31ff 	movne.w	r1, #4294967295
 8000698:	f04f 30ff 	movne.w	r0, #4294967295
 800069c:	f000 b9a6 	b.w	80009ec <__aeabi_idiv0>
 80006a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006a8:	f000 f83e 	bl	8000728 <__udivmoddi4>
 80006ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006b4:	b004      	add	sp, #16
 80006b6:	4770      	bx	lr

080006b8 <__aeabi_d2lz>:
 80006b8:	b508      	push	{r3, lr}
 80006ba:	4602      	mov	r2, r0
 80006bc:	460b      	mov	r3, r1
 80006be:	ec43 2b17 	vmov	d7, r2, r3
 80006c2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006ca:	d403      	bmi.n	80006d4 <__aeabi_d2lz+0x1c>
 80006cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006d0:	f000 b80a 	b.w	80006e8 <__aeabi_d2ulz>
 80006d4:	eeb1 7b47 	vneg.f64	d7, d7
 80006d8:	ec51 0b17 	vmov	r0, r1, d7
 80006dc:	f000 f804 	bl	80006e8 <__aeabi_d2ulz>
 80006e0:	4240      	negs	r0, r0
 80006e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e6:	bd08      	pop	{r3, pc}

080006e8 <__aeabi_d2ulz>:
 80006e8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000718 <__aeabi_d2ulz+0x30>
 80006ec:	ec41 0b17 	vmov	d7, r0, r1
 80006f0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000720 <__aeabi_d2ulz+0x38>
 80006f4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006f8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006fc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000700:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000704:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000708:	ee16 1a10 	vmov	r1, s12
 800070c:	ee17 0a90 	vmov	r0, s15
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	f3af 8000 	nop.w
 8000718:	00000000 	.word	0x00000000
 800071c:	3df00000 	.word	0x3df00000
 8000720:	00000000 	.word	0x00000000
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800072c:	9d08      	ldr	r5, [sp, #32]
 800072e:	4604      	mov	r4, r0
 8000730:	468c      	mov	ip, r1
 8000732:	2b00      	cmp	r3, #0
 8000734:	f040 8083 	bne.w	800083e <__udivmoddi4+0x116>
 8000738:	428a      	cmp	r2, r1
 800073a:	4617      	mov	r7, r2
 800073c:	d947      	bls.n	80007ce <__udivmoddi4+0xa6>
 800073e:	fab2 f282 	clz	r2, r2
 8000742:	b142      	cbz	r2, 8000756 <__udivmoddi4+0x2e>
 8000744:	f1c2 0020 	rsb	r0, r2, #32
 8000748:	fa24 f000 	lsr.w	r0, r4, r0
 800074c:	4091      	lsls	r1, r2
 800074e:	4097      	lsls	r7, r2
 8000750:	ea40 0c01 	orr.w	ip, r0, r1
 8000754:	4094      	lsls	r4, r2
 8000756:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800075a:	0c23      	lsrs	r3, r4, #16
 800075c:	fbbc f6f8 	udiv	r6, ip, r8
 8000760:	fa1f fe87 	uxth.w	lr, r7
 8000764:	fb08 c116 	mls	r1, r8, r6, ip
 8000768:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800076c:	fb06 f10e 	mul.w	r1, r6, lr
 8000770:	4299      	cmp	r1, r3
 8000772:	d909      	bls.n	8000788 <__udivmoddi4+0x60>
 8000774:	18fb      	adds	r3, r7, r3
 8000776:	f106 30ff 	add.w	r0, r6, #4294967295
 800077a:	f080 8119 	bcs.w	80009b0 <__udivmoddi4+0x288>
 800077e:	4299      	cmp	r1, r3
 8000780:	f240 8116 	bls.w	80009b0 <__udivmoddi4+0x288>
 8000784:	3e02      	subs	r6, #2
 8000786:	443b      	add	r3, r7
 8000788:	1a5b      	subs	r3, r3, r1
 800078a:	b2a4      	uxth	r4, r4
 800078c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000790:	fb08 3310 	mls	r3, r8, r0, r3
 8000794:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000798:	fb00 fe0e 	mul.w	lr, r0, lr
 800079c:	45a6      	cmp	lr, r4
 800079e:	d909      	bls.n	80007b4 <__udivmoddi4+0x8c>
 80007a0:	193c      	adds	r4, r7, r4
 80007a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80007a6:	f080 8105 	bcs.w	80009b4 <__udivmoddi4+0x28c>
 80007aa:	45a6      	cmp	lr, r4
 80007ac:	f240 8102 	bls.w	80009b4 <__udivmoddi4+0x28c>
 80007b0:	3802      	subs	r0, #2
 80007b2:	443c      	add	r4, r7
 80007b4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007b8:	eba4 040e 	sub.w	r4, r4, lr
 80007bc:	2600      	movs	r6, #0
 80007be:	b11d      	cbz	r5, 80007c8 <__udivmoddi4+0xa0>
 80007c0:	40d4      	lsrs	r4, r2
 80007c2:	2300      	movs	r3, #0
 80007c4:	e9c5 4300 	strd	r4, r3, [r5]
 80007c8:	4631      	mov	r1, r6
 80007ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ce:	b902      	cbnz	r2, 80007d2 <__udivmoddi4+0xaa>
 80007d0:	deff      	udf	#255	; 0xff
 80007d2:	fab2 f282 	clz	r2, r2
 80007d6:	2a00      	cmp	r2, #0
 80007d8:	d150      	bne.n	800087c <__udivmoddi4+0x154>
 80007da:	1bcb      	subs	r3, r1, r7
 80007dc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007e0:	fa1f f887 	uxth.w	r8, r7
 80007e4:	2601      	movs	r6, #1
 80007e6:	fbb3 fcfe 	udiv	ip, r3, lr
 80007ea:	0c21      	lsrs	r1, r4, #16
 80007ec:	fb0e 331c 	mls	r3, lr, ip, r3
 80007f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007f4:	fb08 f30c 	mul.w	r3, r8, ip
 80007f8:	428b      	cmp	r3, r1
 80007fa:	d907      	bls.n	800080c <__udivmoddi4+0xe4>
 80007fc:	1879      	adds	r1, r7, r1
 80007fe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000802:	d202      	bcs.n	800080a <__udivmoddi4+0xe2>
 8000804:	428b      	cmp	r3, r1
 8000806:	f200 80e9 	bhi.w	80009dc <__udivmoddi4+0x2b4>
 800080a:	4684      	mov	ip, r0
 800080c:	1ac9      	subs	r1, r1, r3
 800080e:	b2a3      	uxth	r3, r4
 8000810:	fbb1 f0fe 	udiv	r0, r1, lr
 8000814:	fb0e 1110 	mls	r1, lr, r0, r1
 8000818:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800081c:	fb08 f800 	mul.w	r8, r8, r0
 8000820:	45a0      	cmp	r8, r4
 8000822:	d907      	bls.n	8000834 <__udivmoddi4+0x10c>
 8000824:	193c      	adds	r4, r7, r4
 8000826:	f100 33ff 	add.w	r3, r0, #4294967295
 800082a:	d202      	bcs.n	8000832 <__udivmoddi4+0x10a>
 800082c:	45a0      	cmp	r8, r4
 800082e:	f200 80d9 	bhi.w	80009e4 <__udivmoddi4+0x2bc>
 8000832:	4618      	mov	r0, r3
 8000834:	eba4 0408 	sub.w	r4, r4, r8
 8000838:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800083c:	e7bf      	b.n	80007be <__udivmoddi4+0x96>
 800083e:	428b      	cmp	r3, r1
 8000840:	d909      	bls.n	8000856 <__udivmoddi4+0x12e>
 8000842:	2d00      	cmp	r5, #0
 8000844:	f000 80b1 	beq.w	80009aa <__udivmoddi4+0x282>
 8000848:	2600      	movs	r6, #0
 800084a:	e9c5 0100 	strd	r0, r1, [r5]
 800084e:	4630      	mov	r0, r6
 8000850:	4631      	mov	r1, r6
 8000852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000856:	fab3 f683 	clz	r6, r3
 800085a:	2e00      	cmp	r6, #0
 800085c:	d14a      	bne.n	80008f4 <__udivmoddi4+0x1cc>
 800085e:	428b      	cmp	r3, r1
 8000860:	d302      	bcc.n	8000868 <__udivmoddi4+0x140>
 8000862:	4282      	cmp	r2, r0
 8000864:	f200 80b8 	bhi.w	80009d8 <__udivmoddi4+0x2b0>
 8000868:	1a84      	subs	r4, r0, r2
 800086a:	eb61 0103 	sbc.w	r1, r1, r3
 800086e:	2001      	movs	r0, #1
 8000870:	468c      	mov	ip, r1
 8000872:	2d00      	cmp	r5, #0
 8000874:	d0a8      	beq.n	80007c8 <__udivmoddi4+0xa0>
 8000876:	e9c5 4c00 	strd	r4, ip, [r5]
 800087a:	e7a5      	b.n	80007c8 <__udivmoddi4+0xa0>
 800087c:	f1c2 0320 	rsb	r3, r2, #32
 8000880:	fa20 f603 	lsr.w	r6, r0, r3
 8000884:	4097      	lsls	r7, r2
 8000886:	fa01 f002 	lsl.w	r0, r1, r2
 800088a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800088e:	40d9      	lsrs	r1, r3
 8000890:	4330      	orrs	r0, r6
 8000892:	0c03      	lsrs	r3, r0, #16
 8000894:	fbb1 f6fe 	udiv	r6, r1, lr
 8000898:	fa1f f887 	uxth.w	r8, r7
 800089c:	fb0e 1116 	mls	r1, lr, r6, r1
 80008a0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008a4:	fb06 f108 	mul.w	r1, r6, r8
 80008a8:	4299      	cmp	r1, r3
 80008aa:	fa04 f402 	lsl.w	r4, r4, r2
 80008ae:	d909      	bls.n	80008c4 <__udivmoddi4+0x19c>
 80008b0:	18fb      	adds	r3, r7, r3
 80008b2:	f106 3cff 	add.w	ip, r6, #4294967295
 80008b6:	f080 808d 	bcs.w	80009d4 <__udivmoddi4+0x2ac>
 80008ba:	4299      	cmp	r1, r3
 80008bc:	f240 808a 	bls.w	80009d4 <__udivmoddi4+0x2ac>
 80008c0:	3e02      	subs	r6, #2
 80008c2:	443b      	add	r3, r7
 80008c4:	1a5b      	subs	r3, r3, r1
 80008c6:	b281      	uxth	r1, r0
 80008c8:	fbb3 f0fe 	udiv	r0, r3, lr
 80008cc:	fb0e 3310 	mls	r3, lr, r0, r3
 80008d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008d4:	fb00 f308 	mul.w	r3, r0, r8
 80008d8:	428b      	cmp	r3, r1
 80008da:	d907      	bls.n	80008ec <__udivmoddi4+0x1c4>
 80008dc:	1879      	adds	r1, r7, r1
 80008de:	f100 3cff 	add.w	ip, r0, #4294967295
 80008e2:	d273      	bcs.n	80009cc <__udivmoddi4+0x2a4>
 80008e4:	428b      	cmp	r3, r1
 80008e6:	d971      	bls.n	80009cc <__udivmoddi4+0x2a4>
 80008e8:	3802      	subs	r0, #2
 80008ea:	4439      	add	r1, r7
 80008ec:	1acb      	subs	r3, r1, r3
 80008ee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80008f2:	e778      	b.n	80007e6 <__udivmoddi4+0xbe>
 80008f4:	f1c6 0c20 	rsb	ip, r6, #32
 80008f8:	fa03 f406 	lsl.w	r4, r3, r6
 80008fc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000900:	431c      	orrs	r4, r3
 8000902:	fa20 f70c 	lsr.w	r7, r0, ip
 8000906:	fa01 f306 	lsl.w	r3, r1, r6
 800090a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800090e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000912:	431f      	orrs	r7, r3
 8000914:	0c3b      	lsrs	r3, r7, #16
 8000916:	fbb1 f9fe 	udiv	r9, r1, lr
 800091a:	fa1f f884 	uxth.w	r8, r4
 800091e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000922:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000926:	fb09 fa08 	mul.w	sl, r9, r8
 800092a:	458a      	cmp	sl, r1
 800092c:	fa02 f206 	lsl.w	r2, r2, r6
 8000930:	fa00 f306 	lsl.w	r3, r0, r6
 8000934:	d908      	bls.n	8000948 <__udivmoddi4+0x220>
 8000936:	1861      	adds	r1, r4, r1
 8000938:	f109 30ff 	add.w	r0, r9, #4294967295
 800093c:	d248      	bcs.n	80009d0 <__udivmoddi4+0x2a8>
 800093e:	458a      	cmp	sl, r1
 8000940:	d946      	bls.n	80009d0 <__udivmoddi4+0x2a8>
 8000942:	f1a9 0902 	sub.w	r9, r9, #2
 8000946:	4421      	add	r1, r4
 8000948:	eba1 010a 	sub.w	r1, r1, sl
 800094c:	b2bf      	uxth	r7, r7
 800094e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000952:	fb0e 1110 	mls	r1, lr, r0, r1
 8000956:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800095a:	fb00 f808 	mul.w	r8, r0, r8
 800095e:	45b8      	cmp	r8, r7
 8000960:	d907      	bls.n	8000972 <__udivmoddi4+0x24a>
 8000962:	19e7      	adds	r7, r4, r7
 8000964:	f100 31ff 	add.w	r1, r0, #4294967295
 8000968:	d22e      	bcs.n	80009c8 <__udivmoddi4+0x2a0>
 800096a:	45b8      	cmp	r8, r7
 800096c:	d92c      	bls.n	80009c8 <__udivmoddi4+0x2a0>
 800096e:	3802      	subs	r0, #2
 8000970:	4427      	add	r7, r4
 8000972:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000976:	eba7 0708 	sub.w	r7, r7, r8
 800097a:	fba0 8902 	umull	r8, r9, r0, r2
 800097e:	454f      	cmp	r7, r9
 8000980:	46c6      	mov	lr, r8
 8000982:	4649      	mov	r1, r9
 8000984:	d31a      	bcc.n	80009bc <__udivmoddi4+0x294>
 8000986:	d017      	beq.n	80009b8 <__udivmoddi4+0x290>
 8000988:	b15d      	cbz	r5, 80009a2 <__udivmoddi4+0x27a>
 800098a:	ebb3 020e 	subs.w	r2, r3, lr
 800098e:	eb67 0701 	sbc.w	r7, r7, r1
 8000992:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000996:	40f2      	lsrs	r2, r6
 8000998:	ea4c 0202 	orr.w	r2, ip, r2
 800099c:	40f7      	lsrs	r7, r6
 800099e:	e9c5 2700 	strd	r2, r7, [r5]
 80009a2:	2600      	movs	r6, #0
 80009a4:	4631      	mov	r1, r6
 80009a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009aa:	462e      	mov	r6, r5
 80009ac:	4628      	mov	r0, r5
 80009ae:	e70b      	b.n	80007c8 <__udivmoddi4+0xa0>
 80009b0:	4606      	mov	r6, r0
 80009b2:	e6e9      	b.n	8000788 <__udivmoddi4+0x60>
 80009b4:	4618      	mov	r0, r3
 80009b6:	e6fd      	b.n	80007b4 <__udivmoddi4+0x8c>
 80009b8:	4543      	cmp	r3, r8
 80009ba:	d2e5      	bcs.n	8000988 <__udivmoddi4+0x260>
 80009bc:	ebb8 0e02 	subs.w	lr, r8, r2
 80009c0:	eb69 0104 	sbc.w	r1, r9, r4
 80009c4:	3801      	subs	r0, #1
 80009c6:	e7df      	b.n	8000988 <__udivmoddi4+0x260>
 80009c8:	4608      	mov	r0, r1
 80009ca:	e7d2      	b.n	8000972 <__udivmoddi4+0x24a>
 80009cc:	4660      	mov	r0, ip
 80009ce:	e78d      	b.n	80008ec <__udivmoddi4+0x1c4>
 80009d0:	4681      	mov	r9, r0
 80009d2:	e7b9      	b.n	8000948 <__udivmoddi4+0x220>
 80009d4:	4666      	mov	r6, ip
 80009d6:	e775      	b.n	80008c4 <__udivmoddi4+0x19c>
 80009d8:	4630      	mov	r0, r6
 80009da:	e74a      	b.n	8000872 <__udivmoddi4+0x14a>
 80009dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80009e0:	4439      	add	r1, r7
 80009e2:	e713      	b.n	800080c <__udivmoddi4+0xe4>
 80009e4:	3802      	subs	r0, #2
 80009e6:	443c      	add	r4, r7
 80009e8:	e724      	b.n	8000834 <__udivmoddi4+0x10c>
 80009ea:	bf00      	nop

080009ec <__aeabi_idiv0>:
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009f0:	4b0a      	ldr	r3, [pc, #40]	; (8000a1c <HAL_MspInit+0x2c>)
{
 80009f2:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009f6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80009fa:	641a      	str	r2, [r3, #64]	; 0x40
 80009fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009fe:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000a02:	9200      	str	r2, [sp, #0]
 8000a04:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000a08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000a0c:	645a      	str	r2, [r3, #68]	; 0x44
 8000a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a14:	9301      	str	r3, [sp, #4]
 8000a16:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a18:	b002      	add	sp, #8
 8000a1a:	4770      	bx	lr
 8000a1c:	40023800 	.word	0x40023800

08000a20 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <NMI_Handler>

08000a22 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a22:	e7fe      	b.n	8000a22 <HardFault_Handler>

08000a24 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <MemManage_Handler>

08000a26 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a26:	e7fe      	b.n	8000a26 <BusFault_Handler>

08000a28 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <UsageFault_Handler>

08000a2a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a2a:	4770      	bx	lr

08000a2c <DebugMon_Handler>:
 8000a2c:	4770      	bx	lr

08000a2e <PendSV_Handler>:
 8000a2e:	4770      	bx	lr

08000a30 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a30:	f001 bae8 	b.w	8002004 <HAL_IncTick>

08000a34 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000a34:	4801      	ldr	r0, [pc, #4]	; (8000a3c <DMA1_Stream1_IRQHandler+0x8>)
 8000a36:	f001 bcd9 	b.w	80023ec <HAL_DMA_IRQHandler>
 8000a3a:	bf00      	nop
 8000a3c:	200009e0 	.word	0x200009e0

08000a40 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000a40:	4801      	ldr	r0, [pc, #4]	; (8000a48 <USART3_IRQHandler+0x8>)
 8000a42:	f003 bc23 	b.w	800428c <HAL_UART_IRQHandler>
 8000a46:	bf00      	nop
 8000a48:	2000095c 	.word	0x2000095c

08000a4c <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000a4c:	4801      	ldr	r0, [pc, #4]	; (8000a54 <OTG_FS_IRQHandler+0x8>)
 8000a4e:	f002 b99d 	b.w	8002d8c <HAL_PCD_IRQHandler>
 8000a52:	bf00      	nop
 8000a54:	20001530 	.word	0x20001530

08000a58 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8000a58:	2001      	movs	r0, #1
 8000a5a:	4770      	bx	lr

08000a5c <_kill>:

int _kill(int pid, int sig)
{
 8000a5c:	b508      	push	{r3, lr}
	errno = EINVAL;
 8000a5e:	f005 fd9f 	bl	80065a0 <__errno>
 8000a62:	2316      	movs	r3, #22
 8000a64:	6003      	str	r3, [r0, #0]
	return -1;
}
 8000a66:	f04f 30ff 	mov.w	r0, #4294967295
 8000a6a:	bd08      	pop	{r3, pc}

08000a6c <_exit>:

void _exit (int status)
{
 8000a6c:	b508      	push	{r3, lr}
	errno = EINVAL;
 8000a6e:	f005 fd97 	bl	80065a0 <__errno>
 8000a72:	2316      	movs	r3, #22
 8000a74:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8000a76:	e7fe      	b.n	8000a76 <_exit+0xa>

08000a78 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a78:	b570      	push	{r4, r5, r6, lr}
 8000a7a:	460e      	mov	r6, r1
 8000a7c:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a7e:	2500      	movs	r5, #0
 8000a80:	42a5      	cmp	r5, r4
 8000a82:	db01      	blt.n	8000a88 <_read+0x10>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8000a84:	4620      	mov	r0, r4
 8000a86:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8000a88:	f3af 8000 	nop.w
 8000a8c:	5570      	strb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a8e:	3501      	adds	r5, #1
 8000a90:	e7f6      	b.n	8000a80 <_read+0x8>

08000a92 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a92:	b570      	push	{r4, r5, r6, lr}
 8000a94:	460e      	mov	r6, r1
 8000a96:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a98:	2500      	movs	r5, #0
 8000a9a:	42a5      	cmp	r5, r4
 8000a9c:	db01      	blt.n	8000aa2 <_write+0x10>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8000a9e:	4620      	mov	r0, r4
 8000aa0:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8000aa2:	5d70      	ldrb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa4:	3501      	adds	r5, #1
		__io_putchar(*ptr++);
 8000aa6:	f000 fd49 	bl	800153c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aaa:	e7f6      	b.n	8000a9a <_write+0x8>

08000aac <_close>:

int _close(int file)
{
	return -1;
}
 8000aac:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab0:	4770      	bx	lr

08000ab2 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8000ab2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8000ab6:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8000ab8:	604b      	str	r3, [r1, #4]
}
 8000aba:	4770      	bx	lr

08000abc <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8000abc:	2001      	movs	r0, #1
 8000abe:	4770      	bx	lr

08000ac0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	4770      	bx	lr

08000ac4 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ac4:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <_sbrk+0x30>)
{
 8000ac6:	4602      	mov	r2, r0
  if (NULL == __sbrk_heap_end)
 8000ac8:	6819      	ldr	r1, [r3, #0]
{
 8000aca:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8000acc:	b909      	cbnz	r1, 8000ad2 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8000ace:	490a      	ldr	r1, [pc, #40]	; (8000af8 <_sbrk+0x34>)
 8000ad0:	6019      	str	r1, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ad2:	6818      	ldr	r0, [r3, #0]
 8000ad4:	4909      	ldr	r1, [pc, #36]	; (8000afc <_sbrk+0x38>)
 8000ad6:	4c0a      	ldr	r4, [pc, #40]	; (8000b00 <_sbrk+0x3c>)
 8000ad8:	4402      	add	r2, r0
 8000ada:	1b09      	subs	r1, r1, r4
 8000adc:	428a      	cmp	r2, r1
 8000ade:	d906      	bls.n	8000aee <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8000ae0:	f005 fd5e 	bl	80065a0 <__errno>
 8000ae4:	230c      	movs	r3, #12
 8000ae6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000ae8:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8000aec:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8000aee:	601a      	str	r2, [r3, #0]
  return (void *)prev_heap_end;
 8000af0:	e7fc      	b.n	8000aec <_sbrk+0x28>
 8000af2:	bf00      	nop
 8000af4:	20000384 	.word	0x20000384
 8000af8:	20001948 	.word	0x20001948
 8000afc:	20080000 	.word	0x20080000
 8000b00:	00000400 	.word	0x00000400

08000b04 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b04:	4a03      	ldr	r2, [pc, #12]	; (8000b14 <SystemInit+0x10>)
 8000b06:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000b0a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b0e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b12:	4770      	bx	lr
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <cdcIsInit>:
}

bool cdcIsInit(void)
{
  return is_init;
}
 8000b18:	4b01      	ldr	r3, [pc, #4]	; (8000b20 <cdcIsInit+0x8>)
 8000b1a:	7818      	ldrb	r0, [r3, #0]
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	20000388 	.word	0x20000388

08000b24 <cliToUpper>:
void cliToUpper(char *str)
{
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8000b24:	1e42      	subs	r2, r0, #1
 8000b26:	f100 010f 	add.w	r1, r0, #15
{
 8000b2a:	b510      	push	{r4, lr}
  {
    str_ch = str[i];
 8000b2c:	f812 3f01 	ldrb.w	r3, [r2, #1]!

    if (str_ch == 0)
 8000b30:	b153      	cbz	r3, 8000b48 <cliToUpper+0x24>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 8000b32:	f1a3 0461 	sub.w	r4, r3, #97	; 0x61
 8000b36:	2c19      	cmp	r4, #25
    {
      str_ch = str_ch - 'a' + 'A';
 8000b38:	bf9c      	itt	ls
 8000b3a:	3b20      	subls	r3, #32
 8000b3c:	b2db      	uxtbls	r3, r3
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8000b3e:	428a      	cmp	r2, r1
    }
    str[i] = str_ch;
 8000b40:	7013      	strb	r3, [r2, #0]
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8000b42:	d1f3      	bne.n	8000b2c <cliToUpper+0x8>
  }

  if (i == CLI_CMD_NAME_MAX)
  {
    str[i-1] = 0;
 8000b44:	2300      	movs	r3, #0
 8000b46:	73c3      	strb	r3, [r0, #15]
  }
}
 8000b48:	bd10      	pop	{r4, pc}
	...

08000b4c <cliArgsGetStr>:
{
  char *ret = NULL;
  cli_t *p_cli = &cli_node;


  if (index >= p_cli->cmd_args.argc)
 8000b4c:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <cliArgsGetStr+0x18>)
 8000b4e:	f8b3 242c 	ldrh.w	r2, [r3, #1068]	; 0x42c
 8000b52:	4282      	cmp	r2, r0
  {
    return 0;
  }

  ret = p_cli->cmd_args.argv[index];
 8000b54:	bf86      	itte	hi
 8000b56:	f8d3 3430 	ldrhi.w	r3, [r3, #1072]	; 0x430
 8000b5a:	f853 0020 	ldrhi.w	r0, [r3, r0, lsl #2]
    return 0;
 8000b5e:	2000      	movls	r0, #0

  return ret;
}
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	200004e0 	.word	0x200004e0

08000b68 <cliShowList>:

  return ret;
}

void cliShowList(cli_args_t *args)
{
 8000b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  cli_t *p_cli = &cli_node;


  printf("\r\n");
 8000b6a:	480f      	ldr	r0, [pc, #60]	; (8000ba8 <cliShowList+0x40>)
  printf("---------- cmd list ---------\r\n");

  for (int i=0; i<p_cli->cmd_count; i++)
 8000b6c:	2400      	movs	r4, #0
  printf("\r\n");
 8000b6e:	f005 fead 	bl	80068cc <puts>
  printf("---------- cmd list ---------\r\n");
 8000b72:	480e      	ldr	r0, [pc, #56]	; (8000bac <cliShowList+0x44>)
 8000b74:	f005 feaa 	bl	80068cc <puts>
  for (int i=0; i<p_cli->cmd_count; i++)
 8000b78:	480d      	ldr	r0, [pc, #52]	; (8000bb0 <cliShowList+0x48>)
  {
    printf(p_cli->cmd_list[i].cmd_str);
    printf("\r\n");
 8000b7a:	4f0b      	ldr	r7, [pc, #44]	; (8000ba8 <cliShowList+0x40>)
 8000b7c:	4605      	mov	r5, r0
  for (int i=0; i<p_cli->cmd_count; i++)
 8000b7e:	f8b5 32e8 	ldrh.w	r3, [r5, #744]	; 0x2e8
 8000b82:	f100 0614 	add.w	r6, r0, #20
 8000b86:	42a3      	cmp	r3, r4
 8000b88:	dc04      	bgt.n	8000b94 <cliShowList+0x2c>
  }

  printf("-----------------------------\r\n");
 8000b8a:	480a      	ldr	r0, [pc, #40]	; (8000bb4 <cliShowList+0x4c>)
}
 8000b8c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  printf("-----------------------------\r\n");
 8000b90:	f005 be9c 	b.w	80068cc <puts>
    printf(p_cli->cmd_list[i].cmd_str);
 8000b94:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
  for (int i=0; i<p_cli->cmd_count; i++)
 8000b98:	3401      	adds	r4, #1
    printf(p_cli->cmd_list[i].cmd_str);
 8000b9a:	f005 fdfb 	bl	8006794 <iprintf>
    printf("\r\n");
 8000b9e:	4638      	mov	r0, r7
 8000ba0:	f005 fe94 	bl	80068cc <puts>
  for (int i=0; i<p_cli->cmd_count; i++)
 8000ba4:	4630      	mov	r0, r6
 8000ba6:	e7ea      	b.n	8000b7e <cliShowList+0x16>
 8000ba8:	08009b10 	.word	0x08009b10
 8000bac:	08009a48 	.word	0x08009a48
 8000bb0:	200004e0 	.word	0x200004e0
 8000bb4:	08009a67 	.word	0x08009a67

08000bb8 <cliMemoryWrite>:
*	Description :
*		-
*/

void cliMemoryWrite(cli_args_t *args)
{
 8000bb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000bba:	2600      	movs	r6, #0
 8000bbc:	4605      	mov	r5, r0
//	unsigned int *ascptr;

	uint8_t ret;
	int    argc = args->argc;

    addr    = (uint32_t)args->getData(0);
 8000bbe:	6883      	ldr	r3, [r0, #8]
	int    argc = args->argc;
 8000bc0:	8807      	ldrh	r7, [r0, #0]
    addr    = (uint32_t)args->getData(0);
 8000bc2:	4630      	mov	r0, r6
 8000bc4:	4798      	blx	r3
    data    = (uint32_t)args->getData(1);
 8000bc6:	68ab      	ldr	r3, [r5, #8]
    addr    = (uint32_t)args->getData(0);
 8000bc8:	4604      	mov	r4, r0
    data    = (uint32_t)args->getData(1);
 8000bca:	2001      	movs	r0, #1
 8000bcc:	4798      	blx	r3
    size    = (uint32_t)args->getData(2);
 8000bce:	68ab      	ldr	r3, [r5, #8]
 8000bd0:	2002      	movs	r0, #2
 8000bd2:	4798      	blx	r3
 8000bd4:	4605      	mov	r5, r0

	if(argc < 1){
 8000bd6:	b917      	cbnz	r7, 8000bde <cliMemoryWrite+0x26>
		printf("mw8 addr data [size]\r\n");
 8000bd8:	480a      	ldr	r0, [pc, #40]	; (8000c04 <cliMemoryWrite+0x4c>)
 8000bda:	f005 fe77 	bl	80068cc <puts>
	}

	end_addr = addr + size;
 8000bde:	4425      	add	r5, r4

	for( ; addr < end_addr; addr++)
 8000be0:	42a5      	cmp	r5, r4
 8000be2:	d805      	bhi.n	8000bf0 <cliMemoryWrite+0x38>
	{
		ret = flashWrite(addr, (uint8_t *)&pattern, 2);
	}

	if(ret == 0)
 8000be4:	b966      	cbnz	r6, 8000c00 <cliMemoryWrite+0x48>
	{
		printf("Write Success\r\n");
 8000be6:	4808      	ldr	r0, [pc, #32]	; (8000c08 <cliMemoryWrite+0x50>)
	}
	else
	{
		printf("Write Fail\r\n");
 8000be8:	f005 fe70 	bl	80068cc <puts>
	}

	return(ret);
}
 8000bec:	b003      	add	sp, #12
 8000bee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = flashWrite(addr, (uint8_t *)&pattern, 2);
 8000bf0:	4620      	mov	r0, r4
 8000bf2:	2202      	movs	r2, #2
 8000bf4:	a901      	add	r1, sp, #4
	for( ; addr < end_addr; addr++)
 8000bf6:	3401      	adds	r4, #1
		ret = flashWrite(addr, (uint8_t *)&pattern, 2);
 8000bf8:	f000 fbe6 	bl	80013c8 <flashWrite>
 8000bfc:	b2c6      	uxtb	r6, r0
	for( ; addr < end_addr; addr++)
 8000bfe:	e7ef      	b.n	8000be0 <cliMemoryWrite+0x28>
		printf("Write Fail\r\n");
 8000c00:	4802      	ldr	r0, [pc, #8]	; (8000c0c <cliMemoryWrite+0x54>)
 8000c02:	e7f1      	b.n	8000be8 <cliMemoryWrite+0x30>
 8000c04:	08009a86 	.word	0x08009a86
 8000c08:	08009a9c 	.word	0x08009a9c
 8000c0c:	08009aab 	.word	0x08009aab

08000c10 <cliArgsIsStr>:
  if (index >= p_cli->cmd_args.argc)
 8000c10:	4a09      	ldr	r2, [pc, #36]	; (8000c38 <cliArgsIsStr+0x28>)
{
 8000c12:	b508      	push	{r3, lr}
 8000c14:	4603      	mov	r3, r0
 8000c16:	4608      	mov	r0, r1
  if (index >= p_cli->cmd_args.argc)
 8000c18:	f8b2 142c 	ldrh.w	r1, [r2, #1068]	; 0x42c
 8000c1c:	4299      	cmp	r1, r3
 8000c1e:	d909      	bls.n	8000c34 <cliArgsIsStr+0x24>
  if(strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 8000c20:	f8d2 2430 	ldr.w	r2, [r2, #1072]	; 0x430
 8000c24:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000c28:	f7ff fb0a 	bl	8000240 <strcmp>
 8000c2c:	fab0 f080 	clz	r0, r0
 8000c30:	0940      	lsrs	r0, r0, #5
}
 8000c32:	bd08      	pop	{r3, pc}
    return 0;
 8000c34:	2000      	movs	r0, #0
 8000c36:	e7fc      	b.n	8000c32 <cliArgsIsStr+0x22>
 8000c38:	200004e0 	.word	0x200004e0

08000c3c <cliArgsGetFloat>:
  if (index >= p_cli->cmd_args.argc)
 8000c3c:	4b07      	ldr	r3, [pc, #28]	; (8000c5c <cliArgsGetFloat+0x20>)
 8000c3e:	f8b3 242c 	ldrh.w	r2, [r3, #1068]	; 0x42c
 8000c42:	4282      	cmp	r2, r0
 8000c44:	d906      	bls.n	8000c54 <cliArgsGetFloat+0x18>
  ret = (float)strtof((const char * ) p_cli->cmd_args.argv[index], (char **)NULL);
 8000c46:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8000c50:	f006 bc4e 	b.w	80074f0 <strtof>
}
 8000c54:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8000c60 <cliArgsGetFloat+0x24>
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	200004e0 	.word	0x200004e0
 8000c60:	00000000 	.word	0x00000000

08000c64 <cliArgsGetData>:
  if (index >= p_cli->cmd_args.argc)
 8000c64:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <cliArgsGetData+0x20>)
 8000c66:	f8b3 242c 	ldrh.w	r2, [r3, #1068]	; 0x42c
 8000c6a:	4282      	cmp	r2, r0
 8000c6c:	d907      	bls.n	8000c7e <cliArgsGetData+0x1a>
  ret = (int32_t)strtoul((const char * ) p_cli->cmd_args.argv[index], (char **)NULL, (int) 0);
 8000c6e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8000c72:	2200      	movs	r2, #0
 8000c74:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8000c78:	4611      	mov	r1, r2
 8000c7a:	f006 bd25 	b.w	80076c8 <strtoul>
}
 8000c7e:	2000      	movs	r0, #0
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	200004e0 	.word	0x200004e0

08000c88 <cliLineChange.constprop.0>:
void cliLineChange(cli_t *p_cli, int8_t key_up)
 8000c88:	b538      	push	{r3, r4, r5, lr}
  if (p_cli->hist_line_count == 0)
 8000c8a:	4c1e      	ldr	r4, [pc, #120]	; (8000d04 <cliLineChange.constprop.0+0x7c>)
void cliLineChange(cli_t *p_cli, int8_t key_up)
 8000c8c:	4605      	mov	r5, r0
  if (p_cli->hist_line_count == 0)
 8000c8e:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
 8000c92:	b393      	cbz	r3, 8000cfa <cliLineChange.constprop.0+0x72>
  if (p_cli->line.cursor > 0)
 8000c94:	f894 22e5 	ldrb.w	r2, [r4, #741]	; 0x2e5
 8000c98:	b11a      	cbz	r2, 8000ca2 <cliLineChange.constprop.0+0x1a>
    uartPrintf(p_cli->ch, "\x1B[%dD", p_cli->line.cursor);
 8000c9a:	491b      	ldr	r1, [pc, #108]	; (8000d08 <cliLineChange.constprop.0+0x80>)
 8000c9c:	7820      	ldrb	r0, [r4, #0]
 8000c9e:	f000 fe35 	bl	800190c <uartPrintf>
  if (p_cli->line.count > 0)
 8000ca2:	f894 22e6 	ldrb.w	r2, [r4, #742]	; 0x2e6
 8000ca6:	b11a      	cbz	r2, 8000cb0 <cliLineChange.constprop.0+0x28>
    uartPrintf(p_cli->ch, "\x1B[%dP", p_cli->line.count);
 8000ca8:	4918      	ldr	r1, [pc, #96]	; (8000d0c <cliLineChange.constprop.0+0x84>)
 8000caa:	7820      	ldrb	r0, [r4, #0]
 8000cac:	f000 fe2e 	bl	800190c <uartPrintf>
  if (key_up == true)
 8000cb0:	2d01      	cmp	r5, #1
 8000cb2:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
 8000cb6:	d121      	bne.n	8000cfc <cliLineChange.constprop.0+0x74>
    if (p_cli->hist_line_new == true)
 8000cb8:	f894 3194 	ldrb.w	r3, [r4, #404]	; 0x194
 8000cbc:	b11b      	cbz	r3, 8000cc6 <cliLineChange.constprop.0+0x3e>
      p_cli->hist_line_i = p_cli->hist_line_last;
 8000cbe:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
 8000cc2:	f884 3195 	strb.w	r3, [r4, #405]	; 0x195
    p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) % p_cli->hist_line_count;
 8000cc6:	f994 3195 	ldrsb.w	r3, [r4, #405]	; 0x195
 8000cca:	4413      	add	r3, r2
 8000ccc:	3b01      	subs	r3, #1
  p_cli->line = p_cli->line_buf[change_i];
 8000cce:	4810      	ldr	r0, [pc, #64]	; (8000d10 <cliLineChange.constprop.0+0x88>)
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 8000cd0:	fb93 f1f2 	sdiv	r1, r3, r2
 8000cd4:	fb02 3111 	mls	r1, r2, r1, r3
  p_cli->line = p_cli->line_buf[change_i];
 8000cd8:	2243      	movs	r2, #67	; 0x43
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 8000cda:	f884 1195 	strb.w	r1, [r4, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 8000cde:	b2c9      	uxtb	r1, r1
  p_cli->line = p_cli->line_buf[change_i];
 8000ce0:	fb02 4101 	mla	r1, r2, r1, r4
 8000ce4:	f501 71cc 	add.w	r1, r1, #408	; 0x198
 8000ce8:	f005 fc94 	bl	8006614 <memcpy>
  p_cli->line.cursor = p_cli->line.count;
 8000cec:	f894 32e6 	ldrb.w	r3, [r4, #742]	; 0x2e6
 8000cf0:	f884 32e5 	strb.w	r3, [r4, #741]	; 0x2e5
  p_cli->hist_line_new = false;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	f884 3194 	strb.w	r3, [r4, #404]	; 0x194
}
 8000cfa:	bd38      	pop	{r3, r4, r5, pc}
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 8000cfc:	f994 1195 	ldrsb.w	r1, [r4, #405]	; 0x195
 8000d00:	1c4b      	adds	r3, r1, #1
 8000d02:	e7e4      	b.n	8000cce <cliLineChange.constprop.0+0x46>
 8000d04:	200004e0 	.word	0x200004e0
 8000d08:	08009ab7 	.word	0x08009ab7
 8000d0c:	08009abd 	.word	0x08009abd
 8000d10:	20000784 	.word	0x20000784

08000d14 <cliPrintf>:
{
 8000d14:	b40f      	push	{r0, r1, r2, r3}
 8000d16:	b513      	push	{r0, r1, r4, lr}
 8000d18:	ab04      	add	r3, sp, #16
  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 8000d1a:	4c0a      	ldr	r4, [pc, #40]	; (8000d44 <cliPrintf+0x30>)
 8000d1c:	f44f 7180 	mov.w	r1, #256	; 0x100
{
 8000d20:	f853 2b04 	ldr.w	r2, [r3], #4
  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 8000d24:	4620      	mov	r0, r4
  va_start (arg, fmt);
 8000d26:	9301      	str	r3, [sp, #4]
  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 8000d28:	f006 fd04 	bl	8007734 <vsniprintf>
  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 8000d2c:	4621      	mov	r1, r4
  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 8000d2e:	4602      	mov	r2, r0
  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 8000d30:	f814 0c11 	ldrb.w	r0, [r4, #-17]
 8000d34:	f000 fdce 	bl	80018d4 <uartWrite>
}
 8000d38:	b002      	add	sp, #8
 8000d3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d3e:	b004      	add	sp, #16
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	200004f1 	.word	0x200004f1

08000d48 <cliMemoryDump>:
  int    argc = args->argc;
 8000d48:	8803      	ldrh	r3, [r0, #0]
{
 8000d4a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(args->argc < 1)
 8000d4e:	b92b      	cbnz	r3, 8000d5c <cliMemoryDump+0x14>
    cliPrintf(">> md addr [size] \n");
 8000d50:	482b      	ldr	r0, [pc, #172]	; (8000e00 <cliMemoryDump+0xb8>)
}
 8000d52:	b003      	add	sp, #12
 8000d54:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cliPrintf(">> md addr [size] \n");
 8000d58:	f7ff bfdc 	b.w	8000d14 <cliPrintf>
  if(argc > 1)
 8000d5c:	2b01      	cmp	r3, #1
  char **argv = args->argv;
 8000d5e:	6844      	ldr	r4, [r0, #4]
  if(argc > 1)
 8000d60:	d914      	bls.n	8000d8c <cliMemoryDump+0x44>
    size = (int)strtoul((const char * ) argv[1], (char **)NULL, (int) 0);
 8000d62:	2200      	movs	r2, #0
 8000d64:	6860      	ldr	r0, [r4, #4]
 8000d66:	4611      	mov	r1, r2
 8000d68:	f006 fcae 	bl	80076c8 <strtoul>
 8000d6c:	4606      	mov	r6, r0
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	6820      	ldr	r0, [r4, #0]
  for (idx = 0; idx<size; idx++)
 8000d72:	2500      	movs	r5, #0
	       printf("  |");
 8000d74:	f8df b098 	ldr.w	fp, [pc, #152]	; 8000e10 <cliMemoryDump+0xc8>
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 8000d78:	4611      	mov	r1, r2
 8000d7a:	f006 fca5 	bl	80076c8 <strtoul>
 8000d7e:	4604      	mov	r4, r0
 8000d80:	4607      	mov	r7, r0
  for (idx = 0; idx<size; idx++)
 8000d82:	42b5      	cmp	r5, r6
 8000d84:	db04      	blt.n	8000d90 <cliMemoryDump+0x48>
}
 8000d86:	b003      	add	sp, #12
 8000d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  int idx, size = 16;
 8000d8c:	2610      	movs	r6, #16
 8000d8e:	e7ee      	b.n	8000d6e <cliMemoryDump+0x26>
    if((idx%4) == 0)
 8000d90:	f015 0803 	ands.w	r8, r5, #3
 8000d94:	d103      	bne.n	8000d9e <cliMemoryDump+0x56>
      printf("   0x%08X: ", (unsigned int)addr);
 8000d96:	4639      	mov	r1, r7
 8000d98:	481a      	ldr	r0, [pc, #104]	; (8000e04 <cliMemoryDump+0xbc>)
 8000d9a:	f005 fcfb 	bl	8006794 <iprintf>
    printf(" 0x%08X", *(addr));
 8000d9e:	6839      	ldr	r1, [r7, #0]
 8000da0:	4819      	ldr	r0, [pc, #100]	; (8000e08 <cliMemoryDump+0xc0>)
 8000da2:	f005 fcf7 	bl	8006794 <iprintf>
    if ((idx%4) == 3)
 8000da6:	f1b8 0f03 	cmp.w	r8, #3
 8000daa:	d125      	bne.n	8000df8 <cliMemoryDump+0xb0>
      for (idx1= 0; idx1< 4; idx1++)
 8000dac:	f04f 0900 	mov.w	r9, #0
        memcpy((char *)asc, (char *)ascptr, 4);
 8000db0:	f854 2029 	ldr.w	r2, [r4, r9, lsl #2]
 8000db4:	9201      	str	r2, [sp, #4]
		if(idx1 == 0)
 8000db6:	f1b9 0f00 	cmp.w	r9, #0
 8000dba:	d102      	bne.n	8000dc2 <cliMemoryDump+0x7a>
	       printf("  |");
 8000dbc:	4658      	mov	r0, fp
 8000dbe:	f005 fce9 	bl	8006794 <iprintf>
 8000dc2:	f10d 0804 	add.w	r8, sp, #4
      for (idx1= 0; idx1< 4; idx1++)
 8000dc6:	f04f 0a00 	mov.w	sl, #0
           if (asc[i] > 0x1f && asc[i] < 0x7f)
 8000dca:	f818 0b01 	ldrb.w	r0, [r8], #1
        for (i=0;i<4;i++)
 8000dce:	f10a 0a01 	add.w	sl, sl, #1
           if (asc[i] > 0x1f && asc[i] < 0x7f)
 8000dd2:	f1a0 0120 	sub.w	r1, r0, #32
 8000dd6:	295e      	cmp	r1, #94	; 0x5e
            printf(".");
 8000dd8:	bf88      	it	hi
 8000dda:	202e      	movhi	r0, #46	; 0x2e
 8000ddc:	f005 fcf2 	bl	80067c4 <putchar>
        for (i=0;i<4;i++)
 8000de0:	f1ba 0f04 	cmp.w	sl, #4
 8000de4:	d1f1      	bne.n	8000dca <cliMemoryDump+0x82>
      for (idx1= 0; idx1< 4; idx1++)
 8000de6:	f109 0901 	add.w	r9, r9, #1
 8000dea:	f1b9 0f04 	cmp.w	r9, #4
 8000dee:	d1df      	bne.n	8000db0 <cliMemoryDump+0x68>
      printf("|\r\n");
 8000df0:	4806      	ldr	r0, [pc, #24]	; (8000e0c <cliMemoryDump+0xc4>)
 8000df2:	3410      	adds	r4, #16
 8000df4:	f005 fd6a 	bl	80068cc <puts>
    addr++;
 8000df8:	3704      	adds	r7, #4
  for (idx = 0; idx<size; idx++)
 8000dfa:	3501      	adds	r5, #1
 8000dfc:	e7c1      	b.n	8000d82 <cliMemoryDump+0x3a>
 8000dfe:	bf00      	nop
 8000e00:	08009ac3 	.word	0x08009ac3
 8000e04:	08009ad7 	.word	0x08009ad7
 8000e08:	08009ae3 	.word	0x08009ae3
 8000e0c:	08009aef 	.word	0x08009aef
 8000e10:	08009aeb 	.word	0x08009aeb

08000e14 <cliMain>:
{
 8000e14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (cli_node.is_open != true)
 8000e18:	4ca4      	ldr	r4, [pc, #656]	; (80010ac <cliMain+0x298>)
{
 8000e1a:	b085      	sub	sp, #20
  if (cli_node.is_open != true)
 8000e1c:	7a26      	ldrb	r6, [r4, #8]
 8000e1e:	b936      	cbnz	r6, 8000e2e <cliMain+0x1a>
	printf("cli node is not open\r\n");
 8000e20:	48a3      	ldr	r0, [pc, #652]	; (80010b0 <cliMain+0x29c>)
 8000e22:	f005 fd53 	bl	80068cc <puts>
}
 8000e26:	4630      	mov	r0, r6
 8000e28:	b005      	add	sp, #20
 8000e2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (uartAvailable(cli_node.ch) > 0)
 8000e2e:	7820      	ldrb	r0, [r4, #0]
 8000e30:	f000 fd1e 	bl	8001870 <uartAvailable>
 8000e34:	2800      	cmp	r0, #0
 8000e36:	d0f6      	beq.n	8000e26 <cliMain+0x12>
    cliUpdate(&cli_node, uartRead(cli_node.ch));
 8000e38:	7820      	ldrb	r0, [r4, #0]
 8000e3a:	f000 fd2f 	bl	800189c <uartRead>
  if (p_cli->state == CLI_RX_IDLE)
 8000e3e:	7c21      	ldrb	r1, [r4, #16]
 8000e40:	f88d 0007 	strb.w	r0, [sp, #7]
 8000e44:	2900      	cmp	r1, #0
 8000e46:	f040 80df 	bne.w	8001008 <cliMain+0x1f4>
    switch(rx_data)
 8000e4a:	281b      	cmp	r0, #27
 8000e4c:	f000 8129 	beq.w	80010a2 <cliMain+0x28e>
 8000e50:	d852      	bhi.n	8000ef8 <cliMain+0xe4>
 8000e52:	2808      	cmp	r0, #8
 8000e54:	f000 80f3 	beq.w	800103e <cliMain+0x22a>
 8000e58:	280d      	cmp	r0, #13
 8000e5a:	d068      	beq.n	8000f2e <cliMain+0x11a>
        if ((line->count + 1) < line->buf_len)
 8000e5c:	f894 32e6 	ldrb.w	r3, [r4, #742]	; 0x2e6
 8000e60:	f894 22e4 	ldrb.w	r2, [r4, #740]	; 0x2e4
 8000e64:	1c59      	adds	r1, r3, #1
 8000e66:	4291      	cmp	r1, r2
 8000e68:	dadd      	bge.n	8000e26 <cliMain+0x12>
          if (line->cursor == line->count)
 8000e6a:	f894 22e5 	ldrb.w	r2, [r4, #741]	; 0x2e5
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d119      	bne.n	8000ea6 <cliMain+0x92>
            uartWrite(p_cli->ch, &rx_data, 1);
 8000e72:	2201      	movs	r2, #1
 8000e74:	f10d 0107 	add.w	r1, sp, #7
 8000e78:	7820      	ldrb	r0, [r4, #0]
 8000e7a:	f000 fd2b 	bl	80018d4 <uartWrite>
            line->buf[line->cursor] = rx_data;
 8000e7e:	f894 22e5 	ldrb.w	r2, [r4, #741]	; 0x2e5
 8000e82:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8000e86:	18a3      	adds	r3, r4, r2
            line->cursor++;
 8000e88:	3201      	adds	r2, #1
            line->buf[line->cursor] = rx_data;
 8000e8a:	f883 12a4 	strb.w	r1, [r3, #676]	; 0x2a4
            line->count++;
 8000e8e:	f894 32e6 	ldrb.w	r3, [r4, #742]	; 0x2e6
            line->cursor++;
 8000e92:	f884 22e5 	strb.w	r2, [r4, #741]	; 0x2e5
            line->buf[line->count] = 0;
 8000e96:	2200      	movs	r2, #0
            line->count++;
 8000e98:	3301      	adds	r3, #1
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	f884 32e6 	strb.w	r3, [r4, #742]	; 0x2e6
            line->buf[line->count] = 0;
 8000ea0:	4423      	add	r3, r4
 8000ea2:	f883 22a4 	strb.w	r2, [r3, #676]	; 0x2a4
          if (line->cursor < line->count)
 8000ea6:	f894 12e5 	ldrb.w	r1, [r4, #741]	; 0x2e5
 8000eaa:	f894 32e6 	ldrb.w	r3, [r4, #742]	; 0x2e6
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	f080 80aa 	bcs.w	8001008 <cliMain+0x1f4>
            mov_len = line->count - line->cursor;
 8000eb4:	1a58      	subs	r0, r3, r1
 8000eb6:	f503 7229 	add.w	r2, r3, #676	; 0x2a4
            for (int i=0; i<mov_len; i++)
 8000eba:	2500      	movs	r5, #0
            mov_len = line->count - line->cursor;
 8000ebc:	b2c0      	uxtb	r0, r0
            for (int i=0; i<mov_len; i++)
 8000ebe:	4422      	add	r2, r4
 8000ec0:	3501      	adds	r5, #1
              line->buf[line->count - i] = line->buf[line->count - i - 1];
 8000ec2:	f812 7c01 	ldrb.w	r7, [r2, #-1]
            for (int i=0; i<mov_len; i++)
 8000ec6:	4285      	cmp	r5, r0
              line->buf[line->count - i] = line->buf[line->count - i - 1];
 8000ec8:	f802 7901 	strb.w	r7, [r2], #-1
            for (int i=0; i<mov_len; i++)
 8000ecc:	dbf8      	blt.n	8000ec0 <cliMain+0xac>
            line->count++;
 8000ece:	3301      	adds	r3, #1
            line->buf[line->cursor] = rx_data;
 8000ed0:	1860      	adds	r0, r4, r1
            line->cursor++;
 8000ed2:	3101      	adds	r1, #1
            line->buf[line->cursor] = rx_data;
 8000ed4:	f89d 2007 	ldrb.w	r2, [sp, #7]
            line->count++;
 8000ed8:	b2db      	uxtb	r3, r3
            line->cursor++;
 8000eda:	f884 12e5 	strb.w	r1, [r4, #741]	; 0x2e5
            line->buf[line->count] = 0;
 8000ede:	2100      	movs	r1, #0
            line->count++;
 8000ee0:	f884 32e6 	strb.w	r3, [r4, #742]	; 0x2e6
            line->buf[line->count] = 0;
 8000ee4:	4423      	add	r3, r4
            line->buf[line->cursor] = rx_data;
 8000ee6:	f880 22a4 	strb.w	r2, [r0, #676]	; 0x2a4
            line->buf[line->count] = 0;
 8000eea:	f883 12a4 	strb.w	r1, [r3, #676]	; 0x2a4
            uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 8000eee:	7820      	ldrb	r0, [r4, #0]
 8000ef0:	4970      	ldr	r1, [pc, #448]	; (80010b4 <cliMain+0x2a0>)
 8000ef2:	f000 fd0b 	bl	800190c <uartPrintf>
 8000ef6:	e087      	b.n	8001008 <cliMain+0x1f4>
    switch(rx_data)
 8000ef8:	287f      	cmp	r0, #127	; 0x7f
 8000efa:	d1af      	bne.n	8000e5c <cliMain+0x48>
        if (line->cursor < line->count)
 8000efc:	f894 22e5 	ldrb.w	r2, [r4, #741]	; 0x2e5
 8000f00:	f894 32e6 	ldrb.w	r3, [r4, #742]	; 0x2e6
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d28e      	bcs.n	8000e26 <cliMain+0x12>
          mov_len = line->count - line->cursor;
 8000f08:	1a99      	subs	r1, r3, r2
 8000f0a:	f502 7229 	add.w	r2, r2, #676	; 0x2a4
          for (int i=1; i<mov_len; i++)
 8000f0e:	2001      	movs	r0, #1
          mov_len = line->count - line->cursor;
 8000f10:	b2c9      	uxtb	r1, r1
          for (int i=1; i<mov_len; i++)
 8000f12:	4422      	add	r2, r4
 8000f14:	4288      	cmp	r0, r1
 8000f16:	f2c0 808d 	blt.w	8001034 <cliMain+0x220>
          line->count--;
 8000f1a:	3b01      	subs	r3, #1
          line->buf[line->count] = 0;
 8000f1c:	2200      	movs	r2, #0
          uartPrintf(p_cli->ch, "\x1B[1P");
 8000f1e:	4966      	ldr	r1, [pc, #408]	; (80010b8 <cliMain+0x2a4>)
          line->count--;
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	f884 32e6 	strb.w	r3, [r4, #742]	; 0x2e6
          line->buf[line->count] = 0;
 8000f26:	4423      	add	r3, r4
 8000f28:	f883 22a4 	strb.w	r2, [r3, #676]	; 0x2a4
          uartPrintf(p_cli->ch, "\x1B[1P");
 8000f2c:	e069      	b.n	8001002 <cliMain+0x1ee>
        if (line->count > 0)
 8000f2e:	f894 32e6 	ldrb.w	r3, [r4, #742]	; 0x2e6
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d059      	beq.n	8000fea <cliMain+0x1d6>
  p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 8000f36:	f894 5196 	ldrb.w	r5, [r4, #406]	; 0x196
 8000f3a:	2243      	movs	r2, #67	; 0x43
 8000f3c:	f504 7129 	add.w	r1, r4, #676	; 0x2a4
  p_cli->argc = 0;
 8000f40:	2700      	movs	r7, #0
  p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 8000f42:	fb02 4005 	mla	r0, r2, r5, r4
    argv[argc++] = tok;
 8000f46:	f8df 8190 	ldr.w	r8, [pc, #400]	; 80010d8 <cliMain+0x2c4>
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8000f4a:	f8df 9170 	ldr.w	r9, [pc, #368]	; 80010bc <cliMain+0x2a8>
  p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 8000f4e:	f500 70cc 	add.w	r0, r0, #408	; 0x198
 8000f52:	f005 fb5f 	bl	8006614 <memcpy>
  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 8000f56:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
  p_cli->hist_line_i    = p_cli->hist_line_last;
 8000f5a:	f884 5195 	strb.w	r5, [r4, #405]	; 0x195
  p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 8000f5e:	3501      	adds	r5, #1
  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 8000f60:	2b03      	cmp	r3, #3
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8000f62:	aa02      	add	r2, sp, #8
  p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 8000f64:	f005 0503 	and.w	r5, r5, #3
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8000f68:	4954      	ldr	r1, [pc, #336]	; (80010bc <cliMain+0x2a8>)
    p_cli->hist_line_count++;
 8000f6a:	bf98      	it	ls
 8000f6c:	3301      	addls	r3, #1
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8000f6e:	4854      	ldr	r0, [pc, #336]	; (80010c0 <cliMain+0x2ac>)
  p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 8000f70:	f884 5196 	strb.w	r5, [r4, #406]	; 0x196
    p_cli->hist_line_count++;
 8000f74:	bf98      	it	ls
 8000f76:	f884 3197 	strbls.w	r3, [r4, #407]	; 0x197
  p_cli->hist_line_new  = true;
 8000f7a:	2301      	movs	r3, #1
  p_cli->argc = 0;
 8000f7c:	f8a4 7112 	strh.w	r7, [r4, #274]	; 0x112
  p_cli->hist_line_new  = true;
 8000f80:	f884 3194 	strb.w	r3, [r4, #404]	; 0x194
  argv[argc] = NULL;
 8000f84:	f8c4 7114 	str.w	r7, [r4, #276]	; 0x114
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8000f88:	f006 fb1e 	bl	80075c8 <strtok_r>
 8000f8c:	463b      	mov	r3, r7
 8000f8e:	4605      	mov	r5, r0
 8000f90:	b29a      	uxth	r2, r3
 8000f92:	1c5f      	adds	r7, r3, #1
 8000f94:	2d00      	cmp	r5, #0
 8000f96:	d140      	bne.n	800101a <cliMain+0x206>
  p_cli->argc = argc;
 8000f98:	f8a4 2112 	strh.w	r2, [r4, #274]	; 0x112
  if (argc > 0)
 8000f9c:	b32a      	cbz	r2, 8000fea <cliMain+0x1d6>
    cliPrintf("\r\n");
 8000f9e:	4849      	ldr	r0, [pc, #292]	; (80010c4 <cliMain+0x2b0>)
 8000fa0:	f7ff feb8 	bl	8000d14 <cliPrintf>
    cliToUpper(p_cli->argv[0]);
 8000fa4:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
 8000fa8:	f7ff fdbc 	bl	8000b24 <cliToUpper>
    for (int i=0; i<p_cli->cmd_count; i++)
 8000fac:	4f3f      	ldr	r7, [pc, #252]	; (80010ac <cliMain+0x298>)
 8000fae:	f8b4 82e8 	ldrh.w	r8, [r4, #744]	; 0x2e8
      if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 8000fb2:	f8d4 9114 	ldr.w	r9, [r4, #276]	; 0x114
    for (int i=0; i<p_cli->cmd_count; i++)
 8000fb6:	4545      	cmp	r5, r8
 8000fb8:	da17      	bge.n	8000fea <cliMain+0x1d6>
      if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 8000fba:	f507 713b 	add.w	r1, r7, #748	; 0x2ec
 8000fbe:	4648      	mov	r0, r9
 8000fc0:	3714      	adds	r7, #20
 8000fc2:	f7ff f93d 	bl	8000240 <strcmp>
 8000fc6:	2800      	cmp	r0, #0
 8000fc8:	d132      	bne.n	8001030 <cliMain+0x21c>
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 8000fca:	f8b4 3112 	ldrh.w	r3, [r4, #274]	; 0x112
        p_cli->cmd_args.argv = &p_cli->argv[1];
 8000fce:	483e      	ldr	r0, [pc, #248]	; (80010c8 <cliMain+0x2b4>)
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 8000fd0:	3b01      	subs	r3, #1
        p_cli->cmd_args.argv = &p_cli->argv[1];
 8000fd2:	f8c4 0430 	str.w	r0, [r4, #1072]	; 0x430
        p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 8000fd6:	f500 7045 	add.w	r0, r0, #788	; 0x314
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 8000fda:	f8a4 342c 	strh.w	r3, [r4, #1068]	; 0x42c
        p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 8000fde:	2314      	movs	r3, #20
 8000fe0:	fb03 4505 	mla	r5, r3, r5, r4
 8000fe4:	f8d5 32fc 	ldr.w	r3, [r5, #764]	; 0x2fc
 8000fe8:	4798      	blx	r3
        line->count = 0;
 8000fea:	2300      	movs	r3, #0
  uartPrintf(p_cli->ch, "\n\r");
 8000fec:	4937      	ldr	r1, [pc, #220]	; (80010cc <cliMain+0x2b8>)
 8000fee:	7820      	ldrb	r0, [r4, #0]
        line->count = 0;
 8000ff0:	f884 32e6 	strb.w	r3, [r4, #742]	; 0x2e6
        line->cursor = 0;
 8000ff4:	f884 32e5 	strb.w	r3, [r4, #741]	; 0x2e5
        line->buf[0] = 0;
 8000ff8:	f884 32a4 	strb.w	r3, [r4, #676]	; 0x2a4
  uartPrintf(p_cli->ch, "\n\r");
 8000ffc:	f000 fc86 	bl	800190c <uartPrintf>
  uartPrintf(p_cli->ch, CLI_PROMPT_STR);
 8001000:	4933      	ldr	r1, [pc, #204]	; (80010d0 <cliMain+0x2bc>)
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 8001002:	7820      	ldrb	r0, [r4, #0]
 8001004:	f000 fc82 	bl	800190c <uartPrintf>
  switch(p_cli->state)
 8001008:	7c23      	ldrb	r3, [r4, #16]
 800100a:	3b01      	subs	r3, #1
 800100c:	2b03      	cmp	r3, #3
 800100e:	f63f af0a 	bhi.w	8000e26 <cliMain+0x12>
 8001012:	e8df f003 	tbb	[pc, r3]
 8001016:	4946      	.short	0x4946
 8001018:	da63      	.short	0xda63
    argv[argc++] = tok;
 800101a:	b29b      	uxth	r3, r3
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 800101c:	aa02      	add	r2, sp, #8
 800101e:	4649      	mov	r1, r9
 8001020:	2000      	movs	r0, #0
    argv[argc++] = tok;
 8001022:	f848 5023 	str.w	r5, [r8, r3, lsl #2]
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8001026:	f006 facf 	bl	80075c8 <strtok_r>
 800102a:	463b      	mov	r3, r7
 800102c:	4605      	mov	r5, r0
 800102e:	e7af      	b.n	8000f90 <cliMain+0x17c>
    for (int i=0; i<p_cli->cmd_count; i++)
 8001030:	3501      	adds	r5, #1
 8001032:	e7c0      	b.n	8000fb6 <cliMain+0x1a2>
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8001034:	7855      	ldrb	r5, [r2, #1]
          for (int i=1; i<mov_len; i++)
 8001036:	3001      	adds	r0, #1
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8001038:	f802 5b01 	strb.w	r5, [r2], #1
          for (int i=1; i<mov_len; i++)
 800103c:	e76a      	b.n	8000f14 <cliMain+0x100>
        if (line->count > 0 && line->cursor > 0)
 800103e:	f894 22e6 	ldrb.w	r2, [r4, #742]	; 0x2e6
 8001042:	f894 32e5 	ldrb.w	r3, [r4, #741]	; 0x2e5
 8001046:	b93a      	cbnz	r2, 8001058 <cliMain+0x244>
        if (line->cursor > 0)
 8001048:	2b00      	cmp	r3, #0
 800104a:	f43f aeec 	beq.w	8000e26 <cliMain+0x12>
          line->cursor--;
 800104e:	3b01      	subs	r3, #1
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 8001050:	4920      	ldr	r1, [pc, #128]	; (80010d4 <cliMain+0x2c0>)
          line->cursor--;
 8001052:	f884 32e5 	strb.w	r3, [r4, #741]	; 0x2e5
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 8001056:	e7d4      	b.n	8001002 <cliMain+0x1ee>
        if (line->count > 0 && line->cursor > 0)
 8001058:	2b00      	cmp	r3, #0
 800105a:	f43f aee4 	beq.w	8000e26 <cliMain+0x12>
          if (line->cursor == line->count)
 800105e:	429a      	cmp	r2, r3
 8001060:	d106      	bne.n	8001070 <cliMain+0x25c>
            line->count--;
 8001062:	1e5a      	subs	r2, r3, #1
 8001064:	b2d2      	uxtb	r2, r2
 8001066:	f884 22e6 	strb.w	r2, [r4, #742]	; 0x2e6
            line->buf[line->count] = 0;
 800106a:	4422      	add	r2, r4
 800106c:	f882 12a4 	strb.w	r1, [r2, #676]	; 0x2a4
          if (line->cursor < line->count)
 8001070:	f894 22e6 	ldrb.w	r2, [r4, #742]	; 0x2e6
 8001074:	429a      	cmp	r2, r3
 8001076:	d9ea      	bls.n	800104e <cliMain+0x23a>
            mov_len = line->count - line->cursor;
 8001078:	1ad0      	subs	r0, r2, r3
 800107a:	f203 21a3 	addw	r1, r3, #675	; 0x2a3
            for (int i=0; i<mov_len; i++)
 800107e:	2500      	movs	r5, #0
            mov_len = line->count - line->cursor;
 8001080:	b2c0      	uxtb	r0, r0
            for (int i=0; i<mov_len; i++)
 8001082:	4421      	add	r1, r4
 8001084:	3501      	adds	r5, #1
              line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8001086:	784f      	ldrb	r7, [r1, #1]
            for (int i=0; i<mov_len; i++)
 8001088:	4285      	cmp	r5, r0
              line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 800108a:	f801 7b01 	strb.w	r7, [r1], #1
            for (int i=0; i<mov_len; i++)
 800108e:	dbf9      	blt.n	8001084 <cliMain+0x270>
            line->count--;
 8001090:	3a01      	subs	r2, #1
            line->buf[line->count] = 0;
 8001092:	2100      	movs	r1, #0
            line->count--;
 8001094:	b2d2      	uxtb	r2, r2
 8001096:	f884 22e6 	strb.w	r2, [r4, #742]	; 0x2e6
            line->buf[line->count] = 0;
 800109a:	4422      	add	r2, r4
 800109c:	f882 12a4 	strb.w	r1, [r2, #676]	; 0x2a4
        if (line->cursor > 0)
 80010a0:	e7d5      	b.n	800104e <cliMain+0x23a>
      p_cli->state = CLI_RX_SP2;
 80010a2:	2302      	movs	r3, #2
      p_cli->state = CLI_RX_IDLE;
 80010a4:	7423      	strb	r3, [r4, #16]
      break;
 80010a6:	e6be      	b.n	8000e26 <cliMain+0x12>
      p_cli->state = CLI_RX_SP3;
 80010a8:	2303      	movs	r3, #3
 80010aa:	e7fb      	b.n	80010a4 <cliMain+0x290>
 80010ac:	200004e0 	.word	0x200004e0
 80010b0:	08009af2 	.word	0x08009af2
 80010b4:	08009b21 	.word	0x08009b21
 80010b8:	08009b1c 	.word	0x08009b1c
 80010bc:	08009b08 	.word	0x08009b08
 80010c0:	20000784 	.word	0x20000784
 80010c4:	08009cf0 	.word	0x08009cf0
 80010c8:	200005f8 	.word	0x200005f8
 80010cc:	08009b0f 	.word	0x08009b0f
 80010d0:	08009b12 	.word	0x08009b12
 80010d4:	08009b19 	.word	0x08009b19
 80010d8:	200005f4 	.word	0x200005f4
      if (rx_data == CLI_KEY_LEFT)
 80010dc:	f89d 2007 	ldrb.w	r2, [sp, #7]
      p_cli->state = CLI_RX_IDLE;
 80010e0:	2300      	movs	r3, #0
      if (rx_data == CLI_KEY_LEFT)
 80010e2:	2a44      	cmp	r2, #68	; 0x44
      p_cli->state = CLI_RX_IDLE;
 80010e4:	7423      	strb	r3, [r4, #16]
      if (rx_data == CLI_KEY_LEFT)
 80010e6:	d110      	bne.n	800110a <cliMain+0x2f6>
        if (line->cursor > 0)
 80010e8:	f894 32e5 	ldrb.w	r3, [r4, #741]	; 0x2e5
 80010ec:	b383      	cbz	r3, 8001150 <cliMain+0x33c>
          line->cursor--;
 80010ee:	3b01      	subs	r3, #1
          tx_buf[2] = rx_data;
 80010f0:	f88d 200a 	strb.w	r2, [sp, #10]
          uartWrite(p_cli->ch, tx_buf, 3);
 80010f4:	a902      	add	r1, sp, #8
 80010f6:	2203      	movs	r2, #3
          line->cursor--;
 80010f8:	f884 32e5 	strb.w	r3, [r4, #741]	; 0x2e5
          tx_buf[0] = 0x1B;
 80010fc:	f645 331b 	movw	r3, #23323	; 0x5b1b
          uartWrite(p_cli->ch, tx_buf, 3);
 8001100:	7820      	ldrb	r0, [r4, #0]
          tx_buf[0] = 0x1B;
 8001102:	f8ad 3008 	strh.w	r3, [sp, #8]
          uartWrite(p_cli->ch, tx_buf, 3);
 8001106:	f000 fbe5 	bl	80018d4 <uartWrite>
      if (rx_data == CLI_KEY_RIGHT)
 800110a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800110e:	2a43      	cmp	r2, #67	; 0x43
 8001110:	d113      	bne.n	800113a <cliMain+0x326>
        if (line->cursor < line->count)
 8001112:	f894 32e5 	ldrb.w	r3, [r4, #741]	; 0x2e5
 8001116:	f894 12e6 	ldrb.w	r1, [r4, #742]	; 0x2e6
 800111a:	4299      	cmp	r1, r3
 800111c:	d923      	bls.n	8001166 <cliMain+0x352>
          line->cursor++;
 800111e:	3301      	adds	r3, #1
          tx_buf[2] = rx_data;
 8001120:	f88d 200a 	strb.w	r2, [sp, #10]
          uartWrite(p_cli->ch, tx_buf, 3);
 8001124:	a902      	add	r1, sp, #8
 8001126:	2203      	movs	r2, #3
          line->cursor++;
 8001128:	f884 32e5 	strb.w	r3, [r4, #741]	; 0x2e5
          tx_buf[0] = 0x1B;
 800112c:	f645 331b 	movw	r3, #23323	; 0x5b1b
          uartWrite(p_cli->ch, tx_buf, 3);
 8001130:	7820      	ldrb	r0, [r4, #0]
          tx_buf[0] = 0x1B;
 8001132:	f8ad 3008 	strh.w	r3, [sp, #8]
          uartWrite(p_cli->ch, tx_buf, 3);
 8001136:	f000 fbcd 	bl	80018d4 <uartWrite>
      if (rx_data == CLI_KEY_UP)
 800113a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800113e:	2b41      	cmp	r3, #65	; 0x41
 8001140:	d106      	bne.n	8001150 <cliMain+0x33c>
        cliLineChange(p_cli, true);
 8001142:	2001      	movs	r0, #1
 8001144:	f7ff fda0 	bl	8000c88 <cliLineChange.constprop.0>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8001148:	4921      	ldr	r1, [pc, #132]	; (80011d0 <cliMain+0x3bc>)
 800114a:	7820      	ldrb	r0, [r4, #0]
 800114c:	f000 fbde 	bl	800190c <uartPrintf>
      if (rx_data == CLI_KEY_DOWN)
 8001150:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001154:	2b42      	cmp	r3, #66	; 0x42
 8001156:	d106      	bne.n	8001166 <cliMain+0x352>
        cliLineChange(p_cli, false);
 8001158:	2000      	movs	r0, #0
 800115a:	f7ff fd95 	bl	8000c88 <cliLineChange.constprop.0>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 800115e:	491c      	ldr	r1, [pc, #112]	; (80011d0 <cliMain+0x3bc>)
 8001160:	7820      	ldrb	r0, [r4, #0]
 8001162:	f000 fbd3 	bl	800190c <uartPrintf>
      if (rx_data == CLI_KEY_HOME)
 8001166:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800116a:	2b31      	cmp	r3, #49	; 0x31
 800116c:	d10a      	bne.n	8001184 <cliMain+0x370>
        uartPrintf(p_cli->ch, "\x1B[%dD", line->cursor);
 800116e:	f894 22e5 	ldrb.w	r2, [r4, #741]	; 0x2e5
 8001172:	4918      	ldr	r1, [pc, #96]	; (80011d4 <cliMain+0x3c0>)
 8001174:	7820      	ldrb	r0, [r4, #0]
 8001176:	f000 fbc9 	bl	800190c <uartPrintf>
        line->cursor = 0;
 800117a:	2300      	movs	r3, #0
 800117c:	f884 32e5 	strb.w	r3, [r4, #741]	; 0x2e5
        p_cli->state = CLI_RX_SP4;
 8001180:	2304      	movs	r3, #4
 8001182:	7423      	strb	r3, [r4, #16]
      if (rx_data == CLI_KEY_END)
 8001184:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001188:	2b34      	cmp	r3, #52	; 0x34
 800118a:	f47f ae4c 	bne.w	8000e26 <cliMain+0x12>
        if (line->cursor < line->count)
 800118e:	f894 32e5 	ldrb.w	r3, [r4, #741]	; 0x2e5
 8001192:	f894 22e6 	ldrb.w	r2, [r4, #742]	; 0x2e6
 8001196:	4293      	cmp	r3, r2
 8001198:	d205      	bcs.n	80011a6 <cliMain+0x392>
          mov_len = line->count - line->cursor;
 800119a:	1ad2      	subs	r2, r2, r3
          uartPrintf(p_cli->ch, "\x1B[%dC", mov_len);
 800119c:	490e      	ldr	r1, [pc, #56]	; (80011d8 <cliMain+0x3c4>)
 800119e:	7820      	ldrb	r0, [r4, #0]
 80011a0:	b292      	uxth	r2, r2
 80011a2:	f000 fbb3 	bl	800190c <uartPrintf>
        if (line->cursor > line->count)
 80011a6:	f894 22e5 	ldrb.w	r2, [r4, #741]	; 0x2e5
 80011aa:	f894 32e6 	ldrb.w	r3, [r4, #742]	; 0x2e6
 80011ae:	429a      	cmp	r2, r3
 80011b0:	d905      	bls.n	80011be <cliMain+0x3aa>
          mov_len = line->cursor - line->count;
 80011b2:	1ad2      	subs	r2, r2, r3
          uartPrintf(p_cli->ch, "\x1B[%dD", mov_len);
 80011b4:	4907      	ldr	r1, [pc, #28]	; (80011d4 <cliMain+0x3c0>)
 80011b6:	7820      	ldrb	r0, [r4, #0]
 80011b8:	b292      	uxth	r2, r2
 80011ba:	f000 fba7 	bl	800190c <uartPrintf>
        line->cursor = line->count;
 80011be:	f894 32e6 	ldrb.w	r3, [r4, #742]	; 0x2e6
 80011c2:	f884 32e5 	strb.w	r3, [r4, #741]	; 0x2e5
        p_cli->state = CLI_RX_SP4;
 80011c6:	2304      	movs	r3, #4
 80011c8:	e76c      	b.n	80010a4 <cliMain+0x290>
      p_cli->state = CLI_RX_IDLE;
 80011ca:	2300      	movs	r3, #0
 80011cc:	e76a      	b.n	80010a4 <cliMain+0x290>
 80011ce:	bf00      	nop
 80011d0:	20000784 	.word	0x20000784
 80011d4:	08009ab7 	.word	0x08009ab7
 80011d8:	08009b2c 	.word	0x08009b2c

080011dc <cliAdd>:
{
 80011dc:	b570      	push	{r4, r5, r6, lr}
  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 80011de:	4d0e      	ldr	r5, [pc, #56]	; (8001218 <cliAdd+0x3c>)
{
 80011e0:	460e      	mov	r6, r1
  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 80011e2:	f8b5 32e8 	ldrh.w	r3, [r5, #744]	; 0x2e8
 80011e6:	2b0f      	cmp	r3, #15
 80011e8:	d814      	bhi.n	8001214 <cliAdd+0x38>
  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 80011ea:	2414      	movs	r4, #20
 80011ec:	4601      	mov	r1, r0
 80011ee:	435c      	muls	r4, r3
 80011f0:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  p_cli->cmd_list[index].cmd_func = p_func;
 80011f4:	442c      	add	r4, r5
  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 80011f6:	442b      	add	r3, r5
 80011f8:	4618      	mov	r0, r3
 80011fa:	f005 fb7f 	bl	80068fc <strcpy>
  p_cli->cmd_list[index].cmd_func = p_func;
 80011fe:	f8c4 62fc 	str.w	r6, [r4, #764]	; 0x2fc
  cliToUpper(p_cli->cmd_list[index].cmd_str);
 8001202:	f7ff fc8f 	bl	8000b24 <cliToUpper>
  p_cli->cmd_count++;
 8001206:	f8b5 32e8 	ldrh.w	r3, [r5, #744]	; 0x2e8
  return ret;
 800120a:	2001      	movs	r0, #1
  p_cli->cmd_count++;
 800120c:	3301      	adds	r3, #1
 800120e:	f8a5 32e8 	strh.w	r3, [r5, #744]	; 0x2e8
}
 8001212:	bd70      	pop	{r4, r5, r6, pc}
    return false;
 8001214:	2000      	movs	r0, #0
 8001216:	e7fc      	b.n	8001212 <cliAdd+0x36>
 8001218:	200004e0 	.word	0x200004e0

0800121c <cliInit>:
{
 800121c:	b510      	push	{r4, lr}
  cli_node.cmd_args.getData  = cliArgsGetData;
 800121e:	4a16      	ldr	r2, [pc, #88]	; (8001278 <cliInit+0x5c>)
  cli_node.is_open = false;
 8001220:	2300      	movs	r3, #0
 8001222:	4c16      	ldr	r4, [pc, #88]	; (800127c <cliInit+0x60>)
  cliAdd("help", cliShowList);
 8001224:	4916      	ldr	r1, [pc, #88]	; (8001280 <cliInit+0x64>)
  cli_node.cmd_args.getData  = cliArgsGetData;
 8001226:	f8c4 2434 	str.w	r2, [r4, #1076]	; 0x434
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 800122a:	4a16      	ldr	r2, [pc, #88]	; (8001284 <cliInit+0x68>)
  cliAdd("help", cliShowList);
 800122c:	4816      	ldr	r0, [pc, #88]	; (8001288 <cliInit+0x6c>)
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 800122e:	f8c4 2438 	str.w	r2, [r4, #1080]	; 0x438
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 8001232:	4a16      	ldr	r2, [pc, #88]	; (800128c <cliInit+0x70>)
  cli_node.is_open = false;
 8001234:	8123      	strh	r3, [r4, #8]
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 8001236:	f8c4 243c 	str.w	r2, [r4, #1084]	; 0x43c
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 800123a:	4a15      	ldr	r2, [pc, #84]	; (8001290 <cliInit+0x74>)
  cli_node.state   = CLI_RX_IDLE;
 800123c:	7423      	strb	r3, [r4, #16]
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 800123e:	f8c4 2440 	str.w	r2, [r4, #1088]	; 0x440
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 8001242:	223f      	movs	r2, #63	; 0x3f
  cli_node.hist_line_new   = false;
 8001244:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
  p_cli->line.count   = 0;
 8001248:	f884 32e6 	strb.w	r3, [r4, #742]	; 0x2e6
  p_cli->line.buf[0]  = 0;
 800124c:	f884 32a4 	strb.w	r3, [r4, #676]	; 0x2a4
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 8001250:	f8a4 22e4 	strh.w	r2, [r4, #740]	; 0x2e4
  cliAdd("help", cliShowList);
 8001254:	f7ff ffc2 	bl	80011dc <cliAdd>
  cliAdd("md8"  , cliMemoryDump);
 8001258:	490e      	ldr	r1, [pc, #56]	; (8001294 <cliInit+0x78>)
 800125a:	480f      	ldr	r0, [pc, #60]	; (8001298 <cliInit+0x7c>)
 800125c:	f7ff ffbe 	bl	80011dc <cliAdd>
  cliAdd("mw8", cliMemoryWrite);
 8001260:	490e      	ldr	r1, [pc, #56]	; (800129c <cliInit+0x80>)
 8001262:	480f      	ldr	r0, [pc, #60]	; (80012a0 <cliInit+0x84>)
 8001264:	f7ff ffba 	bl	80011dc <cliAdd>
  cli_node.ch = ch;
 8001268:	2302      	movs	r3, #2
  cli_node.is_open = 1;
 800126a:	2001      	movs	r0, #1
  cli_node.ch = ch;
 800126c:	7023      	strb	r3, [r4, #0]
  cli_node.baud = baud;
 800126e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  cli_node.is_open = 1;
 8001272:	7220      	strb	r0, [r4, #8]
  cli_node.baud = baud;
 8001274:	6063      	str	r3, [r4, #4]
}
 8001276:	bd10      	pop	{r4, pc}
 8001278:	08000c65 	.word	0x08000c65
 800127c:	200004e0 	.word	0x200004e0
 8001280:	08000b69 	.word	0x08000b69
 8001284:	08000c3d 	.word	0x08000c3d
 8001288:	08009b32 	.word	0x08009b32
 800128c:	08000b4d 	.word	0x08000b4d
 8001290:	08000c11 	.word	0x08000c11
 8001294:	08000d49 	.word	0x08000d49
 8001298:	08009b37 	.word	0x08009b37
 800129c:	08000bb9 	.word	0x08000bb9
 80012a0:	08009b3b 	.word	0x08009b3b

080012a4 <flashInit>:
  {
    flash_tbl[i].addr   = 0x8000000 + i*1024;
    flash_tbl[i].length = 1024;
  }*/

  cliAdd("flash", cliFlash);
 80012a4:	4903      	ldr	r1, [pc, #12]	; (80012b4 <flashInit+0x10>)
 80012a6:	4804      	ldr	r0, [pc, #16]	; (80012b8 <flashInit+0x14>)
{
 80012a8:	b508      	push	{r3, lr}
  cliAdd("flash", cliFlash);
 80012aa:	f7ff ff97 	bl	80011dc <cliAdd>

  return true;
}
 80012ae:	2001      	movs	r0, #1
 80012b0:	bd08      	pop	{r3, pc}
 80012b2:	bf00      	nop
 80012b4:	08001411 	.word	0x08001411
 80012b8:	08009b3f 	.word	0x08009b3f

080012bc <flashErase>:

bool flashErase(uint32_t addr, uint32_t length)
{
  bool ret = false;
  uint32_t page_error=0;
 80012bc:	2300      	movs	r3, #0
{
 80012be:	b573      	push	{r0, r1, r4, r5, r6, lr}
    ret = HAL_FLASH_OB_Unlock();
    /* Get the Dual bank configuration status */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |
                             FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_ERSERR);

    HAL_FLASHEx_OBGetConfig(&OBInit);
 80012c0:	4e3c      	ldr	r6, [pc, #240]	; (80013b4 <flashErase+0xf8>)
{
 80012c2:	4604      	mov	r4, r0
  uint32_t page_error=0;
 80012c4:	9301      	str	r3, [sp, #4]
    ret = HAL_FLASH_Unlock();
 80012c6:	f001 f9d3 	bl	8002670 <HAL_FLASH_Unlock>
    ret = HAL_FLASH_OB_Unlock();
 80012ca:	f001 f9ed 	bl	80026a8 <HAL_FLASH_OB_Unlock>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |
 80012ce:	4b3a      	ldr	r3, [pc, #232]	; (80013b8 <flashErase+0xfc>)
 80012d0:	22f3      	movs	r2, #243	; 0xf3
    ret = HAL_FLASH_OB_Unlock();
 80012d2:	4605      	mov	r5, r0
    HAL_FLASHEx_OBGetConfig(&OBInit);
 80012d4:	4630      	mov	r0, r6
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |
 80012d6:	60da      	str	r2, [r3, #12]
    HAL_FLASHEx_OBGetConfig(&OBInit);
 80012d8:	f001 fa80 	bl	80027dc <HAL_FLASHEx_OBGetConfig>

    if((OBInit.USERConfig & OB_NDBANK_SINGLE_BANK) == OB_NDBANK_DUAL_BANK)
 80012dc:	6973      	ldr	r3, [r6, #20]
 80012de:	0098      	lsls	r0, r3, #2
 80012e0:	d402      	bmi.n	80012e8 <flashErase+0x2c>
    {
  	  printf("Dual Bank Flash init Ok\r\n");
 80012e2:	4836      	ldr	r0, [pc, #216]	; (80013bc <flashErase+0x100>)
 80012e4:	f005 faf2 	bl	80068cc <puts>

static uint32_t GetSector(uint32_t Address)
{
  uint32_t sector = 0;

  if((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0))
 80012e8:	f104 4278 	add.w	r2, r4, #4160749568	; 0xf8000000
 80012ec:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80012f0:	d34b      	bcc.n	800138a <flashErase+0xce>
  {
    sector = FLASH_SECTOR_0;
  }
  else if((Address < ADDR_FLASH_SECTOR_2) && (Address >= ADDR_FLASH_SECTOR_1))
 80012f2:	f5a2 4300 	sub.w	r3, r2, #32768	; 0x8000
 80012f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80012fa:	d348      	bcc.n	800138e <flashErase+0xd2>
  {
    sector = FLASH_SECTOR_1;
  }
  else if((Address < ADDR_FLASH_SECTOR_3) && (Address >= ADDR_FLASH_SECTOR_2))
 80012fc:	f104 4377 	add.w	r3, r4, #4143972352	; 0xf7000000
 8001300:	f503 017f 	add.w	r1, r3, #16711680	; 0xff0000
 8001304:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001308:	d343      	bcc.n	8001392 <flashErase+0xd6>
  {
    sector = FLASH_SECTOR_2;
  }
  else if((Address < ADDR_FLASH_SECTOR_4) && (Address >= ADDR_FLASH_SECTOR_3))
 800130a:	f5a2 32c0 	sub.w	r2, r2, #98304	; 0x18000
 800130e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001312:	d340      	bcc.n	8001396 <flashErase+0xda>
  {
    sector = FLASH_SECTOR_3;
  }
  else if((Address < ADDR_FLASH_SECTOR_5) && (Address >= ADDR_FLASH_SECTOR_4))
 8001314:	f503 027e 	add.w	r2, r3, #16646144	; 0xfe0000
 8001318:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 800131c:	d33d      	bcc.n	800139a <flashErase+0xde>
  {
    sector = FLASH_SECTOR_4;
  }
  else if((Address < ADDR_FLASH_SECTOR_6) && (Address >= ADDR_FLASH_SECTOR_5))
 800131e:	f503 027c 	add.w	r2, r3, #16515072	; 0xfc0000
 8001322:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8001326:	d33a      	bcc.n	800139e <flashErase+0xe2>
  {
    sector = FLASH_SECTOR_5;
  }
  else if((Address < ADDR_FLASH_SECTOR_7) && (Address >= ADDR_FLASH_SECTOR_6))
 8001328:	f503 0278 	add.w	r2, r3, #16252928	; 0xf80000
 800132c:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8001330:	d337      	bcc.n	80013a2 <flashErase+0xe6>
  {
    sector = FLASH_SECTOR_6;
  }
  else if((Address < ADDR_FLASH_SECTOR_8) && (Address >= ADDR_FLASH_SECTOR_7))
 8001332:	f503 0274 	add.w	r2, r3, #15990784	; 0xf40000
 8001336:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 800133a:	d334      	bcc.n	80013a6 <flashErase+0xea>
  {
    sector = FLASH_SECTOR_7;
  }
  else if((Address < ADDR_FLASH_SECTOR_9) && (Address >= ADDR_FLASH_SECTOR_8))
 800133c:	f1a4 6201 	sub.w	r2, r4, #135266304	; 0x8100000
 8001340:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8001344:	d331      	bcc.n	80013aa <flashErase+0xee>
  {
    sector = FLASH_SECTOR_8;
  }
  else if((Address < ADDR_FLASH_SECTOR_10) && (Address >= ADDR_FLASH_SECTOR_9))
 8001346:	f503 026c 	add.w	r2, r3, #15466496	; 0xec0000
 800134a:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 800134e:	d32e      	bcc.n	80013ae <flashErase+0xf2>
  {
    sector = FLASH_SECTOR_9;
  }
  else if((Address < ADDR_FLASH_SECTOR_11) && (Address >= ADDR_FLASH_SECTOR_10))
 8001350:	f503 0368 	add.w	r3, r3, #15204352	; 0xe80000
    sector = FLASH_SECTOR_23;
  }
#else
  else /* (Address < FLASH_END_ADDR) && (Address >= ADDR_FLASH_SECTOR_11) */
  {
    sector = FLASH_SECTOR_11;
 8001354:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001358:	bf34      	ite	cc
 800135a:	230a      	movcc	r3, #10
 800135c:	230b      	movcs	r3, #11
    init.TypeErase      = FLASH_TYPEERASE_SECTORS;
 800135e:	4818      	ldr	r0, [pc, #96]	; (80013c0 <flashErase+0x104>)
 8001360:	2200      	movs	r2, #0
    init.NbSectors      = NbOfSectors; // 지울 페이지 수
 8001362:	2401      	movs	r4, #1
    status = HAL_FLASHEx_Erase(&init, &page_error);
 8001364:	a901      	add	r1, sp, #4
    init.TypeErase      = FLASH_TYPEERASE_SECTORS;
 8001366:	6002      	str	r2, [r0, #0]
    init.VoltageRange   = FLASH_VOLTAGE_RANGE_3; // FLASH_BANK_1;
 8001368:	2202      	movs	r2, #2
    init.Sector 		= FirstSector; // 지우기 시작할 페이지
 800136a:	6083      	str	r3, [r0, #8]
    init.VoltageRange   = FLASH_VOLTAGE_RANGE_3; // FLASH_BANK_1;
 800136c:	6102      	str	r2, [r0, #16]
    init.NbSectors      = NbOfSectors; // 지울 페이지 수
 800136e:	60c4      	str	r4, [r0, #12]
    status = HAL_FLASHEx_Erase(&init, &page_error);
 8001370:	f001 fa88 	bl	8002884 <HAL_FLASHEx_Erase>
 8001374:	4b13      	ldr	r3, [pc, #76]	; (80013c4 <flashErase+0x108>)
 8001376:	7018      	strb	r0, [r3, #0]
    if (status == HAL_OK)
 8001378:	b110      	cbz	r0, 8001380 <flashErase+0xc4>
    ret = HAL_FLASH_OB_Unlock();
 800137a:	1e2c      	subs	r4, r5, #0
 800137c:	bf18      	it	ne
 800137e:	2401      	movne	r4, #1
    HAL_FLASH_Lock();
 8001380:	f001 f988 	bl	8002694 <HAL_FLASH_Lock>
}
 8001384:	4620      	mov	r0, r4
 8001386:	b002      	add	sp, #8
 8001388:	bd70      	pop	{r4, r5, r6, pc}
    sector = FLASH_SECTOR_0;
 800138a:	2300      	movs	r3, #0
 800138c:	e7e7      	b.n	800135e <flashErase+0xa2>
    sector = FLASH_SECTOR_1;
 800138e:	2301      	movs	r3, #1
 8001390:	e7e5      	b.n	800135e <flashErase+0xa2>
    sector = FLASH_SECTOR_2;
 8001392:	2302      	movs	r3, #2
 8001394:	e7e3      	b.n	800135e <flashErase+0xa2>
    sector = FLASH_SECTOR_3;
 8001396:	2303      	movs	r3, #3
 8001398:	e7e1      	b.n	800135e <flashErase+0xa2>
    sector = FLASH_SECTOR_4;
 800139a:	2304      	movs	r3, #4
 800139c:	e7df      	b.n	800135e <flashErase+0xa2>
    sector = FLASH_SECTOR_5;
 800139e:	2305      	movs	r3, #5
 80013a0:	e7dd      	b.n	800135e <flashErase+0xa2>
    sector = FLASH_SECTOR_6;
 80013a2:	2306      	movs	r3, #6
 80013a4:	e7db      	b.n	800135e <flashErase+0xa2>
    sector = FLASH_SECTOR_7;
 80013a6:	2307      	movs	r3, #7
 80013a8:	e7d9      	b.n	800135e <flashErase+0xa2>
    sector = FLASH_SECTOR_8;
 80013aa:	2308      	movs	r3, #8
 80013ac:	e7d7      	b.n	800135e <flashErase+0xa2>
    sector = FLASH_SECTOR_9;
 80013ae:	2309      	movs	r3, #9
 80013b0:	e7d5      	b.n	800135e <flashErase+0xa2>
 80013b2:	bf00      	nop
 80013b4:	20000938 	.word	0x20000938
 80013b8:	40023c00 	.word	0x40023c00
 80013bc:	08009b45 	.word	0x08009b45
 80013c0:	20000924 	.word	0x20000924
 80013c4:	20000958 	.word	0x20000958

080013c8 <flashWrite>:
{
 80013c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (addr%2 != 0)
 80013ca:	f010 0501 	ands.w	r5, r0, #1
{
 80013ce:	4606      	mov	r6, r0
 80013d0:	460c      	mov	r4, r1
 80013d2:	4617      	mov	r7, r2
  if (addr%2 != 0)
 80013d4:	d119      	bne.n	800140a <flashWrite+0x42>
  HAL_FLASH_Unlock();
 80013d6:	3401      	adds	r4, #1
 80013d8:	f001 f94a 	bl	8002670 <HAL_FLASH_Unlock>
  for (int i=0; i<length; i+=2)
 80013dc:	42af      	cmp	r7, r5
 80013de:	d804      	bhi.n	80013ea <flashWrite+0x22>
  bool ret = true;
 80013e0:	2401      	movs	r4, #1
  HAL_FLASH_Lock();
 80013e2:	f001 f957 	bl	8002694 <HAL_FLASH_Lock>
}
 80013e6:	4620      	mov	r0, r4
 80013e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    data |= p_data[i+1] << 8;
 80013ea:	f814 3c01 	ldrb.w	r3, [r4, #-1]
    status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, addr + i, (uint64_t)data);
 80013ee:	1971      	adds	r1, r6, r5
    data |= p_data[i+1] << 8;
 80013f0:	7822      	ldrb	r2, [r4, #0]
    status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, addr + i, (uint64_t)data);
 80013f2:	2001      	movs	r0, #1
 80013f4:	3402      	adds	r4, #2
    data |= p_data[i+1] << 8;
 80013f6:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
    status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, addr + i, (uint64_t)data);
 80013fa:	2300      	movs	r3, #0
 80013fc:	f001 f992 	bl	8002724 <HAL_FLASH_Program>
    if (status != HAL_OK)
 8001400:	b908      	cbnz	r0, 8001406 <flashWrite+0x3e>
  for (int i=0; i<length; i+=2)
 8001402:	3502      	adds	r5, #2
 8001404:	e7ea      	b.n	80013dc <flashWrite+0x14>
      ret = false;
 8001406:	2400      	movs	r4, #0
 8001408:	e7eb      	b.n	80013e2 <flashWrite+0x1a>
    return false;
 800140a:	2400      	movs	r4, #0
 800140c:	e7eb      	b.n	80013e6 <flashWrite+0x1e>
	...

08001410 <cliFlash>:
{
  bool ret = false;



  if (args->argc == 1 && args->isStr(0, "info") == true)
 8001410:	8803      	ldrh	r3, [r0, #0]
 8001412:	2b01      	cmp	r3, #1
{
 8001414:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001418:	4604      	mov	r4, r0
  if (args->argc == 1 && args->isStr(0, "info") == true)
 800141a:	d159      	bne.n	80014d0 <cliFlash+0xc0>
 800141c:	6943      	ldr	r3, [r0, #20]
 800141e:	2000      	movs	r0, #0
 8001420:	4938      	ldr	r1, [pc, #224]	; (8001504 <cliFlash+0xf4>)
 8001422:	4798      	blx	r3
 8001424:	4605      	mov	r5, r0
 8001426:	2800      	cmp	r0, #0
 8001428:	d052      	beq.n	80014d0 <cliFlash+0xc0>
 800142a:	260b      	movs	r6, #11
  {
    for (int i=0; i<FLASH_SECTOR_MAX; i++)
    {
      cliPrintf("0x%X : %dKB\r\n", flash_tbl[i].addr, flash_tbl[i].length/1024);
 800142c:	4f36      	ldr	r7, [pc, #216]	; (8001508 <cliFlash+0xf8>)
 800142e:	2200      	movs	r2, #0
 8001430:	4638      	mov	r0, r7
 8001432:	4611      	mov	r1, r2
 8001434:	f7ff fc6e 	bl	8000d14 <cliPrintf>
    for (int i=0; i<FLASH_SECTOR_MAX; i++)
 8001438:	3e01      	subs	r6, #1
 800143a:	d1f8      	bne.n	800142e <cliFlash+0x1e>
    }

    ret = true;
  }

  if (args->argc == 3 && args->isStr(0, "read") == true)
 800143c:	8823      	ldrh	r3, [r4, #0]
 800143e:	2b03      	cmp	r3, #3
 8001440:	d112      	bne.n	8001468 <cliFlash+0x58>
 8001442:	6963      	ldr	r3, [r4, #20]
 8001444:	2000      	movs	r0, #0
 8001446:	4931      	ldr	r1, [pc, #196]	; (800150c <cliFlash+0xfc>)
 8001448:	4798      	blx	r3
 800144a:	4606      	mov	r6, r0
 800144c:	b160      	cbz	r0, 8001468 <cliFlash+0x58>
  {
    uint32_t addr;
    uint32_t length;

    addr   = (uint32_t)args->getData(1);
 800144e:	68a3      	ldr	r3, [r4, #8]
 8001450:	2001      	movs	r0, #1
 8001452:	4798      	blx	r3
 8001454:	4605      	mov	r5, r0
    length = (uint32_t)args->getData(2);
 8001456:	68a3      	ldr	r3, [r4, #8]
 8001458:	2002      	movs	r0, #2
 800145a:	4798      	blx	r3

    for (int i=0; i<length; i++)
    {
      cliPrintf("0x%X : 0x%X\r\n", addr+i, *((uint8_t *)(addr+i)));
 800145c:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8001538 <cliFlash+0x128>
 8001460:	1947      	adds	r7, r0, r5
    for (int i=0; i<length; i++)
 8001462:	42bd      	cmp	r5, r7
 8001464:	d136      	bne.n	80014d4 <cliFlash+0xc4>
    }

    ret = true;
 8001466:	4635      	mov	r5, r6
  }

  if (args->argc == 3 && args->isStr(0, "erase") == true)
 8001468:	8823      	ldrh	r3, [r4, #0]
 800146a:	2b03      	cmp	r3, #3
 800146c:	d13d      	bne.n	80014ea <cliFlash+0xda>
 800146e:	6963      	ldr	r3, [r4, #20]
 8001470:	2000      	movs	r0, #0
 8001472:	4927      	ldr	r1, [pc, #156]	; (8001510 <cliFlash+0x100>)
 8001474:	4798      	blx	r3
 8001476:	b170      	cbz	r0, 8001496 <cliFlash+0x86>
  {
    uint32_t addr;
    uint32_t length;

    addr   = (uint32_t)args->getData(1);
 8001478:	68a3      	ldr	r3, [r4, #8]
 800147a:	2001      	movs	r0, #1
 800147c:	4798      	blx	r3
 800147e:	4606      	mov	r6, r0
    length = (uint32_t)args->getData(2);
 8001480:	68a3      	ldr	r3, [r4, #8]
 8001482:	2002      	movs	r0, #2
 8001484:	4798      	blx	r3
 8001486:	4601      	mov	r1, r0

    if (flashErase(addr, length) == true)
 8001488:	4630      	mov	r0, r6
 800148a:	f7ff ff17 	bl	80012bc <flashErase>
 800148e:	b340      	cbz	r0, 80014e2 <cliFlash+0xd2>
    {
      cliPrintf("Erase OK\r\n");
 8001490:	4820      	ldr	r0, [pc, #128]	; (8001514 <cliFlash+0x104>)
    }
    else
    {
      cliPrintf("Erase Fail\r\n");
 8001492:	f7ff fc3f 	bl	8000d14 <cliPrintf>
    }
  }

  if (args->argc == 3 && args->isStr(0, "write") == true)
 8001496:	8823      	ldrh	r3, [r4, #0]
 8001498:	2b03      	cmp	r3, #3
 800149a:	d126      	bne.n	80014ea <cliFlash+0xda>
 800149c:	6963      	ldr	r3, [r4, #20]
 800149e:	2000      	movs	r0, #0
 80014a0:	491d      	ldr	r1, [pc, #116]	; (8001518 <cliFlash+0x108>)
 80014a2:	4798      	blx	r3
 80014a4:	b308      	cbz	r0, 80014ea <cliFlash+0xda>
  {
    uint32_t addr;
    uint32_t data;

    addr   = (uint32_t)args->getData(1);
 80014a6:	68a3      	ldr	r3, [r4, #8]
 80014a8:	2001      	movs	r0, #1
 80014aa:	4798      	blx	r3
    data   = (uint32_t)args->getData(2);
 80014ac:	68a3      	ldr	r3, [r4, #8]
    addr   = (uint32_t)args->getData(1);
 80014ae:	4605      	mov	r5, r0
    data   = (uint32_t)args->getData(2);
 80014b0:	2002      	movs	r0, #2
 80014b2:	4798      	blx	r3

    if (flashWrite(addr, (uint8_t *)&data, 4) == true)
 80014b4:	2204      	movs	r2, #4
    data   = (uint32_t)args->getData(2);
 80014b6:	9001      	str	r0, [sp, #4]
    if (flashWrite(addr, (uint8_t *)&data, 4) == true)
 80014b8:	4628      	mov	r0, r5
 80014ba:	eb0d 0102 	add.w	r1, sp, r2
 80014be:	f7ff ff83 	bl	80013c8 <flashWrite>
 80014c2:	b180      	cbz	r0, 80014e6 <cliFlash+0xd6>
    {
      cliPrintf("Write OK\r\n");
 80014c4:	4815      	ldr	r0, [pc, #84]	; (800151c <cliFlash+0x10c>)
  if (ret != true)
  {
    cliPrintf("flash info\r\n");
    cliPrintf("flash read  addr length\r\n");
    cliPrintf("flash erase addr length\r\n");
    cliPrintf("flash write addr data\r\n");
 80014c6:	f7ff fc25 	bl	8000d14 <cliPrintf>
  }
}
 80014ca:	b002      	add	sp, #8
 80014cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  bool ret = false;
 80014d0:	2500      	movs	r5, #0
 80014d2:	e7b3      	b.n	800143c <cliFlash+0x2c>
      cliPrintf("0x%X : 0x%X\r\n", addr+i, *((uint8_t *)(addr+i)));
 80014d4:	782a      	ldrb	r2, [r5, #0]
 80014d6:	4629      	mov	r1, r5
 80014d8:	4640      	mov	r0, r8
 80014da:	3501      	adds	r5, #1
 80014dc:	f7ff fc1a 	bl	8000d14 <cliPrintf>
    for (int i=0; i<length; i++)
 80014e0:	e7bf      	b.n	8001462 <cliFlash+0x52>
      cliPrintf("Erase Fail\r\n");
 80014e2:	480f      	ldr	r0, [pc, #60]	; (8001520 <cliFlash+0x110>)
 80014e4:	e7d5      	b.n	8001492 <cliFlash+0x82>
      cliPrintf("Write Fail\r\n");
 80014e6:	480f      	ldr	r0, [pc, #60]	; (8001524 <cliFlash+0x114>)
 80014e8:	e7ed      	b.n	80014c6 <cliFlash+0xb6>
  if (ret != true)
 80014ea:	2d00      	cmp	r5, #0
 80014ec:	d1ed      	bne.n	80014ca <cliFlash+0xba>
    cliPrintf("flash info\r\n");
 80014ee:	480e      	ldr	r0, [pc, #56]	; (8001528 <cliFlash+0x118>)
 80014f0:	f7ff fc10 	bl	8000d14 <cliPrintf>
    cliPrintf("flash read  addr length\r\n");
 80014f4:	480d      	ldr	r0, [pc, #52]	; (800152c <cliFlash+0x11c>)
 80014f6:	f7ff fc0d 	bl	8000d14 <cliPrintf>
    cliPrintf("flash erase addr length\r\n");
 80014fa:	480d      	ldr	r0, [pc, #52]	; (8001530 <cliFlash+0x120>)
 80014fc:	f7ff fc0a 	bl	8000d14 <cliPrintf>
    cliPrintf("flash write addr data\r\n");
 8001500:	480c      	ldr	r0, [pc, #48]	; (8001534 <cliFlash+0x124>)
 8001502:	e7e0      	b.n	80014c6 <cliFlash+0xb6>
 8001504:	08009b5e 	.word	0x08009b5e
 8001508:	08009b63 	.word	0x08009b63
 800150c:	08009b71 	.word	0x08009b71
 8001510:	08009b84 	.word	0x08009b84
 8001514:	08009b8a 	.word	0x08009b8a
 8001518:	08009ba2 	.word	0x08009ba2
 800151c:	08009ba8 	.word	0x08009ba8
 8001520:	08009b95 	.word	0x08009b95
 8001524:	08009bb3 	.word	0x08009bb3
 8001528:	08009bc0 	.word	0x08009bc0
 800152c:	08009bcd 	.word	0x08009bcd
 8001530:	08009be7 	.word	0x08009be7
 8001534:	08009c01 	.word	0x08009c01
 8001538:	08009b76 	.word	0x08009b76

0800153c <__io_putchar>:


UART_HandleTypeDef huart3;

int __io_putchar(int ch)
{
 800153c:	b507      	push	{r0, r1, r2, lr}
  uartWrite(2, (uint8_t *)&ch, 1);
 800153e:	2201      	movs	r2, #1
{
 8001540:	9001      	str	r0, [sp, #4]
  uartWrite(2, (uint8_t *)&ch, 1);
 8001542:	a901      	add	r1, sp, #4
 8001544:	2002      	movs	r0, #2
 8001546:	f000 f9c5 	bl	80018d4 <uartWrite>
  return 1;
}
 800154a:	2001      	movs	r0, #1
 800154c:	b003      	add	sp, #12
 800154e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001554 <MX_GPIO_Init>:
static void CPU_CACHE_Enable(void);

void SystemClock_config(void);

void MX_GPIO_Init(void)
{
 8001554:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001556:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001558:	2214      	movs	r2, #20
 800155a:	2100      	movs	r1, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800155c:	4f3e      	ldr	r7, [pc, #248]	; (8001658 <MX_GPIO_Init+0x104>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155e:	a807      	add	r0, sp, #28

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001560:	4d3e      	ldr	r5, [pc, #248]	; (800165c <MX_GPIO_Init+0x108>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001562:	f005 f865 	bl	8006630 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001566:	4b3e      	ldr	r3, [pc, #248]	; (8001660 <MX_GPIO_Init+0x10c>)
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001568:	4638      	mov	r0, r7
 800156a:	f244 0181 	movw	r1, #16513	; 0x4081
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800156e:	6b1a      	ldr	r2, [r3, #48]	; 0x30

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2400      	movs	r4, #0
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001572:	2601      	movs	r6, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001574:	f042 0204 	orr.w	r2, r2, #4
 8001578:	631a      	str	r2, [r3, #48]	; 0x30
 800157a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800157c:	f002 0204 	and.w	r2, r2, #4
 8001580:	9201      	str	r2, [sp, #4]
 8001582:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001584:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001586:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800158a:	631a      	str	r2, [r3, #48]	; 0x30
 800158c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800158e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001592:	9202      	str	r2, [sp, #8]
 8001594:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001596:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001598:	f042 0201 	orr.w	r2, r2, #1
 800159c:	631a      	str	r2, [r3, #48]	; 0x30
 800159e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015a0:	f002 0201 	and.w	r2, r2, #1
 80015a4:	9203      	str	r2, [sp, #12]
 80015a6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015aa:	f042 0202 	orr.w	r2, r2, #2
 80015ae:	631a      	str	r2, [r3, #48]	; 0x30
 80015b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015b2:	f002 0202 	and.w	r2, r2, #2
 80015b6:	9204      	str	r2, [sp, #16]
 80015b8:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015bc:	f042 0208 	orr.w	r2, r2, #8
 80015c0:	631a      	str	r2, [r3, #48]	; 0x30
 80015c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015c4:	f002 0208 	and.w	r2, r2, #8
 80015c8:	9205      	str	r2, [sp, #20]
 80015ca:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015d2:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80015d4:	2200      	movs	r2, #0
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015dc:	9306      	str	r3, [sp, #24]
 80015de:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80015e0:	f001 fb28 	bl	8002c34 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80015e4:	4628      	mov	r0, r5
 80015e6:	2200      	movs	r2, #0
 80015e8:	2140      	movs	r1, #64	; 0x40
 80015ea:	f001 fb23 	bl	8002c34 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015f2:	4b1c      	ldr	r3, [pc, #112]	; (8001664 <MX_GPIO_Init+0x110>)
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80015f4:	a907      	add	r1, sp, #28
 80015f6:	481c      	ldr	r0, [pc, #112]	; (8001668 <MX_GPIO_Init+0x114>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015fa:	e9cd 2307 	strd	r2, r3, [sp, #28]
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80015fe:	f001 f991 	bl	8002924 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001602:	f244 0381 	movw	r3, #16513	; 0x4081
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001606:	a907      	add	r1, sp, #28
 8001608:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160a:	e9cd 3607 	strd	r3, r6, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160e:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001612:	f001 f987 	bl	8002924 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001616:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001618:	a907      	add	r1, sp, #28
 800161a:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800161c:	e9cd 3607 	strd	r3, r6, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001620:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001624:	f001 f97e 	bl	8002924 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001628:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800162a:	a907      	add	r1, sp, #28
 800162c:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001630:	e9cd 3407 	strd	r3, r4, [sp, #28]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001634:	f001 f976 	bl	8002924 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001638:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800163c:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800163e:	2003      	movs	r0, #3
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001642:	e9cd 1307 	strd	r1, r3, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001646:	2308      	movs	r3, #8
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001648:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800164a:	e9cd 030a 	strd	r0, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800164e:	4628      	mov	r0, r5
 8001650:	f001 f968 	bl	8002924 <HAL_GPIO_Init>

}
 8001654:	b00d      	add	sp, #52	; 0x34
 8001656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001658:	40020400 	.word	0x40020400
 800165c:	40021800 	.word	0x40021800
 8001660:	40023800 	.word	0x40023800
 8001664:	10110000 	.word	0x10110000
 8001668:	40020800 	.word	0x40020800

0800166c <SystemClock_Config>:

void SystemClock_Config(void)
{
 800166c:	b510      	push	{r4, lr}
 800166e:	b0b8      	sub	sp, #224	; 0xe0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001670:	2234      	movs	r2, #52	; 0x34
 8001672:	2100      	movs	r1, #0
 8001674:	a807      	add	r0, sp, #28
 8001676:	f004 ffdb 	bl	8006630 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800167a:	2214      	movs	r2, #20
 800167c:	2100      	movs	r1, #0
 800167e:	a802      	add	r0, sp, #8
 8001680:	f004 ffd6 	bl	8006630 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001684:	2290      	movs	r2, #144	; 0x90
 8001686:	2100      	movs	r1, #0
 8001688:	a814      	add	r0, sp, #80	; 0x50
 800168a:	f004 ffd1 	bl	8006630 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800168e:	f001 ffb9 	bl	8003604 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001692:	4b25      	ldr	r3, [pc, #148]	; (8001728 <SystemClock_Config+0xbc>)
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001694:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001696:	2004      	movs	r0, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 8001698:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800169a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800169e:	641a      	str	r2, [r3, #64]	; 0x40
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a6:	9300      	str	r3, [sp, #0]
 80016a8:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016aa:	4b20      	ldr	r3, [pc, #128]	; (800172c <SystemClock_Config+0xc0>)
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80016b2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016b4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016be:	9301      	str	r3, [sp, #4]
 80016c0:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80016c2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80016c6:	e9cd 1307 	strd	r1, r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016ca:	2302      	movs	r3, #2
 80016cc:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 216;
 80016d0:	22d8      	movs	r2, #216	; 0xd8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016d2:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80016d4:	2309      	movs	r3, #9
  RCC_OscInitStruct.PLL.PLLN = 216;
 80016d6:	e9cd 020f 	strd	r0, r2, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016da:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80016dc:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016de:	f001 ffd1 	bl	8003684 <HAL_RCC_OscConfig>
 80016e2:	b100      	cbz	r0, 80016e6 <SystemClock_Config+0x7a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016e4:	b672      	cpsid	i
  {
    Error_Handler();
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80016e6:	f001 ff95 	bl	8003614 <HAL_PWREx_EnableOverDrive>
 80016ea:	b100      	cbz	r0, 80016ee <SystemClock_Config+0x82>
 80016ec:	b672      	cpsid	i
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016ee:	2302      	movs	r3, #2
 80016f0:	220f      	movs	r2, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016f2:	2400      	movs	r4, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80016f4:	2107      	movs	r1, #7
 80016f6:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016fc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001700:	e9cd 4304 	strd	r4, r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001708:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800170a:	f002 f9af 	bl	8003a6c <HAL_RCC_ClockConfig>
 800170e:	b100      	cbz	r0, 8001712 <SystemClock_Config+0xa6>
 8001710:	b672      	cpsid	i
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8001712:	4b07      	ldr	r3, [pc, #28]	; (8001730 <SystemClock_Config+0xc4>)
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001714:	a814      	add	r0, sp, #80	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001716:	9427      	str	r4, [sp, #156]	; 0x9c
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8001718:	9314      	str	r3, [sp, #80]	; 0x50
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800171a:	9433      	str	r4, [sp, #204]	; 0xcc
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800171c:	f002 fa6c 	bl	8003bf8 <HAL_RCCEx_PeriphCLKConfig>
 8001720:	b100      	cbz	r0, 8001724 <SystemClock_Config+0xb8>
 8001722:	b672      	cpsid	i
  {
    Error_Handler();
  }
}
 8001724:	b038      	add	sp, #224	; 0xe0
 8001726:	bd10      	pop	{r4, pc}
 8001728:	40023800 	.word	0x40023800
 800172c:	40007000 	.word	0x40007000
 8001730:	00200100 	.word	0x00200100

08001734 <millis>:
{
	HAL_Delay(ms);
}
uint32_t millis(void)
{
	return HAL_GetTick();
 8001734:	f000 bc72 	b.w	800201c <HAL_GetTick>

08001738 <Error_Handler>:
 8001738:	b672      	cpsid	i
}
void Error_Handler(void)
{
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
}
 800173a:	4770      	bx	lr

0800173c <main>:

int main(void)
{
 800173c:	b570      	push	{r4, r5, r6, lr}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800173e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001742:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001746:	4b32      	ldr	r3, [pc, #200]	; (8001810 <main+0xd4>)
 8001748:	2100      	movs	r1, #0
 800174a:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800174e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001752:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001756:	695a      	ldr	r2, [r3, #20]
 8001758:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800175c:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800175e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001762:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001766:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800176a:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 800176e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001772:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001776:	f3c2 00c9 	ubfx	r0, r2, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800177a:	f3c2 324e 	ubfx	r2, r2, #13, #15
 800177e:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001780:	ea02 0604 	and.w	r6, r2, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001784:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001786:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800178a:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800178c:	f8c3 5260 	str.w	r5, [r3, #608]	; 0x260
      } while (ways-- != 0U);
 8001790:	d2f9      	bcs.n	8001786 <main+0x4a>
    } while(sets-- != 0U);
 8001792:	3a20      	subs	r2, #32
 8001794:	f112 0f20 	cmn.w	r2, #32
 8001798:	d1f2      	bne.n	8001780 <main+0x44>
 800179a:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800179e:	695a      	ldr	r2, [r3, #20]
 80017a0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80017a4:	615a      	str	r2, [r3, #20]
 80017a6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80017aa:	f3bf 8f6f 	isb	sy
	uint32_t pre_time;
	uint32_t k=16;

	CPU_CACHE_Enable();

	HAL_Init();
 80017ae:	f000 fc1d 	bl	8001fec <HAL_Init>
	  while(1)
	  {
		  if(millis()-pre_time >= 500)
		  {
			  pre_time = millis();
			  HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 80017b2:	4d18      	ldr	r5, [pc, #96]	; (8001814 <main+0xd8>)
	SystemClock_Config();
 80017b4:	f7ff ff5a 	bl	800166c <SystemClock_Config>
	MX_GPIO_Init();
 80017b8:	f7ff fecc 	bl	8001554 <MX_GPIO_Init>
	uartOpen(1,51200);
 80017bc:	f44f 4148 	mov.w	r1, #51200	; 0xc800
 80017c0:	2001      	movs	r0, #1
 80017c2:	f000 f8bb 	bl	800193c <uartOpen>
	uartOpen(2,115200);
 80017c6:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80017ca:	2002      	movs	r0, #2
 80017cc:	f000 f8b6 	bl	800193c <uartOpen>
	cliInit();
 80017d0:	f7ff fd24 	bl	800121c <cliInit>
	MX_USB_DEVICE_Init();
 80017d4:	f004 fbb2 	bl	8005f3c <MX_USB_DEVICE_Init>
	flashInit();
 80017d8:	f7ff fd64 	bl	80012a4 <flashInit>
	ymodemInit();
 80017dc:	f000 f99a 	bl	8001b14 <ymodemInit>
	cliFlash();
 80017e0:	f7ff fe16 	bl	8001410 <cliFlash>
	 printf("start MCU\r\n");
 80017e4:	480c      	ldr	r0, [pc, #48]	; (8001818 <main+0xdc>)
 80017e6:	f005 f871 	bl	80068cc <puts>
	return HAL_GetTick();
 80017ea:	f000 fc17 	bl	800201c <HAL_GetTick>
 80017ee:	4604      	mov	r4, r0
 80017f0:	f000 fc14 	bl	800201c <HAL_GetTick>
		  if(millis()-pre_time >= 500)
 80017f4:	1b00      	subs	r0, r0, r4
 80017f6:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 80017fa:	d306      	bcc.n	800180a <main+0xce>
	return HAL_GetTick();
 80017fc:	f000 fc0e 	bl	800201c <HAL_GetTick>
			  HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 8001800:	2101      	movs	r1, #1
	return HAL_GetTick();
 8001802:	4604      	mov	r4, r0
			  HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 8001804:	4628      	mov	r0, r5
 8001806:	f001 fa1a 	bl	8002c3e <HAL_GPIO_TogglePin>
		  }

		  cliMain();
 800180a:	f7ff fb03 	bl	8000e14 <cliMain>
	  {
 800180e:	e7ef      	b.n	80017f0 <main+0xb4>
 8001810:	e000ed00 	.word	0xe000ed00
 8001814:	40020400 	.word	0x40020400
 8001818:	08009c19 	.word	0x08009c19

0800181c <qbufferCreate>:

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
  bool ret = true;

  p_node->in    = 0;
 800181c:	2300      	movs	r3, #0
  p_node->out   = 0;
  p_node->len   = length;
  p_node->p_buf = p_buf;
 800181e:	e9c0 2102 	strd	r2, r1, [r0, #8]
  p_node->out   = 0;
 8001822:	e9c0 3300 	strd	r3, r3, [r0]

  return ret;
}
 8001826:	2001      	movs	r0, #1
 8001828:	4770      	bx	lr

0800182a <qbufferRead>:

  return ret;
}

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 800182a:	b570      	push	{r4, r5, r6, lr}
  bool ret = true;

  for (int i=0; i<length; i++)
 800182c:	2400      	movs	r4, #0
 800182e:	42a2      	cmp	r2, r4
 8001830:	d101      	bne.n	8001836 <qbufferRead+0xc>
  bool ret = true;
 8001832:	2001      	movs	r0, #1
      ret = false;
      break;
    }
  }
  return ret;
}
 8001834:	bd70      	pop	{r4, r5, r6, pc}
    if (p_node->p_buf != NULL)
 8001836:	68c3      	ldr	r3, [r0, #12]
 8001838:	b113      	cbz	r3, 8001840 <qbufferRead+0x16>
      p_data[i] = p_node->p_buf[p_node->out];
 800183a:	6845      	ldr	r5, [r0, #4]
 800183c:	5d5b      	ldrb	r3, [r3, r5]
 800183e:	550b      	strb	r3, [r1, r4]
    if (p_node->out != p_node->in)
 8001840:	e9d0 5300 	ldrd	r5, r3, [r0]
 8001844:	42ab      	cmp	r3, r5
 8001846:	d008      	beq.n	800185a <qbufferRead+0x30>
      p_node->out = (p_node->out + 1) % p_node->len;
 8001848:	3301      	adds	r3, #1
 800184a:	6886      	ldr	r6, [r0, #8]
  for (int i=0; i<length; i++)
 800184c:	3401      	adds	r4, #1
      p_node->out = (p_node->out + 1) % p_node->len;
 800184e:	fbb3 f5f6 	udiv	r5, r3, r6
 8001852:	fb06 3315 	mls	r3, r6, r5, r3
 8001856:	6043      	str	r3, [r0, #4]
  for (int i=0; i<length; i++)
 8001858:	e7e9      	b.n	800182e <qbufferRead+0x4>
      ret = false;
 800185a:	2000      	movs	r0, #0
 800185c:	e7ea      	b.n	8001834 <qbufferRead+0xa>

0800185e <qbufferAvailable>:

uint32_t qbufferAvailable(qbuffer_t *p_node)
{
  uint32_t ret;

  ret = (p_node->in - p_node->out) % p_node->len;
 800185e:	e9d0 3200 	ldrd	r3, r2, [r0]
 8001862:	1a9b      	subs	r3, r3, r2
 8001864:	6882      	ldr	r2, [r0, #8]
 8001866:	fbb3 f0f2 	udiv	r0, r3, r2

  return ret;
}
 800186a:	fb02 3010 	mls	r0, r2, r0, r3
 800186e:	4770      	bx	lr

08001870 <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
  uint32_t ret = 0;

  switch(ch)
 8001870:	2801      	cmp	r0, #1
 8001872:	d003      	beq.n	800187c <uartAvailable+0xc>
 8001874:	2802      	cmp	r0, #2
 8001876:	d003      	beq.n	8001880 <uartAvailable+0x10>
     ret = qbufferAvailable(&qbuffer[ch]); //인터럽트 사용시
       break;
  }

  return ret;
}
 8001878:	2000      	movs	r0, #0
 800187a:	4770      	bx	lr
      ret = cdcAvailable();
 800187c:	f004 bba0 	b.w	8005fc0 <cdcAvailable>
     qbuffer[ch].in = (qbuffer[ch].len - hdma_usart3_rx.Instance->NDTR);
 8001880:	4b04      	ldr	r3, [pc, #16]	; (8001894 <uartAvailable+0x24>)
 8001882:	4805      	ldr	r0, [pc, #20]	; (8001898 <uartAvailable+0x28>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	685a      	ldr	r2, [r3, #4]
 8001888:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800188a:	1a9b      	subs	r3, r3, r2
 800188c:	f840 3f20 	str.w	r3, [r0, #32]!
     ret = qbufferAvailable(&qbuffer[ch]); //인터럽트 사용시
 8001890:	f7ff bfe5 	b.w	800185e <qbufferAvailable>
 8001894:	200009e0 	.word	0x200009e0
 8001898:	2000038c 	.word	0x2000038c

0800189c <uartRead>:

uint8_t uartRead(uint8_t ch)
{
  uint8_t ret = 0;
 800189c:	2300      	movs	r3, #0

  switch(ch)
 800189e:	2801      	cmp	r0, #1
{
 80018a0:	b507      	push	{r0, r1, r2, lr}
  uint8_t ret = 0;
 80018a2:	f88d 3007 	strb.w	r3, [sp, #7]
  switch(ch)
 80018a6:	d006      	beq.n	80018b6 <uartRead+0x1a>
 80018a8:	2802      	cmp	r0, #2
 80018aa:	d009      	beq.n	80018c0 <uartRead+0x24>
    case 2:
      qbufferRead(&qbuffer[ch], &ret, 1);
      break;
  }
  return ret;
}
 80018ac:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80018b0:	b003      	add	sp, #12
 80018b2:	f85d fb04 	ldr.w	pc, [sp], #4
      ret = cdcRead();
 80018b6:	f004 fb95 	bl	8005fe4 <cdcRead>
 80018ba:	f88d 0007 	strb.w	r0, [sp, #7]
      break;
 80018be:	e7f5      	b.n	80018ac <uartRead+0x10>
      qbufferRead(&qbuffer[ch], &ret, 1);
 80018c0:	2201      	movs	r2, #1
 80018c2:	f10d 0107 	add.w	r1, sp, #7
 80018c6:	4802      	ldr	r0, [pc, #8]	; (80018d0 <uartRead+0x34>)
 80018c8:	f7ff ffaf 	bl	800182a <qbufferRead>
      break;
 80018cc:	e7ee      	b.n	80018ac <uartRead+0x10>
 80018ce:	bf00      	nop
 80018d0:	200003ac 	.word	0x200003ac

080018d4 <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 80018d4:	4603      	mov	r3, r0
 80018d6:	4608      	mov	r0, r1
  uint32_t ret = 0;
  HAL_StatusTypeDef status;

  switch(ch)
 80018d8:	2b01      	cmp	r3, #1
{
 80018da:	b510      	push	{r4, lr}
 80018dc:	4614      	mov	r4, r2
  switch(ch)
 80018de:	d004      	beq.n	80018ea <uartWrite+0x16>
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d007      	beq.n	80018f4 <uartWrite+0x20>
 80018e4:	2400      	movs	r4, #0

      break;
  }

  return ret;
}
 80018e6:	4620      	mov	r0, r4
 80018e8:	bd10      	pop	{r4, pc}
      ret = cdcWrite(p_data, length);
 80018ea:	4611      	mov	r1, r2
}
 80018ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      ret = cdcWrite(p_data, length);
 80018f0:	f004 bc08 	b.w	8006104 <cdcWrite>
      status = HAL_UART_Transmit(&huart3, p_data, length, 100);
 80018f4:	2364      	movs	r3, #100	; 0x64
 80018f6:	b292      	uxth	r2, r2
 80018f8:	4803      	ldr	r0, [pc, #12]	; (8001908 <uartWrite+0x34>)
 80018fa:	f002 ffb8 	bl	800486e <HAL_UART_Transmit>
      if (status == HAL_OK)
 80018fe:	2800      	cmp	r0, #0
  uint32_t ret = 0;
 8001900:	bf18      	it	ne
 8001902:	2400      	movne	r4, #0
 8001904:	e7ef      	b.n	80018e6 <uartWrite+0x12>
 8001906:	bf00      	nop
 8001908:	2000095c 	.word	0x2000095c

0800190c <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 800190c:	b40e      	push	{r1, r2, r3}
 800190e:	b510      	push	{r4, lr}
 8001910:	b0c3      	sub	sp, #268	; 0x10c
 8001912:	4604      	mov	r4, r0
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
  len = vsnprintf(buf, 256, fmt, args);
 8001914:	f44f 7180 	mov.w	r1, #256	; 0x100
{
 8001918:	ab45      	add	r3, sp, #276	; 0x114
  len = vsnprintf(buf, 256, fmt, args);
 800191a:	a802      	add	r0, sp, #8
{
 800191c:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(args, fmt);
 8001920:	9301      	str	r3, [sp, #4]
  len = vsnprintf(buf, 256, fmt, args);
 8001922:	f005 ff07 	bl	8007734 <vsniprintf>

  ret = uartWrite(ch, (uint8_t *)buf, len);
 8001926:	a902      	add	r1, sp, #8
  len = vsnprintf(buf, 256, fmt, args);
 8001928:	4602      	mov	r2, r0
  ret = uartWrite(ch, (uint8_t *)buf, len);
 800192a:	4620      	mov	r0, r4
 800192c:	f7ff ffd2 	bl	80018d4 <uartWrite>

  va_end(args);


  return ret;
}
 8001930:	b043      	add	sp, #268	; 0x10c
 8001932:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001936:	b003      	add	sp, #12
 8001938:	4770      	bx	lr
	...

0800193c <uartOpen>:
bool uartOpen(uint8_t ch, uint32_t baud)
{
  bool ret = false;


  switch(ch)
 800193c:	2801      	cmp	r0, #1
{
 800193e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  switch(ch)
 8001940:	d048      	beq.n	80019d4 <uartOpen+0x98>
 8001942:	2802      	cmp	r0, #2
 8001944:	d131      	bne.n	80019aa <uartOpen+0x6e>
		  ret = true;
		  break;
		 // cliOpen(1,51200);

	  case 2:
		  huart3.Instance = USART3;
 8001946:	4d25      	ldr	r5, [pc, #148]	; (80019dc <uartOpen+0xa0>)
		  huart3.Init.BaudRate = 115200;
		  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001948:	2600      	movs	r6, #0
		  huart3.Init.BaudRate = 115200;
 800194a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
		  huart3.Init.StopBits = UART_STOPBITS_1;
		  huart3.Init.Parity = UART_PARITY_NONE;
		  huart3.Init.Mode = UART_MODE_TX_RX;
 800194e:	240c      	movs	r4, #12
		  huart3.Init.BaudRate = 115200;
 8001950:	4a23      	ldr	r2, [pc, #140]	; (80019e0 <uartOpen+0xa4>)
		  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
		  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
		  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
		  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;

		  HAL_UART_DeInit(&huart3);
 8001952:	4628      	mov	r0, r5
		  huart3.Init.Parity = UART_PARITY_NONE;
 8001954:	612e      	str	r6, [r5, #16]
		  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001956:	626e      	str	r6, [r5, #36]	; 0x24
		  huart3.Init.BaudRate = 115200;
 8001958:	e9c5 2300 	strd	r2, r3, [r5]
		  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800195c:	e9c5 4605 	strd	r4, r6, [r5, #20]
		  huart3.Init.StopBits = UART_STOPBITS_1;
 8001960:	e9c5 6602 	strd	r6, r6, [r5, #8]
		  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001964:	e9c5 6607 	strd	r6, r6, [r5, #28]
		  HAL_UART_DeInit(&huart3);
 8001968:	f002 fc08 	bl	800417c <HAL_UART_DeInit>

		  qbufferCreate(&qbuffer[2], &rx_buf[0], 256);
 800196c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001970:	491c      	ldr	r1, [pc, #112]	; (80019e4 <uartOpen+0xa8>)
 8001972:	481d      	ldr	r0, [pc, #116]	; (80019e8 <uartOpen+0xac>)
 8001974:	f7ff ff52 	bl	800181c <qbufferCreate>

		   __HAL_RCC_DMA1_CLK_ENABLE();
 8001978:	4b1c      	ldr	r3, [pc, #112]	; (80019ec <uartOpen+0xb0>)
		   HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800197a:	4631      	mov	r1, r6
 800197c:	4620      	mov	r0, r4
		   __HAL_RCC_DMA1_CLK_ENABLE();
 800197e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001980:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001984:	631a      	str	r2, [r3, #48]	; 0x30
		   HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001986:	4632      	mov	r2, r6
		   __HAL_RCC_DMA1_CLK_ENABLE();
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800198e:	9301      	str	r3, [sp, #4]
 8001990:	9b01      	ldr	r3, [sp, #4]
		   HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001992:	f000 fb6d 	bl	8002070 <HAL_NVIC_SetPriority>
		   HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001996:	4620      	mov	r0, r4
 8001998:	f000 fb9c 	bl	80020d4 <HAL_NVIC_EnableIRQ>

		  if (HAL_UART_Init(&huart3) != HAL_OK)
 800199c:	4628      	mov	r0, r5
 800199e:	f002 fff3 	bl	8004988 <HAL_UART_Init>
 80019a2:	4604      	mov	r4, r0
 80019a4:	b118      	cbz	r0, 80019ae <uartOpen+0x72>
		  {
			Error_Handler();
 80019a6:	f7ff fec7 	bl	8001738 <Error_Handler>
  bool ret = false;
 80019aa:	2000      	movs	r0, #0
 80019ac:	e012      	b.n	80019d4 <uartOpen+0x98>
		  else
		  {
			  ret = true;
			  is_open[ch]=true;
			//if(HAL_UART_Receive_IT(&huart3, (uint8_t *)&rx_data, 1) != HAL_OK)
			   if(HAL_UART_Receive_DMA(&huart3, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 80019ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019b2:	490c      	ldr	r1, [pc, #48]	; (80019e4 <uartOpen+0xa8>)
 80019b4:	4628      	mov	r0, r5
 80019b6:	f003 f851 	bl	8004a5c <HAL_UART_Receive_DMA>
 80019ba:	b168      	cbz	r0, 80019d8 <uartOpen+0x9c>
			  {
				  printf("HAL_ERROR\r\n");
 80019bc:	480c      	ldr	r0, [pc, #48]	; (80019f0 <uartOpen+0xb4>)
 80019be:	f004 ff85 	bl	80068cc <puts>
				  ret = false;
 80019c2:	4620      	mov	r0, r4
			  }
				qbuffer[ch].in  = qbuffer[2].len - hdma_usart3_rx.Instance->NDTR;
 80019c4:	4b0b      	ldr	r3, [pc, #44]	; (80019f4 <uartOpen+0xb8>)
 80019c6:	4a0c      	ldr	r2, [pc, #48]	; (80019f8 <uartOpen+0xbc>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	6859      	ldr	r1, [r3, #4]
 80019cc:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80019ce:	1a5b      	subs	r3, r3, r1
				qbuffer[ch].out = qbuffer[2].in;
 80019d0:	e9c2 3308 	strd	r3, r3, [r2, #32]

		 // cliOpen(2,115200);
	break;
	 }
    return ret;
}
 80019d4:	b002      	add	sp, #8
 80019d6:	bd70      	pop	{r4, r5, r6, pc}
			  ret = true;
 80019d8:	2001      	movs	r0, #1
 80019da:	e7f3      	b.n	80019c4 <uartOpen+0x88>
 80019dc:	2000095c 	.word	0x2000095c
 80019e0:	40004800 	.word	0x40004800
 80019e4:	200003cc 	.word	0x200003cc
 80019e8:	200003ac 	.word	0x200003ac
 80019ec:	40023800 	.word	0x40023800
 80019f0:	08009c24 	.word	0x08009c24
 80019f4:	200009e0 	.word	0x200009e0
 80019f8:	2000038c 	.word	0x2000038c

080019fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019fc:	b570      	push	{r4, r5, r6, lr}
 80019fe:	b088      	sub	sp, #32
 8001a00:	4606      	mov	r6, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a02:	2214      	movs	r2, #20
 8001a04:	2100      	movs	r1, #0
 8001a06:	a803      	add	r0, sp, #12
 8001a08:	f004 fe12 	bl	8006630 <memset>
  if(uartHandle->Instance==USART3)
 8001a0c:	6832      	ldr	r2, [r6, #0]
 8001a0e:	4b25      	ldr	r3, [pc, #148]	; (8001aa4 <HAL_UART_MspInit+0xa8>)
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d144      	bne.n	8001a9e <HAL_UART_MspInit+0xa2>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a14:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a18:	2500      	movs	r5, #0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a1a:	a903      	add	r1, sp, #12
 8001a1c:	4822      	ldr	r0, [pc, #136]	; (8001aa8 <HAL_UART_MspInit+0xac>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001a20:	4c22      	ldr	r4, [pc, #136]	; (8001aac <HAL_UART_MspInit+0xb0>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a22:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001a26:	641a      	str	r2, [r3, #64]	; 0x40
 8001a28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a2a:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8001a2e:	9201      	str	r2, [sp, #4]
 8001a30:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a34:	f042 0208 	orr.w	r2, r2, #8
 8001a38:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3a:	f44f 7240 	mov.w	r2, #768	; 0x300
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a40:	f003 0308 	and.w	r3, r3, #8
 8001a44:	9302      	str	r3, [sp, #8]
 8001a46:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e9cd 5305 	strd	r5, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a54:	2307      	movs	r3, #7
 8001a56:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a58:	f000 ff64 	bl	8002924 <HAL_GPIO_Init>
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001a5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001a60:	4913      	ldr	r1, [pc, #76]	; (8001ab0 <HAL_UART_MspInit+0xb4>)
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001a62:	4620      	mov	r0, r4
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a64:	61a5      	str	r5, [r4, #24]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a66:	6265      	str	r5, [r4, #36]	; 0x24
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001a68:	e9c4 1300 	strd	r1, r3, [r4]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a70:	e9c4 3504 	strd	r3, r5, [r4, #16]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001a74:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a78:	e9c4 5502 	strd	r5, r5, [r4, #8]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a7c:	e9c4 3507 	strd	r3, r5, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001a80:	f000 fb76 	bl	8002170 <HAL_DMA_Init>
 8001a84:	b108      	cbz	r0, 8001a8a <HAL_UART_MspInit+0x8e>
    {
      Error_Handler();
 8001a86:	f7ff fe57 	bl	8001738 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2027      	movs	r0, #39	; 0x27
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8001a8e:	6734      	str	r4, [r6, #112]	; 0x70
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001a90:	4611      	mov	r1, r2
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8001a92:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001a94:	f000 faec 	bl	8002070 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001a98:	2027      	movs	r0, #39	; 0x27
 8001a9a:	f000 fb1b 	bl	80020d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001a9e:	b008      	add	sp, #32
 8001aa0:	bd70      	pop	{r4, r5, r6, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40004800 	.word	0x40004800
 8001aa8:	40020c00 	.word	0x40020c00
 8001aac:	200009e0 	.word	0x200009e0
 8001ab0:	40026028 	.word	0x40026028

08001ab4 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{

  if(uartHandle->Instance==USART3)
 8001ab4:	6802      	ldr	r2, [r0, #0]
 8001ab6:	4b0c      	ldr	r3, [pc, #48]	; (8001ae8 <HAL_UART_MspDeInit+0x34>)
 8001ab8:	429a      	cmp	r2, r3
{
 8001aba:	b510      	push	{r4, lr}
 8001abc:	4604      	mov	r4, r0
  if(uartHandle->Instance==USART3)
 8001abe:	d111      	bne.n	8001ae4 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART3_MspDeInit 0 */

  /* USER CODE END USART3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART3_CLK_DISABLE();
 8001ac0:	4a0a      	ldr	r2, [pc, #40]	; (8001aec <HAL_UART_MspDeInit+0x38>)

    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    HAL_GPIO_DeInit(GPIOD, STLK_RX_Pin|STLK_TX_Pin);
 8001ac2:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001ac6:	480a      	ldr	r0, [pc, #40]	; (8001af0 <HAL_UART_MspDeInit+0x3c>)
    __HAL_RCC_USART3_CLK_DISABLE();
 8001ac8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001aca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ace:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOD, STLK_RX_Pin|STLK_TX_Pin);
 8001ad0:	f001 f80e 	bl	8002af0 <HAL_GPIO_DeInit>

    /* USART3 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8001ad4:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8001ad6:	f000 fbcb 	bl	8002270 <HAL_DMA_DeInit>

    /* USART3 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 8001ada:	2027      	movs	r0, #39	; 0x27
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }
}
 8001adc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 8001ae0:	f000 bb06 	b.w	80020f0 <HAL_NVIC_DisableIRQ>
}
 8001ae4:	bd10      	pop	{r4, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40004800 	.word	0x40004800
 8001aec:	40023800 	.word	0x40023800
 8001af0:	40020c00 	.word	0x40020c00

08001af4 <HAL_UART_ErrorCallback>:


void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
  if (huart->Instance == USART3)
 8001af4:	6802      	ldr	r2, [r0, #0]
 8001af6:	4b04      	ldr	r3, [pc, #16]	; (8001b08 <HAL_UART_ErrorCallback+0x14>)
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d104      	bne.n	8001b06 <HAL_UART_ErrorCallback+0x12>
  {
	  HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8001afc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b00:	4802      	ldr	r0, [pc, #8]	; (8001b0c <HAL_UART_ErrorCallback+0x18>)
 8001b02:	f001 b89c 	b.w	8002c3e <HAL_GPIO_TogglePin>
  }
}
 8001b06:	4770      	bx	lr
 8001b08:	40004800 	.word	0x40004800
 8001b0c:	40020400 	.word	0x40020400

08001b10 <HAL_UART_RxCpltCallback>:
	HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
    HAL_UART_Receive_IT(&huart3, (uint8_t *)&rx_data, 1);
    qbufferWrite(&qbuffer, &rx_data, 1);
  }
#endif
}
 8001b10:	4770      	bx	lr
	...

08001b14 <ymodemInit>:


bool ymodemInit(void)
{
#ifdef _USE_HW_CLI
  cliAdd("ymodem", cliYmodem);
 8001b14:	4903      	ldr	r1, [pc, #12]	; (8001b24 <ymodemInit+0x10>)
 8001b16:	4804      	ldr	r0, [pc, #16]	; (8001b28 <ymodemInit+0x14>)
{
 8001b18:	b508      	push	{r3, lr}
  cliAdd("ymodem", cliYmodem);
 8001b1a:	f7ff fb5f 	bl	80011dc <cliAdd>
#endif

  return true;
}
 8001b1e:	2001      	movs	r0, #1
 8001b20:	bd08      	pop	{r3, pc}
 8001b22:	bf00      	nop
 8001b24:	08001f75 	.word	0x08001f75
 8001b28:	08009c2f 	.word	0x08009c2f

08001b2c <ymodemOpen>:

bool ymodemOpen(ymodem_t *p_modem, uint8_t ch)
{
 8001b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  bool ret = true;

  p_modem->ch = ch;
  p_modem->is_init = true;

  p_modem->state           = YMODEM_STATE_WAIT_HEAD;
 8001b2e:	2500      	movs	r5, #0
  p_modem->rx_packet.state = YMODEM_PACKET_WAIT_FIRST;
  p_modem->file_buf        = &p_modem->rx_packet.buffer[3];
 8001b30:	f100 07c5 	add.w	r7, r0, #197	; 0xc5
  p_modem->is_init = true;
 8001b34:	2601      	movs	r6, #1
  p_modem->ch = ch;
 8001b36:	7001      	strb	r1, [r0, #0]
  p_modem->state           = YMODEM_STATE_WAIT_HEAD;
 8001b38:	7285      	strb	r5, [r0, #10]
{
 8001b3a:	4604      	mov	r4, r0
  p_modem->is_init = true;
 8001b3c:	7046      	strb	r6, [r0, #1]
  p_modem->rx_packet.state = YMODEM_PACKET_WAIT_FIRST;
 8001b3e:	f880 50b0 	strb.w	r5, [r0, #176]	; 0xb0
  p_modem->file_buf        = &p_modem->rx_packet.buffer[3];
 8001b42:	f8c0 70a8 	str.w	r7, [r0, #168]	; 0xa8
  p_modem->file_buf_length = 0;
 8001b46:	f8a0 50ac 	strh.w	r5, [r0, #172]	; 0xac
  p_modem->pre_time        = millis();
 8001b4a:	f7ff fdf3 	bl	8001734 <millis>
  p_modem->start_time      = 3000;
 8001b4e:	f640 33b8 	movw	r3, #3000	; 0xbb8
  p_modem->pre_time        = millis();
 8001b52:	60e0      	str	r0, [r4, #12]
  p_modem->ack_mode        = 0;

  p_modem->rx_packet.data = &p_modem->rx_packet.buffer[3];

  return ret;
}
 8001b54:	4630      	mov	r0, r6
  p_modem->start_time      = 3000;
 8001b56:	6123      	str	r3, [r4, #16]
  p_modem->ack_mode        = 0;
 8001b58:	7665      	strb	r5, [r4, #25]
  p_modem->rx_packet.data = &p_modem->rx_packet.buffer[3];
 8001b5a:	f8c4 70b8 	str.w	r7, [r4, #184]	; 0xb8
}
 8001b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001b60 <ymodemPutch>:

bool ymodemPutch(ymodem_t *p_modem, uint8_t data)
{
 8001b60:	b507      	push	{r0, r1, r2, lr}
  bool ret = true;

  ret = uartWrite(p_modem->ch, &data, 1);
 8001b62:	2201      	movs	r2, #1
{
 8001b64:	f88d 1007 	strb.w	r1, [sp, #7]
  ret = uartWrite(p_modem->ch, &data, 1);
 8001b68:	7800      	ldrb	r0, [r0, #0]
 8001b6a:	f10d 0107 	add.w	r1, sp, #7
 8001b6e:	f7ff feb1 	bl	80018d4 <uartWrite>

  return ret;
}
 8001b72:	3800      	subs	r0, #0
 8001b74:	bf18      	it	ne
 8001b76:	2001      	movne	r0, #1
 8001b78:	b003      	add	sp, #12
 8001b7a:	f85d fb04 	ldr.w	pc, [sp], #4

08001b7e <ymodemGetFileInfo>:

bool ymodemGetFileInfo(ymodem_t *p_modem)
{
 8001b7e:	b538      	push	{r3, r4, r5, lr}
  uint16_t size_i;

  valid = false;
  for (int i=0; i<128; i++)
  {
    p_modem->file_name[i] = p_modem->rx_packet.data[i];
 8001b80:	f8d0 10b8 	ldr.w	r1, [r0, #184]	; 0xb8
{
 8001b84:	4604      	mov	r4, r0
 8001b86:	f100 021a 	add.w	r2, r0, #26
  for (int i=0; i<128; i++)
 8001b8a:	2300      	movs	r3, #0
    p_modem->file_name[i] = p_modem->rx_packet.data[i];
 8001b8c:	5cc8      	ldrb	r0, [r1, r3]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	f802 0b01 	strb.w	r0, [r2], #1
    if (p_modem->file_name[i] == 0x00)
 8001b94:	b998      	cbnz	r0, 8001bbe <ymodemGetFileInfo+0x40>
    {
      size_i = i + 1;
 8001b96:	b29b      	uxth	r3, r3
    }
  }

  if (valid == true)
  {
    for (int i=size_i; i<128; i++)
 8001b98:	461a      	mov	r2, r3
 8001b9a:	2a7f      	cmp	r2, #127	; 0x7f
 8001b9c:	dc05      	bgt.n	8001baa <ymodemGetFileInfo+0x2c>
    {
      if (p_modem->rx_packet.data[i] == 0x20)
 8001b9e:	5c8d      	ldrb	r5, [r1, r2]
 8001ba0:	1888      	adds	r0, r1, r2
 8001ba2:	2d20      	cmp	r5, #32
 8001ba4:	d10f      	bne.n	8001bc6 <ymodemGetFileInfo+0x48>
      {
        p_modem->rx_packet.data[i] = 0x00;
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	7002      	strb	r2, [r0, #0]
        break;
      }
    }

    p_modem->file_length = (uint32_t)strtoul((const char * )&p_modem->rx_packet.data[size_i], (char **)NULL, (int) 0);
 8001baa:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 8001bae:	2200      	movs	r2, #0
 8001bb0:	4418      	add	r0, r3
 8001bb2:	4611      	mov	r1, r2
 8001bb4:	f005 fd88 	bl	80076c8 <strtoul>
 8001bb8:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
 8001bbc:	e001      	b.n	8001bc2 <ymodemGetFileInfo+0x44>
  for (int i=0; i<128; i++)
 8001bbe:	2b80      	cmp	r3, #128	; 0x80
 8001bc0:	d1e4      	bne.n	8001b8c <ymodemGetFileInfo+0xe>
  }

  return ret;
}
 8001bc2:	2001      	movs	r0, #1
 8001bc4:	bd38      	pop	{r3, r4, r5, pc}
    for (int i=size_i; i<128; i++)
 8001bc6:	3201      	adds	r2, #1
 8001bc8:	e7e7      	b.n	8001b9a <ymodemGetFileInfo+0x1c>

08001bca <crc_update>:

#define CRC_POLY 0x1021

uint16_t crc_update(uint16_t crc_in, int incr)
{
  uint16_t xor = crc_in >> 15;
 8001bca:	0bc3      	lsrs	r3, r0, #15
  uint16_t out = crc_in << 1;
 8001bcc:	0040      	lsls	r0, r0, #1
 8001bce:	b280      	uxth	r0, r0

  if (incr)
 8001bd0:	b109      	cbz	r1, 8001bd6 <crc_update+0xc>
  {
    out++;
 8001bd2:	3001      	adds	r0, #1
 8001bd4:	b280      	uxth	r0, r0
  }

  if (xor)
 8001bd6:	b11b      	cbz	r3, 8001be0 <crc_update+0x16>
  {
    out ^= CRC_POLY;
 8001bd8:	f480 5081 	eor.w	r0, r0, #4128	; 0x1020
 8001bdc:	f080 0001 	eor.w	r0, r0, #1
  }

  return out;
}
 8001be0:	4770      	bx	lr
	...

08001be4 <ymodemReceive>:
{
 8001be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (p_modem->is_init != true)
 8001be8:	7845      	ldrb	r5, [r0, #1]
{
 8001bea:	4604      	mov	r4, r0
  if (p_modem->is_init != true)
 8001bec:	b92d      	cbnz	r5, 8001bfa <ymodemReceive+0x16>
    p_modem->type = YMODEM_TYPE_ERROR;
 8001bee:	2304      	movs	r3, #4
    return true;
 8001bf0:	2501      	movs	r5, #1
    p_modem->type = YMODEM_TYPE_ERROR;
 8001bf2:	7203      	strb	r3, [r0, #8]
}
 8001bf4:	4628      	mov	r0, r5
 8001bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (uartAvailable(p_modem->ch) > 0)
 8001bfa:	7800      	ldrb	r0, [r0, #0]
 8001bfc:	f7ff fe38 	bl	8001870 <uartAvailable>
 8001c00:	b908      	cbnz	r0, 8001c06 <ymodemReceive+0x22>
  bool ret = false;
 8001c02:	2500      	movs	r5, #0
 8001c04:	e04e      	b.n	8001ca4 <ymodemReceive+0xc0>
    p_modem->rx_data = uartRead(p_modem->ch);
 8001c06:	7820      	ldrb	r0, [r4, #0]
 8001c08:	f7ff fe48 	bl	800189c <uartRead>
 8001c0c:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
 8001c10:	7260      	strb	r0, [r4, #9]
  switch(p_packet->state)
 8001c12:	2b05      	cmp	r3, #5
 8001c14:	d8f5      	bhi.n	8001c02 <ymodemReceive+0x1e>
 8001c16:	e8df f003 	tbb	[pc, r3]
 8001c1a:	3103      	.short	0x3103
 8001c1c:	6e695835 	.word	0x6e695835
      if (data_in == YMODEM_SOH)
 8001c20:	2801      	cmp	r0, #1
 8001c22:	d107      	bne.n	8001c34 <ymodemReceive+0x50>
        p_packet->length = 128;
 8001c24:	2380      	movs	r3, #128	; 0x80
        p_packet->stx = data_in;
 8001c26:	f884 00b4 	strb.w	r0, [r4, #180]	; 0xb4
        p_packet->state = YMODEM_PACKET_WAIT_SEQ1;
 8001c2a:	f884 00b0 	strb.w	r0, [r4, #176]	; 0xb0
        p_packet->length = 128;
 8001c2e:	f8a4 30bc 	strh.w	r3, [r4, #188]	; 0xbc
      if (data_in == YMODEM_CAN)
 8001c32:	e7e6      	b.n	8001c02 <ymodemReceive+0x1e>
      if (data_in == YMODEM_STX)
 8001c34:	2802      	cmp	r0, #2
 8001c36:	d017      	beq.n	8001c68 <ymodemReceive+0x84>
      if (data_in == YMODEM_EOT)
 8001c38:	2804      	cmp	r0, #4
 8001c3a:	d001      	beq.n	8001c40 <ymodemReceive+0x5c>
      if (data_in == YMODEM_CAN)
 8001c3c:	2818      	cmp	r0, #24
 8001c3e:	d1e0      	bne.n	8001c02 <ymodemReceive+0x1e>
        p_packet->stx = data_in;
 8001c40:	f884 00b4 	strb.w	r0, [r4, #180]	; 0xb4
    if (p_modem->state != YMODEM_STATE_WAIT_HEAD)
 8001c44:	7aa3      	ldrb	r3, [r4, #10]
 8001c46:	f894 20b4 	ldrb.w	r2, [r4, #180]	; 0xb4
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f000 8092 	beq.w	8001d74 <ymodemReceive+0x190>
      if (p_modem->rx_packet.stx == YMODEM_CAN)
 8001c50:	2a18      	cmp	r2, #24
 8001c52:	d17e      	bne.n	8001d52 <ymodemReceive+0x16e>
        p_modem->state = YMODEM_STATE_WAIT_CANCEL;
 8001c54:	2305      	movs	r3, #5
 8001c56:	72a3      	strb	r3, [r4, #10]
    	  ymodemPutch(p_modem, YMODEM_ACK); //
 8001c58:	2106      	movs	r1, #6
 8001c5a:	4620      	mov	r0, r4
 8001c5c:	f7ff ff80 	bl	8001b60 <ymodemPutch>
        p_modem->state = YMODEM_STATE_WAIT_HEAD;
 8001c60:	2300      	movs	r3, #0
 8001c62:	72a3      	strb	r3, [r4, #10]
        p_modem->type = YMODEM_TYPE_CANCEL;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e0db      	b.n	8001e20 <ymodemReceive+0x23c>
        p_packet->length = 1024;
 8001c68:	f44f 6380 	mov.w	r3, #1024	; 0x400
        p_packet->stx = data_in;
 8001c6c:	f884 00b4 	strb.w	r0, [r4, #180]	; 0xb4
        p_packet->length = 1024;
 8001c70:	f8a4 30bc 	strh.w	r3, [r4, #188]	; 0xbc
        p_packet->state = YMODEM_PACKET_WAIT_SEQ1;
 8001c74:	2301      	movs	r3, #1
        p_packet->state = YMODEM_PACKET_WAIT_CRCH;
 8001c76:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
 8001c7a:	e7c2      	b.n	8001c02 <ymodemReceive+0x1e>
      p_packet->state = YMODEM_PACKET_WAIT_SEQ2;
 8001c7c:	2302      	movs	r3, #2
      p_packet->seq[0] = data_in;
 8001c7e:	f884 00b5 	strb.w	r0, [r4, #181]	; 0xb5
      p_packet->state = YMODEM_PACKET_WAIT_SEQ2;
 8001c82:	e7f8      	b.n	8001c76 <ymodemReceive+0x92>
      p_packet->seq[1] = data_in;
 8001c84:	f884 00b6 	strb.w	r0, [r4, #182]	; 0xb6
      if (p_packet->seq[0] == (uint8_t)(~data_in))
 8001c88:	43c0      	mvns	r0, r0
 8001c8a:	f894 30b5 	ldrb.w	r3, [r4, #181]	; 0xb5
 8001c8e:	2500      	movs	r5, #0
 8001c90:	b2c0      	uxtb	r0, r0
 8001c92:	4283      	cmp	r3, r0
        p_packet->state = YMODEM_PACKET_WAIT_DATA;
 8001c94:	bf05      	ittet	eq
 8001c96:	2303      	moveq	r3, #3
        p_packet->index = 0;
 8001c98:	f8a4 50b2 	strheq.w	r5, [r4, #178]	; 0xb2
        p_packet->state = YMODEM_PACKET_WAIT_FIRST;
 8001c9c:	f884 50b0 	strbne.w	r5, [r4, #176]	; 0xb0
        p_packet->state = YMODEM_PACKET_WAIT_DATA;
 8001ca0:	f884 30b0 	strbeq.w	r3, [r4, #176]	; 0xb0
    if (p_modem->rx_packet.state == YMODEM_PACKET_WAIT_FIRST)
 8001ca4:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d1a3      	bne.n	8001bf4 <ymodemReceive+0x10>
      if (millis()-p_modem->pre_time >= p_modem->start_time)
 8001cac:	f7ff fd42 	bl	8001734 <millis>
 8001cb0:	68e3      	ldr	r3, [r4, #12]
 8001cb2:	1ac0      	subs	r0, r0, r3
 8001cb4:	6923      	ldr	r3, [r4, #16]
 8001cb6:	4298      	cmp	r0, r3
 8001cb8:	d39c      	bcc.n	8001bf4 <ymodemReceive+0x10>
        p_modem->pre_time = millis();
 8001cba:	f7ff fd3b 	bl	8001734 <millis>
        ymodemPutch(p_modem, YMODEM_C);
 8001cbe:	2143      	movs	r1, #67	; 0x43
        p_modem->pre_time = millis();
 8001cc0:	60e0      	str	r0, [r4, #12]
        ymodemPutch(p_modem, YMODEM_C);
 8001cc2:	4620      	mov	r0, r4
 8001cc4:	f7ff ff4c 	bl	8001b60 <ymodemPutch>
 8001cc8:	e794      	b.n	8001bf4 <ymodemReceive+0x10>
      p_packet->data[p_packet->index] = data_in;
 8001cca:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 8001cce:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
 8001cd2:	54d0      	strb	r0, [r2, r3]
      p_packet->index++;
 8001cd4:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
      if (p_packet->index >= p_packet->length)
 8001cd8:	f8b4 20bc 	ldrh.w	r2, [r4, #188]	; 0xbc
      p_packet->index++;
 8001cdc:	3301      	adds	r3, #1
 8001cde:	b29b      	uxth	r3, r3
      if (p_packet->index >= p_packet->length)
 8001ce0:	429a      	cmp	r2, r3
      p_packet->index++;
 8001ce2:	f8a4 30b2 	strh.w	r3, [r4, #178]	; 0xb2
      if (p_packet->index >= p_packet->length)
 8001ce6:	d88c      	bhi.n	8001c02 <ymodemReceive+0x1e>
        p_packet->state = YMODEM_PACKET_WAIT_CRCH;
 8001ce8:	2304      	movs	r3, #4
 8001cea:	e7c4      	b.n	8001c76 <ymodemReceive+0x92>
      p_packet->crc_recv = (data_in<<8);
 8001cec:	0200      	lsls	r0, r0, #8
      p_packet->state = YMODEM_PACKET_WAIT_CRCL;
 8001cee:	2305      	movs	r3, #5
      p_packet->crc_recv = (data_in<<8);
 8001cf0:	f8a4 00c0 	strh.w	r0, [r4, #192]	; 0xc0
      p_packet->state = YMODEM_PACKET_WAIT_CRCL;
 8001cf4:	e7bf      	b.n	8001c76 <ymodemReceive+0x92>
      p_packet->crc_recv |= (data_in<<0);
 8001cf6:	f8b4 20c0 	ldrh.w	r2, [r4, #192]	; 0xc0
 8001cfa:	f8d4 70b8 	ldr.w	r7, [r4, #184]	; 0xb8
 8001cfe:	4302      	orrs	r2, r0
      p_packet->crc = crc16(p_packet->data, p_packet->length);
 8001d00:	f8b4 60bc 	ldrh.w	r6, [r4, #188]	; 0xbc
      p_packet->state = YMODEM_PACKET_WAIT_FIRST;
 8001d04:	2000      	movs	r0, #0
 8001d06:	3f01      	subs	r7, #1
      p_packet->crc_recv |= (data_in<<0);
 8001d08:	f8a4 20c0 	strh.w	r2, [r4, #192]	; 0xc0
      p_packet->state = YMODEM_PACKET_WAIT_FIRST;
 8001d0c:	f884 00b0 	strb.w	r0, [r4, #176]	; 0xb0

uint16_t crc16(uint8_t *data, uint16_t size)
{
  uint16_t crc, i;

  for (crc = 0; size > 0; size--, data++)
 8001d10:	b96e      	cbnz	r6, 8001d2e <ymodemReceive+0x14a>
 8001d12:	2610      	movs	r6, #16
    }
  }

  for (i = 0; i < 16; i++)
  {
    crc = crc_update(crc, 0);
 8001d14:	3e01      	subs	r6, #1
 8001d16:	2100      	movs	r1, #0
 8001d18:	f7ff ff57 	bl	8001bca <crc_update>
  for (i = 0; i < 16; i++)
 8001d1c:	b2b6      	uxth	r6, r6
 8001d1e:	2e00      	cmp	r6, #0
 8001d20:	d1f8      	bne.n	8001d14 <ymodemReceive+0x130>
      if (p_packet->crc == p_packet->crc_recv)
 8001d22:	4282      	cmp	r2, r0
      p_packet->crc = crc16(p_packet->data, p_packet->length);
 8001d24:	f8a4 00be 	strh.w	r0, [r4, #190]	; 0xbe
      if (p_packet->crc == p_packet->crc_recv)
 8001d28:	f47f af6b 	bne.w	8001c02 <ymodemReceive+0x1e>
 8001d2c:	e78a      	b.n	8001c44 <ymodemReceive+0x60>
      crc = crc_update(crc, *data & i);
 8001d2e:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8001d32:	f04f 0808 	mov.w	r8, #8
    for (i = 0x80; i; i >>= 1)
 8001d36:	f04f 0980 	mov.w	r9, #128	; 0x80
      crc = crc_update(crc, *data & i);
 8001d3a:	ea09 010a 	and.w	r1, r9, sl
    for (i = 0x80; i; i >>= 1)
 8001d3e:	ea4f 0959 	mov.w	r9, r9, lsr #1
      crc = crc_update(crc, *data & i);
 8001d42:	f7ff ff42 	bl	8001bca <crc_update>
    for (i = 0x80; i; i >>= 1)
 8001d46:	f1b8 0801 	subs.w	r8, r8, #1
 8001d4a:	d1f6      	bne.n	8001d3a <ymodemReceive+0x156>
  for (crc = 0; size > 0; size--, data++)
 8001d4c:	3e01      	subs	r6, #1
 8001d4e:	b2b6      	uxth	r6, r6
 8001d50:	e7de      	b.n	8001d10 <ymodemReceive+0x12c>
    switch(p_modem->state)
 8001d52:	3b01      	subs	r3, #1
 8001d54:	2b04      	cmp	r3, #4
 8001d56:	f63f af54 	bhi.w	8001c02 <ymodemReceive+0x1e>
 8001d5a:	a101      	add	r1, pc, #4	; (adr r1, 8001d60 <ymodemReceive+0x17c>)
 8001d5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001d60:	08001db7 	.word	0x08001db7
 8001d64:	08001ded 	.word	0x08001ded
 8001d68:	08001e25 	.word	0x08001e25
 8001d6c:	08001e39 	.word	0x08001e39
 8001d70:	08001c59 	.word	0x08001c59
        if (p_modem->rx_packet.stx == YMODEM_EOT)
 8001d74:	2a04      	cmp	r2, #4
 8001d76:	d106      	bne.n	8001d86 <ymodemReceive+0x1a2>
          ymodemPutch(p_modem, YMODEM_NACK);
 8001d78:	2115      	movs	r1, #21
 8001d7a:	4620      	mov	r0, r4
 8001d7c:	f7ff fef0 	bl	8001b60 <ymodemPutch>
          p_modem->state = YMODEM_STATE_WAIT_LAST;
 8001d80:	2303      	movs	r3, #3
        p_modem->state = YMODEM_STATE_WAIT_END;
 8001d82:	72a3      	strb	r3, [r4, #10]
        break;
 8001d84:	e73d      	b.n	8001c02 <ymodemReceive+0x1e>
        else if (p_modem->rx_packet.seq[0] == 0x00)
 8001d86:	f894 60b5 	ldrb.w	r6, [r4, #181]	; 0xb5
 8001d8a:	2e00      	cmp	r6, #0
 8001d8c:	f47f af39 	bne.w	8001c02 <ymodemReceive+0x1e>
          ymodemGetFileInfo(p_modem);
 8001d90:	4620      	mov	r0, r4
          p_modem->file_addr = 0;
 8001d92:	f8c4 609c 	str.w	r6, [r4, #156]	; 0x9c
          ymodemGetFileInfo(p_modem);
 8001d96:	f7ff fef2 	bl	8001b7e <ymodemGetFileInfo>
          ymodemPutch(p_modem, YMODEM_ACK);
 8001d9a:	2106      	movs	r1, #6
 8001d9c:	4620      	mov	r0, r4
 8001d9e:	f7ff fedf 	bl	8001b60 <ymodemPutch>
          ymodemPutch(p_modem, YMODEM_C);
 8001da2:	2143      	movs	r1, #67	; 0x43
 8001da4:	4620      	mov	r0, r4
 8001da6:	f7ff fedb 	bl	8001b60 <ymodemPutch>
          p_modem->ack_mode = YMODEM_RESP_ACK_C;
 8001daa:	2302      	movs	r3, #2
 8001dac:	7663      	strb	r3, [r4, #25]
          p_modem->state = YMODEM_STATE_WAIT_FIRST;
 8001dae:	2301      	movs	r3, #1
          p_modem->state = YMODEM_STATE_WAIT_DATA;
 8001db0:	72a3      	strb	r3, [r4, #10]
          p_modem->type = YMODEM_TYPE_DATA;
 8001db2:	7226      	strb	r6, [r4, #8]
 8001db4:	e776      	b.n	8001ca4 <ymodemReceive+0xc0>
        if (p_modem->rx_packet.stx == YMODEM_EOT)
 8001db6:	2a04      	cmp	r2, #4
 8001db8:	d0de      	beq.n	8001d78 <ymodemReceive+0x194>
        else if (p_modem->rx_packet.seq[0] == 0x01)
 8001dba:	f894 60b5 	ldrb.w	r6, [r4, #181]	; 0xb5
 8001dbe:	2e01      	cmp	r6, #1
 8001dc0:	f47f af1f 	bne.w	8001c02 <ymodemReceive+0x1e>
          if (buf_length > p_modem->rx_packet.length)
 8001dc4:	f8b4 30bc 	ldrh.w	r3, [r4, #188]	; 0xbc
          p_modem->file_addr = 0;
 8001dc8:	2500      	movs	r5, #0
 8001dca:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
          ymodemPutch(p_modem, YMODEM_ACK);
 8001dce:	2106      	movs	r1, #6
 8001dd0:	4620      	mov	r0, r4
          p_modem->file_addr = 0;
 8001dd2:	f8c4 509c 	str.w	r5, [r4, #156]	; 0x9c
          if (buf_length > p_modem->rx_packet.length)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	bf28      	it	cs
 8001dda:	4613      	movcs	r3, r2
          p_modem->file_buf_length = buf_length;
 8001ddc:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
          p_modem->file_received += buf_length;
 8001de0:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
          ymodemPutch(p_modem, YMODEM_ACK);
 8001de4:	f7ff febc 	bl	8001b60 <ymodemPutch>
          p_modem->state = YMODEM_STATE_WAIT_DATA;
 8001de8:	2302      	movs	r3, #2
 8001dea:	e7e1      	b.n	8001db0 <ymodemReceive+0x1cc>
        if (p_modem->rx_packet.stx == YMODEM_EOT)
 8001dec:	2a04      	cmp	r2, #4
 8001dee:	d0c3      	beq.n	8001d78 <ymodemReceive+0x194>
          ymodemPutch(p_modem, YMODEM_ACK);
 8001df0:	4620      	mov	r0, r4
          buf_length = (p_modem->file_length - p_modem->file_addr);
 8001df2:	e9d4 2327 	ldrd	r2, r3, [r4, #156]	; 0x9c
 8001df6:	1a99      	subs	r1, r3, r2
          if (buf_length > p_modem->rx_packet.length)
 8001df8:	f8b4 30bc 	ldrh.w	r3, [r4, #188]	; 0xbc
 8001dfc:	428b      	cmp	r3, r1
 8001dfe:	bf28      	it	cs
 8001e00:	460b      	movcs	r3, r1
          ymodemPutch(p_modem, YMODEM_ACK);
 8001e02:	2106      	movs	r1, #6
          p_modem->file_addr += buf_length;
 8001e04:	441a      	add	r2, r3
          p_modem->file_buf_length = buf_length;
 8001e06:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
          p_modem->file_addr += buf_length;
 8001e0a:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
          p_modem->file_received += buf_length;
 8001e0e:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 8001e12:	4413      	add	r3, r2
 8001e14:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
          ymodemPutch(p_modem, YMODEM_ACK);
 8001e18:	f7ff fea2 	bl	8001b60 <ymodemPutch>
          p_modem->ack_mode = YMODEM_RESP_ACK;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	7663      	strb	r3, [r4, #25]
        p_modem->type = YMODEM_TYPE_CANCEL;
 8001e20:	7223      	strb	r3, [r4, #8]
        break;
 8001e22:	e73f      	b.n	8001ca4 <ymodemReceive+0xc0>
        ymodemPutch(p_modem, YMODEM_ACK); // 0x06보내고
 8001e24:	2106      	movs	r1, #6
 8001e26:	4620      	mov	r0, r4
 8001e28:	f7ff fe9a 	bl	8001b60 <ymodemPutch>
        ymodemPutch(p_modem, YMODEM_C); // 대문자 C 보냄
 8001e2c:	2143      	movs	r1, #67	; 0x43
 8001e2e:	4620      	mov	r0, r4
 8001e30:	f7ff fe96 	bl	8001b60 <ymodemPutch>
        p_modem->state = YMODEM_STATE_WAIT_END;
 8001e34:	2304      	movs	r3, #4
 8001e36:	e7a4      	b.n	8001d82 <ymodemReceive+0x19e>
        ymodemPutch(p_modem, YMODEM_ACK); // 끝 신호 보냄
 8001e38:	2106      	movs	r1, #6
 8001e3a:	4620      	mov	r0, r4
 8001e3c:	f7ff fe90 	bl	8001b60 <ymodemPutch>
        p_modem->state = YMODEM_STATE_WAIT_HEAD;
 8001e40:	2300      	movs	r3, #0
 8001e42:	72a3      	strb	r3, [r4, #10]
        p_modem->type = YMODEM_TYPE_END; // 끝신호  들어오면
 8001e44:	2302      	movs	r3, #2
 8001e46:	e7eb      	b.n	8001e20 <ymodemReceive+0x23c>

08001e48 <cliYmodem.part.0>:
  return crc;
}


#if 1
void cliYmodem(cli_args_t *args)
 8001e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e4c:	f5ad 6d9a 	sub.w	sp, sp, #1232	; 0x4d0


  if (args->argc == 2 && args->isStr(0, "down"))
  {

    addr_offset = args->getData(1);
 8001e50:	6883      	ldr	r3, [r0, #8]
 8001e52:	2001      	movs	r0, #1
  uint8_t err_code = 0;
 8001e54:	2500      	movs	r5, #0
    addr_offset = args->getData(1);
 8001e56:	4798      	blx	r3

    ymodemOpen(&ymodem, 2);
 8001e58:	2102      	movs	r1, #2
 8001e5a:	a802      	add	r0, sp, #8
            err_code = 3;
            keep_loop = false;
            break;

          case YMODEM_TYPE_ERROR:
            uartPrintf(log_ch, "YMODEM_TYPE_ERROR \n");
 8001e5c:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8001f68 <cliYmodem.part.0+0x120>
    ymodemOpen(&ymodem, 2);
 8001e60:	f7ff fe64 	bl	8001b2c <ymodemOpen>
    cliPrintf("download ...");
 8001e64:	483a      	ldr	r0, [pc, #232]	; (8001f50 <cliYmodem.part.0+0x108>)
 8001e66:	f7fe ff55 	bl	8000d14 <cliPrintf>
            uartPrintf(log_ch, "YMODEM_TYPE_CANCEL \n");
 8001e6a:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8001f6c <cliYmodem.part.0+0x124>
    pre_time = millis();
 8001e6e:	f7ff fc61 	bl	8001734 <millis>
            uartPrintf(log_ch, "YMODEM_TYPE_END \n");
 8001e72:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 8001f70 <cliYmodem.part.0+0x128>
    pre_time = millis();
 8001e76:	4606      	mov	r6, r0
      if (ymodemReceive(&ymodem) == true)
 8001e78:	a802      	add	r0, sp, #8
 8001e7a:	f7ff feb3 	bl	8001be4 <ymodemReceive>
 8001e7e:	4604      	mov	r4, r0
 8001e80:	2800      	cmp	r0, #0
 8001e82:	d05c      	beq.n	8001f3e <cliYmodem.part.0+0xf6>
          pre_time = millis();
 8001e84:	f7ff fc56 	bl	8001734 <millis>
        switch(ymodem.type)
 8001e88:	f89d 7010 	ldrb.w	r7, [sp, #16]
          pre_time = millis();
 8001e8c:	4606      	mov	r6, r0
        switch(ymodem.type)
 8001e8e:	2f04      	cmp	r7, #4
 8001e90:	d832      	bhi.n	8001ef8 <cliYmodem.part.0+0xb0>
 8001e92:	e8df f007 	tbb	[pc, r7]
 8001e96:	0a03      	.short	0x0a03
 8001e98:	4c46      	.short	0x4c46
 8001e9a:	52          	.byte	0x52
 8001e9b:	00          	.byte	0x00
            uartPrintf(log_ch, "YMODEM_TYPE_START %s %d\n", ymodem.file_name, ymodem.file_length);
 8001e9c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8001e9e:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8001ea2:	492c      	ldr	r1, [pc, #176]	; (8001f54 <cliYmodem.part.0+0x10c>)
 8001ea4:	2001      	movs	r0, #1
 8001ea6:	f7ff fd31 	bl	800190c <uartPrintf>
            uartPrintf(log_ch, "YMODEM_TYPE_DATA %d %d %%\n", ymodem.rx_packet.seq[0], ymodem.file_received*100 / ymodem.file_length);
 8001eaa:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8001eac:	2364      	movs	r3, #100	; 0x64
 8001eae:	492a      	ldr	r1, [pc, #168]	; (8001f58 <cliYmodem.part.0+0x110>)
 8001eb0:	2001      	movs	r0, #1
 8001eb2:	4353      	muls	r3, r2
 8001eb4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8001eb6:	fbb3 f3f2 	udiv	r3, r3, r2
 8001eba:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 8001ebe:	f7ff fd25 	bl	800190c <uartPrintf>
            uartPrintf(log_ch,"%x, %x ,%x\r\n",FLASH_ADDR_FW + ymodem.file_addr,ymodem.file_buf, ymodem.file_buf_length);
 8001ec2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8001ec4:	f8bd 30b4 	ldrh.w	r3, [sp, #180]	; 0xb4
 8001ec8:	2001      	movs	r0, #1
 8001eca:	f102 6200 	add.w	r2, r2, #134217728	; 0x8000000
 8001ece:	4923      	ldr	r1, [pc, #140]	; (8001f5c <cliYmodem.part.0+0x114>)
 8001ed0:	9300      	str	r3, [sp, #0]
 8001ed2:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8001ed6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8001ed8:	f7ff fd18 	bl	800190c <uartPrintf>
		     if (flashWrite(FLASH_ADDR_FW + ymodem.file_addr, ymodem.file_buf, ymodem.file_buf_length) != true)
 8001edc:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8001ede:	f8bd 20b4 	ldrh.w	r2, [sp, #180]	; 0xb4
 8001ee2:	f100 6000 	add.w	r0, r0, #134217728	; 0x8000000
 8001ee6:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8001ee8:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 8001eec:	f7ff fa6c 	bl	80013c8 <flashWrite>
			   err_code = 2;
 8001ef0:	2801      	cmp	r0, #1
 8001ef2:	bf1c      	itt	ne
 8001ef4:	2502      	movne	r5, #2
 8001ef6:	2400      	movne	r4, #0
            err_code = 4;
            keep_loop = false;
            break;
        }
      }
      	if (millis()-pre_time >= 15*1000)
 8001ef8:	f7ff fc1c 	bl	8001734 <millis>
 8001efc:	f643 2397 	movw	r3, #14999	; 0x3a97
 8001f00:	1b80      	subs	r0, r0, r6
 8001f02:	4298      	cmp	r0, r3
 8001f04:	d81d      	bhi.n	8001f42 <cliYmodem.part.0+0xfa>
    while(keep_loop)
 8001f06:	2c00      	cmp	r4, #0
 8001f08:	d1b6      	bne.n	8001e78 <cliYmodem.part.0+0x30>
     	}
    }



    if((ymodem.type == YMODEM_TYPE_END)||(err_code != false))
 8001f0a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d000      	beq.n	8001f14 <cliYmodem.part.0+0xcc>
 8001f12:	b1c5      	cbz	r5, 8001f46 <cliYmodem.part.0+0xfe>
    {
     cliPrintf("Down OK\n");
 8001f14:	4812      	ldr	r0, [pc, #72]	; (8001f60 <cliYmodem.part.0+0x118>)
 8001f16:	f7fe fefd 	bl	8000d14 <cliPrintf>

  if (ret != true)
  {
    cliPrintf("ymodem down [addr] \r\n");
  }
}
 8001f1a:	f50d 6d9a 	add.w	sp, sp, #1232	; 0x4d0
 8001f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            uartPrintf(log_ch, "YMODEM_TYPE_END \n");
 8001f22:	4651      	mov	r1, sl
 8001f24:	2001      	movs	r0, #1
 8001f26:	f7ff fcf1 	bl	800190c <uartPrintf>
            keep_loop = false;
 8001f2a:	2400      	movs	r4, #0
            break;
 8001f2c:	e7e4      	b.n	8001ef8 <cliYmodem.part.0+0xb0>
            uartPrintf(log_ch, "YMODEM_TYPE_CANCEL \n");
 8001f2e:	4649      	mov	r1, r9
 8001f30:	2001      	movs	r0, #1
            err_code = 3;
 8001f32:	463d      	mov	r5, r7
            uartPrintf(log_ch, "YMODEM_TYPE_CANCEL \n");
 8001f34:	f7ff fcea 	bl	800190c <uartPrintf>
            break;
 8001f38:	e7f7      	b.n	8001f2a <cliYmodem.part.0+0xe2>
            uartPrintf(log_ch, "YMODEM_TYPE_ERROR \n");
 8001f3a:	4641      	mov	r1, r8
 8001f3c:	e7f8      	b.n	8001f30 <cliYmodem.part.0+0xe8>
      }
 8001f3e:	2401      	movs	r4, #1
 8001f40:	e7da      	b.n	8001ef8 <cliYmodem.part.0+0xb0>
     	  err_code = 5;
 8001f42:	2505      	movs	r5, #5
 8001f44:	e7e1      	b.n	8001f0a <cliYmodem.part.0+0xc2>
	 cliPrintf("Down Fail :%d \n",err_code);
 8001f46:	4629      	mov	r1, r5
 8001f48:	4806      	ldr	r0, [pc, #24]	; (8001f64 <cliYmodem.part.0+0x11c>)
 8001f4a:	f7fe fee3 	bl	8000d14 <cliPrintf>
}
 8001f4e:	e7e4      	b.n	8001f1a <cliYmodem.part.0+0xd2>
 8001f50:	08009c36 	.word	0x08009c36
 8001f54:	08009c43 	.word	0x08009c43
 8001f58:	08009c5c 	.word	0x08009c5c
 8001f5c:	08009c77 	.word	0x08009c77
 8001f60:	08009cbf 	.word	0x08009cbf
 8001f64:	08009cc8 	.word	0x08009cc8
 8001f68:	08009cab 	.word	0x08009cab
 8001f6c:	08009c96 	.word	0x08009c96
 8001f70:	08009c84 	.word	0x08009c84

08001f74 <cliYmodem>:
  if (args->argc == 2 && args->isStr(0, "down"))
 8001f74:	8803      	ldrh	r3, [r0, #0]
 8001f76:	2b02      	cmp	r3, #2
{
 8001f78:	b510      	push	{r4, lr}
 8001f7a:	4604      	mov	r4, r0
  if (args->argc == 2 && args->isStr(0, "down"))
 8001f7c:	d109      	bne.n	8001f92 <cliYmodem+0x1e>
 8001f7e:	6943      	ldr	r3, [r0, #20]
 8001f80:	2000      	movs	r0, #0
 8001f82:	4906      	ldr	r1, [pc, #24]	; (8001f9c <cliYmodem+0x28>)
 8001f84:	4798      	blx	r3
 8001f86:	b120      	cbz	r0, 8001f92 <cliYmodem+0x1e>
 8001f88:	4620      	mov	r0, r4
}
 8001f8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f8e:	f7ff bf5b 	b.w	8001e48 <cliYmodem.part.0>
    cliPrintf("ymodem down [addr] \r\n");
 8001f92:	4803      	ldr	r0, [pc, #12]	; (8001fa0 <cliYmodem+0x2c>)
}
 8001f94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    cliPrintf("ymodem down [addr] \r\n");
 8001f98:	f7fe bebc 	b.w	8000d14 <cliPrintf>
 8001f9c:	08009cd8 	.word	0x08009cd8
 8001fa0:	08009cdd 	.word	0x08009cdd

08001fa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fa4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fa6:	4b0e      	ldr	r3, [pc, #56]	; (8001fe0 <HAL_InitTick+0x3c>)
{
 8001fa8:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001faa:	4a0e      	ldr	r2, [pc, #56]	; (8001fe4 <HAL_InitTick+0x40>)
 8001fac:	7818      	ldrb	r0, [r3, #0]
 8001fae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fb2:	fbb3 f3f0 	udiv	r3, r3, r0
 8001fb6:	6810      	ldr	r0, [r2, #0]
 8001fb8:	fbb0 f0f3 	udiv	r0, r0, r3
 8001fbc:	f000 f8ac 	bl	8002118 <HAL_SYSTICK_Config>
 8001fc0:	4604      	mov	r4, r0
 8001fc2:	b958      	cbnz	r0, 8001fdc <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fc4:	2d0f      	cmp	r5, #15
 8001fc6:	d809      	bhi.n	8001fdc <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fc8:	4602      	mov	r2, r0
 8001fca:	4629      	mov	r1, r5
 8001fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd0:	f000 f84e 	bl	8002070 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fd4:	4b04      	ldr	r3, [pc, #16]	; (8001fe8 <HAL_InitTick+0x44>)
 8001fd6:	4620      	mov	r0, r4
 8001fd8:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001fda:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001fdc:	2001      	movs	r0, #1
 8001fde:	e7fc      	b.n	8001fda <HAL_InitTick+0x36>
 8001fe0:	20000004 	.word	0x20000004
 8001fe4:	20000000 	.word	0x20000000
 8001fe8:	20000008 	.word	0x20000008

08001fec <HAL_Init>:
{
 8001fec:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fee:	2003      	movs	r0, #3
 8001ff0:	f000 f82c 	bl	800204c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ff4:	2000      	movs	r0, #0
 8001ff6:	f7ff ffd5 	bl	8001fa4 <HAL_InitTick>
  HAL_MspInit();
 8001ffa:	f7fe fcf9 	bl	80009f0 <HAL_MspInit>
}
 8001ffe:	2000      	movs	r0, #0
 8002000:	bd08      	pop	{r3, pc}
	...

08002004 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002004:	4a03      	ldr	r2, [pc, #12]	; (8002014 <HAL_IncTick+0x10>)
 8002006:	4b04      	ldr	r3, [pc, #16]	; (8002018 <HAL_IncTick+0x14>)
 8002008:	6811      	ldr	r1, [r2, #0]
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	440b      	add	r3, r1
 800200e:	6013      	str	r3, [r2, #0]
}
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	20000a40 	.word	0x20000a40
 8002018:	20000004 	.word	0x20000004

0800201c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800201c:	4b01      	ldr	r3, [pc, #4]	; (8002024 <HAL_GetTick+0x8>)
 800201e:	6818      	ldr	r0, [r3, #0]
}
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	20000a40 	.word	0x20000a40

08002028 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002028:	b538      	push	{r3, r4, r5, lr}
 800202a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800202c:	f7ff fff6 	bl	800201c <HAL_GetTick>
 8002030:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002032:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8002034:	bf1e      	ittt	ne
 8002036:	4b04      	ldrne	r3, [pc, #16]	; (8002048 <HAL_Delay+0x20>)
 8002038:	781b      	ldrbne	r3, [r3, #0]
 800203a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800203c:	f7ff ffee 	bl	800201c <HAL_GetTick>
 8002040:	1b43      	subs	r3, r0, r5
 8002042:	42a3      	cmp	r3, r4
 8002044:	d3fa      	bcc.n	800203c <HAL_Delay+0x14>
  {
  }
}
 8002046:	bd38      	pop	{r3, r4, r5, pc}
 8002048:	20000004 	.word	0x20000004

0800204c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800204c:	4907      	ldr	r1, [pc, #28]	; (800206c <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800204e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002050:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002052:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002056:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800205a:	0412      	lsls	r2, r2, #16
 800205c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800205e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002060:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002064:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002068:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800206a:	4770      	bx	lr
 800206c:	e000ed00 	.word	0xe000ed00

08002070 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002070:	4b16      	ldr	r3, [pc, #88]	; (80020cc <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002072:	b530      	push	{r4, r5, lr}
 8002074:	68dc      	ldr	r4, [r3, #12]
 8002076:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800207a:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800207e:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002080:	2d04      	cmp	r5, #4
 8002082:	bf28      	it	cs
 8002084:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002086:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002088:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800208c:	bf8c      	ite	hi
 800208e:	3c03      	subhi	r4, #3
 8002090:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002092:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 8002096:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002098:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800209c:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020a0:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a4:	fa01 f104 	lsl.w	r1, r1, r4
 80020a8:	ea41 0302 	orr.w	r3, r1, r2
 80020ac:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80020b0:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80020b2:	db06      	blt.n	80020c2 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020b4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80020b8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80020bc:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80020c0:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c2:	f000 000f 	and.w	r0, r0, #15
 80020c6:	4a02      	ldr	r2, [pc, #8]	; (80020d0 <HAL_NVIC_SetPriority+0x60>)
 80020c8:	5413      	strb	r3, [r2, r0]
 80020ca:	e7f9      	b.n	80020c0 <HAL_NVIC_SetPriority+0x50>
 80020cc:	e000ed00 	.word	0xe000ed00
 80020d0:	e000ed14 	.word	0xe000ed14

080020d4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80020d4:	2800      	cmp	r0, #0
 80020d6:	db08      	blt.n	80020ea <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020d8:	0942      	lsrs	r2, r0, #5
 80020da:	2301      	movs	r3, #1
 80020dc:	f000 001f 	and.w	r0, r0, #31
 80020e0:	fa03 f000 	lsl.w	r0, r3, r0
 80020e4:	4b01      	ldr	r3, [pc, #4]	; (80020ec <HAL_NVIC_EnableIRQ+0x18>)
 80020e6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80020ea:	4770      	bx	lr
 80020ec:	e000e100 	.word	0xe000e100

080020f0 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80020f0:	2800      	cmp	r0, #0
 80020f2:	db0d      	blt.n	8002110 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020f4:	0943      	lsrs	r3, r0, #5
 80020f6:	2201      	movs	r2, #1
 80020f8:	f000 001f 	and.w	r0, r0, #31
 80020fc:	3320      	adds	r3, #32
 80020fe:	fa02 f000 	lsl.w	r0, r2, r0
 8002102:	4a04      	ldr	r2, [pc, #16]	; (8002114 <HAL_NVIC_DisableIRQ+0x24>)
 8002104:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002108:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800210c:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	e000e100 	.word	0xe000e100

08002118 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002118:	3801      	subs	r0, #1
 800211a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800211e:	d20a      	bcs.n	8002136 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002120:	4b06      	ldr	r3, [pc, #24]	; (800213c <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002122:	21f0      	movs	r1, #240	; 0xf0
 8002124:	4a06      	ldr	r2, [pc, #24]	; (8002140 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002126:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002128:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800212a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800212e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002130:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002132:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002134:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002136:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	e000e010 	.word	0xe000e010
 8002140:	e000ed00 	.word	0xe000ed00

08002144 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002144:	6803      	ldr	r3, [r0, #0]
{
 8002146:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002148:	2018      	movs	r0, #24
 800214a:	b2d9      	uxtb	r1, r3
 800214c:	3910      	subs	r1, #16
 800214e:	fbb1 f0f0 	udiv	r0, r1, r0
{
 8002152:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002154:	4c05      	ldr	r4, [pc, #20]	; (800216c <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8002156:	295f      	cmp	r1, #95	; 0x5f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002158:	5c20      	ldrb	r0, [r4, r0]
 800215a:	65d0      	str	r0, [r2, #92]	; 0x5c
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800215c:	f423 707f 	bic.w	r0, r3, #1020	; 0x3fc
 8002160:	f020 0003 	bic.w	r0, r0, #3
 8002164:	bf88      	it	hi
 8002166:	3004      	addhi	r0, #4
 8002168:	6590      	str	r0, [r2, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 800216a:	bd10      	pop	{r4, pc}
 800216c:	08009cf3 	.word	0x08009cf3

08002170 <HAL_DMA_Init>:
{
 8002170:	b570      	push	{r4, r5, r6, lr}
 8002172:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002174:	f7ff ff52 	bl	800201c <HAL_GetTick>
 8002178:	4605      	mov	r5, r0
  if(hdma == NULL)
 800217a:	2c00      	cmp	r4, #0
 800217c:	d073      	beq.n	8002266 <HAL_DMA_Init+0xf6>
  __HAL_UNLOCK(hdma);
 800217e:	2300      	movs	r3, #0
  __HAL_DMA_DISABLE(hdma);
 8002180:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 8002182:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8002186:	2302      	movs	r3, #2
 8002188:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 800218c:	6813      	ldr	r3, [r2, #0]
 800218e:	f023 0301 	bic.w	r3, r3, #1
 8002192:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002194:	6821      	ldr	r1, [r4, #0]
 8002196:	680b      	ldr	r3, [r1, #0]
 8002198:	07d8      	lsls	r0, r3, #31
 800219a:	d42f      	bmi.n	80021fc <HAL_DMA_Init+0x8c>
  tmp = hdma->Instance->CR;
 800219c:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800219e:	4d33      	ldr	r5, [pc, #204]	; (800226c <HAL_DMA_Init+0xfc>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021a0:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021a2:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021a4:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	68e2      	ldr	r2, [r4, #12]
 80021ac:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021ae:	6922      	ldr	r2, [r4, #16]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	6962      	ldr	r2, [r4, #20]
 80021b4:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021b6:	69e2      	ldr	r2, [r4, #28]
 80021b8:	4303      	orrs	r3, r0
 80021ba:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 80021bc:	6a22      	ldr	r2, [r4, #32]
 80021be:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021c0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80021c2:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021c4:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80021c8:	bf02      	ittt	eq
 80021ca:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 80021ce:	4335      	orreq	r5, r6
 80021d0:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021d2:	2a04      	cmp	r2, #4
  hdma->Instance->CR = tmp;  
 80021d4:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 80021d6:	694b      	ldr	r3, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80021d8:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 80021dc:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021e0:	d133      	bne.n	800224a <HAL_DMA_Init+0xda>
    tmp |= hdma->Init.FIFOThreshold;
 80021e2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80021e4:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 80021e6:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80021e8:	b37d      	cbz	r5, 800224a <HAL_DMA_Init+0xda>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80021ea:	b990      	cbnz	r0, 8002212 <HAL_DMA_Init+0xa2>
  {
    switch (tmp)
 80021ec:	2a01      	cmp	r2, #1
 80021ee:	d021      	beq.n	8002234 <HAL_DMA_Init+0xc4>
 80021f0:	f032 0202 	bics.w	r2, r2, #2
 80021f4:	d129      	bne.n	800224a <HAL_DMA_Init+0xda>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021f6:	01ea      	lsls	r2, r5, #7
 80021f8:	d527      	bpl.n	800224a <HAL_DMA_Init+0xda>
 80021fa:	e01e      	b.n	800223a <HAL_DMA_Init+0xca>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021fc:	f7ff ff0e 	bl	800201c <HAL_GetTick>
 8002200:	1b40      	subs	r0, r0, r5
 8002202:	2805      	cmp	r0, #5
 8002204:	d9c6      	bls.n	8002194 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002206:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002208:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800220a:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800220c:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8002210:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002212:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8002216:	d114      	bne.n	8002242 <HAL_DMA_Init+0xd2>
    switch (tmp)
 8002218:	2a03      	cmp	r2, #3
 800221a:	d816      	bhi.n	800224a <HAL_DMA_Init+0xda>
 800221c:	a001      	add	r0, pc, #4	; (adr r0, 8002224 <HAL_DMA_Init+0xb4>)
 800221e:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8002222:	bf00      	nop
 8002224:	0800223b 	.word	0x0800223b
 8002228:	080021f7 	.word	0x080021f7
 800222c:	0800223b 	.word	0x0800223b
 8002230:	08002235 	.word	0x08002235
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002234:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8002238:	d107      	bne.n	800224a <HAL_DMA_Init+0xda>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800223a:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
 800223c:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800223e:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8002240:	e7e4      	b.n	800220c <HAL_DMA_Init+0x9c>
    switch (tmp)
 8002242:	2a02      	cmp	r2, #2
 8002244:	d9f9      	bls.n	800223a <HAL_DMA_Init+0xca>
 8002246:	2a03      	cmp	r2, #3
 8002248:	d0d5      	beq.n	80021f6 <HAL_DMA_Init+0x86>
  hdma->Instance->FCR = tmp;
 800224a:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800224c:	4620      	mov	r0, r4
 800224e:	f7ff ff79 	bl	8002144 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002252:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002254:	233f      	movs	r3, #63	; 0x3f
 8002256:	4093      	lsls	r3, r2
 8002258:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800225a:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800225c:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800225e:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002260:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8002264:	e7d4      	b.n	8002210 <HAL_DMA_Init+0xa0>
    return HAL_ERROR;
 8002266:	2001      	movs	r0, #1
 8002268:	e7d2      	b.n	8002210 <HAL_DMA_Init+0xa0>
 800226a:	bf00      	nop
 800226c:	e010803f 	.word	0xe010803f

08002270 <HAL_DMA_DeInit>:
{
 8002270:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 8002272:	4605      	mov	r5, r0
 8002274:	b320      	cbz	r0, 80022c0 <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002276:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800227a:	2b02      	cmp	r3, #2
 800227c:	b2dc      	uxtb	r4, r3
 800227e:	d01d      	beq.n	80022bc <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 8002280:	6803      	ldr	r3, [r0, #0]
  hdma->Instance->CR   = 0U;
 8002282:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	f022 0201 	bic.w	r2, r2, #1
 800228a:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800228c:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
 800228e:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 8002290:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 8002292:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 8002294:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 8002296:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8002298:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800229a:	f7ff ff53 	bl	8002144 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800229e:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80022a0:	233f      	movs	r3, #63	; 0x3f
 80022a2:	4093      	lsls	r3, r2
 80022a4:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022a6:	656c      	str	r4, [r5, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 80022a8:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 80022ac:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
  hdma->XferHalfCpltCallback = NULL;
 80022b0:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 80022b4:	e9c5 4411 	strd	r4, r4, [r5, #68]	; 0x44
  hdma->XferAbortCallback = NULL;  
 80022b8:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
}
 80022bc:	4620      	mov	r0, r4
 80022be:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80022c0:	2401      	movs	r4, #1
 80022c2:	e7fb      	b.n	80022bc <HAL_DMA_DeInit+0x4c>

080022c4 <HAL_DMA_Start_IT>:
{
 80022c4:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 80022c6:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022ca:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 80022cc:	2c01      	cmp	r4, #1
 80022ce:	d034      	beq.n	800233a <HAL_DMA_Start_IT+0x76>
 80022d0:	2401      	movs	r4, #1
 80022d2:	2500      	movs	r5, #0
 80022d4:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80022d8:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 80022dc:	2c01      	cmp	r4, #1
 80022de:	f04f 0402 	mov.w	r4, #2
 80022e2:	d128      	bne.n	8002336 <HAL_DMA_Start_IT+0x72>
    hdma->State = HAL_DMA_STATE_BUSY;
 80022e4:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80022e8:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022ea:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80022ec:	6825      	ldr	r5, [r4, #0]
 80022ee:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 80022f2:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 80022f4:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022f6:	6883      	ldr	r3, [r0, #8]
 80022f8:	2b40      	cmp	r3, #64	; 0x40
 80022fa:	d119      	bne.n	8002330 <HAL_DMA_Start_IT+0x6c>
    hdma->Instance->PAR = DstAddress;
 80022fc:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 80022fe:	60e1      	str	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002300:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8002302:	233f      	movs	r3, #63	; 0x3f
 8002304:	4093      	lsls	r3, r2
 8002306:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002308:	6823      	ldr	r3, [r4, #0]
 800230a:	f043 0316 	orr.w	r3, r3, #22
 800230e:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002310:	6963      	ldr	r3, [r4, #20]
 8002312:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002316:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8002318:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800231a:	b11b      	cbz	r3, 8002324 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 800231c:	6823      	ldr	r3, [r4, #0]
 800231e:	f043 0308 	orr.w	r3, r3, #8
 8002322:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8002324:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002326:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8002328:	f043 0301 	orr.w	r3, r3, #1
 800232c:	6023      	str	r3, [r4, #0]
}
 800232e:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->PAR = SrcAddress;
 8002330:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8002332:	60e2      	str	r2, [r4, #12]
 8002334:	e7e4      	b.n	8002300 <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 8002336:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 800233a:	2002      	movs	r0, #2
 800233c:	e7f7      	b.n	800232e <HAL_DMA_Start_IT+0x6a>

0800233e <HAL_DMA_Abort>:
{
 800233e:	b570      	push	{r4, r5, r6, lr}
 8002340:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002342:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 8002344:	f7ff fe6a 	bl	800201c <HAL_GetTick>
 8002348:	4605      	mov	r5, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800234a:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800234e:	2b02      	cmp	r3, #2
 8002350:	d006      	beq.n	8002360 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002352:	2380      	movs	r3, #128	; 0x80
    return HAL_ERROR;
 8002354:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002356:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8002358:	2300      	movs	r3, #0
 800235a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800235e:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002360:	6823      	ldr	r3, [r4, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	f022 0216 	bic.w	r2, r2, #22
 8002368:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800236a:	695a      	ldr	r2, [r3, #20]
 800236c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002370:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002372:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002374:	b90a      	cbnz	r2, 800237a <HAL_DMA_Abort+0x3c>
 8002376:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002378:	b11a      	cbz	r2, 8002382 <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	f022 0208 	bic.w	r2, r2, #8
 8002380:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	f022 0201 	bic.w	r2, r2, #1
 8002388:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800238a:	6823      	ldr	r3, [r4, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f013 0301 	ands.w	r3, r3, #1
 8002392:	d10a      	bne.n	80023aa <HAL_DMA_Abort+0x6c>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002394:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002396:	223f      	movs	r2, #63	; 0x3f
  return HAL_OK;
 8002398:	4618      	mov	r0, r3
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800239a:	408a      	lsls	r2, r1
 800239c:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 800239e:	2201      	movs	r2, #1
    __HAL_UNLOCK(hdma);
 80023a0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 80023a4:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  return HAL_OK;
 80023a8:	e7d9      	b.n	800235e <HAL_DMA_Abort+0x20>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023aa:	f7ff fe37 	bl	800201c <HAL_GetTick>
 80023ae:	1b40      	subs	r0, r0, r5
 80023b0:	2805      	cmp	r0, #5
 80023b2:	d9ea      	bls.n	800238a <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023b4:	2320      	movs	r3, #32
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023b6:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023b8:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 80023ba:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023bc:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 80023c0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 80023c4:	e7cb      	b.n	800235e <HAL_DMA_Abort+0x20>

080023c6 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023c6:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d003      	beq.n	80023d6 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023ce:	2380      	movs	r3, #128	; 0x80
 80023d0:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80023d2:	2001      	movs	r0, #1
 80023d4:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 80023d6:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80023d8:	2305      	movs	r3, #5
 80023da:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  return HAL_OK;
 80023de:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 80023e0:	6813      	ldr	r3, [r2, #0]
 80023e2:	f023 0301 	bic.w	r3, r3, #1
 80023e6:	6013      	str	r3, [r2, #0]
}
 80023e8:	4770      	bx	lr
	...

080023ec <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0;
 80023ec:	2300      	movs	r3, #0
{
 80023ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
 80023f0:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80023f2:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 80023f4:	4b5b      	ldr	r3, [pc, #364]	; (8002564 <HAL_DMA_IRQHandler+0x178>)
{
 80023f6:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023f8:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600;
 80023fa:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80023fc:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 80023fe:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002400:	409a      	lsls	r2, r3
 8002402:	4232      	tst	r2, r6
 8002404:	d00c      	beq.n	8002420 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002406:	6801      	ldr	r1, [r0, #0]
 8002408:	6808      	ldr	r0, [r1, #0]
 800240a:	0740      	lsls	r0, r0, #29
 800240c:	d508      	bpl.n	8002420 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800240e:	6808      	ldr	r0, [r1, #0]
 8002410:	f020 0004 	bic.w	r0, r0, #4
 8002414:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002416:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002418:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800241a:	f042 0201 	orr.w	r2, r2, #1
 800241e:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002420:	2201      	movs	r2, #1
 8002422:	409a      	lsls	r2, r3
 8002424:	4232      	tst	r2, r6
 8002426:	d008      	beq.n	800243a <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002428:	6821      	ldr	r1, [r4, #0]
 800242a:	6949      	ldr	r1, [r1, #20]
 800242c:	0609      	lsls	r1, r1, #24
 800242e:	d504      	bpl.n	800243a <HAL_DMA_IRQHandler+0x4e>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002430:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002432:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002434:	f042 0202 	orr.w	r2, r2, #2
 8002438:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800243a:	2204      	movs	r2, #4
 800243c:	409a      	lsls	r2, r3
 800243e:	4232      	tst	r2, r6
 8002440:	d008      	beq.n	8002454 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002442:	6821      	ldr	r1, [r4, #0]
 8002444:	6809      	ldr	r1, [r1, #0]
 8002446:	0788      	lsls	r0, r1, #30
 8002448:	d504      	bpl.n	8002454 <HAL_DMA_IRQHandler+0x68>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800244a:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800244c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800244e:	f042 0204 	orr.w	r2, r2, #4
 8002452:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002454:	2210      	movs	r2, #16
 8002456:	409a      	lsls	r2, r3
 8002458:	4232      	tst	r2, r6
 800245a:	d010      	beq.n	800247e <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800245c:	6823      	ldr	r3, [r4, #0]
 800245e:	6819      	ldr	r1, [r3, #0]
 8002460:	0709      	lsls	r1, r1, #28
 8002462:	d50c      	bpl.n	800247e <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002464:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	0350      	lsls	r0, r2, #13
 800246a:	d537      	bpl.n	80024dc <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	0319      	lsls	r1, r3, #12
 8002470:	d401      	bmi.n	8002476 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8002472:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002474:	e000      	b.n	8002478 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002476:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8002478:	b10b      	cbz	r3, 800247e <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 800247a:	4620      	mov	r0, r4
 800247c:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800247e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002480:	2220      	movs	r2, #32
 8002482:	408a      	lsls	r2, r1
 8002484:	4232      	tst	r2, r6
 8002486:	d03a      	beq.n	80024fe <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002488:	6823      	ldr	r3, [r4, #0]
 800248a:	6818      	ldr	r0, [r3, #0]
 800248c:	06c6      	lsls	r6, r0, #27
 800248e:	d536      	bpl.n	80024fe <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002490:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002492:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8002496:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002498:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800249a:	d127      	bne.n	80024ec <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800249c:	f022 0216 	bic.w	r2, r2, #22
 80024a0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024a2:	695a      	ldr	r2, [r3, #20]
 80024a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024a8:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024aa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80024ac:	b90a      	cbnz	r2, 80024b2 <HAL_DMA_IRQHandler+0xc6>
 80024ae:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80024b0:	b11a      	cbz	r2, 80024ba <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	f022 0208 	bic.w	r2, r2, #8
 80024b8:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024ba:	233f      	movs	r3, #63	; 0x3f
 80024bc:	408b      	lsls	r3, r1
 80024be:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 80024c0:	2300      	movs	r3, #0
 80024c2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 80024c6:	2301      	movs	r3, #1
 80024c8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 80024cc:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d045      	beq.n	800255e <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 80024d2:	4620      	mov	r0, r4
}
 80024d4:	b003      	add	sp, #12
 80024d6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 80024da:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	05d2      	lsls	r2, r2, #23
 80024e0:	d4c7      	bmi.n	8002472 <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	f022 0208 	bic.w	r2, r2, #8
 80024e8:	601a      	str	r2, [r3, #0]
 80024ea:	e7c2      	b.n	8002472 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024ec:	0350      	lsls	r0, r2, #13
 80024ee:	d527      	bpl.n	8002540 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	0319      	lsls	r1, r3, #12
 80024f4:	d431      	bmi.n	800255a <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 80024f6:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 80024f8:	b10b      	cbz	r3, 80024fe <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 80024fa:	4620      	mov	r0, r4
 80024fc:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80024fe:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002500:	b36b      	cbz	r3, 800255e <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002502:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002504:	07da      	lsls	r2, r3, #31
 8002506:	d519      	bpl.n	800253c <HAL_DMA_IRQHandler+0x150>
  uint32_t timeout = SystemCoreClock / 9600;
 8002508:	f44f 5316 	mov.w	r3, #9600	; 0x2580
      __HAL_DMA_DISABLE(hdma);
 800250c:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 800250e:	fbb7 f7f3 	udiv	r7, r7, r3
      hdma->State = HAL_DMA_STATE_ABORT;
 8002512:	2305      	movs	r3, #5
 8002514:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8002518:	6813      	ldr	r3, [r2, #0]
 800251a:	f023 0301 	bic.w	r3, r3, #1
 800251e:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8002520:	9b01      	ldr	r3, [sp, #4]
 8002522:	3301      	adds	r3, #1
 8002524:	42bb      	cmp	r3, r7
 8002526:	9301      	str	r3, [sp, #4]
 8002528:	d802      	bhi.n	8002530 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800252a:	6813      	ldr	r3, [r2, #0]
 800252c:	07db      	lsls	r3, r3, #31
 800252e:	d4f7      	bmi.n	8002520 <HAL_DMA_IRQHandler+0x134>
      __HAL_UNLOCK(hdma);
 8002530:	2300      	movs	r3, #0
 8002532:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8002536:	2301      	movs	r3, #1
 8002538:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 800253c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800253e:	e7c6      	b.n	80024ce <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8002546:	d108      	bne.n	800255a <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002548:	6819      	ldr	r1, [r3, #0]
 800254a:	f021 0110 	bic.w	r1, r1, #16
 800254e:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8002550:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8002552:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8002556:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 800255a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800255c:	e7cc      	b.n	80024f8 <HAL_DMA_IRQHandler+0x10c>
}
 800255e:	b003      	add	sp, #12
 8002560:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002562:	bf00      	nop
 8002564:	20000000 	.word	0x20000000

08002568 <FLASH_Program_DoubleWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8002568:	490a      	ldr	r1, [pc, #40]	; (8002594 <FLASH_Program_DoubleWord+0x2c>)
{
 800256a:	b510      	push	{r4, lr}
  FLASH->CR &= CR_PSIZE_MASK;
 800256c:	690c      	ldr	r4, [r1, #16]
 800256e:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 8002572:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002574:	690c      	ldr	r4, [r1, #16]
 8002576:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 800257a:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 800257c:	690c      	ldr	r4, [r1, #16]
 800257e:	f044 0401 	orr.w	r4, r4, #1
 8002582:	610c      	str	r4, [r1, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002584:	6002      	str	r2, [r0, #0]
 8002586:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800258a:	6043      	str	r3, [r0, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 800258c:	f3bf 8f4f 	dsb	sy

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8002590:	bd10      	pop	{r4, pc}
 8002592:	bf00      	nop
 8002594:	40023c00 	.word	0x40023c00

08002598 <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8002598:	4b08      	ldr	r3, [pc, #32]	; (80025bc <FLASH_Program_Word+0x24>)
 800259a:	691a      	ldr	r2, [r3, #16]
 800259c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80025a0:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80025a2:	691a      	ldr	r2, [r3, #16]
 80025a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025a8:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 80025aa:	691a      	ldr	r2, [r3, #16]
 80025ac:	f042 0201 	orr.w	r2, r2, #1
 80025b0:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 80025b2:	6001      	str	r1, [r0, #0]
 80025b4:	f3bf 8f4f 	dsb	sy
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	40023c00 	.word	0x40023c00

080025c0 <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80025c0:	4b08      	ldr	r3, [pc, #32]	; (80025e4 <FLASH_Program_HalfWord+0x24>)
 80025c2:	691a      	ldr	r2, [r3, #16]
 80025c4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80025c8:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80025ca:	691a      	ldr	r2, [r3, #16]
 80025cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025d0:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 80025d2:	691a      	ldr	r2, [r3, #16]
 80025d4:	f042 0201 	orr.w	r2, r2, #1
 80025d8:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 80025da:	8001      	strh	r1, [r0, #0]
 80025dc:	f3bf 8f4f 	dsb	sy

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
  
}
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	40023c00 	.word	0x40023c00

080025e8 <FLASH_Program_Byte>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80025e8:	4b07      	ldr	r3, [pc, #28]	; (8002608 <FLASH_Program_Byte+0x20>)
 80025ea:	691a      	ldr	r2, [r3, #16]
 80025ec:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80025f0:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80025f2:	691a      	ldr	r2, [r3, #16]
 80025f4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 80025f6:	691a      	ldr	r2, [r3, #16]
 80025f8:	f042 0201 	orr.w	r2, r2, #1
 80025fc:	611a      	str	r2, [r3, #16]

  *(__IO uint8_t*)Address = Data;
 80025fe:	7001      	strb	r1, [r0, #0]
 8002600:	f3bf 8f4f 	dsb	sy

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	40023c00 	.word	0x40023c00

0800260c <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800260c:	4b16      	ldr	r3, [pc, #88]	; (8002668 <FLASH_SetErrorCode+0x5c>)
 800260e:	68da      	ldr	r2, [r3, #12]
 8002610:	0792      	lsls	r2, r2, #30
 8002612:	d504      	bpl.n	800261e <FLASH_SetErrorCode+0x12>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002614:	4915      	ldr	r1, [pc, #84]	; (800266c <FLASH_SetErrorCode+0x60>)
 8002616:	698a      	ldr	r2, [r1, #24]
 8002618:	f042 0220 	orr.w	r2, r2, #32
 800261c:	618a      	str	r2, [r1, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	06db      	lsls	r3, r3, #27
 8002622:	d504      	bpl.n	800262e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002624:	4a11      	ldr	r2, [pc, #68]	; (800266c <FLASH_SetErrorCode+0x60>)
 8002626:	6993      	ldr	r3, [r2, #24]
 8002628:	f043 0310 	orr.w	r3, r3, #16
 800262c:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800262e:	4b0e      	ldr	r3, [pc, #56]	; (8002668 <FLASH_SetErrorCode+0x5c>)
 8002630:	68da      	ldr	r2, [r3, #12]
 8002632:	0690      	lsls	r0, r2, #26
 8002634:	d504      	bpl.n	8002640 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002636:	490d      	ldr	r1, [pc, #52]	; (800266c <FLASH_SetErrorCode+0x60>)
 8002638:	698a      	ldr	r2, [r1, #24]
 800263a:	f042 0208 	orr.w	r2, r2, #8
 800263e:	618a      	str	r2, [r1, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	0659      	lsls	r1, r3, #25
 8002644:	d504      	bpl.n	8002650 <FLASH_SetErrorCode+0x44>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002646:	4a09      	ldr	r2, [pc, #36]	; (800266c <FLASH_SetErrorCode+0x60>)
 8002648:	6993      	ldr	r3, [r2, #24]
 800264a:	f043 0304 	orr.w	r3, r3, #4
 800264e:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 8002650:	4b05      	ldr	r3, [pc, #20]	; (8002668 <FLASH_SetErrorCode+0x5c>)
 8002652:	68da      	ldr	r2, [r3, #12]
 8002654:	0612      	lsls	r2, r2, #24
 8002656:	d504      	bpl.n	8002662 <FLASH_SetErrorCode+0x56>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 8002658:	4904      	ldr	r1, [pc, #16]	; (800266c <FLASH_SetErrorCode+0x60>)
 800265a:	698a      	ldr	r2, [r1, #24]
 800265c:	f042 0202 	orr.w	r2, r2, #2
 8002660:	618a      	str	r2, [r1, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8002662:	22f2      	movs	r2, #242	; 0xf2
 8002664:	60da      	str	r2, [r3, #12]
}
 8002666:	4770      	bx	lr
 8002668:	40023c00 	.word	0x40023c00
 800266c:	20000a44 	.word	0x20000a44

08002670 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002670:	4b06      	ldr	r3, [pc, #24]	; (800268c <HAL_FLASH_Unlock+0x1c>)
 8002672:	691a      	ldr	r2, [r3, #16]
 8002674:	2a00      	cmp	r2, #0
 8002676:	da07      	bge.n	8002688 <HAL_FLASH_Unlock+0x18>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002678:	4a05      	ldr	r2, [pc, #20]	; (8002690 <HAL_FLASH_Unlock+0x20>)
 800267a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800267c:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8002680:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002682:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 8002684:	0fc0      	lsrs	r0, r0, #31
 8002686:	4770      	bx	lr
 8002688:	2000      	movs	r0, #0
}
 800268a:	4770      	bx	lr
 800268c:	40023c00 	.word	0x40023c00
 8002690:	45670123 	.word	0x45670123

08002694 <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 8002694:	4a03      	ldr	r2, [pc, #12]	; (80026a4 <HAL_FLASH_Lock+0x10>)
}
 8002696:	2000      	movs	r0, #0
  FLASH->CR |= FLASH_CR_LOCK;
 8002698:	6913      	ldr	r3, [r2, #16]
 800269a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800269e:	6113      	str	r3, [r2, #16]
}
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	40023c00 	.word	0x40023c00

080026a8 <HAL_FLASH_OB_Unlock>:
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 80026a8:	4b06      	ldr	r3, [pc, #24]	; (80026c4 <HAL_FLASH_OB_Unlock+0x1c>)
 80026aa:	695a      	ldr	r2, [r3, #20]
 80026ac:	07d2      	lsls	r2, r2, #31
 80026ae:	d506      	bpl.n	80026be <HAL_FLASH_OB_Unlock+0x16>
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 80026b0:	4a05      	ldr	r2, [pc, #20]	; (80026c8 <HAL_FLASH_OB_Unlock+0x20>)
  return HAL_OK;  
 80026b2:	2000      	movs	r0, #0
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 80026b4:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 80026b6:	f102 3244 	add.w	r2, r2, #1145324612	; 0x44444444
 80026ba:	609a      	str	r2, [r3, #8]
  return HAL_OK;  
 80026bc:	4770      	bx	lr
    return HAL_ERROR;
 80026be:	2001      	movs	r0, #1
}
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	40023c00 	.word	0x40023c00
 80026c8:	08192a3b 	.word	0x08192a3b

080026cc <FLASH_WaitForLastOperation>:
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80026cc:	4b13      	ldr	r3, [pc, #76]	; (800271c <FLASH_WaitForLastOperation+0x50>)
 80026ce:	2200      	movs	r2, #0
{ 
 80026d0:	b570      	push	{r4, r5, r6, lr}
 80026d2:	4604      	mov	r4, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80026d4:	619a      	str	r2, [r3, #24]
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80026d6:	4d12      	ldr	r5, [pc, #72]	; (8002720 <FLASH_WaitForLastOperation+0x54>)
  tickstart = HAL_GetTick();
 80026d8:	f7ff fca0 	bl	800201c <HAL_GetTick>
 80026dc:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80026de:	68eb      	ldr	r3, [r5, #12]
 80026e0:	03db      	lsls	r3, r3, #15
 80026e2:	d407      	bmi.n	80026f4 <FLASH_WaitForLastOperation+0x28>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 80026e4:	68ea      	ldr	r2, [r5, #12]
 80026e6:	f012 02f2 	ands.w	r2, r2, #242	; 0xf2
 80026ea:	d00e      	beq.n	800270a <FLASH_WaitForLastOperation+0x3e>
    FLASH_SetErrorCode();
 80026ec:	f7ff ff8e 	bl	800260c <FLASH_SetErrorCode>
    return HAL_ERROR;
 80026f0:	2001      	movs	r0, #1
 80026f2:	e003      	b.n	80026fc <FLASH_WaitForLastOperation+0x30>
    if(Timeout != HAL_MAX_DELAY)
 80026f4:	1c62      	adds	r2, r4, #1
 80026f6:	d0f2      	beq.n	80026de <FLASH_WaitForLastOperation+0x12>
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80026f8:	b90c      	cbnz	r4, 80026fe <FLASH_WaitForLastOperation+0x32>
        return HAL_TIMEOUT;
 80026fa:	2003      	movs	r0, #3
}  
 80026fc:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80026fe:	f7ff fc8d 	bl	800201c <HAL_GetTick>
 8002702:	1b80      	subs	r0, r0, r6
 8002704:	42a0      	cmp	r0, r4
 8002706:	d9ea      	bls.n	80026de <FLASH_WaitForLastOperation+0x12>
 8002708:	e7f7      	b.n	80026fa <FLASH_WaitForLastOperation+0x2e>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800270a:	68e8      	ldr	r0, [r5, #12]
 800270c:	f010 0001 	ands.w	r0, r0, #1
 8002710:	d0f4      	beq.n	80026fc <FLASH_WaitForLastOperation+0x30>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002712:	2301      	movs	r3, #1
  return HAL_OK;
 8002714:	4610      	mov	r0, r2
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002716:	60eb      	str	r3, [r5, #12]
 8002718:	e7f0      	b.n	80026fc <FLASH_WaitForLastOperation+0x30>
 800271a:	bf00      	nop
 800271c:	20000a44 	.word	0x20000a44
 8002720:	40023c00 	.word	0x40023c00

08002724 <HAL_FLASH_Program>:
{
 8002724:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8002726:	4e1c      	ldr	r6, [pc, #112]	; (8002798 <HAL_FLASH_Program+0x74>)
{
 8002728:	4615      	mov	r5, r2
 800272a:	4607      	mov	r7, r0
 800272c:	460c      	mov	r4, r1
  __HAL_LOCK(&pFlash);
 800272e:	7d32      	ldrb	r2, [r6, #20]
{
 8002730:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(&pFlash);
 8002732:	2a01      	cmp	r2, #1
 8002734:	d02d      	beq.n	8002792 <HAL_FLASH_Program+0x6e>
 8002736:	2201      	movs	r2, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002738:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 800273c:	7532      	strb	r2, [r6, #20]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800273e:	f7ff ffc5 	bl	80026cc <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8002742:	b998      	cbnz	r0, 800276c <HAL_FLASH_Program+0x48>
    switch(TypeProgram)
 8002744:	9b01      	ldr	r3, [sp, #4]
 8002746:	2f03      	cmp	r7, #3
 8002748:	d807      	bhi.n	800275a <HAL_FLASH_Program+0x36>
 800274a:	e8df f007 	tbb	[pc, r7]
 800274e:	1302      	.short	0x1302
 8002750:	1d18      	.short	0x1d18
        FLASH_Program_Byte(Address, (uint8_t) Data);
 8002752:	b2e9      	uxtb	r1, r5
 8002754:	4620      	mov	r0, r4
 8002756:	f7ff ff47 	bl	80025e8 <FLASH_Program_Byte>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800275a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800275e:	f7ff ffb5 	bl	80026cc <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);
 8002762:	4a0e      	ldr	r2, [pc, #56]	; (800279c <HAL_FLASH_Program+0x78>)
 8002764:	6913      	ldr	r3, [r2, #16]
 8002766:	f023 0301 	bic.w	r3, r3, #1
 800276a:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 800276c:	2300      	movs	r3, #0
 800276e:	7533      	strb	r3, [r6, #20]
}
 8002770:	b003      	add	sp, #12
 8002772:	bdf0      	pop	{r4, r5, r6, r7, pc}
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8002774:	b2a9      	uxth	r1, r5
 8002776:	4620      	mov	r0, r4
 8002778:	f7ff ff22 	bl	80025c0 <FLASH_Program_HalfWord>
        break;
 800277c:	e7ed      	b.n	800275a <HAL_FLASH_Program+0x36>
        FLASH_Program_Word(Address, (uint32_t) Data);
 800277e:	4629      	mov	r1, r5
 8002780:	4620      	mov	r0, r4
 8002782:	f7ff ff09 	bl	8002598 <FLASH_Program_Word>
        break;
 8002786:	e7e8      	b.n	800275a <HAL_FLASH_Program+0x36>
        FLASH_Program_DoubleWord(Address, Data);
 8002788:	462a      	mov	r2, r5
 800278a:	4620      	mov	r0, r4
 800278c:	f7ff feec 	bl	8002568 <FLASH_Program_DoubleWord>
        break;
 8002790:	e7e3      	b.n	800275a <HAL_FLASH_Program+0x36>
  __HAL_LOCK(&pFlash);
 8002792:	2002      	movs	r0, #2
 8002794:	e7ec      	b.n	8002770 <HAL_FLASH_Program+0x4c>
 8002796:	bf00      	nop
 8002798:	20000a44 	.word	0x20000a44
 800279c:	40023c00 	.word	0x40023c00

080027a0 <FLASH_MassErase>:
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
 80027a0:	4b0d      	ldr	r3, [pc, #52]	; (80027d8 <FLASH_MassErase+0x38>)
  if(Banks == FLASH_BANK_BOTH)
 80027a2:	2903      	cmp	r1, #3
  FLASH->CR &= CR_PSIZE_MASK;
 80027a4:	691a      	ldr	r2, [r3, #16]
 80027a6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80027aa:	611a      	str	r2, [r3, #16]
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 80027ac:	691a      	ldr	r2, [r3, #16]
  if(Banks == FLASH_BANK_BOTH)
 80027ae:	d104      	bne.n	80027ba <FLASH_MassErase+0x1a>
    FLASH->CR |= FLASH_MER_BIT;
 80027b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    FLASH->CR |= FLASH_CR_MER2;
  }
  else
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;    
 80027b4:	f042 0204 	orr.w	r2, r2, #4
 80027b8:	e003      	b.n	80027c2 <FLASH_MassErase+0x22>
  else if(Banks == FLASH_BANK_2)
 80027ba:	2902      	cmp	r1, #2
 80027bc:	d1fa      	bne.n	80027b4 <FLASH_MassErase+0x14>
    FLASH->CR |= FLASH_CR_MER2;
 80027be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    FLASH->CR |= FLASH_CR_MER1;    
 80027c2:	611a      	str	r2, [r3, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 80027c4:	691a      	ldr	r2, [r3, #16]
 80027c6:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 80027ca:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 80027ce:	6118      	str	r0, [r3, #16]
 80027d0:	f3bf 8f4f 	dsb	sy
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	40023c00 	.word	0x40023c00

080027dc <HAL_FLASHEx_OBGetConfig>:
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER |\
 80027dc:	233f      	movs	r3, #63	; 0x3f
  * @retval uint32_t FLASH Write Protection Option Bytes value
  */
static uint32_t FLASH_OB_GetWRP(void)
{
  /* Return the FLASH write protection Register value */
  return ((uint32_t)(FLASH->OPTCR & 0x0FFF0000));
 80027de:	4a10      	ldr	r2, [pc, #64]	; (8002820 <HAL_FLASHEx_OBGetConfig+0x44>)
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER |\
 80027e0:	6003      	str	r3, [r0, #0]
  return ((uint32_t)(FLASH->OPTCR & 0x0FFF0000));
 80027e2:	4b10      	ldr	r3, [pc, #64]	; (8002824 <HAL_FLASHEx_OBGetConfig+0x48>)
 80027e4:	6959      	ldr	r1, [r3, #20]
 80027e6:	400a      	ands	r2, r1
  */
static uint8_t FLASH_OB_GetRDP(void)
{
  uint8_t readstatus = OB_RDP_LEVEL_0;
  
  if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS)) == OB_RDP_LEVEL_0)
 80027e8:	490f      	ldr	r1, [pc, #60]	; (8002828 <HAL_FLASHEx_OBGetConfig+0x4c>)
  pOBInit->WRPSector = FLASH_OB_GetWRP();
 80027ea:	6082      	str	r2, [r0, #8]
{
 80027ec:	b510      	push	{r4, lr}
  if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS)) == OB_RDP_LEVEL_0)
 80027ee:	780c      	ldrb	r4, [r1, #0]
 80027f0:	2caa      	cmp	r4, #170	; 0xaa
 80027f2:	b2e2      	uxtb	r2, r4
 80027f4:	d003      	beq.n	80027fe <HAL_FLASHEx_OBGetConfig+0x22>
  {
    readstatus = OB_RDP_LEVEL_0;
  }
  else if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS)) == OB_RDP_LEVEL_2)
 80027f6:	780a      	ldrb	r2, [r1, #0]
  {
    readstatus = OB_RDP_LEVEL_2;
  }
  else 
  {
    readstatus = OB_RDP_LEVEL_1;
 80027f8:	2acc      	cmp	r2, #204	; 0xcc
 80027fa:	bf18      	it	ne
 80027fc:	2255      	movne	r2, #85	; 0x55
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 80027fe:	60c2      	str	r2, [r0, #12]
  return ((uint32_t)(FLASH->OPTCR & 0xF00000F0U));
 8002800:	4a0a      	ldr	r2, [pc, #40]	; (800282c <HAL_FLASHEx_OBGetConfig+0x50>)
 8002802:	6959      	ldr	r1, [r3, #20]
 8002804:	400a      	ands	r2, r1
  pOBInit->USERConfig = FLASH_OB_GetUser();
 8002806:	6142      	str	r2, [r0, #20]
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
  */
static uint32_t FLASH_OB_GetBOR(void)
{
  /* Return the FLASH BOR level */
  return ((uint32_t)(FLASH->OPTCR & 0x0C));
 8002808:	695a      	ldr	r2, [r3, #20]
 800280a:	f002 020c 	and.w	r2, r2, #12
  pOBInit->BORLevel = FLASH_OB_GetBOR();
 800280e:	6102      	str	r2, [r0, #16]
  uint32_t Address = 0;
    
	/* Return the Boot base Address */
  if(BootOption == OPTIONBYTE_BOOTADDR_0)
  {			
    Address = FLASH->OPTCR1 & FLASH_OPTCR1_BOOT_ADD0;
 8002810:	699a      	ldr	r2, [r3, #24]
 8002812:	b292      	uxth	r2, r2
  pOBInit->BootAddr0 = FLASH_OB_GetBootAddress(OPTIONBYTE_BOOTADDR_0);
 8002814:	6182      	str	r2, [r0, #24]
	}
  else
	{
		Address = ((FLASH->OPTCR1 & FLASH_OPTCR1_BOOT_ADD1) >> 16);
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	0c1b      	lsrs	r3, r3, #16
  pOBInit->BootAddr1 = FLASH_OB_GetBootAddress(OPTIONBYTE_BOOTADDR_1);
 800281a:	61c3      	str	r3, [r0, #28]
}
 800281c:	bd10      	pop	{r4, pc}
 800281e:	bf00      	nop
 8002820:	0fff0000 	.word	0x0fff0000
 8002824:	40023c00 	.word	0x40023c00
 8002828:	40023c15 	.word	0x40023c15
 800282c:	f00000f0 	.word	0xf00000f0

08002830 <FLASH_Erase_Sector>:
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002830:	b139      	cbz	r1, 8002842 <FLASH_Erase_Sector+0x12>
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002832:	2901      	cmp	r1, #1
 8002834:	d021      	beq.n	800287a <FLASH_Erase_Sector+0x4a>
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002836:	2902      	cmp	r1, #2
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002838:	bf0c      	ite	eq
 800283a:	f44f 7100 	moveq.w	r1, #512	; 0x200
 800283e:	f44f 7140 	movne.w	r1, #768	; 0x300
  FLASH->CR &= CR_PSIZE_MASK;
 8002842:	4b0f      	ldr	r3, [pc, #60]	; (8002880 <FLASH_Erase_Sector+0x50>)
  if(Sector > FLASH_SECTOR_11) 
 8002844:	280b      	cmp	r0, #11
  FLASH->CR &= CR_PSIZE_MASK;
 8002846:	691a      	ldr	r2, [r3, #16]
    Sector += 4;
 8002848:	bf88      	it	hi
 800284a:	3004      	addhi	r0, #4
  FLASH->CR &= CR_PSIZE_MASK;
 800284c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002850:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 8002852:	691a      	ldr	r2, [r3, #16]
 8002854:	4311      	orrs	r1, r2
 8002856:	6119      	str	r1, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002858:	691a      	ldr	r2, [r3, #16]
 800285a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800285e:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002860:	691a      	ldr	r2, [r3, #16]
 8002862:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 8002866:	f040 0002 	orr.w	r0, r0, #2
 800286a:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800286c:	691a      	ldr	r2, [r3, #16]
 800286e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002872:	611a      	str	r2, [r3, #16]
 8002874:	f3bf 8f4f 	dsb	sy
}
 8002878:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800287a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800287e:	e7e0      	b.n	8002842 <FLASH_Erase_Sector+0x12>
 8002880:	40023c00 	.word	0x40023c00

08002884 <HAL_FLASHEx_Erase>:
{
 8002884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 8002888:	4e24      	ldr	r6, [pc, #144]	; (800291c <HAL_FLASHEx_Erase+0x98>)
{
 800288a:	4605      	mov	r5, r0
 800288c:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 800288e:	7d33      	ldrb	r3, [r6, #20]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d040      	beq.n	8002916 <HAL_FLASHEx_Erase+0x92>
 8002894:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002896:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 800289a:	7533      	strb	r3, [r6, #20]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800289c:	f7ff ff16 	bl	80026cc <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80028a0:	4604      	mov	r4, r0
 80028a2:	b9b0      	cbnz	r0, 80028d2 <HAL_FLASHEx_Erase+0x4e>
    *SectorError = 0xFFFFFFFFU;
 80028a4:	f04f 33ff 	mov.w	r3, #4294967295
 80028a8:	f8c8 3000 	str.w	r3, [r8]
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80028ac:	682b      	ldr	r3, [r5, #0]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d114      	bne.n	80028dc <HAL_FLASHEx_Erase+0x58>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80028b2:	6869      	ldr	r1, [r5, #4]
 80028b4:	7c28      	ldrb	r0, [r5, #16]
 80028b6:	f7ff ff73 	bl	80027a0 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80028ba:	f24c 3050 	movw	r0, #50000	; 0xc350
 80028be:	f7ff ff05 	bl	80026cc <FLASH_WaitForLastOperation>
      FLASH->CR &= (~FLASH_MER_BIT);
 80028c2:	4a17      	ldr	r2, [pc, #92]	; (8002920 <HAL_FLASHEx_Erase+0x9c>)
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80028c4:	4604      	mov	r4, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 80028c6:	6913      	ldr	r3, [r2, #16]
 80028c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80028cc:	f023 0304 	bic.w	r3, r3, #4
 80028d0:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 80028d2:	2300      	movs	r3, #0
 80028d4:	7533      	strb	r3, [r6, #20]
}
 80028d6:	4620      	mov	r0, r4
 80028d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80028dc:	68af      	ldr	r7, [r5, #8]
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 80028de:	f8df 9040 	ldr.w	r9, [pc, #64]	; 8002920 <HAL_FLASHEx_Erase+0x9c>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80028e2:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 80028e6:	4413      	add	r3, r2
 80028e8:	42bb      	cmp	r3, r7
 80028ea:	d9f2      	bls.n	80028d2 <HAL_FLASHEx_Erase+0x4e>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80028ec:	7c29      	ldrb	r1, [r5, #16]
 80028ee:	4638      	mov	r0, r7
 80028f0:	f7ff ff9e 	bl	8002830 <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80028f4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80028f8:	f7ff fee8 	bl	80026cc <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 80028fc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8002900:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8002904:	f8c9 3010 	str.w	r3, [r9, #16]
        if(status != HAL_OK) 
 8002908:	b118      	cbz	r0, 8002912 <HAL_FLASHEx_Erase+0x8e>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800290a:	4604      	mov	r4, r0
          *SectorError = index;
 800290c:	f8c8 7000 	str.w	r7, [r8]
          break;
 8002910:	e7df      	b.n	80028d2 <HAL_FLASHEx_Erase+0x4e>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002912:	3701      	adds	r7, #1
 8002914:	e7e5      	b.n	80028e2 <HAL_FLASHEx_Erase+0x5e>
  __HAL_LOCK(&pFlash);
 8002916:	2402      	movs	r4, #2
 8002918:	e7dd      	b.n	80028d6 <HAL_FLASHEx_Erase+0x52>
 800291a:	bf00      	nop
 800291c:	20000a44 	.word	0x20000a44
 8002920:	40023c00 	.word	0x40023c00

08002924 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002924:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002928:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800292a:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002ae8 <HAL_GPIO_Init+0x1c4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800292e:	4a6c      	ldr	r2, [pc, #432]	; (8002ae0 <HAL_GPIO_Init+0x1bc>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002930:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 8002aec <HAL_GPIO_Init+0x1c8>
    ioposition = ((uint32_t)0x01) << position;
 8002934:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002936:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 8002938:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800293a:	ea04 0605 	and.w	r6, r4, r5
    if(iocurrent == ioposition)
 800293e:	43ac      	bics	r4, r5
 8002940:	f040 80b4 	bne.w	8002aac <HAL_GPIO_Init+0x188>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002944:	684c      	ldr	r4, [r1, #4]
 8002946:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800294a:	2503      	movs	r5, #3
 800294c:	f024 0c10 	bic.w	ip, r4, #16
 8002950:	fa05 f50e 	lsl.w	r5, r5, lr
 8002954:	f10c 37ff 	add.w	r7, ip, #4294967295
 8002958:	43ed      	mvns	r5, r5
 800295a:	2f01      	cmp	r7, #1
 800295c:	d811      	bhi.n	8002982 <HAL_GPIO_Init+0x5e>
        temp = GPIOx->OSPEEDR; 
 800295e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002960:	ea07 0a05 	and.w	sl, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8002964:	68cf      	ldr	r7, [r1, #12]
 8002966:	fa07 f70e 	lsl.w	r7, r7, lr
 800296a:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 800296e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002970:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002972:	ea27 0a06 	bic.w	sl, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002976:	f3c4 1700 	ubfx	r7, r4, #4, #1
 800297a:	409f      	lsls	r7, r3
 800297c:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 8002980:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8002982:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002984:	f1bc 0f02 	cmp.w	ip, #2
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002988:	ea07 0a05 	and.w	sl, r7, r5
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800298c:	688f      	ldr	r7, [r1, #8]
 800298e:	fa07 f70e 	lsl.w	r7, r7, lr
 8002992:	ea47 070a 	orr.w	r7, r7, sl
      GPIOx->PUPDR = temp;
 8002996:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002998:	d116      	bne.n	80029c8 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3];
 800299a:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800299e:	f003 0b07 	and.w	fp, r3, #7
 80029a2:	f04f 0c0f 	mov.w	ip, #15
 80029a6:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 80029aa:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 80029ae:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80029b2:	fa0c fc0b 	lsl.w	ip, ip, fp
 80029b6:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80029ba:	690f      	ldr	r7, [r1, #16]
 80029bc:	fa07 f70b 	lsl.w	r7, r7, fp
 80029c0:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3] = temp;
 80029c4:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 80029c8:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80029ca:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80029cc:	f004 0703 	and.w	r7, r4, #3
 80029d0:	fa07 fe0e 	lsl.w	lr, r7, lr
 80029d4:	ea4e 0505 	orr.w	r5, lr, r5
      GPIOx->MODER = temp;
 80029d8:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029da:	00e5      	lsls	r5, r4, #3
 80029dc:	d566      	bpl.n	8002aac <HAL_GPIO_Init+0x188>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029de:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 80029e2:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80029e6:	f003 0c03 	and.w	ip, r3, #3
 80029ea:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ee:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 80029f2:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80029f6:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029fa:	f8c8 5044 	str.w	r5, [r8, #68]	; 0x44
 80029fe:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8002a02:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 8002a06:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 8002a0a:	9501      	str	r5, [sp, #4]
 8002a0c:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002a0e:	fa0e f50c 	lsl.w	r5, lr, ip
        temp = SYSCFG->EXTICR[position >> 2];
 8002a12:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002a16:	ea2a 0e05 	bic.w	lr, sl, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002a1a:	4d32      	ldr	r5, [pc, #200]	; (8002ae4 <HAL_GPIO_Init+0x1c0>)
 8002a1c:	42a8      	cmp	r0, r5
 8002a1e:	d04c      	beq.n	8002aba <HAL_GPIO_Init+0x196>
 8002a20:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002a24:	42a8      	cmp	r0, r5
 8002a26:	d04a      	beq.n	8002abe <HAL_GPIO_Init+0x19a>
 8002a28:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002a2c:	42a8      	cmp	r0, r5
 8002a2e:	d048      	beq.n	8002ac2 <HAL_GPIO_Init+0x19e>
 8002a30:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002a34:	42a8      	cmp	r0, r5
 8002a36:	d046      	beq.n	8002ac6 <HAL_GPIO_Init+0x1a2>
 8002a38:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002a3c:	42a8      	cmp	r0, r5
 8002a3e:	d044      	beq.n	8002aca <HAL_GPIO_Init+0x1a6>
 8002a40:	4548      	cmp	r0, r9
 8002a42:	d044      	beq.n	8002ace <HAL_GPIO_Init+0x1aa>
 8002a44:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002a48:	42a8      	cmp	r0, r5
 8002a4a:	d042      	beq.n	8002ad2 <HAL_GPIO_Init+0x1ae>
 8002a4c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002a50:	42a8      	cmp	r0, r5
 8002a52:	d040      	beq.n	8002ad6 <HAL_GPIO_Init+0x1b2>
 8002a54:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002a58:	42a8      	cmp	r0, r5
 8002a5a:	d03e      	beq.n	8002ada <HAL_GPIO_Init+0x1b6>
 8002a5c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002a60:	42a8      	cmp	r0, r5
 8002a62:	bf0c      	ite	eq
 8002a64:	2509      	moveq	r5, #9
 8002a66:	250a      	movne	r5, #10
 8002a68:	fa05 f50c 	lsl.w	r5, r5, ip
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a6c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002a70:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8002a74:	60bd      	str	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 8002a76:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->IMR;
 8002a7a:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8002a7c:	bf0c      	ite	eq
 8002a7e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8002a80:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a82:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 8002a86:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8002a88:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8002a8a:	bf0c      	ite	eq
 8002a8c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8002a8e:	4335      	orrne	r5, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a90:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 8002a94:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8002a96:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8002a98:	bf0c      	ite	eq
 8002a9a:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8002a9c:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a9e:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8002aa0:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8002aa2:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8002aa4:	bf54      	ite	pl
 8002aa6:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8002aa8:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8002aaa:	60d5      	str	r5, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002aac:	3301      	adds	r3, #1
 8002aae:	2b10      	cmp	r3, #16
 8002ab0:	f47f af40 	bne.w	8002934 <HAL_GPIO_Init+0x10>
      }
    }
  }
}
 8002ab4:	b003      	add	sp, #12
 8002ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002aba:	2500      	movs	r5, #0
 8002abc:	e7d4      	b.n	8002a68 <HAL_GPIO_Init+0x144>
 8002abe:	2501      	movs	r5, #1
 8002ac0:	e7d2      	b.n	8002a68 <HAL_GPIO_Init+0x144>
 8002ac2:	2502      	movs	r5, #2
 8002ac4:	e7d0      	b.n	8002a68 <HAL_GPIO_Init+0x144>
 8002ac6:	2503      	movs	r5, #3
 8002ac8:	e7ce      	b.n	8002a68 <HAL_GPIO_Init+0x144>
 8002aca:	2504      	movs	r5, #4
 8002acc:	e7cc      	b.n	8002a68 <HAL_GPIO_Init+0x144>
 8002ace:	2505      	movs	r5, #5
 8002ad0:	e7ca      	b.n	8002a68 <HAL_GPIO_Init+0x144>
 8002ad2:	2506      	movs	r5, #6
 8002ad4:	e7c8      	b.n	8002a68 <HAL_GPIO_Init+0x144>
 8002ad6:	2507      	movs	r5, #7
 8002ad8:	e7c6      	b.n	8002a68 <HAL_GPIO_Init+0x144>
 8002ada:	2508      	movs	r5, #8
 8002adc:	e7c4      	b.n	8002a68 <HAL_GPIO_Init+0x144>
 8002ade:	bf00      	nop
 8002ae0:	40013c00 	.word	0x40013c00
 8002ae4:	40020000 	.word	0x40020000
 8002ae8:	40023800 	.word	0x40023800
 8002aec:	40021400 	.word	0x40021400

08002af0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002af4:	2200      	movs	r2, #0
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002af6:	4c4a      	ldr	r4, [pc, #296]	; (8002c20 <HAL_GPIO_DeInit+0x130>)
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8002af8:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8002c28 <HAL_GPIO_DeInit+0x138>
 8002afc:	f8df a12c 	ldr.w	sl, [pc, #300]	; 8002c2c <HAL_GPIO_DeInit+0x13c>
 8002b00:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8002c30 <HAL_GPIO_DeInit+0x140>
    ioposition = ((uint32_t)0x01) << position;
 8002b04:	2301      	movs	r3, #1
 8002b06:	fa03 fe02 	lsl.w	lr, r3, r2
    if(iocurrent == ioposition)
 8002b0a:	ea3e 0301 	bics.w	r3, lr, r1
    iocurrent = (GPIO_Pin) & ioposition;
 8002b0e:	ea0e 0701 	and.w	r7, lr, r1
    if(iocurrent == ioposition)
 8002b12:	d16e      	bne.n	8002bf2 <HAL_GPIO_DeInit+0x102>
      tmp = SYSCFG->EXTICR[position >> 2];
 8002b14:	f022 0503 	bic.w	r5, r2, #3
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002b18:	f002 0c03 	and.w	ip, r2, #3
 8002b1c:	260f      	movs	r6, #15
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8002b1e:	4b41      	ldr	r3, [pc, #260]	; (8002c24 <HAL_GPIO_DeInit+0x134>)
 8002b20:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002b24:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8002b28:	4298      	cmp	r0, r3
 8002b2a:	f505 359c 	add.w	r5, r5, #79872	; 0x13800
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002b2e:	fa06 f60c 	lsl.w	r6, r6, ip
      tmp = SYSCFG->EXTICR[position >> 2];
 8002b32:	f8d5 8008 	ldr.w	r8, [r5, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002b36:	ea06 0808 	and.w	r8, r6, r8
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8002b3a:	d05f      	beq.n	8002bfc <HAL_GPIO_DeInit+0x10c>
 8002b3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b40:	4298      	cmp	r0, r3
 8002b42:	d05d      	beq.n	8002c00 <HAL_GPIO_DeInit+0x110>
 8002b44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b48:	4298      	cmp	r0, r3
 8002b4a:	d05b      	beq.n	8002c04 <HAL_GPIO_DeInit+0x114>
 8002b4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b50:	4298      	cmp	r0, r3
 8002b52:	d059      	beq.n	8002c08 <HAL_GPIO_DeInit+0x118>
 8002b54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b58:	4298      	cmp	r0, r3
 8002b5a:	d057      	beq.n	8002c0c <HAL_GPIO_DeInit+0x11c>
 8002b5c:	4548      	cmp	r0, r9
 8002b5e:	d057      	beq.n	8002c10 <HAL_GPIO_DeInit+0x120>
 8002b60:	4550      	cmp	r0, sl
 8002b62:	d057      	beq.n	8002c14 <HAL_GPIO_DeInit+0x124>
 8002b64:	4558      	cmp	r0, fp
 8002b66:	d057      	beq.n	8002c18 <HAL_GPIO_DeInit+0x128>
 8002b68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b6c:	4298      	cmp	r0, r3
 8002b6e:	d055      	beq.n	8002c1c <HAL_GPIO_DeInit+0x12c>
 8002b70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b74:	4298      	cmp	r0, r3
 8002b76:	bf0c      	ite	eq
 8002b78:	2309      	moveq	r3, #9
 8002b7a:	230a      	movne	r3, #10
 8002b7c:	fa03 f30c 	lsl.w	r3, r3, ip
 8002b80:	4543      	cmp	r3, r8
 8002b82:	d113      	bne.n	8002bac <HAL_GPIO_DeInit+0xbc>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002b84:	6823      	ldr	r3, [r4, #0]
 8002b86:	ea23 0307 	bic.w	r3, r3, r7
 8002b8a:	6023      	str	r3, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002b8c:	6863      	ldr	r3, [r4, #4]
 8002b8e:	ea23 0307 	bic.w	r3, r3, r7
 8002b92:	6063      	str	r3, [r4, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002b94:	68a3      	ldr	r3, [r4, #8]
 8002b96:	ea23 0307 	bic.w	r3, r3, r7
 8002b9a:	60a3      	str	r3, [r4, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002b9c:	68e3      	ldr	r3, [r4, #12]
 8002b9e:	ea23 0707 	bic.w	r7, r3, r7
 8002ba2:	60e7      	str	r7, [r4, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8002ba4:	68ab      	ldr	r3, [r5, #8]
 8002ba6:	ea23 0606 	bic.w	r6, r3, r6
 8002baa:	60ae      	str	r6, [r5, #8]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002bac:	2603      	movs	r6, #3
 8002bae:	0053      	lsls	r3, r2, #1
 8002bb0:	6805      	ldr	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002bb2:	f002 0c07 	and.w	ip, r2, #7
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002bb6:	fa06 f303 	lsl.w	r3, r6, r3
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002bba:	270f      	movs	r7, #15
 8002bbc:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002bc0:	ea25 0503 	bic.w	r5, r5, r3
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002bc4:	fa07 f70c 	lsl.w	r7, r7, ip
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002bc8:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002bca:	fa22 f506 	lsr.w	r5, r2, r6
 8002bce:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8002bd2:	6a2e      	ldr	r6, [r5, #32]
 8002bd4:	ea26 0707 	bic.w	r7, r6, r7
 8002bd8:	622f      	str	r7, [r5, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002bda:	68c5      	ldr	r5, [r0, #12]
 8002bdc:	ea25 0503 	bic.w	r5, r5, r3
 8002be0:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002be2:	6845      	ldr	r5, [r0, #4]
 8002be4:	ea25 050e 	bic.w	r5, r5, lr
 8002be8:	6045      	str	r5, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002bea:	6885      	ldr	r5, [r0, #8]
 8002bec:	ea25 0303 	bic.w	r3, r5, r3
 8002bf0:	6083      	str	r3, [r0, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002bf2:	3201      	adds	r2, #1
 8002bf4:	2a10      	cmp	r2, #16
 8002bf6:	d185      	bne.n	8002b04 <HAL_GPIO_DeInit+0x14>
    }
  }
}
 8002bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	e7bd      	b.n	8002b7c <HAL_GPIO_DeInit+0x8c>
 8002c00:	2301      	movs	r3, #1
 8002c02:	e7bb      	b.n	8002b7c <HAL_GPIO_DeInit+0x8c>
 8002c04:	2302      	movs	r3, #2
 8002c06:	e7b9      	b.n	8002b7c <HAL_GPIO_DeInit+0x8c>
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e7b7      	b.n	8002b7c <HAL_GPIO_DeInit+0x8c>
 8002c0c:	2304      	movs	r3, #4
 8002c0e:	e7b5      	b.n	8002b7c <HAL_GPIO_DeInit+0x8c>
 8002c10:	2305      	movs	r3, #5
 8002c12:	e7b3      	b.n	8002b7c <HAL_GPIO_DeInit+0x8c>
 8002c14:	2306      	movs	r3, #6
 8002c16:	e7b1      	b.n	8002b7c <HAL_GPIO_DeInit+0x8c>
 8002c18:	2307      	movs	r3, #7
 8002c1a:	e7af      	b.n	8002b7c <HAL_GPIO_DeInit+0x8c>
 8002c1c:	2308      	movs	r3, #8
 8002c1e:	e7ad      	b.n	8002b7c <HAL_GPIO_DeInit+0x8c>
 8002c20:	40013c00 	.word	0x40013c00
 8002c24:	40020000 	.word	0x40020000
 8002c28:	40021400 	.word	0x40021400
 8002c2c:	40021800 	.word	0x40021800
 8002c30:	40021c00 	.word	0x40021c00

08002c34 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c34:	b10a      	cbz	r2, 8002c3a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002c36:	6181      	str	r1, [r0, #24]
  }
}
 8002c38:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002c3a:	0409      	lsls	r1, r1, #16
 8002c3c:	e7fb      	b.n	8002c36 <HAL_GPIO_WritePin+0x2>

08002c3e <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c3e:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c40:	ea01 0203 	and.w	r2, r1, r3
 8002c44:	ea21 0103 	bic.w	r1, r1, r3
 8002c48:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002c4c:	6181      	str	r1, [r0, #24]
}
 8002c4e:	4770      	bx	lr

08002c50 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002c50:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002c52:	4604      	mov	r4, r0
{
 8002c54:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 8002c56:	b360      	cbz	r0, 8002cb2 <HAL_PCD_Init+0x62>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c58:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
  USBx = hpcd->Instance;
 8002c5c:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c5e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002c62:	b91b      	cbnz	r3, 8002c6c <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c64:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c68:	f003 fae6 	bl	8006238 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c6c:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c6e:	466e      	mov	r6, sp
 8002c70:	1d27      	adds	r7, r4, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c72:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002c76:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  __HAL_PCD_DISABLE(hpcd);
 8002c78:	4625      	mov	r5, r4
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002c7a:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_PCD_DISABLE(hpcd);
 8002c7e:	f855 0b10 	ldr.w	r0, [r5], #16
    hpcd->Init.dma_enable = 0U;
 8002c82:	bf08      	it	eq
 8002c84:	6123      	streq	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 8002c86:	f001 ffd5 	bl	8004c34 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c8c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002c8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c90:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002c92:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002c96:	4625      	mov	r5, r4
 8002c98:	e886 0003 	stmia.w	r6, {r0, r1}
 8002c9c:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8002ca0:	f855 0b10 	ldr.w	r0, [r5], #16
 8002ca4:	f001 ff14 	bl	8004ad0 <USB_CoreInit>
 8002ca8:	4606      	mov	r6, r0
 8002caa:	b120      	cbz	r0, 8002cb6 <HAL_PCD_Init+0x66>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cac:	2302      	movs	r3, #2
 8002cae:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8002cb2:	2501      	movs	r5, #1
 8002cb4:	e052      	b.n	8002d5c <HAL_PCD_Init+0x10c>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002cb6:	4601      	mov	r1, r0
 8002cb8:	6820      	ldr	r0, [r4, #0]
 8002cba:	f001 ffc1 	bl	8004c40 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cbe:	4630      	mov	r0, r6
 8002cc0:	f8d4 c004 	ldr.w	ip, [r4, #4]
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002cc4:	261c      	movs	r6, #28
 8002cc6:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002cca:	4601      	mov	r1, r0
 8002ccc:	b2c2      	uxtb	r2, r0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cce:	3001      	adds	r0, #1
 8002cd0:	4594      	cmp	ip, r2
 8002cd2:	d81b      	bhi.n	8002d0c <HAL_PCD_Init+0xbc>
 8002cd4:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002cd6:	261c      	movs	r6, #28
 8002cd8:	4619      	mov	r1, r3
 8002cda:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cdc:	3301      	adds	r3, #1
 8002cde:	4584      	cmp	ip, r0
 8002ce0:	d822      	bhi.n	8002d28 <HAL_PCD_Init+0xd8>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ce2:	466e      	mov	r6, sp
 8002ce4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ce6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002ce8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cea:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002cec:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002cf0:	e886 0003 	stmia.w	r6, {r0, r1}
 8002cf4:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8002cf8:	6820      	ldr	r0, [r4, #0]
 8002cfa:	f001 ffe3 	bl	8004cc4 <USB_DevInit>
 8002cfe:	2301      	movs	r3, #1
 8002d00:	4605      	mov	r5, r0
 8002d02:	b1f0      	cbz	r0, 8002d42 <HAL_PCD_Init+0xf2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d04:	2202      	movs	r2, #2
 8002d06:	f884 23bd 	strb.w	r2, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8002d0a:	e7d2      	b.n	8002cb2 <HAL_PCD_Init+0x62>
    hpcd->IN_ep[i].is_in = 1U;
 8002d0c:	fb06 4302 	mla	r3, r6, r2, r4
 8002d10:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8002d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002d18:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002d1c:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d20:	6519      	str	r1, [r3, #80]	; 0x50
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002d22:	e9c3 1111 	strd	r1, r1, [r3, #68]	; 0x44
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d26:	e7d1      	b.n	8002ccc <HAL_PCD_Init+0x7c>
    hpcd->OUT_ep[i].is_in = 0U;
 8002d28:	fb06 4200 	mla	r2, r6, r0, r4
 8002d2c:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 8002d30:	f882 01fc 	strb.w	r0, [r2, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d34:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d38:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d3c:	e9c2 1181 	strd	r1, r1, [r2, #516]	; 0x204
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d40:	e7cb      	b.n	8002cda <HAL_PCD_Init+0x8a>
  }

  hpcd->USB_Address = 0U;
 8002d42:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002d46:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002d4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d102      	bne.n	8002d56 <HAL_PCD_Init+0x106>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002d50:	4620      	mov	r0, r4
 8002d52:	f000 fc44 	bl	80035de <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002d56:	6820      	ldr	r0, [r4, #0]
 8002d58:	f002 fb06 	bl	8005368 <USB_DevDisconnect>

  return HAL_OK;
}
 8002d5c:	4628      	mov	r0, r5
 8002d5e:	b00b      	add	sp, #44	; 0x2c
 8002d60:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d62 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002d62:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8002d64:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
{
 8002d68:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d00c      	beq.n	8002d88 <HAL_PCD_Start+0x26>
 8002d6e:	2301      	movs	r3, #1
 8002d70:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 8002d74:	6800      	ldr	r0, [r0, #0]
 8002d76:	f001 ff57 	bl	8004c28 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002d7a:	6820      	ldr	r0, [r4, #0]
 8002d7c:	f002 fae6 	bl	800534c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002d80:	2000      	movs	r0, #0
 8002d82:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc

  return HAL_OK;
}
 8002d86:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8002d88:	2002      	movs	r0, #2
 8002d8a:	e7fc      	b.n	8002d86 <HAL_PCD_Start+0x24>

08002d8c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d90:	6806      	ldr	r6, [r0, #0]
{
 8002d92:	b087      	sub	sp, #28
 8002d94:	4604      	mov	r4, r0
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002d96:	4630      	mov	r0, r6
 8002d98:	f002 fb23 	bl	80053e2 <USB_GetMode>
 8002d9c:	9002      	str	r0, [sp, #8]
 8002d9e:	2800      	cmp	r0, #0
 8002da0:	f040 813c 	bne.w	800301c <HAL_PCD_IRQHandler+0x290>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002da4:	6820      	ldr	r0, [r4, #0]
 8002da6:	f002 faed 	bl	8005384 <USB_ReadInterrupts>
 8002daa:	2800      	cmp	r0, #0
 8002dac:	f000 8136 	beq.w	800301c <HAL_PCD_IRQHandler+0x290>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002db0:	6820      	ldr	r0, [r4, #0]
 8002db2:	f002 fae7 	bl	8005384 <USB_ReadInterrupts>
 8002db6:	0782      	lsls	r2, r0, #30
 8002db8:	d504      	bpl.n	8002dc4 <HAL_PCD_IRQHandler+0x38>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002dba:	6822      	ldr	r2, [r4, #0]
 8002dbc:	6953      	ldr	r3, [r2, #20]
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	6153      	str	r3, [r2, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002dc4:	6820      	ldr	r0, [r4, #0]
 8002dc6:	f002 fadd 	bl	8005384 <USB_ReadInterrupts>
 8002dca:	06c3      	lsls	r3, r0, #27
 8002dcc:	d52a      	bpl.n	8002e24 <HAL_PCD_IRQHandler+0x98>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002dce:	6822      	ldr	r2, [r4, #0]
 8002dd0:	6993      	ldr	r3, [r2, #24]
 8002dd2:	f023 0310 	bic.w	r3, r3, #16
 8002dd6:	6193      	str	r3, [r2, #24]

      temp = USBx->GRXSTSP;
 8002dd8:	6a37      	ldr	r7, [r6, #32]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002dda:	f3c7 4343 	ubfx	r3, r7, #17, #4
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002dde:	f007 050f 	and.w	r5, r7, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	f040 811d 	bne.w	8003022 <HAL_PCD_IRQHandler+0x296>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002de8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002dec:	421f      	tst	r7, r3
 8002dee:	d014      	beq.n	8002e1a <HAL_PCD_IRQHandler+0x8e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002df0:	231c      	movs	r3, #28
 8002df2:	f3c7 180a 	ubfx	r8, r7, #4, #11
 8002df6:	4630      	mov	r0, r6
 8002df8:	fb03 4505 	mla	r5, r3, r5, r4
 8002dfc:	4642      	mov	r2, r8
 8002dfe:	f8d5 1208 	ldr.w	r1, [r5, #520]	; 0x208
 8002e02:	f002 fa31 	bl	8005268 <USB_ReadPacket>
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e06:	f8d5 2208 	ldr.w	r2, [r5, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e0a:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e0e:	4442      	add	r2, r8
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e10:	4443      	add	r3, r8
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e12:	f8c5 2208 	str.w	r2, [r5, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e16:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e1a:	6822      	ldr	r2, [r4, #0]
 8002e1c:	6993      	ldr	r3, [r2, #24]
 8002e1e:	f043 0310 	orr.w	r3, r3, #16
 8002e22:	6193      	str	r3, [r2, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002e24:	6820      	ldr	r0, [r4, #0]
 8002e26:	f002 faad 	bl	8005384 <USB_ReadInterrupts>
 8002e2a:	0307      	lsls	r7, r0, #12
 8002e2c:	f100 810d 	bmi.w	800304a <HAL_PCD_IRQHandler+0x2be>
        epnum++;
        ep_intr >>= 1U;
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002e30:	6820      	ldr	r0, [r4, #0]
 8002e32:	f002 faa7 	bl	8005384 <USB_ReadInterrupts>
 8002e36:	0345      	lsls	r5, r0, #13
 8002e38:	d50c      	bpl.n	8002e54 <HAL_PCD_IRQHandler+0xc8>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002e3a:	4625      	mov	r5, r4
 8002e3c:	f506 6910 	add.w	r9, r6, #2304	; 0x900

      epnum = 0U;
 8002e40:	f04f 0800 	mov.w	r8, #0
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002e44:	6820      	ldr	r0, [r4, #0]
 8002e46:	f002 faa9 	bl	800539c <USB_ReadDevAllInEpInterrupt>
 8002e4a:	9003      	str	r0, [sp, #12]

      while (ep_intr != 0U)
 8002e4c:	9b03      	ldr	r3, [sp, #12]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f040 81a4 	bne.w	800319c <HAL_PCD_IRQHandler+0x410>
        ep_intr >>= 1U;
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002e54:	6820      	ldr	r0, [r4, #0]
 8002e56:	f002 fa95 	bl	8005384 <USB_ReadInterrupts>
 8002e5a:	2800      	cmp	r0, #0
 8002e5c:	da15      	bge.n	8002e8a <HAL_PCD_IRQHandler+0xfe>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002e5e:	f8d6 3804 	ldr.w	r3, [r6, #2052]	; 0x804
 8002e62:	f023 0301 	bic.w	r3, r3, #1
 8002e66:	f8c6 3804 	str.w	r3, [r6, #2052]	; 0x804

      if (hpcd->LPM_State == LPM_L1)
 8002e6a:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	f040 8225 	bne.w	80032be <HAL_PCD_IRQHandler+0x532>
      {
        hpcd->LPM_State = LPM_L0;
 8002e74:	2100      	movs	r1, #0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002e76:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L0;
 8002e78:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002e7c:	f003 fb34 	bl	80064e8 <HAL_PCDEx_LPM_Callback>
#else
        HAL_PCD_ResumeCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002e80:	6822      	ldr	r2, [r4, #0]
 8002e82:	6953      	ldr	r3, [r2, #20]
 8002e84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e88:	6153      	str	r3, [r2, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002e8a:	6820      	ldr	r0, [r4, #0]
 8002e8c:	f002 fa7a 	bl	8005384 <USB_ReadInterrupts>
 8002e90:	0500      	lsls	r0, r0, #20
 8002e92:	d50b      	bpl.n	8002eac <HAL_PCD_IRQHandler+0x120>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002e94:	f8d6 3808 	ldr.w	r3, [r6, #2056]	; 0x808
 8002e98:	07d9      	lsls	r1, r3, #31
 8002e9a:	d502      	bpl.n	8002ea2 <HAL_PCD_IRQHandler+0x116>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002e9c:	4620      	mov	r0, r4
 8002e9e:	f003 fa3f 	bl	8006320 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002ea2:	6822      	ldr	r2, [r4, #0]
 8002ea4:	6953      	ldr	r3, [r2, #20]
 8002ea6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002eaa:	6153      	str	r3, [r2, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002eac:	6820      	ldr	r0, [r4, #0]
 8002eae:	f002 fa69 	bl	8005384 <USB_ReadInterrupts>
 8002eb2:	0102      	lsls	r2, r0, #4
 8002eb4:	d514      	bpl.n	8002ee0 <HAL_PCD_IRQHandler+0x154>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002eb6:	6823      	ldr	r3, [r4, #0]
 8002eb8:	695a      	ldr	r2, [r3, #20]
 8002eba:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002ebe:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002ec0:	f894 23f4 	ldrb.w	r2, [r4, #1012]	; 0x3f4
 8002ec4:	2a00      	cmp	r2, #0
 8002ec6:	f040 81fe 	bne.w	80032c6 <HAL_PCD_IRQHandler+0x53a>
      {
        hpcd->LPM_State = LPM_L1;
 8002eca:	2101      	movs	r1, #1
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002ecc:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L1;
 8002ece:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed4:	f3c3 0383 	ubfx	r3, r3, #2, #4
 8002ed8:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002edc:	f003 fb04 	bl	80064e8 <HAL_PCDEx_LPM_Callback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002ee0:	6820      	ldr	r0, [r4, #0]
 8002ee2:	f002 fa4f 	bl	8005384 <USB_ReadInterrupts>
 8002ee6:	04c3      	lsls	r3, r0, #19
 8002ee8:	d536      	bpl.n	8002f58 <HAL_PCD_IRQHandler+0x1cc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002eea:	f8d6 3804 	ldr.w	r3, [r6, #2052]	; 0x804
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002eee:	2110      	movs	r1, #16
 8002ef0:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002ef2:	f506 6500 	add.w	r5, r6, #2048	; 0x800
 8002ef6:	f023 0301 	bic.w	r3, r3, #1
 8002efa:	606b      	str	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002efc:	f001 feb8 	bl	8004c70 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f00:	f506 6310 	add.w	r3, r6, #2304	; 0x900
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002f04:	f64f 317f 	movw	r1, #64383	; 0xfb7f
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f08:	6862      	ldr	r2, [r4, #4]
 8002f0a:	9802      	ldr	r0, [sp, #8]
 8002f0c:	4282      	cmp	r2, r0
 8002f0e:	f200 81de 	bhi.w	80032ce <HAL_PCD_IRQHandler+0x542>
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002f12:	69eb      	ldr	r3, [r5, #28]
 8002f14:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002f18:	61eb      	str	r3, [r5, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002f1a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	f000 81f6 	beq.w	800330e <HAL_PCD_IRQHandler+0x582>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002f22:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 8002f26:	f043 030b 	orr.w	r3, r3, #11
 8002f2a:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002f2e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8002f30:	f043 030b 	orr.w	r3, r3, #11
 8002f34:	646b      	str	r3, [r5, #68]	; 0x44
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002f36:	f8d6 3800 	ldr.w	r3, [r6, #2048]	; 0x800

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f3a:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8002f3e:	7c21      	ldrb	r1, [r4, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002f40:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f44:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002f46:	f8c6 3800 	str.w	r3, [r6, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f4a:	f002 fa5f 	bl	800540c <USB_EP0_OutStart>
                             (uint8_t *)hpcd->Setup);

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002f4e:	6822      	ldr	r2, [r4, #0]
 8002f50:	6953      	ldr	r3, [r2, #20]
 8002f52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f56:	6153      	str	r3, [r2, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002f58:	6820      	ldr	r0, [r4, #0]
 8002f5a:	f002 fa13 	bl	8005384 <USB_ReadInterrupts>
 8002f5e:	0487      	lsls	r7, r0, #18
 8002f60:	d516      	bpl.n	8002f90 <HAL_PCD_IRQHandler+0x204>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002f62:	6820      	ldr	r0, [r4, #0]
 8002f64:	f002 fa41 	bl	80053ea <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002f68:	6820      	ldr	r0, [r4, #0]
 8002f6a:	f001 ff63 	bl	8004e34 <USB_GetDevSpeed>

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f6e:	6825      	ldr	r5, [r4, #0]
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002f70:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f72:	f000 fe1b 	bl	8003bac <HAL_RCC_GetHCLKFreq>
 8002f76:	7b22      	ldrb	r2, [r4, #12]
 8002f78:	4601      	mov	r1, r0
 8002f7a:	4628      	mov	r0, r5
 8002f7c:	f001 fde4 	bl	8004b48 <USB_SetTurnaroundTime>
                                  (uint8_t)hpcd->Init.speed);

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002f80:	4620      	mov	r0, r4
 8002f82:	f003 f9ba 	bl	80062fa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002f86:	6822      	ldr	r2, [r4, #0]
 8002f88:	6953      	ldr	r3, [r2, #20]
 8002f8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f8e:	6153      	str	r3, [r2, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002f90:	6820      	ldr	r0, [r4, #0]
 8002f92:	f002 f9f7 	bl	8005384 <USB_ReadInterrupts>
 8002f96:	0706      	lsls	r6, r0, #28
 8002f98:	d507      	bpl.n	8002faa <HAL_PCD_IRQHandler+0x21e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002f9a:	4620      	mov	r0, r4
 8002f9c:	f003 f9a9 	bl	80062f2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002fa0:	6822      	ldr	r2, [r4, #0]
 8002fa2:	6953      	ldr	r3, [r2, #20]
 8002fa4:	f003 0308 	and.w	r3, r3, #8
 8002fa8:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002faa:	6820      	ldr	r0, [r4, #0]
 8002fac:	f002 f9ea 	bl	8005384 <USB_ReadInterrupts>
 8002fb0:	02c5      	lsls	r5, r0, #11
 8002fb2:	d508      	bpl.n	8002fc6 <HAL_PCD_IRQHandler+0x23a>
      epnum = 0U;

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002fb4:	2100      	movs	r1, #0
 8002fb6:	4620      	mov	r0, r4
 8002fb8:	f003 f9d2 	bl	8006360 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002fbc:	6822      	ldr	r2, [r4, #0]
 8002fbe:	6953      	ldr	r3, [r2, #20]
 8002fc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fc4:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002fc6:	6820      	ldr	r0, [r4, #0]
 8002fc8:	f002 f9dc 	bl	8005384 <USB_ReadInterrupts>
 8002fcc:	0280      	lsls	r0, r0, #10
 8002fce:	d508      	bpl.n	8002fe2 <HAL_PCD_IRQHandler+0x256>
      epnum = 0U;

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002fd0:	2100      	movs	r1, #0
 8002fd2:	4620      	mov	r0, r4
 8002fd4:	f003 f9c0 	bl	8006358 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002fd8:	6822      	ldr	r2, [r4, #0]
 8002fda:	6953      	ldr	r3, [r2, #20]
 8002fdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fe0:	6153      	str	r3, [r2, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002fe2:	6820      	ldr	r0, [r4, #0]
 8002fe4:	f002 f9ce 	bl	8005384 <USB_ReadInterrupts>
 8002fe8:	0041      	lsls	r1, r0, #1
 8002fea:	d507      	bpl.n	8002ffc <HAL_PCD_IRQHandler+0x270>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002fec:	4620      	mov	r0, r4
 8002fee:	f003 f9bb 	bl	8006368 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002ff2:	6822      	ldr	r2, [r4, #0]
 8002ff4:	6953      	ldr	r3, [r2, #20]
 8002ff6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002ffa:	6153      	str	r3, [r2, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002ffc:	6820      	ldr	r0, [r4, #0]
 8002ffe:	f002 f9c1 	bl	8005384 <USB_ReadInterrupts>
 8003002:	0742      	lsls	r2, r0, #29
 8003004:	d50a      	bpl.n	800301c <HAL_PCD_IRQHandler+0x290>
    {
      temp = hpcd->Instance->GOTGINT;
 8003006:	6823      	ldr	r3, [r4, #0]
 8003008:	685d      	ldr	r5, [r3, #4]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800300a:	076b      	lsls	r3, r5, #29
 800300c:	d502      	bpl.n	8003014 <HAL_PCD_IRQHandler+0x288>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800300e:	4620      	mov	r0, r4
 8003010:	f003 f9ae 	bl	8006370 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003014:	6822      	ldr	r2, [r4, #0]
 8003016:	6853      	ldr	r3, [r2, #4]
 8003018:	432b      	orrs	r3, r5
 800301a:	6053      	str	r3, [r2, #4]
    }
  }
}
 800301c:	b007      	add	sp, #28
 800301e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003022:	2b06      	cmp	r3, #6
 8003024:	f47f aef9 	bne.w	8002e1a <HAL_PCD_IRQHandler+0x8e>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003028:	2208      	movs	r2, #8
 800302a:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 800302e:	4630      	mov	r0, r6
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003030:	f3c7 170a 	ubfx	r7, r7, #4, #11
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003034:	f002 f918 	bl	8005268 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003038:	231c      	movs	r3, #28
 800303a:	fb03 4505 	mla	r5, r3, r5, r4
 800303e:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 8003042:	441f      	add	r7, r3
 8003044:	f8c5 7214 	str.w	r7, [r5, #532]	; 0x214
 8003048:	e6e7      	b.n	8002e1a <HAL_PCD_IRQHandler+0x8e>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800304a:	f506 6730 	add.w	r7, r6, #2816	; 0xb00
 800304e:	f504 7a01 	add.w	sl, r4, #516	; 0x204
      epnum = 0U;
 8003052:	2500      	movs	r5, #0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003054:	f8df b2d0 	ldr.w	fp, [pc, #720]	; 8003328 <HAL_PCD_IRQHandler+0x59c>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003058:	6820      	ldr	r0, [r4, #0]
 800305a:	f002 f997 	bl	800538c <USB_ReadDevAllOutEpInterrupt>
 800305e:	9003      	str	r0, [sp, #12]
      while (ep_intr != 0U)
 8003060:	9b03      	ldr	r3, [sp, #12]
 8003062:	2b00      	cmp	r3, #0
 8003064:	f43f aee4 	beq.w	8002e30 <HAL_PCD_IRQHandler+0xa4>
        if ((ep_intr & 0x1U) != 0U)
 8003068:	9b03      	ldr	r3, [sp, #12]
 800306a:	07d8      	lsls	r0, r3, #31
 800306c:	d556      	bpl.n	800311c <HAL_PCD_IRQHandler+0x390>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800306e:	fa5f f985 	uxtb.w	r9, r5
 8003072:	6820      	ldr	r0, [r4, #0]
 8003074:	4649      	mov	r1, r9
 8003076:	f002 f999 	bl	80053ac <USB_ReadDevOutEPInterrupt>
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800307a:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800307e:	4680      	mov	r8, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003080:	d01a      	beq.n	80030b8 <HAL_PCD_IRQHandler+0x32c>
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003082:	6820      	ldr	r0, [r4, #0]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003084:	2201      	movs	r2, #1
  if (hpcd->Init.dma_enable == 1U)
 8003086:	6921      	ldr	r1, [r4, #16]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003088:	f500 6c30 	add.w	ip, r0, #2816	; 0xb00
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800308c:	60ba      	str	r2, [r7, #8]
  if (hpcd->Init.dma_enable == 1U)
 800308e:	2901      	cmp	r1, #1
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003090:	6c03      	ldr	r3, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003092:	eb0c 1c45 	add.w	ip, ip, r5, lsl #5
 8003096:	f8dc 2008 	ldr.w	r2, [ip, #8]
  if (hpcd->Init.dma_enable == 1U)
 800309a:	d166      	bne.n	800316a <HAL_PCD_IRQHandler+0x3de>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800309c:	0711      	lsls	r1, r2, #28
 800309e:	d506      	bpl.n	80030ae <HAL_PCD_IRQHandler+0x322>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030a0:	455b      	cmp	r3, fp
 80030a2:	d909      	bls.n	80030b8 <HAL_PCD_IRQHandler+0x32c>
 80030a4:	0410      	lsls	r0, r2, #16
 80030a6:	d507      	bpl.n	80030b8 <HAL_PCD_IRQHandler+0x32c>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030ac:	e002      	b.n	80030b4 <HAL_PCD_IRQHandler+0x328>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80030ae:	0691      	lsls	r1, r2, #26
 80030b0:	d53c      	bpl.n	800312c <HAL_PCD_IRQHandler+0x3a0>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80030b2:	2320      	movs	r3, #32
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030b4:	f8cc 3008 	str.w	r3, [ip, #8]
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80030b8:	f018 0f08 	tst.w	r8, #8
 80030bc:	d01e      	beq.n	80030fc <HAL_PCD_IRQHandler+0x370>
 80030be:	6823      	ldr	r3, [r4, #0]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80030c0:	2208      	movs	r2, #8
 80030c2:	60ba      	str	r2, [r7, #8]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80030c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80030c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030ca:	455a      	cmp	r2, fp
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80030cc:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 80030d0:	6899      	ldr	r1, [r3, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030d2:	d904      	bls.n	80030de <HAL_PCD_IRQHandler+0x352>
 80030d4:	0409      	lsls	r1, r1, #16
 80030d6:	d502      	bpl.n	80030de <HAL_PCD_IRQHandler+0x352>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030dc:	6099      	str	r1, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80030de:	4620      	mov	r0, r4
 80030e0:	9204      	str	r2, [sp, #16]
 80030e2:	f003 f8ef 	bl	80062c4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80030e6:	9a04      	ldr	r2, [sp, #16]
 80030e8:	455a      	cmp	r2, fp
 80030ea:	d907      	bls.n	80030fc <HAL_PCD_IRQHandler+0x370>
 80030ec:	6921      	ldr	r1, [r4, #16]
 80030ee:	2901      	cmp	r1, #1
 80030f0:	d104      	bne.n	80030fc <HAL_PCD_IRQHandler+0x370>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80030f2:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80030f6:	6820      	ldr	r0, [r4, #0]
 80030f8:	f002 f988 	bl	800540c <USB_EP0_OutStart>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80030fc:	f018 0f10 	tst.w	r8, #16
 8003100:	d001      	beq.n	8003106 <HAL_PCD_IRQHandler+0x37a>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003102:	2310      	movs	r3, #16
 8003104:	60bb      	str	r3, [r7, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003106:	f018 0f20 	tst.w	r8, #32
 800310a:	d001      	beq.n	8003110 <HAL_PCD_IRQHandler+0x384>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800310c:	2320      	movs	r3, #32
 800310e:	60bb      	str	r3, [r7, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003110:	f418 5f00 	tst.w	r8, #8192	; 0x2000
 8003114:	d002      	beq.n	800311c <HAL_PCD_IRQHandler+0x390>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003116:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800311a:	60bb      	str	r3, [r7, #8]
        ep_intr >>= 1U;
 800311c:	9b03      	ldr	r3, [sp, #12]
        epnum++;
 800311e:	3501      	adds	r5, #1
        ep_intr >>= 1U;
 8003120:	3720      	adds	r7, #32
 8003122:	f10a 0a1c 	add.w	sl, sl, #28
 8003126:	085b      	lsrs	r3, r3, #1
 8003128:	9303      	str	r3, [sp, #12]
 800312a:	e799      	b.n	8003060 <HAL_PCD_IRQHandler+0x2d4>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800312c:	f012 0f28 	tst.w	r2, #40	; 0x28
 8003130:	d1c2      	bne.n	80030b8 <HAL_PCD_IRQHandler+0x32c>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003132:	455b      	cmp	r3, fp
 8003134:	d901      	bls.n	800313a <HAL_PCD_IRQHandler+0x3ae>
 8003136:	0412      	lsls	r2, r2, #16
 8003138:	d4b6      	bmi.n	80030a8 <HAL_PCD_IRQHandler+0x31c>
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800313a:	f8dc 2010 	ldr.w	r2, [ip, #16]
          hpcd->OUT_ep[epnum].maxpacket -
 800313e:	f8da 1000 	ldr.w	r1, [sl]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003142:	f3c2 0212 	ubfx	r2, r2, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003146:	1a8a      	subs	r2, r1, r2
        hpcd->OUT_ep[epnum].xfer_count =
 8003148:	f8ca 2010 	str.w	r2, [sl, #16]
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800314c:	f8da 2004 	ldr.w	r2, [sl, #4]
 8003150:	4411      	add	r1, r2
 8003152:	f8ca 1004 	str.w	r1, [sl, #4]
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003156:	b995      	cbnz	r5, 800317e <HAL_PCD_IRQHandler+0x3f2>
 8003158:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 800315c:	b97a      	cbnz	r2, 800317e <HAL_PCD_IRQHandler+0x3f2>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800315e:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8003162:	2101      	movs	r1, #1
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003164:	f002 f952 	bl	800540c <USB_EP0_OutStart>
 8003168:	e009      	b.n	800317e <HAL_PCD_IRQHandler+0x3f2>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800316a:	496e      	ldr	r1, [pc, #440]	; (8003324 <HAL_PCD_IRQHandler+0x598>)
 800316c:	428b      	cmp	r3, r1
 800316e:	d10b      	bne.n	8003188 <HAL_PCD_IRQHandler+0x3fc>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003170:	0413      	lsls	r3, r2, #16
 8003172:	d499      	bmi.n	80030a8 <HAL_PCD_IRQHandler+0x31c>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003174:	0690      	lsls	r0, r2, #26
 8003176:	d502      	bpl.n	800317e <HAL_PCD_IRQHandler+0x3f2>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003178:	2220      	movs	r2, #32
 800317a:	f8cc 2008 	str.w	r2, [ip, #8]
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800317e:	4649      	mov	r1, r9
 8003180:	4620      	mov	r0, r4
 8003182:	f003 f8a5 	bl	80062d0 <HAL_PCD_DataOutStageCallback>
 8003186:	e797      	b.n	80030b8 <HAL_PCD_IRQHandler+0x32c>
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003188:	2d00      	cmp	r5, #0
 800318a:	d1f8      	bne.n	800317e <HAL_PCD_IRQHandler+0x3f2>
 800318c:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 8003190:	2a00      	cmp	r2, #0
 8003192:	d1f4      	bne.n	800317e <HAL_PCD_IRQHandler+0x3f2>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003194:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8003198:	4629      	mov	r1, r5
 800319a:	e7e3      	b.n	8003164 <HAL_PCD_IRQHandler+0x3d8>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800319c:	9b03      	ldr	r3, [sp, #12]
 800319e:	07da      	lsls	r2, r3, #31
 80031a0:	f140 8084 	bpl.w	80032ac <HAL_PCD_IRQHandler+0x520>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80031a4:	fa5f fb88 	uxtb.w	fp, r8
 80031a8:	6820      	ldr	r0, [r4, #0]
 80031aa:	4659      	mov	r1, fp
 80031ac:	f002 f907 	bl	80053be <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80031b0:	07c3      	lsls	r3, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80031b2:	4607      	mov	r7, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80031b4:	d521      	bpl.n	80031fa <HAL_PCD_IRQHandler+0x46e>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80031b6:	2001      	movs	r0, #1
 80031b8:	f008 020f 	and.w	r2, r8, #15
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80031bc:	f8d6 3834 	ldr.w	r3, [r6, #2100]	; 0x834
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80031c0:	fa00 f202 	lsl.w	r2, r0, r2
            if (hpcd->Init.dma_enable == 1U)
 80031c4:	6921      	ldr	r1, [r4, #16]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80031c6:	ea23 0302 	bic.w	r3, r3, r2
            if (hpcd->Init.dma_enable == 1U)
 80031ca:	4281      	cmp	r1, r0
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80031cc:	f8c6 3834 	str.w	r3, [r6, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80031d0:	f8c9 0008 	str.w	r0, [r9, #8]
            if (hpcd->Init.dma_enable == 1U)
 80031d4:	d10d      	bne.n	80031f2 <HAL_PCD_IRQHandler+0x466>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80031d6:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
 80031da:	4413      	add	r3, r2
 80031dc:	64ab      	str	r3, [r5, #72]	; 0x48
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80031de:	f1b8 0f00 	cmp.w	r8, #0
 80031e2:	d106      	bne.n	80031f2 <HAL_PCD_IRQHandler+0x466>
 80031e4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80031e6:	b923      	cbnz	r3, 80031f2 <HAL_PCD_IRQHandler+0x466>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80031e8:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80031ec:	6820      	ldr	r0, [r4, #0]
 80031ee:	f002 f90d 	bl	800540c <USB_EP0_OutStart>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80031f2:	4659      	mov	r1, fp
 80031f4:	4620      	mov	r0, r4
 80031f6:	f003 f874 	bl	80062e2 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80031fa:	0738      	lsls	r0, r7, #28
 80031fc:	d502      	bpl.n	8003204 <HAL_PCD_IRQHandler+0x478>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80031fe:	2308      	movs	r3, #8
 8003200:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003204:	06f9      	lsls	r1, r7, #27
 8003206:	d502      	bpl.n	800320e <HAL_PCD_IRQHandler+0x482>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003208:	2310      	movs	r3, #16
 800320a:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800320e:	067a      	lsls	r2, r7, #25
 8003210:	d502      	bpl.n	8003218 <HAL_PCD_IRQHandler+0x48c>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003212:	2340      	movs	r3, #64	; 0x40
 8003214:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003218:	07bb      	lsls	r3, r7, #30
 800321a:	d502      	bpl.n	8003222 <HAL_PCD_IRQHandler+0x496>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800321c:	2302      	movs	r3, #2
 800321e:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003222:	063f      	lsls	r7, r7, #24
 8003224:	d542      	bpl.n	80032ac <HAL_PCD_IRQHandler+0x520>
  if (ep->xfer_count > ep->xfer_len)
 8003226:	e9d5 3214 	ldrd	r3, r2, [r5, #80]	; 0x50
 800322a:	429a      	cmp	r2, r3
 800322c:	d83e      	bhi.n	80032ac <HAL_PCD_IRQHandler+0x520>
  len = ep->xfer_len - ep->xfer_count;
 800322e:	1a9b      	subs	r3, r3, r2
  len32b = (len + 3U) / 4U;
 8003230:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8003232:	f8d4 a000 	ldr.w	sl, [r4]
 8003236:	4293      	cmp	r3, r2
 8003238:	bf28      	it	cs
 800323a:	4613      	movcs	r3, r2
 800323c:	3303      	adds	r3, #3
 800323e:	089b      	lsrs	r3, r3, #2
 8003240:	9304      	str	r3, [sp, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003242:	f50a 6310 	add.w	r3, sl, #2304	; 0x900
 8003246:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 800324a:	9305      	str	r3, [sp, #20]
 800324c:	9b05      	ldr	r3, [sp, #20]
 800324e:	9904      	ldr	r1, [sp, #16]
 8003250:	699a      	ldr	r2, [r3, #24]
 8003252:	b292      	uxth	r2, r2
 8003254:	428a      	cmp	r2, r1
 8003256:	e9d5 7314 	ldrd	r7, r3, [r5, #80]	; 0x50
 800325a:	d325      	bcc.n	80032a8 <HAL_PCD_IRQHandler+0x51c>
 800325c:	429f      	cmp	r7, r3
 800325e:	d900      	bls.n	8003262 <HAL_PCD_IRQHandler+0x4d6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003260:	b95f      	cbnz	r7, 800327a <HAL_PCD_IRQHandler+0x4ee>
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003262:	f008 020f 	and.w	r2, r8, #15
 8003266:	2101      	movs	r1, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003268:	f8da 3834 	ldr.w	r3, [sl, #2100]	; 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800326c:	fa01 f202 	lsl.w	r2, r1, r2
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003270:	ea23 0302 	bic.w	r3, r3, r2
 8003274:	f8ca 3834 	str.w	r3, [sl, #2100]	; 0x834
 8003278:	e018      	b.n	80032ac <HAL_PCD_IRQHandler+0x520>
    len = ep->xfer_len - ep->xfer_count;
 800327a:	1aff      	subs	r7, r7, r3
    if (len > ep->maxpacket)
 800327c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800327e:	465a      	mov	r2, fp
 8003280:	4650      	mov	r0, sl
 8003282:	429f      	cmp	r7, r3
 8003284:	bf28      	it	cs
 8003286:	461f      	movcs	r7, r3
    len32b = (len + 3U) / 4U;
 8003288:	1cfb      	adds	r3, r7, #3
 800328a:	089b      	lsrs	r3, r3, #2
 800328c:	9304      	str	r3, [sp, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800328e:	7c23      	ldrb	r3, [r4, #16]
 8003290:	9300      	str	r3, [sp, #0]
 8003292:	b2bb      	uxth	r3, r7
 8003294:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8003296:	f001 fee7 	bl	8005068 <USB_WritePacket>
    ep->xfer_buff  += len;
 800329a:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800329c:	443b      	add	r3, r7
 800329e:	64ab      	str	r3, [r5, #72]	; 0x48
    ep->xfer_count += len;
 80032a0:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 80032a2:	441f      	add	r7, r3
 80032a4:	656f      	str	r7, [r5, #84]	; 0x54
 80032a6:	e7d1      	b.n	800324c <HAL_PCD_IRQHandler+0x4c0>
  if (ep->xfer_len <= ep->xfer_count)
 80032a8:	429f      	cmp	r7, r3
 80032aa:	d9da      	bls.n	8003262 <HAL_PCD_IRQHandler+0x4d6>
        ep_intr >>= 1U;
 80032ac:	9b03      	ldr	r3, [sp, #12]
        epnum++;
 80032ae:	f108 0801 	add.w	r8, r8, #1
        ep_intr >>= 1U;
 80032b2:	351c      	adds	r5, #28
 80032b4:	f109 0920 	add.w	r9, r9, #32
 80032b8:	085b      	lsrs	r3, r3, #1
 80032ba:	9303      	str	r3, [sp, #12]
 80032bc:	e5c6      	b.n	8002e4c <HAL_PCD_IRQHandler+0xc0>
        HAL_PCD_ResumeCallback(hpcd);
 80032be:	4620      	mov	r0, r4
 80032c0:	f003 f846 	bl	8006350 <HAL_PCD_ResumeCallback>
 80032c4:	e5dc      	b.n	8002e80 <HAL_PCD_IRQHandler+0xf4>
        HAL_PCD_SuspendCallback(hpcd);
 80032c6:	4620      	mov	r0, r4
 80032c8:	f003 f82a 	bl	8006320 <HAL_PCD_SuspendCallback>
 80032cc:	e608      	b.n	8002ee0 <HAL_PCD_IRQHandler+0x154>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80032ce:	6099      	str	r1, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80032d0:	3320      	adds	r3, #32
 80032d2:	f853 2c20 	ldr.w	r2, [r3, #-32]
 80032d6:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80032da:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80032de:	f853 2c20 	ldr.w	r2, [r3, #-32]
 80032e2:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80032e6:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80032ea:	f8c3 11e8 	str.w	r1, [r3, #488]	; 0x1e8
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80032ee:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 80032f2:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80032f6:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80032fa:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 80032fe:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8003302:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003306:	9a02      	ldr	r2, [sp, #8]
 8003308:	3201      	adds	r2, #1
 800330a:	9202      	str	r2, [sp, #8]
 800330c:	e5fc      	b.n	8002f08 <HAL_PCD_IRQHandler+0x17c>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800330e:	696b      	ldr	r3, [r5, #20]
 8003310:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003314:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003318:	616b      	str	r3, [r5, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800331a:	692b      	ldr	r3, [r5, #16]
 800331c:	f043 030b 	orr.w	r3, r3, #11
 8003320:	612b      	str	r3, [r5, #16]
 8003322:	e608      	b.n	8002f36 <HAL_PCD_IRQHandler+0x1aa>
 8003324:	4f54310a 	.word	0x4f54310a
 8003328:	4f54300a 	.word	0x4f54300a

0800332c <HAL_PCD_SetAddress>:
{
 800332c:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 800332e:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
{
 8003332:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8003334:	2a01      	cmp	r2, #1
 8003336:	d00b      	beq.n	8003350 <HAL_PCD_SetAddress+0x24>
 8003338:	2201      	movs	r2, #1
  hpcd->USB_Address = address;
 800333a:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
  __HAL_LOCK(hpcd);
 800333e:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003342:	6800      	ldr	r0, [r0, #0]
 8003344:	f001 fff2 	bl	800532c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003348:	2000      	movs	r0, #0
 800334a:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 800334e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8003350:	2002      	movs	r0, #2
 8003352:	e7fc      	b.n	800334e <HAL_PCD_SetAddress+0x22>

08003354 <HAL_PCD_EP_Open>:
{
 8003354:	b570      	push	{r4, r5, r6, lr}
 8003356:	f001 060f 	and.w	r6, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 800335a:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 800335e:	4605      	mov	r5, r0
 8003360:	f04f 001c 	mov.w	r0, #28
 8003364:	ebc6 04c6 	rsb	r4, r6, r6, lsl #3
 8003368:	ea4f 0484 	mov.w	r4, r4, lsl #2
  if ((ep_addr & 0x80U) == 0x80U)
 800336c:	d01f      	beq.n	80033ae <HAL_PCD_EP_Open+0x5a>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800336e:	f104 013c 	add.w	r1, r4, #60	; 0x3c
    ep->is_in = 1U;
 8003372:	fb00 5006 	mla	r0, r0, r6, r5
 8003376:	2401      	movs	r4, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003378:	4429      	add	r1, r5
    ep->is_in = 1U;
 800337a:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
  ep->maxpacket = ep_mps;
 800337e:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 8003380:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003382:	700e      	strb	r6, [r1, #0]
  ep->type = ep_type;
 8003384:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8003386:	b102      	cbz	r2, 800338a <HAL_PCD_EP_Open+0x36>
    ep->tx_fifo_num = ep->num;
 8003388:	80ce      	strh	r6, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 800338a:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 800338c:	bf04      	itt	eq
 800338e:	2300      	moveq	r3, #0
 8003390:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8003392:	f895 33bc 	ldrb.w	r3, [r5, #956]	; 0x3bc
 8003396:	2b01      	cmp	r3, #1
 8003398:	d012      	beq.n	80033c0 <HAL_PCD_EP_Open+0x6c>
 800339a:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800339c:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd);
 800339e:	f885 33bc 	strb.w	r3, [r5, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80033a2:	f001 fd52 	bl	8004e4a <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80033a6:	2000      	movs	r0, #0
 80033a8:	f885 03bc 	strb.w	r0, [r5, #956]	; 0x3bc
}
 80033ac:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033ae:	f504 71fe 	add.w	r1, r4, #508	; 0x1fc
    ep->is_in = 0U;
 80033b2:	fb00 5006 	mla	r0, r0, r6, r5
 80033b6:	2400      	movs	r4, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033b8:	4429      	add	r1, r5
    ep->is_in = 0U;
 80033ba:	f880 41fd 	strb.w	r4, [r0, #509]	; 0x1fd
 80033be:	e7de      	b.n	800337e <HAL_PCD_EP_Open+0x2a>
  __HAL_LOCK(hpcd);
 80033c0:	2002      	movs	r0, #2
 80033c2:	e7f3      	b.n	80033ac <HAL_PCD_EP_Open+0x58>

080033c4 <HAL_PCD_EP_Close>:
{
 80033c4:	b510      	push	{r4, lr}
 80033c6:	4604      	mov	r4, r0
 80033c8:	f001 000f 	and.w	r0, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 80033cc:	f011 0f80 	tst.w	r1, #128	; 0x80
 80033d0:	f04f 021c 	mov.w	r2, #28
 80033d4:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 80033d8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80033dc:	d016      	beq.n	800340c <HAL_PCD_EP_Close+0x48>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033de:	f103 013c 	add.w	r1, r3, #60	; 0x3c
    ep->is_in = 1U;
 80033e2:	fb02 4200 	mla	r2, r2, r0, r4
 80033e6:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033e8:	4421      	add	r1, r4
    ep->is_in = 1U;
 80033ea:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  ep->num   = ep_addr & EP_ADDR_MSK;
 80033ee:	7008      	strb	r0, [r1, #0]
  __HAL_LOCK(hpcd);
 80033f0:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d012      	beq.n	800341e <HAL_PCD_EP_Close+0x5a>
 80033f8:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80033fa:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80033fc:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003400:	f001 fd62 	bl	8004ec8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003404:	2000      	movs	r0, #0
 8003406:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 800340a:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800340c:	f503 71fe 	add.w	r1, r3, #508	; 0x1fc
    ep->is_in = 0U;
 8003410:	fb02 4200 	mla	r2, r2, r0, r4
 8003414:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003416:	4421      	add	r1, r4
    ep->is_in = 0U;
 8003418:	f882 31fd 	strb.w	r3, [r2, #509]	; 0x1fd
 800341c:	e7e7      	b.n	80033ee <HAL_PCD_EP_Close+0x2a>
  __HAL_LOCK(hpcd);
 800341e:	2002      	movs	r0, #2
 8003420:	e7f3      	b.n	800340a <HAL_PCD_EP_Close+0x46>

08003422 <HAL_PCD_EP_Receive>:
{
 8003422:	b538      	push	{r3, r4, r5, lr}
 8003424:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003428:	241c      	movs	r4, #28
 800342a:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 800342e:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003432:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_len = len;
 8003436:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->xfer_count = 0U;
 800343a:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 800343c:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_count = 0U;
 8003440:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
  ep->is_in = 0U;
 8003444:	f884 31fd 	strb.w	r3, [r4, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 8003448:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
  if (hpcd->Init.dma_enable == 1U)
 800344c:	6903      	ldr	r3, [r0, #16]
 800344e:	6800      	ldr	r0, [r0, #0]
 8003450:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 8003452:	bf08      	it	eq
 8003454:	f8c4 220c 	streq.w	r2, [r4, #524]	; 0x20c
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003458:	b2da      	uxtb	r2, r3
 800345a:	b91d      	cbnz	r5, 8003464 <HAL_PCD_EP_Receive+0x42>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800345c:	f001 fd8a 	bl	8004f74 <USB_EP0StartXfer>
}
 8003460:	2000      	movs	r0, #0
 8003462:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003464:	f001 fe14 	bl	8005090 <USB_EPStartXfer>
 8003468:	e7fa      	b.n	8003460 <HAL_PCD_EP_Receive+0x3e>

0800346a <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800346a:	f001 010f 	and.w	r1, r1, #15
 800346e:	231c      	movs	r3, #28
 8003470:	fb03 0001 	mla	r0, r3, r1, r0
}
 8003474:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
 8003478:	4770      	bx	lr

0800347a <HAL_PCD_EP_Transmit>:
{
 800347a:	b538      	push	{r3, r4, r5, lr}
 800347c:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003480:	241c      	movs	r4, #28
 8003482:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 8003486:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800348a:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_len = len;
 800348c:	6523      	str	r3, [r4, #80]	; 0x50
  ep->xfer_count = 0U;
 800348e:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 8003490:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->xfer_count = 0U;
 8003492:	6563      	str	r3, [r4, #84]	; 0x54
  ep->is_in = 1U;
 8003494:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8003496:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  ep->is_in = 1U;
 800349a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (hpcd->Init.dma_enable == 1U)
 800349e:	6903      	ldr	r3, [r0, #16]
 80034a0:	6800      	ldr	r0, [r0, #0]
 80034a2:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 80034a4:	bf08      	it	eq
 80034a6:	64e2      	streq	r2, [r4, #76]	; 0x4c
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80034a8:	b2da      	uxtb	r2, r3
 80034aa:	b91d      	cbnz	r5, 80034b4 <HAL_PCD_EP_Transmit+0x3a>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80034ac:	f001 fd62 	bl	8004f74 <USB_EP0StartXfer>
}
 80034b0:	2000      	movs	r0, #0
 80034b2:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80034b4:	f001 fdec 	bl	8005090 <USB_EPStartXfer>
 80034b8:	e7fa      	b.n	80034b0 <HAL_PCD_EP_Transmit+0x36>

080034ba <HAL_PCD_EP_SetStall>:
{
 80034ba:	b538      	push	{r3, r4, r5, lr}
 80034bc:	f001 050f 	and.w	r5, r1, #15
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80034c0:	6843      	ldr	r3, [r0, #4]
{
 80034c2:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80034c4:	429d      	cmp	r5, r3
 80034c6:	d82c      	bhi.n	8003522 <HAL_PCD_EP_SetStall+0x68>
  if ((0x80U & ep_addr) == 0x80U)
 80034c8:	f011 0f80 	tst.w	r1, #128	; 0x80
 80034cc:	f04f 001c 	mov.w	r0, #28
 80034d0:	d01e      	beq.n	8003510 <HAL_PCD_EP_SetStall+0x56>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034d2:	fb00 4105 	mla	r1, r0, r5, r4
    ep->is_in = 1U;
 80034d6:	2301      	movs	r3, #1
 80034d8:	fb00 4205 	mla	r2, r0, r5, r4
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034dc:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 80034de:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  ep->is_stall = 1U;
 80034e2:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 80034e4:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 80034e6:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 80034e8:	f894 23bc 	ldrb.w	r2, [r4, #956]	; 0x3bc
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d01a      	beq.n	8003526 <HAL_PCD_EP_SetStall+0x6c>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80034f0:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80034f2:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80034f6:	f001 fec5 	bl	8005284 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80034fa:	b92d      	cbnz	r5, 8003508 <HAL_PCD_EP_SetStall+0x4e>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80034fc:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8003500:	7c21      	ldrb	r1, [r4, #16]
 8003502:	6820      	ldr	r0, [r4, #0]
 8003504:	f001 ff82 	bl	800540c <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8003508:	2000      	movs	r0, #0
 800350a:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 800350e:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 8003510:	fb00 4301 	mla	r3, r0, r1, r4
    ep->is_in = 0U;
 8003514:	461a      	mov	r2, r3
    ep = &hpcd->OUT_ep[ep_addr];
 8003516:	f503 71fe 	add.w	r1, r3, #508	; 0x1fc
    ep->is_in = 0U;
 800351a:	2300      	movs	r3, #0
 800351c:	f882 31fd 	strb.w	r3, [r2, #509]	; 0x1fd
 8003520:	e7df      	b.n	80034e2 <HAL_PCD_EP_SetStall+0x28>
    return HAL_ERROR;
 8003522:	2001      	movs	r0, #1
 8003524:	e7f3      	b.n	800350e <HAL_PCD_EP_SetStall+0x54>
  __HAL_LOCK(hpcd);
 8003526:	2002      	movs	r0, #2
 8003528:	e7f1      	b.n	800350e <HAL_PCD_EP_SetStall+0x54>

0800352a <HAL_PCD_EP_ClrStall>:
{
 800352a:	b538      	push	{r3, r4, r5, lr}
 800352c:	f001 020f 	and.w	r2, r1, #15
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003530:	6843      	ldr	r3, [r0, #4]
{
 8003532:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003534:	429a      	cmp	r2, r3
 8003536:	d82a      	bhi.n	800358e <HAL_PCD_EP_ClrStall+0x64>
  if ((0x80U & ep_addr) == 0x80U)
 8003538:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 800353c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003540:	f04f 001c 	mov.w	r0, #28
 8003544:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003548:	d018      	beq.n	800357c <HAL_PCD_EP_ClrStall+0x52>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800354a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
    ep->is_in = 1U;
 800354e:	fb00 4002 	mla	r0, r0, r2, r4
 8003552:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003554:	4421      	add	r1, r4
    ep->is_in = 1U;
 8003556:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  ep->is_stall = 0U;
 800355a:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 800355c:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 800355e:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8003560:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8003564:	2b01      	cmp	r3, #1
 8003566:	d014      	beq.n	8003592 <HAL_PCD_EP_ClrStall+0x68>
 8003568:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800356a:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800356c:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003570:	f001 feb3 	bl	80052da <USB_EPClearStall>
  return HAL_OK;
 8003574:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 8003576:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
}
 800357a:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800357c:	f503 71fe 	add.w	r1, r3, #508	; 0x1fc
    ep->is_in = 0U;
 8003580:	fb00 4002 	mla	r0, r0, r2, r4
 8003584:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003586:	4421      	add	r1, r4
    ep->is_in = 0U;
 8003588:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
 800358c:	e7e5      	b.n	800355a <HAL_PCD_EP_ClrStall+0x30>
    return HAL_ERROR;
 800358e:	2001      	movs	r0, #1
 8003590:	e7f3      	b.n	800357a <HAL_PCD_EP_ClrStall+0x50>
  __HAL_LOCK(hpcd);
 8003592:	2002      	movs	r0, #2
 8003594:	e7f1      	b.n	800357a <HAL_PCD_EP_ClrStall+0x50>

08003596 <HAL_PCDEx_SetTxFiFo>:
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003596:	6800      	ldr	r0, [r0, #0]
 8003598:	0412      	lsls	r2, r2, #16
{
 800359a:	b570      	push	{r4, r5, r6, lr}
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800359c:	6a44      	ldr	r4, [r0, #36]	; 0x24

  if (fifo == 0U)
 800359e:	b919      	cbnz	r1, 80035a8 <HAL_PCDEx_SetTxFiFo+0x12>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80035a0:	4322      	orrs	r2, r4
 80035a2:	6282      	str	r2, [r0, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 80035a4:	2000      	movs	r0, #0
 80035a6:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80035a8:	6a83      	ldr	r3, [r0, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 80035aa:	1e4d      	subs	r5, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80035ac:	eb04 4413 	add.w	r4, r4, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80035b0:	2300      	movs	r3, #0
 80035b2:	1c5e      	adds	r6, r3, #1
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	429d      	cmp	r5, r3
 80035b8:	d805      	bhi.n	80035c6 <HAL_PCDEx_SetTxFiFo+0x30>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80035ba:	313f      	adds	r1, #63	; 0x3f
 80035bc:	4322      	orrs	r2, r4
 80035be:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80035c2:	6042      	str	r2, [r0, #4]
 80035c4:	e7ee      	b.n	80035a4 <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80035c6:	3340      	adds	r3, #64	; 0x40
 80035c8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80035d2:	4633      	mov	r3, r6
 80035d4:	e7ed      	b.n	80035b2 <HAL_PCDEx_SetTxFiFo+0x1c>

080035d6 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 80035d6:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 80035d8:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 80035da:	6259      	str	r1, [r3, #36]	; 0x24
}
 80035dc:	4770      	bx	lr

080035de <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035de:	6802      	ldr	r2, [r0, #0]

  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 80035e0:	2100      	movs	r1, #0
  hpcd->lpm_active = 1U;
 80035e2:	2301      	movs	r3, #1
  hpcd->LPM_State = LPM_L0;
 80035e4:	f880 13f4 	strb.w	r1, [r0, #1012]	; 0x3f4
  hpcd->lpm_active = 1U;
 80035e8:	f8c0 33fc 	str.w	r3, [r0, #1020]	; 0x3fc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);

  return HAL_OK;
}
 80035ec:	4608      	mov	r0, r1
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80035ee:	6993      	ldr	r3, [r2, #24]
 80035f0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80035f4:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80035f6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80035f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035fc:	f043 0303 	orr.w	r3, r3, #3
 8003600:	6553      	str	r3, [r2, #84]	; 0x54
}
 8003602:	4770      	bx	lr

08003604 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003604:	4a02      	ldr	r2, [pc, #8]	; (8003610 <HAL_PWR_EnableBkUpAccess+0xc>)
 8003606:	6813      	ldr	r3, [r2, #0]
 8003608:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800360c:	6013      	str	r3, [r2, #0]
}
 800360e:	4770      	bx	lr
 8003610:	40007000 	.word	0x40007000

08003614 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8003614:	4b19      	ldr	r3, [pc, #100]	; (800367c <HAL_PWREx_EnableOverDrive+0x68>)
{
 8003616:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8003618:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800361a:	4c19      	ldr	r4, [pc, #100]	; (8003680 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800361c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003620:	641a      	str	r2, [r3, #64]	; 0x40
 8003622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003628:	9301      	str	r3, [sp, #4]
 800362a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 800362c:	6823      	ldr	r3, [r4, #0]
 800362e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003632:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003634:	f7fe fcf2 	bl	800201c <HAL_GetTick>
 8003638:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800363a:	6863      	ldr	r3, [r4, #4]
 800363c:	03da      	lsls	r2, r3, #15
 800363e:	d50c      	bpl.n	800365a <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003640:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003642:	4d0f      	ldr	r5, [pc, #60]	; (8003680 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003648:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800364a:	f7fe fce7 	bl	800201c <HAL_GetTick>
 800364e:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003650:	686b      	ldr	r3, [r5, #4]
 8003652:	039b      	lsls	r3, r3, #14
 8003654:	d50a      	bpl.n	800366c <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8003656:	2000      	movs	r0, #0
 8003658:	e006      	b.n	8003668 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800365a:	f7fe fcdf 	bl	800201c <HAL_GetTick>
 800365e:	1b40      	subs	r0, r0, r5
 8003660:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003664:	d9e9      	bls.n	800363a <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8003666:	2003      	movs	r0, #3
}
 8003668:	b003      	add	sp, #12
 800366a:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800366c:	f7fe fcd6 	bl	800201c <HAL_GetTick>
 8003670:	1b00      	subs	r0, r0, r4
 8003672:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003676:	d9eb      	bls.n	8003650 <HAL_PWREx_EnableOverDrive+0x3c>
 8003678:	e7f5      	b.n	8003666 <HAL_PWREx_EnableOverDrive+0x52>
 800367a:	bf00      	nop
 800367c:	40023800 	.word	0x40023800
 8003680:	40007000 	.word	0x40007000

08003684 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003684:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003688:	4604      	mov	r4, r0
 800368a:	b340      	cbz	r0, 80036de <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800368c:	6803      	ldr	r3, [r0, #0]
 800368e:	07d8      	lsls	r0, r3, #31
 8003690:	d410      	bmi.n	80036b4 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003692:	6823      	ldr	r3, [r4, #0]
 8003694:	0799      	lsls	r1, r3, #30
 8003696:	d464      	bmi.n	8003762 <HAL_RCC_OscConfig+0xde>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003698:	6823      	ldr	r3, [r4, #0]
 800369a:	0719      	lsls	r1, r3, #28
 800369c:	f100 80aa 	bmi.w	80037f4 <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036a0:	6823      	ldr	r3, [r4, #0]
 80036a2:	075a      	lsls	r2, r3, #29
 80036a4:	f100 80cb 	bmi.w	800383e <HAL_RCC_OscConfig+0x1ba>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036a8:	69a2      	ldr	r2, [r4, #24]
 80036aa:	2a00      	cmp	r2, #0
 80036ac:	f040 8134 	bne.w	8003918 <HAL_RCC_OscConfig+0x294>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80036b0:	2000      	movs	r0, #0
 80036b2:	e02b      	b.n	800370c <HAL_RCC_OscConfig+0x88>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036b4:	4b96      	ldr	r3, [pc, #600]	; (8003910 <HAL_RCC_OscConfig+0x28c>)
 80036b6:	689a      	ldr	r2, [r3, #8]
 80036b8:	f002 020c 	and.w	r2, r2, #12
 80036bc:	2a04      	cmp	r2, #4
 80036be:	d007      	beq.n	80036d0 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036c0:	689a      	ldr	r2, [r3, #8]
 80036c2:	f002 020c 	and.w	r2, r2, #12
 80036c6:	2a08      	cmp	r2, #8
 80036c8:	d10b      	bne.n	80036e2 <HAL_RCC_OscConfig+0x5e>
 80036ca:	685a      	ldr	r2, [r3, #4]
 80036cc:	0252      	lsls	r2, r2, #9
 80036ce:	d508      	bpl.n	80036e2 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036d0:	4b8f      	ldr	r3, [pc, #572]	; (8003910 <HAL_RCC_OscConfig+0x28c>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	039b      	lsls	r3, r3, #14
 80036d6:	d5dc      	bpl.n	8003692 <HAL_RCC_OscConfig+0xe>
 80036d8:	6863      	ldr	r3, [r4, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1d9      	bne.n	8003692 <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
 80036de:	2001      	movs	r0, #1
 80036e0:	e014      	b.n	800370c <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036e2:	6862      	ldr	r2, [r4, #4]
 80036e4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80036e8:	d113      	bne.n	8003712 <HAL_RCC_OscConfig+0x8e>
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80036f0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80036f2:	f7fe fc93 	bl	800201c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036f6:	4e86      	ldr	r6, [pc, #536]	; (8003910 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 80036f8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036fa:	6833      	ldr	r3, [r6, #0]
 80036fc:	039f      	lsls	r7, r3, #14
 80036fe:	d4c8      	bmi.n	8003692 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003700:	f7fe fc8c 	bl	800201c <HAL_GetTick>
 8003704:	1b40      	subs	r0, r0, r5
 8003706:	2864      	cmp	r0, #100	; 0x64
 8003708:	d9f7      	bls.n	80036fa <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 800370a:	2003      	movs	r0, #3
}
 800370c:	b002      	add	sp, #8
 800370e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003712:	4d7f      	ldr	r5, [pc, #508]	; (8003910 <HAL_RCC_OscConfig+0x28c>)
 8003714:	682b      	ldr	r3, [r5, #0]
 8003716:	b992      	cbnz	r2, 800373e <HAL_RCC_OscConfig+0xba>
 8003718:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800371c:	602b      	str	r3, [r5, #0]
 800371e:	682b      	ldr	r3, [r5, #0]
 8003720:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003724:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003726:	f7fe fc79 	bl	800201c <HAL_GetTick>
 800372a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800372c:	682b      	ldr	r3, [r5, #0]
 800372e:	0398      	lsls	r0, r3, #14
 8003730:	d5af      	bpl.n	8003692 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003732:	f7fe fc73 	bl	800201c <HAL_GetTick>
 8003736:	1b80      	subs	r0, r0, r6
 8003738:	2864      	cmp	r0, #100	; 0x64
 800373a:	d9f7      	bls.n	800372c <HAL_RCC_OscConfig+0xa8>
 800373c:	e7e5      	b.n	800370a <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800373e:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8003742:	d107      	bne.n	8003754 <HAL_RCC_OscConfig+0xd0>
 8003744:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003748:	602b      	str	r3, [r5, #0]
 800374a:	682b      	ldr	r3, [r5, #0]
 800374c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003750:	602b      	str	r3, [r5, #0]
 8003752:	e7ce      	b.n	80036f2 <HAL_RCC_OscConfig+0x6e>
 8003754:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003758:	602b      	str	r3, [r5, #0]
 800375a:	682b      	ldr	r3, [r5, #0]
 800375c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003760:	e7f6      	b.n	8003750 <HAL_RCC_OscConfig+0xcc>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003762:	4b6b      	ldr	r3, [pc, #428]	; (8003910 <HAL_RCC_OscConfig+0x28c>)
 8003764:	689a      	ldr	r2, [r3, #8]
 8003766:	f012 0f0c 	tst.w	r2, #12
 800376a:	d007      	beq.n	800377c <HAL_RCC_OscConfig+0xf8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800376c:	689a      	ldr	r2, [r3, #8]
 800376e:	f002 020c 	and.w	r2, r2, #12
 8003772:	2a08      	cmp	r2, #8
 8003774:	d111      	bne.n	800379a <HAL_RCC_OscConfig+0x116>
 8003776:	685a      	ldr	r2, [r3, #4]
 8003778:	0251      	lsls	r1, r2, #9
 800377a:	d40e      	bmi.n	800379a <HAL_RCC_OscConfig+0x116>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800377c:	4b64      	ldr	r3, [pc, #400]	; (8003910 <HAL_RCC_OscConfig+0x28c>)
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	0792      	lsls	r2, r2, #30
 8003782:	d502      	bpl.n	800378a <HAL_RCC_OscConfig+0x106>
 8003784:	68e2      	ldr	r2, [r4, #12]
 8003786:	2a01      	cmp	r2, #1
 8003788:	d1a9      	bne.n	80036de <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	6921      	ldr	r1, [r4, #16]
 800378e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8003792:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8003796:	601a      	str	r2, [r3, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003798:	e77e      	b.n	8003698 <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800379a:	68e2      	ldr	r2, [r4, #12]
 800379c:	b1c2      	cbz	r2, 80037d0 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_ENABLE();
 800379e:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037a0:	4d5b      	ldr	r5, [pc, #364]	; (8003910 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
 80037a2:	f042 0201 	orr.w	r2, r2, #1
 80037a6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80037a8:	f7fe fc38 	bl	800201c <HAL_GetTick>
 80037ac:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ae:	682b      	ldr	r3, [r5, #0]
 80037b0:	079f      	lsls	r7, r3, #30
 80037b2:	d507      	bpl.n	80037c4 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037b4:	682b      	ldr	r3, [r5, #0]
 80037b6:	6922      	ldr	r2, [r4, #16]
 80037b8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80037bc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80037c0:	602b      	str	r3, [r5, #0]
 80037c2:	e769      	b.n	8003698 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037c4:	f7fe fc2a 	bl	800201c <HAL_GetTick>
 80037c8:	1b80      	subs	r0, r0, r6
 80037ca:	2802      	cmp	r0, #2
 80037cc:	d9ef      	bls.n	80037ae <HAL_RCC_OscConfig+0x12a>
 80037ce:	e79c      	b.n	800370a <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 80037d0:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037d2:	4e4f      	ldr	r6, [pc, #316]	; (8003910 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_DISABLE();
 80037d4:	f022 0201 	bic.w	r2, r2, #1
 80037d8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80037da:	f7fe fc1f 	bl	800201c <HAL_GetTick>
 80037de:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037e0:	6833      	ldr	r3, [r6, #0]
 80037e2:	0798      	lsls	r0, r3, #30
 80037e4:	f57f af58 	bpl.w	8003698 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037e8:	f7fe fc18 	bl	800201c <HAL_GetTick>
 80037ec:	1b40      	subs	r0, r0, r5
 80037ee:	2802      	cmp	r0, #2
 80037f0:	d9f6      	bls.n	80037e0 <HAL_RCC_OscConfig+0x15c>
 80037f2:	e78a      	b.n	800370a <HAL_RCC_OscConfig+0x86>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80037f4:	6963      	ldr	r3, [r4, #20]
 80037f6:	4d46      	ldr	r5, [pc, #280]	; (8003910 <HAL_RCC_OscConfig+0x28c>)
 80037f8:	b183      	cbz	r3, 800381c <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_LSI_ENABLE();
 80037fa:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80037fc:	f043 0301 	orr.w	r3, r3, #1
 8003800:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8003802:	f7fe fc0b 	bl	800201c <HAL_GetTick>
 8003806:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003808:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800380a:	079b      	lsls	r3, r3, #30
 800380c:	f53f af48 	bmi.w	80036a0 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003810:	f7fe fc04 	bl	800201c <HAL_GetTick>
 8003814:	1b80      	subs	r0, r0, r6
 8003816:	2802      	cmp	r0, #2
 8003818:	d9f6      	bls.n	8003808 <HAL_RCC_OscConfig+0x184>
 800381a:	e776      	b.n	800370a <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 800381c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800381e:	f023 0301 	bic.w	r3, r3, #1
 8003822:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8003824:	f7fe fbfa 	bl	800201c <HAL_GetTick>
 8003828:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800382a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800382c:	079f      	lsls	r7, r3, #30
 800382e:	f57f af37 	bpl.w	80036a0 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003832:	f7fe fbf3 	bl	800201c <HAL_GetTick>
 8003836:	1b80      	subs	r0, r0, r6
 8003838:	2802      	cmp	r0, #2
 800383a:	d9f6      	bls.n	800382a <HAL_RCC_OscConfig+0x1a6>
 800383c:	e765      	b.n	800370a <HAL_RCC_OscConfig+0x86>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800383e:	4b34      	ldr	r3, [pc, #208]	; (8003910 <HAL_RCC_OscConfig+0x28c>)
 8003840:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003842:	00d0      	lsls	r0, r2, #3
 8003844:	d427      	bmi.n	8003896 <HAL_RCC_OscConfig+0x212>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003846:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8003848:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800384a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800384e:	641a      	str	r2, [r3, #64]	; 0x40
 8003850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003856:	9301      	str	r3, [sp, #4]
 8003858:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800385a:	4d2e      	ldr	r5, [pc, #184]	; (8003914 <HAL_RCC_OscConfig+0x290>)
 800385c:	682b      	ldr	r3, [r5, #0]
 800385e:	05d9      	lsls	r1, r3, #23
 8003860:	d51b      	bpl.n	800389a <HAL_RCC_OscConfig+0x216>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003862:	68a3      	ldr	r3, [r4, #8]
 8003864:	4d2a      	ldr	r5, [pc, #168]	; (8003910 <HAL_RCC_OscConfig+0x28c>)
 8003866:	2b01      	cmp	r3, #1
 8003868:	d127      	bne.n	80038ba <HAL_RCC_OscConfig+0x236>
 800386a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800386c:	f043 0301 	orr.w	r3, r3, #1
 8003870:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003872:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003876:	f7fe fbd1 	bl	800201c <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800387a:	4e25      	ldr	r6, [pc, #148]	; (8003910 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 800387c:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800387e:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8003880:	079b      	lsls	r3, r3, #30
 8003882:	d53f      	bpl.n	8003904 <HAL_RCC_OscConfig+0x280>
    if (pwrclkchanged == SET)
 8003884:	2f00      	cmp	r7, #0
 8003886:	f43f af0f 	beq.w	80036a8 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800388a:	4a21      	ldr	r2, [pc, #132]	; (8003910 <HAL_RCC_OscConfig+0x28c>)
 800388c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800388e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003892:	6413      	str	r3, [r2, #64]	; 0x40
 8003894:	e708      	b.n	80036a8 <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
 8003896:	2700      	movs	r7, #0
 8003898:	e7df      	b.n	800385a <HAL_RCC_OscConfig+0x1d6>
      PWR->CR1 |= PWR_CR1_DBP;
 800389a:	682b      	ldr	r3, [r5, #0]
 800389c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038a0:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80038a2:	f7fe fbbb 	bl	800201c <HAL_GetTick>
 80038a6:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038a8:	682b      	ldr	r3, [r5, #0]
 80038aa:	05da      	lsls	r2, r3, #23
 80038ac:	d4d9      	bmi.n	8003862 <HAL_RCC_OscConfig+0x1de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038ae:	f7fe fbb5 	bl	800201c <HAL_GetTick>
 80038b2:	1b80      	subs	r0, r0, r6
 80038b4:	2864      	cmp	r0, #100	; 0x64
 80038b6:	d9f7      	bls.n	80038a8 <HAL_RCC_OscConfig+0x224>
 80038b8:	e727      	b.n	800370a <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038ba:	b9ab      	cbnz	r3, 80038e8 <HAL_RCC_OscConfig+0x264>
 80038bc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038be:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038c2:	f023 0301 	bic.w	r3, r3, #1
 80038c6:	672b      	str	r3, [r5, #112]	; 0x70
 80038c8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80038ca:	f023 0304 	bic.w	r3, r3, #4
 80038ce:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80038d0:	f7fe fba4 	bl	800201c <HAL_GetTick>
 80038d4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038d6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80038d8:	0798      	lsls	r0, r3, #30
 80038da:	d5d3      	bpl.n	8003884 <HAL_RCC_OscConfig+0x200>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038dc:	f7fe fb9e 	bl	800201c <HAL_GetTick>
 80038e0:	1b80      	subs	r0, r0, r6
 80038e2:	4540      	cmp	r0, r8
 80038e4:	d9f7      	bls.n	80038d6 <HAL_RCC_OscConfig+0x252>
 80038e6:	e710      	b.n	800370a <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038e8:	2b05      	cmp	r3, #5
 80038ea:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80038ec:	d103      	bne.n	80038f6 <HAL_RCC_OscConfig+0x272>
 80038ee:	f043 0304 	orr.w	r3, r3, #4
 80038f2:	672b      	str	r3, [r5, #112]	; 0x70
 80038f4:	e7b9      	b.n	800386a <HAL_RCC_OscConfig+0x1e6>
 80038f6:	f023 0301 	bic.w	r3, r3, #1
 80038fa:	672b      	str	r3, [r5, #112]	; 0x70
 80038fc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80038fe:	f023 0304 	bic.w	r3, r3, #4
 8003902:	e7b5      	b.n	8003870 <HAL_RCC_OscConfig+0x1ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003904:	f7fe fb8a 	bl	800201c <HAL_GetTick>
 8003908:	1b40      	subs	r0, r0, r5
 800390a:	4540      	cmp	r0, r8
 800390c:	d9b7      	bls.n	800387e <HAL_RCC_OscConfig+0x1fa>
 800390e:	e6fc      	b.n	800370a <HAL_RCC_OscConfig+0x86>
 8003910:	40023800 	.word	0x40023800
 8003914:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003918:	4d3c      	ldr	r5, [pc, #240]	; (8003a0c <HAL_RCC_OscConfig+0x388>)
 800391a:	68ab      	ldr	r3, [r5, #8]
 800391c:	f003 030c 	and.w	r3, r3, #12
 8003920:	2b08      	cmp	r3, #8
 8003922:	d042      	beq.n	80039aa <HAL_RCC_OscConfig+0x326>
        __HAL_RCC_PLL_DISABLE();
 8003924:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003926:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8003928:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800392c:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800392e:	d12f      	bne.n	8003990 <HAL_RCC_OscConfig+0x30c>
        tickstart = HAL_GetTick();
 8003930:	f7fe fb74 	bl	800201c <HAL_GetTick>
 8003934:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003936:	682b      	ldr	r3, [r5, #0]
 8003938:	0199      	lsls	r1, r3, #6
 800393a:	d423      	bmi.n	8003984 <HAL_RCC_OscConfig+0x300>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800393c:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8003940:	4313      	orrs	r3, r2
 8003942:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003944:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003948:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800394a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800394e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003950:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8003954:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003956:	0852      	lsrs	r2, r2, #1
 8003958:	3a01      	subs	r2, #1
 800395a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800395e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003960:	682b      	ldr	r3, [r5, #0]
 8003962:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003966:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003968:	f7fe fb58 	bl	800201c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800396c:	4d27      	ldr	r5, [pc, #156]	; (8003a0c <HAL_RCC_OscConfig+0x388>)
        tickstart = HAL_GetTick();
 800396e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003970:	682b      	ldr	r3, [r5, #0]
 8003972:	019a      	lsls	r2, r3, #6
 8003974:	f53f ae9c 	bmi.w	80036b0 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003978:	f7fe fb50 	bl	800201c <HAL_GetTick>
 800397c:	1b00      	subs	r0, r0, r4
 800397e:	2802      	cmp	r0, #2
 8003980:	d9f6      	bls.n	8003970 <HAL_RCC_OscConfig+0x2ec>
 8003982:	e6c2      	b.n	800370a <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003984:	f7fe fb4a 	bl	800201c <HAL_GetTick>
 8003988:	1b80      	subs	r0, r0, r6
 800398a:	2802      	cmp	r0, #2
 800398c:	d9d3      	bls.n	8003936 <HAL_RCC_OscConfig+0x2b2>
 800398e:	e6bc      	b.n	800370a <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8003990:	f7fe fb44 	bl	800201c <HAL_GetTick>
 8003994:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003996:	682b      	ldr	r3, [r5, #0]
 8003998:	019b      	lsls	r3, r3, #6
 800399a:	f57f ae89 	bpl.w	80036b0 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800399e:	f7fe fb3d 	bl	800201c <HAL_GetTick>
 80039a2:	1b00      	subs	r0, r0, r4
 80039a4:	2802      	cmp	r0, #2
 80039a6:	d9f6      	bls.n	8003996 <HAL_RCC_OscConfig+0x312>
 80039a8:	e6af      	b.n	800370a <HAL_RCC_OscConfig+0x86>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039aa:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 80039ac:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039ae:	f43f ae96 	beq.w	80036de <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039b2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039b6:	69e1      	ldr	r1, [r4, #28]
 80039b8:	428a      	cmp	r2, r1
 80039ba:	f47f ae90 	bne.w	80036de <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80039be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039c2:	6a21      	ldr	r1, [r4, #32]
 80039c4:	428a      	cmp	r2, r1
 80039c6:	f47f ae8a 	bne.w	80036de <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80039ca:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039ce:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80039d0:	401a      	ands	r2, r3
 80039d2:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80039d6:	f47f ae82 	bne.w	80036de <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80039da:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80039dc:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80039e0:	0852      	lsrs	r2, r2, #1
 80039e2:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039e4:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80039e8:	f47f ae79 	bne.w	80036de <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039ec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039f0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80039f2:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 80039f6:	f47f ae72 	bne.w	80036de <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80039fa:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80039fe:	6b22      	ldr	r2, [r4, #48]	; 0x30
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a00:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 8003a04:	f43f ae54 	beq.w	80036b0 <HAL_RCC_OscConfig+0x2c>
 8003a08:	e669      	b.n	80036de <HAL_RCC_OscConfig+0x5a>
 8003a0a:	bf00      	nop
 8003a0c:	40023800 	.word	0x40023800

08003a10 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a10:	4913      	ldr	r1, [pc, #76]	; (8003a60 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8003a12:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a14:	688b      	ldr	r3, [r1, #8]
 8003a16:	f003 030c 	and.w	r3, r3, #12
 8003a1a:	2b04      	cmp	r3, #4
 8003a1c:	d01b      	beq.n	8003a56 <HAL_RCC_GetSysClockFreq+0x46>
 8003a1e:	2b08      	cmp	r3, #8
 8003a20:	d11b      	bne.n	8003a5a <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a22:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003a24:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a26:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a28:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003a2c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a30:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003a34:	bf1a      	itte	ne
 8003a36:	480b      	ldrne	r0, [pc, #44]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x54>)
 8003a38:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a3a:	480b      	ldreq	r0, [pc, #44]	; (8003a68 <HAL_RCC_GetSysClockFreq+0x58>)
 8003a3c:	fba1 0100 	umull	r0, r1, r1, r0
 8003a40:	f7fc fe22 	bl	8000688 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003a44:	4b06      	ldr	r3, [pc, #24]	; (8003a60 <HAL_RCC_GetSysClockFreq+0x50>)
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8003a50:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003a54:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a56:	4803      	ldr	r0, [pc, #12]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x54>)
 8003a58:	e7fc      	b.n	8003a54 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 8003a5a:	4803      	ldr	r0, [pc, #12]	; (8003a68 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8003a5c:	e7fa      	b.n	8003a54 <HAL_RCC_GetSysClockFreq+0x44>
 8003a5e:	bf00      	nop
 8003a60:	40023800 	.word	0x40023800
 8003a64:	007a1200 	.word	0x007a1200
 8003a68:	00f42400 	.word	0x00f42400

08003a6c <HAL_RCC_ClockConfig>:
{
 8003a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a70:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8003a72:	4604      	mov	r4, r0
 8003a74:	b910      	cbnz	r0, 8003a7c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8003a76:	2001      	movs	r0, #1
}
 8003a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a7c:	4a46      	ldr	r2, [pc, #280]	; (8003b98 <HAL_RCC_ClockConfig+0x12c>)
 8003a7e:	6813      	ldr	r3, [r2, #0]
 8003a80:	f003 030f 	and.w	r3, r3, #15
 8003a84:	428b      	cmp	r3, r1
 8003a86:	d328      	bcc.n	8003ada <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a88:	6822      	ldr	r2, [r4, #0]
 8003a8a:	0797      	lsls	r7, r2, #30
 8003a8c:	d430      	bmi.n	8003af0 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a8e:	07d0      	lsls	r0, r2, #31
 8003a90:	d444      	bmi.n	8003b1c <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a92:	4a41      	ldr	r2, [pc, #260]	; (8003b98 <HAL_RCC_ClockConfig+0x12c>)
 8003a94:	6813      	ldr	r3, [r2, #0]
 8003a96:	f003 030f 	and.w	r3, r3, #15
 8003a9a:	42ab      	cmp	r3, r5
 8003a9c:	d867      	bhi.n	8003b6e <HAL_RCC_ClockConfig+0x102>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a9e:	6822      	ldr	r2, [r4, #0]
 8003aa0:	0751      	lsls	r1, r2, #29
 8003aa2:	d470      	bmi.n	8003b86 <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aa4:	0713      	lsls	r3, r2, #28
 8003aa6:	d507      	bpl.n	8003ab8 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003aa8:	4a3c      	ldr	r2, [pc, #240]	; (8003b9c <HAL_RCC_ClockConfig+0x130>)
 8003aaa:	6921      	ldr	r1, [r4, #16]
 8003aac:	6893      	ldr	r3, [r2, #8]
 8003aae:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003ab2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003ab6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ab8:	f7ff ffaa 	bl	8003a10 <HAL_RCC_GetSysClockFreq>
 8003abc:	4b37      	ldr	r3, [pc, #220]	; (8003b9c <HAL_RCC_ClockConfig+0x130>)
 8003abe:	4a38      	ldr	r2, [pc, #224]	; (8003ba0 <HAL_RCC_ClockConfig+0x134>)
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003ac6:	5cd3      	ldrb	r3, [r2, r3]
 8003ac8:	40d8      	lsrs	r0, r3
 8003aca:	4b36      	ldr	r3, [pc, #216]	; (8003ba4 <HAL_RCC_ClockConfig+0x138>)
 8003acc:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8003ace:	4b36      	ldr	r3, [pc, #216]	; (8003ba8 <HAL_RCC_ClockConfig+0x13c>)
 8003ad0:	6818      	ldr	r0, [r3, #0]
 8003ad2:	f7fe fa67 	bl	8001fa4 <HAL_InitTick>
  return HAL_OK;
 8003ad6:	2000      	movs	r0, #0
 8003ad8:	e7ce      	b.n	8003a78 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ada:	6813      	ldr	r3, [r2, #0]
 8003adc:	f023 030f 	bic.w	r3, r3, #15
 8003ae0:	430b      	orrs	r3, r1
 8003ae2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ae4:	6813      	ldr	r3, [r2, #0]
 8003ae6:	f003 030f 	and.w	r3, r3, #15
 8003aea:	428b      	cmp	r3, r1
 8003aec:	d1c3      	bne.n	8003a76 <HAL_RCC_ClockConfig+0xa>
 8003aee:	e7cb      	b.n	8003a88 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003af0:	f012 0f04 	tst.w	r2, #4
 8003af4:	4b29      	ldr	r3, [pc, #164]	; (8003b9c <HAL_RCC_ClockConfig+0x130>)
 8003af6:	d003      	beq.n	8003b00 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003af8:	6899      	ldr	r1, [r3, #8]
 8003afa:	f441 51e0 	orr.w	r1, r1, #7168	; 0x1c00
 8003afe:	6099      	str	r1, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b00:	0716      	lsls	r6, r2, #28
 8003b02:	d503      	bpl.n	8003b0c <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b04:	6899      	ldr	r1, [r3, #8]
 8003b06:	f441 4160 	orr.w	r1, r1, #57344	; 0xe000
 8003b0a:	6099      	str	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b0c:	4923      	ldr	r1, [pc, #140]	; (8003b9c <HAL_RCC_ClockConfig+0x130>)
 8003b0e:	68a0      	ldr	r0, [r4, #8]
 8003b10:	688b      	ldr	r3, [r1, #8]
 8003b12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b16:	4303      	orrs	r3, r0
 8003b18:	608b      	str	r3, [r1, #8]
 8003b1a:	e7b8      	b.n	8003a8e <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b1c:	6861      	ldr	r1, [r4, #4]
 8003b1e:	4b1f      	ldr	r3, [pc, #124]	; (8003b9c <HAL_RCC_ClockConfig+0x130>)
 8003b20:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b22:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b24:	d11b      	bne.n	8003b5e <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b26:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b2a:	d0a4      	beq.n	8003a76 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b2c:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b2e:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b32:	4f1a      	ldr	r7, [pc, #104]	; (8003b9c <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b34:	f022 0203 	bic.w	r2, r2, #3
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8003b3c:	f7fe fa6e 	bl	800201c <HAL_GetTick>
 8003b40:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	6862      	ldr	r2, [r4, #4]
 8003b46:	f003 030c 	and.w	r3, r3, #12
 8003b4a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003b4e:	d0a0      	beq.n	8003a92 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b50:	f7fe fa64 	bl	800201c <HAL_GetTick>
 8003b54:	1b80      	subs	r0, r0, r6
 8003b56:	4540      	cmp	r0, r8
 8003b58:	d9f3      	bls.n	8003b42 <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 8003b5a:	2003      	movs	r0, #3
 8003b5c:	e78c      	b.n	8003a78 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b5e:	2902      	cmp	r1, #2
 8003b60:	d102      	bne.n	8003b68 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b62:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8003b66:	e7e0      	b.n	8003b2a <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b68:	f012 0f02 	tst.w	r2, #2
 8003b6c:	e7dd      	b.n	8003b2a <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b6e:	6813      	ldr	r3, [r2, #0]
 8003b70:	f023 030f 	bic.w	r3, r3, #15
 8003b74:	432b      	orrs	r3, r5
 8003b76:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b78:	6813      	ldr	r3, [r2, #0]
 8003b7a:	f003 030f 	and.w	r3, r3, #15
 8003b7e:	42ab      	cmp	r3, r5
 8003b80:	f47f af79 	bne.w	8003a76 <HAL_RCC_ClockConfig+0xa>
 8003b84:	e78b      	b.n	8003a9e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b86:	4905      	ldr	r1, [pc, #20]	; (8003b9c <HAL_RCC_ClockConfig+0x130>)
 8003b88:	68e0      	ldr	r0, [r4, #12]
 8003b8a:	688b      	ldr	r3, [r1, #8]
 8003b8c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8003b90:	4303      	orrs	r3, r0
 8003b92:	608b      	str	r3, [r1, #8]
 8003b94:	e786      	b.n	8003aa4 <HAL_RCC_ClockConfig+0x38>
 8003b96:	bf00      	nop
 8003b98:	40023c00 	.word	0x40023c00
 8003b9c:	40023800 	.word	0x40023800
 8003ba0:	08009a30 	.word	0x08009a30
 8003ba4:	20000000 	.word	0x20000000
 8003ba8:	20000008 	.word	0x20000008

08003bac <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8003bac:	4b01      	ldr	r3, [pc, #4]	; (8003bb4 <HAL_RCC_GetHCLKFreq+0x8>)
 8003bae:	6818      	ldr	r0, [r3, #0]
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	20000000 	.word	0x20000000

08003bb8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003bb8:	4b04      	ldr	r3, [pc, #16]	; (8003bcc <HAL_RCC_GetPCLK1Freq+0x14>)
 8003bba:	4a05      	ldr	r2, [pc, #20]	; (8003bd0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003bc2:	5cd3      	ldrb	r3, [r2, r3]
 8003bc4:	4a03      	ldr	r2, [pc, #12]	; (8003bd4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003bc6:	6810      	ldr	r0, [r2, #0]
}
 8003bc8:	40d8      	lsrs	r0, r3
 8003bca:	4770      	bx	lr
 8003bcc:	40023800 	.word	0x40023800
 8003bd0:	08009a40 	.word	0x08009a40
 8003bd4:	20000000 	.word	0x20000000

08003bd8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003bd8:	4b04      	ldr	r3, [pc, #16]	; (8003bec <HAL_RCC_GetPCLK2Freq+0x14>)
 8003bda:	4a05      	ldr	r2, [pc, #20]	; (8003bf0 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8003be2:	5cd3      	ldrb	r3, [r2, r3]
 8003be4:	4a03      	ldr	r2, [pc, #12]	; (8003bf4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003be6:	6810      	ldr	r0, [r2, #0]
}
 8003be8:	40d8      	lsrs	r0, r3
 8003bea:	4770      	bx	lr
 8003bec:	40023800 	.word	0x40023800
 8003bf0:	08009a40 	.word	0x08009a40
 8003bf4:	20000000 	.word	0x20000000

08003bf8 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003bf8:	6803      	ldr	r3, [r0, #0]
{
 8003bfa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003bfe:	f013 0601 	ands.w	r6, r3, #1
{
 8003c02:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003c04:	d00b      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c06:	4aba      	ldr	r2, [pc, #744]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003c08:	6891      	ldr	r1, [r2, #8]
 8003c0a:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8003c0e:	6091      	str	r1, [r2, #8]
 8003c10:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8003c12:	6891      	ldr	r1, [r2, #8]
 8003c14:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003c16:	fab6 f686 	clz	r6, r6
 8003c1a:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c1c:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003c1e:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 8003c22:	d012      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c24:	49b2      	ldr	r1, [pc, #712]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003c26:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8003c28:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003c2c:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c30:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    {
      plli2sused = 1;
 8003c34:	bf08      	it	eq
 8003c36:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c38:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003c3c:	bf16      	itet	ne
 8003c3e:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8003c42:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003c44:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c46:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003c4a:	02d8      	lsls	r0, r3, #11
 8003c4c:	d510      	bpl.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c4e:	48a8      	ldr	r0, [pc, #672]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003c50:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003c52:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003c56:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c5a:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8003c5e:	ea42 0201 	orr.w	r2, r2, r1
 8003c62:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003c66:	f000 81a8 	beq.w	8003fba <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8003c6a:	2900      	cmp	r1, #0
 8003c6c:	bf08      	it	eq
 8003c6e:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8003c70:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003c74:	bf18      	it	ne
 8003c76:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c78:	0699      	lsls	r1, r3, #26
 8003c7a:	d531      	bpl.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c7c:	4b9c      	ldr	r3, [pc, #624]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003c7e:	4f9d      	ldr	r7, [pc, #628]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c82:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003c86:	641a      	str	r2, [r3, #64]	; 0x40
 8003c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c8e:	9301      	str	r3, [sp, #4]
 8003c90:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c98:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c9a:	f7fe f9bf 	bl	800201c <HAL_GetTick>
 8003c9e:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	05da      	lsls	r2, r3, #23
 8003ca4:	f140 818b 	bpl.w	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x3c6>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ca8:	4f91      	ldr	r7, [pc, #580]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003caa:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003cac:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003cb0:	f040 8190 	bne.w	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cb4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003cb6:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003cba:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8003cbe:	4a8c      	ldr	r2, [pc, #560]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003cc0:	f040 81ae 	bne.w	8004020 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8003cc4:	6891      	ldr	r1, [r2, #8]
 8003cc6:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8003cca:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8003cce:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8003cd2:	4301      	orrs	r1, r0
 8003cd4:	6091      	str	r1, [r2, #8]
 8003cd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cda:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8003cdc:	430b      	orrs	r3, r1
 8003cde:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003ce0:	6823      	ldr	r3, [r4, #0]
 8003ce2:	06d9      	lsls	r1, r3, #27
 8003ce4:	d50c      	bpl.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ce6:	4a82      	ldr	r2, [pc, #520]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003ce8:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8003cec:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8003cf0:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8003cf4:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8003cf8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003cfa:	4301      	orrs	r1, r0
 8003cfc:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d00:	045a      	lsls	r2, r3, #17
 8003d02:	d508      	bpl.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d04:	497a      	ldr	r1, [pc, #488]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003d06:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8003d08:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003d0c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8003d10:	4302      	orrs	r2, r0
 8003d12:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d16:	041f      	lsls	r7, r3, #16
 8003d18:	d508      	bpl.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d1a:	4975      	ldr	r1, [pc, #468]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003d1c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8003d1e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003d22:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8003d26:	4302      	orrs	r2, r0
 8003d28:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d2c:	03d8      	lsls	r0, r3, #15
 8003d2e:	d508      	bpl.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d30:	496f      	ldr	r1, [pc, #444]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003d32:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8003d34:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003d38:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8003d3c:	4302      	orrs	r2, r0
 8003d3e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d42:	0399      	lsls	r1, r3, #14
 8003d44:	d508      	bpl.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d46:	496a      	ldr	r1, [pc, #424]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003d48:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8003d4a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003d4e:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8003d52:	4302      	orrs	r2, r0
 8003d54:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d58:	065a      	lsls	r2, r3, #25
 8003d5a:	d508      	bpl.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d5c:	4964      	ldr	r1, [pc, #400]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003d5e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8003d60:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003d64:	f022 0203 	bic.w	r2, r2, #3
 8003d68:	4302      	orrs	r2, r0
 8003d6a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d6e:	061f      	lsls	r7, r3, #24
 8003d70:	d508      	bpl.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d72:	495f      	ldr	r1, [pc, #380]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003d74:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8003d76:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003d7a:	f022 020c 	bic.w	r2, r2, #12
 8003d7e:	4302      	orrs	r2, r0
 8003d80:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d84:	05d8      	lsls	r0, r3, #23
 8003d86:	d508      	bpl.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d88:	4959      	ldr	r1, [pc, #356]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003d8a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8003d8c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003d90:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8003d94:	4302      	orrs	r2, r0
 8003d96:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d9a:	0599      	lsls	r1, r3, #22
 8003d9c:	d508      	bpl.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d9e:	4954      	ldr	r1, [pc, #336]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003da0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8003da2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003da6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003daa:	4302      	orrs	r2, r0
 8003dac:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003db0:	055a      	lsls	r2, r3, #21
 8003db2:	d508      	bpl.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003db4:	494e      	ldr	r1, [pc, #312]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003db6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003db8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003dbc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003dc0:	4302      	orrs	r2, r0
 8003dc2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003dc6:	051f      	lsls	r7, r3, #20
 8003dc8:	d508      	bpl.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003dca:	4949      	ldr	r1, [pc, #292]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003dcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003dce:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003dd2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003dd6:	4302      	orrs	r2, r0
 8003dd8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003ddc:	04d8      	lsls	r0, r3, #19
 8003dde:	d508      	bpl.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003de0:	4943      	ldr	r1, [pc, #268]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003de2:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8003de4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003de8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003dec:	4302      	orrs	r2, r0
 8003dee:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003df2:	0499      	lsls	r1, r3, #18
 8003df4:	d508      	bpl.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003df6:	493e      	ldr	r1, [pc, #248]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003df8:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8003dfa:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003dfe:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003e02:	4302      	orrs	r2, r0
 8003e04:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003e08:	025a      	lsls	r2, r3, #9
 8003e0a:	d508      	bpl.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003e0c:	4938      	ldr	r1, [pc, #224]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003e0e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8003e10:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003e14:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8003e18:	4302      	orrs	r2, r0
 8003e1a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003e1e:	029f      	lsls	r7, r3, #10
 8003e20:	d50c      	bpl.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003e22:	4833      	ldr	r0, [pc, #204]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003e24:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8003e26:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8003e2a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003e2e:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8003e32:	bf08      	it	eq
 8003e34:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003e36:	430a      	orrs	r2, r1
 8003e38:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8003e3c:	f013 0f08 	tst.w	r3, #8
 8003e40:	bf18      	it	ne
 8003e42:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e44:	0358      	lsls	r0, r3, #13
 8003e46:	d508      	bpl.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e48:	4929      	ldr	r1, [pc, #164]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003e4a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8003e4c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003e50:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003e54:	4302      	orrs	r2, r0
 8003e56:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003e5a:	0219      	lsls	r1, r3, #8
 8003e5c:	d509      	bpl.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003e5e:	4924      	ldr	r1, [pc, #144]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003e60:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8003e64:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003e68:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003e6c:	4302      	orrs	r2, r0
 8003e6e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003e72:	015a      	lsls	r2, r3, #5
 8003e74:	d509      	bpl.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003e76:	491e      	ldr	r1, [pc, #120]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003e78:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8003e7c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003e80:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8003e84:	4302      	orrs	r2, r0
 8003e86:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e8a:	011f      	lsls	r7, r3, #4
 8003e8c:	d509      	bpl.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e8e:	4918      	ldr	r1, [pc, #96]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003e90:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8003e94:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8003e98:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8003e9c:	4302      	orrs	r2, r0
 8003e9e:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003ea2:	00d8      	lsls	r0, r3, #3
 8003ea4:	d509      	bpl.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003ea6:	4912      	ldr	r1, [pc, #72]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003ea8:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8003eac:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8003eb0:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8003eb4:	4302      	orrs	r2, r0
 8003eb6:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003eba:	2e01      	cmp	r6, #1
 8003ebc:	f000 80b4 	beq.w	8004028 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8003ec0:	0199      	lsls	r1, r3, #6
 8003ec2:	f100 80b1 	bmi.w	8004028 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003ec6:	2d01      	cmp	r5, #1
 8003ec8:	d175      	bne.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x3be>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003eca:	4d09      	ldr	r5, [pc, #36]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003ecc:	682b      	ldr	r3, [r5, #0]
 8003ece:	462e      	mov	r6, r5
 8003ed0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ed4:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ed6:	f7fe f8a1 	bl	800201c <HAL_GetTick>
 8003eda:	4607      	mov	r7, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003edc:	682b      	ldr	r3, [r5, #0]
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	f100 8126 	bmi.w	8004130 <HAL_RCCEx_PeriphCLKConfig+0x538>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003ee4:	6822      	ldr	r2, [r4, #0]
 8003ee6:	0315      	lsls	r5, r2, #12
 8003ee8:	d506      	bpl.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8003eea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003eec:	b143      	cbz	r3, 8003f00 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8003eee:	e003      	b.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8003ef0:	40023800 	.word	0x40023800
 8003ef4:	40007000 	.word	0x40007000
 8003ef8:	02d0      	lsls	r0, r2, #11
 8003efa:	d51c      	bpl.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x33e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003efc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003efe:	b9d3      	cbnz	r3, 8003f36 <HAL_RCCEx_PeriphCLKConfig+0x33e>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003f00:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f04:	f8d6 1088 	ldr.w	r1, [r6, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003f08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f0c:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8003f10:	430b      	orrs	r3, r1
 8003f12:	6961      	ldr	r1, [r4, #20]
 8003f14:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8003f18:	69a1      	ldr	r1, [r4, #24]
 8003f1a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003f1e:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003f22:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 8003f26:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003f28:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8003f2c:	3901      	subs	r1, #1
 8003f2e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003f32:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003f36:	0291      	lsls	r1, r2, #10
 8003f38:	d515      	bpl.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003f3a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8003f3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f40:	d111      	bne.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003f42:	4982      	ldr	r1, [pc, #520]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x554>)
 8003f44:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f48:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003f4c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8003f50:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8003f54:	4303      	orrs	r3, r0
 8003f56:	6960      	ldr	r0, [r4, #20]
 8003f58:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003f5c:	6a20      	ldr	r0, [r4, #32]
 8003f5e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8003f62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003f66:	0712      	lsls	r2, r2, #28
 8003f68:	d519      	bpl.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003f6a:	4a78      	ldr	r2, [pc, #480]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x554>)
 8003f6c:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003f70:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003f74:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8003f78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f7c:	430b      	orrs	r3, r1
 8003f7e:	6961      	ldr	r1, [r4, #20]
 8003f80:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8003f84:	69e1      	ldr	r1, [r4, #28]
 8003f86:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8003f8a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003f8e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8003f92:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003f94:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003f98:	430b      	orrs	r3, r1
 8003f9a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003f9e:	4c6b      	ldr	r4, [pc, #428]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x554>)
 8003fa0:	6823      	ldr	r3, [r4, #0]
 8003fa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fa6:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fa8:	f7fe f838 	bl	800201c <HAL_GetTick>
 8003fac:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003fae:	6823      	ldr	r3, [r4, #0]
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	f140 80c4 	bpl.w	800413e <HAL_RCCEx_PeriphCLKConfig+0x546>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8003fb6:	2000      	movs	r0, #0
 8003fb8:	e009      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      plli2sused = 1;
 8003fba:	2601      	movs	r6, #1
 8003fbc:	e658      	b.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fbe:	f7fe f82d 	bl	800201c <HAL_GetTick>
 8003fc2:	eba0 0008 	sub.w	r0, r0, r8
 8003fc6:	2864      	cmp	r0, #100	; 0x64
 8003fc8:	f67f ae6a 	bls.w	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8003fcc:	2003      	movs	r0, #3
}
 8003fce:	b003      	add	sp, #12
 8003fd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003fd4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003fd6:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	f43f ae6a 	beq.w	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003fe0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8003fe2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003fe4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8003fe8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003fec:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003fee:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003ff0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003ff4:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8003ff6:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003ff8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ffa:	07db      	lsls	r3, r3, #31
 8003ffc:	f57f ae5a 	bpl.w	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 8004000:	f7fe f80c 	bl	800201c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004004:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8004008:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800400a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800400c:	0798      	lsls	r0, r3, #30
 800400e:	f53f ae51 	bmi.w	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004012:	f7fe f803 	bl	800201c <HAL_GetTick>
 8004016:	eba0 0008 	sub.w	r0, r0, r8
 800401a:	4548      	cmp	r0, r9
 800401c:	d9f5      	bls.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x412>
 800401e:	e7d5      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004020:	6891      	ldr	r1, [r2, #8]
 8004022:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8004026:	e655      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 8004028:	4e48      	ldr	r6, [pc, #288]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x554>)
 800402a:	6833      	ldr	r3, [r6, #0]
 800402c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004030:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8004032:	f7fd fff3 	bl	800201c <HAL_GetTick>
 8004036:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004038:	6833      	ldr	r3, [r6, #0]
 800403a:	011a      	lsls	r2, r3, #4
 800403c:	d472      	bmi.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800403e:	6822      	ldr	r2, [r4, #0]
 8004040:	07d3      	lsls	r3, r2, #31
 8004042:	d512      	bpl.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x472>
 8004044:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004046:	b983      	cbnz	r3, 800406a <HAL_RCCEx_PeriphCLKConfig+0x472>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004048:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800404c:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004050:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004054:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8004058:	430b      	orrs	r3, r1
 800405a:	6861      	ldr	r1, [r4, #4]
 800405c:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8004060:	68a1      	ldr	r1, [r4, #8]
 8004062:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8004066:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800406a:	0317      	lsls	r7, r2, #12
 800406c:	d503      	bpl.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800406e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004070:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004074:	d005      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8004076:	02d6      	lsls	r6, r2, #11
 8004078:	d51e      	bpl.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800407a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800407c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004080:	d11a      	bne.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004082:	4932      	ldr	r1, [pc, #200]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x554>)
 8004084:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004088:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800408c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004090:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8004094:	4303      	orrs	r3, r0
 8004096:	6860      	ldr	r0, [r4, #4]
 8004098:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800409c:	68e0      	ldr	r0, [r4, #12]
 800409e:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80040a2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80040a6:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 80040aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80040ac:	f020 001f 	bic.w	r0, r0, #31
 80040b0:	3b01      	subs	r3, #1
 80040b2:	4303      	orrs	r3, r0
 80040b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80040b8:	01d0      	lsls	r0, r2, #7
 80040ba:	d511      	bpl.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80040bc:	4923      	ldr	r1, [pc, #140]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x554>)
 80040be:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80040c2:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80040c6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80040ca:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80040ce:	4303      	orrs	r3, r0
 80040d0:	6860      	ldr	r0, [r4, #4]
 80040d2:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80040d6:	6920      	ldr	r0, [r4, #16]
 80040d8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80040dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80040e0:	0191      	lsls	r1, r2, #6
 80040e2:	d50d      	bpl.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x508>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80040e4:	6923      	ldr	r3, [r4, #16]
 80040e6:	6862      	ldr	r2, [r4, #4]
 80040e8:	041b      	lsls	r3, r3, #16
 80040ea:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80040ee:	68e2      	ldr	r2, [r4, #12]
 80040f0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80040f4:	68a2      	ldr	r2, [r4, #8]
 80040f6:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80040fa:	4a14      	ldr	r2, [pc, #80]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x554>)
 80040fc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8004100:	4e12      	ldr	r6, [pc, #72]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x554>)
 8004102:	6833      	ldr	r3, [r6, #0]
 8004104:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004108:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800410a:	f7fd ff87 	bl	800201c <HAL_GetTick>
 800410e:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004110:	6833      	ldr	r3, [r6, #0]
 8004112:	011a      	lsls	r2, r3, #4
 8004114:	f53f aed7 	bmi.w	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004118:	f7fd ff80 	bl	800201c <HAL_GetTick>
 800411c:	1bc0      	subs	r0, r0, r7
 800411e:	2864      	cmp	r0, #100	; 0x64
 8004120:	d9f6      	bls.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004122:	e753      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x3d4>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004124:	f7fd ff7a 	bl	800201c <HAL_GetTick>
 8004128:	1bc0      	subs	r0, r0, r7
 800412a:	2864      	cmp	r0, #100	; 0x64
 800412c:	d984      	bls.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x440>
 800412e:	e74d      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x3d4>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004130:	f7fd ff74 	bl	800201c <HAL_GetTick>
 8004134:	1bc0      	subs	r0, r0, r7
 8004136:	2864      	cmp	r0, #100	; 0x64
 8004138:	f67f aed0 	bls.w	8003edc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 800413c:	e746      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x3d4>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800413e:	f7fd ff6d 	bl	800201c <HAL_GetTick>
 8004142:	1b40      	subs	r0, r0, r5
 8004144:	2864      	cmp	r0, #100	; 0x64
 8004146:	f67f af32 	bls.w	8003fae <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800414a:	e73f      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x3d4>
 800414c:	40023800 	.word	0x40023800

08004150 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004150:	6803      	ldr	r3, [r0, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004158:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800415a:	689a      	ldr	r2, [r3, #8]
 800415c:	f022 0201 	bic.w	r2, r2, #1
 8004160:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004162:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8004164:	2a01      	cmp	r2, #1
 8004166:	d103      	bne.n	8004170 <UART_EndRxTransfer+0x20>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	f022 0210 	bic.w	r2, r2, #16
 800416e:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004170:	2320      	movs	r3, #32
 8004172:	67c3      	str	r3, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004174:	2300      	movs	r3, #0
 8004176:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004178:	6643      	str	r3, [r0, #100]	; 0x64
}
 800417a:	4770      	bx	lr

0800417c <HAL_UART_DeInit>:
{
 800417c:	b538      	push	{r3, r4, r5, lr}
  if (huart == NULL)
 800417e:	4605      	mov	r5, r0
 8004180:	b1a8      	cbz	r0, 80041ae <HAL_UART_DeInit+0x32>
  huart->gState = HAL_UART_STATE_BUSY;
 8004182:	2324      	movs	r3, #36	; 0x24
  huart->Instance->CR1 = 0x0U;
 8004184:	2400      	movs	r4, #0
  huart->gState = HAL_UART_STATE_BUSY;
 8004186:	6783      	str	r3, [r0, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8004188:	6803      	ldr	r3, [r0, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	f022 0201 	bic.w	r2, r2, #1
 8004190:	601a      	str	r2, [r3, #0]
  huart->Instance->CR1 = 0x0U;
 8004192:	601c      	str	r4, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8004194:	605c      	str	r4, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8004196:	609c      	str	r4, [r3, #8]
  HAL_UART_MspDeInit(huart);
 8004198:	f7fd fc8c 	bl	8001ab4 <HAL_UART_MspDeInit>
  return HAL_OK;
 800419c:	4620      	mov	r0, r4
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800419e:	f8c5 4080 	str.w	r4, [r5, #128]	; 0x80
  __HAL_UNLOCK(huart);
 80041a2:	f885 4074 	strb.w	r4, [r5, #116]	; 0x74
  huart->gState = HAL_UART_STATE_RESET;
 80041a6:	67ac      	str	r4, [r5, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 80041a8:	67ec      	str	r4, [r5, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041aa:	662c      	str	r4, [r5, #96]	; 0x60
}
 80041ac:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80041ae:	2001      	movs	r0, #1
 80041b0:	e7fc      	b.n	80041ac <HAL_UART_DeInit+0x30>

080041b2 <HAL_UART_TxCpltCallback>:
 80041b2:	4770      	bx	lr

080041b4 <HAL_UART_RxHalfCpltCallback>:
 80041b4:	4770      	bx	lr

080041b6 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80041b6:	6b80      	ldr	r0, [r0, #56]	; 0x38

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80041b8:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 80041ba:	6f82      	ldr	r2, [r0, #120]	; 0x78
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80041bc:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
{
 80041be:	b510      	push	{r4, lr}
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80041c0:	689c      	ldr	r4, [r3, #8]
 80041c2:	0624      	lsls	r4, r4, #24
 80041c4:	d50a      	bpl.n	80041dc <UART_DMAError+0x26>
 80041c6:	2a21      	cmp	r2, #33	; 0x21
 80041c8:	d108      	bne.n	80041dc <UART_DMAError+0x26>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80041ca:	2200      	movs	r2, #0
 80041cc:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80041d6:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80041d8:	2220      	movs	r2, #32
 80041da:	6782      	str	r2, [r0, #120]	; 0x78
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	065b      	lsls	r3, r3, #25
 80041e0:	d506      	bpl.n	80041f0 <UART_DMAError+0x3a>
 80041e2:	2922      	cmp	r1, #34	; 0x22
 80041e4:	d104      	bne.n	80041f0 <UART_DMAError+0x3a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80041e6:	2300      	movs	r3, #0
 80041e8:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80041ec:	f7ff ffb0 	bl	8004150 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80041f0:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 80041f4:	f043 0310 	orr.w	r3, r3, #16
 80041f8:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041fc:	f7fd fc7a 	bl	8001af4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004200:	bd10      	pop	{r4, pc}

08004202 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004202:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004204:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8004206:	2300      	movs	r3, #0
 8004208:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800420c:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004210:	f7fd fc70 	bl	8001af4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004214:	bd08      	pop	{r3, pc}

08004216 <HAL_UARTEx_RxEventCallback>:
}
 8004216:	4770      	bx	lr

08004218 <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004218:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800421a:	b508      	push	{r3, lr}
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800421c:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800421e:	2b01      	cmp	r3, #1
 8004220:	d105      	bne.n	800422e <UART_DMARxHalfCplt+0x16>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004222:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 8004226:	0849      	lsrs	r1, r1, #1
 8004228:	f7ff fff5 	bl	8004216 <HAL_UARTEx_RxEventCallback>
}
 800422c:	bd08      	pop	{r3, pc}
    HAL_UART_RxHalfCpltCallback(huart);
 800422e:	f7ff ffc1 	bl	80041b4 <HAL_UART_RxHalfCpltCallback>
}
 8004232:	e7fb      	b.n	800422c <UART_DMARxHalfCplt+0x14>

08004234 <UART_DMAReceiveCplt>:
{
 8004234:	b508      	push	{r3, lr}
 8004236:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004238:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800423a:	69db      	ldr	r3, [r3, #28]
 800423c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004240:	d018      	beq.n	8004274 <UART_DMAReceiveCplt+0x40>
    huart->RxXferCount = 0U;
 8004242:	2300      	movs	r3, #0
 8004244:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004248:	6803      	ldr	r3, [r0, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004250:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004252:	689a      	ldr	r2, [r3, #8]
 8004254:	f022 0201 	bic.w	r2, r2, #1
 8004258:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800425a:	689a      	ldr	r2, [r3, #8]
 800425c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004260:	609a      	str	r2, [r3, #8]
    huart->RxState = HAL_UART_STATE_READY;
 8004262:	2220      	movs	r2, #32
 8004264:	67c2      	str	r2, [r0, #124]	; 0x7c
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004266:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8004268:	2a01      	cmp	r2, #1
 800426a:	d103      	bne.n	8004274 <UART_DMAReceiveCplt+0x40>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	f022 0210 	bic.w	r2, r2, #16
 8004272:	601a      	str	r2, [r3, #0]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004274:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8004276:	2b01      	cmp	r3, #1
 8004278:	d104      	bne.n	8004284 <UART_DMAReceiveCplt+0x50>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800427a:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 800427e:	f7ff ffca 	bl	8004216 <HAL_UARTEx_RxEventCallback>
}
 8004282:	bd08      	pop	{r3, pc}
    HAL_UART_RxCpltCallback(huart);
 8004284:	f7fd fc44 	bl	8001b10 <HAL_UART_RxCpltCallback>
}
 8004288:	e7fb      	b.n	8004282 <UART_DMAReceiveCplt+0x4e>

0800428a <HAL_UARTEx_WakeupCallback>:
}
 800428a:	4770      	bx	lr

0800428c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800428c:	6803      	ldr	r3, [r0, #0]
{
 800428e:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004290:	69da      	ldr	r2, [r3, #28]
  if (errorflags == 0U)
 8004292:	f640 060f 	movw	r6, #2063	; 0x80f
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004296:	6819      	ldr	r1, [r3, #0]
{
 8004298:	4604      	mov	r4, r0
  if (errorflags == 0U)
 800429a:	4232      	tst	r2, r6
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800429c:	689d      	ldr	r5, [r3, #8]
  if (errorflags == 0U)
 800429e:	d109      	bne.n	80042b4 <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80042a0:	0696      	lsls	r6, r2, #26
 80042a2:	d57d      	bpl.n	80043a0 <HAL_UART_IRQHandler+0x114>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80042a4:	068e      	lsls	r6, r1, #26
 80042a6:	d57b      	bpl.n	80043a0 <HAL_UART_IRQHandler+0x114>
      if (huart->RxISR != NULL)
 80042a8:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d072      	beq.n	8004394 <HAL_UART_IRQHandler+0x108>
}
 80042ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 80042b2:	4718      	bx	r3
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80042b4:	4e7a      	ldr	r6, [pc, #488]	; (80044a0 <HAL_UART_IRQHandler+0x214>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 80042b6:	f005 0001 	and.w	r0, r5, #1
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80042ba:	400e      	ands	r6, r1
 80042bc:	4306      	orrs	r6, r0
 80042be:	d06f      	beq.n	80043a0 <HAL_UART_IRQHandler+0x114>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80042c0:	07d5      	lsls	r5, r2, #31
 80042c2:	d509      	bpl.n	80042d8 <HAL_UART_IRQHandler+0x4c>
 80042c4:	05ce      	lsls	r6, r1, #23
 80042c6:	d507      	bpl.n	80042d8 <HAL_UART_IRQHandler+0x4c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80042c8:	2501      	movs	r5, #1
 80042ca:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80042cc:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 80042d0:	f045 0501 	orr.w	r5, r5, #1
 80042d4:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80042d8:	0795      	lsls	r5, r2, #30
 80042da:	d508      	bpl.n	80042ee <HAL_UART_IRQHandler+0x62>
 80042dc:	b138      	cbz	r0, 80042ee <HAL_UART_IRQHandler+0x62>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80042de:	2502      	movs	r5, #2
 80042e0:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80042e2:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 80042e6:	f045 0504 	orr.w	r5, r5, #4
 80042ea:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80042ee:	0756      	lsls	r6, r2, #29
 80042f0:	d508      	bpl.n	8004304 <HAL_UART_IRQHandler+0x78>
 80042f2:	b138      	cbz	r0, 8004304 <HAL_UART_IRQHandler+0x78>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80042f4:	2504      	movs	r5, #4
 80042f6:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042f8:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 80042fc:	f045 0502 	orr.w	r5, r5, #2
 8004300:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004304:	0715      	lsls	r5, r2, #28
 8004306:	d50b      	bpl.n	8004320 <HAL_UART_IRQHandler+0x94>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004308:	f001 0520 	and.w	r5, r1, #32
 800430c:	4328      	orrs	r0, r5
 800430e:	d007      	beq.n	8004320 <HAL_UART_IRQHandler+0x94>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004310:	2008      	movs	r0, #8
 8004312:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004314:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8004318:	f040 0008 	orr.w	r0, r0, #8
 800431c:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004320:	0516      	lsls	r6, r2, #20
 8004322:	d50a      	bpl.n	800433a <HAL_UART_IRQHandler+0xae>
 8004324:	014d      	lsls	r5, r1, #5
 8004326:	d508      	bpl.n	800433a <HAL_UART_IRQHandler+0xae>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004328:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800432c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800432e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8004332:	f043 0320 	orr.w	r3, r3, #32
 8004336:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800433a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800433e:	b34b      	cbz	r3, 8004394 <HAL_UART_IRQHandler+0x108>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004340:	0690      	lsls	r0, r2, #26
 8004342:	d505      	bpl.n	8004350 <HAL_UART_IRQHandler+0xc4>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004344:	0689      	lsls	r1, r1, #26
 8004346:	d503      	bpl.n	8004350 <HAL_UART_IRQHandler+0xc4>
        if (huart->RxISR != NULL)
 8004348:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800434a:	b10b      	cbz	r3, 8004350 <HAL_UART_IRQHandler+0xc4>
          huart->RxISR(huart);
 800434c:	4620      	mov	r0, r4
 800434e:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004350:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8004352:	4620      	mov	r0, r4
      errorcode = huart->ErrorCode;
 8004354:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004358:	689b      	ldr	r3, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800435a:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800435e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004362:	431d      	orrs	r5, r3
 8004364:	d017      	beq.n	8004396 <HAL_UART_IRQHandler+0x10a>
        UART_EndRxTransfer(huart);
 8004366:	f7ff fef3 	bl	8004150 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800436a:	6823      	ldr	r3, [r4, #0]
 800436c:	689a      	ldr	r2, [r3, #8]
 800436e:	0652      	lsls	r2, r2, #25
 8004370:	d50d      	bpl.n	800438e <HAL_UART_IRQHandler+0x102>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004372:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8004374:	6f20      	ldr	r0, [r4, #112]	; 0x70
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004376:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800437a:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 800437c:	b138      	cbz	r0, 800438e <HAL_UART_IRQHandler+0x102>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800437e:	4b49      	ldr	r3, [pc, #292]	; (80044a4 <HAL_UART_IRQHandler+0x218>)
 8004380:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004382:	f7fe f820 	bl	80023c6 <HAL_DMA_Abort_IT>
 8004386:	b128      	cbz	r0, 8004394 <HAL_UART_IRQHandler+0x108>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004388:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800438a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800438c:	e78f      	b.n	80042ae <HAL_UART_IRQHandler+0x22>
            HAL_UART_ErrorCallback(huart);
 800438e:	4620      	mov	r0, r4
 8004390:	f7fd fbb0 	bl	8001af4 <HAL_UART_ErrorCallback>
}
 8004394:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8004396:	f7fd fbad 	bl	8001af4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800439a:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 800439e:	e7f9      	b.n	8004394 <HAL_UART_IRQHandler+0x108>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043a0:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80043a2:	2801      	cmp	r0, #1
 80043a4:	d158      	bne.n	8004458 <HAL_UART_IRQHandler+0x1cc>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80043a6:	06d6      	lsls	r6, r2, #27
 80043a8:	d556      	bpl.n	8004458 <HAL_UART_IRQHandler+0x1cc>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80043aa:	06c8      	lsls	r0, r1, #27
 80043ac:	d554      	bpl.n	8004458 <HAL_UART_IRQHandler+0x1cc>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80043ae:	2210      	movs	r2, #16
 80043b0:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043b2:	689a      	ldr	r2, [r3, #8]
 80043b4:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 80043b8:	d02f      	beq.n	800441a <HAL_UART_IRQHandler+0x18e>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80043ba:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80043bc:	6802      	ldr	r2, [r0, #0]
 80043be:	6852      	ldr	r2, [r2, #4]
 80043c0:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 80043c2:	2a00      	cmp	r2, #0
 80043c4:	d0e6      	beq.n	8004394 <HAL_UART_IRQHandler+0x108>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80043c6:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 80043ca:	4291      	cmp	r1, r2
 80043cc:	d9e2      	bls.n	8004394 <HAL_UART_IRQHandler+0x108>
        huart->RxXferCount = nb_remaining_rx_data;
 80043ce:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80043d2:	69c2      	ldr	r2, [r0, #28]
 80043d4:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80043d8:	d015      	beq.n	8004406 <HAL_UART_IRQHandler+0x17a>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043e0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043e2:	689a      	ldr	r2, [r3, #8]
 80043e4:	f022 0201 	bic.w	r2, r2, #1
 80043e8:	609a      	str	r2, [r3, #8]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043ea:	689a      	ldr	r2, [r3, #8]
 80043ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043f0:	609a      	str	r2, [r3, #8]
          huart->RxState = HAL_UART_STATE_READY;
 80043f2:	2220      	movs	r2, #32
 80043f4:	67e2      	str	r2, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043f6:	2200      	movs	r2, #0
 80043f8:	6622      	str	r2, [r4, #96]	; 0x60
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	f022 0210 	bic.w	r2, r2, #16
 8004400:	601a      	str	r2, [r3, #0]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004402:	f7fd ff9c 	bl	800233e <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004406:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 800440a:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 800440e:	1ac9      	subs	r1, r1, r3
 8004410:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004412:	4620      	mov	r0, r4
 8004414:	f7ff feff 	bl	8004216 <HAL_UARTEx_RxEventCallback>
 8004418:	e7bc      	b.n	8004394 <HAL_UART_IRQHandler+0x108>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800441a:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
 800441e:	b288      	uxth	r0, r1
      if ((huart->RxXferCount > 0U)
 8004420:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
 8004424:	b289      	uxth	r1, r1
 8004426:	2900      	cmp	r1, #0
 8004428:	d0b4      	beq.n	8004394 <HAL_UART_IRQHandler+0x108>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800442a:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 800442e:	1a09      	subs	r1, r1, r0
 8004430:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8004432:	2900      	cmp	r1, #0
 8004434:	d0ae      	beq.n	8004394 <HAL_UART_IRQHandler+0x108>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004436:	6818      	ldr	r0, [r3, #0]
 8004438:	f420 7090 	bic.w	r0, r0, #288	; 0x120
 800443c:	6018      	str	r0, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800443e:	6898      	ldr	r0, [r3, #8]
 8004440:	f020 0001 	bic.w	r0, r0, #1
 8004444:	6098      	str	r0, [r3, #8]
        huart->RxState = HAL_UART_STATE_READY;
 8004446:	2020      	movs	r0, #32
        huart->RxISR = NULL;
 8004448:	6662      	str	r2, [r4, #100]	; 0x64
        huart->RxState = HAL_UART_STATE_READY;
 800444a:	67e0      	str	r0, [r4, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800444c:	6622      	str	r2, [r4, #96]	; 0x60
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	f022 0210 	bic.w	r2, r2, #16
 8004454:	601a      	str	r2, [r3, #0]
 8004456:	e7dc      	b.n	8004412 <HAL_UART_IRQHandler+0x186>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004458:	02d6      	lsls	r6, r2, #11
 800445a:	d508      	bpl.n	800446e <HAL_UART_IRQHandler+0x1e2>
 800445c:	0268      	lsls	r0, r5, #9
 800445e:	d506      	bpl.n	800446e <HAL_UART_IRQHandler+0x1e2>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004460:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8004464:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004466:	621a      	str	r2, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8004468:	f7ff ff0f 	bl	800428a <HAL_UARTEx_WakeupCallback>
    return;
 800446c:	e792      	b.n	8004394 <HAL_UART_IRQHandler+0x108>
  if (((isrflags & USART_ISR_TXE) != 0U)
 800446e:	0616      	lsls	r6, r2, #24
 8004470:	d506      	bpl.n	8004480 <HAL_UART_IRQHandler+0x1f4>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004472:	060d      	lsls	r5, r1, #24
 8004474:	d504      	bpl.n	8004480 <HAL_UART_IRQHandler+0x1f4>
    if (huart->TxISR != NULL)
 8004476:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8004478:	2b00      	cmp	r3, #0
 800447a:	d08b      	beq.n	8004394 <HAL_UART_IRQHandler+0x108>
      huart->TxISR(huart);
 800447c:	4620      	mov	r0, r4
 800447e:	e716      	b.n	80042ae <HAL_UART_IRQHandler+0x22>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004480:	0650      	lsls	r0, r2, #25
 8004482:	d587      	bpl.n	8004394 <HAL_UART_IRQHandler+0x108>
 8004484:	064a      	lsls	r2, r1, #25
 8004486:	d585      	bpl.n	8004394 <HAL_UART_IRQHandler+0x108>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004488:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800448a:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800448c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004490:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004492:	2320      	movs	r3, #32
 8004494:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->TxISR = NULL;
 8004496:	2300      	movs	r3, #0
 8004498:	66a3      	str	r3, [r4, #104]	; 0x68
  HAL_UART_TxCpltCallback(huart);
 800449a:	f7ff fe8a 	bl	80041b2 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800449e:	e779      	b.n	8004394 <HAL_UART_IRQHandler+0x108>
 80044a0:	04000120 	.word	0x04000120
 80044a4:	08004203 	.word	0x08004203

080044a8 <UART_SetConfig>:
{
 80044a8:	b538      	push	{r3, r4, r5, lr}
 80044aa:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044ac:	69c0      	ldr	r0, [r0, #28]
 80044ae:	6921      	ldr	r1, [r4, #16]
 80044b0:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044b2:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044b4:	430a      	orrs	r2, r1
 80044b6:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044b8:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044ba:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044bc:	4991      	ldr	r1, [pc, #580]	; (8004704 <UART_SetConfig+0x25c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044be:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044c0:	4029      	ands	r1, r5
  tmpreg |= huart->Init.OneBitSampling;
 80044c2:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044c4:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044c6:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044c8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044ca:	685a      	ldr	r2, [r3, #4]
 80044cc:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80044d0:	430a      	orrs	r2, r1
 80044d2:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044d4:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044d6:	6899      	ldr	r1, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 80044d8:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044da:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 80044de:	430a      	orrs	r2, r1
 80044e0:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044e2:	4a89      	ldr	r2, [pc, #548]	; (8004708 <UART_SetConfig+0x260>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d11b      	bne.n	8004520 <UART_SetConfig+0x78>
 80044e8:	4b88      	ldr	r3, [pc, #544]	; (800470c <UART_SetConfig+0x264>)
 80044ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ee:	f003 0303 	and.w	r3, r3, #3
 80044f2:	3b01      	subs	r3, #1
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	f200 80f3 	bhi.w	80046e0 <UART_SetConfig+0x238>
 80044fa:	4a85      	ldr	r2, [pc, #532]	; (8004710 <UART_SetConfig+0x268>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044fc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004500:	5cd3      	ldrb	r3, [r2, r3]
 8004502:	f040 80b0 	bne.w	8004666 <UART_SetConfig+0x1be>
    switch (clocksource)
 8004506:	2b08      	cmp	r3, #8
 8004508:	d826      	bhi.n	8004558 <UART_SetConfig+0xb0>
 800450a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800450e:	00f2      	.short	0x00f2
 8004510:	009500ec 	.word	0x009500ec
 8004514:	00e60025 	.word	0x00e60025
 8004518:	00250025 	.word	0x00250025
 800451c:	00960025 	.word	0x00960025
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004520:	4a7c      	ldr	r2, [pc, #496]	; (8004714 <UART_SetConfig+0x26c>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d106      	bne.n	8004534 <UART_SetConfig+0x8c>
 8004526:	4b79      	ldr	r3, [pc, #484]	; (800470c <UART_SetConfig+0x264>)
 8004528:	4a7b      	ldr	r2, [pc, #492]	; (8004718 <UART_SetConfig+0x270>)
 800452a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800452e:	f003 030c 	and.w	r3, r3, #12
 8004532:	e7e3      	b.n	80044fc <UART_SetConfig+0x54>
 8004534:	4a79      	ldr	r2, [pc, #484]	; (800471c <UART_SetConfig+0x274>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d118      	bne.n	800456c <UART_SetConfig+0xc4>
 800453a:	4b74      	ldr	r3, [pc, #464]	; (800470c <UART_SetConfig+0x264>)
 800453c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004540:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004544:	2b20      	cmp	r3, #32
 8004546:	f000 80c0 	beq.w	80046ca <UART_SetConfig+0x222>
 800454a:	d807      	bhi.n	800455c <UART_SetConfig+0xb4>
 800454c:	2b00      	cmp	r3, #0
 800454e:	f000 80cd 	beq.w	80046ec <UART_SetConfig+0x244>
 8004552:	2b10      	cmp	r3, #16
 8004554:	f000 80be 	beq.w	80046d4 <UART_SetConfig+0x22c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004558:	2001      	movs	r0, #1
 800455a:	e0cf      	b.n	80046fc <UART_SetConfig+0x254>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800455c:	2b30      	cmp	r3, #48	; 0x30
 800455e:	d1fb      	bne.n	8004558 <UART_SetConfig+0xb0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004560:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004564:	d069      	beq.n	800463a <UART_SetConfig+0x192>
        pclk = (uint32_t) LSE_VALUE;
 8004566:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800456a:	e098      	b.n	800469e <UART_SetConfig+0x1f6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800456c:	4a6c      	ldr	r2, [pc, #432]	; (8004720 <UART_SetConfig+0x278>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d10f      	bne.n	8004592 <UART_SetConfig+0xea>
 8004572:	4b66      	ldr	r3, [pc, #408]	; (800470c <UART_SetConfig+0x264>)
 8004574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004578:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800457c:	2b80      	cmp	r3, #128	; 0x80
 800457e:	f000 80a4 	beq.w	80046ca <UART_SetConfig+0x222>
 8004582:	d804      	bhi.n	800458e <UART_SetConfig+0xe6>
 8004584:	2b00      	cmp	r3, #0
 8004586:	f000 80b1 	beq.w	80046ec <UART_SetConfig+0x244>
 800458a:	2b40      	cmp	r3, #64	; 0x40
 800458c:	e7e2      	b.n	8004554 <UART_SetConfig+0xac>
 800458e:	2bc0      	cmp	r3, #192	; 0xc0
 8004590:	e7e5      	b.n	800455e <UART_SetConfig+0xb6>
 8004592:	4a64      	ldr	r2, [pc, #400]	; (8004724 <UART_SetConfig+0x27c>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d112      	bne.n	80045be <UART_SetConfig+0x116>
 8004598:	4b5c      	ldr	r3, [pc, #368]	; (800470c <UART_SetConfig+0x264>)
 800459a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800459e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045a6:	f000 8090 	beq.w	80046ca <UART_SetConfig+0x222>
 80045aa:	d805      	bhi.n	80045b8 <UART_SetConfig+0x110>
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	f000 809d 	beq.w	80046ec <UART_SetConfig+0x244>
 80045b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045b6:	e7cd      	b.n	8004554 <UART_SetConfig+0xac>
 80045b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045bc:	e7cf      	b.n	800455e <UART_SetConfig+0xb6>
 80045be:	4a5a      	ldr	r2, [pc, #360]	; (8004728 <UART_SetConfig+0x280>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d111      	bne.n	80045e8 <UART_SetConfig+0x140>
 80045c4:	4b51      	ldr	r3, [pc, #324]	; (800470c <UART_SetConfig+0x264>)
 80045c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ca:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80045ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045d2:	d07a      	beq.n	80046ca <UART_SetConfig+0x222>
 80045d4:	d805      	bhi.n	80045e2 <UART_SetConfig+0x13a>
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	f000 8082 	beq.w	80046e0 <UART_SetConfig+0x238>
 80045dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045e0:	e7b8      	b.n	8004554 <UART_SetConfig+0xac>
 80045e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80045e6:	e7ba      	b.n	800455e <UART_SetConfig+0xb6>
 80045e8:	4a50      	ldr	r2, [pc, #320]	; (800472c <UART_SetConfig+0x284>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d110      	bne.n	8004610 <UART_SetConfig+0x168>
 80045ee:	4b47      	ldr	r3, [pc, #284]	; (800470c <UART_SetConfig+0x264>)
 80045f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045f4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80045f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045fc:	d065      	beq.n	80046ca <UART_SetConfig+0x222>
 80045fe:	d804      	bhi.n	800460a <UART_SetConfig+0x162>
 8004600:	2b00      	cmp	r3, #0
 8004602:	d073      	beq.n	80046ec <UART_SetConfig+0x244>
 8004604:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004608:	e7a4      	b.n	8004554 <UART_SetConfig+0xac>
 800460a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800460e:	e7a6      	b.n	800455e <UART_SetConfig+0xb6>
 8004610:	4a47      	ldr	r2, [pc, #284]	; (8004730 <UART_SetConfig+0x288>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d1a0      	bne.n	8004558 <UART_SetConfig+0xb0>
 8004616:	4b3d      	ldr	r3, [pc, #244]	; (800470c <UART_SetConfig+0x264>)
 8004618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800461c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004620:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004624:	d051      	beq.n	80046ca <UART_SetConfig+0x222>
 8004626:	d804      	bhi.n	8004632 <UART_SetConfig+0x18a>
 8004628:	2b00      	cmp	r3, #0
 800462a:	d05f      	beq.n	80046ec <UART_SetConfig+0x244>
 800462c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004630:	e790      	b.n	8004554 <UART_SetConfig+0xac>
 8004632:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004636:	e792      	b.n	800455e <UART_SetConfig+0xb6>
        pclk = (uint32_t) HSI_VALUE;
 8004638:	483e      	ldr	r0, [pc, #248]	; (8004734 <UART_SetConfig+0x28c>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800463a:	6862      	ldr	r2, [r4, #4]
 800463c:	0853      	lsrs	r3, r2, #1
 800463e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8004642:	fbb0 f0f2 	udiv	r0, r0, r2
 8004646:	b283      	uxth	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004648:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800464c:	f1a3 0110 	sub.w	r1, r3, #16
 8004650:	4291      	cmp	r1, r2
 8004652:	d881      	bhi.n	8004558 <UART_SetConfig+0xb0>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004654:	f020 000f 	bic.w	r0, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004658:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800465c:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800465e:	b280      	uxth	r0, r0
        huart->Instance->BRR = brrtemp;
 8004660:	4318      	orrs	r0, r3
 8004662:	60d0      	str	r0, [r2, #12]
 8004664:	e049      	b.n	80046fa <UART_SetConfig+0x252>
    switch (clocksource)
 8004666:	2b08      	cmp	r3, #8
 8004668:	f63f af76 	bhi.w	8004558 <UART_SetConfig+0xb0>
 800466c:	a201      	add	r2, pc, #4	; (adr r2, 8004674 <UART_SetConfig+0x1cc>)
 800466e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004672:	bf00      	nop
 8004674:	08004699 	.word	0x08004699
 8004678:	080046bf 	.word	0x080046bf
 800467c:	080046d1 	.word	0x080046d1
 8004680:	08004559 	.word	0x08004559
 8004684:	080046c5 	.word	0x080046c5
 8004688:	08004559 	.word	0x08004559
 800468c:	08004559 	.word	0x08004559
 8004690:	08004559 	.word	0x08004559
 8004694:	08004567 	.word	0x08004567
        pclk = HAL_RCC_GetPCLK1Freq();
 8004698:	f7ff fa8e 	bl	8003bb8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800469c:	b368      	cbz	r0, 80046fa <UART_SetConfig+0x252>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800469e:	6862      	ldr	r2, [r4, #4]
 80046a0:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80046a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80046a8:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046aa:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80046ae:	f1a3 0110 	sub.w	r1, r3, #16
 80046b2:	4291      	cmp	r1, r2
 80046b4:	f63f af50 	bhi.w	8004558 <UART_SetConfig+0xb0>
        huart->Instance->BRR = usartdiv;
 80046b8:	6822      	ldr	r2, [r4, #0]
 80046ba:	60d3      	str	r3, [r2, #12]
 80046bc:	e01d      	b.n	80046fa <UART_SetConfig+0x252>
        pclk = HAL_RCC_GetPCLK2Freq();
 80046be:	f7ff fa8b 	bl	8003bd8 <HAL_RCC_GetPCLK2Freq>
        break;
 80046c2:	e7eb      	b.n	800469c <UART_SetConfig+0x1f4>
        pclk = HAL_RCC_GetSysClockFreq();
 80046c4:	f7ff f9a4 	bl	8003a10 <HAL_RCC_GetSysClockFreq>
        break;
 80046c8:	e7e8      	b.n	800469c <UART_SetConfig+0x1f4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046ca:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80046ce:	d0b3      	beq.n	8004638 <UART_SetConfig+0x190>
        pclk = (uint32_t) HSI_VALUE;
 80046d0:	4818      	ldr	r0, [pc, #96]	; (8004734 <UART_SetConfig+0x28c>)
 80046d2:	e7e4      	b.n	800469e <UART_SetConfig+0x1f6>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046d4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80046d8:	d1f4      	bne.n	80046c4 <UART_SetConfig+0x21c>
        pclk = HAL_RCC_GetSysClockFreq();
 80046da:	f7ff f999 	bl	8003a10 <HAL_RCC_GetSysClockFreq>
        break;
 80046de:	e00a      	b.n	80046f6 <UART_SetConfig+0x24e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046e0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80046e4:	d1eb      	bne.n	80046be <UART_SetConfig+0x216>
        pclk = HAL_RCC_GetPCLK2Freq();
 80046e6:	f7ff fa77 	bl	8003bd8 <HAL_RCC_GetPCLK2Freq>
        break;
 80046ea:	e004      	b.n	80046f6 <UART_SetConfig+0x24e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046ec:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80046f0:	d1d2      	bne.n	8004698 <UART_SetConfig+0x1f0>
        pclk = HAL_RCC_GetPCLK1Freq();
 80046f2:	f7ff fa61 	bl	8003bb8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80046f6:	2800      	cmp	r0, #0
 80046f8:	d19f      	bne.n	800463a <UART_SetConfig+0x192>
 80046fa:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 80046fc:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 80046fe:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
}
 8004702:	bd38      	pop	{r3, r4, r5, pc}
 8004704:	efff69f3 	.word	0xefff69f3
 8004708:	40011000 	.word	0x40011000
 800470c:	40023800 	.word	0x40023800
 8004710:	08009cfb 	.word	0x08009cfb
 8004714:	40004400 	.word	0x40004400
 8004718:	08009cfe 	.word	0x08009cfe
 800471c:	40004800 	.word	0x40004800
 8004720:	40004c00 	.word	0x40004c00
 8004724:	40005000 	.word	0x40005000
 8004728:	40011400 	.word	0x40011400
 800472c:	40007800 	.word	0x40007800
 8004730:	40007c00 	.word	0x40007c00
 8004734:	00f42400 	.word	0x00f42400

08004738 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004738:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800473a:	07da      	lsls	r2, r3, #31
{
 800473c:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800473e:	d506      	bpl.n	800474e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004740:	6801      	ldr	r1, [r0, #0]
 8004742:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8004744:	684a      	ldr	r2, [r1, #4]
 8004746:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800474a:	4322      	orrs	r2, r4
 800474c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800474e:	079c      	lsls	r4, r3, #30
 8004750:	d506      	bpl.n	8004760 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004752:	6801      	ldr	r1, [r0, #0]
 8004754:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8004756:	684a      	ldr	r2, [r1, #4]
 8004758:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800475c:	4322      	orrs	r2, r4
 800475e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004760:	0759      	lsls	r1, r3, #29
 8004762:	d506      	bpl.n	8004772 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004764:	6801      	ldr	r1, [r0, #0]
 8004766:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8004768:	684a      	ldr	r2, [r1, #4]
 800476a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800476e:	4322      	orrs	r2, r4
 8004770:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004772:	071a      	lsls	r2, r3, #28
 8004774:	d506      	bpl.n	8004784 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004776:	6801      	ldr	r1, [r0, #0]
 8004778:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800477a:	684a      	ldr	r2, [r1, #4]
 800477c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004780:	4322      	orrs	r2, r4
 8004782:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004784:	06dc      	lsls	r4, r3, #27
 8004786:	d506      	bpl.n	8004796 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004788:	6801      	ldr	r1, [r0, #0]
 800478a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800478c:	688a      	ldr	r2, [r1, #8]
 800478e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004792:	4322      	orrs	r2, r4
 8004794:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004796:	0699      	lsls	r1, r3, #26
 8004798:	d506      	bpl.n	80047a8 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800479a:	6801      	ldr	r1, [r0, #0]
 800479c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800479e:	688a      	ldr	r2, [r1, #8]
 80047a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047a4:	4322      	orrs	r2, r4
 80047a6:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047a8:	065a      	lsls	r2, r3, #25
 80047aa:	d510      	bpl.n	80047ce <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047ac:	6801      	ldr	r1, [r0, #0]
 80047ae:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80047b0:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047b2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047b6:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80047ba:	ea42 0204 	orr.w	r2, r2, r4
 80047be:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047c0:	d105      	bne.n	80047ce <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047c2:	684a      	ldr	r2, [r1, #4]
 80047c4:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80047c6:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80047ca:	4322      	orrs	r2, r4
 80047cc:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047ce:	061b      	lsls	r3, r3, #24
 80047d0:	d506      	bpl.n	80047e0 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047d2:	6802      	ldr	r2, [r0, #0]
 80047d4:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80047d6:	6853      	ldr	r3, [r2, #4]
 80047d8:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80047dc:	430b      	orrs	r3, r1
 80047de:	6053      	str	r3, [r2, #4]
}
 80047e0:	bd10      	pop	{r4, pc}

080047e2 <UART_WaitOnFlagUntilTimeout>:
{
 80047e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047e6:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80047ea:	4604      	mov	r4, r0
 80047ec:	460e      	mov	r6, r1
 80047ee:	4615      	mov	r5, r2
 80047f0:	461f      	mov	r7, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047f2:	6822      	ldr	r2, [r4, #0]
 80047f4:	69d3      	ldr	r3, [r2, #28]
 80047f6:	ea36 0303 	bics.w	r3, r6, r3
 80047fa:	bf0c      	ite	eq
 80047fc:	2301      	moveq	r3, #1
 80047fe:	2300      	movne	r3, #0
 8004800:	42ab      	cmp	r3, r5
 8004802:	d001      	beq.n	8004808 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8004804:	2000      	movs	r0, #0
 8004806:	e01a      	b.n	800483e <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8004808:	f1b8 3fff 	cmp.w	r8, #4294967295
 800480c:	d0f2      	beq.n	80047f4 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800480e:	f7fd fc05 	bl	800201c <HAL_GetTick>
 8004812:	1bc0      	subs	r0, r0, r7
 8004814:	4540      	cmp	r0, r8
 8004816:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004818:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800481a:	d802      	bhi.n	8004822 <UART_WaitOnFlagUntilTimeout+0x40>
 800481c:	f1b8 0f00 	cmp.w	r8, #0
 8004820:	d10f      	bne.n	8004842 <UART_WaitOnFlagUntilTimeout+0x60>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004822:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004826:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004828:	6883      	ldr	r3, [r0, #8]
 800482a:	f023 0301 	bic.w	r3, r3, #1
 800482e:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 8004830:	2320      	movs	r3, #32
 8004832:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004834:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8004836:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 8004838:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 800483a:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
}
 800483e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004842:	075a      	lsls	r2, r3, #29
 8004844:	d5d5      	bpl.n	80047f2 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004846:	69c3      	ldr	r3, [r0, #28]
 8004848:	051b      	lsls	r3, r3, #20
 800484a:	d5d2      	bpl.n	80047f2 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800484c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004850:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004852:	6803      	ldr	r3, [r0, #0]
 8004854:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004858:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800485a:	6883      	ldr	r3, [r0, #8]
 800485c:	f023 0301 	bic.w	r3, r3, #1
 8004860:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 8004862:	2320      	movs	r3, #32
 8004864:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004866:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004868:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 800486c:	e7e3      	b.n	8004836 <UART_WaitOnFlagUntilTimeout+0x54>

0800486e <HAL_UART_Transmit>:
{
 800486e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8004872:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8004874:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 8004876:	4604      	mov	r4, r0
 8004878:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 800487a:	2b20      	cmp	r3, #32
{
 800487c:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800487e:	d14e      	bne.n	800491e <HAL_UART_Transmit+0xb0>
    if ((pData == NULL) || (Size == 0U))
 8004880:	2900      	cmp	r1, #0
 8004882:	d04a      	beq.n	800491a <HAL_UART_Transmit+0xac>
 8004884:	2a00      	cmp	r2, #0
 8004886:	d048      	beq.n	800491a <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8004888:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 800488c:	2b01      	cmp	r3, #1
 800488e:	d046      	beq.n	800491e <HAL_UART_Transmit+0xb0>
 8004890:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004892:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 8004894:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004898:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800489a:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800489e:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 80048a0:	f7fd fbbc 	bl	800201c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048a4:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 80048a6:	4603      	mov	r3, r0
    huart->TxXferSize  = Size;
 80048a8:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048ac:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    huart->TxXferCount = Size;
 80048b0:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048b4:	d103      	bne.n	80048be <HAL_UART_Transmit+0x50>
 80048b6:	6922      	ldr	r2, [r4, #16]
 80048b8:	b90a      	cbnz	r2, 80048be <HAL_UART_Transmit+0x50>
 80048ba:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 80048bc:	4616      	mov	r6, r2
    __HAL_UNLOCK(huart);
 80048be:	2200      	movs	r2, #0
 80048c0:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 80048c4:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048c8:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 80048cc:	b292      	uxth	r2, r2
 80048ce:	b93a      	cbnz	r2, 80048e0 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048d0:	2140      	movs	r1, #64	; 0x40
 80048d2:	4620      	mov	r0, r4
 80048d4:	f7ff ff85 	bl	80047e2 <UART_WaitOnFlagUntilTimeout>
 80048d8:	b950      	cbnz	r0, 80048f0 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 80048da:	2320      	movs	r3, #32
 80048dc:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 80048de:	e008      	b.n	80048f2 <HAL_UART_Transmit+0x84>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048e0:	2200      	movs	r2, #0
 80048e2:	2180      	movs	r1, #128	; 0x80
 80048e4:	4620      	mov	r0, r4
 80048e6:	9303      	str	r3, [sp, #12]
 80048e8:	f7ff ff7b 	bl	80047e2 <UART_WaitOnFlagUntilTimeout>
 80048ec:	9b03      	ldr	r3, [sp, #12]
 80048ee:	b118      	cbz	r0, 80048f8 <HAL_UART_Transmit+0x8a>
        return HAL_TIMEOUT;
 80048f0:	2003      	movs	r0, #3
}
 80048f2:	b004      	add	sp, #16
 80048f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (pdata8bits == NULL)
 80048f8:	6821      	ldr	r1, [r4, #0]
 80048fa:	b95e      	cbnz	r6, 8004914 <HAL_UART_Transmit+0xa6>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048fc:	f835 2b02 	ldrh.w	r2, [r5], #2
 8004900:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004904:	628a      	str	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 8004906:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 800490a:	3a01      	subs	r2, #1
 800490c:	b292      	uxth	r2, r2
 800490e:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8004912:	e7d7      	b.n	80048c4 <HAL_UART_Transmit+0x56>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004914:	f816 2b01 	ldrb.w	r2, [r6], #1
 8004918:	e7f4      	b.n	8004904 <HAL_UART_Transmit+0x96>
      return  HAL_ERROR;
 800491a:	2001      	movs	r0, #1
 800491c:	e7e9      	b.n	80048f2 <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 800491e:	2002      	movs	r0, #2
 8004920:	e7e7      	b.n	80048f2 <HAL_UART_Transmit+0x84>

08004922 <UART_CheckIdleState>:
{
 8004922:	b530      	push	{r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004924:	2500      	movs	r5, #0
{
 8004926:	4604      	mov	r4, r0
 8004928:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800492a:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 800492e:	f7fd fb75 	bl	800201c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004932:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8004934:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004936:	6812      	ldr	r2, [r2, #0]
 8004938:	0711      	lsls	r1, r2, #28
 800493a:	d415      	bmi.n	8004968 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800493c:	6822      	ldr	r2, [r4, #0]
 800493e:	6812      	ldr	r2, [r2, #0]
 8004940:	0752      	lsls	r2, r2, #29
 8004942:	d509      	bpl.n	8004958 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004944:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8004948:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800494c:	4620      	mov	r0, r4
 800494e:	9200      	str	r2, [sp, #0]
 8004950:	2200      	movs	r2, #0
 8004952:	f7ff ff46 	bl	80047e2 <UART_WaitOnFlagUntilTimeout>
 8004956:	b9a0      	cbnz	r0, 8004982 <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 8004958:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800495a:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800495c:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 800495e:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004962:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004964:	6620      	str	r0, [r4, #96]	; 0x60
  return HAL_OK;
 8004966:	e00d      	b.n	8004984 <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004968:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 800496c:	9003      	str	r0, [sp, #12]
 800496e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004972:	4620      	mov	r0, r4
 8004974:	9200      	str	r2, [sp, #0]
 8004976:	462a      	mov	r2, r5
 8004978:	f7ff ff33 	bl	80047e2 <UART_WaitOnFlagUntilTimeout>
 800497c:	9b03      	ldr	r3, [sp, #12]
 800497e:	2800      	cmp	r0, #0
 8004980:	d0dc      	beq.n	800493c <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8004982:	2003      	movs	r0, #3
}
 8004984:	b005      	add	sp, #20
 8004986:	bd30      	pop	{r4, r5, pc}

08004988 <HAL_UART_Init>:
{
 8004988:	b510      	push	{r4, lr}
  if (huart == NULL)
 800498a:	4604      	mov	r4, r0
 800498c:	b340      	cbz	r0, 80049e0 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800498e:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8004990:	b91b      	cbnz	r3, 800499a <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8004992:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8004996:	f7fd f831 	bl	80019fc <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800499a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800499c:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 800499e:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 80049a0:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 80049a2:	6813      	ldr	r3, [r2, #0]
 80049a4:	f023 0301 	bic.w	r3, r3, #1
 80049a8:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80049aa:	f7ff fd7d 	bl	80044a8 <UART_SetConfig>
 80049ae:	2801      	cmp	r0, #1
 80049b0:	d016      	beq.n	80049e0 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80049b4:	b113      	cbz	r3, 80049bc <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 80049b6:	4620      	mov	r0, r4
 80049b8:	f7ff febe 	bl	8004738 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049bc:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 80049be:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049c0:	685a      	ldr	r2, [r3, #4]
 80049c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049c8:	689a      	ldr	r2, [r3, #8]
 80049ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049ce:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	f042 0201 	orr.w	r2, r2, #1
}
 80049d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 80049da:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80049dc:	f7ff bfa1 	b.w	8004922 <UART_CheckIdleState>
}
 80049e0:	2001      	movs	r0, #1
 80049e2:	bd10      	pop	{r4, pc}

080049e4 <UART_Start_Receive_DMA>:
{
 80049e4:	b570      	push	{r4, r5, r6, lr}
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80049e6:	2322      	movs	r3, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049e8:	2500      	movs	r5, #0
{
 80049ea:	4604      	mov	r4, r0
  huart->pRxBuffPtr = pData;
 80049ec:	6541      	str	r1, [r0, #84]	; 0x54
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049ee:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
  huart->RxXferSize = Size;
 80049f2:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80049f6:	67c3      	str	r3, [r0, #124]	; 0x7c
  if (huart->hdmarx != NULL)
 80049f8:	6f00      	ldr	r0, [r0, #112]	; 0x70
 80049fa:	b1b8      	cbz	r0, 8004a2c <UART_Start_Receive_DMA+0x48>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80049fc:	4b14      	ldr	r3, [pc, #80]	; (8004a50 <UART_Start_Receive_DMA+0x6c>)
 80049fe:	6826      	ldr	r6, [r4, #0]
 8004a00:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004a02:	4b14      	ldr	r3, [pc, #80]	; (8004a54 <UART_Start_Receive_DMA+0x70>)
 8004a04:	6403      	str	r3, [r0, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004a06:	4b14      	ldr	r3, [pc, #80]	; (8004a58 <UART_Start_Receive_DMA+0x74>)
    huart->hdmarx->XferAbortCallback = NULL;
 8004a08:	e9c0 3513 	strd	r3, r5, [r0, #76]	; 0x4c
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004a0c:	4613      	mov	r3, r2
 8004a0e:	460a      	mov	r2, r1
 8004a10:	f106 0124 	add.w	r1, r6, #36	; 0x24
 8004a14:	f7fd fc56 	bl	80022c4 <HAL_DMA_Start_IT>
 8004a18:	b140      	cbz	r0, 8004a2c <UART_Start_Receive_DMA+0x48>
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004a1a:	2310      	movs	r3, #16
      return HAL_ERROR;
 8004a1c:	2001      	movs	r0, #1
      __HAL_UNLOCK(huart);
 8004a1e:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004a22:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
      huart->gState = HAL_UART_STATE_READY;
 8004a26:	2320      	movs	r3, #32
 8004a28:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8004a2a:	bd70      	pop	{r4, r5, r6, pc}
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a2c:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(huart);
 8004a2e:	2000      	movs	r0, #0
 8004a30:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a3a:	601a      	str	r2, [r3, #0]
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a3c:	689a      	ldr	r2, [r3, #8]
 8004a3e:	f042 0201 	orr.w	r2, r2, #1
 8004a42:	609a      	str	r2, [r3, #8]
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a44:	689a      	ldr	r2, [r3, #8]
 8004a46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a4a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004a4c:	e7ed      	b.n	8004a2a <UART_Start_Receive_DMA+0x46>
 8004a4e:	bf00      	nop
 8004a50:	08004235 	.word	0x08004235
 8004a54:	08004219 	.word	0x08004219
 8004a58:	080041b7 	.word	0x080041b7

08004a5c <HAL_UART_Receive_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a5c:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8004a5e:	2b20      	cmp	r3, #32
{
 8004a60:	b410      	push	{r4}
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a62:	d11a      	bne.n	8004a9a <HAL_UART_Receive_DMA+0x3e>
    if ((pData == NULL) || (Size == 0U))
 8004a64:	b1a9      	cbz	r1, 8004a92 <HAL_UART_Receive_DMA+0x36>
 8004a66:	b1a2      	cbz	r2, 8004a92 <HAL_UART_Receive_DMA+0x36>
    __HAL_LOCK(huart);
 8004a68:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d014      	beq.n	8004a9a <HAL_UART_Receive_DMA+0x3e>
 8004a70:	2301      	movs	r3, #1
 8004a72:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a76:	2300      	movs	r3, #0
 8004a78:	6603      	str	r3, [r0, #96]	; 0x60
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004a7a:	6803      	ldr	r3, [r0, #0]
 8004a7c:	685c      	ldr	r4, [r3, #4]
 8004a7e:	0224      	lsls	r4, r4, #8
 8004a80:	d503      	bpl.n	8004a8a <HAL_UART_Receive_DMA+0x2e>
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004a82:	681c      	ldr	r4, [r3, #0]
 8004a84:	f044 6480 	orr.w	r4, r4, #67108864	; 0x4000000
 8004a88:	601c      	str	r4, [r3, #0]
}
 8004a8a:	f85d 4b04 	ldr.w	r4, [sp], #4
    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004a8e:	f7ff bfa9 	b.w	80049e4 <UART_Start_Receive_DMA>
      return HAL_ERROR;
 8004a92:	2001      	movs	r0, #1
}
 8004a94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a98:	4770      	bx	lr
    return HAL_BUSY;
 8004a9a:	2002      	movs	r0, #2
 8004a9c:	e7fa      	b.n	8004a94 <HAL_UART_Receive_DMA+0x38>
	...

08004aa0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004aa0:	4b0a      	ldr	r3, [pc, #40]	; (8004acc <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004aa2:	3b01      	subs	r3, #1
 8004aa4:	d00f      	beq.n	8004ac6 <USB_CoreReset+0x26>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004aa6:	6902      	ldr	r2, [r0, #16]
 8004aa8:	2a00      	cmp	r2, #0
 8004aaa:	dafa      	bge.n	8004aa2 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004aac:	6903      	ldr	r3, [r0, #16]
 8004aae:	4a07      	ldr	r2, [pc, #28]	; (8004acc <USB_CoreReset+0x2c>)
 8004ab0:	f043 0301 	orr.w	r3, r3, #1
 8004ab4:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8004ab6:	3a01      	subs	r2, #1
 8004ab8:	d005      	beq.n	8004ac6 <USB_CoreReset+0x26>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004aba:	6903      	ldr	r3, [r0, #16]
 8004abc:	f013 0301 	ands.w	r3, r3, #1
 8004ac0:	d1f9      	bne.n	8004ab6 <USB_CoreReset+0x16>

  return HAL_OK;
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	4770      	bx	lr
      return HAL_TIMEOUT;
 8004ac6:	2003      	movs	r0, #3
}
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	00030d41 	.word	0x00030d41

08004ad0 <USB_CoreInit>:
{
 8004ad0:	b084      	sub	sp, #16
 8004ad2:	b538      	push	{r3, r4, r5, lr}
 8004ad4:	ad05      	add	r5, sp, #20
 8004ad6:	4604      	mov	r4, r0
 8004ad8:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004adc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d126      	bne.n	8004b30 <USB_CoreInit+0x60>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ae2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004ae4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ae8:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004aea:	68c3      	ldr	r3, [r0, #12]
 8004aec:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004af0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004af4:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004af6:	68c3      	ldr	r3, [r0, #12]
 8004af8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004afc:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8004afe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d103      	bne.n	8004b0c <USB_CoreInit+0x3c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004b04:	68c3      	ldr	r3, [r0, #12]
 8004b06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b0a:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8004b0c:	4620      	mov	r0, r4
 8004b0e:	f7ff ffc7 	bl	8004aa0 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8004b12:	9b08      	ldr	r3, [sp, #32]
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d107      	bne.n	8004b28 <USB_CoreInit+0x58>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004b18:	68a3      	ldr	r3, [r4, #8]
 8004b1a:	f043 0306 	orr.w	r3, r3, #6
 8004b1e:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004b20:	68a3      	ldr	r3, [r4, #8]
 8004b22:	f043 0320 	orr.w	r3, r3, #32
 8004b26:	60a3      	str	r3, [r4, #8]
}
 8004b28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b2c:	b004      	add	sp, #16
 8004b2e:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004b30:	68c3      	ldr	r3, [r0, #12]
 8004b32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b36:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8004b38:	f7ff ffb2 	bl	8004aa0 <USB_CoreReset>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004b3c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004b3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b42:	63a3      	str	r3, [r4, #56]	; 0x38
 8004b44:	e7e5      	b.n	8004b12 <USB_CoreInit+0x42>
	...

08004b48 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 8004b48:	2a02      	cmp	r2, #2
 8004b4a:	d14a      	bne.n	8004be2 <USB_SetTurnaroundTime+0x9a>
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004b4c:	4b27      	ldr	r3, [pc, #156]	; (8004bec <USB_SetTurnaroundTime+0xa4>)
 8004b4e:	4a28      	ldr	r2, [pc, #160]	; (8004bf0 <USB_SetTurnaroundTime+0xa8>)
 8004b50:	440b      	add	r3, r1
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d939      	bls.n	8004bca <USB_SetTurnaroundTime+0x82>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004b56:	4b27      	ldr	r3, [pc, #156]	; (8004bf4 <USB_SetTurnaroundTime+0xac>)
 8004b58:	4a27      	ldr	r2, [pc, #156]	; (8004bf8 <USB_SetTurnaroundTime+0xb0>)
 8004b5a:	440b      	add	r3, r1
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d936      	bls.n	8004bce <USB_SetTurnaroundTime+0x86>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004b60:	f5a1 0374 	sub.w	r3, r1, #15990784	; 0xf40000
 8004b64:	4a25      	ldr	r2, [pc, #148]	; (8004bfc <USB_SetTurnaroundTime+0xb4>)
 8004b66:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d931      	bls.n	8004bd2 <USB_SetTurnaroundTime+0x8a>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004b6e:	f1a1 7383 	sub.w	r3, r1, #17170432	; 0x1060000
 8004b72:	4a23      	ldr	r2, [pc, #140]	; (8004c00 <USB_SetTurnaroundTime+0xb8>)
 8004b74:	f5a3 43e7 	sub.w	r3, r3, #29568	; 0x7380
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d32c      	bcc.n	8004bd6 <USB_SetTurnaroundTime+0x8e>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004b7c:	4b21      	ldr	r3, [pc, #132]	; (8004c04 <USB_SetTurnaroundTime+0xbc>)
 8004b7e:	4a22      	ldr	r2, [pc, #136]	; (8004c08 <USB_SetTurnaroundTime+0xc0>)
 8004b80:	440b      	add	r3, r1
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d929      	bls.n	8004bda <USB_SetTurnaroundTime+0x92>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004b86:	4b21      	ldr	r3, [pc, #132]	; (8004c0c <USB_SetTurnaroundTime+0xc4>)
 8004b88:	4a21      	ldr	r2, [pc, #132]	; (8004c10 <USB_SetTurnaroundTime+0xc8>)
 8004b8a:	440b      	add	r3, r1
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d326      	bcc.n	8004bde <USB_SetTurnaroundTime+0x96>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004b90:	4b20      	ldr	r3, [pc, #128]	; (8004c14 <USB_SetTurnaroundTime+0xcc>)
 8004b92:	4a21      	ldr	r2, [pc, #132]	; (8004c18 <USB_SetTurnaroundTime+0xd0>)
 8004b94:	440b      	add	r3, r1
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d323      	bcc.n	8004be2 <USB_SetTurnaroundTime+0x9a>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004b9a:	f1a1 73b7 	sub.w	r3, r1, #23986176	; 0x16e0000
 8004b9e:	4a1f      	ldr	r2, [pc, #124]	; (8004c1c <USB_SetTurnaroundTime+0xd4>)
 8004ba0:	f5a3 5358 	sub.w	r3, r3, #13824	; 0x3600
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d31e      	bcc.n	8004be6 <USB_SetTurnaroundTime+0x9e>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004ba8:	4b1d      	ldr	r3, [pc, #116]	; (8004c20 <USB_SetTurnaroundTime+0xd8>)
      UsbTrd = 0x6U;
 8004baa:	4a1e      	ldr	r2, [pc, #120]	; (8004c24 <USB_SetTurnaroundTime+0xdc>)
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004bac:	440b      	add	r3, r1
      UsbTrd = 0x6U;
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	bf34      	ite	cc
 8004bb2:	2307      	movcc	r3, #7
 8004bb4:	2306      	movcs	r3, #6
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004bb6:	68c2      	ldr	r2, [r0, #12]
 8004bb8:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 8004bbc:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004bbe:	68c2      	ldr	r2, [r0, #12]
 8004bc0:	ea42 2383 	orr.w	r3, r2, r3, lsl #10
 8004bc4:	60c3      	str	r3, [r0, #12]
}
 8004bc6:	2000      	movs	r0, #0
 8004bc8:	4770      	bx	lr
      UsbTrd = 0xFU;
 8004bca:	230f      	movs	r3, #15
 8004bcc:	e7f3      	b.n	8004bb6 <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xEU;
 8004bce:	230e      	movs	r3, #14
 8004bd0:	e7f1      	b.n	8004bb6 <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xDU;
 8004bd2:	230d      	movs	r3, #13
 8004bd4:	e7ef      	b.n	8004bb6 <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xCU;
 8004bd6:	230c      	movs	r3, #12
 8004bd8:	e7ed      	b.n	8004bb6 <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xBU;
 8004bda:	230b      	movs	r3, #11
 8004bdc:	e7eb      	b.n	8004bb6 <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xAU;
 8004bde:	230a      	movs	r3, #10
 8004be0:	e7e9      	b.n	8004bb6 <USB_SetTurnaroundTime+0x6e>
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004be2:	2309      	movs	r3, #9
 8004be4:	e7e7      	b.n	8004bb6 <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0x8U;
 8004be6:	2308      	movs	r3, #8
 8004be8:	e7e5      	b.n	8004bb6 <USB_SetTurnaroundTime+0x6e>
 8004bea:	bf00      	nop
 8004bec:	ff275340 	.word	0xff275340
 8004bf0:	000c34ff 	.word	0x000c34ff
 8004bf4:	ff1b1e40 	.word	0xff1b1e40
 8004bf8:	000f423f 	.word	0x000f423f
 8004bfc:	00124f7f 	.word	0x00124f7f
 8004c00:	0013d620 	.word	0x0013d620
 8004c04:	fee5b660 	.word	0xfee5b660
 8004c08:	0016e35f 	.word	0x0016e35f
 8004c0c:	feced300 	.word	0xfeced300
 8004c10:	001b7740 	.word	0x001b7740
 8004c14:	feb35bc0 	.word	0xfeb35bc0
 8004c18:	002191c0 	.word	0x002191c0
 8004c1c:	00387520 	.word	0x00387520
 8004c20:	fe5954e0 	.word	0xfe5954e0
 8004c24:	00419ce0 	.word	0x00419ce0

08004c28 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004c28:	6883      	ldr	r3, [r0, #8]
 8004c2a:	f043 0301 	orr.w	r3, r3, #1
 8004c2e:	6083      	str	r3, [r0, #8]
}
 8004c30:	2000      	movs	r0, #0
 8004c32:	4770      	bx	lr

08004c34 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004c34:	6883      	ldr	r3, [r0, #8]
 8004c36:	f023 0301 	bic.w	r3, r3, #1
 8004c3a:	6083      	str	r3, [r0, #8]
}
 8004c3c:	2000      	movs	r0, #0
 8004c3e:	4770      	bx	lr

08004c40 <USB_SetCurrentMode>:
{
 8004c40:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004c42:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8004c44:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004c46:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004c4a:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8004c4c:	d108      	bne.n	8004c60 <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004c4e:	68c3      	ldr	r3, [r0, #12]
 8004c50:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004c54:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8004c56:	2032      	movs	r0, #50	; 0x32
 8004c58:	f7fd f9e6 	bl	8002028 <HAL_Delay>
  return HAL_OK;
 8004c5c:	2000      	movs	r0, #0
}
 8004c5e:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 8004c60:	b919      	cbnz	r1, 8004c6a <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004c62:	68c3      	ldr	r3, [r0, #12]
 8004c64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c68:	e7f4      	b.n	8004c54 <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 8004c6a:	2001      	movs	r0, #1
 8004c6c:	e7f7      	b.n	8004c5e <USB_SetCurrentMode+0x1e>
	...

08004c70 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004c70:	0189      	lsls	r1, r1, #6
 8004c72:	4a07      	ldr	r2, [pc, #28]	; (8004c90 <USB_FlushTxFifo+0x20>)
 8004c74:	f041 0120 	orr.w	r1, r1, #32
 8004c78:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 8004c7a:	3a01      	subs	r2, #1
 8004c7c:	d005      	beq.n	8004c8a <USB_FlushTxFifo+0x1a>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004c7e:	6903      	ldr	r3, [r0, #16]
 8004c80:	f013 0320 	ands.w	r3, r3, #32
 8004c84:	d1f9      	bne.n	8004c7a <USB_FlushTxFifo+0xa>
  return HAL_OK;
 8004c86:	4618      	mov	r0, r3
 8004c88:	4770      	bx	lr
      return HAL_TIMEOUT;
 8004c8a:	2003      	movs	r0, #3
}
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	00030d41 	.word	0x00030d41

08004c94 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004c94:	2310      	movs	r3, #16
 8004c96:	4a06      	ldr	r2, [pc, #24]	; (8004cb0 <USB_FlushRxFifo+0x1c>)
 8004c98:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 8004c9a:	3a01      	subs	r2, #1
 8004c9c:	d005      	beq.n	8004caa <USB_FlushRxFifo+0x16>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004c9e:	6903      	ldr	r3, [r0, #16]
 8004ca0:	f013 0310 	ands.w	r3, r3, #16
 8004ca4:	d1f9      	bne.n	8004c9a <USB_FlushRxFifo+0x6>
  return HAL_OK;
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	4770      	bx	lr
      return HAL_TIMEOUT;
 8004caa:	2003      	movs	r0, #3
}
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	00030d41 	.word	0x00030d41

08004cb4 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8004cb4:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8004cb8:	4319      	orrs	r1, r3
 8004cba:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8004cbe:	2000      	movs	r0, #0
 8004cc0:	4770      	bx	lr
	...

08004cc4 <USB_DevInit>:
{
 8004cc4:	b084      	sub	sp, #16
 8004cc6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004cca:	4604      	mov	r4, r0
 8004ccc:	a809      	add	r0, sp, #36	; 0x24
 8004cce:	460e      	mov	r6, r1
 8004cd0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004cd8:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004cda:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    USBx->DIEPTXF[i] = 0U;
 8004cdc:	461f      	mov	r7, r3
 8004cde:	f103 0040 	add.w	r0, r3, #64	; 0x40
  for (i = 0U; i < 15U; i++)
 8004ce2:	3301      	adds	r3, #1
    USBx->DIEPTXF[i] = 0U;
 8004ce4:	eb04 0080 	add.w	r0, r4, r0, lsl #2
  for (i = 0U; i < 15U; i++)
 8004ce8:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 8004cea:	6047      	str	r7, [r0, #4]
  for (i = 0U; i < 15U; i++)
 8004cec:	d1f7      	bne.n	8004cde <USB_DevInit+0x1a>
  if (cfg.vbus_sensing_enable == 0U)
 8004cee:	f504 6700 	add.w	r7, r4, #2048	; 0x800
 8004cf2:	2d00      	cmp	r5, #0
 8004cf4:	d16b      	bne.n	8004dce <USB_DevInit+0x10a>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f043 0302 	orr.w	r3, r3, #2
 8004cfc:	607b      	str	r3, [r7, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004cfe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004d00:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004d04:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004d06:	6823      	ldr	r3, [r4, #0]
 8004d08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d0c:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004d0e:	6823      	ldr	r3, [r4, #0]
 8004d10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d14:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 8004d16:	2300      	movs	r3, #0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d18:	2901      	cmp	r1, #1
  USBx_PCGCCTL = 0U;
 8004d1a:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004d1e:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8004d22:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d26:	d159      	bne.n	8004ddc <USB_DevInit+0x118>
    if (cfg.speed == USBD_HS_SPEED)
 8004d28:	2a00      	cmp	r2, #0
 8004d2a:	d155      	bne.n	8004dd8 <USB_DevInit+0x114>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004d2c:	2100      	movs	r1, #0
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004d2e:	4620      	mov	r0, r4
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004d30:	f64f 387f 	movw	r8, #64383	; 0xfb7f
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004d34:	f7ff ffbe 	bl	8004cb4 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004d38:	2110      	movs	r1, #16
 8004d3a:	4620      	mov	r0, r4
 8004d3c:	f7ff ff98 	bl	8004c70 <USB_FlushTxFifo>
 8004d40:	4601      	mov	r1, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004d42:	4620      	mov	r0, r4
 8004d44:	f7ff ffa6 	bl	8004c94 <USB_FlushRxFifo>
 8004d48:	4308      	orrs	r0, r1
  USBx_DEVICE->DIEPMSK = 0U;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	f504 6210 	add.w	r2, r4, #2304	; 0x900
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004d50:	b2c0      	uxtb	r0, r0
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004d52:	f04f 4c90 	mov.w	ip, #1207959552	; 0x48000000
      USBx_INEP(i)->DIEPCTL = 0U;
 8004d56:	4619      	mov	r1, r3
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004d58:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
    ret = HAL_ERROR;
 8004d5c:	3800      	subs	r0, #0
  USBx_DEVICE->DIEPMSK = 0U;
 8004d5e:	613b      	str	r3, [r7, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004d60:	617b      	str	r3, [r7, #20]
    ret = HAL_ERROR;
 8004d62:	bf18      	it	ne
 8004d64:	2001      	movne	r0, #1
  USBx_DEVICE->DAINTMSK = 0U;
 8004d66:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d68:	42b3      	cmp	r3, r6
 8004d6a:	d13b      	bne.n	8004de4 <USB_DevInit+0x120>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004d72:	f04f 4c90 	mov.w	ip, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004d76:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004d7a:	4611      	mov	r1, r2
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004d7c:	f64f 387f 	movw	r8, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d80:	42b2      	cmp	r2, r6
 8004d82:	d142      	bne.n	8004e0a <USB_DevInit+0x146>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d8a:	613b      	str	r3, [r7, #16]
  USBx->GINTMSK = 0U;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004d90:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8004d94:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 8004d96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004d98:	b91b      	cbnz	r3, 8004da2 <USB_DevInit+0xde>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004d9a:	69a3      	ldr	r3, [r4, #24]
 8004d9c:	f043 0310 	orr.w	r3, r3, #16
 8004da0:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004da2:	69a2      	ldr	r2, [r4, #24]
 8004da4:	4b22      	ldr	r3, [pc, #136]	; (8004e30 <USB_DevInit+0x16c>)
 8004da6:	4313      	orrs	r3, r2
 8004da8:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8004daa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004dac:	b11b      	cbz	r3, 8004db6 <USB_DevInit+0xf2>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004dae:	69a3      	ldr	r3, [r4, #24]
 8004db0:	f043 0308 	orr.w	r3, r3, #8
 8004db4:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8004db6:	2d01      	cmp	r5, #1
 8004db8:	d105      	bne.n	8004dc6 <USB_DevInit+0x102>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004dba:	69a3      	ldr	r3, [r4, #24]
 8004dbc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004dc0:	f043 0304 	orr.w	r3, r3, #4
 8004dc4:	61a3      	str	r3, [r4, #24]
}
 8004dc6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004dca:	b004      	add	sp, #16
 8004dcc:	4770      	bx	lr
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004dce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004dd0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004dd4:	63a3      	str	r3, [r4, #56]	; 0x38
 8004dd6:	e79e      	b.n	8004d16 <USB_DevInit+0x52>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004dd8:	2101      	movs	r1, #1
 8004dda:	e7a8      	b.n	8004d2e <USB_DevInit+0x6a>
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8004ddc:	2903      	cmp	r1, #3
 8004dde:	d0a3      	beq.n	8004d28 <USB_DevInit+0x64>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004de0:	2103      	movs	r1, #3
 8004de2:	e7a4      	b.n	8004d2e <USB_DevInit+0x6a>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004de4:	f8d2 9000 	ldr.w	r9, [r2]
 8004de8:	f1b9 0f00 	cmp.w	r9, #0
 8004dec:	da0b      	bge.n	8004e06 <USB_DevInit+0x142>
      if (i == 0U)
 8004dee:	b93b      	cbnz	r3, 8004e00 <USB_DevInit+0x13c>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004df0:	f8c2 e000 	str.w	lr, [r2]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004df4:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004df6:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004df8:	f8c2 8008 	str.w	r8, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004dfc:	3220      	adds	r2, #32
 8004dfe:	e7b3      	b.n	8004d68 <USB_DevInit+0xa4>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004e00:	f8c2 c000 	str.w	ip, [r2]
 8004e04:	e7f6      	b.n	8004df4 <USB_DevInit+0x130>
      USBx_INEP(i)->DIEPCTL = 0U;
 8004e06:	6011      	str	r1, [r2, #0]
 8004e08:	e7f4      	b.n	8004df4 <USB_DevInit+0x130>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e0a:	f8d3 9000 	ldr.w	r9, [r3]
 8004e0e:	f1b9 0f00 	cmp.w	r9, #0
 8004e12:	da0b      	bge.n	8004e2c <USB_DevInit+0x168>
      if (i == 0U)
 8004e14:	b93a      	cbnz	r2, 8004e26 <USB_DevInit+0x162>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004e16:	f8c3 e000 	str.w	lr, [r3]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004e1a:	6119      	str	r1, [r3, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e1c:	3201      	adds	r2, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004e1e:	f8c3 8008 	str.w	r8, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e22:	3320      	adds	r3, #32
 8004e24:	e7ac      	b.n	8004d80 <USB_DevInit+0xbc>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004e26:	f8c3 c000 	str.w	ip, [r3]
 8004e2a:	e7f6      	b.n	8004e1a <USB_DevInit+0x156>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004e2c:	6019      	str	r1, [r3, #0]
 8004e2e:	e7f4      	b.n	8004e1a <USB_DevInit+0x156>
 8004e30:	803c3800 	.word	0x803c3800

08004e34 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004e34:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004e38:	f013 0006 	ands.w	r0, r3, #6
 8004e3c:	d004      	beq.n	8004e48 <USB_GetDevSpeed+0x14>
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004e3e:	f013 0f02 	tst.w	r3, #2
    speed = 0xFU;
 8004e42:	bf14      	ite	ne
 8004e44:	2002      	movne	r0, #2
 8004e46:	200f      	moveq	r0, #15
}
 8004e48:	4770      	bx	lr

08004e4a <USB_ActivateEndpoint>:
{
 8004e4a:	b530      	push	{r4, r5, lr}
  uint32_t epnum = (uint32_t)ep->num;
 8004e4c:	780d      	ldrb	r5, [r1, #0]
  if (ep->is_in == 1U)
 8004e4e:	2401      	movs	r4, #1
 8004e50:	f500 6200 	add.w	r2, r0, #2048	; 0x800
 8004e54:	f005 030f 	and.w	r3, r5, #15
 8004e58:	eb00 1045 	add.w	r0, r0, r5, lsl #5
 8004e5c:	409c      	lsls	r4, r3
 8004e5e:	784b      	ldrb	r3, [r1, #1]
 8004e60:	2b01      	cmp	r3, #1
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004e62:	69d3      	ldr	r3, [r2, #28]
  if (ep->is_in == 1U)
 8004e64:	d118      	bne.n	8004e98 <USB_ActivateEndpoint+0x4e>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004e66:	431c      	orrs	r4, r3
 8004e68:	61d4      	str	r4, [r2, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004e6a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8004e6e:	041a      	lsls	r2, r3, #16
 8004e70:	d410      	bmi.n	8004e94 <USB_ActivateEndpoint+0x4a>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e72:	688a      	ldr	r2, [r1, #8]
 8004e74:	f8d0 4900 	ldr.w	r4, [r0, #2304]	; 0x900
 8004e78:	f3c2 030a 	ubfx	r3, r2, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004e7c:	78ca      	ldrb	r2, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e7e:	4323      	orrs	r3, r4
 8004e80:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 8004e84:	ea43 5385 	orr.w	r3, r3, r5, lsl #22
 8004e88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e90:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8004e94:	2000      	movs	r0, #0
 8004e96:	bd30      	pop	{r4, r5, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004e98:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8004e9c:	61d4      	str	r4, [r2, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004e9e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8004ea2:	041b      	lsls	r3, r3, #16
 8004ea4:	d4f6      	bmi.n	8004e94 <USB_ActivateEndpoint+0x4a>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004ea6:	688b      	ldr	r3, [r1, #8]
 8004ea8:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8004eac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004eb0:	4313      	orrs	r3, r2
                                    ((uint32_t)ep->type << 18) |
 8004eb2:	78ca      	ldrb	r2, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004eb4:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 8004eb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ebc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ec0:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8004ec4:	e7e6      	b.n	8004e94 <USB_ActivateEndpoint+0x4a>
	...

08004ec8 <USB_DeactivateEndpoint>:
{
 8004ec8:	b510      	push	{r4, lr}
  uint32_t epnum = (uint32_t)ep->num;
 8004eca:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 8004ecc:	7849      	ldrb	r1, [r1, #1]
 8004ece:	eb00 1342 	add.w	r3, r0, r2, lsl #5
 8004ed2:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8004ed6:	2901      	cmp	r1, #1
 8004ed8:	f002 020f 	and.w	r2, r2, #15
 8004edc:	d122      	bne.n	8004f24 <USB_DeactivateEndpoint+0x5c>
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ede:	f8d3 1900 	ldr.w	r1, [r3, #2304]	; 0x900
 8004ee2:	2900      	cmp	r1, #0
 8004ee4:	da0b      	bge.n	8004efe <USB_DeactivateEndpoint+0x36>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004ee6:	f8d3 1900 	ldr.w	r1, [r3, #2304]	; 0x900
 8004eea:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 8004eee:	f8c3 1900 	str.w	r1, [r3, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004ef2:	f8d3 1900 	ldr.w	r1, [r3, #2304]	; 0x900
 8004ef6:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8004efa:	f8c3 1900 	str.w	r1, [r3, #2304]	; 0x900
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004efe:	2101      	movs	r1, #1
 8004f00:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8004f02:	fa01 f202 	lsl.w	r2, r1, r2
 8004f06:	ea24 0402 	bic.w	r4, r4, r2
 8004f0a:	63c4      	str	r4, [r0, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004f0c:	69c1      	ldr	r1, [r0, #28]
 8004f0e:	ea21 0202 	bic.w	r2, r1, r2
 8004f12:	61c2      	str	r2, [r0, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004f14:	4a15      	ldr	r2, [pc, #84]	; (8004f6c <USB_DeactivateEndpoint+0xa4>)
 8004f16:	f8d3 1900 	ldr.w	r1, [r3, #2304]	; 0x900
 8004f1a:	400a      	ands	r2, r1
 8004f1c:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
}
 8004f20:	2000      	movs	r0, #0
 8004f22:	bd10      	pop	{r4, pc}
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f24:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	; 0xb00
 8004f28:	2900      	cmp	r1, #0
 8004f2a:	da0b      	bge.n	8004f44 <USB_DeactivateEndpoint+0x7c>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004f2c:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	; 0xb00
 8004f30:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 8004f34:	f8c3 1b00 	str.w	r1, [r3, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004f38:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	; 0xb00
 8004f3c:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8004f40:	f8c3 1b00 	str.w	r1, [r3, #2816]	; 0xb00
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004f44:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8004f48:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8004f4a:	fa01 f202 	lsl.w	r2, r1, r2
 8004f4e:	ea24 0402 	bic.w	r4, r4, r2
 8004f52:	63c4      	str	r4, [r0, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004f54:	69c1      	ldr	r1, [r0, #28]
 8004f56:	ea21 0202 	bic.w	r2, r1, r2
 8004f5a:	61c2      	str	r2, [r0, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004f5c:	4a04      	ldr	r2, [pc, #16]	; (8004f70 <USB_DeactivateEndpoint+0xa8>)
 8004f5e:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	; 0xb00
 8004f62:	400a      	ands	r2, r1
 8004f64:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8004f68:	e7da      	b.n	8004f20 <USB_DeactivateEndpoint+0x58>
 8004f6a:	bf00      	nop
 8004f6c:	ec337800 	.word	0xec337800
 8004f70:	eff37800 	.word	0xeff37800

08004f74 <USB_EP0StartXfer>:
  if (ep->is_in == 1U)
 8004f74:	784b      	ldrb	r3, [r1, #1]
 8004f76:	f8df c0ec 	ldr.w	ip, [pc, #236]	; 8005064 <USB_EP0StartXfer+0xf0>
 8004f7a:	2b01      	cmp	r3, #1
{
 8004f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t epnum = (uint32_t)ep->num;
 8004f7e:	780e      	ldrb	r6, [r1, #0]
  if (ep->is_in == 1U)
 8004f80:	694d      	ldr	r5, [r1, #20]
 8004f82:	eb00 1446 	add.w	r4, r0, r6, lsl #5
 8004f86:	4f36      	ldr	r7, [pc, #216]	; (8005060 <USB_EP0StartXfer+0xec>)
 8004f88:	d146      	bne.n	8005018 <USB_EP0StartXfer+0xa4>
    if (ep->xfer_len == 0U)
 8004f8a:	f504 6310 	add.w	r3, r4, #2304	; 0x900
 8004f8e:	b9bd      	cbnz	r5, 8004fc0 <USB_EP0StartXfer+0x4c>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004f90:	691d      	ldr	r5, [r3, #16]
 8004f92:	402f      	ands	r7, r5
 8004f94:	611f      	str	r7, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004f96:	691d      	ldr	r5, [r3, #16]
 8004f98:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8004f9c:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f9e:	691d      	ldr	r5, [r3, #16]
 8004fa0:	ea05 050c 	and.w	r5, r5, ip
    if (dma == 1U)
 8004fa4:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004fa6:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 8004fa8:	d123      	bne.n	8004ff2 <USB_EP0StartXfer+0x7e>
      if ((uint32_t)ep->dma_addr != 0U)
 8004faa:	690a      	ldr	r2, [r1, #16]
 8004fac:	b102      	cbz	r2, 8004fb0 <USB_EP0StartXfer+0x3c>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004fae:	615a      	str	r2, [r3, #20]
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004fb0:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 8004fb4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004fb8:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
}
 8004fbc:	2000      	movs	r0, #0
 8004fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004fc0:	f8d3 e010 	ldr.w	lr, [r3, #16]
 8004fc4:	ea0e 0c0c 	and.w	ip, lr, ip
 8004fc8:	f8c3 c010 	str.w	ip, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004fcc:	f8d3 c010 	ldr.w	ip, [r3, #16]
 8004fd0:	ea0c 0707 	and.w	r7, ip, r7
 8004fd4:	611f      	str	r7, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 8004fd6:	688f      	ldr	r7, [r1, #8]
 8004fd8:	42af      	cmp	r7, r5
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004fda:	691d      	ldr	r5, [r3, #16]
 8004fdc:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
        ep->xfer_len = ep->maxpacket;
 8004fe0:	bf38      	it	cc
 8004fe2:	614f      	strcc	r7, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004fe4:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004fe6:	694d      	ldr	r5, [r1, #20]
 8004fe8:	691f      	ldr	r7, [r3, #16]
 8004fea:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8004fee:	433d      	orrs	r5, r7
 8004ff0:	e7d8      	b.n	8004fa4 <USB_EP0StartXfer+0x30>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ff2:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 8004ff6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ffa:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 8004ffe:	694b      	ldr	r3, [r1, #20]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d0db      	beq.n	8004fbc <USB_EP0StartXfer+0x48>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005004:	f006 060f 	and.w	r6, r6, #15
 8005008:	2301      	movs	r3, #1
 800500a:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 800500e:	40b3      	lsls	r3, r6
 8005010:	4313      	orrs	r3, r2
 8005012:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 8005016:	e7d1      	b.n	8004fbc <USB_EP0StartXfer+0x48>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005018:	f8d4 0b10 	ldr.w	r0, [r4, #2832]	; 0xb10
 800501c:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
 8005020:	ea00 000c 	and.w	r0, r0, ip
 8005024:	6118      	str	r0, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005026:	6918      	ldr	r0, [r3, #16]
 8005028:	4038      	ands	r0, r7
 800502a:	6118      	str	r0, [r3, #16]
    if (ep->xfer_len > 0U)
 800502c:	6888      	ldr	r0, [r1, #8]
 800502e:	b105      	cbz	r5, 8005032 <USB_EP0StartXfer+0xbe>
      ep->xfer_len = ep->maxpacket;
 8005030:	6148      	str	r0, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005032:	691d      	ldr	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005034:	f3c0 0012 	ubfx	r0, r0, #0, #19
    if (dma == 1U)
 8005038:	2a01      	cmp	r2, #1
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800503a:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 800503e:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005040:	691d      	ldr	r5, [r3, #16]
 8005042:	ea40 0005 	orr.w	r0, r0, r5
 8005046:	6118      	str	r0, [r3, #16]
    if (dma == 1U)
 8005048:	d102      	bne.n	8005050 <USB_EP0StartXfer+0xdc>
      if ((uint32_t)ep->xfer_buff != 0U)
 800504a:	68ca      	ldr	r2, [r1, #12]
 800504c:	b102      	cbz	r2, 8005050 <USB_EP0StartXfer+0xdc>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800504e:	615a      	str	r2, [r3, #20]
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005050:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 8005054:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005058:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
 800505c:	e7ae      	b.n	8004fbc <USB_EP0StartXfer+0x48>
 800505e:	bf00      	nop
 8005060:	e007ffff 	.word	0xe007ffff
 8005064:	fff80000 	.word	0xfff80000

08005068 <USB_WritePacket>:
{
 8005068:	b510      	push	{r4, lr}
 800506a:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 800506e:	b944      	cbnz	r4, 8005082 <USB_WritePacket+0x1a>
    count32b = ((uint32_t)len + 3U) / 4U;
 8005070:	3303      	adds	r3, #3
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005072:	3201      	adds	r2, #1
    count32b = ((uint32_t)len + 3U) / 4U;
 8005074:	089b      	lsrs	r3, r3, #2
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005076:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 800507a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    for (i = 0U; i < count32b; i++)
 800507e:	428b      	cmp	r3, r1
 8005080:	d101      	bne.n	8005086 <USB_WritePacket+0x1e>
}
 8005082:	2000      	movs	r0, #0
 8005084:	bd10      	pop	{r4, pc}
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005086:	f851 2b04 	ldr.w	r2, [r1], #4
 800508a:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 800508c:	e7f7      	b.n	800507e <USB_WritePacket+0x16>
	...

08005090 <USB_EPStartXfer>:
{
 8005090:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (ep->is_in == 1U)
 8005094:	784d      	ldrb	r5, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8005096:	780f      	ldrb	r7, [r1, #0]
  if (ep->is_in == 1U)
 8005098:	2d01      	cmp	r5, #1
 800509a:	694b      	ldr	r3, [r1, #20]
 800509c:	eb00 1447 	add.w	r4, r0, r7, lsl #5
 80050a0:	78ce      	ldrb	r6, [r1, #3]
 80050a2:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 800525c <USB_EPStartXfer+0x1cc>
 80050a6:	f8df e1b8 	ldr.w	lr, [pc, #440]	; 8005260 <USB_EPStartXfer+0x1d0>
 80050aa:	f040 808e 	bne.w	80051ca <USB_EPStartXfer+0x13a>
    if (ep->xfer_len == 0U)
 80050ae:	f504 6510 	add.w	r5, r4, #2304	; 0x900
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80050b2:	f8d5 8010 	ldr.w	r8, [r5, #16]
    if (ep->xfer_len == 0U)
 80050b6:	bb6b      	cbnz	r3, 8005114 <USB_EPStartXfer+0x84>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80050b8:	ea08 0c0c 	and.w	ip, r8, ip
 80050bc:	f8c5 c010 	str.w	ip, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80050c0:	f8d5 c010 	ldr.w	ip, [r5, #16]
 80050c4:	f44c 2c00 	orr.w	ip, ip, #524288	; 0x80000
 80050c8:	f8c5 c010 	str.w	ip, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80050cc:	f8d5 c010 	ldr.w	ip, [r5, #16]
 80050d0:	ea0c 0e0e 	and.w	lr, ip, lr
 80050d4:	f8c5 e010 	str.w	lr, [r5, #16]
    if (dma == 1U)
 80050d8:	2a01      	cmp	r2, #1
 80050da:	d14e      	bne.n	800517a <USB_EPStartXfer+0xea>
      if ((uint32_t)ep->dma_addr != 0U)
 80050dc:	690b      	ldr	r3, [r1, #16]
 80050de:	b103      	cbz	r3, 80050e2 <USB_EPStartXfer+0x52>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80050e0:	616b      	str	r3, [r5, #20]
      if (ep->type == EP_TYPE_ISOC)
 80050e2:	2e01      	cmp	r6, #1
 80050e4:	d10c      	bne.n	8005100 <USB_EPStartXfer+0x70>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80050e6:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 80050ea:	f413 7f80 	tst.w	r3, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80050ee:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 80050f2:	bf0c      	ite	eq
 80050f4:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80050f8:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 80050fc:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005100:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 8005104:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005108:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
}
 800510c:	2000      	movs	r0, #0
 800510e:	b002      	add	sp, #8
 8005110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005114:	ea08 0e0e 	and.w	lr, r8, lr
      if (ep->type == EP_TYPE_ISOC)
 8005118:	2e01      	cmp	r6, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800511a:	f8c5 e010 	str.w	lr, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800511e:	f8d5 e010 	ldr.w	lr, [r5, #16]
 8005122:	ea0e 0c0c 	and.w	ip, lr, ip
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005126:	f8d1 e008 	ldr.w	lr, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800512a:	f8c5 c010 	str.w	ip, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800512e:	eb0e 0c03 	add.w	ip, lr, r3
 8005132:	f8d5 8010 	ldr.w	r8, [r5, #16]
 8005136:	f10c 3cff 	add.w	ip, ip, #4294967295
 800513a:	fbbc fefe 	udiv	lr, ip, lr
 800513e:	f8df c124 	ldr.w	ip, [pc, #292]	; 8005264 <USB_EPStartXfer+0x1d4>
 8005142:	ea0c 4cce 	and.w	ip, ip, lr, lsl #19
 8005146:	ea4c 0c08 	orr.w	ip, ip, r8
 800514a:	f8c5 c010 	str.w	ip, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800514e:	f3c3 0c12 	ubfx	ip, r3, #0, #19
 8005152:	f8d5 e010 	ldr.w	lr, [r5, #16]
 8005156:	ea4c 0c0e 	orr.w	ip, ip, lr
 800515a:	f8c5 c010 	str.w	ip, [r5, #16]
      if (ep->type == EP_TYPE_ISOC)
 800515e:	d1bb      	bne.n	80050d8 <USB_EPStartXfer+0x48>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005160:	f8d5 c010 	ldr.w	ip, [r5, #16]
 8005164:	f02c 4cc0 	bic.w	ip, ip, #1610612736	; 0x60000000
 8005168:	f8c5 c010 	str.w	ip, [r5, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800516c:	f8d5 c010 	ldr.w	ip, [r5, #16]
 8005170:	f04c 5c00 	orr.w	ip, ip, #536870912	; 0x20000000
 8005174:	f8c5 c010 	str.w	ip, [r5, #16]
 8005178:	e7ae      	b.n	80050d8 <USB_EPStartXfer+0x48>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800517a:	f8d4 5900 	ldr.w	r5, [r4, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 800517e:	2e01      	cmp	r6, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005180:	f045 4504 	orr.w	r5, r5, #2214592512	; 0x84000000
 8005184:	f8c4 5900 	str.w	r5, [r4, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8005188:	d00b      	beq.n	80051a2 <USB_EPStartXfer+0x112>
        if (ep->xfer_len > 0U)
 800518a:	2b00      	cmp	r3, #0
 800518c:	d0be      	beq.n	800510c <USB_EPStartXfer+0x7c>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800518e:	f007 020f 	and.w	r2, r7, #15
 8005192:	2701      	movs	r7, #1
 8005194:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 8005198:	4097      	lsls	r7, r2
 800519a:	431f      	orrs	r7, r3
 800519c:	f8c0 7834 	str.w	r7, [r0, #2100]	; 0x834
 80051a0:	e7b4      	b.n	800510c <USB_EPStartXfer+0x7c>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80051a2:	f8d0 5808 	ldr.w	r5, [r0, #2056]	; 0x808
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80051a6:	b29b      	uxth	r3, r3
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80051a8:	f415 7f80 	tst.w	r5, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80051ac:	f8d4 5900 	ldr.w	r5, [r4, #2304]	; 0x900
 80051b0:	bf0c      	ite	eq
 80051b2:	f045 5500 	orreq.w	r5, r5, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80051b6:	f045 5580 	orrne.w	r5, r5, #268435456	; 0x10000000
 80051ba:	f8c4 5900 	str.w	r5, [r4, #2304]	; 0x900
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80051be:	9200      	str	r2, [sp, #0]
 80051c0:	463a      	mov	r2, r7
 80051c2:	68c9      	ldr	r1, [r1, #12]
 80051c4:	f7ff ff50 	bl	8005068 <USB_WritePacket>
 80051c8:	e7a0      	b.n	800510c <USB_EPStartXfer+0x7c>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80051ca:	f8d4 5b10 	ldr.w	r5, [r4, #2832]	; 0xb10
 80051ce:	f504 6730 	add.w	r7, r4, #2816	; 0xb00
 80051d2:	ea05 050e 	and.w	r5, r5, lr
 80051d6:	613d      	str	r5, [r7, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80051d8:	693d      	ldr	r5, [r7, #16]
 80051da:	ea05 050c 	and.w	r5, r5, ip
 80051de:	613d      	str	r5, [r7, #16]
    if (ep->xfer_len == 0U)
 80051e0:	688d      	ldr	r5, [r1, #8]
 80051e2:	bb1b      	cbnz	r3, 800522c <USB_EPStartXfer+0x19c>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	f3c5 0512 	ubfx	r5, r5, #0, #19
 80051ea:	431d      	orrs	r5, r3
 80051ec:	613d      	str	r5, [r7, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    if (dma == 1U)
 80051f4:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80051f6:	613b      	str	r3, [r7, #16]
    if (dma == 1U)
 80051f8:	d102      	bne.n	8005200 <USB_EPStartXfer+0x170>
      if ((uint32_t)ep->xfer_buff != 0U)
 80051fa:	68cb      	ldr	r3, [r1, #12]
 80051fc:	b103      	cbz	r3, 8005200 <USB_EPStartXfer+0x170>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80051fe:	617b      	str	r3, [r7, #20]
    if (ep->type == EP_TYPE_ISOC)
 8005200:	2e01      	cmp	r6, #1
 8005202:	d10c      	bne.n	800521e <USB_EPStartXfer+0x18e>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005204:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8005208:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800520c:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 8005210:	bf0c      	ite	eq
 8005212:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005216:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 800521a:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800521e:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 8005222:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005226:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
 800522a:	e76f      	b.n	800510c <USB_EPStartXfer+0x7c>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800522c:	442b      	add	r3, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800522e:	f8df c034 	ldr.w	ip, [pc, #52]	; 8005264 <USB_EPStartXfer+0x1d4>
 8005232:	f8d7 e010 	ldr.w	lr, [r7, #16]
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005236:	3b01      	subs	r3, #1
 8005238:	fbb3 f3f5 	udiv	r3, r3, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800523c:	ea0c 4cc3 	and.w	ip, ip, r3, lsl #19
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005240:	b29b      	uxth	r3, r3
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005242:	ea4c 0c0e 	orr.w	ip, ip, lr
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005246:	436b      	muls	r3, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005248:	f8c7 c010 	str.w	ip, [r7, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800524c:	f8d7 c010 	ldr.w	ip, [r7, #16]
 8005250:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005254:	ea43 030c 	orr.w	r3, r3, ip
 8005258:	e7cc      	b.n	80051f4 <USB_EPStartXfer+0x164>
 800525a:	bf00      	nop
 800525c:	e007ffff 	.word	0xe007ffff
 8005260:	fff80000 	.word	0xfff80000
 8005264:	1ff80000 	.word	0x1ff80000

08005268 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005268:	3203      	adds	r2, #3
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800526a:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800526e:	0892      	lsrs	r2, r2, #2
 8005270:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  for (i = 0U; i < count32b; i++)
 8005274:	4291      	cmp	r1, r2
 8005276:	d101      	bne.n	800527c <USB_ReadPacket+0x14>
}
 8005278:	4608      	mov	r0, r1
 800527a:	4770      	bx	lr
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800527c:	6803      	ldr	r3, [r0, #0]
 800527e:	f841 3b04 	str.w	r3, [r1], #4
  for (i = 0U; i < count32b; i++)
 8005282:	e7f7      	b.n	8005274 <USB_ReadPacket+0xc>

08005284 <USB_EPSetStall>:
  if (ep->is_in == 1U)
 8005284:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8005286:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8005288:	2a01      	cmp	r2, #1
 800528a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800528e:	d112      	bne.n	80052b6 <USB_EPSetStall+0x32>
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005290:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8005294:	2a00      	cmp	r2, #0
 8005296:	db06      	blt.n	80052a6 <USB_EPSetStall+0x22>
 8005298:	b12b      	cbz	r3, 80052a6 <USB_EPSetStall+0x22>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800529a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800529e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80052a2:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80052a6:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80052aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80052ae:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 80052b2:	2000      	movs	r0, #0
 80052b4:	4770      	bx	lr
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80052b6:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 80052ba:	2a00      	cmp	r2, #0
 80052bc:	db06      	blt.n	80052cc <USB_EPSetStall+0x48>
 80052be:	b12b      	cbz	r3, 80052cc <USB_EPSetStall+0x48>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80052c0:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80052c4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80052c8:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80052cc:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80052d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80052d4:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 80052d8:	e7eb      	b.n	80052b2 <USB_EPSetStall+0x2e>

080052da <USB_EPClearStall>:
  if (ep->is_in == 1U)
 80052da:	780b      	ldrb	r3, [r1, #0]
 80052dc:	784a      	ldrb	r2, [r1, #1]
 80052de:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80052e2:	78cb      	ldrb	r3, [r1, #3]
 80052e4:	2a01      	cmp	r2, #1
 80052e6:	f1a3 0302 	sub.w	r3, r3, #2
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	d10f      	bne.n	800530e <USB_EPClearStall+0x34>
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80052ee:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80052f2:	2b01      	cmp	r3, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80052f4:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80052f8:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80052fc:	d805      	bhi.n	800530a <USB_EPClearStall+0x30>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80052fe:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8005302:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005306:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800530a:	2000      	movs	r0, #0
 800530c:	4770      	bx	lr
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800530e:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005312:	2b01      	cmp	r3, #1
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005314:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8005318:	f8c0 2b00 	str.w	r2, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800531c:	d8f5      	bhi.n	800530a <USB_EPClearStall+0x30>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800531e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8005322:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005326:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800532a:	e7ee      	b.n	800530a <USB_EPClearStall+0x30>

0800532c <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800532c:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005330:	0109      	lsls	r1, r1, #4
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005332:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005336:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800533a:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800533e:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8005342:	4319      	orrs	r1, r3
 8005344:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8005348:	2000      	movs	r0, #0
 800534a:	4770      	bx	lr

0800534c <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800534c:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 8005350:	f023 0303 	bic.w	r3, r3, #3
 8005354:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005358:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800535c:	f023 0302 	bic.w	r3, r3, #2
 8005360:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8005364:	2000      	movs	r0, #0
 8005366:	4770      	bx	lr

08005368 <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005368:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 800536c:	f023 0303 	bic.w	r3, r3, #3
 8005370:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005374:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8005378:	f043 0302 	orr.w	r3, r3, #2
 800537c:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8005380:	2000      	movs	r0, #0
 8005382:	4770      	bx	lr

08005384 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8005384:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8005386:	6980      	ldr	r0, [r0, #24]
}
 8005388:	4010      	ands	r0, r2
 800538a:	4770      	bx	lr

0800538c <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800538c:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8005390:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005394:	69c0      	ldr	r0, [r0, #28]
 8005396:	4018      	ands	r0, r3
}
 8005398:	0c00      	lsrs	r0, r0, #16
 800539a:	4770      	bx	lr

0800539c <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800539c:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 80053a0:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80053a4:	69c0      	ldr	r0, [r0, #28]
 80053a6:	4018      	ands	r0, r3
}
 80053a8:	b280      	uxth	r0, r0
 80053aa:	4770      	bx	lr

080053ac <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80053ac:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80053b0:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80053b4:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80053b8:	6940      	ldr	r0, [r0, #20]
}
 80053ba:	4010      	ands	r0, r2
 80053bc:	4770      	bx	lr

080053be <USB_ReadDevInEPInterrupt>:
{
 80053be:	b510      	push	{r4, lr}
  msk = USBx_DEVICE->DIEPMSK;
 80053c0:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 80053c4:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80053c8:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80053cc:	f001 010f 	and.w	r1, r1, #15
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80053d0:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80053d4:	40cb      	lsrs	r3, r1
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80053d6:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80053d8:	01db      	lsls	r3, r3, #7
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	4323      	orrs	r3, r4
}
 80053de:	4018      	ands	r0, r3
 80053e0:	bd10      	pop	{r4, pc}

080053e2 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 80053e2:	6940      	ldr	r0, [r0, #20]
}
 80053e4:	f000 0001 	and.w	r0, r0, #1
 80053e8:	4770      	bx	lr

080053ea <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80053ea:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80053ee:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80053f2:	f023 0307 	bic.w	r3, r3, #7
 80053f6:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80053fa:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80053fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005402:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8005406:	2000      	movs	r0, #0
 8005408:	4770      	bx	lr
	...

0800540c <USB_EP0_OutStart>:
{
 800540c:	b530      	push	{r4, r5, lr}
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800540e:	6c05      	ldr	r5, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005410:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8005414:	4c0f      	ldr	r4, [pc, #60]	; (8005454 <USB_EP0_OutStart+0x48>)
 8005416:	42a5      	cmp	r5, r4
 8005418:	d903      	bls.n	8005422 <USB_EP0_OutStart+0x16>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800541a:	f8d0 4b00 	ldr.w	r4, [r0, #2816]	; 0xb00
 800541e:	2c00      	cmp	r4, #0
 8005420:	db16      	blt.n	8005450 <USB_EP0_OutStart+0x44>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005422:	2400      	movs	r4, #0
  if (dma == 1U)
 8005424:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005426:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005428:	691c      	ldr	r4, [r3, #16]
 800542a:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800542e:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005430:	691c      	ldr	r4, [r3, #16]
 8005432:	f044 0418 	orr.w	r4, r4, #24
 8005436:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005438:	691c      	ldr	r4, [r3, #16]
 800543a:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 800543e:	611c      	str	r4, [r3, #16]
  if (dma == 1U)
 8005440:	d106      	bne.n	8005450 <USB_EP0_OutStart+0x44>
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005442:	615a      	str	r2, [r3, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005444:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8005448:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800544c:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8005450:	2000      	movs	r0, #0
 8005452:	bd30      	pop	{r4, r5, pc}
 8005454:	4f54300a 	.word	0x4f54300a

08005458 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005458:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
{
 800545c:	b510      	push	{r4, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800545e:	b16b      	cbz	r3, 800547c <USBD_CDC_EP0_RxReady+0x24>
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005460:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005464:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8005468:	28ff      	cmp	r0, #255	; 0xff
 800546a:	d007      	beq.n	800547c <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	4621      	mov	r1, r4
 8005470:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8005474:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8005476:	23ff      	movs	r3, #255	; 0xff
 8005478:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
}
 800547c:	2000      	movs	r0, #0
 800547e:	bd10      	pop	{r4, pc}

08005480 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005480:	2343      	movs	r3, #67	; 0x43
 8005482:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
}
 8005484:	4800      	ldr	r0, [pc, #0]	; (8005488 <USBD_CDC_GetFSCfgDesc+0x8>)
 8005486:	4770      	bx	lr
 8005488:	20000044 	.word	0x20000044

0800548c <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800548c:	2343      	movs	r3, #67	; 0x43
 800548e:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
}
 8005490:	4800      	ldr	r0, [pc, #0]	; (8005494 <USBD_CDC_GetHSCfgDesc+0x8>)
 8005492:	4770      	bx	lr
 8005494:	20000088 	.word	0x20000088

08005498 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005498:	2343      	movs	r3, #67	; 0x43
 800549a:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
}
 800549c:	4800      	ldr	r0, [pc, #0]	; (80054a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800549e:	4770      	bx	lr
 80054a0:	200000d8 	.word	0x200000d8

080054a4 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80054a4:	230a      	movs	r3, #10
 80054a6:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 80054a8:	4800      	ldr	r0, [pc, #0]	; (80054ac <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 80054aa:	4770      	bx	lr
 80054ac:	200000cc 	.word	0x200000cc

080054b0 <USBD_CDC_DataOut>:
{
 80054b0:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80054b2:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc
{
 80054b6:	4605      	mov	r5, r0
  if (pdev->pClassData == NULL)
 80054b8:	b16c      	cbz	r4, 80054d6 <USBD_CDC_DataOut+0x26>
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80054ba:	f001 f811 	bl	80064e0 <USBD_LL_GetRxDataSize>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80054be:	f8d5 32c0 	ldr.w	r3, [r5, #704]	; 0x2c0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80054c2:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80054c6:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 80054d0:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 80054d2:	2000      	movs	r0, #0
}
 80054d4:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 80054d6:	2003      	movs	r0, #3
 80054d8:	e7fc      	b.n	80054d4 <USBD_CDC_DataOut+0x24>

080054da <USBD_CDC_DataIn>:
{
 80054da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pdev->pClassData == NULL)
 80054dc:	f8d0 62bc 	ldr.w	r6, [r0, #700]	; 0x2bc
{
 80054e0:	4605      	mov	r5, r0
 80054e2:	460a      	mov	r2, r1
  if (pdev->pClassData == NULL)
 80054e4:	b326      	cbz	r6, 8005530 <USBD_CDC_DataIn+0x56>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80054e6:	2714      	movs	r7, #20
 80054e8:	fb07 0701 	mla	r7, r7, r1, r0
 80054ec:	69bb      	ldr	r3, [r7, #24]
 80054ee:	b19b      	cbz	r3, 8005518 <USBD_CDC_DataIn+0x3e>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80054f0:	f04f 0c1c 	mov.w	ip, #28
 80054f4:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
 80054f8:	fb0c 4401 	mla	r4, ip, r1, r4
 80054fc:	f8d4 c044 	ldr.w	ip, [r4, #68]	; 0x44
 8005500:	fbb3 f4fc 	udiv	r4, r3, ip
 8005504:	fb0c 3414 	mls	r4, ip, r4, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005508:	b934      	cbnz	r4, 8005518 <USBD_CDC_DataIn+0x3e>
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800550a:	4623      	mov	r3, r4
 800550c:	4622      	mov	r2, r4
    pdev->ep_in[epnum].total_length = 0U;
 800550e:	61bc      	str	r4, [r7, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005510:	f000 ffca 	bl	80064a8 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 8005514:	4620      	mov	r0, r4
}
 8005516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hcdc->TxState = 0U;
 8005518:	2400      	movs	r4, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800551a:	f8d5 32c0 	ldr.w	r3, [r5, #704]	; 0x2c0
 800551e:	f506 7104 	add.w	r1, r6, #528	; 0x210
 8005522:	f8d6 0208 	ldr.w	r0, [r6, #520]	; 0x208
 8005526:	691b      	ldr	r3, [r3, #16]
    hcdc->TxState = 0U;
 8005528:	f8c6 4214 	str.w	r4, [r6, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800552c:	4798      	blx	r3
 800552e:	e7f1      	b.n	8005514 <USBD_CDC_DataIn+0x3a>
    return (uint8_t)USBD_FAIL;
 8005530:	2003      	movs	r0, #3
 8005532:	e7f0      	b.n	8005516 <USBD_CDC_DataIn+0x3c>

08005534 <USBD_CDC_Setup>:
{
 8005534:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005538:	780a      	ldrb	r2, [r1, #0]
  uint8_t ifalt = 0U;
 800553a:	f04f 0800 	mov.w	r8, #0
{
 800553e:	4605      	mov	r5, r0
 8005540:	460e      	mov	r6, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005542:	f012 0460 	ands.w	r4, r2, #96	; 0x60
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005546:	f8d0 72bc 	ldr.w	r7, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 800554a:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 800554e:	f8ad 8006 	strh.w	r8, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005552:	d028      	beq.n	80055a6 <USBD_CDC_Setup+0x72>
 8005554:	2c20      	cmp	r4, #32
 8005556:	d15e      	bne.n	8005616 <USBD_CDC_Setup+0xe2>
    if (req->wLength != 0U)
 8005558:	88cc      	ldrh	r4, [r1, #6]
 800555a:	784b      	ldrb	r3, [r1, #1]
 800555c:	b1e4      	cbz	r4, 8005598 <USBD_CDC_Setup+0x64>
      if ((req->bmRequest & 0x80U) != 0U)
 800555e:	0612      	lsls	r2, r2, #24
 8005560:	d511      	bpl.n	8005586 <USBD_CDC_Setup+0x52>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005562:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
 8005566:	4639      	mov	r1, r7
 8005568:	4618      	mov	r0, r3
 800556a:	f8d2 9008 	ldr.w	r9, [r2, #8]
 800556e:	4622      	mov	r2, r4
 8005570:	47c8      	blx	r9
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005572:	88f2      	ldrh	r2, [r6, #6]
 8005574:	4639      	mov	r1, r7
 8005576:	4628      	mov	r0, r5
 8005578:	f000 fca0 	bl	8005ebc <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800557c:	4644      	mov	r4, r8
}
 800557e:	4620      	mov	r0, r4
 8005580:	b003      	add	sp, #12
 8005582:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005586:	4622      	mov	r2, r4
 8005588:	4639      	mov	r1, r7
        hcdc->CmdOpCode = req->bRequest;
 800558a:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800558e:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005592:	f000 fca8 	bl	8005ee6 <USBD_CtlPrepareRx>
 8005596:	e7f1      	b.n	800557c <USBD_CDC_Setup+0x48>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005598:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
 800559c:	4618      	mov	r0, r3
 800559e:	6895      	ldr	r5, [r2, #8]
 80055a0:	4622      	mov	r2, r4
 80055a2:	47a8      	blx	r5
 80055a4:	e7eb      	b.n	800557e <USBD_CDC_Setup+0x4a>
    switch (req->bRequest)
 80055a6:	784f      	ldrb	r7, [r1, #1]
 80055a8:	2f0b      	cmp	r7, #11
 80055aa:	d834      	bhi.n	8005616 <USBD_CDC_Setup+0xe2>
 80055ac:	a301      	add	r3, pc, #4	; (adr r3, 80055b4 <USBD_CDC_Setup+0x80>)
 80055ae:	f853 f027 	ldr.w	pc, [r3, r7, lsl #2]
 80055b2:	bf00      	nop
 80055b4:	080055e5 	.word	0x080055e5
 80055b8:	0800557f 	.word	0x0800557f
 80055bc:	08005617 	.word	0x08005617
 80055c0:	08005617 	.word	0x08005617
 80055c4:	08005617 	.word	0x08005617
 80055c8:	08005617 	.word	0x08005617
 80055cc:	08005617 	.word	0x08005617
 80055d0:	08005617 	.word	0x08005617
 80055d4:	08005617 	.word	0x08005617
 80055d8:	08005617 	.word	0x08005617
 80055dc:	080055fb 	.word	0x080055fb
 80055e0:	0800560f 	.word	0x0800560f
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055e4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80055e8:	2b03      	cmp	r3, #3
 80055ea:	d114      	bne.n	8005616 <USBD_CDC_Setup+0xe2>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80055ec:	2202      	movs	r2, #2
 80055ee:	f10d 0106 	add.w	r1, sp, #6
  USBD_StatusTypeDef ret = USBD_OK;
 80055f2:	463c      	mov	r4, r7
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80055f4:	f000 fc62 	bl	8005ebc <USBD_CtlSendData>
 80055f8:	e7c1      	b.n	800557e <USBD_CDC_Setup+0x4a>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055fa:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80055fe:	2b03      	cmp	r3, #3
 8005600:	d109      	bne.n	8005616 <USBD_CDC_Setup+0xe2>
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005602:	2201      	movs	r2, #1
 8005604:	f10d 0105 	add.w	r1, sp, #5
 8005608:	f000 fc58 	bl	8005ebc <USBD_CtlSendData>
 800560c:	e7b7      	b.n	800557e <USBD_CDC_Setup+0x4a>
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800560e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005612:	2b03      	cmp	r3, #3
 8005614:	d0b3      	beq.n	800557e <USBD_CDC_Setup+0x4a>
      USBD_CtlError(pdev, req);
 8005616:	4631      	mov	r1, r6
 8005618:	4628      	mov	r0, r5
      ret = USBD_FAIL;
 800561a:	2403      	movs	r4, #3
      USBD_CtlError(pdev, req);
 800561c:	f000 fc27 	bl	8005e6e <USBD_CtlError>
      break;
 8005620:	e7ad      	b.n	800557e <USBD_CDC_Setup+0x4a>
 8005622:	bf00      	nop

08005624 <USBD_CDC_DeInit>:
{
 8005624:	b538      	push	{r3, r4, r5, lr}
 8005626:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005628:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800562a:	2181      	movs	r1, #129	; 0x81
 800562c:	f000 fef0 	bl	8006410 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005630:	2101      	movs	r1, #1
 8005632:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005634:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005636:	f000 feeb 	bl	8006410 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800563a:	2182      	movs	r1, #130	; 0x82
 800563c:	4620      	mov	r0, r4
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800563e:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005642:	f000 fee5 	bl	8006410 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8005646:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800564a:	64e5      	str	r5, [r4, #76]	; 0x4c
  if (pdev->pClassData != NULL)
 800564c:	b14b      	cbz	r3, 8005662 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800564e:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005656:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 800565a:	f000 ffd3 	bl	8006604 <free>
    pdev->pClassData = NULL;
 800565e:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 8005662:	2000      	movs	r0, #0
 8005664:	bd38      	pop	{r3, r4, r5, pc}

08005666 <USBD_CDC_Init>:
{
 8005666:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005668:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800566a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800566e:	f000 ffc1 	bl	80065f4 <malloc>
  if (hcdc == NULL)
 8005672:	4605      	mov	r5, r0
    pdev->pClassData = NULL;
 8005674:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (hcdc == NULL)
 8005678:	b910      	cbnz	r0, 8005680 <USBD_CDC_Init+0x1a>
    return (uint8_t)USBD_EMEM;
 800567a:	2602      	movs	r6, #2
}
 800567c:	4630      	mov	r0, r6
 800567e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005680:	7c23      	ldrb	r3, [r4, #16]
 8005682:	bb8b      	cbnz	r3, 80056e8 <USBD_CDC_Init+0x82>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005684:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005688:	2202      	movs	r2, #2
 800568a:	2181      	movs	r1, #129	; 0x81
 800568c:	4620      	mov	r0, r4
 800568e:	f000 feaf 	bl	80063f0 <USBD_LL_OpenEP>
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005692:	2601      	movs	r6, #1
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005694:	f44f 7300 	mov.w	r3, #512	; 0x200
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005698:	8726      	strh	r6, [r4, #56]	; 0x38
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800569a:	4631      	mov	r1, r6
 800569c:	2202      	movs	r2, #2
 800569e:	4620      	mov	r0, r4
  hcdc->TxState = 0U;
 80056a0:	2700      	movs	r7, #0
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80056a2:	f000 fea5 	bl	80063f0 <USBD_LL_OpenEP>
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80056a6:	2310      	movs	r3, #16
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80056a8:	2203      	movs	r2, #3
 80056aa:	2182      	movs	r1, #130	; 0x82
      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80056ac:	f8a4 6178 	strh.w	r6, [r4, #376]	; 0x178
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80056b0:	4620      	mov	r0, r4
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80056b2:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80056b6:	2308      	movs	r3, #8
 80056b8:	f000 fe9a 	bl	80063f0 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80056bc:	2101      	movs	r1, #1
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80056be:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80056c2:	f8a4 104c 	strh.w	r1, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4798      	blx	r3
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80056ca:	7c26      	ldrb	r6, [r4, #16]
  hcdc->TxState = 0U;
 80056cc:	f8c5 7214 	str.w	r7, [r5, #532]	; 0x214
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80056d0:	2101      	movs	r1, #1
  hcdc->RxState = 0U;
 80056d2:	f8c5 7218 	str.w	r7, [r5, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80056d6:	b98e      	cbnz	r6, 80056fc <USBD_CDC_Init+0x96>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80056d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056dc:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 80056e0:	4620      	mov	r0, r4
 80056e2:	f000 feef 	bl	80064c4 <USBD_LL_PrepareReceive>
 80056e6:	e7c9      	b.n	800567c <USBD_CDC_Init+0x16>
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80056e8:	2601      	movs	r6, #1
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80056ea:	2340      	movs	r3, #64	; 0x40
 80056ec:	2202      	movs	r2, #2
 80056ee:	2181      	movs	r1, #129	; 0x81
 80056f0:	4620      	mov	r0, r4
 80056f2:	f000 fe7d 	bl	80063f0 <USBD_LL_OpenEP>
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80056f6:	2340      	movs	r3, #64	; 0x40
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80056f8:	8726      	strh	r6, [r4, #56]	; 0x38
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80056fa:	e7ce      	b.n	800569a <USBD_CDC_Init+0x34>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80056fc:	2340      	movs	r3, #64	; 0x40
 80056fe:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8005702:	4620      	mov	r0, r4
  return (uint8_t)USBD_OK;
 8005704:	463e      	mov	r6, r7
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005706:	f000 fedd 	bl	80064c4 <USBD_LL_PrepareReceive>
 800570a:	e7b7      	b.n	800567c <USBD_CDC_Init+0x16>

0800570c <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 800570c:	b119      	cbz	r1, 8005716 <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 800570e:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005712:	2000      	movs	r0, #0
 8005714:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8005716:	2003      	movs	r0, #3
}
 8005718:	4770      	bx	lr

0800571a <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800571a:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return (uint8_t)USBD_OK;
}
 800571e:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8005720:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005724:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8005728:	4770      	bx	lr

0800572a <USBD_CDC_SetRxBuffer>:
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 800572a:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  return (uint8_t)USBD_OK;
}
 800572e:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8005730:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8005734:	4770      	bx	lr

08005736 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005736:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
{
 800573a:	b510      	push	{r4, lr}
  USBD_StatusTypeDef ret = USBD_BUSY;

  if (pdev->pClassData == NULL)
 800573c:	b17a      	cbz	r2, 800575e <USBD_CDC_TransmitPacket+0x28>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 800573e:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 8005742:	2301      	movs	r3, #1
 8005744:	b96c      	cbnz	r4, 8005762 <USBD_CDC_TransmitPacket+0x2c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005746:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800574a:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800574c:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8005750:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005754:	62c3      	str	r3, [r0, #44]	; 0x2c
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8005756:	f000 fea7 	bl	80064a8 <USBD_LL_Transmit>

    ret = USBD_OK;
 800575a:	4620      	mov	r0, r4
  }

  return (uint8_t)ret;
}
 800575c:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 800575e:	2003      	movs	r0, #3
 8005760:	e7fc      	b.n	800575c <USBD_CDC_TransmitPacket+0x26>
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005762:	4618      	mov	r0, r3
 8005764:	e7fa      	b.n	800575c <USBD_CDC_TransmitPacket+0x26>

08005766 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005766:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
{
 800576a:	b510      	push	{r4, lr}

  if (pdev->pClassData == NULL)
 800576c:	b182      	cbz	r2, 8005790 <USBD_CDC_ReceivePacket+0x2a>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800576e:	7c04      	ldrb	r4, [r0, #16]
 8005770:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8005774:	b934      	cbnz	r4, 8005784 <USBD_CDC_ReceivePacket+0x1e>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005776:	f44f 7300 	mov.w	r3, #512	; 0x200
 800577a:	2101      	movs	r1, #1
 800577c:	f000 fea2 	bl	80064c4 <USBD_LL_PrepareReceive>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
}
 8005780:	4620      	mov	r0, r4
 8005782:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005784:	2340      	movs	r3, #64	; 0x40
 8005786:	2101      	movs	r1, #1
  return (uint8_t)USBD_OK;
 8005788:	2400      	movs	r4, #0
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800578a:	f000 fe9b 	bl	80064c4 <USBD_LL_PrepareReceive>
 800578e:	e7f7      	b.n	8005780 <USBD_CDC_ReceivePacket+0x1a>
    return (uint8_t)USBD_FAIL;
 8005790:	2403      	movs	r4, #3
 8005792:	e7f5      	b.n	8005780 <USBD_CDC_ReceivePacket+0x1a>

08005794 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005794:	b1a0      	cbz	r0, 80057c0 <USBD_Init+0x2c>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8005796:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800579a:	b113      	cbz	r3, 80057a2 <USBD_Init+0xe>
  {
    pdev->pClass = NULL;
 800579c:	2300      	movs	r3, #0
 800579e:	f8c0 32b8 	str.w	r3, [r0, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80057a2:	f8d0 32cc 	ldr.w	r3, [r0, #716]	; 0x2cc
 80057a6:	b113      	cbz	r3, 80057ae <USBD_Init+0x1a>
  {
    pdev->pConfDesc = NULL;
 80057a8:	2300      	movs	r3, #0
 80057aa:	f8c0 32cc 	str.w	r3, [r0, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80057ae:	b109      	cbz	r1, 80057b4 <USBD_Init+0x20>
  {
    pdev->pDesc = pdesc;
 80057b0:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80057b4:	2301      	movs	r3, #1
  pdev->id = id;
 80057b6:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 80057b8:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80057bc:	f000 bddc 	b.w	8006378 <USBD_LL_Init>

  return ret;
}
 80057c0:	2003      	movs	r0, #3
 80057c2:	4770      	bx	lr

080057c4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80057c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint16_t len = 0U;
 80057c6:	2400      	movs	r4, #0
{
 80057c8:	4605      	mov	r5, r0
  uint16_t len = 0U;
 80057ca:	f8ad 4006 	strh.w	r4, [sp, #6]

  if (pclass == NULL)
 80057ce:	b151      	cbz	r1, 80057e6 <USBD_RegisterClass+0x22>
#endif
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80057d0:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80057d4:	f10d 0006 	add.w	r0, sp, #6
 80057d8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80057da:	4798      	blx	r3
 80057dc:	f8c5 02cc 	str.w	r0, [r5, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80057e0:	4620      	mov	r0, r4
}
 80057e2:	b003      	add	sp, #12
 80057e4:	bd30      	pop	{r4, r5, pc}
    return USBD_FAIL;
 80057e6:	2003      	movs	r0, #3
 80057e8:	e7fb      	b.n	80057e2 <USBD_RegisterClass+0x1e>

080057ea <USBD_Start>:
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80057ea:	f000 bdf3 	b.w	80063d4 <USBD_LL_Start>

080057ee <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 80057ee:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80057f2:	b10b      	cbz	r3, 80057f8 <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4718      	bx	r3
  }

  return ret;
}
 80057f8:	2003      	movs	r0, #3
 80057fa:	4770      	bx	lr

080057fc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80057fc:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80057fe:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8005802:	b10b      	cbz	r3, 8005808 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	4798      	blx	r3
  }

  return USBD_OK;
}
 8005808:	2000      	movs	r0, #0
 800580a:	bd08      	pop	{r3, pc}

0800580c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800580c:	b538      	push	{r3, r4, r5, lr}
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800580e:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
{
 8005812:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005814:	4628      	mov	r0, r5
 8005816:	f000 fb16 	bl	8005e46 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800581a:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 800581c:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
  pdev->ep0_state = USBD_EP0_SETUP;
 8005820:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 8005824:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 8005828:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 800582c:	f001 031f 	and.w	r3, r1, #31
 8005830:	2b01      	cmp	r3, #1
 8005832:	d008      	beq.n	8005846 <USBD_LL_SetupStage+0x3a>
 8005834:	2b02      	cmp	r3, #2
 8005836:	d00c      	beq.n	8005852 <USBD_LL_SetupStage+0x46>
 8005838:	b98b      	cbnz	r3, 800585e <USBD_LL_SetupStage+0x52>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800583a:	4629      	mov	r1, r5
 800583c:	4620      	mov	r0, r4
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return ret;
}
 800583e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005842:	f000 b8fb 	b.w	8005a3c <USBD_StdDevReq>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005846:	4629      	mov	r1, r5
 8005848:	4620      	mov	r0, r4
}
 800584a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800584e:	f000 ba3f 	b.w	8005cd0 <USBD_StdItfReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005852:	4629      	mov	r1, r5
 8005854:	4620      	mov	r0, r4
}
 8005856:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800585a:	f000 ba5f 	b.w	8005d1c <USBD_StdEPReq>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800585e:	4620      	mov	r0, r4
 8005860:	f001 0180 	and.w	r1, r1, #128	; 0x80
}
 8005864:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005868:	f000 bde0 	b.w	800642c <USBD_LL_StallEP>

0800586c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800586c:	b570      	push	{r4, r5, r6, lr}
 800586e:	4604      	mov	r4, r0
 8005870:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005872:	460d      	mov	r5, r1
 8005874:	b9f9      	cbnz	r1, 80058b6 <USBD_LL_DataOutStage+0x4a>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005876:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 800587a:	2b03      	cmp	r3, #3
 800587c:	d10c      	bne.n	8005898 <USBD_LL_DataOutStage+0x2c>
    {
      if (pep->rem_length > pep->maxpacket)
 800587e:	e9d0 3257 	ldrd	r3, r2, [r0, #348]	; 0x15c
 8005882:	4293      	cmp	r3, r2
 8005884:	d90a      	bls.n	800589c <USBD_LL_DataOutStage+0x30>
      {
        pep->rem_length -= pep->maxpacket;
 8005886:	1a9b      	subs	r3, r3, r2

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005888:	4631      	mov	r1, r6
 800588a:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 800588c:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005890:	bf28      	it	cs
 8005892:	461a      	movcs	r2, r3
 8005894:	f000 fb34 	bl	8005f00 <USBD_CtlContinueRx>
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 8005898:	4628      	mov	r0, r5
 800589a:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800589c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	b123      	cbz	r3, 80058ae <USBD_LL_DataOutStage+0x42>
 80058a4:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80058a8:	2a03      	cmp	r2, #3
 80058aa:	d100      	bne.n	80058ae <USBD_LL_DataOutStage+0x42>
          pdev->pClass->EP0_RxReady(pdev);
 80058ac:	4798      	blx	r3
        (void)USBD_CtlSendStatus(pdev);
 80058ae:	4620      	mov	r0, r4
 80058b0:	f000 fb2e 	bl	8005f10 <USBD_CtlSendStatus>
 80058b4:	e7f0      	b.n	8005898 <USBD_LL_DataOutStage+0x2c>
  else if ((pdev->pClass->DataOut != NULL) &&
 80058b6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80058ba:	699b      	ldr	r3, [r3, #24]
 80058bc:	b133      	cbz	r3, 80058cc <USBD_LL_DataOutStage+0x60>
 80058be:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80058c2:	2a03      	cmp	r2, #3
 80058c4:	d102      	bne.n	80058cc <USBD_LL_DataOutStage+0x60>
}
 80058c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80058ca:	4718      	bx	r3
    return USBD_FAIL;
 80058cc:	2503      	movs	r5, #3
 80058ce:	e7e3      	b.n	8005898 <USBD_LL_DataOutStage+0x2c>

080058d0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80058d0:	b570      	push	{r4, r5, r6, lr}
 80058d2:	4604      	mov	r4, r0
 80058d4:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80058d6:	460d      	mov	r5, r1
 80058d8:	bbd9      	cbnz	r1, 8005952 <USBD_LL_DataInStage+0x82>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80058da:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d10e      	bne.n	8005900 <USBD_LL_DataInStage+0x30>
    {
      if (pep->rem_length > pep->maxpacket)
 80058e2:	e9d0 3207 	ldrd	r3, r2, [r0, #28]
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d913      	bls.n	8005912 <USBD_LL_DataInStage+0x42>
      {
        pep->rem_length -= pep->maxpacket;
 80058ea:	1a9a      	subs	r2, r3, r2

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80058ec:	4631      	mov	r1, r6
        pep->rem_length -= pep->maxpacket;
 80058ee:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80058f0:	f000 faf1 	bl	8005ed6 <USBD_CtlContinueSendData>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80058f4:	462b      	mov	r3, r5
 80058f6:	462a      	mov	r2, r5
 80058f8:	4629      	mov	r1, r5
 80058fa:	4620      	mov	r0, r4
 80058fc:	f000 fde2 	bl	80064c4 <USBD_LL_PrepareReceive>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005900:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8005904:	2b01      	cmp	r3, #1
 8005906:	d102      	bne.n	800590e <USBD_LL_DataInStage+0x3e>
    {
      (void)USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8005908:	2300      	movs	r3, #0
 800590a:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 800590e:	4628      	mov	r0, r5
 8005910:	bd70      	pop	{r4, r5, r6, pc}
        if ((pep->maxpacket == pep->rem_length) &&
 8005912:	d10c      	bne.n	800592e <USBD_LL_DataInStage+0x5e>
            (pep->total_length >= pep->maxpacket) &&
 8005914:	6982      	ldr	r2, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 8005916:	4293      	cmp	r3, r2
 8005918:	d809      	bhi.n	800592e <USBD_LL_DataInStage+0x5e>
            (pep->total_length >= pep->maxpacket) &&
 800591a:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 800591e:	429a      	cmp	r2, r3
 8005920:	d205      	bcs.n	800592e <USBD_LL_DataInStage+0x5e>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005922:	460a      	mov	r2, r1
 8005924:	f000 fad7 	bl	8005ed6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005928:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
 800592c:	e7e2      	b.n	80058f4 <USBD_LL_DataInStage+0x24>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800592e:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	b12b      	cbz	r3, 8005942 <USBD_LL_DataInStage+0x72>
 8005936:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 800593a:	2a03      	cmp	r2, #3
 800593c:	d101      	bne.n	8005942 <USBD_LL_DataInStage+0x72>
            pdev->pClass->EP0_TxSent(pdev);
 800593e:	4620      	mov	r0, r4
 8005940:	4798      	blx	r3
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005942:	2180      	movs	r1, #128	; 0x80
 8005944:	4620      	mov	r0, r4
 8005946:	f000 fd71 	bl	800642c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800594a:	4620      	mov	r0, r4
 800594c:	f000 faeb 	bl	8005f26 <USBD_CtlReceiveStatus>
 8005950:	e7d6      	b.n	8005900 <USBD_LL_DataInStage+0x30>
  else if ((pdev->pClass->DataIn != NULL) &&
 8005952:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8005956:	695b      	ldr	r3, [r3, #20]
 8005958:	b133      	cbz	r3, 8005968 <USBD_LL_DataInStage+0x98>
 800595a:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800595e:	2a03      	cmp	r2, #3
 8005960:	d102      	bne.n	8005968 <USBD_LL_DataInStage+0x98>
}
 8005962:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005966:	4718      	bx	r3
    return USBD_FAIL;
 8005968:	2503      	movs	r5, #3
 800596a:	e7d0      	b.n	800590e <USBD_LL_DataInStage+0x3e>

0800596c <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800596c:	2301      	movs	r3, #1
  pdev->ep0_state = USBD_EP0_IDLE;
 800596e:	2100      	movs	r1, #0
{
 8005970:	b570      	push	{r4, r5, r6, lr}
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005972:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
{
 8005976:	4604      	mov	r4, r0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData != NULL)
 8005978:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
  pdev->ep0_state = USBD_EP0_IDLE;
 800597c:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 8005980:	6041      	str	r1, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 8005982:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  if (pdev->pClassData != NULL)
 8005986:	b11b      	cbz	r3, 8005990 <USBD_LL_Reset+0x24>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005988:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005990:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005992:	2540      	movs	r5, #64	; 0x40
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005994:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005996:	2340      	movs	r3, #64	; 0x40
 8005998:	4611      	mov	r1, r2
 800599a:	4620      	mov	r0, r4
 800599c:	f000 fd28 	bl	80063f0 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80059a0:	462b      	mov	r3, r5
 80059a2:	2200      	movs	r2, #0
 80059a4:	2180      	movs	r1, #128	; 0x80
 80059a6:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80059a8:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80059ac:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80059b0:	f000 fd1e 	bl	80063f0 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  return USBD_OK;
}
 80059b4:	2000      	movs	r0, #0
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80059b6:	84a6      	strh	r6, [r4, #36]	; 0x24
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80059b8:	6225      	str	r5, [r4, #32]
}
 80059ba:	bd70      	pop	{r4, r5, r6, pc}

080059bc <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80059bc:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 80059be:	2000      	movs	r0, #0
 80059c0:	4770      	bx	lr

080059c2 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 80059c2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80059c6:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80059ca:	2304      	movs	r3, #4
 80059cc:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 80059d0:	2000      	movs	r0, #0
 80059d2:	4770      	bx	lr

080059d4 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80059d4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80059d8:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 80059da:	bf04      	itt	eq
 80059dc:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 80059e0:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 80059e4:	2000      	movs	r0, #0
 80059e6:	4770      	bx	lr

080059e8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80059e8:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059ea:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80059ee:	2a03      	cmp	r2, #3
 80059f0:	d104      	bne.n	80059fc <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 80059f2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80059f6:	69db      	ldr	r3, [r3, #28]
 80059f8:	b103      	cbz	r3, 80059fc <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 80059fa:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 80059fc:	2000      	movs	r0, #0
 80059fe:	bd08      	pop	{r3, pc}

08005a00 <USBD_LL_IsoINIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 8005a00:	2000      	movs	r0, #0
 8005a02:	4770      	bx	lr

08005a04 <USBD_LL_IsoOUTIncomplete>:
 8005a04:	2000      	movs	r0, #0
 8005a06:	4770      	bx	lr

08005a08 <USBD_LL_DevConnected>:
 8005a08:	2000      	movs	r0, #0
 8005a0a:	4770      	bx	lr

08005a0c <USBD_LL_DevDisconnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005a0c:	2201      	movs	r2, #1
{
 8005a0e:	b508      	push	{r3, lr}
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005a10:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8005a14:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 8005a18:	b112      	cbz	r2, 8005a20 <USBD_LL_DevDisconnected+0x14>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005a1a:	6852      	ldr	r2, [r2, #4]
 8005a1c:	7901      	ldrb	r1, [r0, #4]
 8005a1e:	4790      	blx	r2
  }

  return USBD_OK;
}
 8005a20:	2000      	movs	r0, #0
 8005a22:	bd08      	pop	{r3, pc}

08005a24 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
 8005a24:	b510      	push	{r4, lr}
 8005a26:	4604      	mov	r4, r0
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005a28:	2180      	movs	r1, #128	; 0x80
 8005a2a:	f000 fcff 	bl	800642c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005a2e:	2100      	movs	r1, #0
 8005a30:	4620      	mov	r0, r4
}
 8005a32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 8005a36:	f000 bcf9 	b.w	800642c <USBD_LL_StallEP>
	...

08005a3c <USBD_StdDevReq>:
{
 8005a3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a3e:	780d      	ldrb	r5, [r1, #0]
 8005a40:	4604      	mov	r4, r0
 8005a42:	460e      	mov	r6, r1
 8005a44:	f005 0560 	and.w	r5, r5, #96	; 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a48:	2d20      	cmp	r5, #32
 8005a4a:	d014      	beq.n	8005a76 <USBD_StdDevReq+0x3a>
 8005a4c:	2d40      	cmp	r5, #64	; 0x40
 8005a4e:	d012      	beq.n	8005a76 <USBD_StdDevReq+0x3a>
 8005a50:	2d00      	cmp	r5, #0
 8005a52:	f040 8106 	bne.w	8005c62 <USBD_StdDevReq+0x226>
    switch (req->bRequest)
 8005a56:	784f      	ldrb	r7, [r1, #1]
 8005a58:	2f09      	cmp	r7, #9
 8005a5a:	f200 8102 	bhi.w	8005c62 <USBD_StdDevReq+0x226>
 8005a5e:	e8df f017 	tbh	[pc, r7, lsl #1]
 8005a62:	0107      	.short	0x0107
 8005a64:	01000129 	.word	0x01000129
 8005a68:	0100011f 	.word	0x0100011f
 8005a6c:	00140089 	.word	0x00140089
 8005a70:	00f00100 	.word	0x00f00100
 8005a74:	00a5      	.short	0x00a5
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005a76:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8005a7a:	4631      	mov	r1, r6
 8005a7c:	4620      	mov	r0, r4
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	4798      	blx	r3
 8005a82:	4605      	mov	r5, r0
}
 8005a84:	4628      	mov	r0, r5
 8005a86:	b003      	add	sp, #12
 8005a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint16_t len = 0U;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8005a90:	884b      	ldrh	r3, [r1, #2]
 8005a92:	0a1a      	lsrs	r2, r3, #8
 8005a94:	3a01      	subs	r2, #1
 8005a96:	2a0e      	cmp	r2, #14
 8005a98:	d80d      	bhi.n	8005ab6 <USBD_StdDevReq+0x7a>
 8005a9a:	e8df f002 	tbb	[pc, r2]
 8005a9e:	2910      	.short	0x2910
 8005aa0:	560c0c36 	.word	0x560c0c36
 8005aa4:	0c0c0c60 	.word	0x0c0c0c60
 8005aa8:	0c0c0c0c 	.word	0x0c0c0c0c
 8005aac:	08          	.byte	0x08
 8005aad:	00          	.byte	0x00
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8005aae:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005ab2:	69db      	ldr	r3, [r3, #28]
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005ab4:	b933      	cbnz	r3, 8005ac4 <USBD_StdDevReq+0x88>
      USBD_CtlError(pdev, req);
 8005ab6:	4620      	mov	r0, r4
        USBD_CtlError(pdev, req);
 8005ab8:	f7ff ffb4 	bl	8005a24 <USBD_CtlError.constprop.0>
 8005abc:	e7e2      	b.n	8005a84 <USBD_StdDevReq+0x48>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005abe:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f10d 0106 	add.w	r1, sp, #6
 8005ac8:	7c20      	ldrb	r0, [r4, #16]
 8005aca:	4798      	blx	r3
    if (req->wLength != 0U)
 8005acc:	88f2      	ldrh	r2, [r6, #6]
 8005ace:	2a00      	cmp	r2, #0
 8005ad0:	f000 80ec 	beq.w	8005cac <USBD_StdDevReq+0x270>
      if (len != 0U)
 8005ad4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d0ec      	beq.n	8005ab6 <USBD_StdDevReq+0x7a>
        len = MIN(len, req->wLength);
 8005adc:	429a      	cmp	r2, r3
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8005ade:	4601      	mov	r1, r0
        len = MIN(len, req->wLength);
 8005ae0:	bf28      	it	cs
 8005ae2:	461a      	movcs	r2, r3
 8005ae4:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005ae8:	4620      	mov	r0, r4
 8005aea:	f000 f9e7 	bl	8005ebc <USBD_CtlSendData>
      break;
 8005aee:	e7c9      	b.n	8005a84 <USBD_StdDevReq+0x48>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005af0:	7c02      	ldrb	r2, [r0, #16]
 8005af2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8005af6:	b932      	cbnz	r2, 8005b06 <USBD_StdDevReq+0xca>
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005afa:	f10d 0006 	add.w	r0, sp, #6
 8005afe:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005b00:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005b02:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8005b04:	e7e2      	b.n	8005acc <USBD_StdDevReq+0x90>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b08:	e7f7      	b.n	8005afa <USBD_StdDevReq+0xbe>
    switch ((uint8_t)(req->wValue))
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	2b05      	cmp	r3, #5
 8005b0e:	d8d2      	bhi.n	8005ab6 <USBD_StdDevReq+0x7a>
 8005b10:	e8df f003 	tbb	[pc, r3]
 8005b14:	0f0b0703 	.word	0x0f0b0703
 8005b18:	1713      	.short	0x1713
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005b1a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	e7c8      	b.n	8005ab4 <USBD_StdDevReq+0x78>
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005b22:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	e7c4      	b.n	8005ab4 <USBD_StdDevReq+0x78>
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005b2a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	e7c0      	b.n	8005ab4 <USBD_StdDevReq+0x78>
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005b32:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005b36:	691b      	ldr	r3, [r3, #16]
 8005b38:	e7bc      	b.n	8005ab4 <USBD_StdDevReq+0x78>
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005b3a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005b3e:	695b      	ldr	r3, [r3, #20]
 8005b40:	e7b8      	b.n	8005ab4 <USBD_StdDevReq+0x78>
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005b42:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005b46:	699b      	ldr	r3, [r3, #24]
 8005b48:	e7b4      	b.n	8005ab4 <USBD_StdDevReq+0x78>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b4a:	7c03      	ldrb	r3, [r0, #16]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d1b2      	bne.n	8005ab6 <USBD_StdDevReq+0x7a>
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005b50:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8005b54:	f10d 0006 	add.w	r0, sp, #6
 8005b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b5a:	4798      	blx	r3
  if (err != 0U)
 8005b5c:	e7b6      	b.n	8005acc <USBD_StdDevReq+0x90>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b5e:	7c03      	ldrb	r3, [r0, #16]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d1a8      	bne.n	8005ab6 <USBD_StdDevReq+0x7a>
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005b64:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8005b68:	f10d 0006 	add.w	r0, sp, #6
 8005b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b6e:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005b70:	2307      	movs	r3, #7
 8005b72:	e7c6      	b.n	8005b02 <USBD_StdDevReq+0xc6>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005b74:	888b      	ldrh	r3, [r1, #4]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d19d      	bne.n	8005ab6 <USBD_StdDevReq+0x7a>
 8005b7a:	88cb      	ldrh	r3, [r1, #6]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d19a      	bne.n	8005ab6 <USBD_StdDevReq+0x7a>
 8005b80:	884e      	ldrh	r6, [r1, #2]
 8005b82:	2e7f      	cmp	r6, #127	; 0x7f
 8005b84:	d897      	bhi.n	8005ab6 <USBD_StdDevReq+0x7a>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b86:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005b8a:	2b03      	cmp	r3, #3
 8005b8c:	d093      	beq.n	8005ab6 <USBD_StdDevReq+0x7a>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005b8e:	b2f1      	uxtb	r1, r6
      pdev->dev_address = dev_addr;
 8005b90:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005b94:	f000 fc7a 	bl	800648c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005b98:	4620      	mov	r0, r4
 8005b9a:	f000 f9b9 	bl	8005f10 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8005b9e:	b11e      	cbz	r6, 8005ba8 <USBD_StdDevReq+0x16c>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005ba0:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8005ba2:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8005ba6:	e76d      	b.n	8005a84 <USBD_StdDevReq+0x48>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e7fa      	b.n	8005ba2 <USBD_StdDevReq+0x166>
  cfgidx = (uint8_t)(req->wValue);
 8005bac:	788e      	ldrb	r6, [r1, #2]
 8005bae:	4f47      	ldr	r7, [pc, #284]	; (8005ccc <USBD_StdDevReq+0x290>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005bb0:	2e01      	cmp	r6, #1
  cfgidx = (uint8_t)(req->wValue);
 8005bb2:	703e      	strb	r6, [r7, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005bb4:	d903      	bls.n	8005bbe <USBD_StdDevReq+0x182>
    USBD_CtlError(pdev, req);
 8005bb6:	f7ff ff35 	bl	8005a24 <USBD_CtlError.constprop.0>
    ret = USBD_FAIL;
 8005bba:	2503      	movs	r5, #3
    break;
 8005bbc:	e762      	b.n	8005a84 <USBD_StdDevReq+0x48>
  switch (pdev->dev_state)
 8005bbe:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005bc2:	2b02      	cmp	r3, #2
 8005bc4:	d008      	beq.n	8005bd8 <USBD_StdDevReq+0x19c>
 8005bc6:	2b03      	cmp	r3, #3
 8005bc8:	d015      	beq.n	8005bf6 <USBD_StdDevReq+0x1ba>
    USBD_CtlError(pdev, req);
 8005bca:	f7ff ff2b 	bl	8005a24 <USBD_CtlError.constprop.0>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005bce:	7839      	ldrb	r1, [r7, #0]
 8005bd0:	4620      	mov	r0, r4
 8005bd2:	f7ff fe13 	bl	80057fc <USBD_ClrClassConfig>
 8005bd6:	e7f0      	b.n	8005bba <USBD_StdDevReq+0x17e>
    if (cfgidx != 0U)
 8005bd8:	2e00      	cmp	r6, #0
 8005bda:	d067      	beq.n	8005cac <USBD_StdDevReq+0x270>
      pdev->dev_config = cfgidx;
 8005bdc:	2101      	movs	r1, #1
 8005bde:	6041      	str	r1, [r0, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8005be0:	f7ff fe05 	bl	80057ee <USBD_SetClassConfig>
      if (ret != USBD_OK)
 8005be4:	4605      	mov	r5, r0
        USBD_CtlError(pdev, req);
 8005be6:	4620      	mov	r0, r4
      if (ret != USBD_OK)
 8005be8:	2d00      	cmp	r5, #0
 8005bea:	f47f af65 	bne.w	8005ab8 <USBD_StdDevReq+0x7c>
        (void)USBD_CtlSendStatus(pdev);
 8005bee:	f000 f98f 	bl	8005f10 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	e7d5      	b.n	8005ba2 <USBD_StdDevReq+0x166>
    if (cfgidx == 0U)
 8005bf6:	b95e      	cbnz	r6, 8005c10 <USBD_StdDevReq+0x1d4>
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8005bf8:	2302      	movs	r3, #2
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005bfa:	4631      	mov	r1, r6
      pdev->dev_config = cfgidx;
 8005bfc:	6046      	str	r6, [r0, #4]
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8005bfe:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005c02:	f7ff fdfb 	bl	80057fc <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8005c06:	4620      	mov	r0, r4
 8005c08:	f000 f982 	bl	8005f10 <USBD_CtlSendStatus>
 8005c0c:	4635      	mov	r5, r6
 8005c0e:	e739      	b.n	8005a84 <USBD_StdDevReq+0x48>
    else if (cfgidx != pdev->dev_config)
 8005c10:	6841      	ldr	r1, [r0, #4]
 8005c12:	2901      	cmp	r1, #1
 8005c14:	d04a      	beq.n	8005cac <USBD_StdDevReq+0x270>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005c16:	b2c9      	uxtb	r1, r1
 8005c18:	f7ff fdf0 	bl	80057fc <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8005c1c:	7839      	ldrb	r1, [r7, #0]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8005c1e:	4620      	mov	r0, r4
      pdev->dev_config = cfgidx;
 8005c20:	6061      	str	r1, [r4, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8005c22:	f7ff fde4 	bl	80057ee <USBD_SetClassConfig>
      if (ret != USBD_OK)
 8005c26:	4606      	mov	r6, r0
 8005c28:	2800      	cmp	r0, #0
 8005c2a:	d03f      	beq.n	8005cac <USBD_StdDevReq+0x270>
        USBD_CtlError(pdev, req);
 8005c2c:	4620      	mov	r0, r4
 8005c2e:	f7ff fef9 	bl	8005a24 <USBD_CtlError.constprop.0>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005c32:	7921      	ldrb	r1, [r4, #4]
 8005c34:	4620      	mov	r0, r4
 8005c36:	f7ff fde1 	bl	80057fc <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005c3a:	2302      	movs	r3, #2
 8005c3c:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8005c40:	e7e4      	b.n	8005c0c <USBD_StdDevReq+0x1d0>
  if (req->wLength != 1U)
 8005c42:	88ca      	ldrh	r2, [r1, #6]
 8005c44:	2a01      	cmp	r2, #1
 8005c46:	f47f af36 	bne.w	8005ab6 <USBD_StdDevReq+0x7a>
    switch (pdev->dev_state)
 8005c4a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005c4e:	2b02      	cmp	r3, #2
 8005c50:	d805      	bhi.n	8005c5e <USBD_StdDevReq+0x222>
 8005c52:	b133      	cbz	r3, 8005c62 <USBD_StdDevReq+0x226>
      pdev->dev_default_config = 0U;
 8005c54:	4601      	mov	r1, r0
 8005c56:	2300      	movs	r3, #0
 8005c58:	f841 3f08 	str.w	r3, [r1, #8]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005c5c:	e744      	b.n	8005ae8 <USBD_StdDevReq+0xac>
    switch (pdev->dev_state)
 8005c5e:	2b03      	cmp	r3, #3
 8005c60:	d004      	beq.n	8005c6c <USBD_StdDevReq+0x230>
      USBD_CtlError(pdev, req);
 8005c62:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 8005c64:	2500      	movs	r5, #0
      USBD_CtlError(pdev, req);
 8005c66:	f7ff fedd 	bl	8005a24 <USBD_CtlError.constprop.0>
      break;
 8005c6a:	e70b      	b.n	8005a84 <USBD_StdDevReq+0x48>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005c6c:	1d01      	adds	r1, r0, #4
 8005c6e:	e73b      	b.n	8005ae8 <USBD_StdDevReq+0xac>
  switch (pdev->dev_state)
 8005c70:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005c74:	3b01      	subs	r3, #1
 8005c76:	2b02      	cmp	r3, #2
 8005c78:	d8f3      	bhi.n	8005c62 <USBD_StdDevReq+0x226>
    if (req->wLength != 0x2U)
 8005c7a:	88cb      	ldrh	r3, [r1, #6]
 8005c7c:	2b02      	cmp	r3, #2
 8005c7e:	f47f af1a 	bne.w	8005ab6 <USBD_StdDevReq+0x7a>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005c82:	2301      	movs	r3, #1
 8005c84:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup != 0U)
 8005c86:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8005c8a:	b10b      	cbz	r3, 8005c90 <USBD_StdDevReq+0x254>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005c8c:	2303      	movs	r3, #3
 8005c8e:	60c3      	str	r3, [r0, #12]
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005c90:	2202      	movs	r2, #2
 8005c92:	f104 010c 	add.w	r1, r4, #12
 8005c96:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 8005c98:	463d      	mov	r5, r7
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005c9a:	f000 f90f 	bl	8005ebc <USBD_CtlSendData>
    break;
 8005c9e:	e6f1      	b.n	8005a84 <USBD_StdDevReq+0x48>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005ca0:	884b      	ldrh	r3, [r1, #2]
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	f47f aeee 	bne.w	8005a84 <USBD_StdDevReq+0x48>
        pdev->dev_remote_wakeup = 0U;
 8005ca8:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005cac:	4620      	mov	r0, r4
 8005cae:	f000 f92f 	bl	8005f10 <USBD_CtlSendStatus>
 8005cb2:	e6e7      	b.n	8005a84 <USBD_StdDevReq+0x48>
  switch (pdev->dev_state)
 8005cb4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005cb8:	3b01      	subs	r3, #1
 8005cba:	2b02      	cmp	r3, #2
 8005cbc:	d8d1      	bhi.n	8005c62 <USBD_StdDevReq+0x226>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005cbe:	884b      	ldrh	r3, [r1, #2]
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	f47f aedf 	bne.w	8005a84 <USBD_StdDevReq+0x48>
        pdev->dev_remote_wakeup = 0U;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	e7ee      	b.n	8005ca8 <USBD_StdDevReq+0x26c>
 8005cca:	bf00      	nop
 8005ccc:	200004cc 	.word	0x200004cc

08005cd0 <USBD_StdItfReq>:
{
 8005cd0:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005cd2:	780b      	ldrb	r3, [r1, #0]
{
 8005cd4:	4604      	mov	r4, r0
 8005cd6:	460e      	mov	r6, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005cd8:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8005cdc:	2a40      	cmp	r2, #64	; 0x40
 8005cde:	d001      	beq.n	8005ce4 <USBD_StdItfReq+0x14>
 8005ce0:	065b      	lsls	r3, r3, #25
 8005ce2:	d416      	bmi.n	8005d12 <USBD_StdItfReq+0x42>
    switch (pdev->dev_state)
 8005ce4:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8005ce8:	3b01      	subs	r3, #1
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	d811      	bhi.n	8005d12 <USBD_StdItfReq+0x42>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005cee:	7933      	ldrb	r3, [r6, #4]
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d80e      	bhi.n	8005d12 <USBD_StdItfReq+0x42>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005cf4:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8005cf8:	4631      	mov	r1, r6
 8005cfa:	4620      	mov	r0, r4
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 8005d00:	88f3      	ldrh	r3, [r6, #6]
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005d02:	4605      	mov	r5, r0
        if ((req->wLength == 0U) && (ret == USBD_OK))
 8005d04:	b91b      	cbnz	r3, 8005d0e <USBD_StdItfReq+0x3e>
 8005d06:	b910      	cbnz	r0, 8005d0e <USBD_StdItfReq+0x3e>
          (void)USBD_CtlSendStatus(pdev);
 8005d08:	4620      	mov	r0, r4
 8005d0a:	f000 f901 	bl	8005f10 <USBD_CtlSendStatus>
}
 8005d0e:	4628      	mov	r0, r5
 8005d10:	bd70      	pop	{r4, r5, r6, pc}
      USBD_CtlError(pdev, req);
 8005d12:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 8005d14:	2500      	movs	r5, #0
      USBD_CtlError(pdev, req);
 8005d16:	f7ff fe85 	bl	8005a24 <USBD_CtlError.constprop.0>
      break;
 8005d1a:	e7f8      	b.n	8005d0e <USBD_StdItfReq+0x3e>

08005d1c <USBD_StdEPReq>:
{
 8005d1c:	b570      	push	{r4, r5, r6, lr}
 8005d1e:	780b      	ldrb	r3, [r1, #0]
 8005d20:	4604      	mov	r4, r0
 8005d22:	460d      	mov	r5, r1
 8005d24:	f003 0360 	and.w	r3, r3, #96	; 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d28:	2b20      	cmp	r3, #32
 8005d2a:	d028      	beq.n	8005d7e <USBD_StdEPReq+0x62>
 8005d2c:	2b40      	cmp	r3, #64	; 0x40
 8005d2e:	d026      	beq.n	8005d7e <USBD_StdEPReq+0x62>
 8005d30:	bb9b      	cbnz	r3, 8005d9a <USBD_StdEPReq+0x7e>
    switch (req->bRequest)
 8005d32:	786b      	ldrb	r3, [r5, #1]
  ep_addr = LOBYTE(req->wIndex);
 8005d34:	888a      	ldrh	r2, [r1, #4]
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	7909      	ldrb	r1, [r1, #4]
    switch (req->bRequest)
 8005d3a:	d03f      	beq.n	8005dbc <USBD_StdEPReq+0xa0>
 8005d3c:	2b03      	cmp	r3, #3
 8005d3e:	d026      	beq.n	8005d8e <USBD_StdEPReq+0x72>
 8005d40:	bb5b      	cbnz	r3, 8005d9a <USBD_StdEPReq+0x7e>
      switch (pdev->dev_state)
 8005d42:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005d46:	2b02      	cmp	r3, #2
 8005d48:	d058      	beq.n	8005dfc <USBD_StdEPReq+0xe0>
 8005d4a:	2b03      	cmp	r3, #3
 8005d4c:	d125      	bne.n	8005d9a <USBD_StdEPReq+0x7e>
        if ((ep_addr & 0x80U) == 0x80U)
 8005d4e:	f001 030f 	and.w	r3, r1, #15
 8005d52:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005d56:	f04f 0214 	mov.w	r2, #20
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005d5a:	fb02 0303 	mla	r3, r2, r3, r0
        if ((ep_addr & 0x80U) == 0x80U)
 8005d5e:	d05e      	beq.n	8005e1e <USBD_StdEPReq+0x102>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005d60:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005d62:	b1d3      	cbz	r3, 8005d9a <USBD_StdEPReq+0x7e>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005d64:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8005d68:	2314      	movs	r3, #20
 8005d6a:	fb05 3303 	mla	r3, r5, r3, r3
 8005d6e:	18c5      	adds	r5, r0, r3
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005d70:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 8005d74:	d15f      	bne.n	8005e36 <USBD_StdEPReq+0x11a>
            pep->status = 0x0001U;
 8005d76:	602b      	str	r3, [r5, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005d78:	2202      	movs	r2, #2
 8005d7a:	4629      	mov	r1, r5
 8005d7c:	e04b      	b.n	8005e16 <USBD_StdEPReq+0xfa>
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005d7e:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8005d82:	4629      	mov	r1, r5
 8005d84:	4620      	mov	r0, r4
 8005d86:	689b      	ldr	r3, [r3, #8]
}
 8005d88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005d8c:	4718      	bx	r3
      switch (pdev->dev_state)
 8005d8e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005d92:	2b02      	cmp	r3, #2
 8005d94:	d029      	beq.n	8005dea <USBD_StdEPReq+0xce>
 8005d96:	2b03      	cmp	r3, #3
 8005d98:	d003      	beq.n	8005da2 <USBD_StdEPReq+0x86>
        USBD_CtlError(pdev, req);
 8005d9a:	4620      	mov	r0, r4
 8005d9c:	f7ff fe42 	bl	8005a24 <USBD_CtlError.constprop.0>
        break;
 8005da0:	e00a      	b.n	8005db8 <USBD_StdEPReq+0x9c>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005da2:	886b      	ldrh	r3, [r5, #2]
 8005da4:	b92b      	cbnz	r3, 8005db2 <USBD_StdEPReq+0x96>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005da6:	064a      	lsls	r2, r1, #25
 8005da8:	d003      	beq.n	8005db2 <USBD_StdEPReq+0x96>
 8005daa:	88eb      	ldrh	r3, [r5, #6]
 8005dac:	b90b      	cbnz	r3, 8005db2 <USBD_StdEPReq+0x96>
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8005dae:	f000 fb3d 	bl	800642c <USBD_LL_StallEP>
        (void)USBD_CtlSendStatus(pdev);
 8005db2:	4620      	mov	r0, r4
 8005db4:	f000 f8ac 	bl	8005f10 <USBD_CtlSendStatus>
}
 8005db8:	2000      	movs	r0, #0
 8005dba:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 8005dbc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	d012      	beq.n	8005dea <USBD_StdEPReq+0xce>
 8005dc4:	2b03      	cmp	r3, #3
 8005dc6:	d1e8      	bne.n	8005d9a <USBD_StdEPReq+0x7e>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005dc8:	886b      	ldrh	r3, [r5, #2]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d1f4      	bne.n	8005db8 <USBD_StdEPReq+0x9c>
          if ((ep_addr & 0x7FU) != 0x00U)
 8005dce:	064e      	lsls	r6, r1, #25
 8005dd0:	d001      	beq.n	8005dd6 <USBD_StdEPReq+0xba>
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005dd2:	f000 fb39 	bl	8006448 <USBD_LL_ClearStallEP>
          (void)USBD_CtlSendStatus(pdev);
 8005dd6:	4620      	mov	r0, r4
 8005dd8:	f000 f89a 	bl	8005f10 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005ddc:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8005de0:	4629      	mov	r1, r5
 8005de2:	4620      	mov	r0, r4
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	4798      	blx	r3
 8005de8:	e7e6      	b.n	8005db8 <USBD_StdEPReq+0x9c>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005dea:	064b      	lsls	r3, r1, #25
 8005dec:	d0d5      	beq.n	8005d9a <USBD_StdEPReq+0x7e>
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8005dee:	f000 fb1d 	bl	800642c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005df2:	2180      	movs	r1, #128	; 0x80
 8005df4:	4620      	mov	r0, r4
 8005df6:	f000 fb19 	bl	800642c <USBD_LL_StallEP>
 8005dfa:	e7dd      	b.n	8005db8 <USBD_StdEPReq+0x9c>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005dfc:	0649      	lsls	r1, r1, #25
 8005dfe:	d1cc      	bne.n	8005d9a <USBD_StdEPReq+0x7e>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005e00:	0613      	lsls	r3, r2, #24
        pep->status = 0x0000U;
 8005e02:	f04f 0300 	mov.w	r3, #0
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005e06:	f04f 0202 	mov.w	r2, #2
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005e0a:	bf4c      	ite	mi
 8005e0c:	f100 0114 	addmi.w	r1, r0, #20
 8005e10:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
        pep->status = 0x0000U;
 8005e14:	600b      	str	r3, [r1, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005e16:	4620      	mov	r0, r4
 8005e18:	f000 f850 	bl	8005ebc <USBD_CtlSendData>
          break;
 8005e1c:	e7cc      	b.n	8005db8 <USBD_StdEPReq+0x9c>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005e1e:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d0b9      	beq.n	8005d9a <USBD_StdEPReq+0x7e>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005e26:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8005e2a:	2314      	movs	r3, #20
 8005e2c:	fb03 0505 	mla	r5, r3, r5, r0
 8005e30:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 8005e34:	e79c      	b.n	8005d70 <USBD_StdEPReq+0x54>
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005e36:	4620      	mov	r0, r4
 8005e38:	f000 fb14 	bl	8006464 <USBD_LL_IsStallEP>
 8005e3c:	b108      	cbz	r0, 8005e42 <USBD_StdEPReq+0x126>
            pep->status = 0x0001U;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e799      	b.n	8005d76 <USBD_StdEPReq+0x5a>
            pep->status = 0x0000U;
 8005e42:	6028      	str	r0, [r5, #0]
 8005e44:	e798      	b.n	8005d78 <USBD_StdEPReq+0x5c>

08005e46 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 8005e46:	780b      	ldrb	r3, [r1, #0]
 8005e48:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 8005e4a:	784b      	ldrb	r3, [r1, #1]
 8005e4c:	7043      	strb	r3, [r0, #1]

  _Byte1 = *(uint8_t *)_pbuff;
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005e4e:	78ca      	ldrb	r2, [r1, #3]
 8005e50:	788b      	ldrb	r3, [r1, #2]
 8005e52:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 8005e56:	8043      	strh	r3, [r0, #2]
 8005e58:	794a      	ldrb	r2, [r1, #5]
 8005e5a:	790b      	ldrb	r3, [r1, #4]
 8005e5c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 8005e60:	8083      	strh	r3, [r0, #4]
 8005e62:	79ca      	ldrb	r2, [r1, #7]
 8005e64:	798b      	ldrb	r3, [r1, #6]
 8005e66:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 8005e6a:	80c3      	strh	r3, [r0, #6]
}
 8005e6c:	4770      	bx	lr

08005e6e <USBD_CtlError>:
{
 8005e6e:	b510      	push	{r4, lr}
 8005e70:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005e72:	2180      	movs	r1, #128	; 0x80
 8005e74:	f000 fada 	bl	800642c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005e78:	2100      	movs	r1, #0
 8005e7a:	4620      	mov	r0, r4
}
 8005e7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 8005e80:	f000 bad4 	b.w	800642c <USBD_LL_StallEP>

08005e84 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005e84:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 8005e86:	b188      	cbz	r0, 8005eac <USBD_GetString+0x28>
 8005e88:	2500      	movs	r5, #0
 8005e8a:	3801      	subs	r0, #1
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 8005e8c:	462b      	mov	r3, r5
 8005e8e:	3501      	adds	r5, #1
 8005e90:	5d44      	ldrb	r4, [r0, r5]
 8005e92:	2c00      	cmp	r4, #0
 8005e94:	d1fa      	bne.n	8005e8c <USBD_GetString+0x8>
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	3301      	adds	r3, #1
 8005e9a:	005b      	lsls	r3, r3, #1
 8005e9c:	8013      	strh	r3, [r2, #0]
  unicode[idx] = *(uint8_t *)len;
 8005e9e:	700b      	strb	r3, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005ea0:	2303      	movs	r3, #3
 8005ea2:	704b      	strb	r3, [r1, #1]
  idx++;
 8005ea4:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 8005ea6:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8005eaa:	b902      	cbnz	r2, 8005eae <USBD_GetString+0x2a>
}
 8005eac:	bd30      	pop	{r4, r5, pc}
    unicode[idx] = *pdesc;
 8005eae:	54ca      	strb	r2, [r1, r3]
    idx++;
 8005eb0:	1c5a      	adds	r2, r3, #1
    idx++;
 8005eb2:	3302      	adds	r3, #2
    unicode[idx] = 0U;
 8005eb4:	b2d2      	uxtb	r2, r2
    idx++;
 8005eb6:	b2db      	uxtb	r3, r3
    unicode[idx] = 0U;
 8005eb8:	548c      	strb	r4, [r1, r2]
    idx++;
 8005eba:	e7f4      	b.n	8005ea6 <USBD_GetString+0x22>

08005ebc <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005ebc:	b510      	push	{r4, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005ebe:	2402      	movs	r4, #2
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length = len;

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005ec0:	4613      	mov	r3, r2
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005ec2:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  pdev->ep_in[0].rem_length = len;
 8005ec6:	e9c0 2206 	strd	r2, r2, [r0, #24]
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005eca:	460a      	mov	r2, r1
 8005ecc:	2100      	movs	r1, #0
 8005ece:	f000 faeb 	bl	80064a8 <USBD_LL_Transmit>

  return USBD_OK;
}
 8005ed2:	2000      	movs	r0, #0
 8005ed4:	bd10      	pop	{r4, pc}

08005ed6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005ed6:	b508      	push	{r3, lr}
 8005ed8:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005eda:	460a      	mov	r2, r1
 8005edc:	2100      	movs	r1, #0
 8005ede:	f000 fae3 	bl	80064a8 <USBD_LL_Transmit>

  return USBD_OK;
}
 8005ee2:	2000      	movs	r0, #0
 8005ee4:	bd08      	pop	{r3, pc}

08005ee6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8005ee6:	b510      	push	{r4, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005ee8:	2403      	movs	r4, #3
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length = len;

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005eea:	4613      	mov	r3, r2
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005eec:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  pdev->ep_out[0].rem_length = len;
 8005ef0:	e9c0 2256 	strd	r2, r2, [r0, #344]	; 0x158
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005ef4:	460a      	mov	r2, r1
 8005ef6:	2100      	movs	r1, #0
 8005ef8:	f000 fae4 	bl	80064c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005efc:	2000      	movs	r0, #0
 8005efe:	bd10      	pop	{r4, pc}

08005f00 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005f00:	b508      	push	{r3, lr}
 8005f02:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005f04:	460a      	mov	r2, r1
 8005f06:	2100      	movs	r1, #0
 8005f08:	f000 fadc 	bl	80064c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005f0c:	2000      	movs	r0, #0
 8005f0e:	bd08      	pop	{r3, pc}

08005f10 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005f10:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005f12:	2304      	movs	r3, #4
 8005f14:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005f18:	2300      	movs	r3, #0
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	f000 fac3 	bl	80064a8 <USBD_LL_Transmit>

  return USBD_OK;
}
 8005f22:	2000      	movs	r0, #0
 8005f24:	bd08      	pop	{r3, pc}

08005f26 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005f26:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005f28:	2305      	movs	r3, #5
 8005f2a:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f2e:	2300      	movs	r3, #0
 8005f30:	461a      	mov	r2, r3
 8005f32:	4619      	mov	r1, r3
 8005f34:	f000 fac6 	bl	80064c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005f38:	2000      	movs	r0, #0
 8005f3a:	bd08      	pop	{r3, pc}

08005f3c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005f3c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005f3e:	2200      	movs	r2, #0
 8005f40:	490e      	ldr	r1, [pc, #56]	; (8005f7c <MX_USB_DEVICE_Init+0x40>)
 8005f42:	480f      	ldr	r0, [pc, #60]	; (8005f80 <MX_USB_DEVICE_Init+0x44>)
 8005f44:	f7ff fc26 	bl	8005794 <USBD_Init>
 8005f48:	b108      	cbz	r0, 8005f4e <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 8005f4a:	f7fb fbf5 	bl	8001738 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005f4e:	490d      	ldr	r1, [pc, #52]	; (8005f84 <MX_USB_DEVICE_Init+0x48>)
 8005f50:	480b      	ldr	r0, [pc, #44]	; (8005f80 <MX_USB_DEVICE_Init+0x44>)
 8005f52:	f7ff fc37 	bl	80057c4 <USBD_RegisterClass>
 8005f56:	b108      	cbz	r0, 8005f5c <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 8005f58:	f7fb fbee 	bl	8001738 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8005f5c:	490a      	ldr	r1, [pc, #40]	; (8005f88 <MX_USB_DEVICE_Init+0x4c>)
 8005f5e:	4808      	ldr	r0, [pc, #32]	; (8005f80 <MX_USB_DEVICE_Init+0x44>)
 8005f60:	f7ff fbd4 	bl	800570c <USBD_CDC_RegisterInterface>
 8005f64:	b108      	cbz	r0, 8005f6a <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 8005f66:	f7fb fbe7 	bl	8001738 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005f6a:	4805      	ldr	r0, [pc, #20]	; (8005f80 <MX_USB_DEVICE_Init+0x44>)
 8005f6c:	f7ff fc3d 	bl	80057ea <USBD_Start>
 8005f70:	b118      	cbz	r0, 8005f7a <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005f72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8005f76:	f7fb bbdf 	b.w	8001738 <Error_Handler>
}
 8005f7a:	bd08      	pop	{r3, pc}
 8005f7c:	20000134 	.word	0x20000134
 8005f80:	20000a60 	.word	0x20000a60
 8005f84:	2000000c 	.word	0x2000000c
 8005f88:	2000011c 	.word	0x2000011c

08005f8c <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8005f8c:	2000      	movs	r0, #0
 8005f8e:	4770      	bx	lr

08005f90 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8005f90:	2000      	movs	r0, #0
 8005f92:	4770      	bx	lr

08005f94 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 8005f94:	2000      	movs	r0, #0
 8005f96:	4770      	bx	lr

08005f98 <CDC_Init_FS>:
{
 8005f98:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005f9a:	4c06      	ldr	r4, [pc, #24]	; (8005fb4 <CDC_Init_FS+0x1c>)
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	4906      	ldr	r1, [pc, #24]	; (8005fb8 <CDC_Init_FS+0x20>)
 8005fa0:	4620      	mov	r0, r4
 8005fa2:	f7ff fbba 	bl	800571a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005fa6:	4905      	ldr	r1, [pc, #20]	; (8005fbc <CDC_Init_FS+0x24>)
 8005fa8:	4620      	mov	r0, r4
 8005faa:	f7ff fbbe 	bl	800572a <USBD_CDC_SetRxBuffer>
}
 8005fae:	2000      	movs	r0, #0
 8005fb0:	bd10      	pop	{r4, pc}
 8005fb2:	bf00      	nop
 8005fb4:	20000a60 	.word	0x20000a60
 8005fb8:	20000f30 	.word	0x20000f30
 8005fbc:	20000d30 	.word	0x20000d30

08005fc0 <cdcAvailable>:
  ret = (rx_in - rx_out) % rx_len;
 8005fc0:	4a05      	ldr	r2, [pc, #20]	; (8005fd8 <cdcAvailable+0x18>)
 8005fc2:	4b06      	ldr	r3, [pc, #24]	; (8005fdc <cdcAvailable+0x1c>)
 8005fc4:	6810      	ldr	r0, [r2, #0]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a05      	ldr	r2, [pc, #20]	; (8005fe0 <cdcAvailable+0x20>)
 8005fca:	1a1b      	subs	r3, r3, r0
 8005fcc:	6812      	ldr	r2, [r2, #0]
 8005fce:	fbb3 f0f2 	udiv	r0, r3, r2
}
 8005fd2:	fb02 3010 	mls	r0, r2, r0, r3
 8005fd6:	4770      	bx	lr
 8005fd8:	200004d4 	.word	0x200004d4
 8005fdc:	200004d0 	.word	0x200004d0
 8005fe0:	20000130 	.word	0x20000130

08005fe4 <cdcRead>:
  ret = rx_buf[rx_out];
 8005fe4:	4908      	ldr	r1, [pc, #32]	; (8006008 <cdcRead+0x24>)
 8005fe6:	4a09      	ldr	r2, [pc, #36]	; (800600c <cdcRead+0x28>)
 8005fe8:	680b      	ldr	r3, [r1, #0]
{
 8005fea:	b510      	push	{r4, lr}
  ret = rx_buf[rx_out];
 8005fec:	5cd0      	ldrb	r0, [r2, r3]
  if (rx_out != rx_in)
 8005fee:	4a08      	ldr	r2, [pc, #32]	; (8006010 <cdcRead+0x2c>)
 8005ff0:	6812      	ldr	r2, [r2, #0]
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d007      	beq.n	8006006 <cdcRead+0x22>
    rx_out = (rx_out + 1) % rx_len;
 8005ff6:	4a07      	ldr	r2, [pc, #28]	; (8006014 <cdcRead+0x30>)
 8005ff8:	3301      	adds	r3, #1
 8005ffa:	6814      	ldr	r4, [r2, #0]
 8005ffc:	fbb3 f2f4 	udiv	r2, r3, r4
 8006000:	fb04 3312 	mls	r3, r4, r2, r3
 8006004:	600b      	str	r3, [r1, #0]
}
 8006006:	bd10      	pop	{r4, pc}
 8006008:	200004d4 	.word	0x200004d4
 800600c:	20001130 	.word	0x20001130
 8006010:	200004d0 	.word	0x200004d0
 8006014:	20000130 	.word	0x20000130

08006018 <cdcDataIn>:
  rx_buf[rx_in] = rx_data;
 8006018:	4908      	ldr	r1, [pc, #32]	; (800603c <cdcDataIn+0x24>)
 800601a:	4a09      	ldr	r2, [pc, #36]	; (8006040 <cdcDataIn+0x28>)
 800601c:	680b      	ldr	r3, [r1, #0]
 800601e:	54d0      	strb	r0, [r2, r3]
  next_rx_in = (rx_in + 1) % rx_len;
 8006020:	3301      	adds	r3, #1
 8006022:	4a08      	ldr	r2, [pc, #32]	; (8006044 <cdcDataIn+0x2c>)
 8006024:	6810      	ldr	r0, [r2, #0]
 8006026:	fbb3 f2f0 	udiv	r2, r3, r0
 800602a:	fb00 3312 	mls	r3, r0, r2, r3
  if (next_rx_in != rx_out)
 800602e:	4a06      	ldr	r2, [pc, #24]	; (8006048 <cdcDataIn+0x30>)
 8006030:	6812      	ldr	r2, [r2, #0]
 8006032:	429a      	cmp	r2, r3
    rx_in = next_rx_in;
 8006034:	bf18      	it	ne
 8006036:	600b      	strne	r3, [r1, #0]
}
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop
 800603c:	200004d0 	.word	0x200004d0
 8006040:	20001130 	.word	0x20001130
 8006044:	20000130 	.word	0x20000130
 8006048:	200004d4 	.word	0x200004d4

0800604c <CDC_Receive_FS>:
{
 800604c:	b570      	push	{r4, r5, r6, lr}
 800604e:	4604      	mov	r4, r0
 8006050:	460e      	mov	r6, r1
  for(int i =0; i<*Len;i++)
 8006052:	2500      	movs	r5, #0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006054:	4601      	mov	r1, r0
 8006056:	4811      	ldr	r0, [pc, #68]	; (800609c <CDC_Receive_FS+0x50>)
 8006058:	f7ff fb67 	bl	800572a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800605c:	480f      	ldr	r0, [pc, #60]	; (800609c <CDC_Receive_FS+0x50>)
 800605e:	f7ff fb82 	bl	8005766 <USBD_CDC_ReceivePacket>
  for(int i =0; i<*Len;i++)
 8006062:	6833      	ldr	r3, [r6, #0]
 8006064:	42ab      	cmp	r3, r5
 8006066:	d810      	bhi.n	800608a <CDC_Receive_FS+0x3e>
  buf_len = (rx_len - cdcAvailable()) - 1;
 8006068:	4b0d      	ldr	r3, [pc, #52]	; (80060a0 <CDC_Receive_FS+0x54>)
 800606a:	6819      	ldr	r1, [r3, #0]
 800606c:	f7ff ffa8 	bl	8005fc0 <cdcAvailable>
 8006070:	3901      	subs	r1, #1
 8006072:	1a09      	subs	r1, r1, r0
  if(buf_len >= USB_FS_MAX_PACKET_SIZE)
 8006074:	293f      	cmp	r1, #63	; 0x3f
 8006076:	d90d      	bls.n	8006094 <CDC_Receive_FS+0x48>
	  USBD_CDC_SetRxBuffer(&hUsbDeviceFS,&Buf[0]);
 8006078:	4621      	mov	r1, r4
 800607a:	4808      	ldr	r0, [pc, #32]	; (800609c <CDC_Receive_FS+0x50>)
 800607c:	f7ff fb55 	bl	800572a <USBD_CDC_SetRxBuffer>
	  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006080:	4806      	ldr	r0, [pc, #24]	; (800609c <CDC_Receive_FS+0x50>)
 8006082:	f7ff fb70 	bl	8005766 <USBD_CDC_ReceivePacket>
}
 8006086:	2000      	movs	r0, #0
 8006088:	bd70      	pop	{r4, r5, r6, pc}
	  cdcDataIn(Buf[i]);
 800608a:	5d60      	ldrb	r0, [r4, r5]
  for(int i =0; i<*Len;i++)
 800608c:	3501      	adds	r5, #1
	  cdcDataIn(Buf[i]);
 800608e:	f7ff ffc3 	bl	8006018 <cdcDataIn>
  for(int i =0; i<*Len;i++)
 8006092:	e7e6      	b.n	8006062 <CDC_Receive_FS+0x16>
	  rx_full = true;
 8006094:	4b03      	ldr	r3, [pc, #12]	; (80060a4 <CDC_Receive_FS+0x58>)
 8006096:	2201      	movs	r2, #1
 8006098:	701a      	strb	r2, [r3, #0]
 800609a:	e7f4      	b.n	8006086 <CDC_Receive_FS+0x3a>
 800609c:	20000a60 	.word	0x20000a60
 80060a0:	20000130 	.word	0x20000130
 80060a4:	200004cd 	.word	0x200004cd

080060a8 <USBD_CDC_SOF>:
{
 80060a8:	b538      	push	{r3, r4, r5, lr}
  if (rx_full == true)
 80060aa:	4d09      	ldr	r5, [pc, #36]	; (80060d0 <USBD_CDC_SOF+0x28>)
{
 80060ac:	4604      	mov	r4, r0
  if (rx_full == true)
 80060ae:	782b      	ldrb	r3, [r5, #0]
 80060b0:	b163      	cbz	r3, 80060cc <USBD_CDC_SOF+0x24>
    buf_len = (rx_len - cdcAvailable()) - 1;
 80060b2:	4b08      	ldr	r3, [pc, #32]	; (80060d4 <USBD_CDC_SOF+0x2c>)
 80060b4:	6819      	ldr	r1, [r3, #0]
 80060b6:	f7ff ff83 	bl	8005fc0 <cdcAvailable>
 80060ba:	3901      	subs	r1, #1
 80060bc:	1a09      	subs	r1, r1, r0
    if (buf_len >= USB_FS_MAX_PACKET_SIZE)
 80060be:	293f      	cmp	r1, #63	; 0x3f
 80060c0:	d904      	bls.n	80060cc <USBD_CDC_SOF+0x24>
      USBD_CDC_ReceivePacket(pdev);
 80060c2:	4620      	mov	r0, r4
 80060c4:	f7ff fb4f 	bl	8005766 <USBD_CDC_ReceivePacket>
      rx_full = false;
 80060c8:	2300      	movs	r3, #0
 80060ca:	702b      	strb	r3, [r5, #0]
}
 80060cc:	2000      	movs	r0, #0
 80060ce:	bd38      	pop	{r3, r4, r5, pc}
 80060d0:	200004cd 	.word	0x200004cd
 80060d4:	20000130 	.word	0x20000130

080060d8 <CDC_Transmit_FS>:
{
 80060d8:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80060da:	4c09      	ldr	r4, [pc, #36]	; (8006100 <CDC_Transmit_FS+0x28>)
{
 80060dc:	460a      	mov	r2, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80060de:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  if (hcdc->TxState != 0){
 80060e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80060e6:	b943      	cbnz	r3, 80060fa <CDC_Transmit_FS+0x22>
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80060e8:	4601      	mov	r1, r0
 80060ea:	4620      	mov	r0, r4
 80060ec:	f7ff fb15 	bl	800571a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80060f0:	4620      	mov	r0, r4
}
 80060f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80060f6:	f7ff bb1e 	b.w	8005736 <USBD_CDC_TransmitPacket>
}
 80060fa:	2001      	movs	r0, #1
 80060fc:	bd10      	pop	{r4, pc}
 80060fe:	bf00      	nop
 8006100:	20000a60 	.word	0x20000a60

08006104 <cdcWrite>:
{
 8006104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006106:	4606      	mov	r6, r0
 8006108:	460c      	mov	r4, r1
  if (cdcIsInit() != true)
 800610a:	f7fa fd05 	bl	8000b18 <cdcIsInit>
 800610e:	b178      	cbz	r0, 8006130 <cdcWrite+0x2c>
  pre_time = millis();
 8006110:	f7fb fb10 	bl	8001734 <millis>
 8006114:	4605      	mov	r5, r0
    ret = CDC_Transmit_FS(p_data, length);
 8006116:	b2a7      	uxth	r7, r4
 8006118:	4639      	mov	r1, r7
 800611a:	4630      	mov	r0, r6
 800611c:	f7ff ffdc 	bl	80060d8 <CDC_Transmit_FS>
    if (ret == USBD_OK)
 8006120:	b138      	cbz	r0, 8006132 <cdcWrite+0x2e>
    else if (ret == USBD_FAIL)
 8006122:	2803      	cmp	r0, #3
 8006124:	d004      	beq.n	8006130 <cdcWrite+0x2c>
    if (millis()-pre_time >= 100)
 8006126:	f7fb fb05 	bl	8001734 <millis>
 800612a:	1b43      	subs	r3, r0, r5
 800612c:	2b63      	cmp	r3, #99	; 0x63
 800612e:	d9f3      	bls.n	8006118 <cdcWrite+0x14>
    return 0;
 8006130:	2400      	movs	r4, #0
}
 8006132:	4620      	mov	r0, r4
 8006134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006138 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006138:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 800613a:	4801      	ldr	r0, [pc, #4]	; (8006140 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 800613c:	800b      	strh	r3, [r1, #0]
}
 800613e:	4770      	bx	lr
 8006140:	20000160 	.word	0x20000160

08006144 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006144:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8006146:	4801      	ldr	r0, [pc, #4]	; (800614c <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8006148:	800b      	strh	r3, [r1, #0]
}
 800614a:	4770      	bx	lr
 800614c:	20000174 	.word	0x20000174

08006150 <USBD_FS_USR_BOSDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8006150:	230c      	movs	r3, #12
  return (uint8_t*)USBD_FS_BOSDesc;
}
 8006152:	4801      	ldr	r0, [pc, #4]	; (8006158 <USBD_FS_USR_BOSDescriptor+0x8>)
  *length = sizeof(USBD_FS_BOSDesc);
 8006154:	800b      	strh	r3, [r1, #0]
}
 8006156:	4770      	bx	lr
 8006158:	20000154 	.word	0x20000154

0800615c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800615c:	2300      	movs	r3, #0
 800615e:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8006160:	1c4d      	adds	r5, r1, #1
 8006162:	461e      	mov	r6, r3
    if (((value >> 28)) < 0xA)
 8006164:	0f04      	lsrs	r4, r0, #28
 8006166:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
    value = value << 4;
 800616a:	ea4f 1000 	mov.w	r0, r0, lsl #4
      pbuf[2 * idx] = (value >> 28) + '0';
 800616e:	bf34      	ite	cc
 8006170:	3430      	addcc	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006172:	3437      	addcs	r4, #55	; 0x37
 8006174:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 8006178:	f805 6013 	strb.w	r6, [r5, r3, lsl #1]
  for (idx = 0; idx < len; idx++)
 800617c:	3301      	adds	r3, #1
 800617e:	b2dc      	uxtb	r4, r3
 8006180:	42a2      	cmp	r2, r4
 8006182:	d8ef      	bhi.n	8006164 <IntToUnicode+0x8>
  }
}
 8006184:	bd70      	pop	{r4, r5, r6, pc}
	...

08006188 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8006188:	231a      	movs	r3, #26
{
 800618a:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800618c:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800618e:	4b09      	ldr	r3, [pc, #36]	; (80061b4 <USBD_FS_SerialStrDescriptor+0x2c>)
 8006190:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006192:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 8006194:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 8006196:	18c0      	adds	r0, r0, r3
 8006198:	d00a      	beq.n	80061b0 <USBD_FS_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800619a:	4b07      	ldr	r3, [pc, #28]	; (80061b8 <USBD_FS_SerialStrDescriptor+0x30>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800619c:	2208      	movs	r2, #8
 800619e:	4907      	ldr	r1, [pc, #28]	; (80061bc <USBD_FS_SerialStrDescriptor+0x34>)
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80061a0:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80061a2:	f7ff ffdb 	bl	800615c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80061a6:	2204      	movs	r2, #4
 80061a8:	4905      	ldr	r1, [pc, #20]	; (80061c0 <USBD_FS_SerialStrDescriptor+0x38>)
 80061aa:	4620      	mov	r0, r4
 80061ac:	f7ff ffd6 	bl	800615c <IntToUnicode>
}
 80061b0:	4804      	ldr	r0, [pc, #16]	; (80061c4 <USBD_FS_SerialStrDescriptor+0x3c>)
 80061b2:	bd10      	pop	{r4, pc}
 80061b4:	1ff0f420 	.word	0x1ff0f420
 80061b8:	1ff0f424 	.word	0x1ff0f424
 80061bc:	2000017a 	.word	0x2000017a
 80061c0:	2000018a 	.word	0x2000018a
 80061c4:	20000178 	.word	0x20000178

080061c8 <USBD_FS_ManufacturerStrDescriptor>:
{
 80061c8:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80061ca:	4c04      	ldr	r4, [pc, #16]	; (80061dc <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 80061cc:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80061ce:	4804      	ldr	r0, [pc, #16]	; (80061e0 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 80061d0:	4621      	mov	r1, r4
 80061d2:	f7ff fe57 	bl	8005e84 <USBD_GetString>
}
 80061d6:	4620      	mov	r0, r4
 80061d8:	bd10      	pop	{r4, pc}
 80061da:	bf00      	nop
 80061dc:	20001330 	.word	0x20001330
 80061e0:	08009d0b 	.word	0x08009d0b

080061e4 <USBD_FS_ProductStrDescriptor>:
{
 80061e4:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80061e6:	4c04      	ldr	r4, [pc, #16]	; (80061f8 <USBD_FS_ProductStrDescriptor+0x14>)
{
 80061e8:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80061ea:	4804      	ldr	r0, [pc, #16]	; (80061fc <USBD_FS_ProductStrDescriptor+0x18>)
 80061ec:	4621      	mov	r1, r4
 80061ee:	f7ff fe49 	bl	8005e84 <USBD_GetString>
}
 80061f2:	4620      	mov	r0, r4
 80061f4:	bd10      	pop	{r4, pc}
 80061f6:	bf00      	nop
 80061f8:	20001330 	.word	0x20001330
 80061fc:	08009d1e 	.word	0x08009d1e

08006200 <USBD_FS_ConfigStrDescriptor>:
{
 8006200:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006202:	4c04      	ldr	r4, [pc, #16]	; (8006214 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 8006204:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006206:	4804      	ldr	r0, [pc, #16]	; (8006218 <USBD_FS_ConfigStrDescriptor+0x18>)
 8006208:	4621      	mov	r1, r4
 800620a:	f7ff fe3b 	bl	8005e84 <USBD_GetString>
}
 800620e:	4620      	mov	r0, r4
 8006210:	bd10      	pop	{r4, pc}
 8006212:	bf00      	nop
 8006214:	20001330 	.word	0x20001330
 8006218:	08009d34 	.word	0x08009d34

0800621c <USBD_FS_InterfaceStrDescriptor>:
{
 800621c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800621e:	4c04      	ldr	r4, [pc, #16]	; (8006230 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 8006220:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006222:	4804      	ldr	r0, [pc, #16]	; (8006234 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8006224:	4621      	mov	r1, r4
 8006226:	f7ff fe2d 	bl	8005e84 <USBD_GetString>
}
 800622a:	4620      	mov	r0, r4
 800622c:	bd10      	pop	{r4, pc}
 800622e:	bf00      	nop
 8006230:	20001330 	.word	0x20001330
 8006234:	08009d3f 	.word	0x08009d3f

08006238 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006238:	b530      	push	{r4, r5, lr}
 800623a:	b089      	sub	sp, #36	; 0x24
 800623c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800623e:	2214      	movs	r2, #20
 8006240:	2100      	movs	r1, #0
 8006242:	a803      	add	r0, sp, #12
 8006244:	f000 f9f4 	bl	8006630 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8006248:	6823      	ldr	r3, [r4, #0]
 800624a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800624e:	d132      	bne.n	80062b6 <HAL_PCD_MspInit+0x7e>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006250:	4c1a      	ldr	r4, [pc, #104]	; (80062bc <HAL_PCD_MspInit+0x84>)
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006252:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006256:	2500      	movs	r5, #0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006258:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800625a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800625c:	4818      	ldr	r0, [pc, #96]	; (80062c0 <HAL_PCD_MspInit+0x88>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800625e:	f043 0301 	orr.w	r3, r3, #1
 8006262:	6323      	str	r3, [r4, #48]	; 0x30
 8006264:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006266:	f003 0301 	and.w	r3, r3, #1
 800626a:	9300      	str	r3, [sp, #0]
 800626c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800626e:	2302      	movs	r3, #2
 8006270:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006274:	2303      	movs	r3, #3
 8006276:	e9cd 5305 	strd	r5, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800627a:	230a      	movs	r3, #10
 800627c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800627e:	f7fc fb51 	bl	8002924 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006282:	6b63      	ldr	r3, [r4, #52]	; 0x34

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006284:	2043      	movs	r0, #67	; 0x43
 8006286:	462a      	mov	r2, r5
 8006288:	4629      	mov	r1, r5
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800628a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800628e:	6363      	str	r3, [r4, #52]	; 0x34
 8006290:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006296:	9301      	str	r3, [sp, #4]
 8006298:	9b01      	ldr	r3, [sp, #4]
 800629a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800629c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80062a0:	6463      	str	r3, [r4, #68]	; 0x44
 80062a2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80062a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062a8:	9302      	str	r3, [sp, #8]
 80062aa:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80062ac:	f7fb fee0 	bl	8002070 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80062b0:	2043      	movs	r0, #67	; 0x43
 80062b2:	f7fb ff0f 	bl	80020d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80062b6:	b009      	add	sp, #36	; 0x24
 80062b8:	bd30      	pop	{r4, r5, pc}
 80062ba:	bf00      	nop
 80062bc:	40023800 	.word	0x40023800
 80062c0:	40020000 	.word	0x40020000

080062c4 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80062c4:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 80062c8:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 80062cc:	f7ff ba9e 	b.w	800580c <USBD_LL_SetupStage>

080062d0 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80062d0:	231c      	movs	r3, #28
 80062d2:	fb03 0301 	mla	r3, r3, r1, r0
 80062d6:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 80062da:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80062de:	f7ff bac5 	b.w	800586c <USBD_LL_DataOutStage>

080062e2 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80062e2:	231c      	movs	r3, #28
 80062e4:	fb03 0301 	mla	r3, r3, r1, r0
 80062e8:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 80062ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80062ee:	f7ff baef 	b.w	80058d0 <USBD_LL_DataInStage>

080062f2 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80062f2:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 80062f6:	f7ff bb77 	b.w	80059e8 <USBD_LL_SOF>

080062fa <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80062fa:	68c1      	ldr	r1, [r0, #12]
{
 80062fc:	b510      	push	{r4, lr}
 80062fe:	4604      	mov	r4, r0
  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006300:	b121      	cbz	r1, 800630c <HAL_PCD_ResetCallback+0x12>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006302:	2902      	cmp	r1, #2
 8006304:	d001      	beq.n	800630a <HAL_PCD_ResetCallback+0x10>
  {
    speed = USBD_SPEED_FULL;
  }
  else
  {
    Error_Handler();
 8006306:	f7fb fa17 	bl	8001738 <Error_Handler>
    speed = USBD_SPEED_FULL;
 800630a:	2101      	movs	r1, #1
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800630c:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
 8006310:	f7ff fb54 	bl	80059bc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006314:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
}
 8006318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800631c:	f7ff bb26 	b.w	800596c <USBD_LL_Reset>

08006320 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006320:	b510      	push	{r4, lr}
 8006322:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006324:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8006328:	f7ff fb4b 	bl	80059c2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800632c:	6822      	ldr	r2, [r4, #0]
 800632e:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8006332:	f043 0301 	orr.w	r3, r3, #1
 8006336:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800633a:	6a23      	ldr	r3, [r4, #32]
 800633c:	b123      	cbz	r3, 8006348 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800633e:	4a03      	ldr	r2, [pc, #12]	; (800634c <HAL_PCD_SuspendCallback+0x2c>)
 8006340:	6913      	ldr	r3, [r2, #16]
 8006342:	f043 0306 	orr.w	r3, r3, #6
 8006346:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006348:	bd10      	pop	{r4, pc}
 800634a:	bf00      	nop
 800634c:	e000ed00 	.word	0xe000ed00

08006350 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006350:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8006354:	f7ff bb3e 	b.w	80059d4 <USBD_LL_Resume>

08006358 <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006358:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 800635c:	f7ff bb52 	b.w	8005a04 <USBD_LL_IsoOUTIncomplete>

08006360 <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006360:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8006364:	f7ff bb4c 	b.w	8005a00 <USBD_LL_IsoINIncomplete>

08006368 <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006368:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 800636c:	f7ff bb4c 	b.w	8005a08 <USBD_LL_DevConnected>

08006370 <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006370:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8006374:	f7ff bb4a 	b.w	8005a0c <USBD_LL_DevDisconnected>

08006378 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006378:	b508      	push	{r3, lr}
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800637a:	7803      	ldrb	r3, [r0, #0]
{
 800637c:	4602      	mov	r2, r0
  if (pdev->id == DEVICE_FS) {
 800637e:	bb2b      	cbnz	r3, 80063cc <USBD_LL_Init+0x54>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006380:	4813      	ldr	r0, [pc, #76]	; (80063d0 <USBD_LL_Init+0x58>)
  pdev->pData = &hpcd_USB_OTG_FS;

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8006382:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
  hpcd_USB_OTG_FS.pData = pdev;
 8006386:	f8c0 2400 	str.w	r2, [r0, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 800638a:	f8c2 02c4 	str.w	r0, [r2, #708]	; 0x2c4
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800638e:	2206      	movs	r2, #6
 8006390:	e9c0 1200 	strd	r1, r2, [r0]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006394:	2202      	movs	r2, #2
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006396:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800639a:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800639e:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80063a2:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80063a6:	f7fc fc53 	bl	8002c50 <HAL_PCD_Init>
 80063aa:	b108      	cbz	r0, 80063b0 <USBD_LL_Init+0x38>
  {
    Error_Handler( );
 80063ac:	f7fb f9c4 	bl	8001738 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80063b0:	2180      	movs	r1, #128	; 0x80
 80063b2:	4807      	ldr	r0, [pc, #28]	; (80063d0 <USBD_LL_Init+0x58>)
 80063b4:	f7fd f90f 	bl	80035d6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80063b8:	2240      	movs	r2, #64	; 0x40
 80063ba:	2100      	movs	r1, #0
 80063bc:	4804      	ldr	r0, [pc, #16]	; (80063d0 <USBD_LL_Init+0x58>)
 80063be:	f7fd f8ea 	bl	8003596 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80063c2:	2280      	movs	r2, #128	; 0x80
 80063c4:	2101      	movs	r1, #1
 80063c6:	4802      	ldr	r0, [pc, #8]	; (80063d0 <USBD_LL_Init+0x58>)
 80063c8:	f7fd f8e5 	bl	8003596 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
}
 80063cc:	2000      	movs	r0, #0
 80063ce:	bd08      	pop	{r3, pc}
 80063d0:	20001530 	.word	0x20001530

080063d4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80063d4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 80063d6:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80063da:	f7fc fcc2 	bl	8002d62 <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 80063de:	2803      	cmp	r0, #3
 80063e0:	bf96      	itet	ls
 80063e2:	4b02      	ldrls	r3, [pc, #8]	; (80063ec <USBD_LL_Start+0x18>)
  hal_status = HAL_PCD_Start(pdev->pData);
 80063e4:	2003      	movhi	r0, #3
 80063e6:	5c18      	ldrbls	r0, [r3, r0]
}
 80063e8:	bd08      	pop	{r3, pc}
 80063ea:	bf00      	nop
 80063ec:	08009d4d 	.word	0x08009d4d

080063f0 <USBD_LL_OpenEP>:
{
 80063f0:	b510      	push	{r4, lr}
 80063f2:	4614      	mov	r4, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80063f4:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 80063f8:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80063fa:	4623      	mov	r3, r4
 80063fc:	f7fc ffaa 	bl	8003354 <HAL_PCD_EP_Open>
  switch (hal_status)
 8006400:	2803      	cmp	r0, #3
 8006402:	bf96      	itet	ls
 8006404:	4b01      	ldrls	r3, [pc, #4]	; (800640c <USBD_LL_OpenEP+0x1c>)
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006406:	2003      	movhi	r0, #3
 8006408:	5c18      	ldrbls	r0, [r3, r0]
}
 800640a:	bd10      	pop	{r4, pc}
 800640c:	08009d4d 	.word	0x08009d4d

08006410 <USBD_LL_CloseEP>:
{
 8006410:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006412:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006416:	f7fc ffd5 	bl	80033c4 <HAL_PCD_EP_Close>
  switch (hal_status)
 800641a:	2803      	cmp	r0, #3
 800641c:	bf96      	itet	ls
 800641e:	4b02      	ldrls	r3, [pc, #8]	; (8006428 <USBD_LL_CloseEP+0x18>)
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006420:	2003      	movhi	r0, #3
 8006422:	5c18      	ldrbls	r0, [r3, r0]
}
 8006424:	bd08      	pop	{r3, pc}
 8006426:	bf00      	nop
 8006428:	08009d4d 	.word	0x08009d4d

0800642c <USBD_LL_StallEP>:
{
 800642c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800642e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006432:	f7fd f842 	bl	80034ba <HAL_PCD_EP_SetStall>
  switch (hal_status)
 8006436:	2803      	cmp	r0, #3
 8006438:	bf96      	itet	ls
 800643a:	4b02      	ldrls	r3, [pc, #8]	; (8006444 <USBD_LL_StallEP+0x18>)
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800643c:	2003      	movhi	r0, #3
 800643e:	5c18      	ldrbls	r0, [r3, r0]
}
 8006440:	bd08      	pop	{r3, pc}
 8006442:	bf00      	nop
 8006444:	08009d4d 	.word	0x08009d4d

08006448 <USBD_LL_ClearStallEP>:
{
 8006448:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800644a:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800644e:	f7fd f86c 	bl	800352a <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 8006452:	2803      	cmp	r0, #3
 8006454:	bf96      	itet	ls
 8006456:	4b02      	ldrls	r3, [pc, #8]	; (8006460 <USBD_LL_ClearStallEP+0x18>)
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006458:	2003      	movhi	r0, #3
 800645a:	5c18      	ldrbls	r0, [r3, r0]
}
 800645c:	bd08      	pop	{r3, pc}
 800645e:	bf00      	nop
 8006460:	08009d4d 	.word	0x08009d4d

08006464 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 8006464:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006468:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80)
 800646c:	f04f 021c 	mov.w	r2, #28
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006470:	bf17      	itett	ne
 8006472:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006476:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800647a:	fb02 3101 	mlane	r1, r2, r1, r3
 800647e:	f891 003e 	ldrbne.w	r0, [r1, #62]	; 0x3e
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006482:	bf08      	it	eq
 8006484:	f891 01fe 	ldrbeq.w	r0, [r1, #510]	; 0x1fe
}
 8006488:	4770      	bx	lr
	...

0800648c <USBD_LL_SetUSBAddress>:
{
 800648c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800648e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006492:	f7fc ff4b 	bl	800332c <HAL_PCD_SetAddress>
  switch (hal_status)
 8006496:	2803      	cmp	r0, #3
 8006498:	bf96      	itet	ls
 800649a:	4b02      	ldrls	r3, [pc, #8]	; (80064a4 <USBD_LL_SetUSBAddress+0x18>)
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800649c:	2003      	movhi	r0, #3
 800649e:	5c18      	ldrbls	r0, [r3, r0]
}
 80064a0:	bd08      	pop	{r3, pc}
 80064a2:	bf00      	nop
 80064a4:	08009d4d 	.word	0x08009d4d

080064a8 <USBD_LL_Transmit>:
{
 80064a8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80064aa:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80064ae:	f7fc ffe4 	bl	800347a <HAL_PCD_EP_Transmit>
  switch (hal_status)
 80064b2:	2803      	cmp	r0, #3
 80064b4:	bf96      	itet	ls
 80064b6:	4b02      	ldrls	r3, [pc, #8]	; (80064c0 <USBD_LL_Transmit+0x18>)
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80064b8:	2003      	movhi	r0, #3
 80064ba:	5c18      	ldrbls	r0, [r3, r0]
}
 80064bc:	bd08      	pop	{r3, pc}
 80064be:	bf00      	nop
 80064c0:	08009d4d 	.word	0x08009d4d

080064c4 <USBD_LL_PrepareReceive>:
{
 80064c4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80064c6:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80064ca:	f7fc ffaa 	bl	8003422 <HAL_PCD_EP_Receive>
  switch (hal_status)
 80064ce:	2803      	cmp	r0, #3
 80064d0:	bf96      	itet	ls
 80064d2:	4b02      	ldrls	r3, [pc, #8]	; (80064dc <USBD_LL_PrepareReceive+0x18>)
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80064d4:	2003      	movhi	r0, #3
 80064d6:	5c18      	ldrbls	r0, [r3, r0]
}
 80064d8:	bd08      	pop	{r3, pc}
 80064da:	bf00      	nop
 80064dc:	08009d4d 	.word	0x08009d4d

080064e0 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80064e0:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80064e4:	f7fc bfc1 	b.w	800346a <HAL_PCD_EP_GetRxCount>

080064e8 <HAL_PCDEx_LPM_Callback>:
{
 80064e8:	b510      	push	{r4, lr}
 80064ea:	4604      	mov	r4, r0
  switch (msg)
 80064ec:	b111      	cbz	r1, 80064f4 <HAL_PCDEx_LPM_Callback+0xc>
 80064ee:	2901      	cmp	r1, #1
 80064f0:	d016      	beq.n	8006520 <HAL_PCDEx_LPM_Callback+0x38>
}
 80064f2:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 80064f4:	6a03      	ldr	r3, [r0, #32]
 80064f6:	b133      	cbz	r3, 8006506 <HAL_PCDEx_LPM_Callback+0x1e>
  SystemClock_Config();
 80064f8:	f7fb f8b8 	bl	800166c <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80064fc:	4a12      	ldr	r2, [pc, #72]	; (8006548 <HAL_PCDEx_LPM_Callback+0x60>)
 80064fe:	6913      	ldr	r3, [r2, #16]
 8006500:	f023 0306 	bic.w	r3, r3, #6
 8006504:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8006506:	6822      	ldr	r2, [r4, #0]
    USBD_LL_Resume(hpcd->pData);
 8006508:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800650c:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8006510:	f023 0301 	bic.w	r3, r3, #1
}
 8006514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8006518:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Resume(hpcd->pData);
 800651c:	f7ff ba5a 	b.w	80059d4 <USBD_LL_Resume>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006520:	6802      	ldr	r2, [r0, #0]
    USBD_LL_Suspend(hpcd->pData);
 8006522:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006526:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 800652a:	f043 0301 	orr.w	r3, r3, #1
 800652e:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Suspend(hpcd->pData);
 8006532:	f7ff fa46 	bl	80059c2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8006536:	6a23      	ldr	r3, [r4, #32]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d0da      	beq.n	80064f2 <HAL_PCDEx_LPM_Callback+0xa>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800653c:	4a02      	ldr	r2, [pc, #8]	; (8006548 <HAL_PCDEx_LPM_Callback+0x60>)
 800653e:	6913      	ldr	r3, [r2, #16]
 8006540:	f043 0306 	orr.w	r3, r3, #6
 8006544:	6113      	str	r3, [r2, #16]
}
 8006546:	e7d4      	b.n	80064f2 <HAL_PCDEx_LPM_Callback+0xa>
 8006548:	e000ed00 	.word	0xe000ed00

0800654c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800654c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006584 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006550:	480d      	ldr	r0, [pc, #52]	; (8006588 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006552:	490e      	ldr	r1, [pc, #56]	; (800658c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006554:	4a0e      	ldr	r2, [pc, #56]	; (8006590 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006556:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006558:	e002      	b.n	8006560 <LoopCopyDataInit>

0800655a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800655a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800655c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800655e:	3304      	adds	r3, #4

08006560 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006560:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006562:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006564:	d3f9      	bcc.n	800655a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006566:	4a0b      	ldr	r2, [pc, #44]	; (8006594 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006568:	4c0b      	ldr	r4, [pc, #44]	; (8006598 <LoopFillZerobss+0x26>)
  movs r3, #0
 800656a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800656c:	e001      	b.n	8006572 <LoopFillZerobss>

0800656e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800656e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006570:	3204      	adds	r2, #4

08006572 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006572:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006574:	d3fb      	bcc.n	800656e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006576:	f7fa fac5 	bl	8000b04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800657a:	f000 f817 	bl	80065ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800657e:	f7fb f8dd 	bl	800173c <main>
  bx  lr    
 8006582:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006584:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8006588:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800658c:	20000368 	.word	0x20000368
  ldr r2, =_sidata
 8006590:	0800a19c 	.word	0x0800a19c
  ldr r2, =_sbss
 8006594:	20000368 	.word	0x20000368
  ldr r4, =_ebss
 8006598:	20001944 	.word	0x20001944

0800659c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800659c:	e7fe      	b.n	800659c <ADC_IRQHandler>
	...

080065a0 <__errno>:
 80065a0:	4b01      	ldr	r3, [pc, #4]	; (80065a8 <__errno+0x8>)
 80065a2:	6818      	ldr	r0, [r3, #0]
 80065a4:	4770      	bx	lr
 80065a6:	bf00      	nop
 80065a8:	20000194 	.word	0x20000194

080065ac <__libc_init_array>:
 80065ac:	b570      	push	{r4, r5, r6, lr}
 80065ae:	4d0d      	ldr	r5, [pc, #52]	; (80065e4 <__libc_init_array+0x38>)
 80065b0:	4c0d      	ldr	r4, [pc, #52]	; (80065e8 <__libc_init_array+0x3c>)
 80065b2:	1b64      	subs	r4, r4, r5
 80065b4:	10a4      	asrs	r4, r4, #2
 80065b6:	2600      	movs	r6, #0
 80065b8:	42a6      	cmp	r6, r4
 80065ba:	d109      	bne.n	80065d0 <__libc_init_array+0x24>
 80065bc:	4d0b      	ldr	r5, [pc, #44]	; (80065ec <__libc_init_array+0x40>)
 80065be:	4c0c      	ldr	r4, [pc, #48]	; (80065f0 <__libc_init_array+0x44>)
 80065c0:	f003 fa2a 	bl	8009a18 <_init>
 80065c4:	1b64      	subs	r4, r4, r5
 80065c6:	10a4      	asrs	r4, r4, #2
 80065c8:	2600      	movs	r6, #0
 80065ca:	42a6      	cmp	r6, r4
 80065cc:	d105      	bne.n	80065da <__libc_init_array+0x2e>
 80065ce:	bd70      	pop	{r4, r5, r6, pc}
 80065d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80065d4:	4798      	blx	r3
 80065d6:	3601      	adds	r6, #1
 80065d8:	e7ee      	b.n	80065b8 <__libc_init_array+0xc>
 80065da:	f855 3b04 	ldr.w	r3, [r5], #4
 80065de:	4798      	blx	r3
 80065e0:	3601      	adds	r6, #1
 80065e2:	e7f2      	b.n	80065ca <__libc_init_array+0x1e>
 80065e4:	0800a194 	.word	0x0800a194
 80065e8:	0800a194 	.word	0x0800a194
 80065ec:	0800a194 	.word	0x0800a194
 80065f0:	0800a198 	.word	0x0800a198

080065f4 <malloc>:
 80065f4:	4b02      	ldr	r3, [pc, #8]	; (8006600 <malloc+0xc>)
 80065f6:	4601      	mov	r1, r0
 80065f8:	6818      	ldr	r0, [r3, #0]
 80065fa:	f000 b871 	b.w	80066e0 <_malloc_r>
 80065fe:	bf00      	nop
 8006600:	20000194 	.word	0x20000194

08006604 <free>:
 8006604:	4b02      	ldr	r3, [pc, #8]	; (8006610 <free+0xc>)
 8006606:	4601      	mov	r1, r0
 8006608:	6818      	ldr	r0, [r3, #0]
 800660a:	f000 b819 	b.w	8006640 <_free_r>
 800660e:	bf00      	nop
 8006610:	20000194 	.word	0x20000194

08006614 <memcpy>:
 8006614:	440a      	add	r2, r1
 8006616:	4291      	cmp	r1, r2
 8006618:	f100 33ff 	add.w	r3, r0, #4294967295
 800661c:	d100      	bne.n	8006620 <memcpy+0xc>
 800661e:	4770      	bx	lr
 8006620:	b510      	push	{r4, lr}
 8006622:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006626:	f803 4f01 	strb.w	r4, [r3, #1]!
 800662a:	4291      	cmp	r1, r2
 800662c:	d1f9      	bne.n	8006622 <memcpy+0xe>
 800662e:	bd10      	pop	{r4, pc}

08006630 <memset>:
 8006630:	4402      	add	r2, r0
 8006632:	4603      	mov	r3, r0
 8006634:	4293      	cmp	r3, r2
 8006636:	d100      	bne.n	800663a <memset+0xa>
 8006638:	4770      	bx	lr
 800663a:	f803 1b01 	strb.w	r1, [r3], #1
 800663e:	e7f9      	b.n	8006634 <memset+0x4>

08006640 <_free_r>:
 8006640:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006642:	2900      	cmp	r1, #0
 8006644:	d048      	beq.n	80066d8 <_free_r+0x98>
 8006646:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800664a:	9001      	str	r0, [sp, #4]
 800664c:	2b00      	cmp	r3, #0
 800664e:	f1a1 0404 	sub.w	r4, r1, #4
 8006652:	bfb8      	it	lt
 8006654:	18e4      	addlt	r4, r4, r3
 8006656:	f001 fedb 	bl	8008410 <__malloc_lock>
 800665a:	4a20      	ldr	r2, [pc, #128]	; (80066dc <_free_r+0x9c>)
 800665c:	9801      	ldr	r0, [sp, #4]
 800665e:	6813      	ldr	r3, [r2, #0]
 8006660:	4615      	mov	r5, r2
 8006662:	b933      	cbnz	r3, 8006672 <_free_r+0x32>
 8006664:	6063      	str	r3, [r4, #4]
 8006666:	6014      	str	r4, [r2, #0]
 8006668:	b003      	add	sp, #12
 800666a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800666e:	f001 bed5 	b.w	800841c <__malloc_unlock>
 8006672:	42a3      	cmp	r3, r4
 8006674:	d90b      	bls.n	800668e <_free_r+0x4e>
 8006676:	6821      	ldr	r1, [r4, #0]
 8006678:	1862      	adds	r2, r4, r1
 800667a:	4293      	cmp	r3, r2
 800667c:	bf04      	itt	eq
 800667e:	681a      	ldreq	r2, [r3, #0]
 8006680:	685b      	ldreq	r3, [r3, #4]
 8006682:	6063      	str	r3, [r4, #4]
 8006684:	bf04      	itt	eq
 8006686:	1852      	addeq	r2, r2, r1
 8006688:	6022      	streq	r2, [r4, #0]
 800668a:	602c      	str	r4, [r5, #0]
 800668c:	e7ec      	b.n	8006668 <_free_r+0x28>
 800668e:	461a      	mov	r2, r3
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	b10b      	cbz	r3, 8006698 <_free_r+0x58>
 8006694:	42a3      	cmp	r3, r4
 8006696:	d9fa      	bls.n	800668e <_free_r+0x4e>
 8006698:	6811      	ldr	r1, [r2, #0]
 800669a:	1855      	adds	r5, r2, r1
 800669c:	42a5      	cmp	r5, r4
 800669e:	d10b      	bne.n	80066b8 <_free_r+0x78>
 80066a0:	6824      	ldr	r4, [r4, #0]
 80066a2:	4421      	add	r1, r4
 80066a4:	1854      	adds	r4, r2, r1
 80066a6:	42a3      	cmp	r3, r4
 80066a8:	6011      	str	r1, [r2, #0]
 80066aa:	d1dd      	bne.n	8006668 <_free_r+0x28>
 80066ac:	681c      	ldr	r4, [r3, #0]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	6053      	str	r3, [r2, #4]
 80066b2:	4421      	add	r1, r4
 80066b4:	6011      	str	r1, [r2, #0]
 80066b6:	e7d7      	b.n	8006668 <_free_r+0x28>
 80066b8:	d902      	bls.n	80066c0 <_free_r+0x80>
 80066ba:	230c      	movs	r3, #12
 80066bc:	6003      	str	r3, [r0, #0]
 80066be:	e7d3      	b.n	8006668 <_free_r+0x28>
 80066c0:	6825      	ldr	r5, [r4, #0]
 80066c2:	1961      	adds	r1, r4, r5
 80066c4:	428b      	cmp	r3, r1
 80066c6:	bf04      	itt	eq
 80066c8:	6819      	ldreq	r1, [r3, #0]
 80066ca:	685b      	ldreq	r3, [r3, #4]
 80066cc:	6063      	str	r3, [r4, #4]
 80066ce:	bf04      	itt	eq
 80066d0:	1949      	addeq	r1, r1, r5
 80066d2:	6021      	streq	r1, [r4, #0]
 80066d4:	6054      	str	r4, [r2, #4]
 80066d6:	e7c7      	b.n	8006668 <_free_r+0x28>
 80066d8:	b003      	add	sp, #12
 80066da:	bd30      	pop	{r4, r5, pc}
 80066dc:	200004d8 	.word	0x200004d8

080066e0 <_malloc_r>:
 80066e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066e2:	1ccd      	adds	r5, r1, #3
 80066e4:	f025 0503 	bic.w	r5, r5, #3
 80066e8:	3508      	adds	r5, #8
 80066ea:	2d0c      	cmp	r5, #12
 80066ec:	bf38      	it	cc
 80066ee:	250c      	movcc	r5, #12
 80066f0:	2d00      	cmp	r5, #0
 80066f2:	4606      	mov	r6, r0
 80066f4:	db01      	blt.n	80066fa <_malloc_r+0x1a>
 80066f6:	42a9      	cmp	r1, r5
 80066f8:	d903      	bls.n	8006702 <_malloc_r+0x22>
 80066fa:	230c      	movs	r3, #12
 80066fc:	6033      	str	r3, [r6, #0]
 80066fe:	2000      	movs	r0, #0
 8006700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006702:	f001 fe85 	bl	8008410 <__malloc_lock>
 8006706:	4921      	ldr	r1, [pc, #132]	; (800678c <_malloc_r+0xac>)
 8006708:	680a      	ldr	r2, [r1, #0]
 800670a:	4614      	mov	r4, r2
 800670c:	b99c      	cbnz	r4, 8006736 <_malloc_r+0x56>
 800670e:	4f20      	ldr	r7, [pc, #128]	; (8006790 <_malloc_r+0xb0>)
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	b923      	cbnz	r3, 800671e <_malloc_r+0x3e>
 8006714:	4621      	mov	r1, r4
 8006716:	4630      	mov	r0, r6
 8006718:	f000 f8e0 	bl	80068dc <_sbrk_r>
 800671c:	6038      	str	r0, [r7, #0]
 800671e:	4629      	mov	r1, r5
 8006720:	4630      	mov	r0, r6
 8006722:	f000 f8db 	bl	80068dc <_sbrk_r>
 8006726:	1c43      	adds	r3, r0, #1
 8006728:	d123      	bne.n	8006772 <_malloc_r+0x92>
 800672a:	230c      	movs	r3, #12
 800672c:	6033      	str	r3, [r6, #0]
 800672e:	4630      	mov	r0, r6
 8006730:	f001 fe74 	bl	800841c <__malloc_unlock>
 8006734:	e7e3      	b.n	80066fe <_malloc_r+0x1e>
 8006736:	6823      	ldr	r3, [r4, #0]
 8006738:	1b5b      	subs	r3, r3, r5
 800673a:	d417      	bmi.n	800676c <_malloc_r+0x8c>
 800673c:	2b0b      	cmp	r3, #11
 800673e:	d903      	bls.n	8006748 <_malloc_r+0x68>
 8006740:	6023      	str	r3, [r4, #0]
 8006742:	441c      	add	r4, r3
 8006744:	6025      	str	r5, [r4, #0]
 8006746:	e004      	b.n	8006752 <_malloc_r+0x72>
 8006748:	6863      	ldr	r3, [r4, #4]
 800674a:	42a2      	cmp	r2, r4
 800674c:	bf0c      	ite	eq
 800674e:	600b      	streq	r3, [r1, #0]
 8006750:	6053      	strne	r3, [r2, #4]
 8006752:	4630      	mov	r0, r6
 8006754:	f001 fe62 	bl	800841c <__malloc_unlock>
 8006758:	f104 000b 	add.w	r0, r4, #11
 800675c:	1d23      	adds	r3, r4, #4
 800675e:	f020 0007 	bic.w	r0, r0, #7
 8006762:	1ac2      	subs	r2, r0, r3
 8006764:	d0cc      	beq.n	8006700 <_malloc_r+0x20>
 8006766:	1a1b      	subs	r3, r3, r0
 8006768:	50a3      	str	r3, [r4, r2]
 800676a:	e7c9      	b.n	8006700 <_malloc_r+0x20>
 800676c:	4622      	mov	r2, r4
 800676e:	6864      	ldr	r4, [r4, #4]
 8006770:	e7cc      	b.n	800670c <_malloc_r+0x2c>
 8006772:	1cc4      	adds	r4, r0, #3
 8006774:	f024 0403 	bic.w	r4, r4, #3
 8006778:	42a0      	cmp	r0, r4
 800677a:	d0e3      	beq.n	8006744 <_malloc_r+0x64>
 800677c:	1a21      	subs	r1, r4, r0
 800677e:	4630      	mov	r0, r6
 8006780:	f000 f8ac 	bl	80068dc <_sbrk_r>
 8006784:	3001      	adds	r0, #1
 8006786:	d1dd      	bne.n	8006744 <_malloc_r+0x64>
 8006788:	e7cf      	b.n	800672a <_malloc_r+0x4a>
 800678a:	bf00      	nop
 800678c:	200004d8 	.word	0x200004d8
 8006790:	200004dc 	.word	0x200004dc

08006794 <iprintf>:
 8006794:	b40f      	push	{r0, r1, r2, r3}
 8006796:	4b0a      	ldr	r3, [pc, #40]	; (80067c0 <iprintf+0x2c>)
 8006798:	b513      	push	{r0, r1, r4, lr}
 800679a:	681c      	ldr	r4, [r3, #0]
 800679c:	b124      	cbz	r4, 80067a8 <iprintf+0x14>
 800679e:	69a3      	ldr	r3, [r4, #24]
 80067a0:	b913      	cbnz	r3, 80067a8 <iprintf+0x14>
 80067a2:	4620      	mov	r0, r4
 80067a4:	f001 f9ae 	bl	8007b04 <__sinit>
 80067a8:	ab05      	add	r3, sp, #20
 80067aa:	9a04      	ldr	r2, [sp, #16]
 80067ac:	68a1      	ldr	r1, [r4, #8]
 80067ae:	9301      	str	r3, [sp, #4]
 80067b0:	4620      	mov	r0, r4
 80067b2:	f002 fc89 	bl	80090c8 <_vfiprintf_r>
 80067b6:	b002      	add	sp, #8
 80067b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067bc:	b004      	add	sp, #16
 80067be:	4770      	bx	lr
 80067c0:	20000194 	.word	0x20000194

080067c4 <putchar>:
 80067c4:	4b09      	ldr	r3, [pc, #36]	; (80067ec <putchar+0x28>)
 80067c6:	b513      	push	{r0, r1, r4, lr}
 80067c8:	681c      	ldr	r4, [r3, #0]
 80067ca:	4601      	mov	r1, r0
 80067cc:	b134      	cbz	r4, 80067dc <putchar+0x18>
 80067ce:	69a3      	ldr	r3, [r4, #24]
 80067d0:	b923      	cbnz	r3, 80067dc <putchar+0x18>
 80067d2:	9001      	str	r0, [sp, #4]
 80067d4:	4620      	mov	r0, r4
 80067d6:	f001 f995 	bl	8007b04 <__sinit>
 80067da:	9901      	ldr	r1, [sp, #4]
 80067dc:	68a2      	ldr	r2, [r4, #8]
 80067de:	4620      	mov	r0, r4
 80067e0:	b002      	add	sp, #8
 80067e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067e6:	f002 bf33 	b.w	8009650 <_putc_r>
 80067ea:	bf00      	nop
 80067ec:	20000194 	.word	0x20000194

080067f0 <_puts_r>:
 80067f0:	b570      	push	{r4, r5, r6, lr}
 80067f2:	460e      	mov	r6, r1
 80067f4:	4605      	mov	r5, r0
 80067f6:	b118      	cbz	r0, 8006800 <_puts_r+0x10>
 80067f8:	6983      	ldr	r3, [r0, #24]
 80067fa:	b90b      	cbnz	r3, 8006800 <_puts_r+0x10>
 80067fc:	f001 f982 	bl	8007b04 <__sinit>
 8006800:	69ab      	ldr	r3, [r5, #24]
 8006802:	68ac      	ldr	r4, [r5, #8]
 8006804:	b913      	cbnz	r3, 800680c <_puts_r+0x1c>
 8006806:	4628      	mov	r0, r5
 8006808:	f001 f97c 	bl	8007b04 <__sinit>
 800680c:	4b2c      	ldr	r3, [pc, #176]	; (80068c0 <_puts_r+0xd0>)
 800680e:	429c      	cmp	r4, r3
 8006810:	d120      	bne.n	8006854 <_puts_r+0x64>
 8006812:	686c      	ldr	r4, [r5, #4]
 8006814:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006816:	07db      	lsls	r3, r3, #31
 8006818:	d405      	bmi.n	8006826 <_puts_r+0x36>
 800681a:	89a3      	ldrh	r3, [r4, #12]
 800681c:	0598      	lsls	r0, r3, #22
 800681e:	d402      	bmi.n	8006826 <_puts_r+0x36>
 8006820:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006822:	f001 fd7c 	bl	800831e <__retarget_lock_acquire_recursive>
 8006826:	89a3      	ldrh	r3, [r4, #12]
 8006828:	0719      	lsls	r1, r3, #28
 800682a:	d51d      	bpl.n	8006868 <_puts_r+0x78>
 800682c:	6923      	ldr	r3, [r4, #16]
 800682e:	b1db      	cbz	r3, 8006868 <_puts_r+0x78>
 8006830:	3e01      	subs	r6, #1
 8006832:	68a3      	ldr	r3, [r4, #8]
 8006834:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006838:	3b01      	subs	r3, #1
 800683a:	60a3      	str	r3, [r4, #8]
 800683c:	bb39      	cbnz	r1, 800688e <_puts_r+0x9e>
 800683e:	2b00      	cmp	r3, #0
 8006840:	da38      	bge.n	80068b4 <_puts_r+0xc4>
 8006842:	4622      	mov	r2, r4
 8006844:	210a      	movs	r1, #10
 8006846:	4628      	mov	r0, r5
 8006848:	f000 ff82 	bl	8007750 <__swbuf_r>
 800684c:	3001      	adds	r0, #1
 800684e:	d011      	beq.n	8006874 <_puts_r+0x84>
 8006850:	250a      	movs	r5, #10
 8006852:	e011      	b.n	8006878 <_puts_r+0x88>
 8006854:	4b1b      	ldr	r3, [pc, #108]	; (80068c4 <_puts_r+0xd4>)
 8006856:	429c      	cmp	r4, r3
 8006858:	d101      	bne.n	800685e <_puts_r+0x6e>
 800685a:	68ac      	ldr	r4, [r5, #8]
 800685c:	e7da      	b.n	8006814 <_puts_r+0x24>
 800685e:	4b1a      	ldr	r3, [pc, #104]	; (80068c8 <_puts_r+0xd8>)
 8006860:	429c      	cmp	r4, r3
 8006862:	bf08      	it	eq
 8006864:	68ec      	ldreq	r4, [r5, #12]
 8006866:	e7d5      	b.n	8006814 <_puts_r+0x24>
 8006868:	4621      	mov	r1, r4
 800686a:	4628      	mov	r0, r5
 800686c:	f000 ffc2 	bl	80077f4 <__swsetup_r>
 8006870:	2800      	cmp	r0, #0
 8006872:	d0dd      	beq.n	8006830 <_puts_r+0x40>
 8006874:	f04f 35ff 	mov.w	r5, #4294967295
 8006878:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800687a:	07da      	lsls	r2, r3, #31
 800687c:	d405      	bmi.n	800688a <_puts_r+0x9a>
 800687e:	89a3      	ldrh	r3, [r4, #12]
 8006880:	059b      	lsls	r3, r3, #22
 8006882:	d402      	bmi.n	800688a <_puts_r+0x9a>
 8006884:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006886:	f001 fd4b 	bl	8008320 <__retarget_lock_release_recursive>
 800688a:	4628      	mov	r0, r5
 800688c:	bd70      	pop	{r4, r5, r6, pc}
 800688e:	2b00      	cmp	r3, #0
 8006890:	da04      	bge.n	800689c <_puts_r+0xac>
 8006892:	69a2      	ldr	r2, [r4, #24]
 8006894:	429a      	cmp	r2, r3
 8006896:	dc06      	bgt.n	80068a6 <_puts_r+0xb6>
 8006898:	290a      	cmp	r1, #10
 800689a:	d004      	beq.n	80068a6 <_puts_r+0xb6>
 800689c:	6823      	ldr	r3, [r4, #0]
 800689e:	1c5a      	adds	r2, r3, #1
 80068a0:	6022      	str	r2, [r4, #0]
 80068a2:	7019      	strb	r1, [r3, #0]
 80068a4:	e7c5      	b.n	8006832 <_puts_r+0x42>
 80068a6:	4622      	mov	r2, r4
 80068a8:	4628      	mov	r0, r5
 80068aa:	f000 ff51 	bl	8007750 <__swbuf_r>
 80068ae:	3001      	adds	r0, #1
 80068b0:	d1bf      	bne.n	8006832 <_puts_r+0x42>
 80068b2:	e7df      	b.n	8006874 <_puts_r+0x84>
 80068b4:	6823      	ldr	r3, [r4, #0]
 80068b6:	250a      	movs	r5, #10
 80068b8:	1c5a      	adds	r2, r3, #1
 80068ba:	6022      	str	r2, [r4, #0]
 80068bc:	701d      	strb	r5, [r3, #0]
 80068be:	e7db      	b.n	8006878 <_puts_r+0x88>
 80068c0:	08009edc 	.word	0x08009edc
 80068c4:	08009efc 	.word	0x08009efc
 80068c8:	08009ebc 	.word	0x08009ebc

080068cc <puts>:
 80068cc:	4b02      	ldr	r3, [pc, #8]	; (80068d8 <puts+0xc>)
 80068ce:	4601      	mov	r1, r0
 80068d0:	6818      	ldr	r0, [r3, #0]
 80068d2:	f7ff bf8d 	b.w	80067f0 <_puts_r>
 80068d6:	bf00      	nop
 80068d8:	20000194 	.word	0x20000194

080068dc <_sbrk_r>:
 80068dc:	b538      	push	{r3, r4, r5, lr}
 80068de:	4d06      	ldr	r5, [pc, #24]	; (80068f8 <_sbrk_r+0x1c>)
 80068e0:	2300      	movs	r3, #0
 80068e2:	4604      	mov	r4, r0
 80068e4:	4608      	mov	r0, r1
 80068e6:	602b      	str	r3, [r5, #0]
 80068e8:	f7fa f8ec 	bl	8000ac4 <_sbrk>
 80068ec:	1c43      	adds	r3, r0, #1
 80068ee:	d102      	bne.n	80068f6 <_sbrk_r+0x1a>
 80068f0:	682b      	ldr	r3, [r5, #0]
 80068f2:	b103      	cbz	r3, 80068f6 <_sbrk_r+0x1a>
 80068f4:	6023      	str	r3, [r4, #0]
 80068f6:	bd38      	pop	{r3, r4, r5, pc}
 80068f8:	20001940 	.word	0x20001940

080068fc <strcpy>:
 80068fc:	4603      	mov	r3, r0
 80068fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006902:	f803 2b01 	strb.w	r2, [r3], #1
 8006906:	2a00      	cmp	r2, #0
 8006908:	d1f9      	bne.n	80068fe <strcpy+0x2>
 800690a:	4770      	bx	lr

0800690c <sulp>:
 800690c:	b570      	push	{r4, r5, r6, lr}
 800690e:	4604      	mov	r4, r0
 8006910:	460d      	mov	r5, r1
 8006912:	4616      	mov	r6, r2
 8006914:	ec45 4b10 	vmov	d0, r4, r5
 8006918:	f002 f8f2 	bl	8008b00 <__ulp>
 800691c:	b17e      	cbz	r6, 800693e <sulp+0x32>
 800691e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006922:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006926:	2b00      	cmp	r3, #0
 8006928:	dd09      	ble.n	800693e <sulp+0x32>
 800692a:	051b      	lsls	r3, r3, #20
 800692c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8006930:	2000      	movs	r0, #0
 8006932:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8006936:	ec41 0b17 	vmov	d7, r0, r1
 800693a:	ee20 0b07 	vmul.f64	d0, d0, d7
 800693e:	bd70      	pop	{r4, r5, r6, pc}

08006940 <_strtod_l>:
 8006940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006944:	ed2d 8b0c 	vpush	{d8-d13}
 8006948:	b09d      	sub	sp, #116	; 0x74
 800694a:	461f      	mov	r7, r3
 800694c:	2300      	movs	r3, #0
 800694e:	9318      	str	r3, [sp, #96]	; 0x60
 8006950:	4ba6      	ldr	r3, [pc, #664]	; (8006bec <_strtod_l+0x2ac>)
 8006952:	9213      	str	r2, [sp, #76]	; 0x4c
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	9308      	str	r3, [sp, #32]
 8006958:	4604      	mov	r4, r0
 800695a:	4618      	mov	r0, r3
 800695c:	468a      	mov	sl, r1
 800695e:	f7f9 fc79 	bl	8000254 <strlen>
 8006962:	f04f 0800 	mov.w	r8, #0
 8006966:	4605      	mov	r5, r0
 8006968:	f04f 0900 	mov.w	r9, #0
 800696c:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8006970:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006972:	781a      	ldrb	r2, [r3, #0]
 8006974:	2a2b      	cmp	r2, #43	; 0x2b
 8006976:	d04d      	beq.n	8006a14 <_strtod_l+0xd4>
 8006978:	d83a      	bhi.n	80069f0 <_strtod_l+0xb0>
 800697a:	2a0d      	cmp	r2, #13
 800697c:	d833      	bhi.n	80069e6 <_strtod_l+0xa6>
 800697e:	2a08      	cmp	r2, #8
 8006980:	d833      	bhi.n	80069ea <_strtod_l+0xaa>
 8006982:	2a00      	cmp	r2, #0
 8006984:	d03d      	beq.n	8006a02 <_strtod_l+0xc2>
 8006986:	2300      	movs	r3, #0
 8006988:	930b      	str	r3, [sp, #44]	; 0x2c
 800698a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800698c:	7833      	ldrb	r3, [r6, #0]
 800698e:	2b30      	cmp	r3, #48	; 0x30
 8006990:	f040 80b6 	bne.w	8006b00 <_strtod_l+0x1c0>
 8006994:	7873      	ldrb	r3, [r6, #1]
 8006996:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800699a:	2b58      	cmp	r3, #88	; 0x58
 800699c:	d16d      	bne.n	8006a7a <_strtod_l+0x13a>
 800699e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069a0:	9301      	str	r3, [sp, #4]
 80069a2:	ab18      	add	r3, sp, #96	; 0x60
 80069a4:	9702      	str	r7, [sp, #8]
 80069a6:	9300      	str	r3, [sp, #0]
 80069a8:	4a91      	ldr	r2, [pc, #580]	; (8006bf0 <_strtod_l+0x2b0>)
 80069aa:	ab19      	add	r3, sp, #100	; 0x64
 80069ac:	a917      	add	r1, sp, #92	; 0x5c
 80069ae:	4620      	mov	r0, r4
 80069b0:	f001 f9ac 	bl	8007d0c <__gethex>
 80069b4:	f010 0507 	ands.w	r5, r0, #7
 80069b8:	4607      	mov	r7, r0
 80069ba:	d005      	beq.n	80069c8 <_strtod_l+0x88>
 80069bc:	2d06      	cmp	r5, #6
 80069be:	d12b      	bne.n	8006a18 <_strtod_l+0xd8>
 80069c0:	3601      	adds	r6, #1
 80069c2:	2300      	movs	r3, #0
 80069c4:	9617      	str	r6, [sp, #92]	; 0x5c
 80069c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80069c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	f040 856e 	bne.w	80074ac <_strtod_l+0xb6c>
 80069d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069d2:	b1e3      	cbz	r3, 8006a0e <_strtod_l+0xce>
 80069d4:	ec49 8b17 	vmov	d7, r8, r9
 80069d8:	eeb1 0b47 	vneg.f64	d0, d7
 80069dc:	b01d      	add	sp, #116	; 0x74
 80069de:	ecbd 8b0c 	vpop	{d8-d13}
 80069e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069e6:	2a20      	cmp	r2, #32
 80069e8:	d1cd      	bne.n	8006986 <_strtod_l+0x46>
 80069ea:	3301      	adds	r3, #1
 80069ec:	9317      	str	r3, [sp, #92]	; 0x5c
 80069ee:	e7bf      	b.n	8006970 <_strtod_l+0x30>
 80069f0:	2a2d      	cmp	r2, #45	; 0x2d
 80069f2:	d1c8      	bne.n	8006986 <_strtod_l+0x46>
 80069f4:	2201      	movs	r2, #1
 80069f6:	920b      	str	r2, [sp, #44]	; 0x2c
 80069f8:	1c5a      	adds	r2, r3, #1
 80069fa:	9217      	str	r2, [sp, #92]	; 0x5c
 80069fc:	785b      	ldrb	r3, [r3, #1]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d1c3      	bne.n	800698a <_strtod_l+0x4a>
 8006a02:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006a04:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	f040 854d 	bne.w	80074a8 <_strtod_l+0xb68>
 8006a0e:	ec49 8b10 	vmov	d0, r8, r9
 8006a12:	e7e3      	b.n	80069dc <_strtod_l+0x9c>
 8006a14:	2200      	movs	r2, #0
 8006a16:	e7ee      	b.n	80069f6 <_strtod_l+0xb6>
 8006a18:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006a1a:	b13a      	cbz	r2, 8006a2c <_strtod_l+0xec>
 8006a1c:	2135      	movs	r1, #53	; 0x35
 8006a1e:	a81a      	add	r0, sp, #104	; 0x68
 8006a20:	f002 f97a 	bl	8008d18 <__copybits>
 8006a24:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006a26:	4620      	mov	r0, r4
 8006a28:	f001 fd3e 	bl	80084a8 <_Bfree>
 8006a2c:	3d01      	subs	r5, #1
 8006a2e:	2d05      	cmp	r5, #5
 8006a30:	d807      	bhi.n	8006a42 <_strtod_l+0x102>
 8006a32:	e8df f005 	tbb	[pc, r5]
 8006a36:	0b0e      	.short	0x0b0e
 8006a38:	030e1d18 	.word	0x030e1d18
 8006a3c:	f04f 0900 	mov.w	r9, #0
 8006a40:	46c8      	mov	r8, r9
 8006a42:	073b      	lsls	r3, r7, #28
 8006a44:	d5c0      	bpl.n	80069c8 <_strtod_l+0x88>
 8006a46:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8006a4a:	e7bd      	b.n	80069c8 <_strtod_l+0x88>
 8006a4c:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 8006a50:	e7f7      	b.n	8006a42 <_strtod_l+0x102>
 8006a52:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 8006a56:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006a58:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006a5c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006a60:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8006a64:	e7ed      	b.n	8006a42 <_strtod_l+0x102>
 8006a66:	f8df 918c 	ldr.w	r9, [pc, #396]	; 8006bf4 <_strtod_l+0x2b4>
 8006a6a:	f04f 0800 	mov.w	r8, #0
 8006a6e:	e7e8      	b.n	8006a42 <_strtod_l+0x102>
 8006a70:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006a74:	f04f 38ff 	mov.w	r8, #4294967295
 8006a78:	e7e3      	b.n	8006a42 <_strtod_l+0x102>
 8006a7a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006a7c:	1c5a      	adds	r2, r3, #1
 8006a7e:	9217      	str	r2, [sp, #92]	; 0x5c
 8006a80:	785b      	ldrb	r3, [r3, #1]
 8006a82:	2b30      	cmp	r3, #48	; 0x30
 8006a84:	d0f9      	beq.n	8006a7a <_strtod_l+0x13a>
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d09e      	beq.n	80069c8 <_strtod_l+0x88>
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	9306      	str	r3, [sp, #24]
 8006a8e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006a90:	930c      	str	r3, [sp, #48]	; 0x30
 8006a92:	2300      	movs	r3, #0
 8006a94:	9304      	str	r3, [sp, #16]
 8006a96:	930a      	str	r3, [sp, #40]	; 0x28
 8006a98:	461e      	mov	r6, r3
 8006a9a:	220a      	movs	r2, #10
 8006a9c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006a9e:	f890 b000 	ldrb.w	fp, [r0]
 8006aa2:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 8006aa6:	b2d9      	uxtb	r1, r3
 8006aa8:	2909      	cmp	r1, #9
 8006aaa:	d92b      	bls.n	8006b04 <_strtod_l+0x1c4>
 8006aac:	9908      	ldr	r1, [sp, #32]
 8006aae:	462a      	mov	r2, r5
 8006ab0:	f002 fe67 	bl	8009782 <strncmp>
 8006ab4:	2800      	cmp	r0, #0
 8006ab6:	d035      	beq.n	8006b24 <_strtod_l+0x1e4>
 8006ab8:	2000      	movs	r0, #0
 8006aba:	465a      	mov	r2, fp
 8006abc:	4633      	mov	r3, r6
 8006abe:	4683      	mov	fp, r0
 8006ac0:	4601      	mov	r1, r0
 8006ac2:	2a65      	cmp	r2, #101	; 0x65
 8006ac4:	d001      	beq.n	8006aca <_strtod_l+0x18a>
 8006ac6:	2a45      	cmp	r2, #69	; 0x45
 8006ac8:	d118      	bne.n	8006afc <_strtod_l+0x1bc>
 8006aca:	b91b      	cbnz	r3, 8006ad4 <_strtod_l+0x194>
 8006acc:	9b06      	ldr	r3, [sp, #24]
 8006ace:	4303      	orrs	r3, r0
 8006ad0:	d097      	beq.n	8006a02 <_strtod_l+0xc2>
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 8006ad8:	f10a 0201 	add.w	r2, sl, #1
 8006adc:	9217      	str	r2, [sp, #92]	; 0x5c
 8006ade:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8006ae2:	2a2b      	cmp	r2, #43	; 0x2b
 8006ae4:	d077      	beq.n	8006bd6 <_strtod_l+0x296>
 8006ae6:	2a2d      	cmp	r2, #45	; 0x2d
 8006ae8:	d07d      	beq.n	8006be6 <_strtod_l+0x2a6>
 8006aea:	f04f 0e00 	mov.w	lr, #0
 8006aee:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8006af2:	2d09      	cmp	r5, #9
 8006af4:	f240 8084 	bls.w	8006c00 <_strtod_l+0x2c0>
 8006af8:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8006afc:	2500      	movs	r5, #0
 8006afe:	e09f      	b.n	8006c40 <_strtod_l+0x300>
 8006b00:	2300      	movs	r3, #0
 8006b02:	e7c3      	b.n	8006a8c <_strtod_l+0x14c>
 8006b04:	2e08      	cmp	r6, #8
 8006b06:	bfd5      	itete	le
 8006b08:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8006b0a:	9904      	ldrgt	r1, [sp, #16]
 8006b0c:	fb02 3301 	mlale	r3, r2, r1, r3
 8006b10:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006b14:	f100 0001 	add.w	r0, r0, #1
 8006b18:	bfd4      	ite	le
 8006b1a:	930a      	strle	r3, [sp, #40]	; 0x28
 8006b1c:	9304      	strgt	r3, [sp, #16]
 8006b1e:	3601      	adds	r6, #1
 8006b20:	9017      	str	r0, [sp, #92]	; 0x5c
 8006b22:	e7bb      	b.n	8006a9c <_strtod_l+0x15c>
 8006b24:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006b26:	195a      	adds	r2, r3, r5
 8006b28:	9217      	str	r2, [sp, #92]	; 0x5c
 8006b2a:	5d5a      	ldrb	r2, [r3, r5]
 8006b2c:	b3ae      	cbz	r6, 8006b9a <_strtod_l+0x25a>
 8006b2e:	4683      	mov	fp, r0
 8006b30:	4633      	mov	r3, r6
 8006b32:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006b36:	2909      	cmp	r1, #9
 8006b38:	d912      	bls.n	8006b60 <_strtod_l+0x220>
 8006b3a:	2101      	movs	r1, #1
 8006b3c:	e7c1      	b.n	8006ac2 <_strtod_l+0x182>
 8006b3e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006b40:	1c5a      	adds	r2, r3, #1
 8006b42:	9217      	str	r2, [sp, #92]	; 0x5c
 8006b44:	785a      	ldrb	r2, [r3, #1]
 8006b46:	3001      	adds	r0, #1
 8006b48:	2a30      	cmp	r2, #48	; 0x30
 8006b4a:	d0f8      	beq.n	8006b3e <_strtod_l+0x1fe>
 8006b4c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006b50:	2b08      	cmp	r3, #8
 8006b52:	f200 84b0 	bhi.w	80074b6 <_strtod_l+0xb76>
 8006b56:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006b58:	930c      	str	r3, [sp, #48]	; 0x30
 8006b5a:	4683      	mov	fp, r0
 8006b5c:	2000      	movs	r0, #0
 8006b5e:	4603      	mov	r3, r0
 8006b60:	3a30      	subs	r2, #48	; 0x30
 8006b62:	f100 0101 	add.w	r1, r0, #1
 8006b66:	d012      	beq.n	8006b8e <_strtod_l+0x24e>
 8006b68:	448b      	add	fp, r1
 8006b6a:	eb00 0c03 	add.w	ip, r0, r3
 8006b6e:	4619      	mov	r1, r3
 8006b70:	250a      	movs	r5, #10
 8006b72:	4561      	cmp	r1, ip
 8006b74:	d113      	bne.n	8006b9e <_strtod_l+0x25e>
 8006b76:	1819      	adds	r1, r3, r0
 8006b78:	2908      	cmp	r1, #8
 8006b7a:	f103 0301 	add.w	r3, r3, #1
 8006b7e:	4403      	add	r3, r0
 8006b80:	dc1d      	bgt.n	8006bbe <_strtod_l+0x27e>
 8006b82:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006b84:	210a      	movs	r1, #10
 8006b86:	fb01 2200 	mla	r2, r1, r0, r2
 8006b8a:	920a      	str	r2, [sp, #40]	; 0x28
 8006b8c:	2100      	movs	r1, #0
 8006b8e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006b90:	1c50      	adds	r0, r2, #1
 8006b92:	9017      	str	r0, [sp, #92]	; 0x5c
 8006b94:	7852      	ldrb	r2, [r2, #1]
 8006b96:	4608      	mov	r0, r1
 8006b98:	e7cb      	b.n	8006b32 <_strtod_l+0x1f2>
 8006b9a:	4630      	mov	r0, r6
 8006b9c:	e7d4      	b.n	8006b48 <_strtod_l+0x208>
 8006b9e:	2908      	cmp	r1, #8
 8006ba0:	dc04      	bgt.n	8006bac <_strtod_l+0x26c>
 8006ba2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006ba4:	436f      	muls	r7, r5
 8006ba6:	970a      	str	r7, [sp, #40]	; 0x28
 8006ba8:	3101      	adds	r1, #1
 8006baa:	e7e2      	b.n	8006b72 <_strtod_l+0x232>
 8006bac:	f101 0e01 	add.w	lr, r1, #1
 8006bb0:	f1be 0f10 	cmp.w	lr, #16
 8006bb4:	bfde      	ittt	le
 8006bb6:	9f04      	ldrle	r7, [sp, #16]
 8006bb8:	436f      	mulle	r7, r5
 8006bba:	9704      	strle	r7, [sp, #16]
 8006bbc:	e7f4      	b.n	8006ba8 <_strtod_l+0x268>
 8006bbe:	2b10      	cmp	r3, #16
 8006bc0:	bfdf      	itttt	le
 8006bc2:	9804      	ldrle	r0, [sp, #16]
 8006bc4:	210a      	movle	r1, #10
 8006bc6:	fb01 2200 	mlale	r2, r1, r0, r2
 8006bca:	9204      	strle	r2, [sp, #16]
 8006bcc:	e7de      	b.n	8006b8c <_strtod_l+0x24c>
 8006bce:	f04f 0b00 	mov.w	fp, #0
 8006bd2:	2101      	movs	r1, #1
 8006bd4:	e77a      	b.n	8006acc <_strtod_l+0x18c>
 8006bd6:	f04f 0e00 	mov.w	lr, #0
 8006bda:	f10a 0202 	add.w	r2, sl, #2
 8006bde:	9217      	str	r2, [sp, #92]	; 0x5c
 8006be0:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8006be4:	e783      	b.n	8006aee <_strtod_l+0x1ae>
 8006be6:	f04f 0e01 	mov.w	lr, #1
 8006bea:	e7f6      	b.n	8006bda <_strtod_l+0x29a>
 8006bec:	08009f94 	.word	0x08009f94
 8006bf0:	08009d64 	.word	0x08009d64
 8006bf4:	7ff00000 	.word	0x7ff00000
 8006bf8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006bfa:	1c55      	adds	r5, r2, #1
 8006bfc:	9517      	str	r5, [sp, #92]	; 0x5c
 8006bfe:	7852      	ldrb	r2, [r2, #1]
 8006c00:	2a30      	cmp	r2, #48	; 0x30
 8006c02:	d0f9      	beq.n	8006bf8 <_strtod_l+0x2b8>
 8006c04:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8006c08:	2d08      	cmp	r5, #8
 8006c0a:	f63f af77 	bhi.w	8006afc <_strtod_l+0x1bc>
 8006c0e:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8006c12:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006c14:	9208      	str	r2, [sp, #32]
 8006c16:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006c18:	1c55      	adds	r5, r2, #1
 8006c1a:	9517      	str	r5, [sp, #92]	; 0x5c
 8006c1c:	7852      	ldrb	r2, [r2, #1]
 8006c1e:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8006c22:	2f09      	cmp	r7, #9
 8006c24:	d937      	bls.n	8006c96 <_strtod_l+0x356>
 8006c26:	9f08      	ldr	r7, [sp, #32]
 8006c28:	1bed      	subs	r5, r5, r7
 8006c2a:	2d08      	cmp	r5, #8
 8006c2c:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8006c30:	dc02      	bgt.n	8006c38 <_strtod_l+0x2f8>
 8006c32:	4565      	cmp	r5, ip
 8006c34:	bfa8      	it	ge
 8006c36:	4665      	movge	r5, ip
 8006c38:	f1be 0f00 	cmp.w	lr, #0
 8006c3c:	d000      	beq.n	8006c40 <_strtod_l+0x300>
 8006c3e:	426d      	negs	r5, r5
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d14f      	bne.n	8006ce4 <_strtod_l+0x3a4>
 8006c44:	9b06      	ldr	r3, [sp, #24]
 8006c46:	4303      	orrs	r3, r0
 8006c48:	f47f aebe 	bne.w	80069c8 <_strtod_l+0x88>
 8006c4c:	2900      	cmp	r1, #0
 8006c4e:	f47f aed8 	bne.w	8006a02 <_strtod_l+0xc2>
 8006c52:	2a69      	cmp	r2, #105	; 0x69
 8006c54:	d027      	beq.n	8006ca6 <_strtod_l+0x366>
 8006c56:	dc24      	bgt.n	8006ca2 <_strtod_l+0x362>
 8006c58:	2a49      	cmp	r2, #73	; 0x49
 8006c5a:	d024      	beq.n	8006ca6 <_strtod_l+0x366>
 8006c5c:	2a4e      	cmp	r2, #78	; 0x4e
 8006c5e:	f47f aed0 	bne.w	8006a02 <_strtod_l+0xc2>
 8006c62:	499b      	ldr	r1, [pc, #620]	; (8006ed0 <_strtod_l+0x590>)
 8006c64:	a817      	add	r0, sp, #92	; 0x5c
 8006c66:	f001 faa9 	bl	80081bc <__match>
 8006c6a:	2800      	cmp	r0, #0
 8006c6c:	f43f aec9 	beq.w	8006a02 <_strtod_l+0xc2>
 8006c70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	2b28      	cmp	r3, #40	; 0x28
 8006c76:	d12d      	bne.n	8006cd4 <_strtod_l+0x394>
 8006c78:	4996      	ldr	r1, [pc, #600]	; (8006ed4 <_strtod_l+0x594>)
 8006c7a:	aa1a      	add	r2, sp, #104	; 0x68
 8006c7c:	a817      	add	r0, sp, #92	; 0x5c
 8006c7e:	f001 fab1 	bl	80081e4 <__hexnan>
 8006c82:	2805      	cmp	r0, #5
 8006c84:	d126      	bne.n	8006cd4 <_strtod_l+0x394>
 8006c86:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006c88:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006c8c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006c90:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8006c94:	e698      	b.n	80069c8 <_strtod_l+0x88>
 8006c96:	250a      	movs	r5, #10
 8006c98:	fb05 250c 	mla	r5, r5, ip, r2
 8006c9c:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8006ca0:	e7b9      	b.n	8006c16 <_strtod_l+0x2d6>
 8006ca2:	2a6e      	cmp	r2, #110	; 0x6e
 8006ca4:	e7db      	b.n	8006c5e <_strtod_l+0x31e>
 8006ca6:	498c      	ldr	r1, [pc, #560]	; (8006ed8 <_strtod_l+0x598>)
 8006ca8:	a817      	add	r0, sp, #92	; 0x5c
 8006caa:	f001 fa87 	bl	80081bc <__match>
 8006cae:	2800      	cmp	r0, #0
 8006cb0:	f43f aea7 	beq.w	8006a02 <_strtod_l+0xc2>
 8006cb4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006cb6:	4989      	ldr	r1, [pc, #548]	; (8006edc <_strtod_l+0x59c>)
 8006cb8:	3b01      	subs	r3, #1
 8006cba:	a817      	add	r0, sp, #92	; 0x5c
 8006cbc:	9317      	str	r3, [sp, #92]	; 0x5c
 8006cbe:	f001 fa7d 	bl	80081bc <__match>
 8006cc2:	b910      	cbnz	r0, 8006cca <_strtod_l+0x38a>
 8006cc4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	9317      	str	r3, [sp, #92]	; 0x5c
 8006cca:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8006ef0 <_strtod_l+0x5b0>
 8006cce:	f04f 0800 	mov.w	r8, #0
 8006cd2:	e679      	b.n	80069c8 <_strtod_l+0x88>
 8006cd4:	4882      	ldr	r0, [pc, #520]	; (8006ee0 <_strtod_l+0x5a0>)
 8006cd6:	f002 fd03 	bl	80096e0 <nan>
 8006cda:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006cde:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006ce2:	e671      	b.n	80069c8 <_strtod_l+0x88>
 8006ce4:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8006ce8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006cec:	eba5 020b 	sub.w	r2, r5, fp
 8006cf0:	2e00      	cmp	r6, #0
 8006cf2:	bf08      	it	eq
 8006cf4:	461e      	moveq	r6, r3
 8006cf6:	2b10      	cmp	r3, #16
 8006cf8:	ed8d 7b08 	vstr	d7, [sp, #32]
 8006cfc:	9206      	str	r2, [sp, #24]
 8006cfe:	461a      	mov	r2, r3
 8006d00:	bfa8      	it	ge
 8006d02:	2210      	movge	r2, #16
 8006d04:	2b09      	cmp	r3, #9
 8006d06:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8006d0a:	dd0e      	ble.n	8006d2a <_strtod_l+0x3ea>
 8006d0c:	4975      	ldr	r1, [pc, #468]	; (8006ee4 <_strtod_l+0x5a4>)
 8006d0e:	eddd 7a04 	vldr	s15, [sp, #16]
 8006d12:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8006d16:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 8006d1a:	ed9d 5b08 	vldr	d5, [sp, #32]
 8006d1e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006d22:	eea5 7b06 	vfma.f64	d7, d5, d6
 8006d26:	ec59 8b17 	vmov	r8, r9, d7
 8006d2a:	2b0f      	cmp	r3, #15
 8006d2c:	dc37      	bgt.n	8006d9e <_strtod_l+0x45e>
 8006d2e:	9906      	ldr	r1, [sp, #24]
 8006d30:	2900      	cmp	r1, #0
 8006d32:	f43f ae49 	beq.w	80069c8 <_strtod_l+0x88>
 8006d36:	dd23      	ble.n	8006d80 <_strtod_l+0x440>
 8006d38:	2916      	cmp	r1, #22
 8006d3a:	dc0b      	bgt.n	8006d54 <_strtod_l+0x414>
 8006d3c:	4b69      	ldr	r3, [pc, #420]	; (8006ee4 <_strtod_l+0x5a4>)
 8006d3e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8006d42:	ed93 7b00 	vldr	d7, [r3]
 8006d46:	ec49 8b16 	vmov	d6, r8, r9
 8006d4a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006d4e:	ec59 8b17 	vmov	r8, r9, d7
 8006d52:	e639      	b.n	80069c8 <_strtod_l+0x88>
 8006d54:	9806      	ldr	r0, [sp, #24]
 8006d56:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8006d5a:	4281      	cmp	r1, r0
 8006d5c:	db1f      	blt.n	8006d9e <_strtod_l+0x45e>
 8006d5e:	4a61      	ldr	r2, [pc, #388]	; (8006ee4 <_strtod_l+0x5a4>)
 8006d60:	f1c3 030f 	rsb	r3, r3, #15
 8006d64:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8006d68:	ed91 7b00 	vldr	d7, [r1]
 8006d6c:	ec49 8b16 	vmov	d6, r8, r9
 8006d70:	1ac3      	subs	r3, r0, r3
 8006d72:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8006d76:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006d7a:	ed92 6b00 	vldr	d6, [r2]
 8006d7e:	e7e4      	b.n	8006d4a <_strtod_l+0x40a>
 8006d80:	9906      	ldr	r1, [sp, #24]
 8006d82:	3116      	adds	r1, #22
 8006d84:	db0b      	blt.n	8006d9e <_strtod_l+0x45e>
 8006d86:	4b57      	ldr	r3, [pc, #348]	; (8006ee4 <_strtod_l+0x5a4>)
 8006d88:	ebab 0505 	sub.w	r5, fp, r5
 8006d8c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006d90:	ed95 7b00 	vldr	d7, [r5]
 8006d94:	ec49 8b16 	vmov	d6, r8, r9
 8006d98:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8006d9c:	e7d7      	b.n	8006d4e <_strtod_l+0x40e>
 8006d9e:	9906      	ldr	r1, [sp, #24]
 8006da0:	1a9a      	subs	r2, r3, r2
 8006da2:	440a      	add	r2, r1
 8006da4:	2a00      	cmp	r2, #0
 8006da6:	dd74      	ble.n	8006e92 <_strtod_l+0x552>
 8006da8:	f012 000f 	ands.w	r0, r2, #15
 8006dac:	d00a      	beq.n	8006dc4 <_strtod_l+0x484>
 8006dae:	494d      	ldr	r1, [pc, #308]	; (8006ee4 <_strtod_l+0x5a4>)
 8006db0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8006db4:	ed91 7b00 	vldr	d7, [r1]
 8006db8:	ec49 8b16 	vmov	d6, r8, r9
 8006dbc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006dc0:	ec59 8b17 	vmov	r8, r9, d7
 8006dc4:	f032 020f 	bics.w	r2, r2, #15
 8006dc8:	d04f      	beq.n	8006e6a <_strtod_l+0x52a>
 8006dca:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8006dce:	dd22      	ble.n	8006e16 <_strtod_l+0x4d6>
 8006dd0:	2500      	movs	r5, #0
 8006dd2:	462e      	mov	r6, r5
 8006dd4:	950a      	str	r5, [sp, #40]	; 0x28
 8006dd6:	462f      	mov	r7, r5
 8006dd8:	2322      	movs	r3, #34	; 0x22
 8006dda:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8006ef0 <_strtod_l+0x5b0>
 8006dde:	6023      	str	r3, [r4, #0]
 8006de0:	f04f 0800 	mov.w	r8, #0
 8006de4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	f43f adee 	beq.w	80069c8 <_strtod_l+0x88>
 8006dec:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006dee:	4620      	mov	r0, r4
 8006df0:	f001 fb5a 	bl	80084a8 <_Bfree>
 8006df4:	4639      	mov	r1, r7
 8006df6:	4620      	mov	r0, r4
 8006df8:	f001 fb56 	bl	80084a8 <_Bfree>
 8006dfc:	4631      	mov	r1, r6
 8006dfe:	4620      	mov	r0, r4
 8006e00:	f001 fb52 	bl	80084a8 <_Bfree>
 8006e04:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006e06:	4620      	mov	r0, r4
 8006e08:	f001 fb4e 	bl	80084a8 <_Bfree>
 8006e0c:	4629      	mov	r1, r5
 8006e0e:	4620      	mov	r0, r4
 8006e10:	f001 fb4a 	bl	80084a8 <_Bfree>
 8006e14:	e5d8      	b.n	80069c8 <_strtod_l+0x88>
 8006e16:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8006e1a:	2000      	movs	r0, #0
 8006e1c:	4f32      	ldr	r7, [pc, #200]	; (8006ee8 <_strtod_l+0x5a8>)
 8006e1e:	1112      	asrs	r2, r2, #4
 8006e20:	4601      	mov	r1, r0
 8006e22:	2a01      	cmp	r2, #1
 8006e24:	dc24      	bgt.n	8006e70 <_strtod_l+0x530>
 8006e26:	b108      	cbz	r0, 8006e2c <_strtod_l+0x4ec>
 8006e28:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006e2c:	4a2e      	ldr	r2, [pc, #184]	; (8006ee8 <_strtod_l+0x5a8>)
 8006e2e:	482f      	ldr	r0, [pc, #188]	; (8006eec <_strtod_l+0x5ac>)
 8006e30:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8006e34:	ed91 7b00 	vldr	d7, [r1]
 8006e38:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006e3c:	ec49 8b16 	vmov	d6, r8, r9
 8006e40:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006e44:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006e48:	9905      	ldr	r1, [sp, #20]
 8006e4a:	4a29      	ldr	r2, [pc, #164]	; (8006ef0 <_strtod_l+0x5b0>)
 8006e4c:	400a      	ands	r2, r1
 8006e4e:	4282      	cmp	r2, r0
 8006e50:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006e54:	d8bc      	bhi.n	8006dd0 <_strtod_l+0x490>
 8006e56:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8006e5a:	4282      	cmp	r2, r0
 8006e5c:	bf86      	itte	hi
 8006e5e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8006ef4 <_strtod_l+0x5b4>
 8006e62:	f04f 38ff 	movhi.w	r8, #4294967295
 8006e66:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	9204      	str	r2, [sp, #16]
 8006e6e:	e07f      	b.n	8006f70 <_strtod_l+0x630>
 8006e70:	f012 0f01 	tst.w	r2, #1
 8006e74:	d00a      	beq.n	8006e8c <_strtod_l+0x54c>
 8006e76:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 8006e7a:	ed90 7b00 	vldr	d7, [r0]
 8006e7e:	ed9d 6b04 	vldr	d6, [sp, #16]
 8006e82:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006e86:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006e8a:	2001      	movs	r0, #1
 8006e8c:	3101      	adds	r1, #1
 8006e8e:	1052      	asrs	r2, r2, #1
 8006e90:	e7c7      	b.n	8006e22 <_strtod_l+0x4e2>
 8006e92:	d0ea      	beq.n	8006e6a <_strtod_l+0x52a>
 8006e94:	4252      	negs	r2, r2
 8006e96:	f012 000f 	ands.w	r0, r2, #15
 8006e9a:	d00a      	beq.n	8006eb2 <_strtod_l+0x572>
 8006e9c:	4911      	ldr	r1, [pc, #68]	; (8006ee4 <_strtod_l+0x5a4>)
 8006e9e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8006ea2:	ed91 7b00 	vldr	d7, [r1]
 8006ea6:	ec49 8b16 	vmov	d6, r8, r9
 8006eaa:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8006eae:	ec59 8b17 	vmov	r8, r9, d7
 8006eb2:	1112      	asrs	r2, r2, #4
 8006eb4:	d0d9      	beq.n	8006e6a <_strtod_l+0x52a>
 8006eb6:	2a1f      	cmp	r2, #31
 8006eb8:	dd1e      	ble.n	8006ef8 <_strtod_l+0x5b8>
 8006eba:	2500      	movs	r5, #0
 8006ebc:	462e      	mov	r6, r5
 8006ebe:	950a      	str	r5, [sp, #40]	; 0x28
 8006ec0:	462f      	mov	r7, r5
 8006ec2:	2322      	movs	r3, #34	; 0x22
 8006ec4:	f04f 0800 	mov.w	r8, #0
 8006ec8:	f04f 0900 	mov.w	r9, #0
 8006ecc:	6023      	str	r3, [r4, #0]
 8006ece:	e789      	b.n	8006de4 <_strtod_l+0x4a4>
 8006ed0:	08009d61 	.word	0x08009d61
 8006ed4:	08009d78 	.word	0x08009d78
 8006ed8:	08009d58 	.word	0x08009d58
 8006edc:	08009d5b 	.word	0x08009d5b
 8006ee0:	08009cf2 	.word	0x08009cf2
 8006ee4:	0800a048 	.word	0x0800a048
 8006ee8:	0800a020 	.word	0x0800a020
 8006eec:	7ca00000 	.word	0x7ca00000
 8006ef0:	7ff00000 	.word	0x7ff00000
 8006ef4:	7fefffff 	.word	0x7fefffff
 8006ef8:	f012 0110 	ands.w	r1, r2, #16
 8006efc:	bf18      	it	ne
 8006efe:	216a      	movne	r1, #106	; 0x6a
 8006f00:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8006f04:	9104      	str	r1, [sp, #16]
 8006f06:	49c0      	ldr	r1, [pc, #768]	; (8007208 <_strtod_l+0x8c8>)
 8006f08:	2000      	movs	r0, #0
 8006f0a:	07d7      	lsls	r7, r2, #31
 8006f0c:	d508      	bpl.n	8006f20 <_strtod_l+0x5e0>
 8006f0e:	ed9d 6b08 	vldr	d6, [sp, #32]
 8006f12:	ed91 7b00 	vldr	d7, [r1]
 8006f16:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006f1a:	ed8d 7b08 	vstr	d7, [sp, #32]
 8006f1e:	2001      	movs	r0, #1
 8006f20:	1052      	asrs	r2, r2, #1
 8006f22:	f101 0108 	add.w	r1, r1, #8
 8006f26:	d1f0      	bne.n	8006f0a <_strtod_l+0x5ca>
 8006f28:	b108      	cbz	r0, 8006f2e <_strtod_l+0x5ee>
 8006f2a:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8006f2e:	9a04      	ldr	r2, [sp, #16]
 8006f30:	b1ba      	cbz	r2, 8006f62 <_strtod_l+0x622>
 8006f32:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8006f36:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 8006f3a:	2a00      	cmp	r2, #0
 8006f3c:	4649      	mov	r1, r9
 8006f3e:	dd10      	ble.n	8006f62 <_strtod_l+0x622>
 8006f40:	2a1f      	cmp	r2, #31
 8006f42:	f340 8132 	ble.w	80071aa <_strtod_l+0x86a>
 8006f46:	2a34      	cmp	r2, #52	; 0x34
 8006f48:	bfde      	ittt	le
 8006f4a:	3a20      	suble	r2, #32
 8006f4c:	f04f 30ff 	movle.w	r0, #4294967295
 8006f50:	fa00 f202 	lslle.w	r2, r0, r2
 8006f54:	f04f 0800 	mov.w	r8, #0
 8006f58:	bfcc      	ite	gt
 8006f5a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006f5e:	ea02 0901 	andle.w	r9, r2, r1
 8006f62:	ec49 8b17 	vmov	d7, r8, r9
 8006f66:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f6e:	d0a4      	beq.n	8006eba <_strtod_l+0x57a>
 8006f70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f72:	9200      	str	r2, [sp, #0]
 8006f74:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006f76:	4632      	mov	r2, r6
 8006f78:	4620      	mov	r0, r4
 8006f7a:	f001 fb01 	bl	8008580 <__s2b>
 8006f7e:	900a      	str	r0, [sp, #40]	; 0x28
 8006f80:	2800      	cmp	r0, #0
 8006f82:	f43f af25 	beq.w	8006dd0 <_strtod_l+0x490>
 8006f86:	9b06      	ldr	r3, [sp, #24]
 8006f88:	ebab 0505 	sub.w	r5, fp, r5
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	bfb4      	ite	lt
 8006f90:	462b      	movlt	r3, r5
 8006f92:	2300      	movge	r3, #0
 8006f94:	930c      	str	r3, [sp, #48]	; 0x30
 8006f96:	9b06      	ldr	r3, [sp, #24]
 8006f98:	ed9f 9b95 	vldr	d9, [pc, #596]	; 80071f0 <_strtod_l+0x8b0>
 8006f9c:	ed9f ab96 	vldr	d10, [pc, #600]	; 80071f8 <_strtod_l+0x8b8>
 8006fa0:	ed9f bb97 	vldr	d11, [pc, #604]	; 8007200 <_strtod_l+0x8c0>
 8006fa4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006fa8:	2500      	movs	r5, #0
 8006faa:	9312      	str	r3, [sp, #72]	; 0x48
 8006fac:	462e      	mov	r6, r5
 8006fae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fb0:	4620      	mov	r0, r4
 8006fb2:	6859      	ldr	r1, [r3, #4]
 8006fb4:	f001 fa38 	bl	8008428 <_Balloc>
 8006fb8:	4607      	mov	r7, r0
 8006fba:	2800      	cmp	r0, #0
 8006fbc:	f43f af0c 	beq.w	8006dd8 <_strtod_l+0x498>
 8006fc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fc2:	691a      	ldr	r2, [r3, #16]
 8006fc4:	3202      	adds	r2, #2
 8006fc6:	f103 010c 	add.w	r1, r3, #12
 8006fca:	0092      	lsls	r2, r2, #2
 8006fcc:	300c      	adds	r0, #12
 8006fce:	f7ff fb21 	bl	8006614 <memcpy>
 8006fd2:	ec49 8b10 	vmov	d0, r8, r9
 8006fd6:	aa1a      	add	r2, sp, #104	; 0x68
 8006fd8:	a919      	add	r1, sp, #100	; 0x64
 8006fda:	4620      	mov	r0, r4
 8006fdc:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8006fe0:	f001 fe0a 	bl	8008bf8 <__d2b>
 8006fe4:	9018      	str	r0, [sp, #96]	; 0x60
 8006fe6:	2800      	cmp	r0, #0
 8006fe8:	f43f aef6 	beq.w	8006dd8 <_strtod_l+0x498>
 8006fec:	2101      	movs	r1, #1
 8006fee:	4620      	mov	r0, r4
 8006ff0:	f001 fb60 	bl	80086b4 <__i2b>
 8006ff4:	4606      	mov	r6, r0
 8006ff6:	2800      	cmp	r0, #0
 8006ff8:	f43f aeee 	beq.w	8006dd8 <_strtod_l+0x498>
 8006ffc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006ffe:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007000:	2b00      	cmp	r3, #0
 8007002:	bfab      	itete	ge
 8007004:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8007006:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007008:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 800700c:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 8007010:	bfac      	ite	ge
 8007012:	eb03 0b02 	addge.w	fp, r3, r2
 8007016:	eba2 0a03 	sublt.w	sl, r2, r3
 800701a:	9a04      	ldr	r2, [sp, #16]
 800701c:	1a9b      	subs	r3, r3, r2
 800701e:	440b      	add	r3, r1
 8007020:	4a7a      	ldr	r2, [pc, #488]	; (800720c <_strtod_l+0x8cc>)
 8007022:	3b01      	subs	r3, #1
 8007024:	4293      	cmp	r3, r2
 8007026:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800702a:	f280 80d1 	bge.w	80071d0 <_strtod_l+0x890>
 800702e:	1ad2      	subs	r2, r2, r3
 8007030:	2a1f      	cmp	r2, #31
 8007032:	eba1 0102 	sub.w	r1, r1, r2
 8007036:	f04f 0001 	mov.w	r0, #1
 800703a:	f300 80bd 	bgt.w	80071b8 <_strtod_l+0x878>
 800703e:	fa00 f302 	lsl.w	r3, r0, r2
 8007042:	930e      	str	r3, [sp, #56]	; 0x38
 8007044:	2300      	movs	r3, #0
 8007046:	930d      	str	r3, [sp, #52]	; 0x34
 8007048:	eb0b 0301 	add.w	r3, fp, r1
 800704c:	9a04      	ldr	r2, [sp, #16]
 800704e:	459b      	cmp	fp, r3
 8007050:	448a      	add	sl, r1
 8007052:	4492      	add	sl, r2
 8007054:	465a      	mov	r2, fp
 8007056:	bfa8      	it	ge
 8007058:	461a      	movge	r2, r3
 800705a:	4552      	cmp	r2, sl
 800705c:	bfa8      	it	ge
 800705e:	4652      	movge	r2, sl
 8007060:	2a00      	cmp	r2, #0
 8007062:	bfc2      	ittt	gt
 8007064:	1a9b      	subgt	r3, r3, r2
 8007066:	ebaa 0a02 	subgt.w	sl, sl, r2
 800706a:	ebab 0b02 	subgt.w	fp, fp, r2
 800706e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007070:	2a00      	cmp	r2, #0
 8007072:	dd18      	ble.n	80070a6 <_strtod_l+0x766>
 8007074:	4631      	mov	r1, r6
 8007076:	4620      	mov	r0, r4
 8007078:	9315      	str	r3, [sp, #84]	; 0x54
 800707a:	f001 fbd7 	bl	800882c <__pow5mult>
 800707e:	4606      	mov	r6, r0
 8007080:	2800      	cmp	r0, #0
 8007082:	f43f aea9 	beq.w	8006dd8 <_strtod_l+0x498>
 8007086:	4601      	mov	r1, r0
 8007088:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800708a:	4620      	mov	r0, r4
 800708c:	f001 fb28 	bl	80086e0 <__multiply>
 8007090:	9014      	str	r0, [sp, #80]	; 0x50
 8007092:	2800      	cmp	r0, #0
 8007094:	f43f aea0 	beq.w	8006dd8 <_strtod_l+0x498>
 8007098:	9918      	ldr	r1, [sp, #96]	; 0x60
 800709a:	4620      	mov	r0, r4
 800709c:	f001 fa04 	bl	80084a8 <_Bfree>
 80070a0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80070a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80070a4:	9218      	str	r2, [sp, #96]	; 0x60
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	f300 8097 	bgt.w	80071da <_strtod_l+0x89a>
 80070ac:	9b06      	ldr	r3, [sp, #24]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	dd08      	ble.n	80070c4 <_strtod_l+0x784>
 80070b2:	4639      	mov	r1, r7
 80070b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80070b6:	4620      	mov	r0, r4
 80070b8:	f001 fbb8 	bl	800882c <__pow5mult>
 80070bc:	4607      	mov	r7, r0
 80070be:	2800      	cmp	r0, #0
 80070c0:	f43f ae8a 	beq.w	8006dd8 <_strtod_l+0x498>
 80070c4:	f1ba 0f00 	cmp.w	sl, #0
 80070c8:	dd08      	ble.n	80070dc <_strtod_l+0x79c>
 80070ca:	4639      	mov	r1, r7
 80070cc:	4652      	mov	r2, sl
 80070ce:	4620      	mov	r0, r4
 80070d0:	f001 fc06 	bl	80088e0 <__lshift>
 80070d4:	4607      	mov	r7, r0
 80070d6:	2800      	cmp	r0, #0
 80070d8:	f43f ae7e 	beq.w	8006dd8 <_strtod_l+0x498>
 80070dc:	f1bb 0f00 	cmp.w	fp, #0
 80070e0:	dd08      	ble.n	80070f4 <_strtod_l+0x7b4>
 80070e2:	4631      	mov	r1, r6
 80070e4:	465a      	mov	r2, fp
 80070e6:	4620      	mov	r0, r4
 80070e8:	f001 fbfa 	bl	80088e0 <__lshift>
 80070ec:	4606      	mov	r6, r0
 80070ee:	2800      	cmp	r0, #0
 80070f0:	f43f ae72 	beq.w	8006dd8 <_strtod_l+0x498>
 80070f4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80070f6:	463a      	mov	r2, r7
 80070f8:	4620      	mov	r0, r4
 80070fa:	f001 fc79 	bl	80089f0 <__mdiff>
 80070fe:	4605      	mov	r5, r0
 8007100:	2800      	cmp	r0, #0
 8007102:	f43f ae69 	beq.w	8006dd8 <_strtod_l+0x498>
 8007106:	2300      	movs	r3, #0
 8007108:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800710c:	60c3      	str	r3, [r0, #12]
 800710e:	4631      	mov	r1, r6
 8007110:	f001 fc52 	bl	80089b8 <__mcmp>
 8007114:	2800      	cmp	r0, #0
 8007116:	da7f      	bge.n	8007218 <_strtod_l+0x8d8>
 8007118:	ea5a 0308 	orrs.w	r3, sl, r8
 800711c:	f040 80a5 	bne.w	800726a <_strtod_l+0x92a>
 8007120:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007124:	2b00      	cmp	r3, #0
 8007126:	f040 80a0 	bne.w	800726a <_strtod_l+0x92a>
 800712a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800712e:	0d1b      	lsrs	r3, r3, #20
 8007130:	051b      	lsls	r3, r3, #20
 8007132:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007136:	f240 8098 	bls.w	800726a <_strtod_l+0x92a>
 800713a:	696b      	ldr	r3, [r5, #20]
 800713c:	b91b      	cbnz	r3, 8007146 <_strtod_l+0x806>
 800713e:	692b      	ldr	r3, [r5, #16]
 8007140:	2b01      	cmp	r3, #1
 8007142:	f340 8092 	ble.w	800726a <_strtod_l+0x92a>
 8007146:	4629      	mov	r1, r5
 8007148:	2201      	movs	r2, #1
 800714a:	4620      	mov	r0, r4
 800714c:	f001 fbc8 	bl	80088e0 <__lshift>
 8007150:	4631      	mov	r1, r6
 8007152:	4605      	mov	r5, r0
 8007154:	f001 fc30 	bl	80089b8 <__mcmp>
 8007158:	2800      	cmp	r0, #0
 800715a:	f340 8086 	ble.w	800726a <_strtod_l+0x92a>
 800715e:	9904      	ldr	r1, [sp, #16]
 8007160:	4a2b      	ldr	r2, [pc, #172]	; (8007210 <_strtod_l+0x8d0>)
 8007162:	464b      	mov	r3, r9
 8007164:	2900      	cmp	r1, #0
 8007166:	f000 80a1 	beq.w	80072ac <_strtod_l+0x96c>
 800716a:	ea02 0109 	and.w	r1, r2, r9
 800716e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007172:	f300 809b 	bgt.w	80072ac <_strtod_l+0x96c>
 8007176:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800717a:	f77f aea2 	ble.w	8006ec2 <_strtod_l+0x582>
 800717e:	4a25      	ldr	r2, [pc, #148]	; (8007214 <_strtod_l+0x8d4>)
 8007180:	2300      	movs	r3, #0
 8007182:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 8007186:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 800718a:	ec49 8b17 	vmov	d7, r8, r9
 800718e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007192:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007196:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800719a:	4313      	orrs	r3, r2
 800719c:	bf08      	it	eq
 800719e:	2322      	moveq	r3, #34	; 0x22
 80071a0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80071a4:	bf08      	it	eq
 80071a6:	6023      	streq	r3, [r4, #0]
 80071a8:	e620      	b.n	8006dec <_strtod_l+0x4ac>
 80071aa:	f04f 31ff 	mov.w	r1, #4294967295
 80071ae:	fa01 f202 	lsl.w	r2, r1, r2
 80071b2:	ea02 0808 	and.w	r8, r2, r8
 80071b6:	e6d4      	b.n	8006f62 <_strtod_l+0x622>
 80071b8:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 80071bc:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80071c0:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 80071c4:	33e2      	adds	r3, #226	; 0xe2
 80071c6:	fa00 f303 	lsl.w	r3, r0, r3
 80071ca:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 80071ce:	e73b      	b.n	8007048 <_strtod_l+0x708>
 80071d0:	2000      	movs	r0, #0
 80071d2:	2301      	movs	r3, #1
 80071d4:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 80071d8:	e736      	b.n	8007048 <_strtod_l+0x708>
 80071da:	9918      	ldr	r1, [sp, #96]	; 0x60
 80071dc:	461a      	mov	r2, r3
 80071de:	4620      	mov	r0, r4
 80071e0:	f001 fb7e 	bl	80088e0 <__lshift>
 80071e4:	9018      	str	r0, [sp, #96]	; 0x60
 80071e6:	2800      	cmp	r0, #0
 80071e8:	f47f af60 	bne.w	80070ac <_strtod_l+0x76c>
 80071ec:	e5f4      	b.n	8006dd8 <_strtod_l+0x498>
 80071ee:	bf00      	nop
 80071f0:	94a03595 	.word	0x94a03595
 80071f4:	3fcfffff 	.word	0x3fcfffff
 80071f8:	94a03595 	.word	0x94a03595
 80071fc:	3fdfffff 	.word	0x3fdfffff
 8007200:	35afe535 	.word	0x35afe535
 8007204:	3fe00000 	.word	0x3fe00000
 8007208:	08009d90 	.word	0x08009d90
 800720c:	fffffc02 	.word	0xfffffc02
 8007210:	7ff00000 	.word	0x7ff00000
 8007214:	39500000 	.word	0x39500000
 8007218:	46cb      	mov	fp, r9
 800721a:	d165      	bne.n	80072e8 <_strtod_l+0x9a8>
 800721c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007220:	f1ba 0f00 	cmp.w	sl, #0
 8007224:	d02a      	beq.n	800727c <_strtod_l+0x93c>
 8007226:	4aaa      	ldr	r2, [pc, #680]	; (80074d0 <_strtod_l+0xb90>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d12b      	bne.n	8007284 <_strtod_l+0x944>
 800722c:	9b04      	ldr	r3, [sp, #16]
 800722e:	4641      	mov	r1, r8
 8007230:	b1fb      	cbz	r3, 8007272 <_strtod_l+0x932>
 8007232:	4aa8      	ldr	r2, [pc, #672]	; (80074d4 <_strtod_l+0xb94>)
 8007234:	ea09 0202 	and.w	r2, r9, r2
 8007238:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800723c:	f04f 30ff 	mov.w	r0, #4294967295
 8007240:	d81a      	bhi.n	8007278 <_strtod_l+0x938>
 8007242:	0d12      	lsrs	r2, r2, #20
 8007244:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007248:	fa00 f303 	lsl.w	r3, r0, r3
 800724c:	4299      	cmp	r1, r3
 800724e:	d119      	bne.n	8007284 <_strtod_l+0x944>
 8007250:	4ba1      	ldr	r3, [pc, #644]	; (80074d8 <_strtod_l+0xb98>)
 8007252:	459b      	cmp	fp, r3
 8007254:	d102      	bne.n	800725c <_strtod_l+0x91c>
 8007256:	3101      	adds	r1, #1
 8007258:	f43f adbe 	beq.w	8006dd8 <_strtod_l+0x498>
 800725c:	4b9d      	ldr	r3, [pc, #628]	; (80074d4 <_strtod_l+0xb94>)
 800725e:	ea0b 0303 	and.w	r3, fp, r3
 8007262:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8007266:	f04f 0800 	mov.w	r8, #0
 800726a:	9b04      	ldr	r3, [sp, #16]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d186      	bne.n	800717e <_strtod_l+0x83e>
 8007270:	e5bc      	b.n	8006dec <_strtod_l+0x4ac>
 8007272:	f04f 33ff 	mov.w	r3, #4294967295
 8007276:	e7e9      	b.n	800724c <_strtod_l+0x90c>
 8007278:	4603      	mov	r3, r0
 800727a:	e7e7      	b.n	800724c <_strtod_l+0x90c>
 800727c:	ea53 0308 	orrs.w	r3, r3, r8
 8007280:	f43f af6d 	beq.w	800715e <_strtod_l+0x81e>
 8007284:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007286:	b1db      	cbz	r3, 80072c0 <_strtod_l+0x980>
 8007288:	ea13 0f0b 	tst.w	r3, fp
 800728c:	d0ed      	beq.n	800726a <_strtod_l+0x92a>
 800728e:	9a04      	ldr	r2, [sp, #16]
 8007290:	4640      	mov	r0, r8
 8007292:	4649      	mov	r1, r9
 8007294:	f1ba 0f00 	cmp.w	sl, #0
 8007298:	d016      	beq.n	80072c8 <_strtod_l+0x988>
 800729a:	f7ff fb37 	bl	800690c <sulp>
 800729e:	ed9d 7b08 	vldr	d7, [sp, #32]
 80072a2:	ee37 7b00 	vadd.f64	d7, d7, d0
 80072a6:	ec59 8b17 	vmov	r8, r9, d7
 80072aa:	e7de      	b.n	800726a <_strtod_l+0x92a>
 80072ac:	4013      	ands	r3, r2
 80072ae:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80072b2:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80072b6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80072ba:	f04f 38ff 	mov.w	r8, #4294967295
 80072be:	e7d4      	b.n	800726a <_strtod_l+0x92a>
 80072c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80072c2:	ea13 0f08 	tst.w	r3, r8
 80072c6:	e7e1      	b.n	800728c <_strtod_l+0x94c>
 80072c8:	f7ff fb20 	bl	800690c <sulp>
 80072cc:	ed9d 7b08 	vldr	d7, [sp, #32]
 80072d0:	ee37 7b40 	vsub.f64	d7, d7, d0
 80072d4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80072d8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80072dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072e0:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 80072e4:	d1c1      	bne.n	800726a <_strtod_l+0x92a>
 80072e6:	e5ec      	b.n	8006ec2 <_strtod_l+0x582>
 80072e8:	4631      	mov	r1, r6
 80072ea:	4628      	mov	r0, r5
 80072ec:	f001 fce0 	bl	8008cb0 <__ratio>
 80072f0:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 80072f4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80072f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072fc:	d867      	bhi.n	80073ce <_strtod_l+0xa8e>
 80072fe:	f1ba 0f00 	cmp.w	sl, #0
 8007302:	d044      	beq.n	800738e <_strtod_l+0xa4e>
 8007304:	4b75      	ldr	r3, [pc, #468]	; (80074dc <_strtod_l+0xb9c>)
 8007306:	2200      	movs	r2, #0
 8007308:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 800730c:	4971      	ldr	r1, [pc, #452]	; (80074d4 <_strtod_l+0xb94>)
 800730e:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 80074e8 <_strtod_l+0xba8>
 8007312:	ea0b 0001 	and.w	r0, fp, r1
 8007316:	4560      	cmp	r0, ip
 8007318:	900d      	str	r0, [sp, #52]	; 0x34
 800731a:	f040 808b 	bne.w	8007434 <_strtod_l+0xaf4>
 800731e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007322:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8007326:	ec49 8b10 	vmov	d0, r8, r9
 800732a:	ec43 2b1c 	vmov	d12, r2, r3
 800732e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007332:	f001 fbe5 	bl	8008b00 <__ulp>
 8007336:	ec49 8b1d 	vmov	d13, r8, r9
 800733a:	eeac db00 	vfma.f64	d13, d12, d0
 800733e:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 8007342:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007344:	4963      	ldr	r1, [pc, #396]	; (80074d4 <_strtod_l+0xb94>)
 8007346:	4a66      	ldr	r2, [pc, #408]	; (80074e0 <_strtod_l+0xba0>)
 8007348:	4019      	ands	r1, r3
 800734a:	4291      	cmp	r1, r2
 800734c:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 8007350:	d947      	bls.n	80073e2 <_strtod_l+0xaa2>
 8007352:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007354:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007358:	4293      	cmp	r3, r2
 800735a:	d103      	bne.n	8007364 <_strtod_l+0xa24>
 800735c:	9b08      	ldr	r3, [sp, #32]
 800735e:	3301      	adds	r3, #1
 8007360:	f43f ad3a 	beq.w	8006dd8 <_strtod_l+0x498>
 8007364:	f8df 9170 	ldr.w	r9, [pc, #368]	; 80074d8 <_strtod_l+0xb98>
 8007368:	f04f 38ff 	mov.w	r8, #4294967295
 800736c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800736e:	4620      	mov	r0, r4
 8007370:	f001 f89a 	bl	80084a8 <_Bfree>
 8007374:	4639      	mov	r1, r7
 8007376:	4620      	mov	r0, r4
 8007378:	f001 f896 	bl	80084a8 <_Bfree>
 800737c:	4631      	mov	r1, r6
 800737e:	4620      	mov	r0, r4
 8007380:	f001 f892 	bl	80084a8 <_Bfree>
 8007384:	4629      	mov	r1, r5
 8007386:	4620      	mov	r0, r4
 8007388:	f001 f88e 	bl	80084a8 <_Bfree>
 800738c:	e60f      	b.n	8006fae <_strtod_l+0x66e>
 800738e:	f1b8 0f00 	cmp.w	r8, #0
 8007392:	d112      	bne.n	80073ba <_strtod_l+0xa7a>
 8007394:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007398:	b9b3      	cbnz	r3, 80073c8 <_strtod_l+0xa88>
 800739a:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800739e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80073a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073a6:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 80073aa:	d401      	bmi.n	80073b0 <_strtod_l+0xa70>
 80073ac:	ee20 8b08 	vmul.f64	d8, d0, d8
 80073b0:	eeb1 7b48 	vneg.f64	d7, d8
 80073b4:	ec53 2b17 	vmov	r2, r3, d7
 80073b8:	e7a8      	b.n	800730c <_strtod_l+0x9cc>
 80073ba:	f1b8 0f01 	cmp.w	r8, #1
 80073be:	d103      	bne.n	80073c8 <_strtod_l+0xa88>
 80073c0:	f1b9 0f00 	cmp.w	r9, #0
 80073c4:	f43f ad7d 	beq.w	8006ec2 <_strtod_l+0x582>
 80073c8:	4b46      	ldr	r3, [pc, #280]	; (80074e4 <_strtod_l+0xba4>)
 80073ca:	2200      	movs	r2, #0
 80073cc:	e79c      	b.n	8007308 <_strtod_l+0x9c8>
 80073ce:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 80073d2:	ee20 8b08 	vmul.f64	d8, d0, d8
 80073d6:	f1ba 0f00 	cmp.w	sl, #0
 80073da:	d0e9      	beq.n	80073b0 <_strtod_l+0xa70>
 80073dc:	ec53 2b18 	vmov	r2, r3, d8
 80073e0:	e794      	b.n	800730c <_strtod_l+0x9cc>
 80073e2:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80073e6:	9b04      	ldr	r3, [sp, #16]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d1bf      	bne.n	800736c <_strtod_l+0xa2c>
 80073ec:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80073f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80073f2:	0d1b      	lsrs	r3, r3, #20
 80073f4:	051b      	lsls	r3, r3, #20
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d1b8      	bne.n	800736c <_strtod_l+0xa2c>
 80073fa:	ec51 0b18 	vmov	r0, r1, d8
 80073fe:	f7f9 f95b 	bl	80006b8 <__aeabi_d2lz>
 8007402:	f7f9 f913 	bl	800062c <__aeabi_l2d>
 8007406:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800740a:	ec41 0b17 	vmov	d7, r0, r1
 800740e:	ea43 0308 	orr.w	r3, r3, r8
 8007412:	ea53 030a 	orrs.w	r3, r3, sl
 8007416:	ee38 8b47 	vsub.f64	d8, d8, d7
 800741a:	d03e      	beq.n	800749a <_strtod_l+0xb5a>
 800741c:	eeb4 8bca 	vcmpe.f64	d8, d10
 8007420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007424:	f53f ace2 	bmi.w	8006dec <_strtod_l+0x4ac>
 8007428:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800742c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007430:	dd9c      	ble.n	800736c <_strtod_l+0xa2c>
 8007432:	e4db      	b.n	8006dec <_strtod_l+0x4ac>
 8007434:	9904      	ldr	r1, [sp, #16]
 8007436:	b301      	cbz	r1, 800747a <_strtod_l+0xb3a>
 8007438:	990d      	ldr	r1, [sp, #52]	; 0x34
 800743a:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800743e:	d81c      	bhi.n	800747a <_strtod_l+0xb3a>
 8007440:	ed9f 7b21 	vldr	d7, [pc, #132]	; 80074c8 <_strtod_l+0xb88>
 8007444:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800744c:	d811      	bhi.n	8007472 <_strtod_l+0xb32>
 800744e:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8007452:	ee18 3a10 	vmov	r3, s16
 8007456:	2b01      	cmp	r3, #1
 8007458:	bf38      	it	cc
 800745a:	2301      	movcc	r3, #1
 800745c:	ee08 3a10 	vmov	s16, r3
 8007460:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8007464:	f1ba 0f00 	cmp.w	sl, #0
 8007468:	d114      	bne.n	8007494 <_strtod_l+0xb54>
 800746a:	eeb1 7b48 	vneg.f64	d7, d8
 800746e:	ec53 2b17 	vmov	r2, r3, d7
 8007472:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007474:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 8007478:	1a0b      	subs	r3, r1, r0
 800747a:	ed9d 0b08 	vldr	d0, [sp, #32]
 800747e:	ec43 2b1c 	vmov	d12, r2, r3
 8007482:	f001 fb3d 	bl	8008b00 <__ulp>
 8007486:	ed9d 7b08 	vldr	d7, [sp, #32]
 800748a:	eeac 7b00 	vfma.f64	d7, d12, d0
 800748e:	ec59 8b17 	vmov	r8, r9, d7
 8007492:	e7a8      	b.n	80073e6 <_strtod_l+0xaa6>
 8007494:	ec53 2b18 	vmov	r2, r3, d8
 8007498:	e7eb      	b.n	8007472 <_strtod_l+0xb32>
 800749a:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800749e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074a2:	f57f af63 	bpl.w	800736c <_strtod_l+0xa2c>
 80074a6:	e4a1      	b.n	8006dec <_strtod_l+0x4ac>
 80074a8:	2300      	movs	r3, #0
 80074aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80074ac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80074ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80074b0:	6013      	str	r3, [r2, #0]
 80074b2:	f7ff ba8d 	b.w	80069d0 <_strtod_l+0x90>
 80074b6:	2a65      	cmp	r2, #101	; 0x65
 80074b8:	f43f ab89 	beq.w	8006bce <_strtod_l+0x28e>
 80074bc:	2a45      	cmp	r2, #69	; 0x45
 80074be:	f43f ab86 	beq.w	8006bce <_strtod_l+0x28e>
 80074c2:	2101      	movs	r1, #1
 80074c4:	f7ff bbbe 	b.w	8006c44 <_strtod_l+0x304>
 80074c8:	ffc00000 	.word	0xffc00000
 80074cc:	41dfffff 	.word	0x41dfffff
 80074d0:	000fffff 	.word	0x000fffff
 80074d4:	7ff00000 	.word	0x7ff00000
 80074d8:	7fefffff 	.word	0x7fefffff
 80074dc:	3ff00000 	.word	0x3ff00000
 80074e0:	7c9fffff 	.word	0x7c9fffff
 80074e4:	bff00000 	.word	0xbff00000
 80074e8:	7fe00000 	.word	0x7fe00000
 80074ec:	00000000 	.word	0x00000000

080074f0 <strtof>:
 80074f0:	b510      	push	{r4, lr}
 80074f2:	4c1d      	ldr	r4, [pc, #116]	; (8007568 <strtof+0x78>)
 80074f4:	4b1d      	ldr	r3, [pc, #116]	; (800756c <strtof+0x7c>)
 80074f6:	460a      	mov	r2, r1
 80074f8:	4601      	mov	r1, r0
 80074fa:	6820      	ldr	r0, [r4, #0]
 80074fc:	f7ff fa20 	bl	8006940 <_strtod_l>
 8007500:	eeb4 0b40 	vcmp.f64	d0, d0
 8007504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007508:	eeb0 7b40 	vmov.f64	d7, d0
 800750c:	d70d      	bvc.n	800752a <strtof+0x3a>
 800750e:	ee17 3a90 	vmov	r3, s15
 8007512:	2b00      	cmp	r3, #0
 8007514:	4816      	ldr	r0, [pc, #88]	; (8007570 <strtof+0x80>)
 8007516:	da04      	bge.n	8007522 <strtof+0x32>
 8007518:	f002 f8ea 	bl	80096f0 <nanf>
 800751c:	eeb1 0a40 	vneg.f32	s0, s0
 8007520:	bd10      	pop	{r4, pc}
 8007522:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007526:	f002 b8e3 	b.w	80096f0 <nanf>
 800752a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800752e:	eddf 6a11 	vldr	s13, [pc, #68]	; 8007574 <strtof+0x84>
 8007532:	eeb0 6ac0 	vabs.f32	s12, s0
 8007536:	eeb4 6a66 	vcmp.f32	s12, s13
 800753a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800753e:	ddef      	ble.n	8007520 <strtof+0x30>
 8007540:	eeb0 7bc7 	vabs.f64	d7, d7
 8007544:	ed9f 6b06 	vldr	d6, [pc, #24]	; 8007560 <strtof+0x70>
 8007548:	eeb4 7b46 	vcmp.f64	d7, d6
 800754c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007550:	bfde      	ittt	le
 8007552:	6823      	ldrle	r3, [r4, #0]
 8007554:	2222      	movle	r2, #34	; 0x22
 8007556:	601a      	strle	r2, [r3, #0]
 8007558:	e7e2      	b.n	8007520 <strtof+0x30>
 800755a:	bf00      	nop
 800755c:	f3af 8000 	nop.w
 8007560:	ffffffff 	.word	0xffffffff
 8007564:	7fefffff 	.word	0x7fefffff
 8007568:	20000194 	.word	0x20000194
 800756c:	200001fc 	.word	0x200001fc
 8007570:	08009cf2 	.word	0x08009cf2
 8007574:	7f7fffff 	.word	0x7f7fffff

08007578 <__strtok_r>:
 8007578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800757a:	b908      	cbnz	r0, 8007580 <__strtok_r+0x8>
 800757c:	6810      	ldr	r0, [r2, #0]
 800757e:	b188      	cbz	r0, 80075a4 <__strtok_r+0x2c>
 8007580:	4604      	mov	r4, r0
 8007582:	4620      	mov	r0, r4
 8007584:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007588:	460f      	mov	r7, r1
 800758a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800758e:	b91e      	cbnz	r6, 8007598 <__strtok_r+0x20>
 8007590:	b965      	cbnz	r5, 80075ac <__strtok_r+0x34>
 8007592:	6015      	str	r5, [r2, #0]
 8007594:	4628      	mov	r0, r5
 8007596:	e005      	b.n	80075a4 <__strtok_r+0x2c>
 8007598:	42b5      	cmp	r5, r6
 800759a:	d1f6      	bne.n	800758a <__strtok_r+0x12>
 800759c:	2b00      	cmp	r3, #0
 800759e:	d1f0      	bne.n	8007582 <__strtok_r+0xa>
 80075a0:	6014      	str	r4, [r2, #0]
 80075a2:	7003      	strb	r3, [r0, #0]
 80075a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075a6:	461c      	mov	r4, r3
 80075a8:	e00c      	b.n	80075c4 <__strtok_r+0x4c>
 80075aa:	b915      	cbnz	r5, 80075b2 <__strtok_r+0x3a>
 80075ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 80075b0:	460e      	mov	r6, r1
 80075b2:	f816 5b01 	ldrb.w	r5, [r6], #1
 80075b6:	42ab      	cmp	r3, r5
 80075b8:	d1f7      	bne.n	80075aa <__strtok_r+0x32>
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d0f3      	beq.n	80075a6 <__strtok_r+0x2e>
 80075be:	2300      	movs	r3, #0
 80075c0:	f804 3c01 	strb.w	r3, [r4, #-1]
 80075c4:	6014      	str	r4, [r2, #0]
 80075c6:	e7ed      	b.n	80075a4 <__strtok_r+0x2c>

080075c8 <strtok_r>:
 80075c8:	2301      	movs	r3, #1
 80075ca:	f7ff bfd5 	b.w	8007578 <__strtok_r>
	...

080075d0 <_strtoul_l.isra.0>:
 80075d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80075d4:	4e3b      	ldr	r6, [pc, #236]	; (80076c4 <_strtoul_l.isra.0+0xf4>)
 80075d6:	4686      	mov	lr, r0
 80075d8:	468c      	mov	ip, r1
 80075da:	4660      	mov	r0, ip
 80075dc:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80075e0:	5da5      	ldrb	r5, [r4, r6]
 80075e2:	f015 0508 	ands.w	r5, r5, #8
 80075e6:	d1f8      	bne.n	80075da <_strtoul_l.isra.0+0xa>
 80075e8:	2c2d      	cmp	r4, #45	; 0x2d
 80075ea:	d134      	bne.n	8007656 <_strtoul_l.isra.0+0x86>
 80075ec:	f89c 4000 	ldrb.w	r4, [ip]
 80075f0:	f04f 0801 	mov.w	r8, #1
 80075f4:	f100 0c02 	add.w	ip, r0, #2
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d05e      	beq.n	80076ba <_strtoul_l.isra.0+0xea>
 80075fc:	2b10      	cmp	r3, #16
 80075fe:	d10c      	bne.n	800761a <_strtoul_l.isra.0+0x4a>
 8007600:	2c30      	cmp	r4, #48	; 0x30
 8007602:	d10a      	bne.n	800761a <_strtoul_l.isra.0+0x4a>
 8007604:	f89c 0000 	ldrb.w	r0, [ip]
 8007608:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800760c:	2858      	cmp	r0, #88	; 0x58
 800760e:	d14f      	bne.n	80076b0 <_strtoul_l.isra.0+0xe0>
 8007610:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8007614:	2310      	movs	r3, #16
 8007616:	f10c 0c02 	add.w	ip, ip, #2
 800761a:	f04f 37ff 	mov.w	r7, #4294967295
 800761e:	2500      	movs	r5, #0
 8007620:	fbb7 f7f3 	udiv	r7, r7, r3
 8007624:	fb03 f907 	mul.w	r9, r3, r7
 8007628:	ea6f 0909 	mvn.w	r9, r9
 800762c:	4628      	mov	r0, r5
 800762e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8007632:	2e09      	cmp	r6, #9
 8007634:	d818      	bhi.n	8007668 <_strtoul_l.isra.0+0x98>
 8007636:	4634      	mov	r4, r6
 8007638:	42a3      	cmp	r3, r4
 800763a:	dd24      	ble.n	8007686 <_strtoul_l.isra.0+0xb6>
 800763c:	2d00      	cmp	r5, #0
 800763e:	db1f      	blt.n	8007680 <_strtoul_l.isra.0+0xb0>
 8007640:	4287      	cmp	r7, r0
 8007642:	d31d      	bcc.n	8007680 <_strtoul_l.isra.0+0xb0>
 8007644:	d101      	bne.n	800764a <_strtoul_l.isra.0+0x7a>
 8007646:	45a1      	cmp	r9, r4
 8007648:	db1a      	blt.n	8007680 <_strtoul_l.isra.0+0xb0>
 800764a:	fb00 4003 	mla	r0, r0, r3, r4
 800764e:	2501      	movs	r5, #1
 8007650:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8007654:	e7eb      	b.n	800762e <_strtoul_l.isra.0+0x5e>
 8007656:	2c2b      	cmp	r4, #43	; 0x2b
 8007658:	bf08      	it	eq
 800765a:	f89c 4000 	ldrbeq.w	r4, [ip]
 800765e:	46a8      	mov	r8, r5
 8007660:	bf08      	it	eq
 8007662:	f100 0c02 	addeq.w	ip, r0, #2
 8007666:	e7c7      	b.n	80075f8 <_strtoul_l.isra.0+0x28>
 8007668:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800766c:	2e19      	cmp	r6, #25
 800766e:	d801      	bhi.n	8007674 <_strtoul_l.isra.0+0xa4>
 8007670:	3c37      	subs	r4, #55	; 0x37
 8007672:	e7e1      	b.n	8007638 <_strtoul_l.isra.0+0x68>
 8007674:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8007678:	2e19      	cmp	r6, #25
 800767a:	d804      	bhi.n	8007686 <_strtoul_l.isra.0+0xb6>
 800767c:	3c57      	subs	r4, #87	; 0x57
 800767e:	e7db      	b.n	8007638 <_strtoul_l.isra.0+0x68>
 8007680:	f04f 35ff 	mov.w	r5, #4294967295
 8007684:	e7e4      	b.n	8007650 <_strtoul_l.isra.0+0x80>
 8007686:	2d00      	cmp	r5, #0
 8007688:	da07      	bge.n	800769a <_strtoul_l.isra.0+0xca>
 800768a:	2322      	movs	r3, #34	; 0x22
 800768c:	f8ce 3000 	str.w	r3, [lr]
 8007690:	f04f 30ff 	mov.w	r0, #4294967295
 8007694:	b942      	cbnz	r2, 80076a8 <_strtoul_l.isra.0+0xd8>
 8007696:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800769a:	f1b8 0f00 	cmp.w	r8, #0
 800769e:	d000      	beq.n	80076a2 <_strtoul_l.isra.0+0xd2>
 80076a0:	4240      	negs	r0, r0
 80076a2:	2a00      	cmp	r2, #0
 80076a4:	d0f7      	beq.n	8007696 <_strtoul_l.isra.0+0xc6>
 80076a6:	b10d      	cbz	r5, 80076ac <_strtoul_l.isra.0+0xdc>
 80076a8:	f10c 31ff 	add.w	r1, ip, #4294967295
 80076ac:	6011      	str	r1, [r2, #0]
 80076ae:	e7f2      	b.n	8007696 <_strtoul_l.isra.0+0xc6>
 80076b0:	2430      	movs	r4, #48	; 0x30
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d1b1      	bne.n	800761a <_strtoul_l.isra.0+0x4a>
 80076b6:	2308      	movs	r3, #8
 80076b8:	e7af      	b.n	800761a <_strtoul_l.isra.0+0x4a>
 80076ba:	2c30      	cmp	r4, #48	; 0x30
 80076bc:	d0a2      	beq.n	8007604 <_strtoul_l.isra.0+0x34>
 80076be:	230a      	movs	r3, #10
 80076c0:	e7ab      	b.n	800761a <_strtoul_l.isra.0+0x4a>
 80076c2:	bf00      	nop
 80076c4:	08009db9 	.word	0x08009db9

080076c8 <strtoul>:
 80076c8:	4613      	mov	r3, r2
 80076ca:	460a      	mov	r2, r1
 80076cc:	4601      	mov	r1, r0
 80076ce:	4802      	ldr	r0, [pc, #8]	; (80076d8 <strtoul+0x10>)
 80076d0:	6800      	ldr	r0, [r0, #0]
 80076d2:	f7ff bf7d 	b.w	80075d0 <_strtoul_l.isra.0>
 80076d6:	bf00      	nop
 80076d8:	20000194 	.word	0x20000194

080076dc <_vsniprintf_r>:
 80076dc:	b530      	push	{r4, r5, lr}
 80076de:	1e14      	subs	r4, r2, #0
 80076e0:	4605      	mov	r5, r0
 80076e2:	b09b      	sub	sp, #108	; 0x6c
 80076e4:	4618      	mov	r0, r3
 80076e6:	da05      	bge.n	80076f4 <_vsniprintf_r+0x18>
 80076e8:	238b      	movs	r3, #139	; 0x8b
 80076ea:	602b      	str	r3, [r5, #0]
 80076ec:	f04f 30ff 	mov.w	r0, #4294967295
 80076f0:	b01b      	add	sp, #108	; 0x6c
 80076f2:	bd30      	pop	{r4, r5, pc}
 80076f4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80076f8:	f8ad 300c 	strh.w	r3, [sp, #12]
 80076fc:	bf14      	ite	ne
 80076fe:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007702:	4623      	moveq	r3, r4
 8007704:	9302      	str	r3, [sp, #8]
 8007706:	9305      	str	r3, [sp, #20]
 8007708:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800770c:	9100      	str	r1, [sp, #0]
 800770e:	9104      	str	r1, [sp, #16]
 8007710:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007714:	4602      	mov	r2, r0
 8007716:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007718:	4669      	mov	r1, sp
 800771a:	4628      	mov	r0, r5
 800771c:	f001 fbaa 	bl	8008e74 <_svfiprintf_r>
 8007720:	1c43      	adds	r3, r0, #1
 8007722:	bfbc      	itt	lt
 8007724:	238b      	movlt	r3, #139	; 0x8b
 8007726:	602b      	strlt	r3, [r5, #0]
 8007728:	2c00      	cmp	r4, #0
 800772a:	d0e1      	beq.n	80076f0 <_vsniprintf_r+0x14>
 800772c:	9b00      	ldr	r3, [sp, #0]
 800772e:	2200      	movs	r2, #0
 8007730:	701a      	strb	r2, [r3, #0]
 8007732:	e7dd      	b.n	80076f0 <_vsniprintf_r+0x14>

08007734 <vsniprintf>:
 8007734:	b507      	push	{r0, r1, r2, lr}
 8007736:	9300      	str	r3, [sp, #0]
 8007738:	4613      	mov	r3, r2
 800773a:	460a      	mov	r2, r1
 800773c:	4601      	mov	r1, r0
 800773e:	4803      	ldr	r0, [pc, #12]	; (800774c <vsniprintf+0x18>)
 8007740:	6800      	ldr	r0, [r0, #0]
 8007742:	f7ff ffcb 	bl	80076dc <_vsniprintf_r>
 8007746:	b003      	add	sp, #12
 8007748:	f85d fb04 	ldr.w	pc, [sp], #4
 800774c:	20000194 	.word	0x20000194

08007750 <__swbuf_r>:
 8007750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007752:	460e      	mov	r6, r1
 8007754:	4614      	mov	r4, r2
 8007756:	4605      	mov	r5, r0
 8007758:	b118      	cbz	r0, 8007762 <__swbuf_r+0x12>
 800775a:	6983      	ldr	r3, [r0, #24]
 800775c:	b90b      	cbnz	r3, 8007762 <__swbuf_r+0x12>
 800775e:	f000 f9d1 	bl	8007b04 <__sinit>
 8007762:	4b21      	ldr	r3, [pc, #132]	; (80077e8 <__swbuf_r+0x98>)
 8007764:	429c      	cmp	r4, r3
 8007766:	d12b      	bne.n	80077c0 <__swbuf_r+0x70>
 8007768:	686c      	ldr	r4, [r5, #4]
 800776a:	69a3      	ldr	r3, [r4, #24]
 800776c:	60a3      	str	r3, [r4, #8]
 800776e:	89a3      	ldrh	r3, [r4, #12]
 8007770:	071a      	lsls	r2, r3, #28
 8007772:	d52f      	bpl.n	80077d4 <__swbuf_r+0x84>
 8007774:	6923      	ldr	r3, [r4, #16]
 8007776:	b36b      	cbz	r3, 80077d4 <__swbuf_r+0x84>
 8007778:	6923      	ldr	r3, [r4, #16]
 800777a:	6820      	ldr	r0, [r4, #0]
 800777c:	1ac0      	subs	r0, r0, r3
 800777e:	6963      	ldr	r3, [r4, #20]
 8007780:	b2f6      	uxtb	r6, r6
 8007782:	4283      	cmp	r3, r0
 8007784:	4637      	mov	r7, r6
 8007786:	dc04      	bgt.n	8007792 <__swbuf_r+0x42>
 8007788:	4621      	mov	r1, r4
 800778a:	4628      	mov	r0, r5
 800778c:	f000 f926 	bl	80079dc <_fflush_r>
 8007790:	bb30      	cbnz	r0, 80077e0 <__swbuf_r+0x90>
 8007792:	68a3      	ldr	r3, [r4, #8]
 8007794:	3b01      	subs	r3, #1
 8007796:	60a3      	str	r3, [r4, #8]
 8007798:	6823      	ldr	r3, [r4, #0]
 800779a:	1c5a      	adds	r2, r3, #1
 800779c:	6022      	str	r2, [r4, #0]
 800779e:	701e      	strb	r6, [r3, #0]
 80077a0:	6963      	ldr	r3, [r4, #20]
 80077a2:	3001      	adds	r0, #1
 80077a4:	4283      	cmp	r3, r0
 80077a6:	d004      	beq.n	80077b2 <__swbuf_r+0x62>
 80077a8:	89a3      	ldrh	r3, [r4, #12]
 80077aa:	07db      	lsls	r3, r3, #31
 80077ac:	d506      	bpl.n	80077bc <__swbuf_r+0x6c>
 80077ae:	2e0a      	cmp	r6, #10
 80077b0:	d104      	bne.n	80077bc <__swbuf_r+0x6c>
 80077b2:	4621      	mov	r1, r4
 80077b4:	4628      	mov	r0, r5
 80077b6:	f000 f911 	bl	80079dc <_fflush_r>
 80077ba:	b988      	cbnz	r0, 80077e0 <__swbuf_r+0x90>
 80077bc:	4638      	mov	r0, r7
 80077be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077c0:	4b0a      	ldr	r3, [pc, #40]	; (80077ec <__swbuf_r+0x9c>)
 80077c2:	429c      	cmp	r4, r3
 80077c4:	d101      	bne.n	80077ca <__swbuf_r+0x7a>
 80077c6:	68ac      	ldr	r4, [r5, #8]
 80077c8:	e7cf      	b.n	800776a <__swbuf_r+0x1a>
 80077ca:	4b09      	ldr	r3, [pc, #36]	; (80077f0 <__swbuf_r+0xa0>)
 80077cc:	429c      	cmp	r4, r3
 80077ce:	bf08      	it	eq
 80077d0:	68ec      	ldreq	r4, [r5, #12]
 80077d2:	e7ca      	b.n	800776a <__swbuf_r+0x1a>
 80077d4:	4621      	mov	r1, r4
 80077d6:	4628      	mov	r0, r5
 80077d8:	f000 f80c 	bl	80077f4 <__swsetup_r>
 80077dc:	2800      	cmp	r0, #0
 80077de:	d0cb      	beq.n	8007778 <__swbuf_r+0x28>
 80077e0:	f04f 37ff 	mov.w	r7, #4294967295
 80077e4:	e7ea      	b.n	80077bc <__swbuf_r+0x6c>
 80077e6:	bf00      	nop
 80077e8:	08009edc 	.word	0x08009edc
 80077ec:	08009efc 	.word	0x08009efc
 80077f0:	08009ebc 	.word	0x08009ebc

080077f4 <__swsetup_r>:
 80077f4:	4b32      	ldr	r3, [pc, #200]	; (80078c0 <__swsetup_r+0xcc>)
 80077f6:	b570      	push	{r4, r5, r6, lr}
 80077f8:	681d      	ldr	r5, [r3, #0]
 80077fa:	4606      	mov	r6, r0
 80077fc:	460c      	mov	r4, r1
 80077fe:	b125      	cbz	r5, 800780a <__swsetup_r+0x16>
 8007800:	69ab      	ldr	r3, [r5, #24]
 8007802:	b913      	cbnz	r3, 800780a <__swsetup_r+0x16>
 8007804:	4628      	mov	r0, r5
 8007806:	f000 f97d 	bl	8007b04 <__sinit>
 800780a:	4b2e      	ldr	r3, [pc, #184]	; (80078c4 <__swsetup_r+0xd0>)
 800780c:	429c      	cmp	r4, r3
 800780e:	d10f      	bne.n	8007830 <__swsetup_r+0x3c>
 8007810:	686c      	ldr	r4, [r5, #4]
 8007812:	89a3      	ldrh	r3, [r4, #12]
 8007814:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007818:	0719      	lsls	r1, r3, #28
 800781a:	d42c      	bmi.n	8007876 <__swsetup_r+0x82>
 800781c:	06dd      	lsls	r5, r3, #27
 800781e:	d411      	bmi.n	8007844 <__swsetup_r+0x50>
 8007820:	2309      	movs	r3, #9
 8007822:	6033      	str	r3, [r6, #0]
 8007824:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007828:	81a3      	strh	r3, [r4, #12]
 800782a:	f04f 30ff 	mov.w	r0, #4294967295
 800782e:	e03e      	b.n	80078ae <__swsetup_r+0xba>
 8007830:	4b25      	ldr	r3, [pc, #148]	; (80078c8 <__swsetup_r+0xd4>)
 8007832:	429c      	cmp	r4, r3
 8007834:	d101      	bne.n	800783a <__swsetup_r+0x46>
 8007836:	68ac      	ldr	r4, [r5, #8]
 8007838:	e7eb      	b.n	8007812 <__swsetup_r+0x1e>
 800783a:	4b24      	ldr	r3, [pc, #144]	; (80078cc <__swsetup_r+0xd8>)
 800783c:	429c      	cmp	r4, r3
 800783e:	bf08      	it	eq
 8007840:	68ec      	ldreq	r4, [r5, #12]
 8007842:	e7e6      	b.n	8007812 <__swsetup_r+0x1e>
 8007844:	0758      	lsls	r0, r3, #29
 8007846:	d512      	bpl.n	800786e <__swsetup_r+0x7a>
 8007848:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800784a:	b141      	cbz	r1, 800785e <__swsetup_r+0x6a>
 800784c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007850:	4299      	cmp	r1, r3
 8007852:	d002      	beq.n	800785a <__swsetup_r+0x66>
 8007854:	4630      	mov	r0, r6
 8007856:	f7fe fef3 	bl	8006640 <_free_r>
 800785a:	2300      	movs	r3, #0
 800785c:	6363      	str	r3, [r4, #52]	; 0x34
 800785e:	89a3      	ldrh	r3, [r4, #12]
 8007860:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007864:	81a3      	strh	r3, [r4, #12]
 8007866:	2300      	movs	r3, #0
 8007868:	6063      	str	r3, [r4, #4]
 800786a:	6923      	ldr	r3, [r4, #16]
 800786c:	6023      	str	r3, [r4, #0]
 800786e:	89a3      	ldrh	r3, [r4, #12]
 8007870:	f043 0308 	orr.w	r3, r3, #8
 8007874:	81a3      	strh	r3, [r4, #12]
 8007876:	6923      	ldr	r3, [r4, #16]
 8007878:	b94b      	cbnz	r3, 800788e <__swsetup_r+0x9a>
 800787a:	89a3      	ldrh	r3, [r4, #12]
 800787c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007880:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007884:	d003      	beq.n	800788e <__swsetup_r+0x9a>
 8007886:	4621      	mov	r1, r4
 8007888:	4630      	mov	r0, r6
 800788a:	f000 fd6f 	bl	800836c <__smakebuf_r>
 800788e:	89a0      	ldrh	r0, [r4, #12]
 8007890:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007894:	f010 0301 	ands.w	r3, r0, #1
 8007898:	d00a      	beq.n	80078b0 <__swsetup_r+0xbc>
 800789a:	2300      	movs	r3, #0
 800789c:	60a3      	str	r3, [r4, #8]
 800789e:	6963      	ldr	r3, [r4, #20]
 80078a0:	425b      	negs	r3, r3
 80078a2:	61a3      	str	r3, [r4, #24]
 80078a4:	6923      	ldr	r3, [r4, #16]
 80078a6:	b943      	cbnz	r3, 80078ba <__swsetup_r+0xc6>
 80078a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80078ac:	d1ba      	bne.n	8007824 <__swsetup_r+0x30>
 80078ae:	bd70      	pop	{r4, r5, r6, pc}
 80078b0:	0781      	lsls	r1, r0, #30
 80078b2:	bf58      	it	pl
 80078b4:	6963      	ldrpl	r3, [r4, #20]
 80078b6:	60a3      	str	r3, [r4, #8]
 80078b8:	e7f4      	b.n	80078a4 <__swsetup_r+0xb0>
 80078ba:	2000      	movs	r0, #0
 80078bc:	e7f7      	b.n	80078ae <__swsetup_r+0xba>
 80078be:	bf00      	nop
 80078c0:	20000194 	.word	0x20000194
 80078c4:	08009edc 	.word	0x08009edc
 80078c8:	08009efc 	.word	0x08009efc
 80078cc:	08009ebc 	.word	0x08009ebc

080078d0 <__sflush_r>:
 80078d0:	898a      	ldrh	r2, [r1, #12]
 80078d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078d6:	4605      	mov	r5, r0
 80078d8:	0710      	lsls	r0, r2, #28
 80078da:	460c      	mov	r4, r1
 80078dc:	d458      	bmi.n	8007990 <__sflush_r+0xc0>
 80078de:	684b      	ldr	r3, [r1, #4]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	dc05      	bgt.n	80078f0 <__sflush_r+0x20>
 80078e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	dc02      	bgt.n	80078f0 <__sflush_r+0x20>
 80078ea:	2000      	movs	r0, #0
 80078ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80078f2:	2e00      	cmp	r6, #0
 80078f4:	d0f9      	beq.n	80078ea <__sflush_r+0x1a>
 80078f6:	2300      	movs	r3, #0
 80078f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80078fc:	682f      	ldr	r7, [r5, #0]
 80078fe:	602b      	str	r3, [r5, #0]
 8007900:	d032      	beq.n	8007968 <__sflush_r+0x98>
 8007902:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007904:	89a3      	ldrh	r3, [r4, #12]
 8007906:	075a      	lsls	r2, r3, #29
 8007908:	d505      	bpl.n	8007916 <__sflush_r+0x46>
 800790a:	6863      	ldr	r3, [r4, #4]
 800790c:	1ac0      	subs	r0, r0, r3
 800790e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007910:	b10b      	cbz	r3, 8007916 <__sflush_r+0x46>
 8007912:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007914:	1ac0      	subs	r0, r0, r3
 8007916:	2300      	movs	r3, #0
 8007918:	4602      	mov	r2, r0
 800791a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800791c:	6a21      	ldr	r1, [r4, #32]
 800791e:	4628      	mov	r0, r5
 8007920:	47b0      	blx	r6
 8007922:	1c43      	adds	r3, r0, #1
 8007924:	89a3      	ldrh	r3, [r4, #12]
 8007926:	d106      	bne.n	8007936 <__sflush_r+0x66>
 8007928:	6829      	ldr	r1, [r5, #0]
 800792a:	291d      	cmp	r1, #29
 800792c:	d82c      	bhi.n	8007988 <__sflush_r+0xb8>
 800792e:	4a2a      	ldr	r2, [pc, #168]	; (80079d8 <__sflush_r+0x108>)
 8007930:	40ca      	lsrs	r2, r1
 8007932:	07d6      	lsls	r6, r2, #31
 8007934:	d528      	bpl.n	8007988 <__sflush_r+0xb8>
 8007936:	2200      	movs	r2, #0
 8007938:	6062      	str	r2, [r4, #4]
 800793a:	04d9      	lsls	r1, r3, #19
 800793c:	6922      	ldr	r2, [r4, #16]
 800793e:	6022      	str	r2, [r4, #0]
 8007940:	d504      	bpl.n	800794c <__sflush_r+0x7c>
 8007942:	1c42      	adds	r2, r0, #1
 8007944:	d101      	bne.n	800794a <__sflush_r+0x7a>
 8007946:	682b      	ldr	r3, [r5, #0]
 8007948:	b903      	cbnz	r3, 800794c <__sflush_r+0x7c>
 800794a:	6560      	str	r0, [r4, #84]	; 0x54
 800794c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800794e:	602f      	str	r7, [r5, #0]
 8007950:	2900      	cmp	r1, #0
 8007952:	d0ca      	beq.n	80078ea <__sflush_r+0x1a>
 8007954:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007958:	4299      	cmp	r1, r3
 800795a:	d002      	beq.n	8007962 <__sflush_r+0x92>
 800795c:	4628      	mov	r0, r5
 800795e:	f7fe fe6f 	bl	8006640 <_free_r>
 8007962:	2000      	movs	r0, #0
 8007964:	6360      	str	r0, [r4, #52]	; 0x34
 8007966:	e7c1      	b.n	80078ec <__sflush_r+0x1c>
 8007968:	6a21      	ldr	r1, [r4, #32]
 800796a:	2301      	movs	r3, #1
 800796c:	4628      	mov	r0, r5
 800796e:	47b0      	blx	r6
 8007970:	1c41      	adds	r1, r0, #1
 8007972:	d1c7      	bne.n	8007904 <__sflush_r+0x34>
 8007974:	682b      	ldr	r3, [r5, #0]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d0c4      	beq.n	8007904 <__sflush_r+0x34>
 800797a:	2b1d      	cmp	r3, #29
 800797c:	d001      	beq.n	8007982 <__sflush_r+0xb2>
 800797e:	2b16      	cmp	r3, #22
 8007980:	d101      	bne.n	8007986 <__sflush_r+0xb6>
 8007982:	602f      	str	r7, [r5, #0]
 8007984:	e7b1      	b.n	80078ea <__sflush_r+0x1a>
 8007986:	89a3      	ldrh	r3, [r4, #12]
 8007988:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800798c:	81a3      	strh	r3, [r4, #12]
 800798e:	e7ad      	b.n	80078ec <__sflush_r+0x1c>
 8007990:	690f      	ldr	r7, [r1, #16]
 8007992:	2f00      	cmp	r7, #0
 8007994:	d0a9      	beq.n	80078ea <__sflush_r+0x1a>
 8007996:	0793      	lsls	r3, r2, #30
 8007998:	680e      	ldr	r6, [r1, #0]
 800799a:	bf08      	it	eq
 800799c:	694b      	ldreq	r3, [r1, #20]
 800799e:	600f      	str	r7, [r1, #0]
 80079a0:	bf18      	it	ne
 80079a2:	2300      	movne	r3, #0
 80079a4:	eba6 0807 	sub.w	r8, r6, r7
 80079a8:	608b      	str	r3, [r1, #8]
 80079aa:	f1b8 0f00 	cmp.w	r8, #0
 80079ae:	dd9c      	ble.n	80078ea <__sflush_r+0x1a>
 80079b0:	6a21      	ldr	r1, [r4, #32]
 80079b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80079b4:	4643      	mov	r3, r8
 80079b6:	463a      	mov	r2, r7
 80079b8:	4628      	mov	r0, r5
 80079ba:	47b0      	blx	r6
 80079bc:	2800      	cmp	r0, #0
 80079be:	dc06      	bgt.n	80079ce <__sflush_r+0xfe>
 80079c0:	89a3      	ldrh	r3, [r4, #12]
 80079c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079c6:	81a3      	strh	r3, [r4, #12]
 80079c8:	f04f 30ff 	mov.w	r0, #4294967295
 80079cc:	e78e      	b.n	80078ec <__sflush_r+0x1c>
 80079ce:	4407      	add	r7, r0
 80079d0:	eba8 0800 	sub.w	r8, r8, r0
 80079d4:	e7e9      	b.n	80079aa <__sflush_r+0xda>
 80079d6:	bf00      	nop
 80079d8:	20400001 	.word	0x20400001

080079dc <_fflush_r>:
 80079dc:	b538      	push	{r3, r4, r5, lr}
 80079de:	690b      	ldr	r3, [r1, #16]
 80079e0:	4605      	mov	r5, r0
 80079e2:	460c      	mov	r4, r1
 80079e4:	b913      	cbnz	r3, 80079ec <_fflush_r+0x10>
 80079e6:	2500      	movs	r5, #0
 80079e8:	4628      	mov	r0, r5
 80079ea:	bd38      	pop	{r3, r4, r5, pc}
 80079ec:	b118      	cbz	r0, 80079f6 <_fflush_r+0x1a>
 80079ee:	6983      	ldr	r3, [r0, #24]
 80079f0:	b90b      	cbnz	r3, 80079f6 <_fflush_r+0x1a>
 80079f2:	f000 f887 	bl	8007b04 <__sinit>
 80079f6:	4b14      	ldr	r3, [pc, #80]	; (8007a48 <_fflush_r+0x6c>)
 80079f8:	429c      	cmp	r4, r3
 80079fa:	d11b      	bne.n	8007a34 <_fflush_r+0x58>
 80079fc:	686c      	ldr	r4, [r5, #4]
 80079fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d0ef      	beq.n	80079e6 <_fflush_r+0xa>
 8007a06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007a08:	07d0      	lsls	r0, r2, #31
 8007a0a:	d404      	bmi.n	8007a16 <_fflush_r+0x3a>
 8007a0c:	0599      	lsls	r1, r3, #22
 8007a0e:	d402      	bmi.n	8007a16 <_fflush_r+0x3a>
 8007a10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a12:	f000 fc84 	bl	800831e <__retarget_lock_acquire_recursive>
 8007a16:	4628      	mov	r0, r5
 8007a18:	4621      	mov	r1, r4
 8007a1a:	f7ff ff59 	bl	80078d0 <__sflush_r>
 8007a1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a20:	07da      	lsls	r2, r3, #31
 8007a22:	4605      	mov	r5, r0
 8007a24:	d4e0      	bmi.n	80079e8 <_fflush_r+0xc>
 8007a26:	89a3      	ldrh	r3, [r4, #12]
 8007a28:	059b      	lsls	r3, r3, #22
 8007a2a:	d4dd      	bmi.n	80079e8 <_fflush_r+0xc>
 8007a2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a2e:	f000 fc77 	bl	8008320 <__retarget_lock_release_recursive>
 8007a32:	e7d9      	b.n	80079e8 <_fflush_r+0xc>
 8007a34:	4b05      	ldr	r3, [pc, #20]	; (8007a4c <_fflush_r+0x70>)
 8007a36:	429c      	cmp	r4, r3
 8007a38:	d101      	bne.n	8007a3e <_fflush_r+0x62>
 8007a3a:	68ac      	ldr	r4, [r5, #8]
 8007a3c:	e7df      	b.n	80079fe <_fflush_r+0x22>
 8007a3e:	4b04      	ldr	r3, [pc, #16]	; (8007a50 <_fflush_r+0x74>)
 8007a40:	429c      	cmp	r4, r3
 8007a42:	bf08      	it	eq
 8007a44:	68ec      	ldreq	r4, [r5, #12]
 8007a46:	e7da      	b.n	80079fe <_fflush_r+0x22>
 8007a48:	08009edc 	.word	0x08009edc
 8007a4c:	08009efc 	.word	0x08009efc
 8007a50:	08009ebc 	.word	0x08009ebc

08007a54 <std>:
 8007a54:	2300      	movs	r3, #0
 8007a56:	b510      	push	{r4, lr}
 8007a58:	4604      	mov	r4, r0
 8007a5a:	e9c0 3300 	strd	r3, r3, [r0]
 8007a5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007a62:	6083      	str	r3, [r0, #8]
 8007a64:	8181      	strh	r1, [r0, #12]
 8007a66:	6643      	str	r3, [r0, #100]	; 0x64
 8007a68:	81c2      	strh	r2, [r0, #14]
 8007a6a:	6183      	str	r3, [r0, #24]
 8007a6c:	4619      	mov	r1, r3
 8007a6e:	2208      	movs	r2, #8
 8007a70:	305c      	adds	r0, #92	; 0x5c
 8007a72:	f7fe fddd 	bl	8006630 <memset>
 8007a76:	4b05      	ldr	r3, [pc, #20]	; (8007a8c <std+0x38>)
 8007a78:	6263      	str	r3, [r4, #36]	; 0x24
 8007a7a:	4b05      	ldr	r3, [pc, #20]	; (8007a90 <std+0x3c>)
 8007a7c:	62a3      	str	r3, [r4, #40]	; 0x28
 8007a7e:	4b05      	ldr	r3, [pc, #20]	; (8007a94 <std+0x40>)
 8007a80:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007a82:	4b05      	ldr	r3, [pc, #20]	; (8007a98 <std+0x44>)
 8007a84:	6224      	str	r4, [r4, #32]
 8007a86:	6323      	str	r3, [r4, #48]	; 0x30
 8007a88:	bd10      	pop	{r4, pc}
 8007a8a:	bf00      	nop
 8007a8c:	080096fd 	.word	0x080096fd
 8007a90:	0800971f 	.word	0x0800971f
 8007a94:	08009757 	.word	0x08009757
 8007a98:	0800977b 	.word	0x0800977b

08007a9c <_cleanup_r>:
 8007a9c:	4901      	ldr	r1, [pc, #4]	; (8007aa4 <_cleanup_r+0x8>)
 8007a9e:	f000 b8af 	b.w	8007c00 <_fwalk_reent>
 8007aa2:	bf00      	nop
 8007aa4:	080079dd 	.word	0x080079dd

08007aa8 <__sfmoreglue>:
 8007aa8:	b570      	push	{r4, r5, r6, lr}
 8007aaa:	1e4a      	subs	r2, r1, #1
 8007aac:	2568      	movs	r5, #104	; 0x68
 8007aae:	4355      	muls	r5, r2
 8007ab0:	460e      	mov	r6, r1
 8007ab2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007ab6:	f7fe fe13 	bl	80066e0 <_malloc_r>
 8007aba:	4604      	mov	r4, r0
 8007abc:	b140      	cbz	r0, 8007ad0 <__sfmoreglue+0x28>
 8007abe:	2100      	movs	r1, #0
 8007ac0:	e9c0 1600 	strd	r1, r6, [r0]
 8007ac4:	300c      	adds	r0, #12
 8007ac6:	60a0      	str	r0, [r4, #8]
 8007ac8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007acc:	f7fe fdb0 	bl	8006630 <memset>
 8007ad0:	4620      	mov	r0, r4
 8007ad2:	bd70      	pop	{r4, r5, r6, pc}

08007ad4 <__sfp_lock_acquire>:
 8007ad4:	4801      	ldr	r0, [pc, #4]	; (8007adc <__sfp_lock_acquire+0x8>)
 8007ad6:	f000 bc22 	b.w	800831e <__retarget_lock_acquire_recursive>
 8007ada:	bf00      	nop
 8007adc:	2000193c 	.word	0x2000193c

08007ae0 <__sfp_lock_release>:
 8007ae0:	4801      	ldr	r0, [pc, #4]	; (8007ae8 <__sfp_lock_release+0x8>)
 8007ae2:	f000 bc1d 	b.w	8008320 <__retarget_lock_release_recursive>
 8007ae6:	bf00      	nop
 8007ae8:	2000193c 	.word	0x2000193c

08007aec <__sinit_lock_acquire>:
 8007aec:	4801      	ldr	r0, [pc, #4]	; (8007af4 <__sinit_lock_acquire+0x8>)
 8007aee:	f000 bc16 	b.w	800831e <__retarget_lock_acquire_recursive>
 8007af2:	bf00      	nop
 8007af4:	20001937 	.word	0x20001937

08007af8 <__sinit_lock_release>:
 8007af8:	4801      	ldr	r0, [pc, #4]	; (8007b00 <__sinit_lock_release+0x8>)
 8007afa:	f000 bc11 	b.w	8008320 <__retarget_lock_release_recursive>
 8007afe:	bf00      	nop
 8007b00:	20001937 	.word	0x20001937

08007b04 <__sinit>:
 8007b04:	b510      	push	{r4, lr}
 8007b06:	4604      	mov	r4, r0
 8007b08:	f7ff fff0 	bl	8007aec <__sinit_lock_acquire>
 8007b0c:	69a3      	ldr	r3, [r4, #24]
 8007b0e:	b11b      	cbz	r3, 8007b18 <__sinit+0x14>
 8007b10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b14:	f7ff bff0 	b.w	8007af8 <__sinit_lock_release>
 8007b18:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007b1c:	6523      	str	r3, [r4, #80]	; 0x50
 8007b1e:	4b13      	ldr	r3, [pc, #76]	; (8007b6c <__sinit+0x68>)
 8007b20:	4a13      	ldr	r2, [pc, #76]	; (8007b70 <__sinit+0x6c>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	62a2      	str	r2, [r4, #40]	; 0x28
 8007b26:	42a3      	cmp	r3, r4
 8007b28:	bf04      	itt	eq
 8007b2a:	2301      	moveq	r3, #1
 8007b2c:	61a3      	streq	r3, [r4, #24]
 8007b2e:	4620      	mov	r0, r4
 8007b30:	f000 f820 	bl	8007b74 <__sfp>
 8007b34:	6060      	str	r0, [r4, #4]
 8007b36:	4620      	mov	r0, r4
 8007b38:	f000 f81c 	bl	8007b74 <__sfp>
 8007b3c:	60a0      	str	r0, [r4, #8]
 8007b3e:	4620      	mov	r0, r4
 8007b40:	f000 f818 	bl	8007b74 <__sfp>
 8007b44:	2200      	movs	r2, #0
 8007b46:	60e0      	str	r0, [r4, #12]
 8007b48:	2104      	movs	r1, #4
 8007b4a:	6860      	ldr	r0, [r4, #4]
 8007b4c:	f7ff ff82 	bl	8007a54 <std>
 8007b50:	68a0      	ldr	r0, [r4, #8]
 8007b52:	2201      	movs	r2, #1
 8007b54:	2109      	movs	r1, #9
 8007b56:	f7ff ff7d 	bl	8007a54 <std>
 8007b5a:	68e0      	ldr	r0, [r4, #12]
 8007b5c:	2202      	movs	r2, #2
 8007b5e:	2112      	movs	r1, #18
 8007b60:	f7ff ff78 	bl	8007a54 <std>
 8007b64:	2301      	movs	r3, #1
 8007b66:	61a3      	str	r3, [r4, #24]
 8007b68:	e7d2      	b.n	8007b10 <__sinit+0xc>
 8007b6a:	bf00      	nop
 8007b6c:	08009d54 	.word	0x08009d54
 8007b70:	08007a9d 	.word	0x08007a9d

08007b74 <__sfp>:
 8007b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b76:	4607      	mov	r7, r0
 8007b78:	f7ff ffac 	bl	8007ad4 <__sfp_lock_acquire>
 8007b7c:	4b1e      	ldr	r3, [pc, #120]	; (8007bf8 <__sfp+0x84>)
 8007b7e:	681e      	ldr	r6, [r3, #0]
 8007b80:	69b3      	ldr	r3, [r6, #24]
 8007b82:	b913      	cbnz	r3, 8007b8a <__sfp+0x16>
 8007b84:	4630      	mov	r0, r6
 8007b86:	f7ff ffbd 	bl	8007b04 <__sinit>
 8007b8a:	3648      	adds	r6, #72	; 0x48
 8007b8c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007b90:	3b01      	subs	r3, #1
 8007b92:	d503      	bpl.n	8007b9c <__sfp+0x28>
 8007b94:	6833      	ldr	r3, [r6, #0]
 8007b96:	b30b      	cbz	r3, 8007bdc <__sfp+0x68>
 8007b98:	6836      	ldr	r6, [r6, #0]
 8007b9a:	e7f7      	b.n	8007b8c <__sfp+0x18>
 8007b9c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007ba0:	b9d5      	cbnz	r5, 8007bd8 <__sfp+0x64>
 8007ba2:	4b16      	ldr	r3, [pc, #88]	; (8007bfc <__sfp+0x88>)
 8007ba4:	60e3      	str	r3, [r4, #12]
 8007ba6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007baa:	6665      	str	r5, [r4, #100]	; 0x64
 8007bac:	f000 fbb6 	bl	800831c <__retarget_lock_init_recursive>
 8007bb0:	f7ff ff96 	bl	8007ae0 <__sfp_lock_release>
 8007bb4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007bb8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007bbc:	6025      	str	r5, [r4, #0]
 8007bbe:	61a5      	str	r5, [r4, #24]
 8007bc0:	2208      	movs	r2, #8
 8007bc2:	4629      	mov	r1, r5
 8007bc4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007bc8:	f7fe fd32 	bl	8006630 <memset>
 8007bcc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007bd0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007bd4:	4620      	mov	r0, r4
 8007bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bd8:	3468      	adds	r4, #104	; 0x68
 8007bda:	e7d9      	b.n	8007b90 <__sfp+0x1c>
 8007bdc:	2104      	movs	r1, #4
 8007bde:	4638      	mov	r0, r7
 8007be0:	f7ff ff62 	bl	8007aa8 <__sfmoreglue>
 8007be4:	4604      	mov	r4, r0
 8007be6:	6030      	str	r0, [r6, #0]
 8007be8:	2800      	cmp	r0, #0
 8007bea:	d1d5      	bne.n	8007b98 <__sfp+0x24>
 8007bec:	f7ff ff78 	bl	8007ae0 <__sfp_lock_release>
 8007bf0:	230c      	movs	r3, #12
 8007bf2:	603b      	str	r3, [r7, #0]
 8007bf4:	e7ee      	b.n	8007bd4 <__sfp+0x60>
 8007bf6:	bf00      	nop
 8007bf8:	08009d54 	.word	0x08009d54
 8007bfc:	ffff0001 	.word	0xffff0001

08007c00 <_fwalk_reent>:
 8007c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c04:	4606      	mov	r6, r0
 8007c06:	4688      	mov	r8, r1
 8007c08:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007c0c:	2700      	movs	r7, #0
 8007c0e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007c12:	f1b9 0901 	subs.w	r9, r9, #1
 8007c16:	d505      	bpl.n	8007c24 <_fwalk_reent+0x24>
 8007c18:	6824      	ldr	r4, [r4, #0]
 8007c1a:	2c00      	cmp	r4, #0
 8007c1c:	d1f7      	bne.n	8007c0e <_fwalk_reent+0xe>
 8007c1e:	4638      	mov	r0, r7
 8007c20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c24:	89ab      	ldrh	r3, [r5, #12]
 8007c26:	2b01      	cmp	r3, #1
 8007c28:	d907      	bls.n	8007c3a <_fwalk_reent+0x3a>
 8007c2a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007c2e:	3301      	adds	r3, #1
 8007c30:	d003      	beq.n	8007c3a <_fwalk_reent+0x3a>
 8007c32:	4629      	mov	r1, r5
 8007c34:	4630      	mov	r0, r6
 8007c36:	47c0      	blx	r8
 8007c38:	4307      	orrs	r7, r0
 8007c3a:	3568      	adds	r5, #104	; 0x68
 8007c3c:	e7e9      	b.n	8007c12 <_fwalk_reent+0x12>

08007c3e <rshift>:
 8007c3e:	6903      	ldr	r3, [r0, #16]
 8007c40:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007c44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007c48:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007c4c:	f100 0414 	add.w	r4, r0, #20
 8007c50:	dd45      	ble.n	8007cde <rshift+0xa0>
 8007c52:	f011 011f 	ands.w	r1, r1, #31
 8007c56:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007c5a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007c5e:	d10c      	bne.n	8007c7a <rshift+0x3c>
 8007c60:	f100 0710 	add.w	r7, r0, #16
 8007c64:	4629      	mov	r1, r5
 8007c66:	42b1      	cmp	r1, r6
 8007c68:	d334      	bcc.n	8007cd4 <rshift+0x96>
 8007c6a:	1a9b      	subs	r3, r3, r2
 8007c6c:	009b      	lsls	r3, r3, #2
 8007c6e:	1eea      	subs	r2, r5, #3
 8007c70:	4296      	cmp	r6, r2
 8007c72:	bf38      	it	cc
 8007c74:	2300      	movcc	r3, #0
 8007c76:	4423      	add	r3, r4
 8007c78:	e015      	b.n	8007ca6 <rshift+0x68>
 8007c7a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007c7e:	f1c1 0820 	rsb	r8, r1, #32
 8007c82:	40cf      	lsrs	r7, r1
 8007c84:	f105 0e04 	add.w	lr, r5, #4
 8007c88:	46a1      	mov	r9, r4
 8007c8a:	4576      	cmp	r6, lr
 8007c8c:	46f4      	mov	ip, lr
 8007c8e:	d815      	bhi.n	8007cbc <rshift+0x7e>
 8007c90:	1a9b      	subs	r3, r3, r2
 8007c92:	009a      	lsls	r2, r3, #2
 8007c94:	3a04      	subs	r2, #4
 8007c96:	3501      	adds	r5, #1
 8007c98:	42ae      	cmp	r6, r5
 8007c9a:	bf38      	it	cc
 8007c9c:	2200      	movcc	r2, #0
 8007c9e:	18a3      	adds	r3, r4, r2
 8007ca0:	50a7      	str	r7, [r4, r2]
 8007ca2:	b107      	cbz	r7, 8007ca6 <rshift+0x68>
 8007ca4:	3304      	adds	r3, #4
 8007ca6:	1b1a      	subs	r2, r3, r4
 8007ca8:	42a3      	cmp	r3, r4
 8007caa:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007cae:	bf08      	it	eq
 8007cb0:	2300      	moveq	r3, #0
 8007cb2:	6102      	str	r2, [r0, #16]
 8007cb4:	bf08      	it	eq
 8007cb6:	6143      	streq	r3, [r0, #20]
 8007cb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007cbc:	f8dc c000 	ldr.w	ip, [ip]
 8007cc0:	fa0c fc08 	lsl.w	ip, ip, r8
 8007cc4:	ea4c 0707 	orr.w	r7, ip, r7
 8007cc8:	f849 7b04 	str.w	r7, [r9], #4
 8007ccc:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007cd0:	40cf      	lsrs	r7, r1
 8007cd2:	e7da      	b.n	8007c8a <rshift+0x4c>
 8007cd4:	f851 cb04 	ldr.w	ip, [r1], #4
 8007cd8:	f847 cf04 	str.w	ip, [r7, #4]!
 8007cdc:	e7c3      	b.n	8007c66 <rshift+0x28>
 8007cde:	4623      	mov	r3, r4
 8007ce0:	e7e1      	b.n	8007ca6 <rshift+0x68>

08007ce2 <__hexdig_fun>:
 8007ce2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007ce6:	2b09      	cmp	r3, #9
 8007ce8:	d802      	bhi.n	8007cf0 <__hexdig_fun+0xe>
 8007cea:	3820      	subs	r0, #32
 8007cec:	b2c0      	uxtb	r0, r0
 8007cee:	4770      	bx	lr
 8007cf0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007cf4:	2b05      	cmp	r3, #5
 8007cf6:	d801      	bhi.n	8007cfc <__hexdig_fun+0x1a>
 8007cf8:	3847      	subs	r0, #71	; 0x47
 8007cfa:	e7f7      	b.n	8007cec <__hexdig_fun+0xa>
 8007cfc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007d00:	2b05      	cmp	r3, #5
 8007d02:	d801      	bhi.n	8007d08 <__hexdig_fun+0x26>
 8007d04:	3827      	subs	r0, #39	; 0x27
 8007d06:	e7f1      	b.n	8007cec <__hexdig_fun+0xa>
 8007d08:	2000      	movs	r0, #0
 8007d0a:	4770      	bx	lr

08007d0c <__gethex>:
 8007d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d10:	ed2d 8b02 	vpush	{d8}
 8007d14:	b089      	sub	sp, #36	; 0x24
 8007d16:	ee08 0a10 	vmov	s16, r0
 8007d1a:	9304      	str	r3, [sp, #16]
 8007d1c:	4bbc      	ldr	r3, [pc, #752]	; (8008010 <__gethex+0x304>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	9301      	str	r3, [sp, #4]
 8007d22:	4618      	mov	r0, r3
 8007d24:	468b      	mov	fp, r1
 8007d26:	4690      	mov	r8, r2
 8007d28:	f7f8 fa94 	bl	8000254 <strlen>
 8007d2c:	9b01      	ldr	r3, [sp, #4]
 8007d2e:	f8db 2000 	ldr.w	r2, [fp]
 8007d32:	4403      	add	r3, r0
 8007d34:	4682      	mov	sl, r0
 8007d36:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007d3a:	9305      	str	r3, [sp, #20]
 8007d3c:	1c93      	adds	r3, r2, #2
 8007d3e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007d42:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007d46:	32fe      	adds	r2, #254	; 0xfe
 8007d48:	18d1      	adds	r1, r2, r3
 8007d4a:	461f      	mov	r7, r3
 8007d4c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007d50:	9100      	str	r1, [sp, #0]
 8007d52:	2830      	cmp	r0, #48	; 0x30
 8007d54:	d0f8      	beq.n	8007d48 <__gethex+0x3c>
 8007d56:	f7ff ffc4 	bl	8007ce2 <__hexdig_fun>
 8007d5a:	4604      	mov	r4, r0
 8007d5c:	2800      	cmp	r0, #0
 8007d5e:	d13a      	bne.n	8007dd6 <__gethex+0xca>
 8007d60:	9901      	ldr	r1, [sp, #4]
 8007d62:	4652      	mov	r2, sl
 8007d64:	4638      	mov	r0, r7
 8007d66:	f001 fd0c 	bl	8009782 <strncmp>
 8007d6a:	4605      	mov	r5, r0
 8007d6c:	2800      	cmp	r0, #0
 8007d6e:	d168      	bne.n	8007e42 <__gethex+0x136>
 8007d70:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007d74:	eb07 060a 	add.w	r6, r7, sl
 8007d78:	f7ff ffb3 	bl	8007ce2 <__hexdig_fun>
 8007d7c:	2800      	cmp	r0, #0
 8007d7e:	d062      	beq.n	8007e46 <__gethex+0x13a>
 8007d80:	4633      	mov	r3, r6
 8007d82:	7818      	ldrb	r0, [r3, #0]
 8007d84:	2830      	cmp	r0, #48	; 0x30
 8007d86:	461f      	mov	r7, r3
 8007d88:	f103 0301 	add.w	r3, r3, #1
 8007d8c:	d0f9      	beq.n	8007d82 <__gethex+0x76>
 8007d8e:	f7ff ffa8 	bl	8007ce2 <__hexdig_fun>
 8007d92:	2301      	movs	r3, #1
 8007d94:	fab0 f480 	clz	r4, r0
 8007d98:	0964      	lsrs	r4, r4, #5
 8007d9a:	4635      	mov	r5, r6
 8007d9c:	9300      	str	r3, [sp, #0]
 8007d9e:	463a      	mov	r2, r7
 8007da0:	4616      	mov	r6, r2
 8007da2:	3201      	adds	r2, #1
 8007da4:	7830      	ldrb	r0, [r6, #0]
 8007da6:	f7ff ff9c 	bl	8007ce2 <__hexdig_fun>
 8007daa:	2800      	cmp	r0, #0
 8007dac:	d1f8      	bne.n	8007da0 <__gethex+0x94>
 8007dae:	9901      	ldr	r1, [sp, #4]
 8007db0:	4652      	mov	r2, sl
 8007db2:	4630      	mov	r0, r6
 8007db4:	f001 fce5 	bl	8009782 <strncmp>
 8007db8:	b980      	cbnz	r0, 8007ddc <__gethex+0xd0>
 8007dba:	b94d      	cbnz	r5, 8007dd0 <__gethex+0xc4>
 8007dbc:	eb06 050a 	add.w	r5, r6, sl
 8007dc0:	462a      	mov	r2, r5
 8007dc2:	4616      	mov	r6, r2
 8007dc4:	3201      	adds	r2, #1
 8007dc6:	7830      	ldrb	r0, [r6, #0]
 8007dc8:	f7ff ff8b 	bl	8007ce2 <__hexdig_fun>
 8007dcc:	2800      	cmp	r0, #0
 8007dce:	d1f8      	bne.n	8007dc2 <__gethex+0xb6>
 8007dd0:	1bad      	subs	r5, r5, r6
 8007dd2:	00ad      	lsls	r5, r5, #2
 8007dd4:	e004      	b.n	8007de0 <__gethex+0xd4>
 8007dd6:	2400      	movs	r4, #0
 8007dd8:	4625      	mov	r5, r4
 8007dda:	e7e0      	b.n	8007d9e <__gethex+0x92>
 8007ddc:	2d00      	cmp	r5, #0
 8007dde:	d1f7      	bne.n	8007dd0 <__gethex+0xc4>
 8007de0:	7833      	ldrb	r3, [r6, #0]
 8007de2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007de6:	2b50      	cmp	r3, #80	; 0x50
 8007de8:	d13b      	bne.n	8007e62 <__gethex+0x156>
 8007dea:	7873      	ldrb	r3, [r6, #1]
 8007dec:	2b2b      	cmp	r3, #43	; 0x2b
 8007dee:	d02c      	beq.n	8007e4a <__gethex+0x13e>
 8007df0:	2b2d      	cmp	r3, #45	; 0x2d
 8007df2:	d02e      	beq.n	8007e52 <__gethex+0x146>
 8007df4:	1c71      	adds	r1, r6, #1
 8007df6:	f04f 0900 	mov.w	r9, #0
 8007dfa:	7808      	ldrb	r0, [r1, #0]
 8007dfc:	f7ff ff71 	bl	8007ce2 <__hexdig_fun>
 8007e00:	1e43      	subs	r3, r0, #1
 8007e02:	b2db      	uxtb	r3, r3
 8007e04:	2b18      	cmp	r3, #24
 8007e06:	d82c      	bhi.n	8007e62 <__gethex+0x156>
 8007e08:	f1a0 0210 	sub.w	r2, r0, #16
 8007e0c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007e10:	f7ff ff67 	bl	8007ce2 <__hexdig_fun>
 8007e14:	1e43      	subs	r3, r0, #1
 8007e16:	b2db      	uxtb	r3, r3
 8007e18:	2b18      	cmp	r3, #24
 8007e1a:	d91d      	bls.n	8007e58 <__gethex+0x14c>
 8007e1c:	f1b9 0f00 	cmp.w	r9, #0
 8007e20:	d000      	beq.n	8007e24 <__gethex+0x118>
 8007e22:	4252      	negs	r2, r2
 8007e24:	4415      	add	r5, r2
 8007e26:	f8cb 1000 	str.w	r1, [fp]
 8007e2a:	b1e4      	cbz	r4, 8007e66 <__gethex+0x15a>
 8007e2c:	9b00      	ldr	r3, [sp, #0]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	bf14      	ite	ne
 8007e32:	2700      	movne	r7, #0
 8007e34:	2706      	moveq	r7, #6
 8007e36:	4638      	mov	r0, r7
 8007e38:	b009      	add	sp, #36	; 0x24
 8007e3a:	ecbd 8b02 	vpop	{d8}
 8007e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e42:	463e      	mov	r6, r7
 8007e44:	4625      	mov	r5, r4
 8007e46:	2401      	movs	r4, #1
 8007e48:	e7ca      	b.n	8007de0 <__gethex+0xd4>
 8007e4a:	f04f 0900 	mov.w	r9, #0
 8007e4e:	1cb1      	adds	r1, r6, #2
 8007e50:	e7d3      	b.n	8007dfa <__gethex+0xee>
 8007e52:	f04f 0901 	mov.w	r9, #1
 8007e56:	e7fa      	b.n	8007e4e <__gethex+0x142>
 8007e58:	230a      	movs	r3, #10
 8007e5a:	fb03 0202 	mla	r2, r3, r2, r0
 8007e5e:	3a10      	subs	r2, #16
 8007e60:	e7d4      	b.n	8007e0c <__gethex+0x100>
 8007e62:	4631      	mov	r1, r6
 8007e64:	e7df      	b.n	8007e26 <__gethex+0x11a>
 8007e66:	1bf3      	subs	r3, r6, r7
 8007e68:	3b01      	subs	r3, #1
 8007e6a:	4621      	mov	r1, r4
 8007e6c:	2b07      	cmp	r3, #7
 8007e6e:	dc0b      	bgt.n	8007e88 <__gethex+0x17c>
 8007e70:	ee18 0a10 	vmov	r0, s16
 8007e74:	f000 fad8 	bl	8008428 <_Balloc>
 8007e78:	4604      	mov	r4, r0
 8007e7a:	b940      	cbnz	r0, 8007e8e <__gethex+0x182>
 8007e7c:	4b65      	ldr	r3, [pc, #404]	; (8008014 <__gethex+0x308>)
 8007e7e:	4602      	mov	r2, r0
 8007e80:	21de      	movs	r1, #222	; 0xde
 8007e82:	4865      	ldr	r0, [pc, #404]	; (8008018 <__gethex+0x30c>)
 8007e84:	f001 fcae 	bl	80097e4 <__assert_func>
 8007e88:	3101      	adds	r1, #1
 8007e8a:	105b      	asrs	r3, r3, #1
 8007e8c:	e7ee      	b.n	8007e6c <__gethex+0x160>
 8007e8e:	f100 0914 	add.w	r9, r0, #20
 8007e92:	f04f 0b00 	mov.w	fp, #0
 8007e96:	f1ca 0301 	rsb	r3, sl, #1
 8007e9a:	f8cd 9008 	str.w	r9, [sp, #8]
 8007e9e:	f8cd b000 	str.w	fp, [sp]
 8007ea2:	9306      	str	r3, [sp, #24]
 8007ea4:	42b7      	cmp	r7, r6
 8007ea6:	d340      	bcc.n	8007f2a <__gethex+0x21e>
 8007ea8:	9802      	ldr	r0, [sp, #8]
 8007eaa:	9b00      	ldr	r3, [sp, #0]
 8007eac:	f840 3b04 	str.w	r3, [r0], #4
 8007eb0:	eba0 0009 	sub.w	r0, r0, r9
 8007eb4:	1080      	asrs	r0, r0, #2
 8007eb6:	0146      	lsls	r6, r0, #5
 8007eb8:	6120      	str	r0, [r4, #16]
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f000 fbaa 	bl	8008614 <__hi0bits>
 8007ec0:	1a30      	subs	r0, r6, r0
 8007ec2:	f8d8 6000 	ldr.w	r6, [r8]
 8007ec6:	42b0      	cmp	r0, r6
 8007ec8:	dd63      	ble.n	8007f92 <__gethex+0x286>
 8007eca:	1b87      	subs	r7, r0, r6
 8007ecc:	4639      	mov	r1, r7
 8007ece:	4620      	mov	r0, r4
 8007ed0:	f000 ff45 	bl	8008d5e <__any_on>
 8007ed4:	4682      	mov	sl, r0
 8007ed6:	b1a8      	cbz	r0, 8007f04 <__gethex+0x1f8>
 8007ed8:	1e7b      	subs	r3, r7, #1
 8007eda:	1159      	asrs	r1, r3, #5
 8007edc:	f003 021f 	and.w	r2, r3, #31
 8007ee0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007ee4:	f04f 0a01 	mov.w	sl, #1
 8007ee8:	fa0a f202 	lsl.w	r2, sl, r2
 8007eec:	420a      	tst	r2, r1
 8007eee:	d009      	beq.n	8007f04 <__gethex+0x1f8>
 8007ef0:	4553      	cmp	r3, sl
 8007ef2:	dd05      	ble.n	8007f00 <__gethex+0x1f4>
 8007ef4:	1eb9      	subs	r1, r7, #2
 8007ef6:	4620      	mov	r0, r4
 8007ef8:	f000 ff31 	bl	8008d5e <__any_on>
 8007efc:	2800      	cmp	r0, #0
 8007efe:	d145      	bne.n	8007f8c <__gethex+0x280>
 8007f00:	f04f 0a02 	mov.w	sl, #2
 8007f04:	4639      	mov	r1, r7
 8007f06:	4620      	mov	r0, r4
 8007f08:	f7ff fe99 	bl	8007c3e <rshift>
 8007f0c:	443d      	add	r5, r7
 8007f0e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007f12:	42ab      	cmp	r3, r5
 8007f14:	da4c      	bge.n	8007fb0 <__gethex+0x2a4>
 8007f16:	ee18 0a10 	vmov	r0, s16
 8007f1a:	4621      	mov	r1, r4
 8007f1c:	f000 fac4 	bl	80084a8 <_Bfree>
 8007f20:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007f22:	2300      	movs	r3, #0
 8007f24:	6013      	str	r3, [r2, #0]
 8007f26:	27a3      	movs	r7, #163	; 0xa3
 8007f28:	e785      	b.n	8007e36 <__gethex+0x12a>
 8007f2a:	1e73      	subs	r3, r6, #1
 8007f2c:	9a05      	ldr	r2, [sp, #20]
 8007f2e:	9303      	str	r3, [sp, #12]
 8007f30:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d019      	beq.n	8007f6c <__gethex+0x260>
 8007f38:	f1bb 0f20 	cmp.w	fp, #32
 8007f3c:	d107      	bne.n	8007f4e <__gethex+0x242>
 8007f3e:	9b02      	ldr	r3, [sp, #8]
 8007f40:	9a00      	ldr	r2, [sp, #0]
 8007f42:	f843 2b04 	str.w	r2, [r3], #4
 8007f46:	9302      	str	r3, [sp, #8]
 8007f48:	2300      	movs	r3, #0
 8007f4a:	9300      	str	r3, [sp, #0]
 8007f4c:	469b      	mov	fp, r3
 8007f4e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007f52:	f7ff fec6 	bl	8007ce2 <__hexdig_fun>
 8007f56:	9b00      	ldr	r3, [sp, #0]
 8007f58:	f000 000f 	and.w	r0, r0, #15
 8007f5c:	fa00 f00b 	lsl.w	r0, r0, fp
 8007f60:	4303      	orrs	r3, r0
 8007f62:	9300      	str	r3, [sp, #0]
 8007f64:	f10b 0b04 	add.w	fp, fp, #4
 8007f68:	9b03      	ldr	r3, [sp, #12]
 8007f6a:	e00d      	b.n	8007f88 <__gethex+0x27c>
 8007f6c:	9b03      	ldr	r3, [sp, #12]
 8007f6e:	9a06      	ldr	r2, [sp, #24]
 8007f70:	4413      	add	r3, r2
 8007f72:	42bb      	cmp	r3, r7
 8007f74:	d3e0      	bcc.n	8007f38 <__gethex+0x22c>
 8007f76:	4618      	mov	r0, r3
 8007f78:	9901      	ldr	r1, [sp, #4]
 8007f7a:	9307      	str	r3, [sp, #28]
 8007f7c:	4652      	mov	r2, sl
 8007f7e:	f001 fc00 	bl	8009782 <strncmp>
 8007f82:	9b07      	ldr	r3, [sp, #28]
 8007f84:	2800      	cmp	r0, #0
 8007f86:	d1d7      	bne.n	8007f38 <__gethex+0x22c>
 8007f88:	461e      	mov	r6, r3
 8007f8a:	e78b      	b.n	8007ea4 <__gethex+0x198>
 8007f8c:	f04f 0a03 	mov.w	sl, #3
 8007f90:	e7b8      	b.n	8007f04 <__gethex+0x1f8>
 8007f92:	da0a      	bge.n	8007faa <__gethex+0x29e>
 8007f94:	1a37      	subs	r7, r6, r0
 8007f96:	4621      	mov	r1, r4
 8007f98:	ee18 0a10 	vmov	r0, s16
 8007f9c:	463a      	mov	r2, r7
 8007f9e:	f000 fc9f 	bl	80088e0 <__lshift>
 8007fa2:	1bed      	subs	r5, r5, r7
 8007fa4:	4604      	mov	r4, r0
 8007fa6:	f100 0914 	add.w	r9, r0, #20
 8007faa:	f04f 0a00 	mov.w	sl, #0
 8007fae:	e7ae      	b.n	8007f0e <__gethex+0x202>
 8007fb0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007fb4:	42a8      	cmp	r0, r5
 8007fb6:	dd72      	ble.n	800809e <__gethex+0x392>
 8007fb8:	1b45      	subs	r5, r0, r5
 8007fba:	42ae      	cmp	r6, r5
 8007fbc:	dc36      	bgt.n	800802c <__gethex+0x320>
 8007fbe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007fc2:	2b02      	cmp	r3, #2
 8007fc4:	d02a      	beq.n	800801c <__gethex+0x310>
 8007fc6:	2b03      	cmp	r3, #3
 8007fc8:	d02c      	beq.n	8008024 <__gethex+0x318>
 8007fca:	2b01      	cmp	r3, #1
 8007fcc:	d115      	bne.n	8007ffa <__gethex+0x2ee>
 8007fce:	42ae      	cmp	r6, r5
 8007fd0:	d113      	bne.n	8007ffa <__gethex+0x2ee>
 8007fd2:	2e01      	cmp	r6, #1
 8007fd4:	d10b      	bne.n	8007fee <__gethex+0x2e2>
 8007fd6:	9a04      	ldr	r2, [sp, #16]
 8007fd8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007fdc:	6013      	str	r3, [r2, #0]
 8007fde:	2301      	movs	r3, #1
 8007fe0:	6123      	str	r3, [r4, #16]
 8007fe2:	f8c9 3000 	str.w	r3, [r9]
 8007fe6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007fe8:	2762      	movs	r7, #98	; 0x62
 8007fea:	601c      	str	r4, [r3, #0]
 8007fec:	e723      	b.n	8007e36 <__gethex+0x12a>
 8007fee:	1e71      	subs	r1, r6, #1
 8007ff0:	4620      	mov	r0, r4
 8007ff2:	f000 feb4 	bl	8008d5e <__any_on>
 8007ff6:	2800      	cmp	r0, #0
 8007ff8:	d1ed      	bne.n	8007fd6 <__gethex+0x2ca>
 8007ffa:	ee18 0a10 	vmov	r0, s16
 8007ffe:	4621      	mov	r1, r4
 8008000:	f000 fa52 	bl	80084a8 <_Bfree>
 8008004:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008006:	2300      	movs	r3, #0
 8008008:	6013      	str	r3, [r2, #0]
 800800a:	2750      	movs	r7, #80	; 0x50
 800800c:	e713      	b.n	8007e36 <__gethex+0x12a>
 800800e:	bf00      	nop
 8008010:	08009f94 	.word	0x08009f94
 8008014:	08009f1c 	.word	0x08009f1c
 8008018:	08009f2d 	.word	0x08009f2d
 800801c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800801e:	2b00      	cmp	r3, #0
 8008020:	d1eb      	bne.n	8007ffa <__gethex+0x2ee>
 8008022:	e7d8      	b.n	8007fd6 <__gethex+0x2ca>
 8008024:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008026:	2b00      	cmp	r3, #0
 8008028:	d1d5      	bne.n	8007fd6 <__gethex+0x2ca>
 800802a:	e7e6      	b.n	8007ffa <__gethex+0x2ee>
 800802c:	1e6f      	subs	r7, r5, #1
 800802e:	f1ba 0f00 	cmp.w	sl, #0
 8008032:	d131      	bne.n	8008098 <__gethex+0x38c>
 8008034:	b127      	cbz	r7, 8008040 <__gethex+0x334>
 8008036:	4639      	mov	r1, r7
 8008038:	4620      	mov	r0, r4
 800803a:	f000 fe90 	bl	8008d5e <__any_on>
 800803e:	4682      	mov	sl, r0
 8008040:	117b      	asrs	r3, r7, #5
 8008042:	2101      	movs	r1, #1
 8008044:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008048:	f007 071f 	and.w	r7, r7, #31
 800804c:	fa01 f707 	lsl.w	r7, r1, r7
 8008050:	421f      	tst	r7, r3
 8008052:	4629      	mov	r1, r5
 8008054:	4620      	mov	r0, r4
 8008056:	bf18      	it	ne
 8008058:	f04a 0a02 	orrne.w	sl, sl, #2
 800805c:	1b76      	subs	r6, r6, r5
 800805e:	f7ff fdee 	bl	8007c3e <rshift>
 8008062:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008066:	2702      	movs	r7, #2
 8008068:	f1ba 0f00 	cmp.w	sl, #0
 800806c:	d048      	beq.n	8008100 <__gethex+0x3f4>
 800806e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008072:	2b02      	cmp	r3, #2
 8008074:	d015      	beq.n	80080a2 <__gethex+0x396>
 8008076:	2b03      	cmp	r3, #3
 8008078:	d017      	beq.n	80080aa <__gethex+0x39e>
 800807a:	2b01      	cmp	r3, #1
 800807c:	d109      	bne.n	8008092 <__gethex+0x386>
 800807e:	f01a 0f02 	tst.w	sl, #2
 8008082:	d006      	beq.n	8008092 <__gethex+0x386>
 8008084:	f8d9 0000 	ldr.w	r0, [r9]
 8008088:	ea4a 0a00 	orr.w	sl, sl, r0
 800808c:	f01a 0f01 	tst.w	sl, #1
 8008090:	d10e      	bne.n	80080b0 <__gethex+0x3a4>
 8008092:	f047 0710 	orr.w	r7, r7, #16
 8008096:	e033      	b.n	8008100 <__gethex+0x3f4>
 8008098:	f04f 0a01 	mov.w	sl, #1
 800809c:	e7d0      	b.n	8008040 <__gethex+0x334>
 800809e:	2701      	movs	r7, #1
 80080a0:	e7e2      	b.n	8008068 <__gethex+0x35c>
 80080a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80080a4:	f1c3 0301 	rsb	r3, r3, #1
 80080a8:	9315      	str	r3, [sp, #84]	; 0x54
 80080aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d0f0      	beq.n	8008092 <__gethex+0x386>
 80080b0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80080b4:	f104 0314 	add.w	r3, r4, #20
 80080b8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80080bc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80080c0:	f04f 0c00 	mov.w	ip, #0
 80080c4:	4618      	mov	r0, r3
 80080c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80080ca:	f1b2 3fff 	cmp.w	r2, #4294967295
 80080ce:	d01c      	beq.n	800810a <__gethex+0x3fe>
 80080d0:	3201      	adds	r2, #1
 80080d2:	6002      	str	r2, [r0, #0]
 80080d4:	2f02      	cmp	r7, #2
 80080d6:	f104 0314 	add.w	r3, r4, #20
 80080da:	d13f      	bne.n	800815c <__gethex+0x450>
 80080dc:	f8d8 2000 	ldr.w	r2, [r8]
 80080e0:	3a01      	subs	r2, #1
 80080e2:	42b2      	cmp	r2, r6
 80080e4:	d10a      	bne.n	80080fc <__gethex+0x3f0>
 80080e6:	1171      	asrs	r1, r6, #5
 80080e8:	2201      	movs	r2, #1
 80080ea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80080ee:	f006 061f 	and.w	r6, r6, #31
 80080f2:	fa02 f606 	lsl.w	r6, r2, r6
 80080f6:	421e      	tst	r6, r3
 80080f8:	bf18      	it	ne
 80080fa:	4617      	movne	r7, r2
 80080fc:	f047 0720 	orr.w	r7, r7, #32
 8008100:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008102:	601c      	str	r4, [r3, #0]
 8008104:	9b04      	ldr	r3, [sp, #16]
 8008106:	601d      	str	r5, [r3, #0]
 8008108:	e695      	b.n	8007e36 <__gethex+0x12a>
 800810a:	4299      	cmp	r1, r3
 800810c:	f843 cc04 	str.w	ip, [r3, #-4]
 8008110:	d8d8      	bhi.n	80080c4 <__gethex+0x3b8>
 8008112:	68a3      	ldr	r3, [r4, #8]
 8008114:	459b      	cmp	fp, r3
 8008116:	db19      	blt.n	800814c <__gethex+0x440>
 8008118:	6861      	ldr	r1, [r4, #4]
 800811a:	ee18 0a10 	vmov	r0, s16
 800811e:	3101      	adds	r1, #1
 8008120:	f000 f982 	bl	8008428 <_Balloc>
 8008124:	4681      	mov	r9, r0
 8008126:	b918      	cbnz	r0, 8008130 <__gethex+0x424>
 8008128:	4b1a      	ldr	r3, [pc, #104]	; (8008194 <__gethex+0x488>)
 800812a:	4602      	mov	r2, r0
 800812c:	2184      	movs	r1, #132	; 0x84
 800812e:	e6a8      	b.n	8007e82 <__gethex+0x176>
 8008130:	6922      	ldr	r2, [r4, #16]
 8008132:	3202      	adds	r2, #2
 8008134:	f104 010c 	add.w	r1, r4, #12
 8008138:	0092      	lsls	r2, r2, #2
 800813a:	300c      	adds	r0, #12
 800813c:	f7fe fa6a 	bl	8006614 <memcpy>
 8008140:	4621      	mov	r1, r4
 8008142:	ee18 0a10 	vmov	r0, s16
 8008146:	f000 f9af 	bl	80084a8 <_Bfree>
 800814a:	464c      	mov	r4, r9
 800814c:	6923      	ldr	r3, [r4, #16]
 800814e:	1c5a      	adds	r2, r3, #1
 8008150:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008154:	6122      	str	r2, [r4, #16]
 8008156:	2201      	movs	r2, #1
 8008158:	615a      	str	r2, [r3, #20]
 800815a:	e7bb      	b.n	80080d4 <__gethex+0x3c8>
 800815c:	6922      	ldr	r2, [r4, #16]
 800815e:	455a      	cmp	r2, fp
 8008160:	dd0b      	ble.n	800817a <__gethex+0x46e>
 8008162:	2101      	movs	r1, #1
 8008164:	4620      	mov	r0, r4
 8008166:	f7ff fd6a 	bl	8007c3e <rshift>
 800816a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800816e:	3501      	adds	r5, #1
 8008170:	42ab      	cmp	r3, r5
 8008172:	f6ff aed0 	blt.w	8007f16 <__gethex+0x20a>
 8008176:	2701      	movs	r7, #1
 8008178:	e7c0      	b.n	80080fc <__gethex+0x3f0>
 800817a:	f016 061f 	ands.w	r6, r6, #31
 800817e:	d0fa      	beq.n	8008176 <__gethex+0x46a>
 8008180:	449a      	add	sl, r3
 8008182:	f1c6 0620 	rsb	r6, r6, #32
 8008186:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800818a:	f000 fa43 	bl	8008614 <__hi0bits>
 800818e:	42b0      	cmp	r0, r6
 8008190:	dbe7      	blt.n	8008162 <__gethex+0x456>
 8008192:	e7f0      	b.n	8008176 <__gethex+0x46a>
 8008194:	08009f1c 	.word	0x08009f1c

08008198 <L_shift>:
 8008198:	f1c2 0208 	rsb	r2, r2, #8
 800819c:	0092      	lsls	r2, r2, #2
 800819e:	b570      	push	{r4, r5, r6, lr}
 80081a0:	f1c2 0620 	rsb	r6, r2, #32
 80081a4:	6843      	ldr	r3, [r0, #4]
 80081a6:	6804      	ldr	r4, [r0, #0]
 80081a8:	fa03 f506 	lsl.w	r5, r3, r6
 80081ac:	432c      	orrs	r4, r5
 80081ae:	40d3      	lsrs	r3, r2
 80081b0:	6004      	str	r4, [r0, #0]
 80081b2:	f840 3f04 	str.w	r3, [r0, #4]!
 80081b6:	4288      	cmp	r0, r1
 80081b8:	d3f4      	bcc.n	80081a4 <L_shift+0xc>
 80081ba:	bd70      	pop	{r4, r5, r6, pc}

080081bc <__match>:
 80081bc:	b530      	push	{r4, r5, lr}
 80081be:	6803      	ldr	r3, [r0, #0]
 80081c0:	3301      	adds	r3, #1
 80081c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081c6:	b914      	cbnz	r4, 80081ce <__match+0x12>
 80081c8:	6003      	str	r3, [r0, #0]
 80081ca:	2001      	movs	r0, #1
 80081cc:	bd30      	pop	{r4, r5, pc}
 80081ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081d2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80081d6:	2d19      	cmp	r5, #25
 80081d8:	bf98      	it	ls
 80081da:	3220      	addls	r2, #32
 80081dc:	42a2      	cmp	r2, r4
 80081de:	d0f0      	beq.n	80081c2 <__match+0x6>
 80081e0:	2000      	movs	r0, #0
 80081e2:	e7f3      	b.n	80081cc <__match+0x10>

080081e4 <__hexnan>:
 80081e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081e8:	680b      	ldr	r3, [r1, #0]
 80081ea:	6801      	ldr	r1, [r0, #0]
 80081ec:	115e      	asrs	r6, r3, #5
 80081ee:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80081f2:	f013 031f 	ands.w	r3, r3, #31
 80081f6:	b087      	sub	sp, #28
 80081f8:	bf18      	it	ne
 80081fa:	3604      	addne	r6, #4
 80081fc:	2500      	movs	r5, #0
 80081fe:	1f37      	subs	r7, r6, #4
 8008200:	4682      	mov	sl, r0
 8008202:	4690      	mov	r8, r2
 8008204:	9301      	str	r3, [sp, #4]
 8008206:	f846 5c04 	str.w	r5, [r6, #-4]
 800820a:	46b9      	mov	r9, r7
 800820c:	463c      	mov	r4, r7
 800820e:	9502      	str	r5, [sp, #8]
 8008210:	46ab      	mov	fp, r5
 8008212:	784a      	ldrb	r2, [r1, #1]
 8008214:	1c4b      	adds	r3, r1, #1
 8008216:	9303      	str	r3, [sp, #12]
 8008218:	b342      	cbz	r2, 800826c <__hexnan+0x88>
 800821a:	4610      	mov	r0, r2
 800821c:	9105      	str	r1, [sp, #20]
 800821e:	9204      	str	r2, [sp, #16]
 8008220:	f7ff fd5f 	bl	8007ce2 <__hexdig_fun>
 8008224:	2800      	cmp	r0, #0
 8008226:	d14f      	bne.n	80082c8 <__hexnan+0xe4>
 8008228:	9a04      	ldr	r2, [sp, #16]
 800822a:	9905      	ldr	r1, [sp, #20]
 800822c:	2a20      	cmp	r2, #32
 800822e:	d818      	bhi.n	8008262 <__hexnan+0x7e>
 8008230:	9b02      	ldr	r3, [sp, #8]
 8008232:	459b      	cmp	fp, r3
 8008234:	dd13      	ble.n	800825e <__hexnan+0x7a>
 8008236:	454c      	cmp	r4, r9
 8008238:	d206      	bcs.n	8008248 <__hexnan+0x64>
 800823a:	2d07      	cmp	r5, #7
 800823c:	dc04      	bgt.n	8008248 <__hexnan+0x64>
 800823e:	462a      	mov	r2, r5
 8008240:	4649      	mov	r1, r9
 8008242:	4620      	mov	r0, r4
 8008244:	f7ff ffa8 	bl	8008198 <L_shift>
 8008248:	4544      	cmp	r4, r8
 800824a:	d950      	bls.n	80082ee <__hexnan+0x10a>
 800824c:	2300      	movs	r3, #0
 800824e:	f1a4 0904 	sub.w	r9, r4, #4
 8008252:	f844 3c04 	str.w	r3, [r4, #-4]
 8008256:	f8cd b008 	str.w	fp, [sp, #8]
 800825a:	464c      	mov	r4, r9
 800825c:	461d      	mov	r5, r3
 800825e:	9903      	ldr	r1, [sp, #12]
 8008260:	e7d7      	b.n	8008212 <__hexnan+0x2e>
 8008262:	2a29      	cmp	r2, #41	; 0x29
 8008264:	d156      	bne.n	8008314 <__hexnan+0x130>
 8008266:	3102      	adds	r1, #2
 8008268:	f8ca 1000 	str.w	r1, [sl]
 800826c:	f1bb 0f00 	cmp.w	fp, #0
 8008270:	d050      	beq.n	8008314 <__hexnan+0x130>
 8008272:	454c      	cmp	r4, r9
 8008274:	d206      	bcs.n	8008284 <__hexnan+0xa0>
 8008276:	2d07      	cmp	r5, #7
 8008278:	dc04      	bgt.n	8008284 <__hexnan+0xa0>
 800827a:	462a      	mov	r2, r5
 800827c:	4649      	mov	r1, r9
 800827e:	4620      	mov	r0, r4
 8008280:	f7ff ff8a 	bl	8008198 <L_shift>
 8008284:	4544      	cmp	r4, r8
 8008286:	d934      	bls.n	80082f2 <__hexnan+0x10e>
 8008288:	f1a8 0204 	sub.w	r2, r8, #4
 800828c:	4623      	mov	r3, r4
 800828e:	f853 1b04 	ldr.w	r1, [r3], #4
 8008292:	f842 1f04 	str.w	r1, [r2, #4]!
 8008296:	429f      	cmp	r7, r3
 8008298:	d2f9      	bcs.n	800828e <__hexnan+0xaa>
 800829a:	1b3b      	subs	r3, r7, r4
 800829c:	f023 0303 	bic.w	r3, r3, #3
 80082a0:	3304      	adds	r3, #4
 80082a2:	3401      	adds	r4, #1
 80082a4:	3e03      	subs	r6, #3
 80082a6:	42b4      	cmp	r4, r6
 80082a8:	bf88      	it	hi
 80082aa:	2304      	movhi	r3, #4
 80082ac:	4443      	add	r3, r8
 80082ae:	2200      	movs	r2, #0
 80082b0:	f843 2b04 	str.w	r2, [r3], #4
 80082b4:	429f      	cmp	r7, r3
 80082b6:	d2fb      	bcs.n	80082b0 <__hexnan+0xcc>
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	b91b      	cbnz	r3, 80082c4 <__hexnan+0xe0>
 80082bc:	4547      	cmp	r7, r8
 80082be:	d127      	bne.n	8008310 <__hexnan+0x12c>
 80082c0:	2301      	movs	r3, #1
 80082c2:	603b      	str	r3, [r7, #0]
 80082c4:	2005      	movs	r0, #5
 80082c6:	e026      	b.n	8008316 <__hexnan+0x132>
 80082c8:	3501      	adds	r5, #1
 80082ca:	2d08      	cmp	r5, #8
 80082cc:	f10b 0b01 	add.w	fp, fp, #1
 80082d0:	dd06      	ble.n	80082e0 <__hexnan+0xfc>
 80082d2:	4544      	cmp	r4, r8
 80082d4:	d9c3      	bls.n	800825e <__hexnan+0x7a>
 80082d6:	2300      	movs	r3, #0
 80082d8:	f844 3c04 	str.w	r3, [r4, #-4]
 80082dc:	2501      	movs	r5, #1
 80082de:	3c04      	subs	r4, #4
 80082e0:	6822      	ldr	r2, [r4, #0]
 80082e2:	f000 000f 	and.w	r0, r0, #15
 80082e6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80082ea:	6022      	str	r2, [r4, #0]
 80082ec:	e7b7      	b.n	800825e <__hexnan+0x7a>
 80082ee:	2508      	movs	r5, #8
 80082f0:	e7b5      	b.n	800825e <__hexnan+0x7a>
 80082f2:	9b01      	ldr	r3, [sp, #4]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d0df      	beq.n	80082b8 <__hexnan+0xd4>
 80082f8:	f04f 32ff 	mov.w	r2, #4294967295
 80082fc:	f1c3 0320 	rsb	r3, r3, #32
 8008300:	fa22 f303 	lsr.w	r3, r2, r3
 8008304:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008308:	401a      	ands	r2, r3
 800830a:	f846 2c04 	str.w	r2, [r6, #-4]
 800830e:	e7d3      	b.n	80082b8 <__hexnan+0xd4>
 8008310:	3f04      	subs	r7, #4
 8008312:	e7d1      	b.n	80082b8 <__hexnan+0xd4>
 8008314:	2004      	movs	r0, #4
 8008316:	b007      	add	sp, #28
 8008318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800831c <__retarget_lock_init_recursive>:
 800831c:	4770      	bx	lr

0800831e <__retarget_lock_acquire_recursive>:
 800831e:	4770      	bx	lr

08008320 <__retarget_lock_release_recursive>:
 8008320:	4770      	bx	lr

08008322 <__swhatbuf_r>:
 8008322:	b570      	push	{r4, r5, r6, lr}
 8008324:	460e      	mov	r6, r1
 8008326:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800832a:	2900      	cmp	r1, #0
 800832c:	b096      	sub	sp, #88	; 0x58
 800832e:	4614      	mov	r4, r2
 8008330:	461d      	mov	r5, r3
 8008332:	da07      	bge.n	8008344 <__swhatbuf_r+0x22>
 8008334:	2300      	movs	r3, #0
 8008336:	602b      	str	r3, [r5, #0]
 8008338:	89b3      	ldrh	r3, [r6, #12]
 800833a:	061a      	lsls	r2, r3, #24
 800833c:	d410      	bmi.n	8008360 <__swhatbuf_r+0x3e>
 800833e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008342:	e00e      	b.n	8008362 <__swhatbuf_r+0x40>
 8008344:	466a      	mov	r2, sp
 8008346:	f001 fa8d 	bl	8009864 <_fstat_r>
 800834a:	2800      	cmp	r0, #0
 800834c:	dbf2      	blt.n	8008334 <__swhatbuf_r+0x12>
 800834e:	9a01      	ldr	r2, [sp, #4]
 8008350:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008354:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008358:	425a      	negs	r2, r3
 800835a:	415a      	adcs	r2, r3
 800835c:	602a      	str	r2, [r5, #0]
 800835e:	e7ee      	b.n	800833e <__swhatbuf_r+0x1c>
 8008360:	2340      	movs	r3, #64	; 0x40
 8008362:	2000      	movs	r0, #0
 8008364:	6023      	str	r3, [r4, #0]
 8008366:	b016      	add	sp, #88	; 0x58
 8008368:	bd70      	pop	{r4, r5, r6, pc}
	...

0800836c <__smakebuf_r>:
 800836c:	898b      	ldrh	r3, [r1, #12]
 800836e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008370:	079d      	lsls	r5, r3, #30
 8008372:	4606      	mov	r6, r0
 8008374:	460c      	mov	r4, r1
 8008376:	d507      	bpl.n	8008388 <__smakebuf_r+0x1c>
 8008378:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800837c:	6023      	str	r3, [r4, #0]
 800837e:	6123      	str	r3, [r4, #16]
 8008380:	2301      	movs	r3, #1
 8008382:	6163      	str	r3, [r4, #20]
 8008384:	b002      	add	sp, #8
 8008386:	bd70      	pop	{r4, r5, r6, pc}
 8008388:	ab01      	add	r3, sp, #4
 800838a:	466a      	mov	r2, sp
 800838c:	f7ff ffc9 	bl	8008322 <__swhatbuf_r>
 8008390:	9900      	ldr	r1, [sp, #0]
 8008392:	4605      	mov	r5, r0
 8008394:	4630      	mov	r0, r6
 8008396:	f7fe f9a3 	bl	80066e0 <_malloc_r>
 800839a:	b948      	cbnz	r0, 80083b0 <__smakebuf_r+0x44>
 800839c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083a0:	059a      	lsls	r2, r3, #22
 80083a2:	d4ef      	bmi.n	8008384 <__smakebuf_r+0x18>
 80083a4:	f023 0303 	bic.w	r3, r3, #3
 80083a8:	f043 0302 	orr.w	r3, r3, #2
 80083ac:	81a3      	strh	r3, [r4, #12]
 80083ae:	e7e3      	b.n	8008378 <__smakebuf_r+0xc>
 80083b0:	4b0d      	ldr	r3, [pc, #52]	; (80083e8 <__smakebuf_r+0x7c>)
 80083b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80083b4:	89a3      	ldrh	r3, [r4, #12]
 80083b6:	6020      	str	r0, [r4, #0]
 80083b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083bc:	81a3      	strh	r3, [r4, #12]
 80083be:	9b00      	ldr	r3, [sp, #0]
 80083c0:	6163      	str	r3, [r4, #20]
 80083c2:	9b01      	ldr	r3, [sp, #4]
 80083c4:	6120      	str	r0, [r4, #16]
 80083c6:	b15b      	cbz	r3, 80083e0 <__smakebuf_r+0x74>
 80083c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083cc:	4630      	mov	r0, r6
 80083ce:	f001 fa5b 	bl	8009888 <_isatty_r>
 80083d2:	b128      	cbz	r0, 80083e0 <__smakebuf_r+0x74>
 80083d4:	89a3      	ldrh	r3, [r4, #12]
 80083d6:	f023 0303 	bic.w	r3, r3, #3
 80083da:	f043 0301 	orr.w	r3, r3, #1
 80083de:	81a3      	strh	r3, [r4, #12]
 80083e0:	89a0      	ldrh	r0, [r4, #12]
 80083e2:	4305      	orrs	r5, r0
 80083e4:	81a5      	strh	r5, [r4, #12]
 80083e6:	e7cd      	b.n	8008384 <__smakebuf_r+0x18>
 80083e8:	08007a9d 	.word	0x08007a9d

080083ec <__ascii_mbtowc>:
 80083ec:	b082      	sub	sp, #8
 80083ee:	b901      	cbnz	r1, 80083f2 <__ascii_mbtowc+0x6>
 80083f0:	a901      	add	r1, sp, #4
 80083f2:	b142      	cbz	r2, 8008406 <__ascii_mbtowc+0x1a>
 80083f4:	b14b      	cbz	r3, 800840a <__ascii_mbtowc+0x1e>
 80083f6:	7813      	ldrb	r3, [r2, #0]
 80083f8:	600b      	str	r3, [r1, #0]
 80083fa:	7812      	ldrb	r2, [r2, #0]
 80083fc:	1e10      	subs	r0, r2, #0
 80083fe:	bf18      	it	ne
 8008400:	2001      	movne	r0, #1
 8008402:	b002      	add	sp, #8
 8008404:	4770      	bx	lr
 8008406:	4610      	mov	r0, r2
 8008408:	e7fb      	b.n	8008402 <__ascii_mbtowc+0x16>
 800840a:	f06f 0001 	mvn.w	r0, #1
 800840e:	e7f8      	b.n	8008402 <__ascii_mbtowc+0x16>

08008410 <__malloc_lock>:
 8008410:	4801      	ldr	r0, [pc, #4]	; (8008418 <__malloc_lock+0x8>)
 8008412:	f7ff bf84 	b.w	800831e <__retarget_lock_acquire_recursive>
 8008416:	bf00      	nop
 8008418:	20001938 	.word	0x20001938

0800841c <__malloc_unlock>:
 800841c:	4801      	ldr	r0, [pc, #4]	; (8008424 <__malloc_unlock+0x8>)
 800841e:	f7ff bf7f 	b.w	8008320 <__retarget_lock_release_recursive>
 8008422:	bf00      	nop
 8008424:	20001938 	.word	0x20001938

08008428 <_Balloc>:
 8008428:	b570      	push	{r4, r5, r6, lr}
 800842a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800842c:	4604      	mov	r4, r0
 800842e:	460d      	mov	r5, r1
 8008430:	b976      	cbnz	r6, 8008450 <_Balloc+0x28>
 8008432:	2010      	movs	r0, #16
 8008434:	f7fe f8de 	bl	80065f4 <malloc>
 8008438:	4602      	mov	r2, r0
 800843a:	6260      	str	r0, [r4, #36]	; 0x24
 800843c:	b920      	cbnz	r0, 8008448 <_Balloc+0x20>
 800843e:	4b18      	ldr	r3, [pc, #96]	; (80084a0 <_Balloc+0x78>)
 8008440:	4818      	ldr	r0, [pc, #96]	; (80084a4 <_Balloc+0x7c>)
 8008442:	2166      	movs	r1, #102	; 0x66
 8008444:	f001 f9ce 	bl	80097e4 <__assert_func>
 8008448:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800844c:	6006      	str	r6, [r0, #0]
 800844e:	60c6      	str	r6, [r0, #12]
 8008450:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008452:	68f3      	ldr	r3, [r6, #12]
 8008454:	b183      	cbz	r3, 8008478 <_Balloc+0x50>
 8008456:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008458:	68db      	ldr	r3, [r3, #12]
 800845a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800845e:	b9b8      	cbnz	r0, 8008490 <_Balloc+0x68>
 8008460:	2101      	movs	r1, #1
 8008462:	fa01 f605 	lsl.w	r6, r1, r5
 8008466:	1d72      	adds	r2, r6, #5
 8008468:	0092      	lsls	r2, r2, #2
 800846a:	4620      	mov	r0, r4
 800846c:	f000 fc98 	bl	8008da0 <_calloc_r>
 8008470:	b160      	cbz	r0, 800848c <_Balloc+0x64>
 8008472:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008476:	e00e      	b.n	8008496 <_Balloc+0x6e>
 8008478:	2221      	movs	r2, #33	; 0x21
 800847a:	2104      	movs	r1, #4
 800847c:	4620      	mov	r0, r4
 800847e:	f000 fc8f 	bl	8008da0 <_calloc_r>
 8008482:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008484:	60f0      	str	r0, [r6, #12]
 8008486:	68db      	ldr	r3, [r3, #12]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d1e4      	bne.n	8008456 <_Balloc+0x2e>
 800848c:	2000      	movs	r0, #0
 800848e:	bd70      	pop	{r4, r5, r6, pc}
 8008490:	6802      	ldr	r2, [r0, #0]
 8008492:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008496:	2300      	movs	r3, #0
 8008498:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800849c:	e7f7      	b.n	800848e <_Balloc+0x66>
 800849e:	bf00      	nop
 80084a0:	08009fa6 	.word	0x08009fa6
 80084a4:	08009fbd 	.word	0x08009fbd

080084a8 <_Bfree>:
 80084a8:	b570      	push	{r4, r5, r6, lr}
 80084aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80084ac:	4605      	mov	r5, r0
 80084ae:	460c      	mov	r4, r1
 80084b0:	b976      	cbnz	r6, 80084d0 <_Bfree+0x28>
 80084b2:	2010      	movs	r0, #16
 80084b4:	f7fe f89e 	bl	80065f4 <malloc>
 80084b8:	4602      	mov	r2, r0
 80084ba:	6268      	str	r0, [r5, #36]	; 0x24
 80084bc:	b920      	cbnz	r0, 80084c8 <_Bfree+0x20>
 80084be:	4b09      	ldr	r3, [pc, #36]	; (80084e4 <_Bfree+0x3c>)
 80084c0:	4809      	ldr	r0, [pc, #36]	; (80084e8 <_Bfree+0x40>)
 80084c2:	218a      	movs	r1, #138	; 0x8a
 80084c4:	f001 f98e 	bl	80097e4 <__assert_func>
 80084c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80084cc:	6006      	str	r6, [r0, #0]
 80084ce:	60c6      	str	r6, [r0, #12]
 80084d0:	b13c      	cbz	r4, 80084e2 <_Bfree+0x3a>
 80084d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80084d4:	6862      	ldr	r2, [r4, #4]
 80084d6:	68db      	ldr	r3, [r3, #12]
 80084d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80084dc:	6021      	str	r1, [r4, #0]
 80084de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80084e2:	bd70      	pop	{r4, r5, r6, pc}
 80084e4:	08009fa6 	.word	0x08009fa6
 80084e8:	08009fbd 	.word	0x08009fbd

080084ec <__multadd>:
 80084ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084f0:	690e      	ldr	r6, [r1, #16]
 80084f2:	4607      	mov	r7, r0
 80084f4:	4698      	mov	r8, r3
 80084f6:	460c      	mov	r4, r1
 80084f8:	f101 0014 	add.w	r0, r1, #20
 80084fc:	2300      	movs	r3, #0
 80084fe:	6805      	ldr	r5, [r0, #0]
 8008500:	b2a9      	uxth	r1, r5
 8008502:	fb02 8101 	mla	r1, r2, r1, r8
 8008506:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800850a:	0c2d      	lsrs	r5, r5, #16
 800850c:	fb02 c505 	mla	r5, r2, r5, ip
 8008510:	b289      	uxth	r1, r1
 8008512:	3301      	adds	r3, #1
 8008514:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008518:	429e      	cmp	r6, r3
 800851a:	f840 1b04 	str.w	r1, [r0], #4
 800851e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008522:	dcec      	bgt.n	80084fe <__multadd+0x12>
 8008524:	f1b8 0f00 	cmp.w	r8, #0
 8008528:	d022      	beq.n	8008570 <__multadd+0x84>
 800852a:	68a3      	ldr	r3, [r4, #8]
 800852c:	42b3      	cmp	r3, r6
 800852e:	dc19      	bgt.n	8008564 <__multadd+0x78>
 8008530:	6861      	ldr	r1, [r4, #4]
 8008532:	4638      	mov	r0, r7
 8008534:	3101      	adds	r1, #1
 8008536:	f7ff ff77 	bl	8008428 <_Balloc>
 800853a:	4605      	mov	r5, r0
 800853c:	b928      	cbnz	r0, 800854a <__multadd+0x5e>
 800853e:	4602      	mov	r2, r0
 8008540:	4b0d      	ldr	r3, [pc, #52]	; (8008578 <__multadd+0x8c>)
 8008542:	480e      	ldr	r0, [pc, #56]	; (800857c <__multadd+0x90>)
 8008544:	21b5      	movs	r1, #181	; 0xb5
 8008546:	f001 f94d 	bl	80097e4 <__assert_func>
 800854a:	6922      	ldr	r2, [r4, #16]
 800854c:	3202      	adds	r2, #2
 800854e:	f104 010c 	add.w	r1, r4, #12
 8008552:	0092      	lsls	r2, r2, #2
 8008554:	300c      	adds	r0, #12
 8008556:	f7fe f85d 	bl	8006614 <memcpy>
 800855a:	4621      	mov	r1, r4
 800855c:	4638      	mov	r0, r7
 800855e:	f7ff ffa3 	bl	80084a8 <_Bfree>
 8008562:	462c      	mov	r4, r5
 8008564:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008568:	3601      	adds	r6, #1
 800856a:	f8c3 8014 	str.w	r8, [r3, #20]
 800856e:	6126      	str	r6, [r4, #16]
 8008570:	4620      	mov	r0, r4
 8008572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008576:	bf00      	nop
 8008578:	08009f1c 	.word	0x08009f1c
 800857c:	08009fbd 	.word	0x08009fbd

08008580 <__s2b>:
 8008580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008584:	460c      	mov	r4, r1
 8008586:	4615      	mov	r5, r2
 8008588:	461f      	mov	r7, r3
 800858a:	2209      	movs	r2, #9
 800858c:	3308      	adds	r3, #8
 800858e:	4606      	mov	r6, r0
 8008590:	fb93 f3f2 	sdiv	r3, r3, r2
 8008594:	2100      	movs	r1, #0
 8008596:	2201      	movs	r2, #1
 8008598:	429a      	cmp	r2, r3
 800859a:	db09      	blt.n	80085b0 <__s2b+0x30>
 800859c:	4630      	mov	r0, r6
 800859e:	f7ff ff43 	bl	8008428 <_Balloc>
 80085a2:	b940      	cbnz	r0, 80085b6 <__s2b+0x36>
 80085a4:	4602      	mov	r2, r0
 80085a6:	4b19      	ldr	r3, [pc, #100]	; (800860c <__s2b+0x8c>)
 80085a8:	4819      	ldr	r0, [pc, #100]	; (8008610 <__s2b+0x90>)
 80085aa:	21ce      	movs	r1, #206	; 0xce
 80085ac:	f001 f91a 	bl	80097e4 <__assert_func>
 80085b0:	0052      	lsls	r2, r2, #1
 80085b2:	3101      	adds	r1, #1
 80085b4:	e7f0      	b.n	8008598 <__s2b+0x18>
 80085b6:	9b08      	ldr	r3, [sp, #32]
 80085b8:	6143      	str	r3, [r0, #20]
 80085ba:	2d09      	cmp	r5, #9
 80085bc:	f04f 0301 	mov.w	r3, #1
 80085c0:	6103      	str	r3, [r0, #16]
 80085c2:	dd16      	ble.n	80085f2 <__s2b+0x72>
 80085c4:	f104 0909 	add.w	r9, r4, #9
 80085c8:	46c8      	mov	r8, r9
 80085ca:	442c      	add	r4, r5
 80085cc:	f818 3b01 	ldrb.w	r3, [r8], #1
 80085d0:	4601      	mov	r1, r0
 80085d2:	3b30      	subs	r3, #48	; 0x30
 80085d4:	220a      	movs	r2, #10
 80085d6:	4630      	mov	r0, r6
 80085d8:	f7ff ff88 	bl	80084ec <__multadd>
 80085dc:	45a0      	cmp	r8, r4
 80085de:	d1f5      	bne.n	80085cc <__s2b+0x4c>
 80085e0:	f1a5 0408 	sub.w	r4, r5, #8
 80085e4:	444c      	add	r4, r9
 80085e6:	1b2d      	subs	r5, r5, r4
 80085e8:	1963      	adds	r3, r4, r5
 80085ea:	42bb      	cmp	r3, r7
 80085ec:	db04      	blt.n	80085f8 <__s2b+0x78>
 80085ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085f2:	340a      	adds	r4, #10
 80085f4:	2509      	movs	r5, #9
 80085f6:	e7f6      	b.n	80085e6 <__s2b+0x66>
 80085f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80085fc:	4601      	mov	r1, r0
 80085fe:	3b30      	subs	r3, #48	; 0x30
 8008600:	220a      	movs	r2, #10
 8008602:	4630      	mov	r0, r6
 8008604:	f7ff ff72 	bl	80084ec <__multadd>
 8008608:	e7ee      	b.n	80085e8 <__s2b+0x68>
 800860a:	bf00      	nop
 800860c:	08009f1c 	.word	0x08009f1c
 8008610:	08009fbd 	.word	0x08009fbd

08008614 <__hi0bits>:
 8008614:	0c03      	lsrs	r3, r0, #16
 8008616:	041b      	lsls	r3, r3, #16
 8008618:	b9d3      	cbnz	r3, 8008650 <__hi0bits+0x3c>
 800861a:	0400      	lsls	r0, r0, #16
 800861c:	2310      	movs	r3, #16
 800861e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008622:	bf04      	itt	eq
 8008624:	0200      	lsleq	r0, r0, #8
 8008626:	3308      	addeq	r3, #8
 8008628:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800862c:	bf04      	itt	eq
 800862e:	0100      	lsleq	r0, r0, #4
 8008630:	3304      	addeq	r3, #4
 8008632:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008636:	bf04      	itt	eq
 8008638:	0080      	lsleq	r0, r0, #2
 800863a:	3302      	addeq	r3, #2
 800863c:	2800      	cmp	r0, #0
 800863e:	db05      	blt.n	800864c <__hi0bits+0x38>
 8008640:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008644:	f103 0301 	add.w	r3, r3, #1
 8008648:	bf08      	it	eq
 800864a:	2320      	moveq	r3, #32
 800864c:	4618      	mov	r0, r3
 800864e:	4770      	bx	lr
 8008650:	2300      	movs	r3, #0
 8008652:	e7e4      	b.n	800861e <__hi0bits+0xa>

08008654 <__lo0bits>:
 8008654:	6803      	ldr	r3, [r0, #0]
 8008656:	f013 0207 	ands.w	r2, r3, #7
 800865a:	4601      	mov	r1, r0
 800865c:	d00b      	beq.n	8008676 <__lo0bits+0x22>
 800865e:	07da      	lsls	r2, r3, #31
 8008660:	d424      	bmi.n	80086ac <__lo0bits+0x58>
 8008662:	0798      	lsls	r0, r3, #30
 8008664:	bf49      	itett	mi
 8008666:	085b      	lsrmi	r3, r3, #1
 8008668:	089b      	lsrpl	r3, r3, #2
 800866a:	2001      	movmi	r0, #1
 800866c:	600b      	strmi	r3, [r1, #0]
 800866e:	bf5c      	itt	pl
 8008670:	600b      	strpl	r3, [r1, #0]
 8008672:	2002      	movpl	r0, #2
 8008674:	4770      	bx	lr
 8008676:	b298      	uxth	r0, r3
 8008678:	b9b0      	cbnz	r0, 80086a8 <__lo0bits+0x54>
 800867a:	0c1b      	lsrs	r3, r3, #16
 800867c:	2010      	movs	r0, #16
 800867e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008682:	bf04      	itt	eq
 8008684:	0a1b      	lsreq	r3, r3, #8
 8008686:	3008      	addeq	r0, #8
 8008688:	071a      	lsls	r2, r3, #28
 800868a:	bf04      	itt	eq
 800868c:	091b      	lsreq	r3, r3, #4
 800868e:	3004      	addeq	r0, #4
 8008690:	079a      	lsls	r2, r3, #30
 8008692:	bf04      	itt	eq
 8008694:	089b      	lsreq	r3, r3, #2
 8008696:	3002      	addeq	r0, #2
 8008698:	07da      	lsls	r2, r3, #31
 800869a:	d403      	bmi.n	80086a4 <__lo0bits+0x50>
 800869c:	085b      	lsrs	r3, r3, #1
 800869e:	f100 0001 	add.w	r0, r0, #1
 80086a2:	d005      	beq.n	80086b0 <__lo0bits+0x5c>
 80086a4:	600b      	str	r3, [r1, #0]
 80086a6:	4770      	bx	lr
 80086a8:	4610      	mov	r0, r2
 80086aa:	e7e8      	b.n	800867e <__lo0bits+0x2a>
 80086ac:	2000      	movs	r0, #0
 80086ae:	4770      	bx	lr
 80086b0:	2020      	movs	r0, #32
 80086b2:	4770      	bx	lr

080086b4 <__i2b>:
 80086b4:	b510      	push	{r4, lr}
 80086b6:	460c      	mov	r4, r1
 80086b8:	2101      	movs	r1, #1
 80086ba:	f7ff feb5 	bl	8008428 <_Balloc>
 80086be:	4602      	mov	r2, r0
 80086c0:	b928      	cbnz	r0, 80086ce <__i2b+0x1a>
 80086c2:	4b05      	ldr	r3, [pc, #20]	; (80086d8 <__i2b+0x24>)
 80086c4:	4805      	ldr	r0, [pc, #20]	; (80086dc <__i2b+0x28>)
 80086c6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80086ca:	f001 f88b 	bl	80097e4 <__assert_func>
 80086ce:	2301      	movs	r3, #1
 80086d0:	6144      	str	r4, [r0, #20]
 80086d2:	6103      	str	r3, [r0, #16]
 80086d4:	bd10      	pop	{r4, pc}
 80086d6:	bf00      	nop
 80086d8:	08009f1c 	.word	0x08009f1c
 80086dc:	08009fbd 	.word	0x08009fbd

080086e0 <__multiply>:
 80086e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086e4:	4614      	mov	r4, r2
 80086e6:	690a      	ldr	r2, [r1, #16]
 80086e8:	6923      	ldr	r3, [r4, #16]
 80086ea:	429a      	cmp	r2, r3
 80086ec:	bfb8      	it	lt
 80086ee:	460b      	movlt	r3, r1
 80086f0:	460d      	mov	r5, r1
 80086f2:	bfbc      	itt	lt
 80086f4:	4625      	movlt	r5, r4
 80086f6:	461c      	movlt	r4, r3
 80086f8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80086fc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008700:	68ab      	ldr	r3, [r5, #8]
 8008702:	6869      	ldr	r1, [r5, #4]
 8008704:	eb0a 0709 	add.w	r7, sl, r9
 8008708:	42bb      	cmp	r3, r7
 800870a:	b085      	sub	sp, #20
 800870c:	bfb8      	it	lt
 800870e:	3101      	addlt	r1, #1
 8008710:	f7ff fe8a 	bl	8008428 <_Balloc>
 8008714:	b930      	cbnz	r0, 8008724 <__multiply+0x44>
 8008716:	4602      	mov	r2, r0
 8008718:	4b42      	ldr	r3, [pc, #264]	; (8008824 <__multiply+0x144>)
 800871a:	4843      	ldr	r0, [pc, #268]	; (8008828 <__multiply+0x148>)
 800871c:	f240 115d 	movw	r1, #349	; 0x15d
 8008720:	f001 f860 	bl	80097e4 <__assert_func>
 8008724:	f100 0614 	add.w	r6, r0, #20
 8008728:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800872c:	4633      	mov	r3, r6
 800872e:	2200      	movs	r2, #0
 8008730:	4543      	cmp	r3, r8
 8008732:	d31e      	bcc.n	8008772 <__multiply+0x92>
 8008734:	f105 0c14 	add.w	ip, r5, #20
 8008738:	f104 0314 	add.w	r3, r4, #20
 800873c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008740:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008744:	9202      	str	r2, [sp, #8]
 8008746:	ebac 0205 	sub.w	r2, ip, r5
 800874a:	3a15      	subs	r2, #21
 800874c:	f022 0203 	bic.w	r2, r2, #3
 8008750:	3204      	adds	r2, #4
 8008752:	f105 0115 	add.w	r1, r5, #21
 8008756:	458c      	cmp	ip, r1
 8008758:	bf38      	it	cc
 800875a:	2204      	movcc	r2, #4
 800875c:	9201      	str	r2, [sp, #4]
 800875e:	9a02      	ldr	r2, [sp, #8]
 8008760:	9303      	str	r3, [sp, #12]
 8008762:	429a      	cmp	r2, r3
 8008764:	d808      	bhi.n	8008778 <__multiply+0x98>
 8008766:	2f00      	cmp	r7, #0
 8008768:	dc55      	bgt.n	8008816 <__multiply+0x136>
 800876a:	6107      	str	r7, [r0, #16]
 800876c:	b005      	add	sp, #20
 800876e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008772:	f843 2b04 	str.w	r2, [r3], #4
 8008776:	e7db      	b.n	8008730 <__multiply+0x50>
 8008778:	f8b3 a000 	ldrh.w	sl, [r3]
 800877c:	f1ba 0f00 	cmp.w	sl, #0
 8008780:	d020      	beq.n	80087c4 <__multiply+0xe4>
 8008782:	f105 0e14 	add.w	lr, r5, #20
 8008786:	46b1      	mov	r9, r6
 8008788:	2200      	movs	r2, #0
 800878a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800878e:	f8d9 b000 	ldr.w	fp, [r9]
 8008792:	b2a1      	uxth	r1, r4
 8008794:	fa1f fb8b 	uxth.w	fp, fp
 8008798:	fb0a b101 	mla	r1, sl, r1, fp
 800879c:	4411      	add	r1, r2
 800879e:	f8d9 2000 	ldr.w	r2, [r9]
 80087a2:	0c24      	lsrs	r4, r4, #16
 80087a4:	0c12      	lsrs	r2, r2, #16
 80087a6:	fb0a 2404 	mla	r4, sl, r4, r2
 80087aa:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80087ae:	b289      	uxth	r1, r1
 80087b0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80087b4:	45f4      	cmp	ip, lr
 80087b6:	f849 1b04 	str.w	r1, [r9], #4
 80087ba:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80087be:	d8e4      	bhi.n	800878a <__multiply+0xaa>
 80087c0:	9901      	ldr	r1, [sp, #4]
 80087c2:	5072      	str	r2, [r6, r1]
 80087c4:	9a03      	ldr	r2, [sp, #12]
 80087c6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80087ca:	3304      	adds	r3, #4
 80087cc:	f1b9 0f00 	cmp.w	r9, #0
 80087d0:	d01f      	beq.n	8008812 <__multiply+0x132>
 80087d2:	6834      	ldr	r4, [r6, #0]
 80087d4:	f105 0114 	add.w	r1, r5, #20
 80087d8:	46b6      	mov	lr, r6
 80087da:	f04f 0a00 	mov.w	sl, #0
 80087de:	880a      	ldrh	r2, [r1, #0]
 80087e0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80087e4:	fb09 b202 	mla	r2, r9, r2, fp
 80087e8:	4492      	add	sl, r2
 80087ea:	b2a4      	uxth	r4, r4
 80087ec:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80087f0:	f84e 4b04 	str.w	r4, [lr], #4
 80087f4:	f851 4b04 	ldr.w	r4, [r1], #4
 80087f8:	f8be 2000 	ldrh.w	r2, [lr]
 80087fc:	0c24      	lsrs	r4, r4, #16
 80087fe:	fb09 2404 	mla	r4, r9, r4, r2
 8008802:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008806:	458c      	cmp	ip, r1
 8008808:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800880c:	d8e7      	bhi.n	80087de <__multiply+0xfe>
 800880e:	9a01      	ldr	r2, [sp, #4]
 8008810:	50b4      	str	r4, [r6, r2]
 8008812:	3604      	adds	r6, #4
 8008814:	e7a3      	b.n	800875e <__multiply+0x7e>
 8008816:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800881a:	2b00      	cmp	r3, #0
 800881c:	d1a5      	bne.n	800876a <__multiply+0x8a>
 800881e:	3f01      	subs	r7, #1
 8008820:	e7a1      	b.n	8008766 <__multiply+0x86>
 8008822:	bf00      	nop
 8008824:	08009f1c 	.word	0x08009f1c
 8008828:	08009fbd 	.word	0x08009fbd

0800882c <__pow5mult>:
 800882c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008830:	4615      	mov	r5, r2
 8008832:	f012 0203 	ands.w	r2, r2, #3
 8008836:	4606      	mov	r6, r0
 8008838:	460f      	mov	r7, r1
 800883a:	d007      	beq.n	800884c <__pow5mult+0x20>
 800883c:	4c25      	ldr	r4, [pc, #148]	; (80088d4 <__pow5mult+0xa8>)
 800883e:	3a01      	subs	r2, #1
 8008840:	2300      	movs	r3, #0
 8008842:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008846:	f7ff fe51 	bl	80084ec <__multadd>
 800884a:	4607      	mov	r7, r0
 800884c:	10ad      	asrs	r5, r5, #2
 800884e:	d03d      	beq.n	80088cc <__pow5mult+0xa0>
 8008850:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008852:	b97c      	cbnz	r4, 8008874 <__pow5mult+0x48>
 8008854:	2010      	movs	r0, #16
 8008856:	f7fd fecd 	bl	80065f4 <malloc>
 800885a:	4602      	mov	r2, r0
 800885c:	6270      	str	r0, [r6, #36]	; 0x24
 800885e:	b928      	cbnz	r0, 800886c <__pow5mult+0x40>
 8008860:	4b1d      	ldr	r3, [pc, #116]	; (80088d8 <__pow5mult+0xac>)
 8008862:	481e      	ldr	r0, [pc, #120]	; (80088dc <__pow5mult+0xb0>)
 8008864:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008868:	f000 ffbc 	bl	80097e4 <__assert_func>
 800886c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008870:	6004      	str	r4, [r0, #0]
 8008872:	60c4      	str	r4, [r0, #12]
 8008874:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008878:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800887c:	b94c      	cbnz	r4, 8008892 <__pow5mult+0x66>
 800887e:	f240 2171 	movw	r1, #625	; 0x271
 8008882:	4630      	mov	r0, r6
 8008884:	f7ff ff16 	bl	80086b4 <__i2b>
 8008888:	2300      	movs	r3, #0
 800888a:	f8c8 0008 	str.w	r0, [r8, #8]
 800888e:	4604      	mov	r4, r0
 8008890:	6003      	str	r3, [r0, #0]
 8008892:	f04f 0900 	mov.w	r9, #0
 8008896:	07eb      	lsls	r3, r5, #31
 8008898:	d50a      	bpl.n	80088b0 <__pow5mult+0x84>
 800889a:	4639      	mov	r1, r7
 800889c:	4622      	mov	r2, r4
 800889e:	4630      	mov	r0, r6
 80088a0:	f7ff ff1e 	bl	80086e0 <__multiply>
 80088a4:	4639      	mov	r1, r7
 80088a6:	4680      	mov	r8, r0
 80088a8:	4630      	mov	r0, r6
 80088aa:	f7ff fdfd 	bl	80084a8 <_Bfree>
 80088ae:	4647      	mov	r7, r8
 80088b0:	106d      	asrs	r5, r5, #1
 80088b2:	d00b      	beq.n	80088cc <__pow5mult+0xa0>
 80088b4:	6820      	ldr	r0, [r4, #0]
 80088b6:	b938      	cbnz	r0, 80088c8 <__pow5mult+0x9c>
 80088b8:	4622      	mov	r2, r4
 80088ba:	4621      	mov	r1, r4
 80088bc:	4630      	mov	r0, r6
 80088be:	f7ff ff0f 	bl	80086e0 <__multiply>
 80088c2:	6020      	str	r0, [r4, #0]
 80088c4:	f8c0 9000 	str.w	r9, [r0]
 80088c8:	4604      	mov	r4, r0
 80088ca:	e7e4      	b.n	8008896 <__pow5mult+0x6a>
 80088cc:	4638      	mov	r0, r7
 80088ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088d2:	bf00      	nop
 80088d4:	0800a110 	.word	0x0800a110
 80088d8:	08009fa6 	.word	0x08009fa6
 80088dc:	08009fbd 	.word	0x08009fbd

080088e0 <__lshift>:
 80088e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088e4:	460c      	mov	r4, r1
 80088e6:	6849      	ldr	r1, [r1, #4]
 80088e8:	6923      	ldr	r3, [r4, #16]
 80088ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80088ee:	68a3      	ldr	r3, [r4, #8]
 80088f0:	4607      	mov	r7, r0
 80088f2:	4691      	mov	r9, r2
 80088f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80088f8:	f108 0601 	add.w	r6, r8, #1
 80088fc:	42b3      	cmp	r3, r6
 80088fe:	db0b      	blt.n	8008918 <__lshift+0x38>
 8008900:	4638      	mov	r0, r7
 8008902:	f7ff fd91 	bl	8008428 <_Balloc>
 8008906:	4605      	mov	r5, r0
 8008908:	b948      	cbnz	r0, 800891e <__lshift+0x3e>
 800890a:	4602      	mov	r2, r0
 800890c:	4b28      	ldr	r3, [pc, #160]	; (80089b0 <__lshift+0xd0>)
 800890e:	4829      	ldr	r0, [pc, #164]	; (80089b4 <__lshift+0xd4>)
 8008910:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008914:	f000 ff66 	bl	80097e4 <__assert_func>
 8008918:	3101      	adds	r1, #1
 800891a:	005b      	lsls	r3, r3, #1
 800891c:	e7ee      	b.n	80088fc <__lshift+0x1c>
 800891e:	2300      	movs	r3, #0
 8008920:	f100 0114 	add.w	r1, r0, #20
 8008924:	f100 0210 	add.w	r2, r0, #16
 8008928:	4618      	mov	r0, r3
 800892a:	4553      	cmp	r3, sl
 800892c:	db33      	blt.n	8008996 <__lshift+0xb6>
 800892e:	6920      	ldr	r0, [r4, #16]
 8008930:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008934:	f104 0314 	add.w	r3, r4, #20
 8008938:	f019 091f 	ands.w	r9, r9, #31
 800893c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008940:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008944:	d02b      	beq.n	800899e <__lshift+0xbe>
 8008946:	f1c9 0e20 	rsb	lr, r9, #32
 800894a:	468a      	mov	sl, r1
 800894c:	2200      	movs	r2, #0
 800894e:	6818      	ldr	r0, [r3, #0]
 8008950:	fa00 f009 	lsl.w	r0, r0, r9
 8008954:	4302      	orrs	r2, r0
 8008956:	f84a 2b04 	str.w	r2, [sl], #4
 800895a:	f853 2b04 	ldr.w	r2, [r3], #4
 800895e:	459c      	cmp	ip, r3
 8008960:	fa22 f20e 	lsr.w	r2, r2, lr
 8008964:	d8f3      	bhi.n	800894e <__lshift+0x6e>
 8008966:	ebac 0304 	sub.w	r3, ip, r4
 800896a:	3b15      	subs	r3, #21
 800896c:	f023 0303 	bic.w	r3, r3, #3
 8008970:	3304      	adds	r3, #4
 8008972:	f104 0015 	add.w	r0, r4, #21
 8008976:	4584      	cmp	ip, r0
 8008978:	bf38      	it	cc
 800897a:	2304      	movcc	r3, #4
 800897c:	50ca      	str	r2, [r1, r3]
 800897e:	b10a      	cbz	r2, 8008984 <__lshift+0xa4>
 8008980:	f108 0602 	add.w	r6, r8, #2
 8008984:	3e01      	subs	r6, #1
 8008986:	4638      	mov	r0, r7
 8008988:	612e      	str	r6, [r5, #16]
 800898a:	4621      	mov	r1, r4
 800898c:	f7ff fd8c 	bl	80084a8 <_Bfree>
 8008990:	4628      	mov	r0, r5
 8008992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008996:	f842 0f04 	str.w	r0, [r2, #4]!
 800899a:	3301      	adds	r3, #1
 800899c:	e7c5      	b.n	800892a <__lshift+0x4a>
 800899e:	3904      	subs	r1, #4
 80089a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80089a4:	f841 2f04 	str.w	r2, [r1, #4]!
 80089a8:	459c      	cmp	ip, r3
 80089aa:	d8f9      	bhi.n	80089a0 <__lshift+0xc0>
 80089ac:	e7ea      	b.n	8008984 <__lshift+0xa4>
 80089ae:	bf00      	nop
 80089b0:	08009f1c 	.word	0x08009f1c
 80089b4:	08009fbd 	.word	0x08009fbd

080089b8 <__mcmp>:
 80089b8:	b530      	push	{r4, r5, lr}
 80089ba:	6902      	ldr	r2, [r0, #16]
 80089bc:	690c      	ldr	r4, [r1, #16]
 80089be:	1b12      	subs	r2, r2, r4
 80089c0:	d10e      	bne.n	80089e0 <__mcmp+0x28>
 80089c2:	f100 0314 	add.w	r3, r0, #20
 80089c6:	3114      	adds	r1, #20
 80089c8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80089cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80089d0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80089d4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80089d8:	42a5      	cmp	r5, r4
 80089da:	d003      	beq.n	80089e4 <__mcmp+0x2c>
 80089dc:	d305      	bcc.n	80089ea <__mcmp+0x32>
 80089de:	2201      	movs	r2, #1
 80089e0:	4610      	mov	r0, r2
 80089e2:	bd30      	pop	{r4, r5, pc}
 80089e4:	4283      	cmp	r3, r0
 80089e6:	d3f3      	bcc.n	80089d0 <__mcmp+0x18>
 80089e8:	e7fa      	b.n	80089e0 <__mcmp+0x28>
 80089ea:	f04f 32ff 	mov.w	r2, #4294967295
 80089ee:	e7f7      	b.n	80089e0 <__mcmp+0x28>

080089f0 <__mdiff>:
 80089f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089f4:	460c      	mov	r4, r1
 80089f6:	4606      	mov	r6, r0
 80089f8:	4611      	mov	r1, r2
 80089fa:	4620      	mov	r0, r4
 80089fc:	4617      	mov	r7, r2
 80089fe:	f7ff ffdb 	bl	80089b8 <__mcmp>
 8008a02:	1e05      	subs	r5, r0, #0
 8008a04:	d110      	bne.n	8008a28 <__mdiff+0x38>
 8008a06:	4629      	mov	r1, r5
 8008a08:	4630      	mov	r0, r6
 8008a0a:	f7ff fd0d 	bl	8008428 <_Balloc>
 8008a0e:	b930      	cbnz	r0, 8008a1e <__mdiff+0x2e>
 8008a10:	4b39      	ldr	r3, [pc, #228]	; (8008af8 <__mdiff+0x108>)
 8008a12:	4602      	mov	r2, r0
 8008a14:	f240 2132 	movw	r1, #562	; 0x232
 8008a18:	4838      	ldr	r0, [pc, #224]	; (8008afc <__mdiff+0x10c>)
 8008a1a:	f000 fee3 	bl	80097e4 <__assert_func>
 8008a1e:	2301      	movs	r3, #1
 8008a20:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008a24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a28:	bfa4      	itt	ge
 8008a2a:	463b      	movge	r3, r7
 8008a2c:	4627      	movge	r7, r4
 8008a2e:	4630      	mov	r0, r6
 8008a30:	6879      	ldr	r1, [r7, #4]
 8008a32:	bfa6      	itte	ge
 8008a34:	461c      	movge	r4, r3
 8008a36:	2500      	movge	r5, #0
 8008a38:	2501      	movlt	r5, #1
 8008a3a:	f7ff fcf5 	bl	8008428 <_Balloc>
 8008a3e:	b920      	cbnz	r0, 8008a4a <__mdiff+0x5a>
 8008a40:	4b2d      	ldr	r3, [pc, #180]	; (8008af8 <__mdiff+0x108>)
 8008a42:	4602      	mov	r2, r0
 8008a44:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008a48:	e7e6      	b.n	8008a18 <__mdiff+0x28>
 8008a4a:	693e      	ldr	r6, [r7, #16]
 8008a4c:	60c5      	str	r5, [r0, #12]
 8008a4e:	6925      	ldr	r5, [r4, #16]
 8008a50:	f107 0114 	add.w	r1, r7, #20
 8008a54:	f104 0914 	add.w	r9, r4, #20
 8008a58:	f100 0e14 	add.w	lr, r0, #20
 8008a5c:	f107 0210 	add.w	r2, r7, #16
 8008a60:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008a64:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008a68:	46f2      	mov	sl, lr
 8008a6a:	2700      	movs	r7, #0
 8008a6c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008a70:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008a74:	fa1f f883 	uxth.w	r8, r3
 8008a78:	fa17 f78b 	uxtah	r7, r7, fp
 8008a7c:	0c1b      	lsrs	r3, r3, #16
 8008a7e:	eba7 0808 	sub.w	r8, r7, r8
 8008a82:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008a86:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008a8a:	fa1f f888 	uxth.w	r8, r8
 8008a8e:	141f      	asrs	r7, r3, #16
 8008a90:	454d      	cmp	r5, r9
 8008a92:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008a96:	f84a 3b04 	str.w	r3, [sl], #4
 8008a9a:	d8e7      	bhi.n	8008a6c <__mdiff+0x7c>
 8008a9c:	1b2b      	subs	r3, r5, r4
 8008a9e:	3b15      	subs	r3, #21
 8008aa0:	f023 0303 	bic.w	r3, r3, #3
 8008aa4:	3304      	adds	r3, #4
 8008aa6:	3415      	adds	r4, #21
 8008aa8:	42a5      	cmp	r5, r4
 8008aaa:	bf38      	it	cc
 8008aac:	2304      	movcc	r3, #4
 8008aae:	4419      	add	r1, r3
 8008ab0:	4473      	add	r3, lr
 8008ab2:	469e      	mov	lr, r3
 8008ab4:	460d      	mov	r5, r1
 8008ab6:	4565      	cmp	r5, ip
 8008ab8:	d30e      	bcc.n	8008ad8 <__mdiff+0xe8>
 8008aba:	f10c 0203 	add.w	r2, ip, #3
 8008abe:	1a52      	subs	r2, r2, r1
 8008ac0:	f022 0203 	bic.w	r2, r2, #3
 8008ac4:	3903      	subs	r1, #3
 8008ac6:	458c      	cmp	ip, r1
 8008ac8:	bf38      	it	cc
 8008aca:	2200      	movcc	r2, #0
 8008acc:	441a      	add	r2, r3
 8008ace:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008ad2:	b17b      	cbz	r3, 8008af4 <__mdiff+0x104>
 8008ad4:	6106      	str	r6, [r0, #16]
 8008ad6:	e7a5      	b.n	8008a24 <__mdiff+0x34>
 8008ad8:	f855 8b04 	ldr.w	r8, [r5], #4
 8008adc:	fa17 f488 	uxtah	r4, r7, r8
 8008ae0:	1422      	asrs	r2, r4, #16
 8008ae2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008ae6:	b2a4      	uxth	r4, r4
 8008ae8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008aec:	f84e 4b04 	str.w	r4, [lr], #4
 8008af0:	1417      	asrs	r7, r2, #16
 8008af2:	e7e0      	b.n	8008ab6 <__mdiff+0xc6>
 8008af4:	3e01      	subs	r6, #1
 8008af6:	e7ea      	b.n	8008ace <__mdiff+0xde>
 8008af8:	08009f1c 	.word	0x08009f1c
 8008afc:	08009fbd 	.word	0x08009fbd

08008b00 <__ulp>:
 8008b00:	b082      	sub	sp, #8
 8008b02:	ed8d 0b00 	vstr	d0, [sp]
 8008b06:	9b01      	ldr	r3, [sp, #4]
 8008b08:	4912      	ldr	r1, [pc, #72]	; (8008b54 <__ulp+0x54>)
 8008b0a:	4019      	ands	r1, r3
 8008b0c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8008b10:	2900      	cmp	r1, #0
 8008b12:	dd05      	ble.n	8008b20 <__ulp+0x20>
 8008b14:	2200      	movs	r2, #0
 8008b16:	460b      	mov	r3, r1
 8008b18:	ec43 2b10 	vmov	d0, r2, r3
 8008b1c:	b002      	add	sp, #8
 8008b1e:	4770      	bx	lr
 8008b20:	4249      	negs	r1, r1
 8008b22:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8008b26:	ea4f 5021 	mov.w	r0, r1, asr #20
 8008b2a:	f04f 0200 	mov.w	r2, #0
 8008b2e:	f04f 0300 	mov.w	r3, #0
 8008b32:	da04      	bge.n	8008b3e <__ulp+0x3e>
 8008b34:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008b38:	fa41 f300 	asr.w	r3, r1, r0
 8008b3c:	e7ec      	b.n	8008b18 <__ulp+0x18>
 8008b3e:	f1a0 0114 	sub.w	r1, r0, #20
 8008b42:	291e      	cmp	r1, #30
 8008b44:	bfda      	itte	le
 8008b46:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8008b4a:	fa20 f101 	lsrle.w	r1, r0, r1
 8008b4e:	2101      	movgt	r1, #1
 8008b50:	460a      	mov	r2, r1
 8008b52:	e7e1      	b.n	8008b18 <__ulp+0x18>
 8008b54:	7ff00000 	.word	0x7ff00000

08008b58 <__b2d>:
 8008b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b5a:	6905      	ldr	r5, [r0, #16]
 8008b5c:	f100 0714 	add.w	r7, r0, #20
 8008b60:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008b64:	1f2e      	subs	r6, r5, #4
 8008b66:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008b6a:	4620      	mov	r0, r4
 8008b6c:	f7ff fd52 	bl	8008614 <__hi0bits>
 8008b70:	f1c0 0320 	rsb	r3, r0, #32
 8008b74:	280a      	cmp	r0, #10
 8008b76:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008bf4 <__b2d+0x9c>
 8008b7a:	600b      	str	r3, [r1, #0]
 8008b7c:	dc14      	bgt.n	8008ba8 <__b2d+0x50>
 8008b7e:	f1c0 0e0b 	rsb	lr, r0, #11
 8008b82:	fa24 f10e 	lsr.w	r1, r4, lr
 8008b86:	42b7      	cmp	r7, r6
 8008b88:	ea41 030c 	orr.w	r3, r1, ip
 8008b8c:	bf34      	ite	cc
 8008b8e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008b92:	2100      	movcs	r1, #0
 8008b94:	3015      	adds	r0, #21
 8008b96:	fa04 f000 	lsl.w	r0, r4, r0
 8008b9a:	fa21 f10e 	lsr.w	r1, r1, lr
 8008b9e:	ea40 0201 	orr.w	r2, r0, r1
 8008ba2:	ec43 2b10 	vmov	d0, r2, r3
 8008ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ba8:	42b7      	cmp	r7, r6
 8008baa:	bf3a      	itte	cc
 8008bac:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008bb0:	f1a5 0608 	subcc.w	r6, r5, #8
 8008bb4:	2100      	movcs	r1, #0
 8008bb6:	380b      	subs	r0, #11
 8008bb8:	d017      	beq.n	8008bea <__b2d+0x92>
 8008bba:	f1c0 0c20 	rsb	ip, r0, #32
 8008bbe:	fa04 f500 	lsl.w	r5, r4, r0
 8008bc2:	42be      	cmp	r6, r7
 8008bc4:	fa21 f40c 	lsr.w	r4, r1, ip
 8008bc8:	ea45 0504 	orr.w	r5, r5, r4
 8008bcc:	bf8c      	ite	hi
 8008bce:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008bd2:	2400      	movls	r4, #0
 8008bd4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8008bd8:	fa01 f000 	lsl.w	r0, r1, r0
 8008bdc:	fa24 f40c 	lsr.w	r4, r4, ip
 8008be0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008be4:	ea40 0204 	orr.w	r2, r0, r4
 8008be8:	e7db      	b.n	8008ba2 <__b2d+0x4a>
 8008bea:	ea44 030c 	orr.w	r3, r4, ip
 8008bee:	460a      	mov	r2, r1
 8008bf0:	e7d7      	b.n	8008ba2 <__b2d+0x4a>
 8008bf2:	bf00      	nop
 8008bf4:	3ff00000 	.word	0x3ff00000

08008bf8 <__d2b>:
 8008bf8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008bfc:	4689      	mov	r9, r1
 8008bfe:	2101      	movs	r1, #1
 8008c00:	ec57 6b10 	vmov	r6, r7, d0
 8008c04:	4690      	mov	r8, r2
 8008c06:	f7ff fc0f 	bl	8008428 <_Balloc>
 8008c0a:	4604      	mov	r4, r0
 8008c0c:	b930      	cbnz	r0, 8008c1c <__d2b+0x24>
 8008c0e:	4602      	mov	r2, r0
 8008c10:	4b25      	ldr	r3, [pc, #148]	; (8008ca8 <__d2b+0xb0>)
 8008c12:	4826      	ldr	r0, [pc, #152]	; (8008cac <__d2b+0xb4>)
 8008c14:	f240 310a 	movw	r1, #778	; 0x30a
 8008c18:	f000 fde4 	bl	80097e4 <__assert_func>
 8008c1c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008c20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008c24:	bb35      	cbnz	r5, 8008c74 <__d2b+0x7c>
 8008c26:	2e00      	cmp	r6, #0
 8008c28:	9301      	str	r3, [sp, #4]
 8008c2a:	d028      	beq.n	8008c7e <__d2b+0x86>
 8008c2c:	4668      	mov	r0, sp
 8008c2e:	9600      	str	r6, [sp, #0]
 8008c30:	f7ff fd10 	bl	8008654 <__lo0bits>
 8008c34:	9900      	ldr	r1, [sp, #0]
 8008c36:	b300      	cbz	r0, 8008c7a <__d2b+0x82>
 8008c38:	9a01      	ldr	r2, [sp, #4]
 8008c3a:	f1c0 0320 	rsb	r3, r0, #32
 8008c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c42:	430b      	orrs	r3, r1
 8008c44:	40c2      	lsrs	r2, r0
 8008c46:	6163      	str	r3, [r4, #20]
 8008c48:	9201      	str	r2, [sp, #4]
 8008c4a:	9b01      	ldr	r3, [sp, #4]
 8008c4c:	61a3      	str	r3, [r4, #24]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	bf14      	ite	ne
 8008c52:	2202      	movne	r2, #2
 8008c54:	2201      	moveq	r2, #1
 8008c56:	6122      	str	r2, [r4, #16]
 8008c58:	b1d5      	cbz	r5, 8008c90 <__d2b+0x98>
 8008c5a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008c5e:	4405      	add	r5, r0
 8008c60:	f8c9 5000 	str.w	r5, [r9]
 8008c64:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008c68:	f8c8 0000 	str.w	r0, [r8]
 8008c6c:	4620      	mov	r0, r4
 8008c6e:	b003      	add	sp, #12
 8008c70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c78:	e7d5      	b.n	8008c26 <__d2b+0x2e>
 8008c7a:	6161      	str	r1, [r4, #20]
 8008c7c:	e7e5      	b.n	8008c4a <__d2b+0x52>
 8008c7e:	a801      	add	r0, sp, #4
 8008c80:	f7ff fce8 	bl	8008654 <__lo0bits>
 8008c84:	9b01      	ldr	r3, [sp, #4]
 8008c86:	6163      	str	r3, [r4, #20]
 8008c88:	2201      	movs	r2, #1
 8008c8a:	6122      	str	r2, [r4, #16]
 8008c8c:	3020      	adds	r0, #32
 8008c8e:	e7e3      	b.n	8008c58 <__d2b+0x60>
 8008c90:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008c94:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008c98:	f8c9 0000 	str.w	r0, [r9]
 8008c9c:	6918      	ldr	r0, [r3, #16]
 8008c9e:	f7ff fcb9 	bl	8008614 <__hi0bits>
 8008ca2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008ca6:	e7df      	b.n	8008c68 <__d2b+0x70>
 8008ca8:	08009f1c 	.word	0x08009f1c
 8008cac:	08009fbd 	.word	0x08009fbd

08008cb0 <__ratio>:
 8008cb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cb4:	468a      	mov	sl, r1
 8008cb6:	4669      	mov	r1, sp
 8008cb8:	4683      	mov	fp, r0
 8008cba:	f7ff ff4d 	bl	8008b58 <__b2d>
 8008cbe:	a901      	add	r1, sp, #4
 8008cc0:	4650      	mov	r0, sl
 8008cc2:	ec59 8b10 	vmov	r8, r9, d0
 8008cc6:	ee10 6a10 	vmov	r6, s0
 8008cca:	f7ff ff45 	bl	8008b58 <__b2d>
 8008cce:	f8db 3010 	ldr.w	r3, [fp, #16]
 8008cd2:	f8da 2010 	ldr.w	r2, [sl, #16]
 8008cd6:	eba3 0c02 	sub.w	ip, r3, r2
 8008cda:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008cde:	1a9b      	subs	r3, r3, r2
 8008ce0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008ce4:	ec55 4b10 	vmov	r4, r5, d0
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	ee10 0a10 	vmov	r0, s0
 8008cee:	bfce      	itee	gt
 8008cf0:	464a      	movgt	r2, r9
 8008cf2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008cf6:	462a      	movle	r2, r5
 8008cf8:	464f      	mov	r7, r9
 8008cfa:	4629      	mov	r1, r5
 8008cfc:	bfcc      	ite	gt
 8008cfe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008d02:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8008d06:	ec47 6b17 	vmov	d7, r6, r7
 8008d0a:	ec41 0b16 	vmov	d6, r0, r1
 8008d0e:	ee87 0b06 	vdiv.f64	d0, d7, d6
 8008d12:	b003      	add	sp, #12
 8008d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008d18 <__copybits>:
 8008d18:	3901      	subs	r1, #1
 8008d1a:	b570      	push	{r4, r5, r6, lr}
 8008d1c:	1149      	asrs	r1, r1, #5
 8008d1e:	6914      	ldr	r4, [r2, #16]
 8008d20:	3101      	adds	r1, #1
 8008d22:	f102 0314 	add.w	r3, r2, #20
 8008d26:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008d2a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008d2e:	1f05      	subs	r5, r0, #4
 8008d30:	42a3      	cmp	r3, r4
 8008d32:	d30c      	bcc.n	8008d4e <__copybits+0x36>
 8008d34:	1aa3      	subs	r3, r4, r2
 8008d36:	3b11      	subs	r3, #17
 8008d38:	f023 0303 	bic.w	r3, r3, #3
 8008d3c:	3211      	adds	r2, #17
 8008d3e:	42a2      	cmp	r2, r4
 8008d40:	bf88      	it	hi
 8008d42:	2300      	movhi	r3, #0
 8008d44:	4418      	add	r0, r3
 8008d46:	2300      	movs	r3, #0
 8008d48:	4288      	cmp	r0, r1
 8008d4a:	d305      	bcc.n	8008d58 <__copybits+0x40>
 8008d4c:	bd70      	pop	{r4, r5, r6, pc}
 8008d4e:	f853 6b04 	ldr.w	r6, [r3], #4
 8008d52:	f845 6f04 	str.w	r6, [r5, #4]!
 8008d56:	e7eb      	b.n	8008d30 <__copybits+0x18>
 8008d58:	f840 3b04 	str.w	r3, [r0], #4
 8008d5c:	e7f4      	b.n	8008d48 <__copybits+0x30>

08008d5e <__any_on>:
 8008d5e:	f100 0214 	add.w	r2, r0, #20
 8008d62:	6900      	ldr	r0, [r0, #16]
 8008d64:	114b      	asrs	r3, r1, #5
 8008d66:	4298      	cmp	r0, r3
 8008d68:	b510      	push	{r4, lr}
 8008d6a:	db11      	blt.n	8008d90 <__any_on+0x32>
 8008d6c:	dd0a      	ble.n	8008d84 <__any_on+0x26>
 8008d6e:	f011 011f 	ands.w	r1, r1, #31
 8008d72:	d007      	beq.n	8008d84 <__any_on+0x26>
 8008d74:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008d78:	fa24 f001 	lsr.w	r0, r4, r1
 8008d7c:	fa00 f101 	lsl.w	r1, r0, r1
 8008d80:	428c      	cmp	r4, r1
 8008d82:	d10b      	bne.n	8008d9c <__any_on+0x3e>
 8008d84:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d803      	bhi.n	8008d94 <__any_on+0x36>
 8008d8c:	2000      	movs	r0, #0
 8008d8e:	bd10      	pop	{r4, pc}
 8008d90:	4603      	mov	r3, r0
 8008d92:	e7f7      	b.n	8008d84 <__any_on+0x26>
 8008d94:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008d98:	2900      	cmp	r1, #0
 8008d9a:	d0f5      	beq.n	8008d88 <__any_on+0x2a>
 8008d9c:	2001      	movs	r0, #1
 8008d9e:	e7f6      	b.n	8008d8e <__any_on+0x30>

08008da0 <_calloc_r>:
 8008da0:	b513      	push	{r0, r1, r4, lr}
 8008da2:	434a      	muls	r2, r1
 8008da4:	4611      	mov	r1, r2
 8008da6:	9201      	str	r2, [sp, #4]
 8008da8:	f7fd fc9a 	bl	80066e0 <_malloc_r>
 8008dac:	4604      	mov	r4, r0
 8008dae:	b118      	cbz	r0, 8008db8 <_calloc_r+0x18>
 8008db0:	9a01      	ldr	r2, [sp, #4]
 8008db2:	2100      	movs	r1, #0
 8008db4:	f7fd fc3c 	bl	8006630 <memset>
 8008db8:	4620      	mov	r0, r4
 8008dba:	b002      	add	sp, #8
 8008dbc:	bd10      	pop	{r4, pc}

08008dbe <__ssputs_r>:
 8008dbe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dc2:	688e      	ldr	r6, [r1, #8]
 8008dc4:	429e      	cmp	r6, r3
 8008dc6:	4682      	mov	sl, r0
 8008dc8:	460c      	mov	r4, r1
 8008dca:	4690      	mov	r8, r2
 8008dcc:	461f      	mov	r7, r3
 8008dce:	d838      	bhi.n	8008e42 <__ssputs_r+0x84>
 8008dd0:	898a      	ldrh	r2, [r1, #12]
 8008dd2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008dd6:	d032      	beq.n	8008e3e <__ssputs_r+0x80>
 8008dd8:	6825      	ldr	r5, [r4, #0]
 8008dda:	6909      	ldr	r1, [r1, #16]
 8008ddc:	eba5 0901 	sub.w	r9, r5, r1
 8008de0:	6965      	ldr	r5, [r4, #20]
 8008de2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008de6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008dea:	3301      	adds	r3, #1
 8008dec:	444b      	add	r3, r9
 8008dee:	106d      	asrs	r5, r5, #1
 8008df0:	429d      	cmp	r5, r3
 8008df2:	bf38      	it	cc
 8008df4:	461d      	movcc	r5, r3
 8008df6:	0553      	lsls	r3, r2, #21
 8008df8:	d531      	bpl.n	8008e5e <__ssputs_r+0xa0>
 8008dfa:	4629      	mov	r1, r5
 8008dfc:	f7fd fc70 	bl	80066e0 <_malloc_r>
 8008e00:	4606      	mov	r6, r0
 8008e02:	b950      	cbnz	r0, 8008e1a <__ssputs_r+0x5c>
 8008e04:	230c      	movs	r3, #12
 8008e06:	f8ca 3000 	str.w	r3, [sl]
 8008e0a:	89a3      	ldrh	r3, [r4, #12]
 8008e0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e10:	81a3      	strh	r3, [r4, #12]
 8008e12:	f04f 30ff 	mov.w	r0, #4294967295
 8008e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e1a:	6921      	ldr	r1, [r4, #16]
 8008e1c:	464a      	mov	r2, r9
 8008e1e:	f7fd fbf9 	bl	8006614 <memcpy>
 8008e22:	89a3      	ldrh	r3, [r4, #12]
 8008e24:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008e28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e2c:	81a3      	strh	r3, [r4, #12]
 8008e2e:	6126      	str	r6, [r4, #16]
 8008e30:	6165      	str	r5, [r4, #20]
 8008e32:	444e      	add	r6, r9
 8008e34:	eba5 0509 	sub.w	r5, r5, r9
 8008e38:	6026      	str	r6, [r4, #0]
 8008e3a:	60a5      	str	r5, [r4, #8]
 8008e3c:	463e      	mov	r6, r7
 8008e3e:	42be      	cmp	r6, r7
 8008e40:	d900      	bls.n	8008e44 <__ssputs_r+0x86>
 8008e42:	463e      	mov	r6, r7
 8008e44:	4632      	mov	r2, r6
 8008e46:	6820      	ldr	r0, [r4, #0]
 8008e48:	4641      	mov	r1, r8
 8008e4a:	f000 fd3f 	bl	80098cc <memmove>
 8008e4e:	68a3      	ldr	r3, [r4, #8]
 8008e50:	6822      	ldr	r2, [r4, #0]
 8008e52:	1b9b      	subs	r3, r3, r6
 8008e54:	4432      	add	r2, r6
 8008e56:	60a3      	str	r3, [r4, #8]
 8008e58:	6022      	str	r2, [r4, #0]
 8008e5a:	2000      	movs	r0, #0
 8008e5c:	e7db      	b.n	8008e16 <__ssputs_r+0x58>
 8008e5e:	462a      	mov	r2, r5
 8008e60:	f000 fd4e 	bl	8009900 <_realloc_r>
 8008e64:	4606      	mov	r6, r0
 8008e66:	2800      	cmp	r0, #0
 8008e68:	d1e1      	bne.n	8008e2e <__ssputs_r+0x70>
 8008e6a:	6921      	ldr	r1, [r4, #16]
 8008e6c:	4650      	mov	r0, sl
 8008e6e:	f7fd fbe7 	bl	8006640 <_free_r>
 8008e72:	e7c7      	b.n	8008e04 <__ssputs_r+0x46>

08008e74 <_svfiprintf_r>:
 8008e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e78:	4698      	mov	r8, r3
 8008e7a:	898b      	ldrh	r3, [r1, #12]
 8008e7c:	061b      	lsls	r3, r3, #24
 8008e7e:	b09d      	sub	sp, #116	; 0x74
 8008e80:	4607      	mov	r7, r0
 8008e82:	460d      	mov	r5, r1
 8008e84:	4614      	mov	r4, r2
 8008e86:	d50e      	bpl.n	8008ea6 <_svfiprintf_r+0x32>
 8008e88:	690b      	ldr	r3, [r1, #16]
 8008e8a:	b963      	cbnz	r3, 8008ea6 <_svfiprintf_r+0x32>
 8008e8c:	2140      	movs	r1, #64	; 0x40
 8008e8e:	f7fd fc27 	bl	80066e0 <_malloc_r>
 8008e92:	6028      	str	r0, [r5, #0]
 8008e94:	6128      	str	r0, [r5, #16]
 8008e96:	b920      	cbnz	r0, 8008ea2 <_svfiprintf_r+0x2e>
 8008e98:	230c      	movs	r3, #12
 8008e9a:	603b      	str	r3, [r7, #0]
 8008e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8008ea0:	e0d1      	b.n	8009046 <_svfiprintf_r+0x1d2>
 8008ea2:	2340      	movs	r3, #64	; 0x40
 8008ea4:	616b      	str	r3, [r5, #20]
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	9309      	str	r3, [sp, #36]	; 0x24
 8008eaa:	2320      	movs	r3, #32
 8008eac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008eb0:	f8cd 800c 	str.w	r8, [sp, #12]
 8008eb4:	2330      	movs	r3, #48	; 0x30
 8008eb6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009060 <_svfiprintf_r+0x1ec>
 8008eba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ebe:	f04f 0901 	mov.w	r9, #1
 8008ec2:	4623      	mov	r3, r4
 8008ec4:	469a      	mov	sl, r3
 8008ec6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008eca:	b10a      	cbz	r2, 8008ed0 <_svfiprintf_r+0x5c>
 8008ecc:	2a25      	cmp	r2, #37	; 0x25
 8008ece:	d1f9      	bne.n	8008ec4 <_svfiprintf_r+0x50>
 8008ed0:	ebba 0b04 	subs.w	fp, sl, r4
 8008ed4:	d00b      	beq.n	8008eee <_svfiprintf_r+0x7a>
 8008ed6:	465b      	mov	r3, fp
 8008ed8:	4622      	mov	r2, r4
 8008eda:	4629      	mov	r1, r5
 8008edc:	4638      	mov	r0, r7
 8008ede:	f7ff ff6e 	bl	8008dbe <__ssputs_r>
 8008ee2:	3001      	adds	r0, #1
 8008ee4:	f000 80aa 	beq.w	800903c <_svfiprintf_r+0x1c8>
 8008ee8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008eea:	445a      	add	r2, fp
 8008eec:	9209      	str	r2, [sp, #36]	; 0x24
 8008eee:	f89a 3000 	ldrb.w	r3, [sl]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	f000 80a2 	beq.w	800903c <_svfiprintf_r+0x1c8>
 8008ef8:	2300      	movs	r3, #0
 8008efa:	f04f 32ff 	mov.w	r2, #4294967295
 8008efe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f02:	f10a 0a01 	add.w	sl, sl, #1
 8008f06:	9304      	str	r3, [sp, #16]
 8008f08:	9307      	str	r3, [sp, #28]
 8008f0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f0e:	931a      	str	r3, [sp, #104]	; 0x68
 8008f10:	4654      	mov	r4, sl
 8008f12:	2205      	movs	r2, #5
 8008f14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f18:	4851      	ldr	r0, [pc, #324]	; (8009060 <_svfiprintf_r+0x1ec>)
 8008f1a:	f7f7 f9a9 	bl	8000270 <memchr>
 8008f1e:	9a04      	ldr	r2, [sp, #16]
 8008f20:	b9d8      	cbnz	r0, 8008f5a <_svfiprintf_r+0xe6>
 8008f22:	06d0      	lsls	r0, r2, #27
 8008f24:	bf44      	itt	mi
 8008f26:	2320      	movmi	r3, #32
 8008f28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f2c:	0711      	lsls	r1, r2, #28
 8008f2e:	bf44      	itt	mi
 8008f30:	232b      	movmi	r3, #43	; 0x2b
 8008f32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f36:	f89a 3000 	ldrb.w	r3, [sl]
 8008f3a:	2b2a      	cmp	r3, #42	; 0x2a
 8008f3c:	d015      	beq.n	8008f6a <_svfiprintf_r+0xf6>
 8008f3e:	9a07      	ldr	r2, [sp, #28]
 8008f40:	4654      	mov	r4, sl
 8008f42:	2000      	movs	r0, #0
 8008f44:	f04f 0c0a 	mov.w	ip, #10
 8008f48:	4621      	mov	r1, r4
 8008f4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f4e:	3b30      	subs	r3, #48	; 0x30
 8008f50:	2b09      	cmp	r3, #9
 8008f52:	d94e      	bls.n	8008ff2 <_svfiprintf_r+0x17e>
 8008f54:	b1b0      	cbz	r0, 8008f84 <_svfiprintf_r+0x110>
 8008f56:	9207      	str	r2, [sp, #28]
 8008f58:	e014      	b.n	8008f84 <_svfiprintf_r+0x110>
 8008f5a:	eba0 0308 	sub.w	r3, r0, r8
 8008f5e:	fa09 f303 	lsl.w	r3, r9, r3
 8008f62:	4313      	orrs	r3, r2
 8008f64:	9304      	str	r3, [sp, #16]
 8008f66:	46a2      	mov	sl, r4
 8008f68:	e7d2      	b.n	8008f10 <_svfiprintf_r+0x9c>
 8008f6a:	9b03      	ldr	r3, [sp, #12]
 8008f6c:	1d19      	adds	r1, r3, #4
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	9103      	str	r1, [sp, #12]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	bfbb      	ittet	lt
 8008f76:	425b      	neglt	r3, r3
 8008f78:	f042 0202 	orrlt.w	r2, r2, #2
 8008f7c:	9307      	strge	r3, [sp, #28]
 8008f7e:	9307      	strlt	r3, [sp, #28]
 8008f80:	bfb8      	it	lt
 8008f82:	9204      	strlt	r2, [sp, #16]
 8008f84:	7823      	ldrb	r3, [r4, #0]
 8008f86:	2b2e      	cmp	r3, #46	; 0x2e
 8008f88:	d10c      	bne.n	8008fa4 <_svfiprintf_r+0x130>
 8008f8a:	7863      	ldrb	r3, [r4, #1]
 8008f8c:	2b2a      	cmp	r3, #42	; 0x2a
 8008f8e:	d135      	bne.n	8008ffc <_svfiprintf_r+0x188>
 8008f90:	9b03      	ldr	r3, [sp, #12]
 8008f92:	1d1a      	adds	r2, r3, #4
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	9203      	str	r2, [sp, #12]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	bfb8      	it	lt
 8008f9c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008fa0:	3402      	adds	r4, #2
 8008fa2:	9305      	str	r3, [sp, #20]
 8008fa4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009070 <_svfiprintf_r+0x1fc>
 8008fa8:	7821      	ldrb	r1, [r4, #0]
 8008faa:	2203      	movs	r2, #3
 8008fac:	4650      	mov	r0, sl
 8008fae:	f7f7 f95f 	bl	8000270 <memchr>
 8008fb2:	b140      	cbz	r0, 8008fc6 <_svfiprintf_r+0x152>
 8008fb4:	2340      	movs	r3, #64	; 0x40
 8008fb6:	eba0 000a 	sub.w	r0, r0, sl
 8008fba:	fa03 f000 	lsl.w	r0, r3, r0
 8008fbe:	9b04      	ldr	r3, [sp, #16]
 8008fc0:	4303      	orrs	r3, r0
 8008fc2:	3401      	adds	r4, #1
 8008fc4:	9304      	str	r3, [sp, #16]
 8008fc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fca:	4826      	ldr	r0, [pc, #152]	; (8009064 <_svfiprintf_r+0x1f0>)
 8008fcc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008fd0:	2206      	movs	r2, #6
 8008fd2:	f7f7 f94d 	bl	8000270 <memchr>
 8008fd6:	2800      	cmp	r0, #0
 8008fd8:	d038      	beq.n	800904c <_svfiprintf_r+0x1d8>
 8008fda:	4b23      	ldr	r3, [pc, #140]	; (8009068 <_svfiprintf_r+0x1f4>)
 8008fdc:	bb1b      	cbnz	r3, 8009026 <_svfiprintf_r+0x1b2>
 8008fde:	9b03      	ldr	r3, [sp, #12]
 8008fe0:	3307      	adds	r3, #7
 8008fe2:	f023 0307 	bic.w	r3, r3, #7
 8008fe6:	3308      	adds	r3, #8
 8008fe8:	9303      	str	r3, [sp, #12]
 8008fea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fec:	4433      	add	r3, r6
 8008fee:	9309      	str	r3, [sp, #36]	; 0x24
 8008ff0:	e767      	b.n	8008ec2 <_svfiprintf_r+0x4e>
 8008ff2:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ff6:	460c      	mov	r4, r1
 8008ff8:	2001      	movs	r0, #1
 8008ffa:	e7a5      	b.n	8008f48 <_svfiprintf_r+0xd4>
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	3401      	adds	r4, #1
 8009000:	9305      	str	r3, [sp, #20]
 8009002:	4619      	mov	r1, r3
 8009004:	f04f 0c0a 	mov.w	ip, #10
 8009008:	4620      	mov	r0, r4
 800900a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800900e:	3a30      	subs	r2, #48	; 0x30
 8009010:	2a09      	cmp	r2, #9
 8009012:	d903      	bls.n	800901c <_svfiprintf_r+0x1a8>
 8009014:	2b00      	cmp	r3, #0
 8009016:	d0c5      	beq.n	8008fa4 <_svfiprintf_r+0x130>
 8009018:	9105      	str	r1, [sp, #20]
 800901a:	e7c3      	b.n	8008fa4 <_svfiprintf_r+0x130>
 800901c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009020:	4604      	mov	r4, r0
 8009022:	2301      	movs	r3, #1
 8009024:	e7f0      	b.n	8009008 <_svfiprintf_r+0x194>
 8009026:	ab03      	add	r3, sp, #12
 8009028:	9300      	str	r3, [sp, #0]
 800902a:	462a      	mov	r2, r5
 800902c:	4b0f      	ldr	r3, [pc, #60]	; (800906c <_svfiprintf_r+0x1f8>)
 800902e:	a904      	add	r1, sp, #16
 8009030:	4638      	mov	r0, r7
 8009032:	f3af 8000 	nop.w
 8009036:	1c42      	adds	r2, r0, #1
 8009038:	4606      	mov	r6, r0
 800903a:	d1d6      	bne.n	8008fea <_svfiprintf_r+0x176>
 800903c:	89ab      	ldrh	r3, [r5, #12]
 800903e:	065b      	lsls	r3, r3, #25
 8009040:	f53f af2c 	bmi.w	8008e9c <_svfiprintf_r+0x28>
 8009044:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009046:	b01d      	add	sp, #116	; 0x74
 8009048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800904c:	ab03      	add	r3, sp, #12
 800904e:	9300      	str	r3, [sp, #0]
 8009050:	462a      	mov	r2, r5
 8009052:	4b06      	ldr	r3, [pc, #24]	; (800906c <_svfiprintf_r+0x1f8>)
 8009054:	a904      	add	r1, sp, #16
 8009056:	4638      	mov	r0, r7
 8009058:	f000 f9d4 	bl	8009404 <_printf_i>
 800905c:	e7eb      	b.n	8009036 <_svfiprintf_r+0x1c2>
 800905e:	bf00      	nop
 8009060:	0800a11c 	.word	0x0800a11c
 8009064:	0800a126 	.word	0x0800a126
 8009068:	00000000 	.word	0x00000000
 800906c:	08008dbf 	.word	0x08008dbf
 8009070:	0800a122 	.word	0x0800a122

08009074 <__sfputc_r>:
 8009074:	6893      	ldr	r3, [r2, #8]
 8009076:	3b01      	subs	r3, #1
 8009078:	2b00      	cmp	r3, #0
 800907a:	b410      	push	{r4}
 800907c:	6093      	str	r3, [r2, #8]
 800907e:	da08      	bge.n	8009092 <__sfputc_r+0x1e>
 8009080:	6994      	ldr	r4, [r2, #24]
 8009082:	42a3      	cmp	r3, r4
 8009084:	db01      	blt.n	800908a <__sfputc_r+0x16>
 8009086:	290a      	cmp	r1, #10
 8009088:	d103      	bne.n	8009092 <__sfputc_r+0x1e>
 800908a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800908e:	f7fe bb5f 	b.w	8007750 <__swbuf_r>
 8009092:	6813      	ldr	r3, [r2, #0]
 8009094:	1c58      	adds	r0, r3, #1
 8009096:	6010      	str	r0, [r2, #0]
 8009098:	7019      	strb	r1, [r3, #0]
 800909a:	4608      	mov	r0, r1
 800909c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090a0:	4770      	bx	lr

080090a2 <__sfputs_r>:
 80090a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090a4:	4606      	mov	r6, r0
 80090a6:	460f      	mov	r7, r1
 80090a8:	4614      	mov	r4, r2
 80090aa:	18d5      	adds	r5, r2, r3
 80090ac:	42ac      	cmp	r4, r5
 80090ae:	d101      	bne.n	80090b4 <__sfputs_r+0x12>
 80090b0:	2000      	movs	r0, #0
 80090b2:	e007      	b.n	80090c4 <__sfputs_r+0x22>
 80090b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090b8:	463a      	mov	r2, r7
 80090ba:	4630      	mov	r0, r6
 80090bc:	f7ff ffda 	bl	8009074 <__sfputc_r>
 80090c0:	1c43      	adds	r3, r0, #1
 80090c2:	d1f3      	bne.n	80090ac <__sfputs_r+0xa>
 80090c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080090c8 <_vfiprintf_r>:
 80090c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090cc:	460d      	mov	r5, r1
 80090ce:	b09d      	sub	sp, #116	; 0x74
 80090d0:	4614      	mov	r4, r2
 80090d2:	4698      	mov	r8, r3
 80090d4:	4606      	mov	r6, r0
 80090d6:	b118      	cbz	r0, 80090e0 <_vfiprintf_r+0x18>
 80090d8:	6983      	ldr	r3, [r0, #24]
 80090da:	b90b      	cbnz	r3, 80090e0 <_vfiprintf_r+0x18>
 80090dc:	f7fe fd12 	bl	8007b04 <__sinit>
 80090e0:	4b89      	ldr	r3, [pc, #548]	; (8009308 <_vfiprintf_r+0x240>)
 80090e2:	429d      	cmp	r5, r3
 80090e4:	d11b      	bne.n	800911e <_vfiprintf_r+0x56>
 80090e6:	6875      	ldr	r5, [r6, #4]
 80090e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090ea:	07d9      	lsls	r1, r3, #31
 80090ec:	d405      	bmi.n	80090fa <_vfiprintf_r+0x32>
 80090ee:	89ab      	ldrh	r3, [r5, #12]
 80090f0:	059a      	lsls	r2, r3, #22
 80090f2:	d402      	bmi.n	80090fa <_vfiprintf_r+0x32>
 80090f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090f6:	f7ff f912 	bl	800831e <__retarget_lock_acquire_recursive>
 80090fa:	89ab      	ldrh	r3, [r5, #12]
 80090fc:	071b      	lsls	r3, r3, #28
 80090fe:	d501      	bpl.n	8009104 <_vfiprintf_r+0x3c>
 8009100:	692b      	ldr	r3, [r5, #16]
 8009102:	b9eb      	cbnz	r3, 8009140 <_vfiprintf_r+0x78>
 8009104:	4629      	mov	r1, r5
 8009106:	4630      	mov	r0, r6
 8009108:	f7fe fb74 	bl	80077f4 <__swsetup_r>
 800910c:	b1c0      	cbz	r0, 8009140 <_vfiprintf_r+0x78>
 800910e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009110:	07dc      	lsls	r4, r3, #31
 8009112:	d50e      	bpl.n	8009132 <_vfiprintf_r+0x6a>
 8009114:	f04f 30ff 	mov.w	r0, #4294967295
 8009118:	b01d      	add	sp, #116	; 0x74
 800911a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800911e:	4b7b      	ldr	r3, [pc, #492]	; (800930c <_vfiprintf_r+0x244>)
 8009120:	429d      	cmp	r5, r3
 8009122:	d101      	bne.n	8009128 <_vfiprintf_r+0x60>
 8009124:	68b5      	ldr	r5, [r6, #8]
 8009126:	e7df      	b.n	80090e8 <_vfiprintf_r+0x20>
 8009128:	4b79      	ldr	r3, [pc, #484]	; (8009310 <_vfiprintf_r+0x248>)
 800912a:	429d      	cmp	r5, r3
 800912c:	bf08      	it	eq
 800912e:	68f5      	ldreq	r5, [r6, #12]
 8009130:	e7da      	b.n	80090e8 <_vfiprintf_r+0x20>
 8009132:	89ab      	ldrh	r3, [r5, #12]
 8009134:	0598      	lsls	r0, r3, #22
 8009136:	d4ed      	bmi.n	8009114 <_vfiprintf_r+0x4c>
 8009138:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800913a:	f7ff f8f1 	bl	8008320 <__retarget_lock_release_recursive>
 800913e:	e7e9      	b.n	8009114 <_vfiprintf_r+0x4c>
 8009140:	2300      	movs	r3, #0
 8009142:	9309      	str	r3, [sp, #36]	; 0x24
 8009144:	2320      	movs	r3, #32
 8009146:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800914a:	f8cd 800c 	str.w	r8, [sp, #12]
 800914e:	2330      	movs	r3, #48	; 0x30
 8009150:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009314 <_vfiprintf_r+0x24c>
 8009154:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009158:	f04f 0901 	mov.w	r9, #1
 800915c:	4623      	mov	r3, r4
 800915e:	469a      	mov	sl, r3
 8009160:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009164:	b10a      	cbz	r2, 800916a <_vfiprintf_r+0xa2>
 8009166:	2a25      	cmp	r2, #37	; 0x25
 8009168:	d1f9      	bne.n	800915e <_vfiprintf_r+0x96>
 800916a:	ebba 0b04 	subs.w	fp, sl, r4
 800916e:	d00b      	beq.n	8009188 <_vfiprintf_r+0xc0>
 8009170:	465b      	mov	r3, fp
 8009172:	4622      	mov	r2, r4
 8009174:	4629      	mov	r1, r5
 8009176:	4630      	mov	r0, r6
 8009178:	f7ff ff93 	bl	80090a2 <__sfputs_r>
 800917c:	3001      	adds	r0, #1
 800917e:	f000 80aa 	beq.w	80092d6 <_vfiprintf_r+0x20e>
 8009182:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009184:	445a      	add	r2, fp
 8009186:	9209      	str	r2, [sp, #36]	; 0x24
 8009188:	f89a 3000 	ldrb.w	r3, [sl]
 800918c:	2b00      	cmp	r3, #0
 800918e:	f000 80a2 	beq.w	80092d6 <_vfiprintf_r+0x20e>
 8009192:	2300      	movs	r3, #0
 8009194:	f04f 32ff 	mov.w	r2, #4294967295
 8009198:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800919c:	f10a 0a01 	add.w	sl, sl, #1
 80091a0:	9304      	str	r3, [sp, #16]
 80091a2:	9307      	str	r3, [sp, #28]
 80091a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80091a8:	931a      	str	r3, [sp, #104]	; 0x68
 80091aa:	4654      	mov	r4, sl
 80091ac:	2205      	movs	r2, #5
 80091ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091b2:	4858      	ldr	r0, [pc, #352]	; (8009314 <_vfiprintf_r+0x24c>)
 80091b4:	f7f7 f85c 	bl	8000270 <memchr>
 80091b8:	9a04      	ldr	r2, [sp, #16]
 80091ba:	b9d8      	cbnz	r0, 80091f4 <_vfiprintf_r+0x12c>
 80091bc:	06d1      	lsls	r1, r2, #27
 80091be:	bf44      	itt	mi
 80091c0:	2320      	movmi	r3, #32
 80091c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091c6:	0713      	lsls	r3, r2, #28
 80091c8:	bf44      	itt	mi
 80091ca:	232b      	movmi	r3, #43	; 0x2b
 80091cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091d0:	f89a 3000 	ldrb.w	r3, [sl]
 80091d4:	2b2a      	cmp	r3, #42	; 0x2a
 80091d6:	d015      	beq.n	8009204 <_vfiprintf_r+0x13c>
 80091d8:	9a07      	ldr	r2, [sp, #28]
 80091da:	4654      	mov	r4, sl
 80091dc:	2000      	movs	r0, #0
 80091de:	f04f 0c0a 	mov.w	ip, #10
 80091e2:	4621      	mov	r1, r4
 80091e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091e8:	3b30      	subs	r3, #48	; 0x30
 80091ea:	2b09      	cmp	r3, #9
 80091ec:	d94e      	bls.n	800928c <_vfiprintf_r+0x1c4>
 80091ee:	b1b0      	cbz	r0, 800921e <_vfiprintf_r+0x156>
 80091f0:	9207      	str	r2, [sp, #28]
 80091f2:	e014      	b.n	800921e <_vfiprintf_r+0x156>
 80091f4:	eba0 0308 	sub.w	r3, r0, r8
 80091f8:	fa09 f303 	lsl.w	r3, r9, r3
 80091fc:	4313      	orrs	r3, r2
 80091fe:	9304      	str	r3, [sp, #16]
 8009200:	46a2      	mov	sl, r4
 8009202:	e7d2      	b.n	80091aa <_vfiprintf_r+0xe2>
 8009204:	9b03      	ldr	r3, [sp, #12]
 8009206:	1d19      	adds	r1, r3, #4
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	9103      	str	r1, [sp, #12]
 800920c:	2b00      	cmp	r3, #0
 800920e:	bfbb      	ittet	lt
 8009210:	425b      	neglt	r3, r3
 8009212:	f042 0202 	orrlt.w	r2, r2, #2
 8009216:	9307      	strge	r3, [sp, #28]
 8009218:	9307      	strlt	r3, [sp, #28]
 800921a:	bfb8      	it	lt
 800921c:	9204      	strlt	r2, [sp, #16]
 800921e:	7823      	ldrb	r3, [r4, #0]
 8009220:	2b2e      	cmp	r3, #46	; 0x2e
 8009222:	d10c      	bne.n	800923e <_vfiprintf_r+0x176>
 8009224:	7863      	ldrb	r3, [r4, #1]
 8009226:	2b2a      	cmp	r3, #42	; 0x2a
 8009228:	d135      	bne.n	8009296 <_vfiprintf_r+0x1ce>
 800922a:	9b03      	ldr	r3, [sp, #12]
 800922c:	1d1a      	adds	r2, r3, #4
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	9203      	str	r2, [sp, #12]
 8009232:	2b00      	cmp	r3, #0
 8009234:	bfb8      	it	lt
 8009236:	f04f 33ff 	movlt.w	r3, #4294967295
 800923a:	3402      	adds	r4, #2
 800923c:	9305      	str	r3, [sp, #20]
 800923e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009324 <_vfiprintf_r+0x25c>
 8009242:	7821      	ldrb	r1, [r4, #0]
 8009244:	2203      	movs	r2, #3
 8009246:	4650      	mov	r0, sl
 8009248:	f7f7 f812 	bl	8000270 <memchr>
 800924c:	b140      	cbz	r0, 8009260 <_vfiprintf_r+0x198>
 800924e:	2340      	movs	r3, #64	; 0x40
 8009250:	eba0 000a 	sub.w	r0, r0, sl
 8009254:	fa03 f000 	lsl.w	r0, r3, r0
 8009258:	9b04      	ldr	r3, [sp, #16]
 800925a:	4303      	orrs	r3, r0
 800925c:	3401      	adds	r4, #1
 800925e:	9304      	str	r3, [sp, #16]
 8009260:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009264:	482c      	ldr	r0, [pc, #176]	; (8009318 <_vfiprintf_r+0x250>)
 8009266:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800926a:	2206      	movs	r2, #6
 800926c:	f7f7 f800 	bl	8000270 <memchr>
 8009270:	2800      	cmp	r0, #0
 8009272:	d03f      	beq.n	80092f4 <_vfiprintf_r+0x22c>
 8009274:	4b29      	ldr	r3, [pc, #164]	; (800931c <_vfiprintf_r+0x254>)
 8009276:	bb1b      	cbnz	r3, 80092c0 <_vfiprintf_r+0x1f8>
 8009278:	9b03      	ldr	r3, [sp, #12]
 800927a:	3307      	adds	r3, #7
 800927c:	f023 0307 	bic.w	r3, r3, #7
 8009280:	3308      	adds	r3, #8
 8009282:	9303      	str	r3, [sp, #12]
 8009284:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009286:	443b      	add	r3, r7
 8009288:	9309      	str	r3, [sp, #36]	; 0x24
 800928a:	e767      	b.n	800915c <_vfiprintf_r+0x94>
 800928c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009290:	460c      	mov	r4, r1
 8009292:	2001      	movs	r0, #1
 8009294:	e7a5      	b.n	80091e2 <_vfiprintf_r+0x11a>
 8009296:	2300      	movs	r3, #0
 8009298:	3401      	adds	r4, #1
 800929a:	9305      	str	r3, [sp, #20]
 800929c:	4619      	mov	r1, r3
 800929e:	f04f 0c0a 	mov.w	ip, #10
 80092a2:	4620      	mov	r0, r4
 80092a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092a8:	3a30      	subs	r2, #48	; 0x30
 80092aa:	2a09      	cmp	r2, #9
 80092ac:	d903      	bls.n	80092b6 <_vfiprintf_r+0x1ee>
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d0c5      	beq.n	800923e <_vfiprintf_r+0x176>
 80092b2:	9105      	str	r1, [sp, #20]
 80092b4:	e7c3      	b.n	800923e <_vfiprintf_r+0x176>
 80092b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80092ba:	4604      	mov	r4, r0
 80092bc:	2301      	movs	r3, #1
 80092be:	e7f0      	b.n	80092a2 <_vfiprintf_r+0x1da>
 80092c0:	ab03      	add	r3, sp, #12
 80092c2:	9300      	str	r3, [sp, #0]
 80092c4:	462a      	mov	r2, r5
 80092c6:	4b16      	ldr	r3, [pc, #88]	; (8009320 <_vfiprintf_r+0x258>)
 80092c8:	a904      	add	r1, sp, #16
 80092ca:	4630      	mov	r0, r6
 80092cc:	f3af 8000 	nop.w
 80092d0:	4607      	mov	r7, r0
 80092d2:	1c78      	adds	r0, r7, #1
 80092d4:	d1d6      	bne.n	8009284 <_vfiprintf_r+0x1bc>
 80092d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092d8:	07d9      	lsls	r1, r3, #31
 80092da:	d405      	bmi.n	80092e8 <_vfiprintf_r+0x220>
 80092dc:	89ab      	ldrh	r3, [r5, #12]
 80092de:	059a      	lsls	r2, r3, #22
 80092e0:	d402      	bmi.n	80092e8 <_vfiprintf_r+0x220>
 80092e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092e4:	f7ff f81c 	bl	8008320 <__retarget_lock_release_recursive>
 80092e8:	89ab      	ldrh	r3, [r5, #12]
 80092ea:	065b      	lsls	r3, r3, #25
 80092ec:	f53f af12 	bmi.w	8009114 <_vfiprintf_r+0x4c>
 80092f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80092f2:	e711      	b.n	8009118 <_vfiprintf_r+0x50>
 80092f4:	ab03      	add	r3, sp, #12
 80092f6:	9300      	str	r3, [sp, #0]
 80092f8:	462a      	mov	r2, r5
 80092fa:	4b09      	ldr	r3, [pc, #36]	; (8009320 <_vfiprintf_r+0x258>)
 80092fc:	a904      	add	r1, sp, #16
 80092fe:	4630      	mov	r0, r6
 8009300:	f000 f880 	bl	8009404 <_printf_i>
 8009304:	e7e4      	b.n	80092d0 <_vfiprintf_r+0x208>
 8009306:	bf00      	nop
 8009308:	08009edc 	.word	0x08009edc
 800930c:	08009efc 	.word	0x08009efc
 8009310:	08009ebc 	.word	0x08009ebc
 8009314:	0800a11c 	.word	0x0800a11c
 8009318:	0800a126 	.word	0x0800a126
 800931c:	00000000 	.word	0x00000000
 8009320:	080090a3 	.word	0x080090a3
 8009324:	0800a122 	.word	0x0800a122

08009328 <_printf_common>:
 8009328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800932c:	4616      	mov	r6, r2
 800932e:	4699      	mov	r9, r3
 8009330:	688a      	ldr	r2, [r1, #8]
 8009332:	690b      	ldr	r3, [r1, #16]
 8009334:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009338:	4293      	cmp	r3, r2
 800933a:	bfb8      	it	lt
 800933c:	4613      	movlt	r3, r2
 800933e:	6033      	str	r3, [r6, #0]
 8009340:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009344:	4607      	mov	r7, r0
 8009346:	460c      	mov	r4, r1
 8009348:	b10a      	cbz	r2, 800934e <_printf_common+0x26>
 800934a:	3301      	adds	r3, #1
 800934c:	6033      	str	r3, [r6, #0]
 800934e:	6823      	ldr	r3, [r4, #0]
 8009350:	0699      	lsls	r1, r3, #26
 8009352:	bf42      	ittt	mi
 8009354:	6833      	ldrmi	r3, [r6, #0]
 8009356:	3302      	addmi	r3, #2
 8009358:	6033      	strmi	r3, [r6, #0]
 800935a:	6825      	ldr	r5, [r4, #0]
 800935c:	f015 0506 	ands.w	r5, r5, #6
 8009360:	d106      	bne.n	8009370 <_printf_common+0x48>
 8009362:	f104 0a19 	add.w	sl, r4, #25
 8009366:	68e3      	ldr	r3, [r4, #12]
 8009368:	6832      	ldr	r2, [r6, #0]
 800936a:	1a9b      	subs	r3, r3, r2
 800936c:	42ab      	cmp	r3, r5
 800936e:	dc26      	bgt.n	80093be <_printf_common+0x96>
 8009370:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009374:	1e13      	subs	r3, r2, #0
 8009376:	6822      	ldr	r2, [r4, #0]
 8009378:	bf18      	it	ne
 800937a:	2301      	movne	r3, #1
 800937c:	0692      	lsls	r2, r2, #26
 800937e:	d42b      	bmi.n	80093d8 <_printf_common+0xb0>
 8009380:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009384:	4649      	mov	r1, r9
 8009386:	4638      	mov	r0, r7
 8009388:	47c0      	blx	r8
 800938a:	3001      	adds	r0, #1
 800938c:	d01e      	beq.n	80093cc <_printf_common+0xa4>
 800938e:	6823      	ldr	r3, [r4, #0]
 8009390:	68e5      	ldr	r5, [r4, #12]
 8009392:	6832      	ldr	r2, [r6, #0]
 8009394:	f003 0306 	and.w	r3, r3, #6
 8009398:	2b04      	cmp	r3, #4
 800939a:	bf08      	it	eq
 800939c:	1aad      	subeq	r5, r5, r2
 800939e:	68a3      	ldr	r3, [r4, #8]
 80093a0:	6922      	ldr	r2, [r4, #16]
 80093a2:	bf0c      	ite	eq
 80093a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80093a8:	2500      	movne	r5, #0
 80093aa:	4293      	cmp	r3, r2
 80093ac:	bfc4      	itt	gt
 80093ae:	1a9b      	subgt	r3, r3, r2
 80093b0:	18ed      	addgt	r5, r5, r3
 80093b2:	2600      	movs	r6, #0
 80093b4:	341a      	adds	r4, #26
 80093b6:	42b5      	cmp	r5, r6
 80093b8:	d11a      	bne.n	80093f0 <_printf_common+0xc8>
 80093ba:	2000      	movs	r0, #0
 80093bc:	e008      	b.n	80093d0 <_printf_common+0xa8>
 80093be:	2301      	movs	r3, #1
 80093c0:	4652      	mov	r2, sl
 80093c2:	4649      	mov	r1, r9
 80093c4:	4638      	mov	r0, r7
 80093c6:	47c0      	blx	r8
 80093c8:	3001      	adds	r0, #1
 80093ca:	d103      	bne.n	80093d4 <_printf_common+0xac>
 80093cc:	f04f 30ff 	mov.w	r0, #4294967295
 80093d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093d4:	3501      	adds	r5, #1
 80093d6:	e7c6      	b.n	8009366 <_printf_common+0x3e>
 80093d8:	18e1      	adds	r1, r4, r3
 80093da:	1c5a      	adds	r2, r3, #1
 80093dc:	2030      	movs	r0, #48	; 0x30
 80093de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80093e2:	4422      	add	r2, r4
 80093e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80093e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80093ec:	3302      	adds	r3, #2
 80093ee:	e7c7      	b.n	8009380 <_printf_common+0x58>
 80093f0:	2301      	movs	r3, #1
 80093f2:	4622      	mov	r2, r4
 80093f4:	4649      	mov	r1, r9
 80093f6:	4638      	mov	r0, r7
 80093f8:	47c0      	blx	r8
 80093fa:	3001      	adds	r0, #1
 80093fc:	d0e6      	beq.n	80093cc <_printf_common+0xa4>
 80093fe:	3601      	adds	r6, #1
 8009400:	e7d9      	b.n	80093b6 <_printf_common+0x8e>
	...

08009404 <_printf_i>:
 8009404:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009408:	460c      	mov	r4, r1
 800940a:	4691      	mov	r9, r2
 800940c:	7e27      	ldrb	r7, [r4, #24]
 800940e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009410:	2f78      	cmp	r7, #120	; 0x78
 8009412:	4680      	mov	r8, r0
 8009414:	469a      	mov	sl, r3
 8009416:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800941a:	d807      	bhi.n	800942c <_printf_i+0x28>
 800941c:	2f62      	cmp	r7, #98	; 0x62
 800941e:	d80a      	bhi.n	8009436 <_printf_i+0x32>
 8009420:	2f00      	cmp	r7, #0
 8009422:	f000 80d8 	beq.w	80095d6 <_printf_i+0x1d2>
 8009426:	2f58      	cmp	r7, #88	; 0x58
 8009428:	f000 80a3 	beq.w	8009572 <_printf_i+0x16e>
 800942c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009430:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009434:	e03a      	b.n	80094ac <_printf_i+0xa8>
 8009436:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800943a:	2b15      	cmp	r3, #21
 800943c:	d8f6      	bhi.n	800942c <_printf_i+0x28>
 800943e:	a001      	add	r0, pc, #4	; (adr r0, 8009444 <_printf_i+0x40>)
 8009440:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009444:	0800949d 	.word	0x0800949d
 8009448:	080094b1 	.word	0x080094b1
 800944c:	0800942d 	.word	0x0800942d
 8009450:	0800942d 	.word	0x0800942d
 8009454:	0800942d 	.word	0x0800942d
 8009458:	0800942d 	.word	0x0800942d
 800945c:	080094b1 	.word	0x080094b1
 8009460:	0800942d 	.word	0x0800942d
 8009464:	0800942d 	.word	0x0800942d
 8009468:	0800942d 	.word	0x0800942d
 800946c:	0800942d 	.word	0x0800942d
 8009470:	080095bd 	.word	0x080095bd
 8009474:	080094e1 	.word	0x080094e1
 8009478:	0800959f 	.word	0x0800959f
 800947c:	0800942d 	.word	0x0800942d
 8009480:	0800942d 	.word	0x0800942d
 8009484:	080095df 	.word	0x080095df
 8009488:	0800942d 	.word	0x0800942d
 800948c:	080094e1 	.word	0x080094e1
 8009490:	0800942d 	.word	0x0800942d
 8009494:	0800942d 	.word	0x0800942d
 8009498:	080095a7 	.word	0x080095a7
 800949c:	680b      	ldr	r3, [r1, #0]
 800949e:	1d1a      	adds	r2, r3, #4
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	600a      	str	r2, [r1, #0]
 80094a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80094a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80094ac:	2301      	movs	r3, #1
 80094ae:	e0a3      	b.n	80095f8 <_printf_i+0x1f4>
 80094b0:	6825      	ldr	r5, [r4, #0]
 80094b2:	6808      	ldr	r0, [r1, #0]
 80094b4:	062e      	lsls	r6, r5, #24
 80094b6:	f100 0304 	add.w	r3, r0, #4
 80094ba:	d50a      	bpl.n	80094d2 <_printf_i+0xce>
 80094bc:	6805      	ldr	r5, [r0, #0]
 80094be:	600b      	str	r3, [r1, #0]
 80094c0:	2d00      	cmp	r5, #0
 80094c2:	da03      	bge.n	80094cc <_printf_i+0xc8>
 80094c4:	232d      	movs	r3, #45	; 0x2d
 80094c6:	426d      	negs	r5, r5
 80094c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094cc:	485e      	ldr	r0, [pc, #376]	; (8009648 <_printf_i+0x244>)
 80094ce:	230a      	movs	r3, #10
 80094d0:	e019      	b.n	8009506 <_printf_i+0x102>
 80094d2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80094d6:	6805      	ldr	r5, [r0, #0]
 80094d8:	600b      	str	r3, [r1, #0]
 80094da:	bf18      	it	ne
 80094dc:	b22d      	sxthne	r5, r5
 80094de:	e7ef      	b.n	80094c0 <_printf_i+0xbc>
 80094e0:	680b      	ldr	r3, [r1, #0]
 80094e2:	6825      	ldr	r5, [r4, #0]
 80094e4:	1d18      	adds	r0, r3, #4
 80094e6:	6008      	str	r0, [r1, #0]
 80094e8:	0628      	lsls	r0, r5, #24
 80094ea:	d501      	bpl.n	80094f0 <_printf_i+0xec>
 80094ec:	681d      	ldr	r5, [r3, #0]
 80094ee:	e002      	b.n	80094f6 <_printf_i+0xf2>
 80094f0:	0669      	lsls	r1, r5, #25
 80094f2:	d5fb      	bpl.n	80094ec <_printf_i+0xe8>
 80094f4:	881d      	ldrh	r5, [r3, #0]
 80094f6:	4854      	ldr	r0, [pc, #336]	; (8009648 <_printf_i+0x244>)
 80094f8:	2f6f      	cmp	r7, #111	; 0x6f
 80094fa:	bf0c      	ite	eq
 80094fc:	2308      	moveq	r3, #8
 80094fe:	230a      	movne	r3, #10
 8009500:	2100      	movs	r1, #0
 8009502:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009506:	6866      	ldr	r6, [r4, #4]
 8009508:	60a6      	str	r6, [r4, #8]
 800950a:	2e00      	cmp	r6, #0
 800950c:	bfa2      	ittt	ge
 800950e:	6821      	ldrge	r1, [r4, #0]
 8009510:	f021 0104 	bicge.w	r1, r1, #4
 8009514:	6021      	strge	r1, [r4, #0]
 8009516:	b90d      	cbnz	r5, 800951c <_printf_i+0x118>
 8009518:	2e00      	cmp	r6, #0
 800951a:	d04d      	beq.n	80095b8 <_printf_i+0x1b4>
 800951c:	4616      	mov	r6, r2
 800951e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009522:	fb03 5711 	mls	r7, r3, r1, r5
 8009526:	5dc7      	ldrb	r7, [r0, r7]
 8009528:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800952c:	462f      	mov	r7, r5
 800952e:	42bb      	cmp	r3, r7
 8009530:	460d      	mov	r5, r1
 8009532:	d9f4      	bls.n	800951e <_printf_i+0x11a>
 8009534:	2b08      	cmp	r3, #8
 8009536:	d10b      	bne.n	8009550 <_printf_i+0x14c>
 8009538:	6823      	ldr	r3, [r4, #0]
 800953a:	07df      	lsls	r7, r3, #31
 800953c:	d508      	bpl.n	8009550 <_printf_i+0x14c>
 800953e:	6923      	ldr	r3, [r4, #16]
 8009540:	6861      	ldr	r1, [r4, #4]
 8009542:	4299      	cmp	r1, r3
 8009544:	bfde      	ittt	le
 8009546:	2330      	movle	r3, #48	; 0x30
 8009548:	f806 3c01 	strble.w	r3, [r6, #-1]
 800954c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009550:	1b92      	subs	r2, r2, r6
 8009552:	6122      	str	r2, [r4, #16]
 8009554:	f8cd a000 	str.w	sl, [sp]
 8009558:	464b      	mov	r3, r9
 800955a:	aa03      	add	r2, sp, #12
 800955c:	4621      	mov	r1, r4
 800955e:	4640      	mov	r0, r8
 8009560:	f7ff fee2 	bl	8009328 <_printf_common>
 8009564:	3001      	adds	r0, #1
 8009566:	d14c      	bne.n	8009602 <_printf_i+0x1fe>
 8009568:	f04f 30ff 	mov.w	r0, #4294967295
 800956c:	b004      	add	sp, #16
 800956e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009572:	4835      	ldr	r0, [pc, #212]	; (8009648 <_printf_i+0x244>)
 8009574:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009578:	6823      	ldr	r3, [r4, #0]
 800957a:	680e      	ldr	r6, [r1, #0]
 800957c:	061f      	lsls	r7, r3, #24
 800957e:	f856 5b04 	ldr.w	r5, [r6], #4
 8009582:	600e      	str	r6, [r1, #0]
 8009584:	d514      	bpl.n	80095b0 <_printf_i+0x1ac>
 8009586:	07d9      	lsls	r1, r3, #31
 8009588:	bf44      	itt	mi
 800958a:	f043 0320 	orrmi.w	r3, r3, #32
 800958e:	6023      	strmi	r3, [r4, #0]
 8009590:	b91d      	cbnz	r5, 800959a <_printf_i+0x196>
 8009592:	6823      	ldr	r3, [r4, #0]
 8009594:	f023 0320 	bic.w	r3, r3, #32
 8009598:	6023      	str	r3, [r4, #0]
 800959a:	2310      	movs	r3, #16
 800959c:	e7b0      	b.n	8009500 <_printf_i+0xfc>
 800959e:	6823      	ldr	r3, [r4, #0]
 80095a0:	f043 0320 	orr.w	r3, r3, #32
 80095a4:	6023      	str	r3, [r4, #0]
 80095a6:	2378      	movs	r3, #120	; 0x78
 80095a8:	4828      	ldr	r0, [pc, #160]	; (800964c <_printf_i+0x248>)
 80095aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80095ae:	e7e3      	b.n	8009578 <_printf_i+0x174>
 80095b0:	065e      	lsls	r6, r3, #25
 80095b2:	bf48      	it	mi
 80095b4:	b2ad      	uxthmi	r5, r5
 80095b6:	e7e6      	b.n	8009586 <_printf_i+0x182>
 80095b8:	4616      	mov	r6, r2
 80095ba:	e7bb      	b.n	8009534 <_printf_i+0x130>
 80095bc:	680b      	ldr	r3, [r1, #0]
 80095be:	6826      	ldr	r6, [r4, #0]
 80095c0:	6960      	ldr	r0, [r4, #20]
 80095c2:	1d1d      	adds	r5, r3, #4
 80095c4:	600d      	str	r5, [r1, #0]
 80095c6:	0635      	lsls	r5, r6, #24
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	d501      	bpl.n	80095d0 <_printf_i+0x1cc>
 80095cc:	6018      	str	r0, [r3, #0]
 80095ce:	e002      	b.n	80095d6 <_printf_i+0x1d2>
 80095d0:	0671      	lsls	r1, r6, #25
 80095d2:	d5fb      	bpl.n	80095cc <_printf_i+0x1c8>
 80095d4:	8018      	strh	r0, [r3, #0]
 80095d6:	2300      	movs	r3, #0
 80095d8:	6123      	str	r3, [r4, #16]
 80095da:	4616      	mov	r6, r2
 80095dc:	e7ba      	b.n	8009554 <_printf_i+0x150>
 80095de:	680b      	ldr	r3, [r1, #0]
 80095e0:	1d1a      	adds	r2, r3, #4
 80095e2:	600a      	str	r2, [r1, #0]
 80095e4:	681e      	ldr	r6, [r3, #0]
 80095e6:	6862      	ldr	r2, [r4, #4]
 80095e8:	2100      	movs	r1, #0
 80095ea:	4630      	mov	r0, r6
 80095ec:	f7f6 fe40 	bl	8000270 <memchr>
 80095f0:	b108      	cbz	r0, 80095f6 <_printf_i+0x1f2>
 80095f2:	1b80      	subs	r0, r0, r6
 80095f4:	6060      	str	r0, [r4, #4]
 80095f6:	6863      	ldr	r3, [r4, #4]
 80095f8:	6123      	str	r3, [r4, #16]
 80095fa:	2300      	movs	r3, #0
 80095fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009600:	e7a8      	b.n	8009554 <_printf_i+0x150>
 8009602:	6923      	ldr	r3, [r4, #16]
 8009604:	4632      	mov	r2, r6
 8009606:	4649      	mov	r1, r9
 8009608:	4640      	mov	r0, r8
 800960a:	47d0      	blx	sl
 800960c:	3001      	adds	r0, #1
 800960e:	d0ab      	beq.n	8009568 <_printf_i+0x164>
 8009610:	6823      	ldr	r3, [r4, #0]
 8009612:	079b      	lsls	r3, r3, #30
 8009614:	d413      	bmi.n	800963e <_printf_i+0x23a>
 8009616:	68e0      	ldr	r0, [r4, #12]
 8009618:	9b03      	ldr	r3, [sp, #12]
 800961a:	4298      	cmp	r0, r3
 800961c:	bfb8      	it	lt
 800961e:	4618      	movlt	r0, r3
 8009620:	e7a4      	b.n	800956c <_printf_i+0x168>
 8009622:	2301      	movs	r3, #1
 8009624:	4632      	mov	r2, r6
 8009626:	4649      	mov	r1, r9
 8009628:	4640      	mov	r0, r8
 800962a:	47d0      	blx	sl
 800962c:	3001      	adds	r0, #1
 800962e:	d09b      	beq.n	8009568 <_printf_i+0x164>
 8009630:	3501      	adds	r5, #1
 8009632:	68e3      	ldr	r3, [r4, #12]
 8009634:	9903      	ldr	r1, [sp, #12]
 8009636:	1a5b      	subs	r3, r3, r1
 8009638:	42ab      	cmp	r3, r5
 800963a:	dcf2      	bgt.n	8009622 <_printf_i+0x21e>
 800963c:	e7eb      	b.n	8009616 <_printf_i+0x212>
 800963e:	2500      	movs	r5, #0
 8009640:	f104 0619 	add.w	r6, r4, #25
 8009644:	e7f5      	b.n	8009632 <_printf_i+0x22e>
 8009646:	bf00      	nop
 8009648:	0800a12d 	.word	0x0800a12d
 800964c:	0800a13e 	.word	0x0800a13e

08009650 <_putc_r>:
 8009650:	b570      	push	{r4, r5, r6, lr}
 8009652:	460d      	mov	r5, r1
 8009654:	4614      	mov	r4, r2
 8009656:	4606      	mov	r6, r0
 8009658:	b118      	cbz	r0, 8009662 <_putc_r+0x12>
 800965a:	6983      	ldr	r3, [r0, #24]
 800965c:	b90b      	cbnz	r3, 8009662 <_putc_r+0x12>
 800965e:	f7fe fa51 	bl	8007b04 <__sinit>
 8009662:	4b1c      	ldr	r3, [pc, #112]	; (80096d4 <_putc_r+0x84>)
 8009664:	429c      	cmp	r4, r3
 8009666:	d124      	bne.n	80096b2 <_putc_r+0x62>
 8009668:	6874      	ldr	r4, [r6, #4]
 800966a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800966c:	07d8      	lsls	r0, r3, #31
 800966e:	d405      	bmi.n	800967c <_putc_r+0x2c>
 8009670:	89a3      	ldrh	r3, [r4, #12]
 8009672:	0599      	lsls	r1, r3, #22
 8009674:	d402      	bmi.n	800967c <_putc_r+0x2c>
 8009676:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009678:	f7fe fe51 	bl	800831e <__retarget_lock_acquire_recursive>
 800967c:	68a3      	ldr	r3, [r4, #8]
 800967e:	3b01      	subs	r3, #1
 8009680:	2b00      	cmp	r3, #0
 8009682:	60a3      	str	r3, [r4, #8]
 8009684:	da05      	bge.n	8009692 <_putc_r+0x42>
 8009686:	69a2      	ldr	r2, [r4, #24]
 8009688:	4293      	cmp	r3, r2
 800968a:	db1c      	blt.n	80096c6 <_putc_r+0x76>
 800968c:	b2eb      	uxtb	r3, r5
 800968e:	2b0a      	cmp	r3, #10
 8009690:	d019      	beq.n	80096c6 <_putc_r+0x76>
 8009692:	6823      	ldr	r3, [r4, #0]
 8009694:	1c5a      	adds	r2, r3, #1
 8009696:	6022      	str	r2, [r4, #0]
 8009698:	701d      	strb	r5, [r3, #0]
 800969a:	b2ed      	uxtb	r5, r5
 800969c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800969e:	07da      	lsls	r2, r3, #31
 80096a0:	d405      	bmi.n	80096ae <_putc_r+0x5e>
 80096a2:	89a3      	ldrh	r3, [r4, #12]
 80096a4:	059b      	lsls	r3, r3, #22
 80096a6:	d402      	bmi.n	80096ae <_putc_r+0x5e>
 80096a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096aa:	f7fe fe39 	bl	8008320 <__retarget_lock_release_recursive>
 80096ae:	4628      	mov	r0, r5
 80096b0:	bd70      	pop	{r4, r5, r6, pc}
 80096b2:	4b09      	ldr	r3, [pc, #36]	; (80096d8 <_putc_r+0x88>)
 80096b4:	429c      	cmp	r4, r3
 80096b6:	d101      	bne.n	80096bc <_putc_r+0x6c>
 80096b8:	68b4      	ldr	r4, [r6, #8]
 80096ba:	e7d6      	b.n	800966a <_putc_r+0x1a>
 80096bc:	4b07      	ldr	r3, [pc, #28]	; (80096dc <_putc_r+0x8c>)
 80096be:	429c      	cmp	r4, r3
 80096c0:	bf08      	it	eq
 80096c2:	68f4      	ldreq	r4, [r6, #12]
 80096c4:	e7d1      	b.n	800966a <_putc_r+0x1a>
 80096c6:	4629      	mov	r1, r5
 80096c8:	4622      	mov	r2, r4
 80096ca:	4630      	mov	r0, r6
 80096cc:	f7fe f840 	bl	8007750 <__swbuf_r>
 80096d0:	4605      	mov	r5, r0
 80096d2:	e7e3      	b.n	800969c <_putc_r+0x4c>
 80096d4:	08009edc 	.word	0x08009edc
 80096d8:	08009efc 	.word	0x08009efc
 80096dc:	08009ebc 	.word	0x08009ebc

080096e0 <nan>:
 80096e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80096e8 <nan+0x8>
 80096e4:	4770      	bx	lr
 80096e6:	bf00      	nop
 80096e8:	00000000 	.word	0x00000000
 80096ec:	7ff80000 	.word	0x7ff80000

080096f0 <nanf>:
 80096f0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80096f8 <nanf+0x8>
 80096f4:	4770      	bx	lr
 80096f6:	bf00      	nop
 80096f8:	7fc00000 	.word	0x7fc00000

080096fc <__sread>:
 80096fc:	b510      	push	{r4, lr}
 80096fe:	460c      	mov	r4, r1
 8009700:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009704:	f000 f922 	bl	800994c <_read_r>
 8009708:	2800      	cmp	r0, #0
 800970a:	bfab      	itete	ge
 800970c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800970e:	89a3      	ldrhlt	r3, [r4, #12]
 8009710:	181b      	addge	r3, r3, r0
 8009712:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009716:	bfac      	ite	ge
 8009718:	6563      	strge	r3, [r4, #84]	; 0x54
 800971a:	81a3      	strhlt	r3, [r4, #12]
 800971c:	bd10      	pop	{r4, pc}

0800971e <__swrite>:
 800971e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009722:	461f      	mov	r7, r3
 8009724:	898b      	ldrh	r3, [r1, #12]
 8009726:	05db      	lsls	r3, r3, #23
 8009728:	4605      	mov	r5, r0
 800972a:	460c      	mov	r4, r1
 800972c:	4616      	mov	r6, r2
 800972e:	d505      	bpl.n	800973c <__swrite+0x1e>
 8009730:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009734:	2302      	movs	r3, #2
 8009736:	2200      	movs	r2, #0
 8009738:	f000 f8b6 	bl	80098a8 <_lseek_r>
 800973c:	89a3      	ldrh	r3, [r4, #12]
 800973e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009742:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009746:	81a3      	strh	r3, [r4, #12]
 8009748:	4632      	mov	r2, r6
 800974a:	463b      	mov	r3, r7
 800974c:	4628      	mov	r0, r5
 800974e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009752:	f000 b835 	b.w	80097c0 <_write_r>

08009756 <__sseek>:
 8009756:	b510      	push	{r4, lr}
 8009758:	460c      	mov	r4, r1
 800975a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800975e:	f000 f8a3 	bl	80098a8 <_lseek_r>
 8009762:	1c43      	adds	r3, r0, #1
 8009764:	89a3      	ldrh	r3, [r4, #12]
 8009766:	bf15      	itete	ne
 8009768:	6560      	strne	r0, [r4, #84]	; 0x54
 800976a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800976e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009772:	81a3      	strheq	r3, [r4, #12]
 8009774:	bf18      	it	ne
 8009776:	81a3      	strhne	r3, [r4, #12]
 8009778:	bd10      	pop	{r4, pc}

0800977a <__sclose>:
 800977a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800977e:	f000 b84f 	b.w	8009820 <_close_r>

08009782 <strncmp>:
 8009782:	b510      	push	{r4, lr}
 8009784:	b16a      	cbz	r2, 80097a2 <strncmp+0x20>
 8009786:	3901      	subs	r1, #1
 8009788:	1884      	adds	r4, r0, r2
 800978a:	f810 3b01 	ldrb.w	r3, [r0], #1
 800978e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009792:	4293      	cmp	r3, r2
 8009794:	d103      	bne.n	800979e <strncmp+0x1c>
 8009796:	42a0      	cmp	r0, r4
 8009798:	d001      	beq.n	800979e <strncmp+0x1c>
 800979a:	2b00      	cmp	r3, #0
 800979c:	d1f5      	bne.n	800978a <strncmp+0x8>
 800979e:	1a98      	subs	r0, r3, r2
 80097a0:	bd10      	pop	{r4, pc}
 80097a2:	4610      	mov	r0, r2
 80097a4:	e7fc      	b.n	80097a0 <strncmp+0x1e>

080097a6 <__ascii_wctomb>:
 80097a6:	b149      	cbz	r1, 80097bc <__ascii_wctomb+0x16>
 80097a8:	2aff      	cmp	r2, #255	; 0xff
 80097aa:	bf85      	ittet	hi
 80097ac:	238a      	movhi	r3, #138	; 0x8a
 80097ae:	6003      	strhi	r3, [r0, #0]
 80097b0:	700a      	strbls	r2, [r1, #0]
 80097b2:	f04f 30ff 	movhi.w	r0, #4294967295
 80097b6:	bf98      	it	ls
 80097b8:	2001      	movls	r0, #1
 80097ba:	4770      	bx	lr
 80097bc:	4608      	mov	r0, r1
 80097be:	4770      	bx	lr

080097c0 <_write_r>:
 80097c0:	b538      	push	{r3, r4, r5, lr}
 80097c2:	4d07      	ldr	r5, [pc, #28]	; (80097e0 <_write_r+0x20>)
 80097c4:	4604      	mov	r4, r0
 80097c6:	4608      	mov	r0, r1
 80097c8:	4611      	mov	r1, r2
 80097ca:	2200      	movs	r2, #0
 80097cc:	602a      	str	r2, [r5, #0]
 80097ce:	461a      	mov	r2, r3
 80097d0:	f7f7 f95f 	bl	8000a92 <_write>
 80097d4:	1c43      	adds	r3, r0, #1
 80097d6:	d102      	bne.n	80097de <_write_r+0x1e>
 80097d8:	682b      	ldr	r3, [r5, #0]
 80097da:	b103      	cbz	r3, 80097de <_write_r+0x1e>
 80097dc:	6023      	str	r3, [r4, #0]
 80097de:	bd38      	pop	{r3, r4, r5, pc}
 80097e0:	20001940 	.word	0x20001940

080097e4 <__assert_func>:
 80097e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80097e6:	4614      	mov	r4, r2
 80097e8:	461a      	mov	r2, r3
 80097ea:	4b09      	ldr	r3, [pc, #36]	; (8009810 <__assert_func+0x2c>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	4605      	mov	r5, r0
 80097f0:	68d8      	ldr	r0, [r3, #12]
 80097f2:	b14c      	cbz	r4, 8009808 <__assert_func+0x24>
 80097f4:	4b07      	ldr	r3, [pc, #28]	; (8009814 <__assert_func+0x30>)
 80097f6:	9100      	str	r1, [sp, #0]
 80097f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80097fc:	4906      	ldr	r1, [pc, #24]	; (8009818 <__assert_func+0x34>)
 80097fe:	462b      	mov	r3, r5
 8009800:	f000 f81e 	bl	8009840 <fiprintf>
 8009804:	f000 f8b4 	bl	8009970 <abort>
 8009808:	4b04      	ldr	r3, [pc, #16]	; (800981c <__assert_func+0x38>)
 800980a:	461c      	mov	r4, r3
 800980c:	e7f3      	b.n	80097f6 <__assert_func+0x12>
 800980e:	bf00      	nop
 8009810:	20000194 	.word	0x20000194
 8009814:	0800a14f 	.word	0x0800a14f
 8009818:	0800a15c 	.word	0x0800a15c
 800981c:	08009cf2 	.word	0x08009cf2

08009820 <_close_r>:
 8009820:	b538      	push	{r3, r4, r5, lr}
 8009822:	4d06      	ldr	r5, [pc, #24]	; (800983c <_close_r+0x1c>)
 8009824:	2300      	movs	r3, #0
 8009826:	4604      	mov	r4, r0
 8009828:	4608      	mov	r0, r1
 800982a:	602b      	str	r3, [r5, #0]
 800982c:	f7f7 f93e 	bl	8000aac <_close>
 8009830:	1c43      	adds	r3, r0, #1
 8009832:	d102      	bne.n	800983a <_close_r+0x1a>
 8009834:	682b      	ldr	r3, [r5, #0]
 8009836:	b103      	cbz	r3, 800983a <_close_r+0x1a>
 8009838:	6023      	str	r3, [r4, #0]
 800983a:	bd38      	pop	{r3, r4, r5, pc}
 800983c:	20001940 	.word	0x20001940

08009840 <fiprintf>:
 8009840:	b40e      	push	{r1, r2, r3}
 8009842:	b503      	push	{r0, r1, lr}
 8009844:	4601      	mov	r1, r0
 8009846:	ab03      	add	r3, sp, #12
 8009848:	4805      	ldr	r0, [pc, #20]	; (8009860 <fiprintf+0x20>)
 800984a:	f853 2b04 	ldr.w	r2, [r3], #4
 800984e:	6800      	ldr	r0, [r0, #0]
 8009850:	9301      	str	r3, [sp, #4]
 8009852:	f7ff fc39 	bl	80090c8 <_vfiprintf_r>
 8009856:	b002      	add	sp, #8
 8009858:	f85d eb04 	ldr.w	lr, [sp], #4
 800985c:	b003      	add	sp, #12
 800985e:	4770      	bx	lr
 8009860:	20000194 	.word	0x20000194

08009864 <_fstat_r>:
 8009864:	b538      	push	{r3, r4, r5, lr}
 8009866:	4d07      	ldr	r5, [pc, #28]	; (8009884 <_fstat_r+0x20>)
 8009868:	2300      	movs	r3, #0
 800986a:	4604      	mov	r4, r0
 800986c:	4608      	mov	r0, r1
 800986e:	4611      	mov	r1, r2
 8009870:	602b      	str	r3, [r5, #0]
 8009872:	f7f7 f91e 	bl	8000ab2 <_fstat>
 8009876:	1c43      	adds	r3, r0, #1
 8009878:	d102      	bne.n	8009880 <_fstat_r+0x1c>
 800987a:	682b      	ldr	r3, [r5, #0]
 800987c:	b103      	cbz	r3, 8009880 <_fstat_r+0x1c>
 800987e:	6023      	str	r3, [r4, #0]
 8009880:	bd38      	pop	{r3, r4, r5, pc}
 8009882:	bf00      	nop
 8009884:	20001940 	.word	0x20001940

08009888 <_isatty_r>:
 8009888:	b538      	push	{r3, r4, r5, lr}
 800988a:	4d06      	ldr	r5, [pc, #24]	; (80098a4 <_isatty_r+0x1c>)
 800988c:	2300      	movs	r3, #0
 800988e:	4604      	mov	r4, r0
 8009890:	4608      	mov	r0, r1
 8009892:	602b      	str	r3, [r5, #0]
 8009894:	f7f7 f912 	bl	8000abc <_isatty>
 8009898:	1c43      	adds	r3, r0, #1
 800989a:	d102      	bne.n	80098a2 <_isatty_r+0x1a>
 800989c:	682b      	ldr	r3, [r5, #0]
 800989e:	b103      	cbz	r3, 80098a2 <_isatty_r+0x1a>
 80098a0:	6023      	str	r3, [r4, #0]
 80098a2:	bd38      	pop	{r3, r4, r5, pc}
 80098a4:	20001940 	.word	0x20001940

080098a8 <_lseek_r>:
 80098a8:	b538      	push	{r3, r4, r5, lr}
 80098aa:	4d07      	ldr	r5, [pc, #28]	; (80098c8 <_lseek_r+0x20>)
 80098ac:	4604      	mov	r4, r0
 80098ae:	4608      	mov	r0, r1
 80098b0:	4611      	mov	r1, r2
 80098b2:	2200      	movs	r2, #0
 80098b4:	602a      	str	r2, [r5, #0]
 80098b6:	461a      	mov	r2, r3
 80098b8:	f7f7 f902 	bl	8000ac0 <_lseek>
 80098bc:	1c43      	adds	r3, r0, #1
 80098be:	d102      	bne.n	80098c6 <_lseek_r+0x1e>
 80098c0:	682b      	ldr	r3, [r5, #0]
 80098c2:	b103      	cbz	r3, 80098c6 <_lseek_r+0x1e>
 80098c4:	6023      	str	r3, [r4, #0]
 80098c6:	bd38      	pop	{r3, r4, r5, pc}
 80098c8:	20001940 	.word	0x20001940

080098cc <memmove>:
 80098cc:	4288      	cmp	r0, r1
 80098ce:	b510      	push	{r4, lr}
 80098d0:	eb01 0402 	add.w	r4, r1, r2
 80098d4:	d902      	bls.n	80098dc <memmove+0x10>
 80098d6:	4284      	cmp	r4, r0
 80098d8:	4623      	mov	r3, r4
 80098da:	d807      	bhi.n	80098ec <memmove+0x20>
 80098dc:	1e43      	subs	r3, r0, #1
 80098de:	42a1      	cmp	r1, r4
 80098e0:	d008      	beq.n	80098f4 <memmove+0x28>
 80098e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80098e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80098ea:	e7f8      	b.n	80098de <memmove+0x12>
 80098ec:	4402      	add	r2, r0
 80098ee:	4601      	mov	r1, r0
 80098f0:	428a      	cmp	r2, r1
 80098f2:	d100      	bne.n	80098f6 <memmove+0x2a>
 80098f4:	bd10      	pop	{r4, pc}
 80098f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80098fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80098fe:	e7f7      	b.n	80098f0 <memmove+0x24>

08009900 <_realloc_r>:
 8009900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009902:	4607      	mov	r7, r0
 8009904:	4614      	mov	r4, r2
 8009906:	460e      	mov	r6, r1
 8009908:	b921      	cbnz	r1, 8009914 <_realloc_r+0x14>
 800990a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800990e:	4611      	mov	r1, r2
 8009910:	f7fc bee6 	b.w	80066e0 <_malloc_r>
 8009914:	b922      	cbnz	r2, 8009920 <_realloc_r+0x20>
 8009916:	f7fc fe93 	bl	8006640 <_free_r>
 800991a:	4625      	mov	r5, r4
 800991c:	4628      	mov	r0, r5
 800991e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009920:	f000 f82d 	bl	800997e <_malloc_usable_size_r>
 8009924:	42a0      	cmp	r0, r4
 8009926:	d20f      	bcs.n	8009948 <_realloc_r+0x48>
 8009928:	4621      	mov	r1, r4
 800992a:	4638      	mov	r0, r7
 800992c:	f7fc fed8 	bl	80066e0 <_malloc_r>
 8009930:	4605      	mov	r5, r0
 8009932:	2800      	cmp	r0, #0
 8009934:	d0f2      	beq.n	800991c <_realloc_r+0x1c>
 8009936:	4631      	mov	r1, r6
 8009938:	4622      	mov	r2, r4
 800993a:	f7fc fe6b 	bl	8006614 <memcpy>
 800993e:	4631      	mov	r1, r6
 8009940:	4638      	mov	r0, r7
 8009942:	f7fc fe7d 	bl	8006640 <_free_r>
 8009946:	e7e9      	b.n	800991c <_realloc_r+0x1c>
 8009948:	4635      	mov	r5, r6
 800994a:	e7e7      	b.n	800991c <_realloc_r+0x1c>

0800994c <_read_r>:
 800994c:	b538      	push	{r3, r4, r5, lr}
 800994e:	4d07      	ldr	r5, [pc, #28]	; (800996c <_read_r+0x20>)
 8009950:	4604      	mov	r4, r0
 8009952:	4608      	mov	r0, r1
 8009954:	4611      	mov	r1, r2
 8009956:	2200      	movs	r2, #0
 8009958:	602a      	str	r2, [r5, #0]
 800995a:	461a      	mov	r2, r3
 800995c:	f7f7 f88c 	bl	8000a78 <_read>
 8009960:	1c43      	adds	r3, r0, #1
 8009962:	d102      	bne.n	800996a <_read_r+0x1e>
 8009964:	682b      	ldr	r3, [r5, #0]
 8009966:	b103      	cbz	r3, 800996a <_read_r+0x1e>
 8009968:	6023      	str	r3, [r4, #0]
 800996a:	bd38      	pop	{r3, r4, r5, pc}
 800996c:	20001940 	.word	0x20001940

08009970 <abort>:
 8009970:	b508      	push	{r3, lr}
 8009972:	2006      	movs	r0, #6
 8009974:	f000 f834 	bl	80099e0 <raise>
 8009978:	2001      	movs	r0, #1
 800997a:	f7f7 f877 	bl	8000a6c <_exit>

0800997e <_malloc_usable_size_r>:
 800997e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009982:	1f18      	subs	r0, r3, #4
 8009984:	2b00      	cmp	r3, #0
 8009986:	bfbc      	itt	lt
 8009988:	580b      	ldrlt	r3, [r1, r0]
 800998a:	18c0      	addlt	r0, r0, r3
 800998c:	4770      	bx	lr

0800998e <_raise_r>:
 800998e:	291f      	cmp	r1, #31
 8009990:	b538      	push	{r3, r4, r5, lr}
 8009992:	4604      	mov	r4, r0
 8009994:	460d      	mov	r5, r1
 8009996:	d904      	bls.n	80099a2 <_raise_r+0x14>
 8009998:	2316      	movs	r3, #22
 800999a:	6003      	str	r3, [r0, #0]
 800999c:	f04f 30ff 	mov.w	r0, #4294967295
 80099a0:	bd38      	pop	{r3, r4, r5, pc}
 80099a2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80099a4:	b112      	cbz	r2, 80099ac <_raise_r+0x1e>
 80099a6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80099aa:	b94b      	cbnz	r3, 80099c0 <_raise_r+0x32>
 80099ac:	4620      	mov	r0, r4
 80099ae:	f000 f831 	bl	8009a14 <_getpid_r>
 80099b2:	462a      	mov	r2, r5
 80099b4:	4601      	mov	r1, r0
 80099b6:	4620      	mov	r0, r4
 80099b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099bc:	f000 b818 	b.w	80099f0 <_kill_r>
 80099c0:	2b01      	cmp	r3, #1
 80099c2:	d00a      	beq.n	80099da <_raise_r+0x4c>
 80099c4:	1c59      	adds	r1, r3, #1
 80099c6:	d103      	bne.n	80099d0 <_raise_r+0x42>
 80099c8:	2316      	movs	r3, #22
 80099ca:	6003      	str	r3, [r0, #0]
 80099cc:	2001      	movs	r0, #1
 80099ce:	e7e7      	b.n	80099a0 <_raise_r+0x12>
 80099d0:	2400      	movs	r4, #0
 80099d2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80099d6:	4628      	mov	r0, r5
 80099d8:	4798      	blx	r3
 80099da:	2000      	movs	r0, #0
 80099dc:	e7e0      	b.n	80099a0 <_raise_r+0x12>
	...

080099e0 <raise>:
 80099e0:	4b02      	ldr	r3, [pc, #8]	; (80099ec <raise+0xc>)
 80099e2:	4601      	mov	r1, r0
 80099e4:	6818      	ldr	r0, [r3, #0]
 80099e6:	f7ff bfd2 	b.w	800998e <_raise_r>
 80099ea:	bf00      	nop
 80099ec:	20000194 	.word	0x20000194

080099f0 <_kill_r>:
 80099f0:	b538      	push	{r3, r4, r5, lr}
 80099f2:	4d07      	ldr	r5, [pc, #28]	; (8009a10 <_kill_r+0x20>)
 80099f4:	2300      	movs	r3, #0
 80099f6:	4604      	mov	r4, r0
 80099f8:	4608      	mov	r0, r1
 80099fa:	4611      	mov	r1, r2
 80099fc:	602b      	str	r3, [r5, #0]
 80099fe:	f7f7 f82d 	bl	8000a5c <_kill>
 8009a02:	1c43      	adds	r3, r0, #1
 8009a04:	d102      	bne.n	8009a0c <_kill_r+0x1c>
 8009a06:	682b      	ldr	r3, [r5, #0]
 8009a08:	b103      	cbz	r3, 8009a0c <_kill_r+0x1c>
 8009a0a:	6023      	str	r3, [r4, #0]
 8009a0c:	bd38      	pop	{r3, r4, r5, pc}
 8009a0e:	bf00      	nop
 8009a10:	20001940 	.word	0x20001940

08009a14 <_getpid_r>:
 8009a14:	f7f7 b820 	b.w	8000a58 <_getpid>

08009a18 <_init>:
 8009a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a1a:	bf00      	nop
 8009a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a1e:	bc08      	pop	{r3}
 8009a20:	469e      	mov	lr, r3
 8009a22:	4770      	bx	lr

08009a24 <_fini>:
 8009a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a26:	bf00      	nop
 8009a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a2a:	bc08      	pop	{r3}
 8009a2c:	469e      	mov	lr, r3
 8009a2e:	4770      	bx	lr
