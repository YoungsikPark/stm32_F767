
stm32f767zi_boot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048f0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08004af0  08004af0  00014af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bcc  08004bcc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004bcc  08004bcc  00014bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004bd4  08004bd4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bd4  08004bd4  00014bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004bd8  08004bd8  00014bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004bdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  20000070  08004c4c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000248  08004c4c  00020248  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d855  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002347  00000000  00000000  0002d8f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b8  00000000  00000000  0002fc40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008d0  00000000  00000000  000305f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029526  00000000  00000000  00030ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cec6  00000000  00000000  0005a3ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb87d  00000000  00000000  000672b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00162b31  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d6c  00000000  00000000  00162b84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08004ad8 	.word	0x08004ad8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08004ad8 	.word	0x08004ad8

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80005de:	4b0f      	ldr	r3, [pc, #60]	; (800061c <HAL_MspInit+0x44>)
 80005e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e2:	4a0e      	ldr	r2, [pc, #56]	; (800061c <HAL_MspInit+0x44>)
 80005e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005e8:	6413      	str	r3, [r2, #64]	; 0x40
 80005ea:	4b0c      	ldr	r3, [pc, #48]	; (800061c <HAL_MspInit+0x44>)
 80005ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005f6:	4b09      	ldr	r3, [pc, #36]	; (800061c <HAL_MspInit+0x44>)
 80005f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005fa:	4a08      	ldr	r2, [pc, #32]	; (800061c <HAL_MspInit+0x44>)
 80005fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000600:	6453      	str	r3, [r2, #68]	; 0x44
 8000602:	4b06      	ldr	r3, [pc, #24]	; (800061c <HAL_MspInit+0x44>)
 8000604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000606:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800060a:	603b      	str	r3, [r7, #0]
 800060c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800060e:	bf00      	nop
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	40023800 	.word	0x40023800

08000620 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000624:	e7fe      	b.n	8000624 <NMI_Handler+0x4>

08000626 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000626:	b480      	push	{r7}
 8000628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800062a:	e7fe      	b.n	800062a <HardFault_Handler+0x4>

0800062c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000630:	e7fe      	b.n	8000630 <MemManage_Handler+0x4>

08000632 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000632:	b480      	push	{r7}
 8000634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000636:	e7fe      	b.n	8000636 <BusFault_Handler+0x4>

08000638 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800063c:	e7fe      	b.n	800063c <UsageFault_Handler+0x4>

0800063e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800063e:	b480      	push	{r7}
 8000640:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000642:	bf00      	nop
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr

0800064c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000650:	bf00      	nop
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr

0800065a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800065a:	b480      	push	{r7}
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800065e:	bf00      	nop
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr

08000668 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800066c:	f000 fc38 	bl	8000ee0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000670:	bf00      	nop
 8000672:	bd80      	pop	{r7, pc}

08000674 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000678:	4802      	ldr	r0, [pc, #8]	; (8000684 <USART3_IRQHandler+0x10>)
 800067a:	f002 f9f5 	bl	8002a68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	200001b0 	.word	0x200001b0

08000688 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800068c:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <SystemInit+0x20>)
 800068e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000692:	4a05      	ldr	r2, [pc, #20]	; (80006a8 <SystemInit+0x20>)
 8000694:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000698:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800069c:	bf00      	nop
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	e000ed00 	.word	0xe000ed00

080006ac <_write>:


UART_HandleTypeDef huart3;

int _write(int file,uint8_t*ptr,int len)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	60b9      	str	r1, [r7, #8]
 80006b6:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit_IT(&huart3,ptr,len);
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	b29b      	uxth	r3, r3
 80006bc:	461a      	mov	r2, r3
 80006be:	68b9      	ldr	r1, [r7, #8]
 80006c0:	4803      	ldr	r0, [pc, #12]	; (80006d0 <_write+0x24>)
 80006c2:	f002 f937 	bl	8002934 <HAL_UART_Transmit_IT>
  return len;
 80006c6:	687b      	ldr	r3, [r7, #4]
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3710      	adds	r7, #16
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	200001b0 	.word	0x200001b0

080006d4 <MX_GPIO_Init>:


void SystemClock_config(void);

void MX_GPIO_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b08c      	sub	sp, #48	; 0x30
 80006d8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006da:	f107 031c 	add.w	r3, r7, #28
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]
 80006e6:	60da      	str	r2, [r3, #12]
 80006e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ea:	4b46      	ldr	r3, [pc, #280]	; (8000804 <MX_GPIO_Init+0x130>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a45      	ldr	r2, [pc, #276]	; (8000804 <MX_GPIO_Init+0x130>)
 80006f0:	f043 0304 	orr.w	r3, r3, #4
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b43      	ldr	r3, [pc, #268]	; (8000804 <MX_GPIO_Init+0x130>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0304 	and.w	r3, r3, #4
 80006fe:	61bb      	str	r3, [r7, #24]
 8000700:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000702:	4b40      	ldr	r3, [pc, #256]	; (8000804 <MX_GPIO_Init+0x130>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a3f      	ldr	r2, [pc, #252]	; (8000804 <MX_GPIO_Init+0x130>)
 8000708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4b3d      	ldr	r3, [pc, #244]	; (8000804 <MX_GPIO_Init+0x130>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000716:	617b      	str	r3, [r7, #20]
 8000718:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071a:	4b3a      	ldr	r3, [pc, #232]	; (8000804 <MX_GPIO_Init+0x130>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a39      	ldr	r2, [pc, #228]	; (8000804 <MX_GPIO_Init+0x130>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b37      	ldr	r3, [pc, #220]	; (8000804 <MX_GPIO_Init+0x130>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	613b      	str	r3, [r7, #16]
 8000730:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000732:	4b34      	ldr	r3, [pc, #208]	; (8000804 <MX_GPIO_Init+0x130>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a33      	ldr	r2, [pc, #204]	; (8000804 <MX_GPIO_Init+0x130>)
 8000738:	f043 0302 	orr.w	r3, r3, #2
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b31      	ldr	r3, [pc, #196]	; (8000804 <MX_GPIO_Init+0x130>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0302 	and.w	r3, r3, #2
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800074a:	4b2e      	ldr	r3, [pc, #184]	; (8000804 <MX_GPIO_Init+0x130>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a2d      	ldr	r2, [pc, #180]	; (8000804 <MX_GPIO_Init+0x130>)
 8000750:	f043 0308 	orr.w	r3, r3, #8
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b2b      	ldr	r3, [pc, #172]	; (8000804 <MX_GPIO_Init+0x130>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0308 	and.w	r3, r3, #8
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000762:	4b28      	ldr	r3, [pc, #160]	; (8000804 <MX_GPIO_Init+0x130>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a27      	ldr	r2, [pc, #156]	; (8000804 <MX_GPIO_Init+0x130>)
 8000768:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b25      	ldr	r3, [pc, #148]	; (8000804 <MX_GPIO_Init+0x130>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000780:	4821      	ldr	r0, [pc, #132]	; (8000808 <MX_GPIO_Init+0x134>)
 8000782:	f000 ff1d 	bl	80015c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	2140      	movs	r1, #64	; 0x40
 800078a:	4820      	ldr	r0, [pc, #128]	; (800080c <MX_GPIO_Init+0x138>)
 800078c:	f000 ff18 	bl	80015c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000790:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000794:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000796:	4b1e      	ldr	r3, [pc, #120]	; (8000810 <MX_GPIO_Init+0x13c>)
 8000798:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800079e:	f107 031c 	add.w	r3, r7, #28
 80007a2:	4619      	mov	r1, r3
 80007a4:	481b      	ldr	r0, [pc, #108]	; (8000814 <MX_GPIO_Init+0x140>)
 80007a6:	f000 fd5f 	bl	8001268 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80007aa:	f244 0381 	movw	r3, #16513	; 0x4081
 80007ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b0:	2301      	movs	r3, #1
 80007b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b8:	2300      	movs	r3, #0
 80007ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007bc:	f107 031c 	add.w	r3, r7, #28
 80007c0:	4619      	mov	r1, r3
 80007c2:	4811      	ldr	r0, [pc, #68]	; (8000808 <MX_GPIO_Init+0x134>)
 80007c4:	f000 fd50 	bl	8001268 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80007c8:	2340      	movs	r3, #64	; 0x40
 80007ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007cc:	2301      	movs	r3, #1
 80007ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d4:	2300      	movs	r3, #0
 80007d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007d8:	f107 031c 	add.w	r3, r7, #28
 80007dc:	4619      	mov	r1, r3
 80007de:	480b      	ldr	r0, [pc, #44]	; (800080c <MX_GPIO_Init+0x138>)
 80007e0:	f000 fd42 	bl	8001268 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007e4:	2380      	movs	r3, #128	; 0x80
 80007e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e8:	2300      	movs	r3, #0
 80007ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007f0:	f107 031c 	add.w	r3, r7, #28
 80007f4:	4619      	mov	r1, r3
 80007f6:	4805      	ldr	r0, [pc, #20]	; (800080c <MX_GPIO_Init+0x138>)
 80007f8:	f000 fd36 	bl	8001268 <HAL_GPIO_Init>
}
 80007fc:	bf00      	nop
 80007fe:	3730      	adds	r7, #48	; 0x30
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40023800 	.word	0x40023800
 8000808:	40020400 	.word	0x40020400
 800080c:	40021800 	.word	0x40021800
 8000810:	10110000 	.word	0x10110000
 8000814:	40020800 	.word	0x40020800

08000818 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b0b8      	sub	sp, #224	; 0xe0
 800081c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000822:	2234      	movs	r2, #52	; 0x34
 8000824:	2100      	movs	r1, #0
 8000826:	4618      	mov	r0, r3
 8000828:	f003 f982 	bl	8003b30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800082c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800083c:	f107 0308 	add.w	r3, r7, #8
 8000840:	2290      	movs	r2, #144	; 0x90
 8000842:	2100      	movs	r1, #0
 8000844:	4618      	mov	r0, r3
 8000846:	f003 f973 	bl	8003b30 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800084a:	f000 feed 	bl	8001628 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800084e:	4b39      	ldr	r3, [pc, #228]	; (8000934 <SystemClock_Config+0x11c>)
 8000850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000852:	4a38      	ldr	r2, [pc, #224]	; (8000934 <SystemClock_Config+0x11c>)
 8000854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000858:	6413      	str	r3, [r2, #64]	; 0x40
 800085a:	4b36      	ldr	r3, [pc, #216]	; (8000934 <SystemClock_Config+0x11c>)
 800085c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000866:	4b34      	ldr	r3, [pc, #208]	; (8000938 <SystemClock_Config+0x120>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4a33      	ldr	r2, [pc, #204]	; (8000938 <SystemClock_Config+0x120>)
 800086c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000870:	6013      	str	r3, [r2, #0]
 8000872:	4b31      	ldr	r3, [pc, #196]	; (8000938 <SystemClock_Config+0x120>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800087a:	603b      	str	r3, [r7, #0]
 800087c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800087e:	2301      	movs	r3, #1
 8000880:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000884:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000888:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800088c:	2302      	movs	r3, #2
 800088e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000892:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000896:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 800089a:	2304      	movs	r3, #4
 800089c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 80008a0:	23d8      	movs	r3, #216	; 0xd8
 80008a2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008a6:	2302      	movs	r3, #2
 80008a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80008ac:	2309      	movs	r3, #9
 80008ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80008b6:	4618      	mov	r0, r3
 80008b8:	f000 ff16 	bl	80016e8 <HAL_RCC_OscConfig>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80008c2:	f000 f842 	bl	800094a <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008c6:	f000 febf 	bl	8001648 <HAL_PWREx_EnableOverDrive>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80008d0:	f000 f83b 	bl	800094a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d4:	230f      	movs	r3, #15
 80008d6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008da:	2302      	movs	r3, #2
 80008dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e0:	2300      	movs	r3, #0
 80008e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008e6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80008f6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80008fa:	2107      	movs	r1, #7
 80008fc:	4618      	mov	r0, r3
 80008fe:	f001 f9a1 	bl	8001c44 <HAL_RCC_ClockConfig>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000908:	f000 f81f 	bl	800094a <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800090c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000910:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000912:	2300      	movs	r3, #0
 8000914:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000916:	f107 0308 	add.w	r3, r7, #8
 800091a:	4618      	mov	r0, r3
 800091c:	f001 fb94 	bl	8002048 <HAL_RCCEx_PeriphCLKConfig>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <SystemClock_Config+0x112>
  {
    Error_Handler();
 8000926:	f000 f810 	bl	800094a <Error_Handler>
  }
}
 800092a:	bf00      	nop
 800092c:	37e0      	adds	r7, #224	; 0xe0
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40023800 	.word	0x40023800
 8000938:	40007000 	.word	0x40007000

0800093c <millis>:
void delay(uint32_t ms)
{
	HAL_Delay(ms);
}
uint32_t millis(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8000940:	f000 fae2 	bl	8000f08 <HAL_GetTick>
 8000944:	4603      	mov	r3, r0
}
 8000946:	4618      	mov	r0, r3
 8000948:	bd80      	pop	{r7, pc}

0800094a <Error_Handler>:
void Error_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800094e:	b672      	cpsid	i
}
 8000950:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
}
 8000952:	bf00      	nop
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr

0800095c <main>:


int main(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
	uint8_t rx_data;
	uint32_t pre_time;


	HAL_Init();
 8000962:	f000 fa7f 	bl	8000e64 <HAL_Init>
	SystemClock_Config();
 8000966:	f7ff ff57 	bl	8000818 <SystemClock_Config>

	//SystemInit();
	MX_GPIO_Init();
 800096a:	f7ff feb3 	bl	80006d4 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 800096e:	f000 f999 	bl	8000ca4 <MX_USART3_UART_Init>
/*
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif ...? 확인 필요.
*/
	printf("start MCU\r\n");
 8000972:	4813      	ldr	r0, [pc, #76]	; (80009c0 <main+0x64>)
 8000974:	f003 f96a 	bl	8003c4c <puts>
	//HAL_UART_Receive_IT(&huart3, (uint8_t *)&rx_data, 1); //처음에 인터럽트가 강재로 시작되지않으면 읽히지 않음. y-modem도 그런지 확인필요
	                                                      //기존 소스는 어떤식으로 ymodem 설정했는지 확인도 필요함.
	 pre_time = millis();
 8000978:	f7ff ffe0 	bl	800093c <millis>
 800097c:	6078      	str	r0, [r7, #4]

	  while(1)
	  {
		  if(millis()-pre_time >= 500)
 800097e:	f7ff ffdd 	bl	800093c <millis>
 8000982:	4602      	mov	r2, r0
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	1ad3      	subs	r3, r2, r3
 8000988:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800098c:	d306      	bcc.n	800099c <main+0x40>
		  {
			  pre_time = millis();
 800098e:	f7ff ffd5 	bl	800093c <millis>
 8000992:	6078      	str	r0, [r7, #4]
			  HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 8000994:	2101      	movs	r1, #1
 8000996:	480b      	ldr	r0, [pc, #44]	; (80009c4 <main+0x68>)
 8000998:	f000 fe2b 	bl	80015f2 <HAL_GPIO_TogglePin>
//		  rx_data = uartRead(2);
		//  HAL_UART_Receive_IT(&huart3, (uint8_t *)&rx_data, 1);
		//  printf("uart Rx : %c %x \r\n",rx_data, rx_data);


	  if(uartAvailable(2)>0)
 800099c:	2002      	movs	r0, #2
 800099e:	f000 f94b 	bl	8000c38 <uartAvailable>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	ddea      	ble.n	800097e <main+0x22>
		  {
			  uint8_t rx_data2;

			  rx_data2 = uartRead(2);
 80009a8:	2002      	movs	r0, #2
 80009aa:	f000 f95f 	bl	8000c6c <uartRead>
 80009ae:	4603      	mov	r3, r0
 80009b0:	70fb      	strb	r3, [r7, #3]
			    printf("uart Rx : %c %x \r\n",rx_data2, rx_data2);
 80009b2:	78fb      	ldrb	r3, [r7, #3]
 80009b4:	78fa      	ldrb	r2, [r7, #3]
 80009b6:	4619      	mov	r1, r3
 80009b8:	4803      	ldr	r0, [pc, #12]	; (80009c8 <main+0x6c>)
 80009ba:	f003 f8c1 	bl	8003b40 <iprintf>
		  if(millis()-pre_time >= 500)
 80009be:	e7de      	b.n	800097e <main+0x22>
 80009c0:	08004af0 	.word	0x08004af0
 80009c4:	40020400 	.word	0x40020400
 80009c8:	08004afc 	.word	0x08004afc

080009cc <qbufferCreate>:
{

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b087      	sub	sp, #28
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60f8      	str	r0, [r7, #12]
 80009d4:	60b9      	str	r1, [r7, #8]
 80009d6:	607a      	str	r2, [r7, #4]
  bool ret = true;
 80009d8:	2301      	movs	r3, #1
 80009da:	75fb      	strb	r3, [r7, #23]

  p_node->in    = 0;
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
  p_node->out   = 0;
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	2200      	movs	r2, #0
 80009e6:	605a      	str	r2, [r3, #4]
  p_node->len   = length;
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	687a      	ldr	r2, [r7, #4]
 80009ec:	609a      	str	r2, [r3, #8]
  p_node->p_buf = p_buf;
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	68ba      	ldr	r2, [r7, #8]
 80009f2:	60da      	str	r2, [r3, #12]

  return ret;
 80009f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	371c      	adds	r7, #28
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr

08000a02 <qbufferWrite>:

bool qbufferWrite(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8000a02:	b480      	push	{r7}
 8000a04:	b089      	sub	sp, #36	; 0x24
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	60f8      	str	r0, [r7, #12]
 8000a0a:	60b9      	str	r1, [r7, #8]
 8000a0c:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	77fb      	strb	r3, [r7, #31]
  uint32_t next_in;


  for (int i=0; i<length; i++)
 8000a12:	2300      	movs	r3, #0
 8000a14:	61bb      	str	r3, [r7, #24]
 8000a16:	e027      	b.n	8000a68 <qbufferWrite+0x66>
  {
    next_in = (p_node->in + 1) % p_node->len;
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	68fa      	ldr	r2, [r7, #12]
 8000a20:	6892      	ldr	r2, [r2, #8]
 8000a22:	fbb3 f1f2 	udiv	r1, r3, r2
 8000a26:	fb02 f201 	mul.w	r2, r2, r1
 8000a2a:	1a9b      	subs	r3, r3, r2
 8000a2c:	617b      	str	r3, [r7, #20]

    if (next_in != p_node->out)
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	697a      	ldr	r2, [r7, #20]
 8000a34:	429a      	cmp	r2, r3
 8000a36:	d011      	beq.n	8000a5c <qbufferWrite+0x5a>
    {
      if (p_node->p_buf != NULL)
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	68db      	ldr	r3, [r3, #12]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d009      	beq.n	8000a54 <qbufferWrite+0x52>
      {
        p_node->p_buf[p_node->in] = p_data[i];
 8000a40:	69bb      	ldr	r3, [r7, #24]
 8000a42:	68ba      	ldr	r2, [r7, #8]
 8000a44:	441a      	add	r2, r3
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	68d9      	ldr	r1, [r3, #12]
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	440b      	add	r3, r1
 8000a50:	7812      	ldrb	r2, [r2, #0]
 8000a52:	701a      	strb	r2, [r3, #0]
      }
      p_node->in = next_in;
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	697a      	ldr	r2, [r7, #20]
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	e002      	b.n	8000a62 <qbufferWrite+0x60>
    }
    else
    {
      ret = false;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	77fb      	strb	r3, [r7, #31]
      break;
 8000a60:	e006      	b.n	8000a70 <qbufferWrite+0x6e>
  for (int i=0; i<length; i++)
 8000a62:	69bb      	ldr	r3, [r7, #24]
 8000a64:	3301      	adds	r3, #1
 8000a66:	61bb      	str	r3, [r7, #24]
 8000a68:	69bb      	ldr	r3, [r7, #24]
 8000a6a:	687a      	ldr	r2, [r7, #4]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	d8d3      	bhi.n	8000a18 <qbufferWrite+0x16>
    }
  }

  return ret;
 8000a70:	7ffb      	ldrb	r3, [r7, #31]
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3724      	adds	r7, #36	; 0x24
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr

08000a7e <qbufferRead>:

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	b087      	sub	sp, #28
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	60f8      	str	r0, [r7, #12]
 8000a86:	60b9      	str	r1, [r7, #8]
 8000a88:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	75fb      	strb	r3, [r7, #23]

  for (int i=0; i<length; i++)
 8000a8e:	2300      	movs	r3, #0
 8000a90:	613b      	str	r3, [r7, #16]
 8000a92:	e026      	b.n	8000ae2 <qbufferRead+0x64>
  {
    if (p_node->p_buf != NULL)
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	68db      	ldr	r3, [r3, #12]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d009      	beq.n	8000ab0 <qbufferRead+0x32>
    {
      p_data[i] = p_node->p_buf[p_node->out];
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	68da      	ldr	r2, [r3, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	441a      	add	r2, r3
 8000aa6:	693b      	ldr	r3, [r7, #16]
 8000aa8:	68b9      	ldr	r1, [r7, #8]
 8000aaa:	440b      	add	r3, r1
 8000aac:	7812      	ldrb	r2, [r2, #0]
 8000aae:	701a      	strb	r2, [r3, #0]
    }

    if (p_node->out != p_node->in)
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	685a      	ldr	r2, [r3, #4]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	d00c      	beq.n	8000ad6 <qbufferRead+0x58>
    {
      p_node->out = (p_node->out + 1) % p_node->len;
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	68fa      	ldr	r2, [r7, #12]
 8000ac4:	6892      	ldr	r2, [r2, #8]
 8000ac6:	fbb3 f1f2 	udiv	r1, r3, r2
 8000aca:	fb02 f201 	mul.w	r2, r2, r1
 8000ace:	1a9a      	subs	r2, r3, r2
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	605a      	str	r2, [r3, #4]
 8000ad4:	e002      	b.n	8000adc <qbufferRead+0x5e>
    }
    else
    {
      ret = false;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	75fb      	strb	r3, [r7, #23]
      break;
 8000ada:	e006      	b.n	8000aea <qbufferRead+0x6c>
  for (int i=0; i<length; i++)
 8000adc:	693b      	ldr	r3, [r7, #16]
 8000ade:	3301      	adds	r3, #1
 8000ae0:	613b      	str	r3, [r7, #16]
 8000ae2:	693b      	ldr	r3, [r7, #16]
 8000ae4:	687a      	ldr	r2, [r7, #4]
 8000ae6:	429a      	cmp	r2, r3
 8000ae8:	d8d4      	bhi.n	8000a94 <qbufferRead+0x16>
    }
  }

  return ret;
 8000aea:	7dfb      	ldrb	r3, [r7, #23]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	371c      	adds	r7, #28
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr

08000af8 <qbufferAvailable>:

uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b085      	sub	sp, #20
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  uint32_t ret;

  ret = (p_node->in - p_node->out) % p_node->len;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	687a      	ldr	r2, [r7, #4]
 8000b0c:	6892      	ldr	r2, [r2, #8]
 8000b0e:	fbb3 f1f2 	udiv	r1, r3, r2
 8000b12:	fb02 f201 	mul.w	r2, r2, r1
 8000b16:	1a9b      	subs	r3, r3, r2
 8000b18:	60fb      	str	r3, [r7, #12]

  return ret;
 8000b1a:	68fb      	ldr	r3, [r7, #12]
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3714      	adds	r7, #20
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b34:	2300      	movs	r3, #0
 8000b36:	617b      	str	r3, [r7, #20]
 8000b38:	e00a      	b.n	8000b50 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b3a:	f3af 8000 	nop.w
 8000b3e:	4601      	mov	r1, r0
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	1c5a      	adds	r2, r3, #1
 8000b44:	60ba      	str	r2, [r7, #8]
 8000b46:	b2ca      	uxtb	r2, r1
 8000b48:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	617b      	str	r3, [r7, #20]
 8000b50:	697a      	ldr	r2, [r7, #20]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	dbf0      	blt.n	8000b3a <_read+0x12>
	}

return len;
 8000b58:	687b      	ldr	r3, [r7, #4]
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3718      	adds	r7, #24
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000b62:	b480      	push	{r7}
 8000b64:	b083      	sub	sp, #12
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
	return -1;
 8000b6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	b083      	sub	sp, #12
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
 8000b82:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b8a:	605a      	str	r2, [r3, #4]
	return 0;
 8000b8c:	2300      	movs	r3, #0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr

08000b9a <_isatty>:

int _isatty(int file)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	b083      	sub	sp, #12
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	6078      	str	r0, [r7, #4]
	return 1;
 8000ba2:	2301      	movs	r3, #1
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	60f8      	str	r0, [r7, #12]
 8000bb8:	60b9      	str	r1, [r7, #8]
 8000bba:	607a      	str	r2, [r7, #4]
	return 0;
 8000bbc:	2300      	movs	r3, #0
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3714      	adds	r7, #20
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
	...

08000bcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bd4:	4a14      	ldr	r2, [pc, #80]	; (8000c28 <_sbrk+0x5c>)
 8000bd6:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <_sbrk+0x60>)
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000be0:	4b13      	ldr	r3, [pc, #76]	; (8000c30 <_sbrk+0x64>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d102      	bne.n	8000bee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000be8:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <_sbrk+0x64>)
 8000bea:	4a12      	ldr	r2, [pc, #72]	; (8000c34 <_sbrk+0x68>)
 8000bec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bee:	4b10      	ldr	r3, [pc, #64]	; (8000c30 <_sbrk+0x64>)
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d207      	bcs.n	8000c0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bfc:	f002 ff6e 	bl	8003adc <__errno>
 8000c00:	4603      	mov	r3, r0
 8000c02:	220c      	movs	r2, #12
 8000c04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c06:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0a:	e009      	b.n	8000c20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c0c:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <_sbrk+0x64>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c12:	4b07      	ldr	r3, [pc, #28]	; (8000c30 <_sbrk+0x64>)
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4413      	add	r3, r2
 8000c1a:	4a05      	ldr	r2, [pc, #20]	; (8000c30 <_sbrk+0x64>)
 8000c1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3718      	adds	r7, #24
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20080000 	.word	0x20080000
 8000c2c:	00000400 	.word	0x00000400
 8000c30:	2000008c 	.word	0x2000008c
 8000c34:	20000248 	.word	0x20000248

08000c38 <uartAvailable>:
UART_HandleTypeDef huart3;

/* USART3 init function */

uint32_t uartAvailable(uint8_t ch)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	60fb      	str	r3, [r7, #12]

  switch(ch)
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d006      	beq.n	8000c5a <uartAvailable+0x22>
 8000c4c:	2b02      	cmp	r3, #2
 8000c4e:	d105      	bne.n	8000c5c <uartAvailable+0x24>
 //     ret = cdcAvailable();
      break;

    case 2:
     // qbuffer[ch].in = (qbuffer[ch].len - hdma_usart3_rx.Instance->CNDTR);
      ret = qbufferAvailable(&qbuffer);
 8000c50:	4805      	ldr	r0, [pc, #20]	; (8000c68 <uartAvailable+0x30>)
 8000c52:	f7ff ff51 	bl	8000af8 <qbufferAvailable>
 8000c56:	60f8      	str	r0, [r7, #12]
       break;
 8000c58:	e000      	b.n	8000c5c <uartAvailable+0x24>
      break;
 8000c5a:	bf00      	nop
  }

  return ret;
 8000c5c:	68fb      	ldr	r3, [r7, #12]
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000094 	.word	0x20000094

08000c6c <uartRead>:

uint8_t uartRead(uint8_t ch)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 0;
 8000c76:	2300      	movs	r3, #0
 8000c78:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d009      	beq.n	8000c94 <uartRead+0x28>
 8000c80:	2b02      	cmp	r3, #2
 8000c82:	d108      	bne.n	8000c96 <uartRead+0x2a>
    case 1:
  //    ret = cdcRead();
      break;

    case 2:
      qbufferRead(&qbuffer, &ret, 1);
 8000c84:	f107 030f 	add.w	r3, r7, #15
 8000c88:	2201      	movs	r2, #1
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4804      	ldr	r0, [pc, #16]	; (8000ca0 <uartRead+0x34>)
 8000c8e:	f7ff fef6 	bl	8000a7e <qbufferRead>
      break;
 8000c92:	e000      	b.n	8000c96 <uartRead+0x2a>
      break;
 8000c94:	bf00      	nop
  }
  return ret;
 8000c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3710      	adds	r7, #16
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20000094 	.word	0x20000094

08000ca4 <MX_USART3_UART_Init>:

void MX_USART3_UART_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
  bool ret = false;
 8000caa:	2300      	movs	r3, #0
 8000cac:	71fb      	strb	r3, [r7, #7]

  huart3.Instance = USART3;
 8000cae:	4b22      	ldr	r3, [pc, #136]	; (8000d38 <MX_USART3_UART_Init+0x94>)
 8000cb0:	4a22      	ldr	r2, [pc, #136]	; (8000d3c <MX_USART3_UART_Init+0x98>)
 8000cb2:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cb4:	4b20      	ldr	r3, [pc, #128]	; (8000d38 <MX_USART3_UART_Init+0x94>)
 8000cb6:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cba:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cbc:	4b1e      	ldr	r3, [pc, #120]	; (8000d38 <MX_USART3_UART_Init+0x94>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cc2:	4b1d      	ldr	r3, [pc, #116]	; (8000d38 <MX_USART3_UART_Init+0x94>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cc8:	4b1b      	ldr	r3, [pc, #108]	; (8000d38 <MX_USART3_UART_Init+0x94>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cce:	4b1a      	ldr	r3, [pc, #104]	; (8000d38 <MX_USART3_UART_Init+0x94>)
 8000cd0:	220c      	movs	r2, #12
 8000cd2:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cd4:	4b18      	ldr	r3, [pc, #96]	; (8000d38 <MX_USART3_UART_Init+0x94>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cda:	4b17      	ldr	r3, [pc, #92]	; (8000d38 <MX_USART3_UART_Init+0x94>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ce0:	4b15      	ldr	r3, [pc, #84]	; (8000d38 <MX_USART3_UART_Init+0x94>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ce6:	4b14      	ldr	r3, [pc, #80]	; (8000d38 <MX_USART3_UART_Init+0x94>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	625a      	str	r2, [r3, #36]	; 0x24

  qbufferCreate(&qbuffer, &rx_buf[2], 256);
 8000cec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cf0:	4913      	ldr	r1, [pc, #76]	; (8000d40 <MX_USART3_UART_Init+0x9c>)
 8000cf2:	4814      	ldr	r0, [pc, #80]	; (8000d44 <MX_USART3_UART_Init+0xa0>)
 8000cf4:	f7ff fe6a 	bl	80009cc <qbufferCreate>

  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cf8:	480f      	ldr	r0, [pc, #60]	; (8000d38 <MX_USART3_UART_Init+0x94>)
 8000cfa:	f001 fdcd 	bl	8002898 <HAL_UART_Init>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d002      	beq.n	8000d0a <MX_USART3_UART_Init+0x66>
  {
    Error_Handler();
 8000d04:	f7ff fe21 	bl	800094a <Error_Handler>
		  printf("HAL_ERROR\r\n");
		  Error_Handler();
	  }
  }

}
 8000d08:	e011      	b.n	8000d2e <MX_USART3_UART_Init+0x8a>
	  ret = true;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	71fb      	strb	r3, [r7, #7]
	  is_open[2]=true;
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <MX_USART3_UART_Init+0xa4>)
 8000d10:	2201      	movs	r2, #1
 8000d12:	709a      	strb	r2, [r3, #2]
	  if(HAL_UART_Receive_IT(&huart3, (uint8_t *)&rx_data, 1) != HAL_OK)
 8000d14:	2201      	movs	r2, #1
 8000d16:	490d      	ldr	r1, [pc, #52]	; (8000d4c <MX_USART3_UART_Init+0xa8>)
 8000d18:	4807      	ldr	r0, [pc, #28]	; (8000d38 <MX_USART3_UART_Init+0x94>)
 8000d1a:	f001 fe67 	bl	80029ec <HAL_UART_Receive_IT>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d004      	beq.n	8000d2e <MX_USART3_UART_Init+0x8a>
		  printf("HAL_ERROR\r\n");
 8000d24:	480a      	ldr	r0, [pc, #40]	; (8000d50 <MX_USART3_UART_Init+0xac>)
 8000d26:	f002 ff91 	bl	8003c4c <puts>
		  Error_Handler();
 8000d2a:	f7ff fe0e 	bl	800094a <Error_Handler>
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	200001b0 	.word	0x200001b0
 8000d3c:	40004800 	.word	0x40004800
 8000d40:	200000a6 	.word	0x200000a6
 8000d44:	20000094 	.word	0x20000094
 8000d48:	20000090 	.word	0x20000090
 8000d4c:	200001a4 	.word	0x200001a4
 8000d50:	08004b10 	.word	0x08004b10

08000d54 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08a      	sub	sp, #40	; 0x28
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a1b      	ldr	r2, [pc, #108]	; (8000de0 <HAL_UART_MspInit+0x8c>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d130      	bne.n	8000dd8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d76:	4b1b      	ldr	r3, [pc, #108]	; (8000de4 <HAL_UART_MspInit+0x90>)
 8000d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7a:	4a1a      	ldr	r2, [pc, #104]	; (8000de4 <HAL_UART_MspInit+0x90>)
 8000d7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d80:	6413      	str	r3, [r2, #64]	; 0x40
 8000d82:	4b18      	ldr	r3, [pc, #96]	; (8000de4 <HAL_UART_MspInit+0x90>)
 8000d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d8a:	613b      	str	r3, [r7, #16]
 8000d8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d8e:	4b15      	ldr	r3, [pc, #84]	; (8000de4 <HAL_UART_MspInit+0x90>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	4a14      	ldr	r2, [pc, #80]	; (8000de4 <HAL_UART_MspInit+0x90>)
 8000d94:	f043 0308 	orr.w	r3, r3, #8
 8000d98:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9a:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <HAL_UART_MspInit+0x90>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	f003 0308 	and.w	r3, r3, #8
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000da6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000daa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dac:	2302      	movs	r3, #2
 8000dae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db4:	2303      	movs	r3, #3
 8000db6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000db8:	2307      	movs	r3, #7
 8000dba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4809      	ldr	r0, [pc, #36]	; (8000de8 <HAL_UART_MspInit+0x94>)
 8000dc4:	f000 fa50 	bl	8001268 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	2100      	movs	r1, #0
 8000dcc:	2027      	movs	r0, #39	; 0x27
 8000dce:	f000 f982 	bl	80010d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000dd2:	2027      	movs	r0, #39	; 0x27
 8000dd4:	f000 f99b 	bl	800110e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000dd8:	bf00      	nop
 8000dda:	3728      	adds	r7, #40	; 0x28
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40004800 	.word	0x40004800
 8000de4:	40023800 	.word	0x40023800
 8000de8:	40020c00 	.word	0x40020c00

08000dec <HAL_UART_ErrorCallback>:
}



void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART3)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a05      	ldr	r2, [pc, #20]	; (8000e10 <HAL_UART_ErrorCallback+0x24>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d104      	bne.n	8000e08 <HAL_UART_ErrorCallback+0x1c>
  {
	  HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8000dfe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e02:	4804      	ldr	r0, [pc, #16]	; (8000e14 <HAL_UART_ErrorCallback+0x28>)
 8000e04:	f000 fbf5 	bl	80015f2 <HAL_GPIO_TogglePin>
  }
}
 8000e08:	bf00      	nop
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40004800 	.word	0x40004800
 8000e14:	40020400 	.word	0x40020400

08000e18 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
#if 1
  if (huart->Instance == USART3)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a0a      	ldr	r2, [pc, #40]	; (8000e50 <HAL_UART_RxCpltCallback+0x38>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d10d      	bne.n	8000e46 <HAL_UART_RxCpltCallback+0x2e>
  {
	HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 8000e2a:	2180      	movs	r1, #128	; 0x80
 8000e2c:	4809      	ldr	r0, [pc, #36]	; (8000e54 <HAL_UART_RxCpltCallback+0x3c>)
 8000e2e:	f000 fbe0 	bl	80015f2 <HAL_GPIO_TogglePin>
    HAL_UART_Receive_IT(&huart3, (uint8_t *)&rx_data, 1);
 8000e32:	2201      	movs	r2, #1
 8000e34:	4908      	ldr	r1, [pc, #32]	; (8000e58 <HAL_UART_RxCpltCallback+0x40>)
 8000e36:	4809      	ldr	r0, [pc, #36]	; (8000e5c <HAL_UART_RxCpltCallback+0x44>)
 8000e38:	f001 fdd8 	bl	80029ec <HAL_UART_Receive_IT>
    qbufferWrite(&qbuffer, &rx_data, 1);
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	4906      	ldr	r1, [pc, #24]	; (8000e58 <HAL_UART_RxCpltCallback+0x40>)
 8000e40:	4807      	ldr	r0, [pc, #28]	; (8000e60 <HAL_UART_RxCpltCallback+0x48>)
 8000e42:	f7ff fdde 	bl	8000a02 <qbufferWrite>
  }
#endif
}
 8000e46:	bf00      	nop
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40004800 	.word	0x40004800
 8000e54:	40020400 	.word	0x40020400
 8000e58:	200001a4 	.word	0x200001a4
 8000e5c:	200001b0 	.word	0x200001b0
 8000e60:	20000094 	.word	0x20000094

08000e64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e68:	2003      	movs	r0, #3
 8000e6a:	f000 f929 	bl	80010c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e6e:	2000      	movs	r0, #0
 8000e70:	f000 f806 	bl	8000e80 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000e74:	f7ff fbb0 	bl	80005d8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	bd80      	pop	{r7, pc}
	...

08000e80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e88:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <HAL_InitTick+0x54>)
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <HAL_InitTick+0x58>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	4619      	mov	r1, r3
 8000e92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f000 f943 	bl	800112a <HAL_SYSTICK_Config>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e00e      	b.n	8000ecc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2b0f      	cmp	r3, #15
 8000eb2:	d80a      	bhi.n	8000eca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	6879      	ldr	r1, [r7, #4]
 8000eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ebc:	f000 f90b 	bl	80010d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ec0:	4a06      	ldr	r2, [pc, #24]	; (8000edc <HAL_InitTick+0x5c>)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	e000      	b.n	8000ecc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20000000 	.word	0x20000000
 8000ed8:	20000008 	.word	0x20000008
 8000edc:	20000004 	.word	0x20000004

08000ee0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ee4:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <HAL_IncTick+0x20>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	461a      	mov	r2, r3
 8000eea:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <HAL_IncTick+0x24>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4413      	add	r3, r2
 8000ef0:	4a04      	ldr	r2, [pc, #16]	; (8000f04 <HAL_IncTick+0x24>)
 8000ef2:	6013      	str	r3, [r2, #0]
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	20000008 	.word	0x20000008
 8000f04:	20000234 	.word	0x20000234

08000f08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f0c:	4b03      	ldr	r3, [pc, #12]	; (8000f1c <HAL_GetTick+0x14>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	20000234 	.word	0x20000234

08000f20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f003 0307 	and.w	r3, r3, #7
 8000f2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f30:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <__NVIC_SetPriorityGrouping+0x40>)
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f36:	68ba      	ldr	r2, [r7, #8]
 8000f38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <__NVIC_SetPriorityGrouping+0x44>)
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f4e:	4a04      	ldr	r2, [pc, #16]	; (8000f60 <__NVIC_SetPriorityGrouping+0x40>)
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	60d3      	str	r3, [r2, #12]
}
 8000f54:	bf00      	nop
 8000f56:	3714      	adds	r7, #20
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	e000ed00 	.word	0xe000ed00
 8000f64:	05fa0000 	.word	0x05fa0000

08000f68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f6c:	4b04      	ldr	r3, [pc, #16]	; (8000f80 <__NVIC_GetPriorityGrouping+0x18>)
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	0a1b      	lsrs	r3, r3, #8
 8000f72:	f003 0307 	and.w	r3, r3, #7
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	db0b      	blt.n	8000fae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	f003 021f 	and.w	r2, r3, #31
 8000f9c:	4907      	ldr	r1, [pc, #28]	; (8000fbc <__NVIC_EnableIRQ+0x38>)
 8000f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa2:	095b      	lsrs	r3, r3, #5
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	fa00 f202 	lsl.w	r2, r0, r2
 8000faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fae:	bf00      	nop
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	e000e100 	.word	0xe000e100

08000fc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	6039      	str	r1, [r7, #0]
 8000fca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	db0a      	blt.n	8000fea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	b2da      	uxtb	r2, r3
 8000fd8:	490c      	ldr	r1, [pc, #48]	; (800100c <__NVIC_SetPriority+0x4c>)
 8000fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fde:	0112      	lsls	r2, r2, #4
 8000fe0:	b2d2      	uxtb	r2, r2
 8000fe2:	440b      	add	r3, r1
 8000fe4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fe8:	e00a      	b.n	8001000 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	b2da      	uxtb	r2, r3
 8000fee:	4908      	ldr	r1, [pc, #32]	; (8001010 <__NVIC_SetPriority+0x50>)
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	f003 030f 	and.w	r3, r3, #15
 8000ff6:	3b04      	subs	r3, #4
 8000ff8:	0112      	lsls	r2, r2, #4
 8000ffa:	b2d2      	uxtb	r2, r2
 8000ffc:	440b      	add	r3, r1
 8000ffe:	761a      	strb	r2, [r3, #24]
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	e000e100 	.word	0xe000e100
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001014:	b480      	push	{r7}
 8001016:	b089      	sub	sp, #36	; 0x24
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	f1c3 0307 	rsb	r3, r3, #7
 800102e:	2b04      	cmp	r3, #4
 8001030:	bf28      	it	cs
 8001032:	2304      	movcs	r3, #4
 8001034:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	3304      	adds	r3, #4
 800103a:	2b06      	cmp	r3, #6
 800103c:	d902      	bls.n	8001044 <NVIC_EncodePriority+0x30>
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	3b03      	subs	r3, #3
 8001042:	e000      	b.n	8001046 <NVIC_EncodePriority+0x32>
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001048:	f04f 32ff 	mov.w	r2, #4294967295
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	43da      	mvns	r2, r3
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	401a      	ands	r2, r3
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800105c:	f04f 31ff 	mov.w	r1, #4294967295
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	fa01 f303 	lsl.w	r3, r1, r3
 8001066:	43d9      	mvns	r1, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800106c:	4313      	orrs	r3, r2
         );
}
 800106e:	4618      	mov	r0, r3
 8001070:	3724      	adds	r7, #36	; 0x24
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
	...

0800107c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3b01      	subs	r3, #1
 8001088:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800108c:	d301      	bcc.n	8001092 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800108e:	2301      	movs	r3, #1
 8001090:	e00f      	b.n	80010b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001092:	4a0a      	ldr	r2, [pc, #40]	; (80010bc <SysTick_Config+0x40>)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3b01      	subs	r3, #1
 8001098:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800109a:	210f      	movs	r1, #15
 800109c:	f04f 30ff 	mov.w	r0, #4294967295
 80010a0:	f7ff ff8e 	bl	8000fc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a4:	4b05      	ldr	r3, [pc, #20]	; (80010bc <SysTick_Config+0x40>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010aa:	4b04      	ldr	r3, [pc, #16]	; (80010bc <SysTick_Config+0x40>)
 80010ac:	2207      	movs	r2, #7
 80010ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	e000e010 	.word	0xe000e010

080010c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f7ff ff29 	bl	8000f20 <__NVIC_SetPriorityGrouping>
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b086      	sub	sp, #24
 80010da:	af00      	add	r7, sp, #0
 80010dc:	4603      	mov	r3, r0
 80010de:	60b9      	str	r1, [r7, #8]
 80010e0:	607a      	str	r2, [r7, #4]
 80010e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010e8:	f7ff ff3e 	bl	8000f68 <__NVIC_GetPriorityGrouping>
 80010ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	68b9      	ldr	r1, [r7, #8]
 80010f2:	6978      	ldr	r0, [r7, #20]
 80010f4:	f7ff ff8e 	bl	8001014 <NVIC_EncodePriority>
 80010f8:	4602      	mov	r2, r0
 80010fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010fe:	4611      	mov	r1, r2
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff ff5d 	bl	8000fc0 <__NVIC_SetPriority>
}
 8001106:	bf00      	nop
 8001108:	3718      	adds	r7, #24
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b082      	sub	sp, #8
 8001112:	af00      	add	r7, sp, #0
 8001114:	4603      	mov	r3, r0
 8001116:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ff31 	bl	8000f84 <__NVIC_EnableIRQ>
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b082      	sub	sp, #8
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f7ff ffa2 	bl	800107c <SysTick_Config>
 8001138:	4603      	mov	r3, r0
}
 800113a:	4618      	mov	r0, r3
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	b084      	sub	sp, #16
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800114e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001150:	f7ff feda 	bl	8000f08 <HAL_GetTick>
 8001154:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800115c:	b2db      	uxtb	r3, r3
 800115e:	2b02      	cmp	r3, #2
 8001160:	d008      	beq.n	8001174 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2280      	movs	r2, #128	; 0x80
 8001166:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2200      	movs	r2, #0
 800116c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	e052      	b.n	800121a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f022 0216 	bic.w	r2, r2, #22
 8001182:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	695a      	ldr	r2, [r3, #20]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001192:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001198:	2b00      	cmp	r3, #0
 800119a:	d103      	bne.n	80011a4 <HAL_DMA_Abort+0x62>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d007      	beq.n	80011b4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f022 0208 	bic.w	r2, r2, #8
 80011b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f022 0201 	bic.w	r2, r2, #1
 80011c2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011c4:	e013      	b.n	80011ee <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011c6:	f7ff fe9f 	bl	8000f08 <HAL_GetTick>
 80011ca:	4602      	mov	r2, r0
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	2b05      	cmp	r3, #5
 80011d2:	d90c      	bls.n	80011ee <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2220      	movs	r2, #32
 80011d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2200      	movs	r2, #0
 80011de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2203      	movs	r2, #3
 80011e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80011ea:	2303      	movs	r3, #3
 80011ec:	e015      	b.n	800121a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f003 0301 	and.w	r3, r3, #1
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d1e4      	bne.n	80011c6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001200:	223f      	movs	r2, #63	; 0x3f
 8001202:	409a      	lsls	r2, r3
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2200      	movs	r2, #0
 800120c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2201      	movs	r2, #1
 8001214:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001222:	b480      	push	{r7}
 8001224:	b083      	sub	sp, #12
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001230:	b2db      	uxtb	r3, r3
 8001232:	2b02      	cmp	r3, #2
 8001234:	d004      	beq.n	8001240 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2280      	movs	r2, #128	; 0x80
 800123a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	e00c      	b.n	800125a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2205      	movs	r2, #5
 8001244:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f022 0201 	bic.w	r2, r2, #1
 8001256:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
	...

08001268 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001268:	b480      	push	{r7}
 800126a:	b089      	sub	sp, #36	; 0x24
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001272:	2300      	movs	r3, #0
 8001274:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001276:	2300      	movs	r3, #0
 8001278:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800127a:	2300      	movs	r3, #0
 800127c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800127e:	2300      	movs	r3, #0
 8001280:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001282:	2300      	movs	r3, #0
 8001284:	61fb      	str	r3, [r7, #28]
 8001286:	e175      	b.n	8001574 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001288:	2201      	movs	r2, #1
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	697a      	ldr	r2, [r7, #20]
 8001298:	4013      	ands	r3, r2
 800129a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	f040 8164 	bne.w	800156e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d00b      	beq.n	80012c6 <HAL_GPIO_Init+0x5e>
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d007      	beq.n	80012c6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012ba:	2b11      	cmp	r3, #17
 80012bc:	d003      	beq.n	80012c6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	2b12      	cmp	r3, #18
 80012c4:	d130      	bne.n	8001328 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	2203      	movs	r2, #3
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	43db      	mvns	r3, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4013      	ands	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	68da      	ldr	r2, [r3, #12]
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012fc:	2201      	movs	r2, #1
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	43db      	mvns	r3, r3
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	4013      	ands	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	091b      	lsrs	r3, r3, #4
 8001312:	f003 0201 	and.w	r2, r3, #1
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	4313      	orrs	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	2203      	movs	r2, #3
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	43db      	mvns	r3, r3
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	4013      	ands	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	689a      	ldr	r2, [r3, #8]
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4313      	orrs	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	2b02      	cmp	r3, #2
 800135e:	d003      	beq.n	8001368 <HAL_GPIO_Init+0x100>
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	2b12      	cmp	r3, #18
 8001366:	d123      	bne.n	80013b0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	08da      	lsrs	r2, r3, #3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3208      	adds	r2, #8
 8001370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001374:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	f003 0307 	and.w	r3, r3, #7
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	220f      	movs	r2, #15
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	43db      	mvns	r3, r3
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4013      	ands	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	691a      	ldr	r2, [r3, #16]
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4313      	orrs	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	08da      	lsrs	r2, r3, #3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	3208      	adds	r2, #8
 80013aa:	69b9      	ldr	r1, [r7, #24]
 80013ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	2203      	movs	r2, #3
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	43db      	mvns	r3, r3
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4013      	ands	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f003 0203 	and.w	r2, r3, #3
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	4313      	orrs	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	f000 80be 	beq.w	800156e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f2:	4b66      	ldr	r3, [pc, #408]	; (800158c <HAL_GPIO_Init+0x324>)
 80013f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f6:	4a65      	ldr	r2, [pc, #404]	; (800158c <HAL_GPIO_Init+0x324>)
 80013f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013fc:	6453      	str	r3, [r2, #68]	; 0x44
 80013fe:	4b63      	ldr	r3, [pc, #396]	; (800158c <HAL_GPIO_Init+0x324>)
 8001400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001402:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800140a:	4a61      	ldr	r2, [pc, #388]	; (8001590 <HAL_GPIO_Init+0x328>)
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	089b      	lsrs	r3, r3, #2
 8001410:	3302      	adds	r3, #2
 8001412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001416:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	f003 0303 	and.w	r3, r3, #3
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	220f      	movs	r2, #15
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	43db      	mvns	r3, r3
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	4013      	ands	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a58      	ldr	r2, [pc, #352]	; (8001594 <HAL_GPIO_Init+0x32c>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d037      	beq.n	80014a6 <HAL_GPIO_Init+0x23e>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a57      	ldr	r2, [pc, #348]	; (8001598 <HAL_GPIO_Init+0x330>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d031      	beq.n	80014a2 <HAL_GPIO_Init+0x23a>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a56      	ldr	r2, [pc, #344]	; (800159c <HAL_GPIO_Init+0x334>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d02b      	beq.n	800149e <HAL_GPIO_Init+0x236>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a55      	ldr	r2, [pc, #340]	; (80015a0 <HAL_GPIO_Init+0x338>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d025      	beq.n	800149a <HAL_GPIO_Init+0x232>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a54      	ldr	r2, [pc, #336]	; (80015a4 <HAL_GPIO_Init+0x33c>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d01f      	beq.n	8001496 <HAL_GPIO_Init+0x22e>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a53      	ldr	r2, [pc, #332]	; (80015a8 <HAL_GPIO_Init+0x340>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d019      	beq.n	8001492 <HAL_GPIO_Init+0x22a>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a52      	ldr	r2, [pc, #328]	; (80015ac <HAL_GPIO_Init+0x344>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d013      	beq.n	800148e <HAL_GPIO_Init+0x226>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a51      	ldr	r2, [pc, #324]	; (80015b0 <HAL_GPIO_Init+0x348>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d00d      	beq.n	800148a <HAL_GPIO_Init+0x222>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a50      	ldr	r2, [pc, #320]	; (80015b4 <HAL_GPIO_Init+0x34c>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d007      	beq.n	8001486 <HAL_GPIO_Init+0x21e>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a4f      	ldr	r2, [pc, #316]	; (80015b8 <HAL_GPIO_Init+0x350>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d101      	bne.n	8001482 <HAL_GPIO_Init+0x21a>
 800147e:	2309      	movs	r3, #9
 8001480:	e012      	b.n	80014a8 <HAL_GPIO_Init+0x240>
 8001482:	230a      	movs	r3, #10
 8001484:	e010      	b.n	80014a8 <HAL_GPIO_Init+0x240>
 8001486:	2308      	movs	r3, #8
 8001488:	e00e      	b.n	80014a8 <HAL_GPIO_Init+0x240>
 800148a:	2307      	movs	r3, #7
 800148c:	e00c      	b.n	80014a8 <HAL_GPIO_Init+0x240>
 800148e:	2306      	movs	r3, #6
 8001490:	e00a      	b.n	80014a8 <HAL_GPIO_Init+0x240>
 8001492:	2305      	movs	r3, #5
 8001494:	e008      	b.n	80014a8 <HAL_GPIO_Init+0x240>
 8001496:	2304      	movs	r3, #4
 8001498:	e006      	b.n	80014a8 <HAL_GPIO_Init+0x240>
 800149a:	2303      	movs	r3, #3
 800149c:	e004      	b.n	80014a8 <HAL_GPIO_Init+0x240>
 800149e:	2302      	movs	r3, #2
 80014a0:	e002      	b.n	80014a8 <HAL_GPIO_Init+0x240>
 80014a2:	2301      	movs	r3, #1
 80014a4:	e000      	b.n	80014a8 <HAL_GPIO_Init+0x240>
 80014a6:	2300      	movs	r3, #0
 80014a8:	69fa      	ldr	r2, [r7, #28]
 80014aa:	f002 0203 	and.w	r2, r2, #3
 80014ae:	0092      	lsls	r2, r2, #2
 80014b0:	4093      	lsls	r3, r2
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80014b8:	4935      	ldr	r1, [pc, #212]	; (8001590 <HAL_GPIO_Init+0x328>)
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	089b      	lsrs	r3, r3, #2
 80014be:	3302      	adds	r3, #2
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014c6:	4b3d      	ldr	r3, [pc, #244]	; (80015bc <HAL_GPIO_Init+0x354>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	43db      	mvns	r3, r3
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	4013      	ands	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d003      	beq.n	80014ea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014ea:	4a34      	ldr	r2, [pc, #208]	; (80015bc <HAL_GPIO_Init+0x354>)
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80014f0:	4b32      	ldr	r3, [pc, #200]	; (80015bc <HAL_GPIO_Init+0x354>)
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	43db      	mvns	r3, r3
 80014fa:	69ba      	ldr	r2, [r7, #24]
 80014fc:	4013      	ands	r3, r2
 80014fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d003      	beq.n	8001514 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	4313      	orrs	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001514:	4a29      	ldr	r2, [pc, #164]	; (80015bc <HAL_GPIO_Init+0x354>)
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800151a:	4b28      	ldr	r3, [pc, #160]	; (80015bc <HAL_GPIO_Init+0x354>)
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	43db      	mvns	r3, r3
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	4013      	ands	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d003      	beq.n	800153e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	4313      	orrs	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800153e:	4a1f      	ldr	r2, [pc, #124]	; (80015bc <HAL_GPIO_Init+0x354>)
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001544:	4b1d      	ldr	r3, [pc, #116]	; (80015bc <HAL_GPIO_Init+0x354>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	43db      	mvns	r3, r3
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	4013      	ands	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d003      	beq.n	8001568 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	4313      	orrs	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001568:	4a14      	ldr	r2, [pc, #80]	; (80015bc <HAL_GPIO_Init+0x354>)
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	3301      	adds	r3, #1
 8001572:	61fb      	str	r3, [r7, #28]
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	2b0f      	cmp	r3, #15
 8001578:	f67f ae86 	bls.w	8001288 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800157c:	bf00      	nop
 800157e:	bf00      	nop
 8001580:	3724      	adds	r7, #36	; 0x24
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	40023800 	.word	0x40023800
 8001590:	40013800 	.word	0x40013800
 8001594:	40020000 	.word	0x40020000
 8001598:	40020400 	.word	0x40020400
 800159c:	40020800 	.word	0x40020800
 80015a0:	40020c00 	.word	0x40020c00
 80015a4:	40021000 	.word	0x40021000
 80015a8:	40021400 	.word	0x40021400
 80015ac:	40021800 	.word	0x40021800
 80015b0:	40021c00 	.word	0x40021c00
 80015b4:	40022000 	.word	0x40022000
 80015b8:	40022400 	.word	0x40022400
 80015bc:	40013c00 	.word	0x40013c00

080015c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	460b      	mov	r3, r1
 80015ca:	807b      	strh	r3, [r7, #2]
 80015cc:	4613      	mov	r3, r2
 80015ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015d0:	787b      	ldrb	r3, [r7, #1]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d003      	beq.n	80015de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015d6:	887a      	ldrh	r2, [r7, #2]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80015dc:	e003      	b.n	80015e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80015de:	887b      	ldrh	r3, [r7, #2]
 80015e0:	041a      	lsls	r2, r3, #16
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	619a      	str	r2, [r3, #24]
}
 80015e6:	bf00      	nop
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr

080015f2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015f2:	b480      	push	{r7}
 80015f4:	b085      	sub	sp, #20
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
 80015fa:	460b      	mov	r3, r1
 80015fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	695b      	ldr	r3, [r3, #20]
 8001602:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001604:	887a      	ldrh	r2, [r7, #2]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	4013      	ands	r3, r2
 800160a:	041a      	lsls	r2, r3, #16
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	43d9      	mvns	r1, r3
 8001610:	887b      	ldrh	r3, [r7, #2]
 8001612:	400b      	ands	r3, r1
 8001614:	431a      	orrs	r2, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	619a      	str	r2, [r3, #24]
}
 800161a:	bf00      	nop
 800161c:	3714      	adds	r7, #20
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
	...

08001628 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800162c:	4b05      	ldr	r3, [pc, #20]	; (8001644 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a04      	ldr	r2, [pc, #16]	; (8001644 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001632:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001636:	6013      	str	r3, [r2, #0]
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	40007000 	.word	0x40007000

08001648 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800164e:	2300      	movs	r3, #0
 8001650:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001652:	4b23      	ldr	r3, [pc, #140]	; (80016e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	4a22      	ldr	r2, [pc, #136]	; (80016e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800165c:	6413      	str	r3, [r2, #64]	; 0x40
 800165e:	4b20      	ldr	r3, [pc, #128]	; (80016e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001666:	603b      	str	r3, [r7, #0]
 8001668:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800166a:	4b1e      	ldr	r3, [pc, #120]	; (80016e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a1d      	ldr	r2, [pc, #116]	; (80016e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001674:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001676:	f7ff fc47 	bl	8000f08 <HAL_GetTick>
 800167a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800167c:	e009      	b.n	8001692 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800167e:	f7ff fc43 	bl	8000f08 <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800168c:	d901      	bls.n	8001692 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e022      	b.n	80016d8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001692:	4b14      	ldr	r3, [pc, #80]	; (80016e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800169a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800169e:	d1ee      	bne.n	800167e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80016a0:	4b10      	ldr	r3, [pc, #64]	; (80016e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a0f      	ldr	r2, [pc, #60]	; (80016e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80016a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016aa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016ac:	f7ff fc2c 	bl	8000f08 <HAL_GetTick>
 80016b0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80016b2:	e009      	b.n	80016c8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80016b4:	f7ff fc28 	bl	8000f08 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016c2:	d901      	bls.n	80016c8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e007      	b.n	80016d8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80016c8:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80016d4:	d1ee      	bne.n	80016b4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80016d6:	2300      	movs	r3, #0
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	40023800 	.word	0x40023800
 80016e4:	40007000 	.word	0x40007000

080016e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80016f0:	2300      	movs	r3, #0
 80016f2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d101      	bne.n	80016fe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e29b      	b.n	8001c36 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	2b00      	cmp	r3, #0
 8001708:	f000 8087 	beq.w	800181a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800170c:	4b96      	ldr	r3, [pc, #600]	; (8001968 <HAL_RCC_OscConfig+0x280>)
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f003 030c 	and.w	r3, r3, #12
 8001714:	2b04      	cmp	r3, #4
 8001716:	d00c      	beq.n	8001732 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001718:	4b93      	ldr	r3, [pc, #588]	; (8001968 <HAL_RCC_OscConfig+0x280>)
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	f003 030c 	and.w	r3, r3, #12
 8001720:	2b08      	cmp	r3, #8
 8001722:	d112      	bne.n	800174a <HAL_RCC_OscConfig+0x62>
 8001724:	4b90      	ldr	r3, [pc, #576]	; (8001968 <HAL_RCC_OscConfig+0x280>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800172c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001730:	d10b      	bne.n	800174a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001732:	4b8d      	ldr	r3, [pc, #564]	; (8001968 <HAL_RCC_OscConfig+0x280>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d06c      	beq.n	8001818 <HAL_RCC_OscConfig+0x130>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d168      	bne.n	8001818 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e275      	b.n	8001c36 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001752:	d106      	bne.n	8001762 <HAL_RCC_OscConfig+0x7a>
 8001754:	4b84      	ldr	r3, [pc, #528]	; (8001968 <HAL_RCC_OscConfig+0x280>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a83      	ldr	r2, [pc, #524]	; (8001968 <HAL_RCC_OscConfig+0x280>)
 800175a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800175e:	6013      	str	r3, [r2, #0]
 8001760:	e02e      	b.n	80017c0 <HAL_RCC_OscConfig+0xd8>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d10c      	bne.n	8001784 <HAL_RCC_OscConfig+0x9c>
 800176a:	4b7f      	ldr	r3, [pc, #508]	; (8001968 <HAL_RCC_OscConfig+0x280>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a7e      	ldr	r2, [pc, #504]	; (8001968 <HAL_RCC_OscConfig+0x280>)
 8001770:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001774:	6013      	str	r3, [r2, #0]
 8001776:	4b7c      	ldr	r3, [pc, #496]	; (8001968 <HAL_RCC_OscConfig+0x280>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a7b      	ldr	r2, [pc, #492]	; (8001968 <HAL_RCC_OscConfig+0x280>)
 800177c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001780:	6013      	str	r3, [r2, #0]
 8001782:	e01d      	b.n	80017c0 <HAL_RCC_OscConfig+0xd8>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800178c:	d10c      	bne.n	80017a8 <HAL_RCC_OscConfig+0xc0>
 800178e:	4b76      	ldr	r3, [pc, #472]	; (8001968 <HAL_RCC_OscConfig+0x280>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a75      	ldr	r2, [pc, #468]	; (8001968 <HAL_RCC_OscConfig+0x280>)
 8001794:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001798:	6013      	str	r3, [r2, #0]
 800179a:	4b73      	ldr	r3, [pc, #460]	; (8001968 <HAL_RCC_OscConfig+0x280>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a72      	ldr	r2, [pc, #456]	; (8001968 <HAL_RCC_OscConfig+0x280>)
 80017a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017a4:	6013      	str	r3, [r2, #0]
 80017a6:	e00b      	b.n	80017c0 <HAL_RCC_OscConfig+0xd8>
 80017a8:	4b6f      	ldr	r3, [pc, #444]	; (8001968 <HAL_RCC_OscConfig+0x280>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a6e      	ldr	r2, [pc, #440]	; (8001968 <HAL_RCC_OscConfig+0x280>)
 80017ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017b2:	6013      	str	r3, [r2, #0]
 80017b4:	4b6c      	ldr	r3, [pc, #432]	; (8001968 <HAL_RCC_OscConfig+0x280>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a6b      	ldr	r2, [pc, #428]	; (8001968 <HAL_RCC_OscConfig+0x280>)
 80017ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d013      	beq.n	80017f0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c8:	f7ff fb9e 	bl	8000f08 <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017d0:	f7ff fb9a 	bl	8000f08 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b64      	cmp	r3, #100	; 0x64
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e229      	b.n	8001c36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017e2:	4b61      	ldr	r3, [pc, #388]	; (8001968 <HAL_RCC_OscConfig+0x280>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d0f0      	beq.n	80017d0 <HAL_RCC_OscConfig+0xe8>
 80017ee:	e014      	b.n	800181a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f0:	f7ff fb8a 	bl	8000f08 <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017f8:	f7ff fb86 	bl	8000f08 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b64      	cmp	r3, #100	; 0x64
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e215      	b.n	8001c36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800180a:	4b57      	ldr	r3, [pc, #348]	; (8001968 <HAL_RCC_OscConfig+0x280>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1f0      	bne.n	80017f8 <HAL_RCC_OscConfig+0x110>
 8001816:	e000      	b.n	800181a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001818:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d069      	beq.n	80018fa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001826:	4b50      	ldr	r3, [pc, #320]	; (8001968 <HAL_RCC_OscConfig+0x280>)
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f003 030c 	and.w	r3, r3, #12
 800182e:	2b00      	cmp	r3, #0
 8001830:	d00b      	beq.n	800184a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001832:	4b4d      	ldr	r3, [pc, #308]	; (8001968 <HAL_RCC_OscConfig+0x280>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f003 030c 	and.w	r3, r3, #12
 800183a:	2b08      	cmp	r3, #8
 800183c:	d11c      	bne.n	8001878 <HAL_RCC_OscConfig+0x190>
 800183e:	4b4a      	ldr	r3, [pc, #296]	; (8001968 <HAL_RCC_OscConfig+0x280>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d116      	bne.n	8001878 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800184a:	4b47      	ldr	r3, [pc, #284]	; (8001968 <HAL_RCC_OscConfig+0x280>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d005      	beq.n	8001862 <HAL_RCC_OscConfig+0x17a>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d001      	beq.n	8001862 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e1e9      	b.n	8001c36 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001862:	4b41      	ldr	r3, [pc, #260]	; (8001968 <HAL_RCC_OscConfig+0x280>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	691b      	ldr	r3, [r3, #16]
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	493d      	ldr	r1, [pc, #244]	; (8001968 <HAL_RCC_OscConfig+0x280>)
 8001872:	4313      	orrs	r3, r2
 8001874:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001876:	e040      	b.n	80018fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d023      	beq.n	80018c8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001880:	4b39      	ldr	r3, [pc, #228]	; (8001968 <HAL_RCC_OscConfig+0x280>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a38      	ldr	r2, [pc, #224]	; (8001968 <HAL_RCC_OscConfig+0x280>)
 8001886:	f043 0301 	orr.w	r3, r3, #1
 800188a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800188c:	f7ff fb3c 	bl	8000f08 <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001892:	e008      	b.n	80018a6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001894:	f7ff fb38 	bl	8000f08 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e1c7      	b.n	8001c36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a6:	4b30      	ldr	r3, [pc, #192]	; (8001968 <HAL_RCC_OscConfig+0x280>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d0f0      	beq.n	8001894 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018b2:	4b2d      	ldr	r3, [pc, #180]	; (8001968 <HAL_RCC_OscConfig+0x280>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	691b      	ldr	r3, [r3, #16]
 80018be:	00db      	lsls	r3, r3, #3
 80018c0:	4929      	ldr	r1, [pc, #164]	; (8001968 <HAL_RCC_OscConfig+0x280>)
 80018c2:	4313      	orrs	r3, r2
 80018c4:	600b      	str	r3, [r1, #0]
 80018c6:	e018      	b.n	80018fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018c8:	4b27      	ldr	r3, [pc, #156]	; (8001968 <HAL_RCC_OscConfig+0x280>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a26      	ldr	r2, [pc, #152]	; (8001968 <HAL_RCC_OscConfig+0x280>)
 80018ce:	f023 0301 	bic.w	r3, r3, #1
 80018d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d4:	f7ff fb18 	bl	8000f08 <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018dc:	f7ff fb14 	bl	8000f08 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e1a3      	b.n	8001c36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ee:	4b1e      	ldr	r3, [pc, #120]	; (8001968 <HAL_RCC_OscConfig+0x280>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1f0      	bne.n	80018dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0308 	and.w	r3, r3, #8
 8001902:	2b00      	cmp	r3, #0
 8001904:	d038      	beq.n	8001978 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	695b      	ldr	r3, [r3, #20]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d019      	beq.n	8001942 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800190e:	4b16      	ldr	r3, [pc, #88]	; (8001968 <HAL_RCC_OscConfig+0x280>)
 8001910:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001912:	4a15      	ldr	r2, [pc, #84]	; (8001968 <HAL_RCC_OscConfig+0x280>)
 8001914:	f043 0301 	orr.w	r3, r3, #1
 8001918:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800191a:	f7ff faf5 	bl	8000f08 <HAL_GetTick>
 800191e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001920:	e008      	b.n	8001934 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001922:	f7ff faf1 	bl	8000f08 <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b02      	cmp	r3, #2
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e180      	b.n	8001c36 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001934:	4b0c      	ldr	r3, [pc, #48]	; (8001968 <HAL_RCC_OscConfig+0x280>)
 8001936:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001938:	f003 0302 	and.w	r3, r3, #2
 800193c:	2b00      	cmp	r3, #0
 800193e:	d0f0      	beq.n	8001922 <HAL_RCC_OscConfig+0x23a>
 8001940:	e01a      	b.n	8001978 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001942:	4b09      	ldr	r3, [pc, #36]	; (8001968 <HAL_RCC_OscConfig+0x280>)
 8001944:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001946:	4a08      	ldr	r2, [pc, #32]	; (8001968 <HAL_RCC_OscConfig+0x280>)
 8001948:	f023 0301 	bic.w	r3, r3, #1
 800194c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800194e:	f7ff fadb 	bl	8000f08 <HAL_GetTick>
 8001952:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001954:	e00a      	b.n	800196c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001956:	f7ff fad7 	bl	8000f08 <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d903      	bls.n	800196c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e166      	b.n	8001c36 <HAL_RCC_OscConfig+0x54e>
 8001968:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800196c:	4b92      	ldr	r3, [pc, #584]	; (8001bb8 <HAL_RCC_OscConfig+0x4d0>)
 800196e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001970:	f003 0302 	and.w	r3, r3, #2
 8001974:	2b00      	cmp	r3, #0
 8001976:	d1ee      	bne.n	8001956 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0304 	and.w	r3, r3, #4
 8001980:	2b00      	cmp	r3, #0
 8001982:	f000 80a4 	beq.w	8001ace <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001986:	4b8c      	ldr	r3, [pc, #560]	; (8001bb8 <HAL_RCC_OscConfig+0x4d0>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d10d      	bne.n	80019ae <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001992:	4b89      	ldr	r3, [pc, #548]	; (8001bb8 <HAL_RCC_OscConfig+0x4d0>)
 8001994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001996:	4a88      	ldr	r2, [pc, #544]	; (8001bb8 <HAL_RCC_OscConfig+0x4d0>)
 8001998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800199c:	6413      	str	r3, [r2, #64]	; 0x40
 800199e:	4b86      	ldr	r3, [pc, #536]	; (8001bb8 <HAL_RCC_OscConfig+0x4d0>)
 80019a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a6:	60bb      	str	r3, [r7, #8]
 80019a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019aa:	2301      	movs	r3, #1
 80019ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019ae:	4b83      	ldr	r3, [pc, #524]	; (8001bbc <HAL_RCC_OscConfig+0x4d4>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d118      	bne.n	80019ec <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80019ba:	4b80      	ldr	r3, [pc, #512]	; (8001bbc <HAL_RCC_OscConfig+0x4d4>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a7f      	ldr	r2, [pc, #508]	; (8001bbc <HAL_RCC_OscConfig+0x4d4>)
 80019c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019c6:	f7ff fa9f 	bl	8000f08 <HAL_GetTick>
 80019ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019cc:	e008      	b.n	80019e0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ce:	f7ff fa9b 	bl	8000f08 <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	2b64      	cmp	r3, #100	; 0x64
 80019da:	d901      	bls.n	80019e0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e12a      	b.n	8001c36 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019e0:	4b76      	ldr	r3, [pc, #472]	; (8001bbc <HAL_RCC_OscConfig+0x4d4>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d0f0      	beq.n	80019ce <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d106      	bne.n	8001a02 <HAL_RCC_OscConfig+0x31a>
 80019f4:	4b70      	ldr	r3, [pc, #448]	; (8001bb8 <HAL_RCC_OscConfig+0x4d0>)
 80019f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f8:	4a6f      	ldr	r2, [pc, #444]	; (8001bb8 <HAL_RCC_OscConfig+0x4d0>)
 80019fa:	f043 0301 	orr.w	r3, r3, #1
 80019fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001a00:	e02d      	b.n	8001a5e <HAL_RCC_OscConfig+0x376>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d10c      	bne.n	8001a24 <HAL_RCC_OscConfig+0x33c>
 8001a0a:	4b6b      	ldr	r3, [pc, #428]	; (8001bb8 <HAL_RCC_OscConfig+0x4d0>)
 8001a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a0e:	4a6a      	ldr	r2, [pc, #424]	; (8001bb8 <HAL_RCC_OscConfig+0x4d0>)
 8001a10:	f023 0301 	bic.w	r3, r3, #1
 8001a14:	6713      	str	r3, [r2, #112]	; 0x70
 8001a16:	4b68      	ldr	r3, [pc, #416]	; (8001bb8 <HAL_RCC_OscConfig+0x4d0>)
 8001a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a1a:	4a67      	ldr	r2, [pc, #412]	; (8001bb8 <HAL_RCC_OscConfig+0x4d0>)
 8001a1c:	f023 0304 	bic.w	r3, r3, #4
 8001a20:	6713      	str	r3, [r2, #112]	; 0x70
 8001a22:	e01c      	b.n	8001a5e <HAL_RCC_OscConfig+0x376>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	2b05      	cmp	r3, #5
 8001a2a:	d10c      	bne.n	8001a46 <HAL_RCC_OscConfig+0x35e>
 8001a2c:	4b62      	ldr	r3, [pc, #392]	; (8001bb8 <HAL_RCC_OscConfig+0x4d0>)
 8001a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a30:	4a61      	ldr	r2, [pc, #388]	; (8001bb8 <HAL_RCC_OscConfig+0x4d0>)
 8001a32:	f043 0304 	orr.w	r3, r3, #4
 8001a36:	6713      	str	r3, [r2, #112]	; 0x70
 8001a38:	4b5f      	ldr	r3, [pc, #380]	; (8001bb8 <HAL_RCC_OscConfig+0x4d0>)
 8001a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a3c:	4a5e      	ldr	r2, [pc, #376]	; (8001bb8 <HAL_RCC_OscConfig+0x4d0>)
 8001a3e:	f043 0301 	orr.w	r3, r3, #1
 8001a42:	6713      	str	r3, [r2, #112]	; 0x70
 8001a44:	e00b      	b.n	8001a5e <HAL_RCC_OscConfig+0x376>
 8001a46:	4b5c      	ldr	r3, [pc, #368]	; (8001bb8 <HAL_RCC_OscConfig+0x4d0>)
 8001a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a4a:	4a5b      	ldr	r2, [pc, #364]	; (8001bb8 <HAL_RCC_OscConfig+0x4d0>)
 8001a4c:	f023 0301 	bic.w	r3, r3, #1
 8001a50:	6713      	str	r3, [r2, #112]	; 0x70
 8001a52:	4b59      	ldr	r3, [pc, #356]	; (8001bb8 <HAL_RCC_OscConfig+0x4d0>)
 8001a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a56:	4a58      	ldr	r2, [pc, #352]	; (8001bb8 <HAL_RCC_OscConfig+0x4d0>)
 8001a58:	f023 0304 	bic.w	r3, r3, #4
 8001a5c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d015      	beq.n	8001a92 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a66:	f7ff fa4f 	bl	8000f08 <HAL_GetTick>
 8001a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a6c:	e00a      	b.n	8001a84 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a6e:	f7ff fa4b 	bl	8000f08 <HAL_GetTick>
 8001a72:	4602      	mov	r2, r0
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d901      	bls.n	8001a84 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e0d8      	b.n	8001c36 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a84:	4b4c      	ldr	r3, [pc, #304]	; (8001bb8 <HAL_RCC_OscConfig+0x4d0>)
 8001a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d0ee      	beq.n	8001a6e <HAL_RCC_OscConfig+0x386>
 8001a90:	e014      	b.n	8001abc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a92:	f7ff fa39 	bl	8000f08 <HAL_GetTick>
 8001a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a98:	e00a      	b.n	8001ab0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a9a:	f7ff fa35 	bl	8000f08 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e0c2      	b.n	8001c36 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ab0:	4b41      	ldr	r3, [pc, #260]	; (8001bb8 <HAL_RCC_OscConfig+0x4d0>)
 8001ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d1ee      	bne.n	8001a9a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001abc:	7dfb      	ldrb	r3, [r7, #23]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d105      	bne.n	8001ace <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ac2:	4b3d      	ldr	r3, [pc, #244]	; (8001bb8 <HAL_RCC_OscConfig+0x4d0>)
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	4a3c      	ldr	r2, [pc, #240]	; (8001bb8 <HAL_RCC_OscConfig+0x4d0>)
 8001ac8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001acc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	f000 80ae 	beq.w	8001c34 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ad8:	4b37      	ldr	r3, [pc, #220]	; (8001bb8 <HAL_RCC_OscConfig+0x4d0>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f003 030c 	and.w	r3, r3, #12
 8001ae0:	2b08      	cmp	r3, #8
 8001ae2:	d06d      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d14b      	bne.n	8001b84 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aec:	4b32      	ldr	r3, [pc, #200]	; (8001bb8 <HAL_RCC_OscConfig+0x4d0>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a31      	ldr	r2, [pc, #196]	; (8001bb8 <HAL_RCC_OscConfig+0x4d0>)
 8001af2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001af6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af8:	f7ff fa06 	bl	8000f08 <HAL_GetTick>
 8001afc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b00:	f7ff fa02 	bl	8000f08 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e091      	b.n	8001c36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b12:	4b29      	ldr	r3, [pc, #164]	; (8001bb8 <HAL_RCC_OscConfig+0x4d0>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d1f0      	bne.n	8001b00 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	69da      	ldr	r2, [r3, #28]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a1b      	ldr	r3, [r3, #32]
 8001b26:	431a      	orrs	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2c:	019b      	lsls	r3, r3, #6
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b34:	085b      	lsrs	r3, r3, #1
 8001b36:	3b01      	subs	r3, #1
 8001b38:	041b      	lsls	r3, r3, #16
 8001b3a:	431a      	orrs	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b40:	061b      	lsls	r3, r3, #24
 8001b42:	431a      	orrs	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b48:	071b      	lsls	r3, r3, #28
 8001b4a:	491b      	ldr	r1, [pc, #108]	; (8001bb8 <HAL_RCC_OscConfig+0x4d0>)
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b50:	4b19      	ldr	r3, [pc, #100]	; (8001bb8 <HAL_RCC_OscConfig+0x4d0>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a18      	ldr	r2, [pc, #96]	; (8001bb8 <HAL_RCC_OscConfig+0x4d0>)
 8001b56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b5c:	f7ff f9d4 	bl	8000f08 <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b64:	f7ff f9d0 	bl	8000f08 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e05f      	b.n	8001c36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b76:	4b10      	ldr	r3, [pc, #64]	; (8001bb8 <HAL_RCC_OscConfig+0x4d0>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d0f0      	beq.n	8001b64 <HAL_RCC_OscConfig+0x47c>
 8001b82:	e057      	b.n	8001c34 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b84:	4b0c      	ldr	r3, [pc, #48]	; (8001bb8 <HAL_RCC_OscConfig+0x4d0>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a0b      	ldr	r2, [pc, #44]	; (8001bb8 <HAL_RCC_OscConfig+0x4d0>)
 8001b8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b90:	f7ff f9ba 	bl	8000f08 <HAL_GetTick>
 8001b94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b96:	e008      	b.n	8001baa <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b98:	f7ff f9b6 	bl	8000f08 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e045      	b.n	8001c36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001baa:	4b03      	ldr	r3, [pc, #12]	; (8001bb8 <HAL_RCC_OscConfig+0x4d0>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1f0      	bne.n	8001b98 <HAL_RCC_OscConfig+0x4b0>
 8001bb6:	e03d      	b.n	8001c34 <HAL_RCC_OscConfig+0x54c>
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001bc0:	4b1f      	ldr	r3, [pc, #124]	; (8001c40 <HAL_RCC_OscConfig+0x558>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	699b      	ldr	r3, [r3, #24]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d030      	beq.n	8001c30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d129      	bne.n	8001c30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d122      	bne.n	8001c30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bf6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d119      	bne.n	8001c30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c06:	085b      	lsrs	r3, r3, #1
 8001c08:	3b01      	subs	r3, #1
 8001c0a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d10f      	bne.n	8001c30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d107      	bne.n	8001c30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d001      	beq.n	8001c34 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e000      	b.n	8001c36 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3718      	adds	r7, #24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40023800 	.word	0x40023800

08001c44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d101      	bne.n	8001c5c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e0d0      	b.n	8001dfe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c5c:	4b6a      	ldr	r3, [pc, #424]	; (8001e08 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 030f 	and.w	r3, r3, #15
 8001c64:	683a      	ldr	r2, [r7, #0]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d910      	bls.n	8001c8c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c6a:	4b67      	ldr	r3, [pc, #412]	; (8001e08 <HAL_RCC_ClockConfig+0x1c4>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f023 020f 	bic.w	r2, r3, #15
 8001c72:	4965      	ldr	r1, [pc, #404]	; (8001e08 <HAL_RCC_ClockConfig+0x1c4>)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c7a:	4b63      	ldr	r3, [pc, #396]	; (8001e08 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 030f 	and.w	r3, r3, #15
 8001c82:	683a      	ldr	r2, [r7, #0]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d001      	beq.n	8001c8c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e0b8      	b.n	8001dfe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d020      	beq.n	8001cda <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0304 	and.w	r3, r3, #4
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d005      	beq.n	8001cb0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ca4:	4b59      	ldr	r3, [pc, #356]	; (8001e0c <HAL_RCC_ClockConfig+0x1c8>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	4a58      	ldr	r2, [pc, #352]	; (8001e0c <HAL_RCC_ClockConfig+0x1c8>)
 8001caa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001cae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0308 	and.w	r3, r3, #8
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d005      	beq.n	8001cc8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cbc:	4b53      	ldr	r3, [pc, #332]	; (8001e0c <HAL_RCC_ClockConfig+0x1c8>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	4a52      	ldr	r2, [pc, #328]	; (8001e0c <HAL_RCC_ClockConfig+0x1c8>)
 8001cc2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001cc6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cc8:	4b50      	ldr	r3, [pc, #320]	; (8001e0c <HAL_RCC_ClockConfig+0x1c8>)
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	494d      	ldr	r1, [pc, #308]	; (8001e0c <HAL_RCC_ClockConfig+0x1c8>)
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d040      	beq.n	8001d68 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d107      	bne.n	8001cfe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cee:	4b47      	ldr	r3, [pc, #284]	; (8001e0c <HAL_RCC_ClockConfig+0x1c8>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d115      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e07f      	b.n	8001dfe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d107      	bne.n	8001d16 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d06:	4b41      	ldr	r3, [pc, #260]	; (8001e0c <HAL_RCC_ClockConfig+0x1c8>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d109      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e073      	b.n	8001dfe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d16:	4b3d      	ldr	r3, [pc, #244]	; (8001e0c <HAL_RCC_ClockConfig+0x1c8>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e06b      	b.n	8001dfe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d26:	4b39      	ldr	r3, [pc, #228]	; (8001e0c <HAL_RCC_ClockConfig+0x1c8>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f023 0203 	bic.w	r2, r3, #3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	4936      	ldr	r1, [pc, #216]	; (8001e0c <HAL_RCC_ClockConfig+0x1c8>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d38:	f7ff f8e6 	bl	8000f08 <HAL_GetTick>
 8001d3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d3e:	e00a      	b.n	8001d56 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d40:	f7ff f8e2 	bl	8000f08 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e053      	b.n	8001dfe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d56:	4b2d      	ldr	r3, [pc, #180]	; (8001e0c <HAL_RCC_ClockConfig+0x1c8>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f003 020c 	and.w	r2, r3, #12
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d1eb      	bne.n	8001d40 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d68:	4b27      	ldr	r3, [pc, #156]	; (8001e08 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 030f 	and.w	r3, r3, #15
 8001d70:	683a      	ldr	r2, [r7, #0]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d210      	bcs.n	8001d98 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d76:	4b24      	ldr	r3, [pc, #144]	; (8001e08 <HAL_RCC_ClockConfig+0x1c4>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f023 020f 	bic.w	r2, r3, #15
 8001d7e:	4922      	ldr	r1, [pc, #136]	; (8001e08 <HAL_RCC_ClockConfig+0x1c4>)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d86:	4b20      	ldr	r3, [pc, #128]	; (8001e08 <HAL_RCC_ClockConfig+0x1c4>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 030f 	and.w	r3, r3, #15
 8001d8e:	683a      	ldr	r2, [r7, #0]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d001      	beq.n	8001d98 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e032      	b.n	8001dfe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0304 	and.w	r3, r3, #4
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d008      	beq.n	8001db6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001da4:	4b19      	ldr	r3, [pc, #100]	; (8001e0c <HAL_RCC_ClockConfig+0x1c8>)
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	4916      	ldr	r1, [pc, #88]	; (8001e0c <HAL_RCC_ClockConfig+0x1c8>)
 8001db2:	4313      	orrs	r3, r2
 8001db4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0308 	and.w	r3, r3, #8
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d009      	beq.n	8001dd6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001dc2:	4b12      	ldr	r3, [pc, #72]	; (8001e0c <HAL_RCC_ClockConfig+0x1c8>)
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	490e      	ldr	r1, [pc, #56]	; (8001e0c <HAL_RCC_ClockConfig+0x1c8>)
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001dd6:	f000 f821 	bl	8001e1c <HAL_RCC_GetSysClockFreq>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <HAL_RCC_ClockConfig+0x1c8>)
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	091b      	lsrs	r3, r3, #4
 8001de2:	f003 030f 	and.w	r3, r3, #15
 8001de6:	490a      	ldr	r1, [pc, #40]	; (8001e10 <HAL_RCC_ClockConfig+0x1cc>)
 8001de8:	5ccb      	ldrb	r3, [r1, r3]
 8001dea:	fa22 f303 	lsr.w	r3, r2, r3
 8001dee:	4a09      	ldr	r2, [pc, #36]	; (8001e14 <HAL_RCC_ClockConfig+0x1d0>)
 8001df0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001df2:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <HAL_RCC_ClockConfig+0x1d4>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff f842 	bl	8000e80 <HAL_InitTick>

  return HAL_OK;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3710      	adds	r7, #16
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	40023c00 	.word	0x40023c00
 8001e0c:	40023800 	.word	0x40023800
 8001e10:	08004b1c 	.word	0x08004b1c
 8001e14:	20000000 	.word	0x20000000
 8001e18:	20000004 	.word	0x20000004

08001e1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e1c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001e20:	b084      	sub	sp, #16
 8001e22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001e24:	2300      	movs	r3, #0
 8001e26:	607b      	str	r3, [r7, #4]
 8001e28:	2300      	movs	r3, #0
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001e30:	2300      	movs	r3, #0
 8001e32:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e34:	4b67      	ldr	r3, [pc, #412]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f003 030c 	and.w	r3, r3, #12
 8001e3c:	2b08      	cmp	r3, #8
 8001e3e:	d00d      	beq.n	8001e5c <HAL_RCC_GetSysClockFreq+0x40>
 8001e40:	2b08      	cmp	r3, #8
 8001e42:	f200 80bd 	bhi.w	8001fc0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d002      	beq.n	8001e50 <HAL_RCC_GetSysClockFreq+0x34>
 8001e4a:	2b04      	cmp	r3, #4
 8001e4c:	d003      	beq.n	8001e56 <HAL_RCC_GetSysClockFreq+0x3a>
 8001e4e:	e0b7      	b.n	8001fc0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e50:	4b61      	ldr	r3, [pc, #388]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001e52:	60bb      	str	r3, [r7, #8]
      break;
 8001e54:	e0b7      	b.n	8001fc6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e56:	4b61      	ldr	r3, [pc, #388]	; (8001fdc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001e58:	60bb      	str	r3, [r7, #8]
      break;
 8001e5a:	e0b4      	b.n	8001fc6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e5c:	4b5d      	ldr	r3, [pc, #372]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e64:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001e66:	4b5b      	ldr	r3, [pc, #364]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d04d      	beq.n	8001f0e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e72:	4b58      	ldr	r3, [pc, #352]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	099b      	lsrs	r3, r3, #6
 8001e78:	461a      	mov	r2, r3
 8001e7a:	f04f 0300 	mov.w	r3, #0
 8001e7e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001e82:	f04f 0100 	mov.w	r1, #0
 8001e86:	ea02 0800 	and.w	r8, r2, r0
 8001e8a:	ea03 0901 	and.w	r9, r3, r1
 8001e8e:	4640      	mov	r0, r8
 8001e90:	4649      	mov	r1, r9
 8001e92:	f04f 0200 	mov.w	r2, #0
 8001e96:	f04f 0300 	mov.w	r3, #0
 8001e9a:	014b      	lsls	r3, r1, #5
 8001e9c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001ea0:	0142      	lsls	r2, r0, #5
 8001ea2:	4610      	mov	r0, r2
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	ebb0 0008 	subs.w	r0, r0, r8
 8001eaa:	eb61 0109 	sbc.w	r1, r1, r9
 8001eae:	f04f 0200 	mov.w	r2, #0
 8001eb2:	f04f 0300 	mov.w	r3, #0
 8001eb6:	018b      	lsls	r3, r1, #6
 8001eb8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001ebc:	0182      	lsls	r2, r0, #6
 8001ebe:	1a12      	subs	r2, r2, r0
 8001ec0:	eb63 0301 	sbc.w	r3, r3, r1
 8001ec4:	f04f 0000 	mov.w	r0, #0
 8001ec8:	f04f 0100 	mov.w	r1, #0
 8001ecc:	00d9      	lsls	r1, r3, #3
 8001ece:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ed2:	00d0      	lsls	r0, r2, #3
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	eb12 0208 	adds.w	r2, r2, r8
 8001edc:	eb43 0309 	adc.w	r3, r3, r9
 8001ee0:	f04f 0000 	mov.w	r0, #0
 8001ee4:	f04f 0100 	mov.w	r1, #0
 8001ee8:	0259      	lsls	r1, r3, #9
 8001eea:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001eee:	0250      	lsls	r0, r2, #9
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	4610      	mov	r0, r2
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	461a      	mov	r2, r3
 8001efc:	f04f 0300 	mov.w	r3, #0
 8001f00:	f7fe f9ee 	bl	80002e0 <__aeabi_uldivmod>
 8001f04:	4602      	mov	r2, r0
 8001f06:	460b      	mov	r3, r1
 8001f08:	4613      	mov	r3, r2
 8001f0a:	60fb      	str	r3, [r7, #12]
 8001f0c:	e04a      	b.n	8001fa4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f0e:	4b31      	ldr	r3, [pc, #196]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	099b      	lsrs	r3, r3, #6
 8001f14:	461a      	mov	r2, r3
 8001f16:	f04f 0300 	mov.w	r3, #0
 8001f1a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001f1e:	f04f 0100 	mov.w	r1, #0
 8001f22:	ea02 0400 	and.w	r4, r2, r0
 8001f26:	ea03 0501 	and.w	r5, r3, r1
 8001f2a:	4620      	mov	r0, r4
 8001f2c:	4629      	mov	r1, r5
 8001f2e:	f04f 0200 	mov.w	r2, #0
 8001f32:	f04f 0300 	mov.w	r3, #0
 8001f36:	014b      	lsls	r3, r1, #5
 8001f38:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001f3c:	0142      	lsls	r2, r0, #5
 8001f3e:	4610      	mov	r0, r2
 8001f40:	4619      	mov	r1, r3
 8001f42:	1b00      	subs	r0, r0, r4
 8001f44:	eb61 0105 	sbc.w	r1, r1, r5
 8001f48:	f04f 0200 	mov.w	r2, #0
 8001f4c:	f04f 0300 	mov.w	r3, #0
 8001f50:	018b      	lsls	r3, r1, #6
 8001f52:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001f56:	0182      	lsls	r2, r0, #6
 8001f58:	1a12      	subs	r2, r2, r0
 8001f5a:	eb63 0301 	sbc.w	r3, r3, r1
 8001f5e:	f04f 0000 	mov.w	r0, #0
 8001f62:	f04f 0100 	mov.w	r1, #0
 8001f66:	00d9      	lsls	r1, r3, #3
 8001f68:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001f6c:	00d0      	lsls	r0, r2, #3
 8001f6e:	4602      	mov	r2, r0
 8001f70:	460b      	mov	r3, r1
 8001f72:	1912      	adds	r2, r2, r4
 8001f74:	eb45 0303 	adc.w	r3, r5, r3
 8001f78:	f04f 0000 	mov.w	r0, #0
 8001f7c:	f04f 0100 	mov.w	r1, #0
 8001f80:	0299      	lsls	r1, r3, #10
 8001f82:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001f86:	0290      	lsls	r0, r2, #10
 8001f88:	4602      	mov	r2, r0
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	4610      	mov	r0, r2
 8001f8e:	4619      	mov	r1, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	461a      	mov	r2, r3
 8001f94:	f04f 0300 	mov.w	r3, #0
 8001f98:	f7fe f9a2 	bl	80002e0 <__aeabi_uldivmod>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001fa4:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	0c1b      	lsrs	r3, r3, #16
 8001faa:	f003 0303 	and.w	r3, r3, #3
 8001fae:	3301      	adds	r3, #1
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fbc:	60bb      	str	r3, [r7, #8]
      break;
 8001fbe:	e002      	b.n	8001fc6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fc0:	4b05      	ldr	r3, [pc, #20]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001fc2:	60bb      	str	r3, [r7, #8]
      break;
 8001fc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fc6:	68bb      	ldr	r3, [r7, #8]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3710      	adds	r7, #16
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40023800 	.word	0x40023800
 8001fd8:	00f42400 	.word	0x00f42400
 8001fdc:	007a1200 	.word	0x007a1200

08001fe0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fe4:	4b03      	ldr	r3, [pc, #12]	; (8001ff4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	20000000 	.word	0x20000000

08001ff8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ffc:	f7ff fff0 	bl	8001fe0 <HAL_RCC_GetHCLKFreq>
 8002000:	4602      	mov	r2, r0
 8002002:	4b05      	ldr	r3, [pc, #20]	; (8002018 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	0a9b      	lsrs	r3, r3, #10
 8002008:	f003 0307 	and.w	r3, r3, #7
 800200c:	4903      	ldr	r1, [pc, #12]	; (800201c <HAL_RCC_GetPCLK1Freq+0x24>)
 800200e:	5ccb      	ldrb	r3, [r1, r3]
 8002010:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002014:	4618      	mov	r0, r3
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40023800 	.word	0x40023800
 800201c:	08004b2c 	.word	0x08004b2c

08002020 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002024:	f7ff ffdc 	bl	8001fe0 <HAL_RCC_GetHCLKFreq>
 8002028:	4602      	mov	r2, r0
 800202a:	4b05      	ldr	r3, [pc, #20]	; (8002040 <HAL_RCC_GetPCLK2Freq+0x20>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	0b5b      	lsrs	r3, r3, #13
 8002030:	f003 0307 	and.w	r3, r3, #7
 8002034:	4903      	ldr	r1, [pc, #12]	; (8002044 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002036:	5ccb      	ldrb	r3, [r1, r3]
 8002038:	fa22 f303 	lsr.w	r3, r2, r3
}
 800203c:	4618      	mov	r0, r3
 800203e:	bd80      	pop	{r7, pc}
 8002040:	40023800 	.word	0x40023800
 8002044:	08004b2c 	.word	0x08004b2c

08002048 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b088      	sub	sp, #32
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002050:	2300      	movs	r3, #0
 8002052:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002054:	2300      	movs	r3, #0
 8002056:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002058:	2300      	movs	r3, #0
 800205a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800205c:	2300      	movs	r3, #0
 800205e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002060:	2300      	movs	r3, #0
 8002062:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0301 	and.w	r3, r3, #1
 800206c:	2b00      	cmp	r3, #0
 800206e:	d012      	beq.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002070:	4b69      	ldr	r3, [pc, #420]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	4a68      	ldr	r2, [pc, #416]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002076:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800207a:	6093      	str	r3, [r2, #8]
 800207c:	4b66      	ldr	r3, [pc, #408]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800207e:	689a      	ldr	r2, [r3, #8]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002084:	4964      	ldr	r1, [pc, #400]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002086:	4313      	orrs	r3, r2
 8002088:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800208e:	2b00      	cmp	r3, #0
 8002090:	d101      	bne.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002092:	2301      	movs	r3, #1
 8002094:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d017      	beq.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80020a2:	4b5d      	ldr	r3, [pc, #372]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020b0:	4959      	ldr	r1, [pc, #356]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80020c0:	d101      	bne.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80020c2:	2301      	movs	r3, #1
 80020c4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d101      	bne.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80020ce:	2301      	movs	r3, #1
 80020d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d017      	beq.n	800210e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80020de:	4b4e      	ldr	r3, [pc, #312]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ec:	494a      	ldr	r1, [pc, #296]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020fc:	d101      	bne.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80020fe:	2301      	movs	r3, #1
 8002100:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800210a:	2301      	movs	r3, #1
 800210c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800211a:	2301      	movs	r3, #1
 800211c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0320 	and.w	r3, r3, #32
 8002126:	2b00      	cmp	r3, #0
 8002128:	f000 808b 	beq.w	8002242 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800212c:	4b3a      	ldr	r3, [pc, #232]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800212e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002130:	4a39      	ldr	r2, [pc, #228]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002132:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002136:	6413      	str	r3, [r2, #64]	; 0x40
 8002138:	4b37      	ldr	r3, [pc, #220]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800213a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002140:	60bb      	str	r3, [r7, #8]
 8002142:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002144:	4b35      	ldr	r3, [pc, #212]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a34      	ldr	r2, [pc, #208]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800214a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800214e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002150:	f7fe feda 	bl	8000f08 <HAL_GetTick>
 8002154:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002156:	e008      	b.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002158:	f7fe fed6 	bl	8000f08 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b64      	cmp	r3, #100	; 0x64
 8002164:	d901      	bls.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e38f      	b.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800216a:	4b2c      	ldr	r3, [pc, #176]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002172:	2b00      	cmp	r3, #0
 8002174:	d0f0      	beq.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002176:	4b28      	ldr	r3, [pc, #160]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800217a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800217e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d035      	beq.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	429a      	cmp	r2, r3
 8002192:	d02e      	beq.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002194:	4b20      	ldr	r3, [pc, #128]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002198:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800219c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800219e:	4b1e      	ldr	r3, [pc, #120]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a2:	4a1d      	ldr	r2, [pc, #116]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021a8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80021aa:	4b1b      	ldr	r3, [pc, #108]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ae:	4a1a      	ldr	r2, [pc, #104]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021b4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80021b6:	4a18      	ldr	r2, [pc, #96]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80021bc:	4b16      	ldr	r3, [pc, #88]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c0:	f003 0301 	and.w	r3, r3, #1
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d114      	bne.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c8:	f7fe fe9e 	bl	8000f08 <HAL_GetTick>
 80021cc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ce:	e00a      	b.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021d0:	f7fe fe9a 	bl	8000f08 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	f241 3288 	movw	r2, #5000	; 0x1388
 80021de:	4293      	cmp	r3, r2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e351      	b.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021e6:	4b0c      	ldr	r3, [pc, #48]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d0ee      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80021fe:	d111      	bne.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002200:	4b05      	ldr	r3, [pc, #20]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800220c:	4b04      	ldr	r3, [pc, #16]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800220e:	400b      	ands	r3, r1
 8002210:	4901      	ldr	r1, [pc, #4]	; (8002218 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002212:	4313      	orrs	r3, r2
 8002214:	608b      	str	r3, [r1, #8]
 8002216:	e00b      	b.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002218:	40023800 	.word	0x40023800
 800221c:	40007000 	.word	0x40007000
 8002220:	0ffffcff 	.word	0x0ffffcff
 8002224:	4bb3      	ldr	r3, [pc, #716]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	4ab2      	ldr	r2, [pc, #712]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800222a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800222e:	6093      	str	r3, [r2, #8]
 8002230:	4bb0      	ldr	r3, [pc, #704]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002232:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002238:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800223c:	49ad      	ldr	r1, [pc, #692]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800223e:	4313      	orrs	r3, r2
 8002240:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0310 	and.w	r3, r3, #16
 800224a:	2b00      	cmp	r3, #0
 800224c:	d010      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800224e:	4ba9      	ldr	r3, [pc, #676]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002250:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002254:	4aa7      	ldr	r2, [pc, #668]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002256:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800225a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800225e:	4ba5      	ldr	r3, [pc, #660]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002260:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002268:	49a2      	ldr	r1, [pc, #648]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800226a:	4313      	orrs	r3, r2
 800226c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d00a      	beq.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800227c:	4b9d      	ldr	r3, [pc, #628]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800227e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002282:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800228a:	499a      	ldr	r1, [pc, #616]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800228c:	4313      	orrs	r3, r2
 800228e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d00a      	beq.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800229e:	4b95      	ldr	r3, [pc, #596]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022ac:	4991      	ldr	r1, [pc, #580]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00a      	beq.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022c0:	4b8c      	ldr	r3, [pc, #560]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022ce:	4989      	ldr	r1, [pc, #548]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d00a      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80022e2:	4b84      	ldr	r3, [pc, #528]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f0:	4980      	ldr	r1, [pc, #512]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002300:	2b00      	cmp	r3, #0
 8002302:	d00a      	beq.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002304:	4b7b      	ldr	r3, [pc, #492]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800230a:	f023 0203 	bic.w	r2, r3, #3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002312:	4978      	ldr	r1, [pc, #480]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002314:	4313      	orrs	r3, r2
 8002316:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002322:	2b00      	cmp	r3, #0
 8002324:	d00a      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002326:	4b73      	ldr	r3, [pc, #460]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800232c:	f023 020c 	bic.w	r2, r3, #12
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002334:	496f      	ldr	r1, [pc, #444]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002336:	4313      	orrs	r3, r2
 8002338:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002344:	2b00      	cmp	r3, #0
 8002346:	d00a      	beq.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002348:	4b6a      	ldr	r3, [pc, #424]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800234a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800234e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002356:	4967      	ldr	r1, [pc, #412]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002358:	4313      	orrs	r3, r2
 800235a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002366:	2b00      	cmp	r3, #0
 8002368:	d00a      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800236a:	4b62      	ldr	r3, [pc, #392]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800236c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002370:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002378:	495e      	ldr	r1, [pc, #376]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800237a:	4313      	orrs	r3, r2
 800237c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002388:	2b00      	cmp	r3, #0
 800238a:	d00a      	beq.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800238c:	4b59      	ldr	r3, [pc, #356]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800238e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002392:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800239a:	4956      	ldr	r1, [pc, #344]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800239c:	4313      	orrs	r3, r2
 800239e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d00a      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80023ae:	4b51      	ldr	r3, [pc, #324]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023bc:	494d      	ldr	r1, [pc, #308]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d00a      	beq.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80023d0:	4b48      	ldr	r3, [pc, #288]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023de:	4945      	ldr	r1, [pc, #276]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d00a      	beq.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80023f2:	4b40      	ldr	r3, [pc, #256]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002400:	493c      	ldr	r1, [pc, #240]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002402:	4313      	orrs	r3, r2
 8002404:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d00a      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002414:	4b37      	ldr	r3, [pc, #220]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800241a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002422:	4934      	ldr	r1, [pc, #208]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002424:	4313      	orrs	r3, r2
 8002426:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d011      	beq.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002436:	4b2f      	ldr	r3, [pc, #188]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800243c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002444:	492b      	ldr	r1, [pc, #172]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002446:	4313      	orrs	r3, r2
 8002448:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002450:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002454:	d101      	bne.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002456:	2301      	movs	r3, #1
 8002458:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0308 	and.w	r3, r3, #8
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002466:	2301      	movs	r3, #1
 8002468:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d00a      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002476:	4b1f      	ldr	r3, [pc, #124]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800247c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002484:	491b      	ldr	r1, [pc, #108]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002486:	4313      	orrs	r3, r2
 8002488:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d00b      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002498:	4b16      	ldr	r3, [pc, #88]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800249a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800249e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024a8:	4912      	ldr	r1, [pc, #72]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00b      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80024bc:	4b0d      	ldr	r3, [pc, #52]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024cc:	4909      	ldr	r1, [pc, #36]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d00f      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80024e0:	4b04      	ldr	r3, [pc, #16]	; (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024e6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f0:	e002      	b.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80024f2:	bf00      	nop
 80024f4:	40023800 	.word	0x40023800
 80024f8:	4986      	ldr	r1, [pc, #536]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d00b      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800250c:	4b81      	ldr	r3, [pc, #516]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800250e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002512:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800251c:	497d      	ldr	r1, [pc, #500]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800251e:	4313      	orrs	r3, r2
 8002520:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d006      	beq.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002532:	2b00      	cmp	r3, #0
 8002534:	f000 80d6 	beq.w	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002538:	4b76      	ldr	r3, [pc, #472]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a75      	ldr	r2, [pc, #468]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800253e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002542:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002544:	f7fe fce0 	bl	8000f08 <HAL_GetTick>
 8002548:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800254a:	e008      	b.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800254c:	f7fe fcdc 	bl	8000f08 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b64      	cmp	r3, #100	; 0x64
 8002558:	d901      	bls.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e195      	b.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800255e:	4b6d      	ldr	r3, [pc, #436]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1f0      	bne.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b00      	cmp	r3, #0
 8002574:	d021      	beq.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800257a:	2b00      	cmp	r3, #0
 800257c:	d11d      	bne.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800257e:	4b65      	ldr	r3, [pc, #404]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002580:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002584:	0c1b      	lsrs	r3, r3, #16
 8002586:	f003 0303 	and.w	r3, r3, #3
 800258a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800258c:	4b61      	ldr	r3, [pc, #388]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800258e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002592:	0e1b      	lsrs	r3, r3, #24
 8002594:	f003 030f 	and.w	r3, r3, #15
 8002598:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	019a      	lsls	r2, r3, #6
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	041b      	lsls	r3, r3, #16
 80025a4:	431a      	orrs	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	061b      	lsls	r3, r3, #24
 80025aa:	431a      	orrs	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	071b      	lsls	r3, r3, #28
 80025b2:	4958      	ldr	r1, [pc, #352]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d004      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025ce:	d00a      	beq.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d02e      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025e4:	d129      	bne.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80025e6:	4b4b      	ldr	r3, [pc, #300]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025ec:	0c1b      	lsrs	r3, r3, #16
 80025ee:	f003 0303 	and.w	r3, r3, #3
 80025f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80025f4:	4b47      	ldr	r3, [pc, #284]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025fa:	0f1b      	lsrs	r3, r3, #28
 80025fc:	f003 0307 	and.w	r3, r3, #7
 8002600:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	019a      	lsls	r2, r3, #6
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	041b      	lsls	r3, r3, #16
 800260c:	431a      	orrs	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	061b      	lsls	r3, r3, #24
 8002614:	431a      	orrs	r2, r3
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	071b      	lsls	r3, r3, #28
 800261a:	493e      	ldr	r1, [pc, #248]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800261c:	4313      	orrs	r3, r2
 800261e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002622:	4b3c      	ldr	r3, [pc, #240]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002624:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002628:	f023 021f 	bic.w	r2, r3, #31
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002630:	3b01      	subs	r3, #1
 8002632:	4938      	ldr	r1, [pc, #224]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002634:	4313      	orrs	r3, r2
 8002636:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d01d      	beq.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002646:	4b33      	ldr	r3, [pc, #204]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002648:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800264c:	0e1b      	lsrs	r3, r3, #24
 800264e:	f003 030f 	and.w	r3, r3, #15
 8002652:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002654:	4b2f      	ldr	r3, [pc, #188]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002656:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800265a:	0f1b      	lsrs	r3, r3, #28
 800265c:	f003 0307 	and.w	r3, r3, #7
 8002660:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	019a      	lsls	r2, r3, #6
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	041b      	lsls	r3, r3, #16
 800266e:	431a      	orrs	r2, r3
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	061b      	lsls	r3, r3, #24
 8002674:	431a      	orrs	r2, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	071b      	lsls	r3, r3, #28
 800267a:	4926      	ldr	r1, [pc, #152]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800267c:	4313      	orrs	r3, r2
 800267e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d011      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	019a      	lsls	r2, r3, #6
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	041b      	lsls	r3, r3, #16
 800269a:	431a      	orrs	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	061b      	lsls	r3, r3, #24
 80026a2:	431a      	orrs	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	071b      	lsls	r3, r3, #28
 80026aa:	491a      	ldr	r1, [pc, #104]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80026b2:	4b18      	ldr	r3, [pc, #96]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a17      	ldr	r2, [pc, #92]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80026bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026be:	f7fe fc23 	bl	8000f08 <HAL_GetTick>
 80026c2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80026c4:	e008      	b.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80026c6:	f7fe fc1f 	bl	8000f08 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b64      	cmp	r3, #100	; 0x64
 80026d2:	d901      	bls.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e0d8      	b.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80026d8:	4b0e      	ldr	r3, [pc, #56]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d0f0      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	f040 80ce 	bne.w	8002888 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80026ec:	4b09      	ldr	r3, [pc, #36]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a08      	ldr	r2, [pc, #32]	; (8002714 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026f8:	f7fe fc06 	bl	8000f08 <HAL_GetTick>
 80026fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80026fe:	e00b      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002700:	f7fe fc02 	bl	8000f08 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b64      	cmp	r3, #100	; 0x64
 800270c:	d904      	bls.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e0bb      	b.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002712:	bf00      	nop
 8002714:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002718:	4b5e      	ldr	r3, [pc, #376]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002720:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002724:	d0ec      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d003      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002736:	2b00      	cmp	r3, #0
 8002738:	d009      	beq.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002742:	2b00      	cmp	r3, #0
 8002744:	d02e      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274a:	2b00      	cmp	r3, #0
 800274c:	d12a      	bne.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800274e:	4b51      	ldr	r3, [pc, #324]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002754:	0c1b      	lsrs	r3, r3, #16
 8002756:	f003 0303 	and.w	r3, r3, #3
 800275a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800275c:	4b4d      	ldr	r3, [pc, #308]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800275e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002762:	0f1b      	lsrs	r3, r3, #28
 8002764:	f003 0307 	and.w	r3, r3, #7
 8002768:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	019a      	lsls	r2, r3, #6
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	041b      	lsls	r3, r3, #16
 8002774:	431a      	orrs	r2, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	061b      	lsls	r3, r3, #24
 800277c:	431a      	orrs	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	071b      	lsls	r3, r3, #28
 8002782:	4944      	ldr	r1, [pc, #272]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002784:	4313      	orrs	r3, r2
 8002786:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800278a:	4b42      	ldr	r3, [pc, #264]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800278c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002790:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002798:	3b01      	subs	r3, #1
 800279a:	021b      	lsls	r3, r3, #8
 800279c:	493d      	ldr	r1, [pc, #244]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d022      	beq.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027b8:	d11d      	bne.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80027ba:	4b36      	ldr	r3, [pc, #216]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c0:	0e1b      	lsrs	r3, r3, #24
 80027c2:	f003 030f 	and.w	r3, r3, #15
 80027c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80027c8:	4b32      	ldr	r3, [pc, #200]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ce:	0f1b      	lsrs	r3, r3, #28
 80027d0:	f003 0307 	and.w	r3, r3, #7
 80027d4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	019a      	lsls	r2, r3, #6
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a1b      	ldr	r3, [r3, #32]
 80027e0:	041b      	lsls	r3, r3, #16
 80027e2:	431a      	orrs	r2, r3
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	061b      	lsls	r3, r3, #24
 80027e8:	431a      	orrs	r2, r3
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	071b      	lsls	r3, r3, #28
 80027ee:	4929      	ldr	r1, [pc, #164]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0308 	and.w	r3, r3, #8
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d028      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002802:	4b24      	ldr	r3, [pc, #144]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002808:	0e1b      	lsrs	r3, r3, #24
 800280a:	f003 030f 	and.w	r3, r3, #15
 800280e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002810:	4b20      	ldr	r3, [pc, #128]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002816:	0c1b      	lsrs	r3, r3, #16
 8002818:	f003 0303 	and.w	r3, r3, #3
 800281c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	019a      	lsls	r2, r3, #6
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	041b      	lsls	r3, r3, #16
 8002828:	431a      	orrs	r2, r3
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	061b      	lsls	r3, r3, #24
 800282e:	431a      	orrs	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	69db      	ldr	r3, [r3, #28]
 8002834:	071b      	lsls	r3, r3, #28
 8002836:	4917      	ldr	r1, [pc, #92]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002838:	4313      	orrs	r3, r2
 800283a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800283e:	4b15      	ldr	r3, [pc, #84]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002840:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002844:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284c:	4911      	ldr	r1, [pc, #68]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800284e:	4313      	orrs	r3, r2
 8002850:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002854:	4b0f      	ldr	r3, [pc, #60]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a0e      	ldr	r2, [pc, #56]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800285a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800285e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002860:	f7fe fb52 	bl	8000f08 <HAL_GetTick>
 8002864:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002866:	e008      	b.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002868:	f7fe fb4e 	bl	8000f08 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b64      	cmp	r3, #100	; 0x64
 8002874:	d901      	bls.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e007      	b.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800287a:	4b06      	ldr	r3, [pc, #24]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002882:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002886:	d1ef      	bne.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3720      	adds	r7, #32
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	40023800 	.word	0x40023800

08002898 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e040      	b.n	800292c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d106      	bne.n	80028c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f7fe fa4a 	bl	8000d54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2224      	movs	r2, #36	; 0x24
 80028c4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f022 0201 	bic.w	r2, r2, #1
 80028d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 fada 	bl	8002e90 <UART_SetConfig>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d101      	bne.n	80028e6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e022      	b.n	800292c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d002      	beq.n	80028f4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f000 fd30 	bl	8003354 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	685a      	ldr	r2, [r3, #4]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002902:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689a      	ldr	r2, [r3, #8]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002912:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f042 0201 	orr.w	r2, r2, #1
 8002922:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f000 fdb7 	bl	8003498 <UART_CheckIdleState>
 800292a:	4603      	mov	r3, r0
}
 800292c:	4618      	mov	r0, r3
 800292e:	3708      	adds	r7, #8
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	4613      	mov	r3, r2
 8002940:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002946:	2b20      	cmp	r3, #32
 8002948:	d145      	bne.n	80029d6 <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d002      	beq.n	8002956 <HAL_UART_Transmit_IT+0x22>
 8002950:	88fb      	ldrh	r3, [r7, #6]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e03e      	b.n	80029d8 <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002960:	2b01      	cmp	r3, #1
 8002962:	d101      	bne.n	8002968 <HAL_UART_Transmit_IT+0x34>
 8002964:	2302      	movs	r3, #2
 8002966:	e037      	b.n	80029d8 <HAL_UART_Transmit_IT+0xa4>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	68ba      	ldr	r2, [r7, #8]
 8002974:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	88fa      	ldrh	r2, [r7, #6]
 800297a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	88fa      	ldrh	r2, [r7, #6]
 8002982:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2200      	movs	r2, #0
 800298a:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2200      	movs	r2, #0
 8002990:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2221      	movs	r2, #33	; 0x21
 8002998:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029a2:	d107      	bne.n	80029b4 <HAL_UART_Transmit_IT+0x80>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d103      	bne.n	80029b4 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	4a0d      	ldr	r2, [pc, #52]	; (80029e4 <HAL_UART_Transmit_IT+0xb0>)
 80029b0:	669a      	str	r2, [r3, #104]	; 0x68
 80029b2:	e002      	b.n	80029ba <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	4a0c      	ldr	r2, [pc, #48]	; (80029e8 <HAL_UART_Transmit_IT+0xb4>)
 80029b8:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80029d0:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80029d2:	2300      	movs	r3, #0
 80029d4:	e000      	b.n	80029d8 <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 80029d6:	2302      	movs	r3, #2
  }
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3714      	adds	r7, #20
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr
 80029e4:	08003831 	.word	0x08003831
 80029e8:	080037bf 	.word	0x080037bf

080029ec <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	4613      	mov	r3, r2
 80029f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029fe:	2b20      	cmp	r3, #32
 8002a00:	d12c      	bne.n	8002a5c <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d002      	beq.n	8002a0e <HAL_UART_Receive_IT+0x22>
 8002a08:	88fb      	ldrh	r3, [r7, #6]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d101      	bne.n	8002a12 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e025      	b.n	8002a5e <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d101      	bne.n	8002a20 <HAL_UART_Receive_IT+0x34>
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	e01e      	b.n	8002a5e <HAL_UART_Receive_IT+0x72>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d007      	beq.n	8002a4c <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002a4a:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002a4c:	88fb      	ldrh	r3, [r7, #6]
 8002a4e:	461a      	mov	r2, r3
 8002a50:	68b9      	ldr	r1, [r7, #8]
 8002a52:	68f8      	ldr	r0, [r7, #12]
 8002a54:	f000 fde6 	bl	8003624 <UART_Start_Receive_IT>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	e000      	b.n	8002a5e <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002a5c:	2302      	movs	r3, #2
  }
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3710      	adds	r7, #16
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
	...

08002a68 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b088      	sub	sp, #32
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	69db      	ldr	r3, [r3, #28]
 8002a76:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002a88:	69fa      	ldr	r2, [r7, #28]
 8002a8a:	f640 030f 	movw	r3, #2063	; 0x80f
 8002a8e:	4013      	ands	r3, r2
 8002a90:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d10d      	bne.n	8002ab4 <HAL_UART_IRQHandler+0x4c>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U) && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	f003 0320 	and.w	r3, r3, #32
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d008      	beq.n	8002ab4 <HAL_UART_IRQHandler+0x4c>
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	f003 0320 	and.w	r3, r3, #32
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d003      	beq.n	8002ab4 <HAL_UART_IRQHandler+0x4c>
    {
    	UART_RxISR_8BIT(huart);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f000 ff16 	bl	80038de <UART_RxISR_8BIT>
/*      if (huart->RxISR != NULL)
      {
        huart->RxISR(huart);
      }
*/      return;
 8002ab2:	e1c9      	b.n	8002e48 <HAL_UART_IRQHandler+0x3e0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f000 80de 	beq.w	8002c78 <HAL_UART_IRQHandler+0x210>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d105      	bne.n	8002ad2 <HAL_UART_IRQHandler+0x6a>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	4ba3      	ldr	r3, [pc, #652]	; (8002d58 <HAL_UART_IRQHandler+0x2f0>)
 8002aca:	4013      	ands	r3, r2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f000 80d3 	beq.w	8002c78 <HAL_UART_IRQHandler+0x210>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	f003 0301 	and.w	r3, r3, #1
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d010      	beq.n	8002afe <HAL_UART_IRQHandler+0x96>
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d00b      	beq.n	8002afe <HAL_UART_IRQHandler+0x96>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2201      	movs	r2, #1
 8002aec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002af4:	f043 0201 	orr.w	r2, r3, #1
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d010      	beq.n	8002b2a <HAL_UART_IRQHandler+0xc2>
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00b      	beq.n	8002b2a <HAL_UART_IRQHandler+0xc2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2202      	movs	r2, #2
 8002b18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b20:	f043 0204 	orr.w	r2, r3, #4
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	f003 0304 	and.w	r3, r3, #4
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d010      	beq.n	8002b56 <HAL_UART_IRQHandler+0xee>
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00b      	beq.n	8002b56 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2204      	movs	r2, #4
 8002b44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b4c:	f043 0202 	orr.w	r2, r3, #2
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U) && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	f003 0308 	and.w	r3, r3, #8
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d015      	beq.n	8002b8c <HAL_UART_IRQHandler+0x124>
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	f003 0320 	and.w	r3, r3, #32
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d104      	bne.n	8002b74 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	f003 0301 	and.w	r3, r3, #1
    if (((isrflags & USART_ISR_ORE) != 0U) && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d00b      	beq.n	8002b8c <HAL_UART_IRQHandler+0x124>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2208      	movs	r2, #8
 8002b7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b82:	f043 0208 	orr.w	r2, r3, #8
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d011      	beq.n	8002bba <HAL_UART_IRQHandler+0x152>
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d00c      	beq.n	8002bba <HAL_UART_IRQHandler+0x152>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ba8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bb0:	f043 0220 	orr.w	r2, r3, #32
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f000 813a 	beq.w	8002e3a <HAL_UART_IRQHandler+0x3d2>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U) && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	f003 0320 	and.w	r3, r3, #32
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d007      	beq.n	8002be0 <HAL_UART_IRQHandler+0x178>
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	f003 0320 	and.w	r3, r3, #32
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d002      	beq.n	8002be0 <HAL_UART_IRQHandler+0x178>
      {
    	  UART_RxISR_8BIT(huart); /*
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 fe7f 	bl	80038de <UART_RxISR_8BIT>
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002be6:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bf2:	2b40      	cmp	r3, #64	; 0x40
 8002bf4:	d004      	beq.n	8002c00 <HAL_UART_IRQHandler+0x198>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d031      	beq.n	8002c64 <HAL_UART_IRQHandler+0x1fc>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f000 fd97 	bl	8003734 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c10:	2b40      	cmp	r3, #64	; 0x40
 8002c12:	d123      	bne.n	8002c5c <HAL_UART_IRQHandler+0x1f4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	689a      	ldr	r2, [r3, #8]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c22:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d013      	beq.n	8002c54 <HAL_UART_IRQHandler+0x1ec>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c30:	4a4a      	ldr	r2, [pc, #296]	; (8002d5c <HAL_UART_IRQHandler+0x2f4>)
 8002c32:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7fe faf2 	bl	8001222 <HAL_DMA_Abort_IT>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d017      	beq.n	8002c74 <HAL_UART_IRQHandler+0x20c>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8002c4e:	4610      	mov	r0, r2
 8002c50:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c52:	e00f      	b.n	8002c74 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f7fe f8c9 	bl	8000dec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c5a:	e00b      	b.n	8002c74 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f7fe f8c5 	bl	8000dec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c62:	e007      	b.n	8002c74 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f7fe f8c1 	bl	8000dec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8002c72:	e0e2      	b.n	8002e3a <HAL_UART_IRQHandler+0x3d2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c74:	bf00      	nop
    return;
 8002c76:	e0e0      	b.n	8002e3a <HAL_UART_IRQHandler+0x3d2>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE) && ((isrflags & USART_ISR_IDLE) != 0U)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	f040 80a8 	bne.w	8002dd2 <HAL_UART_IRQHandler+0x36a>
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	f003 0310 	and.w	r3, r3, #16
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	f000 80a2 	beq.w	8002dd2 <HAL_UART_IRQHandler+0x36a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	f003 0310 	and.w	r3, r3, #16
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f000 809c 	beq.w	8002dd2 <HAL_UART_IRQHandler+0x36a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2210      	movs	r2, #16
 8002ca0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cac:	2b40      	cmp	r3, #64	; 0x40
 8002cae:	d157      	bne.n	8002d60 <HAL_UART_IRQHandler+0x2f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8002cba:	893b      	ldrh	r3, [r7, #8]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f000 80be 	beq.w	8002e3e <HAL_UART_IRQHandler+0x3d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002cc8:	893a      	ldrh	r2, [r7, #8]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	f080 80b7 	bcs.w	8002e3e <HAL_UART_IRQHandler+0x3d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	893a      	ldrh	r2, [r7, #8]
 8002cd4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cdc:	69db      	ldr	r3, [r3, #28]
 8002cde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ce2:	d02a      	beq.n	8002d3a <HAL_UART_IRQHandler+0x2d2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cf2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689a      	ldr	r2, [r3, #8]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f022 0201 	bic.w	r2, r2, #1
 8002d02:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	689a      	ldr	r2, [r3, #8]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d12:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2220      	movs	r2, #32
 8002d18:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f022 0210 	bic.w	r2, r2, #16
 8002d2e:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7fe fa04 	bl	8001142 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f000 f888 	bl	8002e64 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002d54:	e073      	b.n	8002e3e <HAL_UART_IRQHandler+0x3d6>
 8002d56:	bf00      	nop
 8002d58:	04000120 	.word	0x04000120
 8002d5c:	08003793 	.word	0x08003793
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d061      	beq.n	8002e42 <HAL_UART_IRQHandler+0x3da>
          && (nb_rx_data > 0U))
 8002d7e:	897b      	ldrh	r3, [r7, #10]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d05e      	beq.n	8002e42 <HAL_UART_IRQHandler+0x3da>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002d92:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	689a      	ldr	r2, [r3, #8]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f022 0201 	bic.w	r2, r2, #1
 8002da2:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2220      	movs	r2, #32
 8002da8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f022 0210 	bic.w	r2, r2, #16
 8002dc4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002dc6:	897b      	ldrh	r3, [r7, #10]
 8002dc8:	4619      	mov	r1, r3
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 f84a 	bl	8002e64 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002dd0:	e037      	b.n	8002e42 <HAL_UART_IRQHandler+0x3da>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d00d      	beq.n	8002df8 <HAL_UART_IRQHandler+0x390>
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d008      	beq.n	8002df8 <HAL_UART_IRQHandler+0x390>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002dee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f000 f843 	bl	8002e7c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002df6:	e027      	b.n	8002e48 <HAL_UART_IRQHandler+0x3e0>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00d      	beq.n	8002e1e <HAL_UART_IRQHandler+0x3b6>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d008      	beq.n	8002e1e <HAL_UART_IRQHandler+0x3b6>
  {
    if (huart->TxISR != NULL)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d018      	beq.n	8002e46 <HAL_UART_IRQHandler+0x3de>
    {
      huart->TxISR(huart);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	4798      	blx	r3
    }
    return;
 8002e1c:	e013      	b.n	8002e46 <HAL_UART_IRQHandler+0x3de>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d00f      	beq.n	8002e48 <HAL_UART_IRQHandler+0x3e0>
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00a      	beq.n	8002e48 <HAL_UART_IRQHandler+0x3e0>
  {
    UART_EndTransmit_IT(huart);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 fd3a 	bl	80038ac <UART_EndTransmit_IT>
    return;
 8002e38:	e006      	b.n	8002e48 <HAL_UART_IRQHandler+0x3e0>
    return;
 8002e3a:	bf00      	nop
 8002e3c:	e004      	b.n	8002e48 <HAL_UART_IRQHandler+0x3e0>
      return;
 8002e3e:	bf00      	nop
 8002e40:	e002      	b.n	8002e48 <HAL_UART_IRQHandler+0x3e0>
      return;
 8002e42:	bf00      	nop
 8002e44:	e000      	b.n	8002e48 <HAL_UART_IRQHandler+0x3e0>
    return;
 8002e46:	bf00      	nop
  }

}
 8002e48:	3720      	adds	r7, #32
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop

08002e50 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b088      	sub	sp, #32
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689a      	ldr	r2, [r3, #8]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	431a      	orrs	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	431a      	orrs	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	69db      	ldr	r3, [r3, #28]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	4ba7      	ldr	r3, [pc, #668]	; (8003158 <UART_SetConfig+0x2c8>)
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	6812      	ldr	r2, [r2, #0]
 8002ec2:	6979      	ldr	r1, [r7, #20]
 8002ec4:	430b      	orrs	r3, r1
 8002ec6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	68da      	ldr	r2, [r3, #12]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	430a      	orrs	r2, r1
 8002edc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
 8002ee8:	697a      	ldr	r2, [r7, #20]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	697a      	ldr	r2, [r7, #20]
 8002efe:	430a      	orrs	r2, r1
 8002f00:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a95      	ldr	r2, [pc, #596]	; (800315c <UART_SetConfig+0x2cc>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d120      	bne.n	8002f4e <UART_SetConfig+0xbe>
 8002f0c:	4b94      	ldr	r3, [pc, #592]	; (8003160 <UART_SetConfig+0x2d0>)
 8002f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f12:	f003 0303 	and.w	r3, r3, #3
 8002f16:	2b03      	cmp	r3, #3
 8002f18:	d816      	bhi.n	8002f48 <UART_SetConfig+0xb8>
 8002f1a:	a201      	add	r2, pc, #4	; (adr r2, 8002f20 <UART_SetConfig+0x90>)
 8002f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f20:	08002f31 	.word	0x08002f31
 8002f24:	08002f3d 	.word	0x08002f3d
 8002f28:	08002f37 	.word	0x08002f37
 8002f2c:	08002f43 	.word	0x08002f43
 8002f30:	2301      	movs	r3, #1
 8002f32:	77fb      	strb	r3, [r7, #31]
 8002f34:	e14f      	b.n	80031d6 <UART_SetConfig+0x346>
 8002f36:	2302      	movs	r3, #2
 8002f38:	77fb      	strb	r3, [r7, #31]
 8002f3a:	e14c      	b.n	80031d6 <UART_SetConfig+0x346>
 8002f3c:	2304      	movs	r3, #4
 8002f3e:	77fb      	strb	r3, [r7, #31]
 8002f40:	e149      	b.n	80031d6 <UART_SetConfig+0x346>
 8002f42:	2308      	movs	r3, #8
 8002f44:	77fb      	strb	r3, [r7, #31]
 8002f46:	e146      	b.n	80031d6 <UART_SetConfig+0x346>
 8002f48:	2310      	movs	r3, #16
 8002f4a:	77fb      	strb	r3, [r7, #31]
 8002f4c:	e143      	b.n	80031d6 <UART_SetConfig+0x346>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a84      	ldr	r2, [pc, #528]	; (8003164 <UART_SetConfig+0x2d4>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d132      	bne.n	8002fbe <UART_SetConfig+0x12e>
 8002f58:	4b81      	ldr	r3, [pc, #516]	; (8003160 <UART_SetConfig+0x2d0>)
 8002f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f5e:	f003 030c 	and.w	r3, r3, #12
 8002f62:	2b0c      	cmp	r3, #12
 8002f64:	d828      	bhi.n	8002fb8 <UART_SetConfig+0x128>
 8002f66:	a201      	add	r2, pc, #4	; (adr r2, 8002f6c <UART_SetConfig+0xdc>)
 8002f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f6c:	08002fa1 	.word	0x08002fa1
 8002f70:	08002fb9 	.word	0x08002fb9
 8002f74:	08002fb9 	.word	0x08002fb9
 8002f78:	08002fb9 	.word	0x08002fb9
 8002f7c:	08002fad 	.word	0x08002fad
 8002f80:	08002fb9 	.word	0x08002fb9
 8002f84:	08002fb9 	.word	0x08002fb9
 8002f88:	08002fb9 	.word	0x08002fb9
 8002f8c:	08002fa7 	.word	0x08002fa7
 8002f90:	08002fb9 	.word	0x08002fb9
 8002f94:	08002fb9 	.word	0x08002fb9
 8002f98:	08002fb9 	.word	0x08002fb9
 8002f9c:	08002fb3 	.word	0x08002fb3
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	77fb      	strb	r3, [r7, #31]
 8002fa4:	e117      	b.n	80031d6 <UART_SetConfig+0x346>
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	77fb      	strb	r3, [r7, #31]
 8002faa:	e114      	b.n	80031d6 <UART_SetConfig+0x346>
 8002fac:	2304      	movs	r3, #4
 8002fae:	77fb      	strb	r3, [r7, #31]
 8002fb0:	e111      	b.n	80031d6 <UART_SetConfig+0x346>
 8002fb2:	2308      	movs	r3, #8
 8002fb4:	77fb      	strb	r3, [r7, #31]
 8002fb6:	e10e      	b.n	80031d6 <UART_SetConfig+0x346>
 8002fb8:	2310      	movs	r3, #16
 8002fba:	77fb      	strb	r3, [r7, #31]
 8002fbc:	e10b      	b.n	80031d6 <UART_SetConfig+0x346>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a69      	ldr	r2, [pc, #420]	; (8003168 <UART_SetConfig+0x2d8>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d120      	bne.n	800300a <UART_SetConfig+0x17a>
 8002fc8:	4b65      	ldr	r3, [pc, #404]	; (8003160 <UART_SetConfig+0x2d0>)
 8002fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002fd2:	2b30      	cmp	r3, #48	; 0x30
 8002fd4:	d013      	beq.n	8002ffe <UART_SetConfig+0x16e>
 8002fd6:	2b30      	cmp	r3, #48	; 0x30
 8002fd8:	d814      	bhi.n	8003004 <UART_SetConfig+0x174>
 8002fda:	2b20      	cmp	r3, #32
 8002fdc:	d009      	beq.n	8002ff2 <UART_SetConfig+0x162>
 8002fde:	2b20      	cmp	r3, #32
 8002fe0:	d810      	bhi.n	8003004 <UART_SetConfig+0x174>
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d002      	beq.n	8002fec <UART_SetConfig+0x15c>
 8002fe6:	2b10      	cmp	r3, #16
 8002fe8:	d006      	beq.n	8002ff8 <UART_SetConfig+0x168>
 8002fea:	e00b      	b.n	8003004 <UART_SetConfig+0x174>
 8002fec:	2300      	movs	r3, #0
 8002fee:	77fb      	strb	r3, [r7, #31]
 8002ff0:	e0f1      	b.n	80031d6 <UART_SetConfig+0x346>
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	77fb      	strb	r3, [r7, #31]
 8002ff6:	e0ee      	b.n	80031d6 <UART_SetConfig+0x346>
 8002ff8:	2304      	movs	r3, #4
 8002ffa:	77fb      	strb	r3, [r7, #31]
 8002ffc:	e0eb      	b.n	80031d6 <UART_SetConfig+0x346>
 8002ffe:	2308      	movs	r3, #8
 8003000:	77fb      	strb	r3, [r7, #31]
 8003002:	e0e8      	b.n	80031d6 <UART_SetConfig+0x346>
 8003004:	2310      	movs	r3, #16
 8003006:	77fb      	strb	r3, [r7, #31]
 8003008:	e0e5      	b.n	80031d6 <UART_SetConfig+0x346>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a57      	ldr	r2, [pc, #348]	; (800316c <UART_SetConfig+0x2dc>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d120      	bne.n	8003056 <UART_SetConfig+0x1c6>
 8003014:	4b52      	ldr	r3, [pc, #328]	; (8003160 <UART_SetConfig+0x2d0>)
 8003016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800301a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800301e:	2bc0      	cmp	r3, #192	; 0xc0
 8003020:	d013      	beq.n	800304a <UART_SetConfig+0x1ba>
 8003022:	2bc0      	cmp	r3, #192	; 0xc0
 8003024:	d814      	bhi.n	8003050 <UART_SetConfig+0x1c0>
 8003026:	2b80      	cmp	r3, #128	; 0x80
 8003028:	d009      	beq.n	800303e <UART_SetConfig+0x1ae>
 800302a:	2b80      	cmp	r3, #128	; 0x80
 800302c:	d810      	bhi.n	8003050 <UART_SetConfig+0x1c0>
 800302e:	2b00      	cmp	r3, #0
 8003030:	d002      	beq.n	8003038 <UART_SetConfig+0x1a8>
 8003032:	2b40      	cmp	r3, #64	; 0x40
 8003034:	d006      	beq.n	8003044 <UART_SetConfig+0x1b4>
 8003036:	e00b      	b.n	8003050 <UART_SetConfig+0x1c0>
 8003038:	2300      	movs	r3, #0
 800303a:	77fb      	strb	r3, [r7, #31]
 800303c:	e0cb      	b.n	80031d6 <UART_SetConfig+0x346>
 800303e:	2302      	movs	r3, #2
 8003040:	77fb      	strb	r3, [r7, #31]
 8003042:	e0c8      	b.n	80031d6 <UART_SetConfig+0x346>
 8003044:	2304      	movs	r3, #4
 8003046:	77fb      	strb	r3, [r7, #31]
 8003048:	e0c5      	b.n	80031d6 <UART_SetConfig+0x346>
 800304a:	2308      	movs	r3, #8
 800304c:	77fb      	strb	r3, [r7, #31]
 800304e:	e0c2      	b.n	80031d6 <UART_SetConfig+0x346>
 8003050:	2310      	movs	r3, #16
 8003052:	77fb      	strb	r3, [r7, #31]
 8003054:	e0bf      	b.n	80031d6 <UART_SetConfig+0x346>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a45      	ldr	r2, [pc, #276]	; (8003170 <UART_SetConfig+0x2e0>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d125      	bne.n	80030ac <UART_SetConfig+0x21c>
 8003060:	4b3f      	ldr	r3, [pc, #252]	; (8003160 <UART_SetConfig+0x2d0>)
 8003062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003066:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800306a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800306e:	d017      	beq.n	80030a0 <UART_SetConfig+0x210>
 8003070:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003074:	d817      	bhi.n	80030a6 <UART_SetConfig+0x216>
 8003076:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800307a:	d00b      	beq.n	8003094 <UART_SetConfig+0x204>
 800307c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003080:	d811      	bhi.n	80030a6 <UART_SetConfig+0x216>
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <UART_SetConfig+0x1fe>
 8003086:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800308a:	d006      	beq.n	800309a <UART_SetConfig+0x20a>
 800308c:	e00b      	b.n	80030a6 <UART_SetConfig+0x216>
 800308e:	2300      	movs	r3, #0
 8003090:	77fb      	strb	r3, [r7, #31]
 8003092:	e0a0      	b.n	80031d6 <UART_SetConfig+0x346>
 8003094:	2302      	movs	r3, #2
 8003096:	77fb      	strb	r3, [r7, #31]
 8003098:	e09d      	b.n	80031d6 <UART_SetConfig+0x346>
 800309a:	2304      	movs	r3, #4
 800309c:	77fb      	strb	r3, [r7, #31]
 800309e:	e09a      	b.n	80031d6 <UART_SetConfig+0x346>
 80030a0:	2308      	movs	r3, #8
 80030a2:	77fb      	strb	r3, [r7, #31]
 80030a4:	e097      	b.n	80031d6 <UART_SetConfig+0x346>
 80030a6:	2310      	movs	r3, #16
 80030a8:	77fb      	strb	r3, [r7, #31]
 80030aa:	e094      	b.n	80031d6 <UART_SetConfig+0x346>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a30      	ldr	r2, [pc, #192]	; (8003174 <UART_SetConfig+0x2e4>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d125      	bne.n	8003102 <UART_SetConfig+0x272>
 80030b6:	4b2a      	ldr	r3, [pc, #168]	; (8003160 <UART_SetConfig+0x2d0>)
 80030b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80030c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030c4:	d017      	beq.n	80030f6 <UART_SetConfig+0x266>
 80030c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030ca:	d817      	bhi.n	80030fc <UART_SetConfig+0x26c>
 80030cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030d0:	d00b      	beq.n	80030ea <UART_SetConfig+0x25a>
 80030d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030d6:	d811      	bhi.n	80030fc <UART_SetConfig+0x26c>
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d003      	beq.n	80030e4 <UART_SetConfig+0x254>
 80030dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030e0:	d006      	beq.n	80030f0 <UART_SetConfig+0x260>
 80030e2:	e00b      	b.n	80030fc <UART_SetConfig+0x26c>
 80030e4:	2301      	movs	r3, #1
 80030e6:	77fb      	strb	r3, [r7, #31]
 80030e8:	e075      	b.n	80031d6 <UART_SetConfig+0x346>
 80030ea:	2302      	movs	r3, #2
 80030ec:	77fb      	strb	r3, [r7, #31]
 80030ee:	e072      	b.n	80031d6 <UART_SetConfig+0x346>
 80030f0:	2304      	movs	r3, #4
 80030f2:	77fb      	strb	r3, [r7, #31]
 80030f4:	e06f      	b.n	80031d6 <UART_SetConfig+0x346>
 80030f6:	2308      	movs	r3, #8
 80030f8:	77fb      	strb	r3, [r7, #31]
 80030fa:	e06c      	b.n	80031d6 <UART_SetConfig+0x346>
 80030fc:	2310      	movs	r3, #16
 80030fe:	77fb      	strb	r3, [r7, #31]
 8003100:	e069      	b.n	80031d6 <UART_SetConfig+0x346>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a1c      	ldr	r2, [pc, #112]	; (8003178 <UART_SetConfig+0x2e8>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d137      	bne.n	800317c <UART_SetConfig+0x2ec>
 800310c:	4b14      	ldr	r3, [pc, #80]	; (8003160 <UART_SetConfig+0x2d0>)
 800310e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003112:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003116:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800311a:	d017      	beq.n	800314c <UART_SetConfig+0x2bc>
 800311c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003120:	d817      	bhi.n	8003152 <UART_SetConfig+0x2c2>
 8003122:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003126:	d00b      	beq.n	8003140 <UART_SetConfig+0x2b0>
 8003128:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800312c:	d811      	bhi.n	8003152 <UART_SetConfig+0x2c2>
 800312e:	2b00      	cmp	r3, #0
 8003130:	d003      	beq.n	800313a <UART_SetConfig+0x2aa>
 8003132:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003136:	d006      	beq.n	8003146 <UART_SetConfig+0x2b6>
 8003138:	e00b      	b.n	8003152 <UART_SetConfig+0x2c2>
 800313a:	2300      	movs	r3, #0
 800313c:	77fb      	strb	r3, [r7, #31]
 800313e:	e04a      	b.n	80031d6 <UART_SetConfig+0x346>
 8003140:	2302      	movs	r3, #2
 8003142:	77fb      	strb	r3, [r7, #31]
 8003144:	e047      	b.n	80031d6 <UART_SetConfig+0x346>
 8003146:	2304      	movs	r3, #4
 8003148:	77fb      	strb	r3, [r7, #31]
 800314a:	e044      	b.n	80031d6 <UART_SetConfig+0x346>
 800314c:	2308      	movs	r3, #8
 800314e:	77fb      	strb	r3, [r7, #31]
 8003150:	e041      	b.n	80031d6 <UART_SetConfig+0x346>
 8003152:	2310      	movs	r3, #16
 8003154:	77fb      	strb	r3, [r7, #31]
 8003156:	e03e      	b.n	80031d6 <UART_SetConfig+0x346>
 8003158:	efff69f3 	.word	0xefff69f3
 800315c:	40011000 	.word	0x40011000
 8003160:	40023800 	.word	0x40023800
 8003164:	40004400 	.word	0x40004400
 8003168:	40004800 	.word	0x40004800
 800316c:	40004c00 	.word	0x40004c00
 8003170:	40005000 	.word	0x40005000
 8003174:	40011400 	.word	0x40011400
 8003178:	40007800 	.word	0x40007800
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a71      	ldr	r2, [pc, #452]	; (8003348 <UART_SetConfig+0x4b8>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d125      	bne.n	80031d2 <UART_SetConfig+0x342>
 8003186:	4b71      	ldr	r3, [pc, #452]	; (800334c <UART_SetConfig+0x4bc>)
 8003188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800318c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003190:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003194:	d017      	beq.n	80031c6 <UART_SetConfig+0x336>
 8003196:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800319a:	d817      	bhi.n	80031cc <UART_SetConfig+0x33c>
 800319c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031a0:	d00b      	beq.n	80031ba <UART_SetConfig+0x32a>
 80031a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031a6:	d811      	bhi.n	80031cc <UART_SetConfig+0x33c>
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d003      	beq.n	80031b4 <UART_SetConfig+0x324>
 80031ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031b0:	d006      	beq.n	80031c0 <UART_SetConfig+0x330>
 80031b2:	e00b      	b.n	80031cc <UART_SetConfig+0x33c>
 80031b4:	2300      	movs	r3, #0
 80031b6:	77fb      	strb	r3, [r7, #31]
 80031b8:	e00d      	b.n	80031d6 <UART_SetConfig+0x346>
 80031ba:	2302      	movs	r3, #2
 80031bc:	77fb      	strb	r3, [r7, #31]
 80031be:	e00a      	b.n	80031d6 <UART_SetConfig+0x346>
 80031c0:	2304      	movs	r3, #4
 80031c2:	77fb      	strb	r3, [r7, #31]
 80031c4:	e007      	b.n	80031d6 <UART_SetConfig+0x346>
 80031c6:	2308      	movs	r3, #8
 80031c8:	77fb      	strb	r3, [r7, #31]
 80031ca:	e004      	b.n	80031d6 <UART_SetConfig+0x346>
 80031cc:	2310      	movs	r3, #16
 80031ce:	77fb      	strb	r3, [r7, #31]
 80031d0:	e001      	b.n	80031d6 <UART_SetConfig+0x346>
 80031d2:	2310      	movs	r3, #16
 80031d4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	69db      	ldr	r3, [r3, #28]
 80031da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031de:	d15b      	bne.n	8003298 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80031e0:	7ffb      	ldrb	r3, [r7, #31]
 80031e2:	2b08      	cmp	r3, #8
 80031e4:	d827      	bhi.n	8003236 <UART_SetConfig+0x3a6>
 80031e6:	a201      	add	r2, pc, #4	; (adr r2, 80031ec <UART_SetConfig+0x35c>)
 80031e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ec:	08003211 	.word	0x08003211
 80031f0:	08003219 	.word	0x08003219
 80031f4:	08003221 	.word	0x08003221
 80031f8:	08003237 	.word	0x08003237
 80031fc:	08003227 	.word	0x08003227
 8003200:	08003237 	.word	0x08003237
 8003204:	08003237 	.word	0x08003237
 8003208:	08003237 	.word	0x08003237
 800320c:	0800322f 	.word	0x0800322f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003210:	f7fe fef2 	bl	8001ff8 <HAL_RCC_GetPCLK1Freq>
 8003214:	61b8      	str	r0, [r7, #24]
        break;
 8003216:	e013      	b.n	8003240 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003218:	f7fe ff02 	bl	8002020 <HAL_RCC_GetPCLK2Freq>
 800321c:	61b8      	str	r0, [r7, #24]
        break;
 800321e:	e00f      	b.n	8003240 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003220:	4b4b      	ldr	r3, [pc, #300]	; (8003350 <UART_SetConfig+0x4c0>)
 8003222:	61bb      	str	r3, [r7, #24]
        break;
 8003224:	e00c      	b.n	8003240 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003226:	f7fe fdf9 	bl	8001e1c <HAL_RCC_GetSysClockFreq>
 800322a:	61b8      	str	r0, [r7, #24]
        break;
 800322c:	e008      	b.n	8003240 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800322e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003232:	61bb      	str	r3, [r7, #24]
        break;
 8003234:	e004      	b.n	8003240 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8003236:	2300      	movs	r3, #0
 8003238:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	77bb      	strb	r3, [r7, #30]
        break;
 800323e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d074      	beq.n	8003330 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	005a      	lsls	r2, r3, #1
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	085b      	lsrs	r3, r3, #1
 8003250:	441a      	add	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	fbb2 f3f3 	udiv	r3, r2, r3
 800325a:	b29b      	uxth	r3, r3
 800325c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	2b0f      	cmp	r3, #15
 8003262:	d916      	bls.n	8003292 <UART_SetConfig+0x402>
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800326a:	d212      	bcs.n	8003292 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	b29b      	uxth	r3, r3
 8003270:	f023 030f 	bic.w	r3, r3, #15
 8003274:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	085b      	lsrs	r3, r3, #1
 800327a:	b29b      	uxth	r3, r3
 800327c:	f003 0307 	and.w	r3, r3, #7
 8003280:	b29a      	uxth	r2, r3
 8003282:	89fb      	ldrh	r3, [r7, #14]
 8003284:	4313      	orrs	r3, r2
 8003286:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	89fa      	ldrh	r2, [r7, #14]
 800328e:	60da      	str	r2, [r3, #12]
 8003290:	e04e      	b.n	8003330 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	77bb      	strb	r3, [r7, #30]
 8003296:	e04b      	b.n	8003330 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003298:	7ffb      	ldrb	r3, [r7, #31]
 800329a:	2b08      	cmp	r3, #8
 800329c:	d827      	bhi.n	80032ee <UART_SetConfig+0x45e>
 800329e:	a201      	add	r2, pc, #4	; (adr r2, 80032a4 <UART_SetConfig+0x414>)
 80032a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a4:	080032c9 	.word	0x080032c9
 80032a8:	080032d1 	.word	0x080032d1
 80032ac:	080032d9 	.word	0x080032d9
 80032b0:	080032ef 	.word	0x080032ef
 80032b4:	080032df 	.word	0x080032df
 80032b8:	080032ef 	.word	0x080032ef
 80032bc:	080032ef 	.word	0x080032ef
 80032c0:	080032ef 	.word	0x080032ef
 80032c4:	080032e7 	.word	0x080032e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032c8:	f7fe fe96 	bl	8001ff8 <HAL_RCC_GetPCLK1Freq>
 80032cc:	61b8      	str	r0, [r7, #24]
        break;
 80032ce:	e013      	b.n	80032f8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032d0:	f7fe fea6 	bl	8002020 <HAL_RCC_GetPCLK2Freq>
 80032d4:	61b8      	str	r0, [r7, #24]
        break;
 80032d6:	e00f      	b.n	80032f8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032d8:	4b1d      	ldr	r3, [pc, #116]	; (8003350 <UART_SetConfig+0x4c0>)
 80032da:	61bb      	str	r3, [r7, #24]
        break;
 80032dc:	e00c      	b.n	80032f8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032de:	f7fe fd9d 	bl	8001e1c <HAL_RCC_GetSysClockFreq>
 80032e2:	61b8      	str	r0, [r7, #24]
        break;
 80032e4:	e008      	b.n	80032f8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032ea:	61bb      	str	r3, [r7, #24]
        break;
 80032ec:	e004      	b.n	80032f8 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80032ee:	2300      	movs	r3, #0
 80032f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	77bb      	strb	r3, [r7, #30]
        break;
 80032f6:	bf00      	nop
    }

    if (pclk != 0U)
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d018      	beq.n	8003330 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	085a      	lsrs	r2, r3, #1
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	441a      	add	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003310:	b29b      	uxth	r3, r3
 8003312:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	2b0f      	cmp	r3, #15
 8003318:	d908      	bls.n	800332c <UART_SetConfig+0x49c>
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003320:	d204      	bcs.n	800332c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	60da      	str	r2, [r3, #12]
 800332a:	e001      	b.n	8003330 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800333c:	7fbb      	ldrb	r3, [r7, #30]
}
 800333e:	4618      	mov	r0, r3
 8003340:	3720      	adds	r7, #32
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	40007c00 	.word	0x40007c00
 800334c:	40023800 	.word	0x40023800
 8003350:	00f42400 	.word	0x00f42400

08003354 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003360:	f003 0301 	and.w	r3, r3, #1
 8003364:	2b00      	cmp	r3, #0
 8003366:	d00a      	beq.n	800337e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	430a      	orrs	r2, r1
 800337c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00a      	beq.n	80033a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	430a      	orrs	r2, r1
 800339e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a4:	f003 0304 	and.w	r3, r3, #4
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00a      	beq.n	80033c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	430a      	orrs	r2, r1
 80033c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c6:	f003 0308 	and.w	r3, r3, #8
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00a      	beq.n	80033e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	430a      	orrs	r2, r1
 80033e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e8:	f003 0310 	and.w	r3, r3, #16
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00a      	beq.n	8003406 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	430a      	orrs	r2, r1
 8003404:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340a:	f003 0320 	and.w	r3, r3, #32
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00a      	beq.n	8003428 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	430a      	orrs	r2, r1
 8003426:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003430:	2b00      	cmp	r3, #0
 8003432:	d01a      	beq.n	800346a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	430a      	orrs	r2, r1
 8003448:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003452:	d10a      	bne.n	800346a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	430a      	orrs	r2, r1
 8003468:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00a      	beq.n	800348c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	430a      	orrs	r2, r1
 800348a:	605a      	str	r2, [r3, #4]
  }
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af02      	add	r7, sp, #8
 800349e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034a8:	f7fd fd2e 	bl	8000f08 <HAL_GetTick>
 80034ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0308 	and.w	r3, r3, #8
 80034b8:	2b08      	cmp	r3, #8
 80034ba:	d10e      	bne.n	80034da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034c0:	9300      	str	r3, [sp, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f82d 	bl	800352a <UART_WaitOnFlagUntilTimeout>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e023      	b.n	8003522 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0304 	and.w	r3, r3, #4
 80034e4:	2b04      	cmp	r3, #4
 80034e6:	d10e      	bne.n	8003506 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034ec:	9300      	str	r3, [sp, #0]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 f817 	bl	800352a <UART_WaitOnFlagUntilTimeout>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e00d      	b.n	8003522 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2220      	movs	r2, #32
 800350a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2220      	movs	r2, #32
 8003510:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3710      	adds	r7, #16
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b084      	sub	sp, #16
 800352e:	af00      	add	r7, sp, #0
 8003530:	60f8      	str	r0, [r7, #12]
 8003532:	60b9      	str	r1, [r7, #8]
 8003534:	603b      	str	r3, [r7, #0]
 8003536:	4613      	mov	r3, r2
 8003538:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800353a:	e05e      	b.n	80035fa <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003542:	d05a      	beq.n	80035fa <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003544:	f7fd fce0 	bl	8000f08 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	69ba      	ldr	r2, [r7, #24]
 8003550:	429a      	cmp	r2, r3
 8003552:	d302      	bcc.n	800355a <UART_WaitOnFlagUntilTimeout+0x30>
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d11b      	bne.n	8003592 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003568:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	689a      	ldr	r2, [r3, #8]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f022 0201 	bic.w	r2, r2, #1
 8003578:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2220      	movs	r2, #32
 800357e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2220      	movs	r2, #32
 8003584:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e043      	b.n	800361a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0304 	and.w	r3, r3, #4
 800359c:	2b00      	cmp	r3, #0
 800359e:	d02c      	beq.n	80035fa <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	69db      	ldr	r3, [r3, #28]
 80035a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035ae:	d124      	bne.n	80035fa <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035b8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80035c8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	689a      	ldr	r2, [r3, #8]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f022 0201 	bic.w	r2, r2, #1
 80035d8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2220      	movs	r2, #32
 80035de:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2220      	movs	r2, #32
 80035e4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2220      	movs	r2, #32
 80035ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e00f      	b.n	800361a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	69da      	ldr	r2, [r3, #28]
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	4013      	ands	r3, r2
 8003604:	68ba      	ldr	r2, [r7, #8]
 8003606:	429a      	cmp	r2, r3
 8003608:	bf0c      	ite	eq
 800360a:	2301      	moveq	r3, #1
 800360c:	2300      	movne	r3, #0
 800360e:	b2db      	uxtb	r3, r3
 8003610:	461a      	mov	r2, r3
 8003612:	79fb      	ldrb	r3, [r7, #7]
 8003614:	429a      	cmp	r2, r3
 8003616:	d091      	beq.n	800353c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3710      	adds	r7, #16
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
	...

08003624 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003624:	b480      	push	{r7}
 8003626:	b085      	sub	sp, #20
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	4613      	mov	r3, r2
 8003630:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	68ba      	ldr	r2, [r7, #8]
 8003636:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	88fa      	ldrh	r2, [r7, #6]
 800363c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	88fa      	ldrh	r2, [r7, #6]
 8003644:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003656:	d10e      	bne.n	8003676 <UART_Start_Receive_IT+0x52>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d105      	bne.n	800366c <UART_Start_Receive_IT+0x48>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003666:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800366a:	e02d      	b.n	80036c8 <UART_Start_Receive_IT+0xa4>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	22ff      	movs	r2, #255	; 0xff
 8003670:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003674:	e028      	b.n	80036c8 <UART_Start_Receive_IT+0xa4>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d10d      	bne.n	800369a <UART_Start_Receive_IT+0x76>
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d104      	bne.n	8003690 <UART_Start_Receive_IT+0x6c>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	22ff      	movs	r2, #255	; 0xff
 800368a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800368e:	e01b      	b.n	80036c8 <UART_Start_Receive_IT+0xa4>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	227f      	movs	r2, #127	; 0x7f
 8003694:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003698:	e016      	b.n	80036c8 <UART_Start_Receive_IT+0xa4>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036a2:	d10d      	bne.n	80036c0 <UART_Start_Receive_IT+0x9c>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	691b      	ldr	r3, [r3, #16]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d104      	bne.n	80036b6 <UART_Start_Receive_IT+0x92>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	227f      	movs	r2, #127	; 0x7f
 80036b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036b4:	e008      	b.n	80036c8 <UART_Start_Receive_IT+0xa4>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	223f      	movs	r2, #63	; 0x3f
 80036ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036be:	e003      	b.n	80036c8 <UART_Start_Receive_IT+0xa4>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2222      	movs	r2, #34	; 0x22
 80036d4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	689a      	ldr	r2, [r3, #8]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f042 0201 	orr.w	r2, r2, #1
 80036e4:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036ee:	d107      	bne.n	8003700 <UART_Start_Receive_IT+0xdc>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d103      	bne.n	8003700 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	4a0c      	ldr	r2, [pc, #48]	; (800372c <UART_Start_Receive_IT+0x108>)
 80036fc:	665a      	str	r2, [r3, #100]	; 0x64
 80036fe:	e002      	b.n	8003706 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	4a0b      	ldr	r2, [pc, #44]	; (8003730 <UART_Start_Receive_IT+0x10c>)
 8003704:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800371c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	3714      	adds	r7, #20
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr
 800372c:	080039b3 	.word	0x080039b3
 8003730:	080038df 	.word	0x080038df

08003734 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800374a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	689a      	ldr	r2, [r3, #8]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f022 0201 	bic.w	r2, r2, #1
 800375a:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003760:	2b01      	cmp	r3, #1
 8003762:	d107      	bne.n	8003774 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f022 0210 	bic.w	r2, r2, #16
 8003772:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2220      	movs	r2, #32
 8003778:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003786:	bf00      	nop
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr

08003792 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003792:	b580      	push	{r7, lr}
 8003794:	b084      	sub	sp, #16
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037b0:	68f8      	ldr	r0, [r7, #12]
 80037b2:	f7fd fb1b 	bl	8000dec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037b6:	bf00      	nop
 80037b8:	3710      	adds	r7, #16
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80037be:	b480      	push	{r7}
 80037c0:	b083      	sub	sp, #12
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037ca:	2b21      	cmp	r3, #33	; 0x21
 80037cc:	d12a      	bne.n	8003824 <UART_TxISR_8BIT+0x66>
  {
    if (huart->TxXferCount == 0U)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d110      	bne.n	80037fc <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037e8:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037f8:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80037fa:	e013      	b.n	8003824 <UART_TxISR_8BIT+0x66>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003800:	781a      	ldrb	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800380c:	1c5a      	adds	r2, r3, #1
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003818:	b29b      	uxth	r3, r3
 800381a:	3b01      	subs	r3, #1
 800381c:	b29a      	uxth	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8003824:	bf00      	nop
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003830:	b480      	push	{r7}
 8003832:	b085      	sub	sp, #20
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800383c:	2b21      	cmp	r3, #33	; 0x21
 800383e:	d12f      	bne.n	80038a0 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003846:	b29b      	uxth	r3, r3
 8003848:	2b00      	cmp	r3, #0
 800384a:	d110      	bne.n	800386e <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800385a:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800386a:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800386c:	e018      	b.n	80038a0 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003872:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	881b      	ldrh	r3, [r3, #0]
 8003878:	461a      	mov	r2, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003882:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003888:	1c9a      	adds	r2, r3, #2
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003894:	b29b      	uxth	r3, r3
 8003896:	3b01      	subs	r3, #1
 8003898:	b29a      	uxth	r2, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80038a0:	bf00      	nop
 80038a2:	3714      	adds	r7, #20
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038c2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2220      	movs	r2, #32
 80038c8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f7ff fabd 	bl	8002e50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038d6:	bf00      	nop
 80038d8:	3708      	adds	r7, #8
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80038de:	b580      	push	{r7, lr}
 80038e0:	b084      	sub	sp, #16
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80038ec:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038f2:	2b22      	cmp	r3, #34	; 0x22
 80038f4:	d151      	bne.n	800399a <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fc:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80038fe:	89bb      	ldrh	r3, [r7, #12]
 8003900:	b2d9      	uxtb	r1, r3
 8003902:	89fb      	ldrh	r3, [r7, #14]
 8003904:	b2da      	uxtb	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800390a:	400a      	ands	r2, r1
 800390c:	b2d2      	uxtb	r2, r2
 800390e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003914:	1c5a      	adds	r2, r3, #1
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003920:	b29b      	uxth	r3, r3
 8003922:	3b01      	subs	r3, #1
 8003924:	b29a      	uxth	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003932:	b29b      	uxth	r3, r3
 8003934:	2b00      	cmp	r3, #0
 8003936:	d138      	bne.n	80039aa <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003946:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	689a      	ldr	r2, [r3, #8]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f022 0201 	bic.w	r2, r2, #1
 8003956:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2220      	movs	r2, #32
 800395c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003968:	2b01      	cmp	r3, #1
 800396a:	d10f      	bne.n	800398c <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f022 0210 	bic.w	r2, r2, #16
 800397a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003982:	4619      	mov	r1, r3
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f7ff fa6d 	bl	8002e64 <HAL_UARTEx_RxEventCallback>
 800398a:	e002      	b.n	8003992 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f7fd fa43 	bl	8000e18 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003998:	e007      	b.n	80039aa <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	699a      	ldr	r2, [r3, #24]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f042 0208 	orr.w	r2, r2, #8
 80039a8:	619a      	str	r2, [r3, #24]
}
 80039aa:	bf00      	nop
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b084      	sub	sp, #16
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80039c0:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039c6:	2b22      	cmp	r3, #34	; 0x22
 80039c8:	d151      	bne.n	8003a6e <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d0:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d6:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80039d8:	89ba      	ldrh	r2, [r7, #12]
 80039da:	89fb      	ldrh	r3, [r7, #14]
 80039dc:	4013      	ands	r3, r2
 80039de:	b29a      	uxth	r2, r3
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039e8:	1c9a      	adds	r2, r3, #2
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	3b01      	subs	r3, #1
 80039f8:	b29a      	uxth	r2, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d138      	bne.n	8003a7e <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003a1a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	689a      	ldr	r2, [r3, #8]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f022 0201 	bic.w	r2, r2, #1
 8003a2a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2220      	movs	r2, #32
 8003a30:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d10f      	bne.n	8003a60 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f022 0210 	bic.w	r2, r2, #16
 8003a4e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003a56:	4619      	mov	r1, r3
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f7ff fa03 	bl	8002e64 <HAL_UARTEx_RxEventCallback>
 8003a5e:	e002      	b.n	8003a66 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f7fd f9d9 	bl	8000e18 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003a6c:	e007      	b.n	8003a7e <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	699a      	ldr	r2, [r3, #24]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f042 0208 	orr.w	r2, r2, #8
 8003a7c:	619a      	str	r2, [r3, #24]
}
 8003a7e:	bf00      	nop
 8003a80:	3710      	adds	r7, #16
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
	...

08003a88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003a88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ac0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003a8c:	480d      	ldr	r0, [pc, #52]	; (8003ac4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003a8e:	490e      	ldr	r1, [pc, #56]	; (8003ac8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003a90:	4a0e      	ldr	r2, [pc, #56]	; (8003acc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003a92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a94:	e002      	b.n	8003a9c <LoopCopyDataInit>

08003a96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a9a:	3304      	adds	r3, #4

08003a9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003aa0:	d3f9      	bcc.n	8003a96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003aa2:	4a0b      	ldr	r2, [pc, #44]	; (8003ad0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003aa4:	4c0b      	ldr	r4, [pc, #44]	; (8003ad4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003aa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003aa8:	e001      	b.n	8003aae <LoopFillZerobss>

08003aaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003aaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003aac:	3204      	adds	r2, #4

08003aae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003aae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ab0:	d3fb      	bcc.n	8003aaa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003ab2:	f7fc fde9 	bl	8000688 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003ab6:	f000 f817 	bl	8003ae8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003aba:	f7fc ff4f 	bl	800095c <main>
  bx  lr    
 8003abe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003ac0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8003ac4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ac8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8003acc:	08004bdc 	.word	0x08004bdc
  ldr r2, =_sbss
 8003ad0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8003ad4:	20000248 	.word	0x20000248

08003ad8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ad8:	e7fe      	b.n	8003ad8 <ADC_IRQHandler>
	...

08003adc <__errno>:
 8003adc:	4b01      	ldr	r3, [pc, #4]	; (8003ae4 <__errno+0x8>)
 8003ade:	6818      	ldr	r0, [r3, #0]
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	2000000c 	.word	0x2000000c

08003ae8 <__libc_init_array>:
 8003ae8:	b570      	push	{r4, r5, r6, lr}
 8003aea:	4d0d      	ldr	r5, [pc, #52]	; (8003b20 <__libc_init_array+0x38>)
 8003aec:	4c0d      	ldr	r4, [pc, #52]	; (8003b24 <__libc_init_array+0x3c>)
 8003aee:	1b64      	subs	r4, r4, r5
 8003af0:	10a4      	asrs	r4, r4, #2
 8003af2:	2600      	movs	r6, #0
 8003af4:	42a6      	cmp	r6, r4
 8003af6:	d109      	bne.n	8003b0c <__libc_init_array+0x24>
 8003af8:	4d0b      	ldr	r5, [pc, #44]	; (8003b28 <__libc_init_array+0x40>)
 8003afa:	4c0c      	ldr	r4, [pc, #48]	; (8003b2c <__libc_init_array+0x44>)
 8003afc:	f000 ffec 	bl	8004ad8 <_init>
 8003b00:	1b64      	subs	r4, r4, r5
 8003b02:	10a4      	asrs	r4, r4, #2
 8003b04:	2600      	movs	r6, #0
 8003b06:	42a6      	cmp	r6, r4
 8003b08:	d105      	bne.n	8003b16 <__libc_init_array+0x2e>
 8003b0a:	bd70      	pop	{r4, r5, r6, pc}
 8003b0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b10:	4798      	blx	r3
 8003b12:	3601      	adds	r6, #1
 8003b14:	e7ee      	b.n	8003af4 <__libc_init_array+0xc>
 8003b16:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b1a:	4798      	blx	r3
 8003b1c:	3601      	adds	r6, #1
 8003b1e:	e7f2      	b.n	8003b06 <__libc_init_array+0x1e>
 8003b20:	08004bd4 	.word	0x08004bd4
 8003b24:	08004bd4 	.word	0x08004bd4
 8003b28:	08004bd4 	.word	0x08004bd4
 8003b2c:	08004bd8 	.word	0x08004bd8

08003b30 <memset>:
 8003b30:	4402      	add	r2, r0
 8003b32:	4603      	mov	r3, r0
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d100      	bne.n	8003b3a <memset+0xa>
 8003b38:	4770      	bx	lr
 8003b3a:	f803 1b01 	strb.w	r1, [r3], #1
 8003b3e:	e7f9      	b.n	8003b34 <memset+0x4>

08003b40 <iprintf>:
 8003b40:	b40f      	push	{r0, r1, r2, r3}
 8003b42:	4b0a      	ldr	r3, [pc, #40]	; (8003b6c <iprintf+0x2c>)
 8003b44:	b513      	push	{r0, r1, r4, lr}
 8003b46:	681c      	ldr	r4, [r3, #0]
 8003b48:	b124      	cbz	r4, 8003b54 <iprintf+0x14>
 8003b4a:	69a3      	ldr	r3, [r4, #24]
 8003b4c:	b913      	cbnz	r3, 8003b54 <iprintf+0x14>
 8003b4e:	4620      	mov	r0, r4
 8003b50:	f000 fa5e 	bl	8004010 <__sinit>
 8003b54:	ab05      	add	r3, sp, #20
 8003b56:	9a04      	ldr	r2, [sp, #16]
 8003b58:	68a1      	ldr	r1, [r4, #8]
 8003b5a:	9301      	str	r3, [sp, #4]
 8003b5c:	4620      	mov	r0, r4
 8003b5e:	f000 fc2f 	bl	80043c0 <_vfiprintf_r>
 8003b62:	b002      	add	sp, #8
 8003b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b68:	b004      	add	sp, #16
 8003b6a:	4770      	bx	lr
 8003b6c:	2000000c 	.word	0x2000000c

08003b70 <_puts_r>:
 8003b70:	b570      	push	{r4, r5, r6, lr}
 8003b72:	460e      	mov	r6, r1
 8003b74:	4605      	mov	r5, r0
 8003b76:	b118      	cbz	r0, 8003b80 <_puts_r+0x10>
 8003b78:	6983      	ldr	r3, [r0, #24]
 8003b7a:	b90b      	cbnz	r3, 8003b80 <_puts_r+0x10>
 8003b7c:	f000 fa48 	bl	8004010 <__sinit>
 8003b80:	69ab      	ldr	r3, [r5, #24]
 8003b82:	68ac      	ldr	r4, [r5, #8]
 8003b84:	b913      	cbnz	r3, 8003b8c <_puts_r+0x1c>
 8003b86:	4628      	mov	r0, r5
 8003b88:	f000 fa42 	bl	8004010 <__sinit>
 8003b8c:	4b2c      	ldr	r3, [pc, #176]	; (8003c40 <_puts_r+0xd0>)
 8003b8e:	429c      	cmp	r4, r3
 8003b90:	d120      	bne.n	8003bd4 <_puts_r+0x64>
 8003b92:	686c      	ldr	r4, [r5, #4]
 8003b94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003b96:	07db      	lsls	r3, r3, #31
 8003b98:	d405      	bmi.n	8003ba6 <_puts_r+0x36>
 8003b9a:	89a3      	ldrh	r3, [r4, #12]
 8003b9c:	0598      	lsls	r0, r3, #22
 8003b9e:	d402      	bmi.n	8003ba6 <_puts_r+0x36>
 8003ba0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ba2:	f000 fad3 	bl	800414c <__retarget_lock_acquire_recursive>
 8003ba6:	89a3      	ldrh	r3, [r4, #12]
 8003ba8:	0719      	lsls	r1, r3, #28
 8003baa:	d51d      	bpl.n	8003be8 <_puts_r+0x78>
 8003bac:	6923      	ldr	r3, [r4, #16]
 8003bae:	b1db      	cbz	r3, 8003be8 <_puts_r+0x78>
 8003bb0:	3e01      	subs	r6, #1
 8003bb2:	68a3      	ldr	r3, [r4, #8]
 8003bb4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	60a3      	str	r3, [r4, #8]
 8003bbc:	bb39      	cbnz	r1, 8003c0e <_puts_r+0x9e>
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	da38      	bge.n	8003c34 <_puts_r+0xc4>
 8003bc2:	4622      	mov	r2, r4
 8003bc4:	210a      	movs	r1, #10
 8003bc6:	4628      	mov	r0, r5
 8003bc8:	f000 f848 	bl	8003c5c <__swbuf_r>
 8003bcc:	3001      	adds	r0, #1
 8003bce:	d011      	beq.n	8003bf4 <_puts_r+0x84>
 8003bd0:	250a      	movs	r5, #10
 8003bd2:	e011      	b.n	8003bf8 <_puts_r+0x88>
 8003bd4:	4b1b      	ldr	r3, [pc, #108]	; (8003c44 <_puts_r+0xd4>)
 8003bd6:	429c      	cmp	r4, r3
 8003bd8:	d101      	bne.n	8003bde <_puts_r+0x6e>
 8003bda:	68ac      	ldr	r4, [r5, #8]
 8003bdc:	e7da      	b.n	8003b94 <_puts_r+0x24>
 8003bde:	4b1a      	ldr	r3, [pc, #104]	; (8003c48 <_puts_r+0xd8>)
 8003be0:	429c      	cmp	r4, r3
 8003be2:	bf08      	it	eq
 8003be4:	68ec      	ldreq	r4, [r5, #12]
 8003be6:	e7d5      	b.n	8003b94 <_puts_r+0x24>
 8003be8:	4621      	mov	r1, r4
 8003bea:	4628      	mov	r0, r5
 8003bec:	f000 f888 	bl	8003d00 <__swsetup_r>
 8003bf0:	2800      	cmp	r0, #0
 8003bf2:	d0dd      	beq.n	8003bb0 <_puts_r+0x40>
 8003bf4:	f04f 35ff 	mov.w	r5, #4294967295
 8003bf8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003bfa:	07da      	lsls	r2, r3, #31
 8003bfc:	d405      	bmi.n	8003c0a <_puts_r+0x9a>
 8003bfe:	89a3      	ldrh	r3, [r4, #12]
 8003c00:	059b      	lsls	r3, r3, #22
 8003c02:	d402      	bmi.n	8003c0a <_puts_r+0x9a>
 8003c04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c06:	f000 faa2 	bl	800414e <__retarget_lock_release_recursive>
 8003c0a:	4628      	mov	r0, r5
 8003c0c:	bd70      	pop	{r4, r5, r6, pc}
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	da04      	bge.n	8003c1c <_puts_r+0xac>
 8003c12:	69a2      	ldr	r2, [r4, #24]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	dc06      	bgt.n	8003c26 <_puts_r+0xb6>
 8003c18:	290a      	cmp	r1, #10
 8003c1a:	d004      	beq.n	8003c26 <_puts_r+0xb6>
 8003c1c:	6823      	ldr	r3, [r4, #0]
 8003c1e:	1c5a      	adds	r2, r3, #1
 8003c20:	6022      	str	r2, [r4, #0]
 8003c22:	7019      	strb	r1, [r3, #0]
 8003c24:	e7c5      	b.n	8003bb2 <_puts_r+0x42>
 8003c26:	4622      	mov	r2, r4
 8003c28:	4628      	mov	r0, r5
 8003c2a:	f000 f817 	bl	8003c5c <__swbuf_r>
 8003c2e:	3001      	adds	r0, #1
 8003c30:	d1bf      	bne.n	8003bb2 <_puts_r+0x42>
 8003c32:	e7df      	b.n	8003bf4 <_puts_r+0x84>
 8003c34:	6823      	ldr	r3, [r4, #0]
 8003c36:	250a      	movs	r5, #10
 8003c38:	1c5a      	adds	r2, r3, #1
 8003c3a:	6022      	str	r2, [r4, #0]
 8003c3c:	701d      	strb	r5, [r3, #0]
 8003c3e:	e7db      	b.n	8003bf8 <_puts_r+0x88>
 8003c40:	08004b58 	.word	0x08004b58
 8003c44:	08004b78 	.word	0x08004b78
 8003c48:	08004b38 	.word	0x08004b38

08003c4c <puts>:
 8003c4c:	4b02      	ldr	r3, [pc, #8]	; (8003c58 <puts+0xc>)
 8003c4e:	4601      	mov	r1, r0
 8003c50:	6818      	ldr	r0, [r3, #0]
 8003c52:	f7ff bf8d 	b.w	8003b70 <_puts_r>
 8003c56:	bf00      	nop
 8003c58:	2000000c 	.word	0x2000000c

08003c5c <__swbuf_r>:
 8003c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c5e:	460e      	mov	r6, r1
 8003c60:	4614      	mov	r4, r2
 8003c62:	4605      	mov	r5, r0
 8003c64:	b118      	cbz	r0, 8003c6e <__swbuf_r+0x12>
 8003c66:	6983      	ldr	r3, [r0, #24]
 8003c68:	b90b      	cbnz	r3, 8003c6e <__swbuf_r+0x12>
 8003c6a:	f000 f9d1 	bl	8004010 <__sinit>
 8003c6e:	4b21      	ldr	r3, [pc, #132]	; (8003cf4 <__swbuf_r+0x98>)
 8003c70:	429c      	cmp	r4, r3
 8003c72:	d12b      	bne.n	8003ccc <__swbuf_r+0x70>
 8003c74:	686c      	ldr	r4, [r5, #4]
 8003c76:	69a3      	ldr	r3, [r4, #24]
 8003c78:	60a3      	str	r3, [r4, #8]
 8003c7a:	89a3      	ldrh	r3, [r4, #12]
 8003c7c:	071a      	lsls	r2, r3, #28
 8003c7e:	d52f      	bpl.n	8003ce0 <__swbuf_r+0x84>
 8003c80:	6923      	ldr	r3, [r4, #16]
 8003c82:	b36b      	cbz	r3, 8003ce0 <__swbuf_r+0x84>
 8003c84:	6923      	ldr	r3, [r4, #16]
 8003c86:	6820      	ldr	r0, [r4, #0]
 8003c88:	1ac0      	subs	r0, r0, r3
 8003c8a:	6963      	ldr	r3, [r4, #20]
 8003c8c:	b2f6      	uxtb	r6, r6
 8003c8e:	4283      	cmp	r3, r0
 8003c90:	4637      	mov	r7, r6
 8003c92:	dc04      	bgt.n	8003c9e <__swbuf_r+0x42>
 8003c94:	4621      	mov	r1, r4
 8003c96:	4628      	mov	r0, r5
 8003c98:	f000 f926 	bl	8003ee8 <_fflush_r>
 8003c9c:	bb30      	cbnz	r0, 8003cec <__swbuf_r+0x90>
 8003c9e:	68a3      	ldr	r3, [r4, #8]
 8003ca0:	3b01      	subs	r3, #1
 8003ca2:	60a3      	str	r3, [r4, #8]
 8003ca4:	6823      	ldr	r3, [r4, #0]
 8003ca6:	1c5a      	adds	r2, r3, #1
 8003ca8:	6022      	str	r2, [r4, #0]
 8003caa:	701e      	strb	r6, [r3, #0]
 8003cac:	6963      	ldr	r3, [r4, #20]
 8003cae:	3001      	adds	r0, #1
 8003cb0:	4283      	cmp	r3, r0
 8003cb2:	d004      	beq.n	8003cbe <__swbuf_r+0x62>
 8003cb4:	89a3      	ldrh	r3, [r4, #12]
 8003cb6:	07db      	lsls	r3, r3, #31
 8003cb8:	d506      	bpl.n	8003cc8 <__swbuf_r+0x6c>
 8003cba:	2e0a      	cmp	r6, #10
 8003cbc:	d104      	bne.n	8003cc8 <__swbuf_r+0x6c>
 8003cbe:	4621      	mov	r1, r4
 8003cc0:	4628      	mov	r0, r5
 8003cc2:	f000 f911 	bl	8003ee8 <_fflush_r>
 8003cc6:	b988      	cbnz	r0, 8003cec <__swbuf_r+0x90>
 8003cc8:	4638      	mov	r0, r7
 8003cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ccc:	4b0a      	ldr	r3, [pc, #40]	; (8003cf8 <__swbuf_r+0x9c>)
 8003cce:	429c      	cmp	r4, r3
 8003cd0:	d101      	bne.n	8003cd6 <__swbuf_r+0x7a>
 8003cd2:	68ac      	ldr	r4, [r5, #8]
 8003cd4:	e7cf      	b.n	8003c76 <__swbuf_r+0x1a>
 8003cd6:	4b09      	ldr	r3, [pc, #36]	; (8003cfc <__swbuf_r+0xa0>)
 8003cd8:	429c      	cmp	r4, r3
 8003cda:	bf08      	it	eq
 8003cdc:	68ec      	ldreq	r4, [r5, #12]
 8003cde:	e7ca      	b.n	8003c76 <__swbuf_r+0x1a>
 8003ce0:	4621      	mov	r1, r4
 8003ce2:	4628      	mov	r0, r5
 8003ce4:	f000 f80c 	bl	8003d00 <__swsetup_r>
 8003ce8:	2800      	cmp	r0, #0
 8003cea:	d0cb      	beq.n	8003c84 <__swbuf_r+0x28>
 8003cec:	f04f 37ff 	mov.w	r7, #4294967295
 8003cf0:	e7ea      	b.n	8003cc8 <__swbuf_r+0x6c>
 8003cf2:	bf00      	nop
 8003cf4:	08004b58 	.word	0x08004b58
 8003cf8:	08004b78 	.word	0x08004b78
 8003cfc:	08004b38 	.word	0x08004b38

08003d00 <__swsetup_r>:
 8003d00:	4b32      	ldr	r3, [pc, #200]	; (8003dcc <__swsetup_r+0xcc>)
 8003d02:	b570      	push	{r4, r5, r6, lr}
 8003d04:	681d      	ldr	r5, [r3, #0]
 8003d06:	4606      	mov	r6, r0
 8003d08:	460c      	mov	r4, r1
 8003d0a:	b125      	cbz	r5, 8003d16 <__swsetup_r+0x16>
 8003d0c:	69ab      	ldr	r3, [r5, #24]
 8003d0e:	b913      	cbnz	r3, 8003d16 <__swsetup_r+0x16>
 8003d10:	4628      	mov	r0, r5
 8003d12:	f000 f97d 	bl	8004010 <__sinit>
 8003d16:	4b2e      	ldr	r3, [pc, #184]	; (8003dd0 <__swsetup_r+0xd0>)
 8003d18:	429c      	cmp	r4, r3
 8003d1a:	d10f      	bne.n	8003d3c <__swsetup_r+0x3c>
 8003d1c:	686c      	ldr	r4, [r5, #4]
 8003d1e:	89a3      	ldrh	r3, [r4, #12]
 8003d20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003d24:	0719      	lsls	r1, r3, #28
 8003d26:	d42c      	bmi.n	8003d82 <__swsetup_r+0x82>
 8003d28:	06dd      	lsls	r5, r3, #27
 8003d2a:	d411      	bmi.n	8003d50 <__swsetup_r+0x50>
 8003d2c:	2309      	movs	r3, #9
 8003d2e:	6033      	str	r3, [r6, #0]
 8003d30:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003d34:	81a3      	strh	r3, [r4, #12]
 8003d36:	f04f 30ff 	mov.w	r0, #4294967295
 8003d3a:	e03e      	b.n	8003dba <__swsetup_r+0xba>
 8003d3c:	4b25      	ldr	r3, [pc, #148]	; (8003dd4 <__swsetup_r+0xd4>)
 8003d3e:	429c      	cmp	r4, r3
 8003d40:	d101      	bne.n	8003d46 <__swsetup_r+0x46>
 8003d42:	68ac      	ldr	r4, [r5, #8]
 8003d44:	e7eb      	b.n	8003d1e <__swsetup_r+0x1e>
 8003d46:	4b24      	ldr	r3, [pc, #144]	; (8003dd8 <__swsetup_r+0xd8>)
 8003d48:	429c      	cmp	r4, r3
 8003d4a:	bf08      	it	eq
 8003d4c:	68ec      	ldreq	r4, [r5, #12]
 8003d4e:	e7e6      	b.n	8003d1e <__swsetup_r+0x1e>
 8003d50:	0758      	lsls	r0, r3, #29
 8003d52:	d512      	bpl.n	8003d7a <__swsetup_r+0x7a>
 8003d54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003d56:	b141      	cbz	r1, 8003d6a <__swsetup_r+0x6a>
 8003d58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003d5c:	4299      	cmp	r1, r3
 8003d5e:	d002      	beq.n	8003d66 <__swsetup_r+0x66>
 8003d60:	4630      	mov	r0, r6
 8003d62:	f000 fa59 	bl	8004218 <_free_r>
 8003d66:	2300      	movs	r3, #0
 8003d68:	6363      	str	r3, [r4, #52]	; 0x34
 8003d6a:	89a3      	ldrh	r3, [r4, #12]
 8003d6c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003d70:	81a3      	strh	r3, [r4, #12]
 8003d72:	2300      	movs	r3, #0
 8003d74:	6063      	str	r3, [r4, #4]
 8003d76:	6923      	ldr	r3, [r4, #16]
 8003d78:	6023      	str	r3, [r4, #0]
 8003d7a:	89a3      	ldrh	r3, [r4, #12]
 8003d7c:	f043 0308 	orr.w	r3, r3, #8
 8003d80:	81a3      	strh	r3, [r4, #12]
 8003d82:	6923      	ldr	r3, [r4, #16]
 8003d84:	b94b      	cbnz	r3, 8003d9a <__swsetup_r+0x9a>
 8003d86:	89a3      	ldrh	r3, [r4, #12]
 8003d88:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003d8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d90:	d003      	beq.n	8003d9a <__swsetup_r+0x9a>
 8003d92:	4621      	mov	r1, r4
 8003d94:	4630      	mov	r0, r6
 8003d96:	f000 f9ff 	bl	8004198 <__smakebuf_r>
 8003d9a:	89a0      	ldrh	r0, [r4, #12]
 8003d9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003da0:	f010 0301 	ands.w	r3, r0, #1
 8003da4:	d00a      	beq.n	8003dbc <__swsetup_r+0xbc>
 8003da6:	2300      	movs	r3, #0
 8003da8:	60a3      	str	r3, [r4, #8]
 8003daa:	6963      	ldr	r3, [r4, #20]
 8003dac:	425b      	negs	r3, r3
 8003dae:	61a3      	str	r3, [r4, #24]
 8003db0:	6923      	ldr	r3, [r4, #16]
 8003db2:	b943      	cbnz	r3, 8003dc6 <__swsetup_r+0xc6>
 8003db4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003db8:	d1ba      	bne.n	8003d30 <__swsetup_r+0x30>
 8003dba:	bd70      	pop	{r4, r5, r6, pc}
 8003dbc:	0781      	lsls	r1, r0, #30
 8003dbe:	bf58      	it	pl
 8003dc0:	6963      	ldrpl	r3, [r4, #20]
 8003dc2:	60a3      	str	r3, [r4, #8]
 8003dc4:	e7f4      	b.n	8003db0 <__swsetup_r+0xb0>
 8003dc6:	2000      	movs	r0, #0
 8003dc8:	e7f7      	b.n	8003dba <__swsetup_r+0xba>
 8003dca:	bf00      	nop
 8003dcc:	2000000c 	.word	0x2000000c
 8003dd0:	08004b58 	.word	0x08004b58
 8003dd4:	08004b78 	.word	0x08004b78
 8003dd8:	08004b38 	.word	0x08004b38

08003ddc <__sflush_r>:
 8003ddc:	898a      	ldrh	r2, [r1, #12]
 8003dde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003de2:	4605      	mov	r5, r0
 8003de4:	0710      	lsls	r0, r2, #28
 8003de6:	460c      	mov	r4, r1
 8003de8:	d458      	bmi.n	8003e9c <__sflush_r+0xc0>
 8003dea:	684b      	ldr	r3, [r1, #4]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	dc05      	bgt.n	8003dfc <__sflush_r+0x20>
 8003df0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	dc02      	bgt.n	8003dfc <__sflush_r+0x20>
 8003df6:	2000      	movs	r0, #0
 8003df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003dfc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003dfe:	2e00      	cmp	r6, #0
 8003e00:	d0f9      	beq.n	8003df6 <__sflush_r+0x1a>
 8003e02:	2300      	movs	r3, #0
 8003e04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003e08:	682f      	ldr	r7, [r5, #0]
 8003e0a:	602b      	str	r3, [r5, #0]
 8003e0c:	d032      	beq.n	8003e74 <__sflush_r+0x98>
 8003e0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003e10:	89a3      	ldrh	r3, [r4, #12]
 8003e12:	075a      	lsls	r2, r3, #29
 8003e14:	d505      	bpl.n	8003e22 <__sflush_r+0x46>
 8003e16:	6863      	ldr	r3, [r4, #4]
 8003e18:	1ac0      	subs	r0, r0, r3
 8003e1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003e1c:	b10b      	cbz	r3, 8003e22 <__sflush_r+0x46>
 8003e1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003e20:	1ac0      	subs	r0, r0, r3
 8003e22:	2300      	movs	r3, #0
 8003e24:	4602      	mov	r2, r0
 8003e26:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003e28:	6a21      	ldr	r1, [r4, #32]
 8003e2a:	4628      	mov	r0, r5
 8003e2c:	47b0      	blx	r6
 8003e2e:	1c43      	adds	r3, r0, #1
 8003e30:	89a3      	ldrh	r3, [r4, #12]
 8003e32:	d106      	bne.n	8003e42 <__sflush_r+0x66>
 8003e34:	6829      	ldr	r1, [r5, #0]
 8003e36:	291d      	cmp	r1, #29
 8003e38:	d82c      	bhi.n	8003e94 <__sflush_r+0xb8>
 8003e3a:	4a2a      	ldr	r2, [pc, #168]	; (8003ee4 <__sflush_r+0x108>)
 8003e3c:	40ca      	lsrs	r2, r1
 8003e3e:	07d6      	lsls	r6, r2, #31
 8003e40:	d528      	bpl.n	8003e94 <__sflush_r+0xb8>
 8003e42:	2200      	movs	r2, #0
 8003e44:	6062      	str	r2, [r4, #4]
 8003e46:	04d9      	lsls	r1, r3, #19
 8003e48:	6922      	ldr	r2, [r4, #16]
 8003e4a:	6022      	str	r2, [r4, #0]
 8003e4c:	d504      	bpl.n	8003e58 <__sflush_r+0x7c>
 8003e4e:	1c42      	adds	r2, r0, #1
 8003e50:	d101      	bne.n	8003e56 <__sflush_r+0x7a>
 8003e52:	682b      	ldr	r3, [r5, #0]
 8003e54:	b903      	cbnz	r3, 8003e58 <__sflush_r+0x7c>
 8003e56:	6560      	str	r0, [r4, #84]	; 0x54
 8003e58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e5a:	602f      	str	r7, [r5, #0]
 8003e5c:	2900      	cmp	r1, #0
 8003e5e:	d0ca      	beq.n	8003df6 <__sflush_r+0x1a>
 8003e60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e64:	4299      	cmp	r1, r3
 8003e66:	d002      	beq.n	8003e6e <__sflush_r+0x92>
 8003e68:	4628      	mov	r0, r5
 8003e6a:	f000 f9d5 	bl	8004218 <_free_r>
 8003e6e:	2000      	movs	r0, #0
 8003e70:	6360      	str	r0, [r4, #52]	; 0x34
 8003e72:	e7c1      	b.n	8003df8 <__sflush_r+0x1c>
 8003e74:	6a21      	ldr	r1, [r4, #32]
 8003e76:	2301      	movs	r3, #1
 8003e78:	4628      	mov	r0, r5
 8003e7a:	47b0      	blx	r6
 8003e7c:	1c41      	adds	r1, r0, #1
 8003e7e:	d1c7      	bne.n	8003e10 <__sflush_r+0x34>
 8003e80:	682b      	ldr	r3, [r5, #0]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d0c4      	beq.n	8003e10 <__sflush_r+0x34>
 8003e86:	2b1d      	cmp	r3, #29
 8003e88:	d001      	beq.n	8003e8e <__sflush_r+0xb2>
 8003e8a:	2b16      	cmp	r3, #22
 8003e8c:	d101      	bne.n	8003e92 <__sflush_r+0xb6>
 8003e8e:	602f      	str	r7, [r5, #0]
 8003e90:	e7b1      	b.n	8003df6 <__sflush_r+0x1a>
 8003e92:	89a3      	ldrh	r3, [r4, #12]
 8003e94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e98:	81a3      	strh	r3, [r4, #12]
 8003e9a:	e7ad      	b.n	8003df8 <__sflush_r+0x1c>
 8003e9c:	690f      	ldr	r7, [r1, #16]
 8003e9e:	2f00      	cmp	r7, #0
 8003ea0:	d0a9      	beq.n	8003df6 <__sflush_r+0x1a>
 8003ea2:	0793      	lsls	r3, r2, #30
 8003ea4:	680e      	ldr	r6, [r1, #0]
 8003ea6:	bf08      	it	eq
 8003ea8:	694b      	ldreq	r3, [r1, #20]
 8003eaa:	600f      	str	r7, [r1, #0]
 8003eac:	bf18      	it	ne
 8003eae:	2300      	movne	r3, #0
 8003eb0:	eba6 0807 	sub.w	r8, r6, r7
 8003eb4:	608b      	str	r3, [r1, #8]
 8003eb6:	f1b8 0f00 	cmp.w	r8, #0
 8003eba:	dd9c      	ble.n	8003df6 <__sflush_r+0x1a>
 8003ebc:	6a21      	ldr	r1, [r4, #32]
 8003ebe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003ec0:	4643      	mov	r3, r8
 8003ec2:	463a      	mov	r2, r7
 8003ec4:	4628      	mov	r0, r5
 8003ec6:	47b0      	blx	r6
 8003ec8:	2800      	cmp	r0, #0
 8003eca:	dc06      	bgt.n	8003eda <__sflush_r+0xfe>
 8003ecc:	89a3      	ldrh	r3, [r4, #12]
 8003ece:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ed2:	81a3      	strh	r3, [r4, #12]
 8003ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ed8:	e78e      	b.n	8003df8 <__sflush_r+0x1c>
 8003eda:	4407      	add	r7, r0
 8003edc:	eba8 0800 	sub.w	r8, r8, r0
 8003ee0:	e7e9      	b.n	8003eb6 <__sflush_r+0xda>
 8003ee2:	bf00      	nop
 8003ee4:	20400001 	.word	0x20400001

08003ee8 <_fflush_r>:
 8003ee8:	b538      	push	{r3, r4, r5, lr}
 8003eea:	690b      	ldr	r3, [r1, #16]
 8003eec:	4605      	mov	r5, r0
 8003eee:	460c      	mov	r4, r1
 8003ef0:	b913      	cbnz	r3, 8003ef8 <_fflush_r+0x10>
 8003ef2:	2500      	movs	r5, #0
 8003ef4:	4628      	mov	r0, r5
 8003ef6:	bd38      	pop	{r3, r4, r5, pc}
 8003ef8:	b118      	cbz	r0, 8003f02 <_fflush_r+0x1a>
 8003efa:	6983      	ldr	r3, [r0, #24]
 8003efc:	b90b      	cbnz	r3, 8003f02 <_fflush_r+0x1a>
 8003efe:	f000 f887 	bl	8004010 <__sinit>
 8003f02:	4b14      	ldr	r3, [pc, #80]	; (8003f54 <_fflush_r+0x6c>)
 8003f04:	429c      	cmp	r4, r3
 8003f06:	d11b      	bne.n	8003f40 <_fflush_r+0x58>
 8003f08:	686c      	ldr	r4, [r5, #4]
 8003f0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d0ef      	beq.n	8003ef2 <_fflush_r+0xa>
 8003f12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003f14:	07d0      	lsls	r0, r2, #31
 8003f16:	d404      	bmi.n	8003f22 <_fflush_r+0x3a>
 8003f18:	0599      	lsls	r1, r3, #22
 8003f1a:	d402      	bmi.n	8003f22 <_fflush_r+0x3a>
 8003f1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f1e:	f000 f915 	bl	800414c <__retarget_lock_acquire_recursive>
 8003f22:	4628      	mov	r0, r5
 8003f24:	4621      	mov	r1, r4
 8003f26:	f7ff ff59 	bl	8003ddc <__sflush_r>
 8003f2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003f2c:	07da      	lsls	r2, r3, #31
 8003f2e:	4605      	mov	r5, r0
 8003f30:	d4e0      	bmi.n	8003ef4 <_fflush_r+0xc>
 8003f32:	89a3      	ldrh	r3, [r4, #12]
 8003f34:	059b      	lsls	r3, r3, #22
 8003f36:	d4dd      	bmi.n	8003ef4 <_fflush_r+0xc>
 8003f38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f3a:	f000 f908 	bl	800414e <__retarget_lock_release_recursive>
 8003f3e:	e7d9      	b.n	8003ef4 <_fflush_r+0xc>
 8003f40:	4b05      	ldr	r3, [pc, #20]	; (8003f58 <_fflush_r+0x70>)
 8003f42:	429c      	cmp	r4, r3
 8003f44:	d101      	bne.n	8003f4a <_fflush_r+0x62>
 8003f46:	68ac      	ldr	r4, [r5, #8]
 8003f48:	e7df      	b.n	8003f0a <_fflush_r+0x22>
 8003f4a:	4b04      	ldr	r3, [pc, #16]	; (8003f5c <_fflush_r+0x74>)
 8003f4c:	429c      	cmp	r4, r3
 8003f4e:	bf08      	it	eq
 8003f50:	68ec      	ldreq	r4, [r5, #12]
 8003f52:	e7da      	b.n	8003f0a <_fflush_r+0x22>
 8003f54:	08004b58 	.word	0x08004b58
 8003f58:	08004b78 	.word	0x08004b78
 8003f5c:	08004b38 	.word	0x08004b38

08003f60 <std>:
 8003f60:	2300      	movs	r3, #0
 8003f62:	b510      	push	{r4, lr}
 8003f64:	4604      	mov	r4, r0
 8003f66:	e9c0 3300 	strd	r3, r3, [r0]
 8003f6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003f6e:	6083      	str	r3, [r0, #8]
 8003f70:	8181      	strh	r1, [r0, #12]
 8003f72:	6643      	str	r3, [r0, #100]	; 0x64
 8003f74:	81c2      	strh	r2, [r0, #14]
 8003f76:	6183      	str	r3, [r0, #24]
 8003f78:	4619      	mov	r1, r3
 8003f7a:	2208      	movs	r2, #8
 8003f7c:	305c      	adds	r0, #92	; 0x5c
 8003f7e:	f7ff fdd7 	bl	8003b30 <memset>
 8003f82:	4b05      	ldr	r3, [pc, #20]	; (8003f98 <std+0x38>)
 8003f84:	6263      	str	r3, [r4, #36]	; 0x24
 8003f86:	4b05      	ldr	r3, [pc, #20]	; (8003f9c <std+0x3c>)
 8003f88:	62a3      	str	r3, [r4, #40]	; 0x28
 8003f8a:	4b05      	ldr	r3, [pc, #20]	; (8003fa0 <std+0x40>)
 8003f8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003f8e:	4b05      	ldr	r3, [pc, #20]	; (8003fa4 <std+0x44>)
 8003f90:	6224      	str	r4, [r4, #32]
 8003f92:	6323      	str	r3, [r4, #48]	; 0x30
 8003f94:	bd10      	pop	{r4, pc}
 8003f96:	bf00      	nop
 8003f98:	08004969 	.word	0x08004969
 8003f9c:	0800498b 	.word	0x0800498b
 8003fa0:	080049c3 	.word	0x080049c3
 8003fa4:	080049e7 	.word	0x080049e7

08003fa8 <_cleanup_r>:
 8003fa8:	4901      	ldr	r1, [pc, #4]	; (8003fb0 <_cleanup_r+0x8>)
 8003faa:	f000 b8af 	b.w	800410c <_fwalk_reent>
 8003fae:	bf00      	nop
 8003fb0:	08003ee9 	.word	0x08003ee9

08003fb4 <__sfmoreglue>:
 8003fb4:	b570      	push	{r4, r5, r6, lr}
 8003fb6:	1e4a      	subs	r2, r1, #1
 8003fb8:	2568      	movs	r5, #104	; 0x68
 8003fba:	4355      	muls	r5, r2
 8003fbc:	460e      	mov	r6, r1
 8003fbe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003fc2:	f000 f979 	bl	80042b8 <_malloc_r>
 8003fc6:	4604      	mov	r4, r0
 8003fc8:	b140      	cbz	r0, 8003fdc <__sfmoreglue+0x28>
 8003fca:	2100      	movs	r1, #0
 8003fcc:	e9c0 1600 	strd	r1, r6, [r0]
 8003fd0:	300c      	adds	r0, #12
 8003fd2:	60a0      	str	r0, [r4, #8]
 8003fd4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003fd8:	f7ff fdaa 	bl	8003b30 <memset>
 8003fdc:	4620      	mov	r0, r4
 8003fde:	bd70      	pop	{r4, r5, r6, pc}

08003fe0 <__sfp_lock_acquire>:
 8003fe0:	4801      	ldr	r0, [pc, #4]	; (8003fe8 <__sfp_lock_acquire+0x8>)
 8003fe2:	f000 b8b3 	b.w	800414c <__retarget_lock_acquire_recursive>
 8003fe6:	bf00      	nop
 8003fe8:	20000240 	.word	0x20000240

08003fec <__sfp_lock_release>:
 8003fec:	4801      	ldr	r0, [pc, #4]	; (8003ff4 <__sfp_lock_release+0x8>)
 8003fee:	f000 b8ae 	b.w	800414e <__retarget_lock_release_recursive>
 8003ff2:	bf00      	nop
 8003ff4:	20000240 	.word	0x20000240

08003ff8 <__sinit_lock_acquire>:
 8003ff8:	4801      	ldr	r0, [pc, #4]	; (8004000 <__sinit_lock_acquire+0x8>)
 8003ffa:	f000 b8a7 	b.w	800414c <__retarget_lock_acquire_recursive>
 8003ffe:	bf00      	nop
 8004000:	2000023b 	.word	0x2000023b

08004004 <__sinit_lock_release>:
 8004004:	4801      	ldr	r0, [pc, #4]	; (800400c <__sinit_lock_release+0x8>)
 8004006:	f000 b8a2 	b.w	800414e <__retarget_lock_release_recursive>
 800400a:	bf00      	nop
 800400c:	2000023b 	.word	0x2000023b

08004010 <__sinit>:
 8004010:	b510      	push	{r4, lr}
 8004012:	4604      	mov	r4, r0
 8004014:	f7ff fff0 	bl	8003ff8 <__sinit_lock_acquire>
 8004018:	69a3      	ldr	r3, [r4, #24]
 800401a:	b11b      	cbz	r3, 8004024 <__sinit+0x14>
 800401c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004020:	f7ff bff0 	b.w	8004004 <__sinit_lock_release>
 8004024:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004028:	6523      	str	r3, [r4, #80]	; 0x50
 800402a:	4b13      	ldr	r3, [pc, #76]	; (8004078 <__sinit+0x68>)
 800402c:	4a13      	ldr	r2, [pc, #76]	; (800407c <__sinit+0x6c>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	62a2      	str	r2, [r4, #40]	; 0x28
 8004032:	42a3      	cmp	r3, r4
 8004034:	bf04      	itt	eq
 8004036:	2301      	moveq	r3, #1
 8004038:	61a3      	streq	r3, [r4, #24]
 800403a:	4620      	mov	r0, r4
 800403c:	f000 f820 	bl	8004080 <__sfp>
 8004040:	6060      	str	r0, [r4, #4]
 8004042:	4620      	mov	r0, r4
 8004044:	f000 f81c 	bl	8004080 <__sfp>
 8004048:	60a0      	str	r0, [r4, #8]
 800404a:	4620      	mov	r0, r4
 800404c:	f000 f818 	bl	8004080 <__sfp>
 8004050:	2200      	movs	r2, #0
 8004052:	60e0      	str	r0, [r4, #12]
 8004054:	2104      	movs	r1, #4
 8004056:	6860      	ldr	r0, [r4, #4]
 8004058:	f7ff ff82 	bl	8003f60 <std>
 800405c:	68a0      	ldr	r0, [r4, #8]
 800405e:	2201      	movs	r2, #1
 8004060:	2109      	movs	r1, #9
 8004062:	f7ff ff7d 	bl	8003f60 <std>
 8004066:	68e0      	ldr	r0, [r4, #12]
 8004068:	2202      	movs	r2, #2
 800406a:	2112      	movs	r1, #18
 800406c:	f7ff ff78 	bl	8003f60 <std>
 8004070:	2301      	movs	r3, #1
 8004072:	61a3      	str	r3, [r4, #24]
 8004074:	e7d2      	b.n	800401c <__sinit+0xc>
 8004076:	bf00      	nop
 8004078:	08004b34 	.word	0x08004b34
 800407c:	08003fa9 	.word	0x08003fa9

08004080 <__sfp>:
 8004080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004082:	4607      	mov	r7, r0
 8004084:	f7ff ffac 	bl	8003fe0 <__sfp_lock_acquire>
 8004088:	4b1e      	ldr	r3, [pc, #120]	; (8004104 <__sfp+0x84>)
 800408a:	681e      	ldr	r6, [r3, #0]
 800408c:	69b3      	ldr	r3, [r6, #24]
 800408e:	b913      	cbnz	r3, 8004096 <__sfp+0x16>
 8004090:	4630      	mov	r0, r6
 8004092:	f7ff ffbd 	bl	8004010 <__sinit>
 8004096:	3648      	adds	r6, #72	; 0x48
 8004098:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800409c:	3b01      	subs	r3, #1
 800409e:	d503      	bpl.n	80040a8 <__sfp+0x28>
 80040a0:	6833      	ldr	r3, [r6, #0]
 80040a2:	b30b      	cbz	r3, 80040e8 <__sfp+0x68>
 80040a4:	6836      	ldr	r6, [r6, #0]
 80040a6:	e7f7      	b.n	8004098 <__sfp+0x18>
 80040a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80040ac:	b9d5      	cbnz	r5, 80040e4 <__sfp+0x64>
 80040ae:	4b16      	ldr	r3, [pc, #88]	; (8004108 <__sfp+0x88>)
 80040b0:	60e3      	str	r3, [r4, #12]
 80040b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80040b6:	6665      	str	r5, [r4, #100]	; 0x64
 80040b8:	f000 f847 	bl	800414a <__retarget_lock_init_recursive>
 80040bc:	f7ff ff96 	bl	8003fec <__sfp_lock_release>
 80040c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80040c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80040c8:	6025      	str	r5, [r4, #0]
 80040ca:	61a5      	str	r5, [r4, #24]
 80040cc:	2208      	movs	r2, #8
 80040ce:	4629      	mov	r1, r5
 80040d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80040d4:	f7ff fd2c 	bl	8003b30 <memset>
 80040d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80040dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80040e0:	4620      	mov	r0, r4
 80040e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040e4:	3468      	adds	r4, #104	; 0x68
 80040e6:	e7d9      	b.n	800409c <__sfp+0x1c>
 80040e8:	2104      	movs	r1, #4
 80040ea:	4638      	mov	r0, r7
 80040ec:	f7ff ff62 	bl	8003fb4 <__sfmoreglue>
 80040f0:	4604      	mov	r4, r0
 80040f2:	6030      	str	r0, [r6, #0]
 80040f4:	2800      	cmp	r0, #0
 80040f6:	d1d5      	bne.n	80040a4 <__sfp+0x24>
 80040f8:	f7ff ff78 	bl	8003fec <__sfp_lock_release>
 80040fc:	230c      	movs	r3, #12
 80040fe:	603b      	str	r3, [r7, #0]
 8004100:	e7ee      	b.n	80040e0 <__sfp+0x60>
 8004102:	bf00      	nop
 8004104:	08004b34 	.word	0x08004b34
 8004108:	ffff0001 	.word	0xffff0001

0800410c <_fwalk_reent>:
 800410c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004110:	4606      	mov	r6, r0
 8004112:	4688      	mov	r8, r1
 8004114:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004118:	2700      	movs	r7, #0
 800411a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800411e:	f1b9 0901 	subs.w	r9, r9, #1
 8004122:	d505      	bpl.n	8004130 <_fwalk_reent+0x24>
 8004124:	6824      	ldr	r4, [r4, #0]
 8004126:	2c00      	cmp	r4, #0
 8004128:	d1f7      	bne.n	800411a <_fwalk_reent+0xe>
 800412a:	4638      	mov	r0, r7
 800412c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004130:	89ab      	ldrh	r3, [r5, #12]
 8004132:	2b01      	cmp	r3, #1
 8004134:	d907      	bls.n	8004146 <_fwalk_reent+0x3a>
 8004136:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800413a:	3301      	adds	r3, #1
 800413c:	d003      	beq.n	8004146 <_fwalk_reent+0x3a>
 800413e:	4629      	mov	r1, r5
 8004140:	4630      	mov	r0, r6
 8004142:	47c0      	blx	r8
 8004144:	4307      	orrs	r7, r0
 8004146:	3568      	adds	r5, #104	; 0x68
 8004148:	e7e9      	b.n	800411e <_fwalk_reent+0x12>

0800414a <__retarget_lock_init_recursive>:
 800414a:	4770      	bx	lr

0800414c <__retarget_lock_acquire_recursive>:
 800414c:	4770      	bx	lr

0800414e <__retarget_lock_release_recursive>:
 800414e:	4770      	bx	lr

08004150 <__swhatbuf_r>:
 8004150:	b570      	push	{r4, r5, r6, lr}
 8004152:	460e      	mov	r6, r1
 8004154:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004158:	2900      	cmp	r1, #0
 800415a:	b096      	sub	sp, #88	; 0x58
 800415c:	4614      	mov	r4, r2
 800415e:	461d      	mov	r5, r3
 8004160:	da07      	bge.n	8004172 <__swhatbuf_r+0x22>
 8004162:	2300      	movs	r3, #0
 8004164:	602b      	str	r3, [r5, #0]
 8004166:	89b3      	ldrh	r3, [r6, #12]
 8004168:	061a      	lsls	r2, r3, #24
 800416a:	d410      	bmi.n	800418e <__swhatbuf_r+0x3e>
 800416c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004170:	e00e      	b.n	8004190 <__swhatbuf_r+0x40>
 8004172:	466a      	mov	r2, sp
 8004174:	f000 fc5e 	bl	8004a34 <_fstat_r>
 8004178:	2800      	cmp	r0, #0
 800417a:	dbf2      	blt.n	8004162 <__swhatbuf_r+0x12>
 800417c:	9a01      	ldr	r2, [sp, #4]
 800417e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004182:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004186:	425a      	negs	r2, r3
 8004188:	415a      	adcs	r2, r3
 800418a:	602a      	str	r2, [r5, #0]
 800418c:	e7ee      	b.n	800416c <__swhatbuf_r+0x1c>
 800418e:	2340      	movs	r3, #64	; 0x40
 8004190:	2000      	movs	r0, #0
 8004192:	6023      	str	r3, [r4, #0]
 8004194:	b016      	add	sp, #88	; 0x58
 8004196:	bd70      	pop	{r4, r5, r6, pc}

08004198 <__smakebuf_r>:
 8004198:	898b      	ldrh	r3, [r1, #12]
 800419a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800419c:	079d      	lsls	r5, r3, #30
 800419e:	4606      	mov	r6, r0
 80041a0:	460c      	mov	r4, r1
 80041a2:	d507      	bpl.n	80041b4 <__smakebuf_r+0x1c>
 80041a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80041a8:	6023      	str	r3, [r4, #0]
 80041aa:	6123      	str	r3, [r4, #16]
 80041ac:	2301      	movs	r3, #1
 80041ae:	6163      	str	r3, [r4, #20]
 80041b0:	b002      	add	sp, #8
 80041b2:	bd70      	pop	{r4, r5, r6, pc}
 80041b4:	ab01      	add	r3, sp, #4
 80041b6:	466a      	mov	r2, sp
 80041b8:	f7ff ffca 	bl	8004150 <__swhatbuf_r>
 80041bc:	9900      	ldr	r1, [sp, #0]
 80041be:	4605      	mov	r5, r0
 80041c0:	4630      	mov	r0, r6
 80041c2:	f000 f879 	bl	80042b8 <_malloc_r>
 80041c6:	b948      	cbnz	r0, 80041dc <__smakebuf_r+0x44>
 80041c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041cc:	059a      	lsls	r2, r3, #22
 80041ce:	d4ef      	bmi.n	80041b0 <__smakebuf_r+0x18>
 80041d0:	f023 0303 	bic.w	r3, r3, #3
 80041d4:	f043 0302 	orr.w	r3, r3, #2
 80041d8:	81a3      	strh	r3, [r4, #12]
 80041da:	e7e3      	b.n	80041a4 <__smakebuf_r+0xc>
 80041dc:	4b0d      	ldr	r3, [pc, #52]	; (8004214 <__smakebuf_r+0x7c>)
 80041de:	62b3      	str	r3, [r6, #40]	; 0x28
 80041e0:	89a3      	ldrh	r3, [r4, #12]
 80041e2:	6020      	str	r0, [r4, #0]
 80041e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041e8:	81a3      	strh	r3, [r4, #12]
 80041ea:	9b00      	ldr	r3, [sp, #0]
 80041ec:	6163      	str	r3, [r4, #20]
 80041ee:	9b01      	ldr	r3, [sp, #4]
 80041f0:	6120      	str	r0, [r4, #16]
 80041f2:	b15b      	cbz	r3, 800420c <__smakebuf_r+0x74>
 80041f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80041f8:	4630      	mov	r0, r6
 80041fa:	f000 fc2d 	bl	8004a58 <_isatty_r>
 80041fe:	b128      	cbz	r0, 800420c <__smakebuf_r+0x74>
 8004200:	89a3      	ldrh	r3, [r4, #12]
 8004202:	f023 0303 	bic.w	r3, r3, #3
 8004206:	f043 0301 	orr.w	r3, r3, #1
 800420a:	81a3      	strh	r3, [r4, #12]
 800420c:	89a0      	ldrh	r0, [r4, #12]
 800420e:	4305      	orrs	r5, r0
 8004210:	81a5      	strh	r5, [r4, #12]
 8004212:	e7cd      	b.n	80041b0 <__smakebuf_r+0x18>
 8004214:	08003fa9 	.word	0x08003fa9

08004218 <_free_r>:
 8004218:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800421a:	2900      	cmp	r1, #0
 800421c:	d048      	beq.n	80042b0 <_free_r+0x98>
 800421e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004222:	9001      	str	r0, [sp, #4]
 8004224:	2b00      	cmp	r3, #0
 8004226:	f1a1 0404 	sub.w	r4, r1, #4
 800422a:	bfb8      	it	lt
 800422c:	18e4      	addlt	r4, r4, r3
 800422e:	f000 fc35 	bl	8004a9c <__malloc_lock>
 8004232:	4a20      	ldr	r2, [pc, #128]	; (80042b4 <_free_r+0x9c>)
 8004234:	9801      	ldr	r0, [sp, #4]
 8004236:	6813      	ldr	r3, [r2, #0]
 8004238:	4615      	mov	r5, r2
 800423a:	b933      	cbnz	r3, 800424a <_free_r+0x32>
 800423c:	6063      	str	r3, [r4, #4]
 800423e:	6014      	str	r4, [r2, #0]
 8004240:	b003      	add	sp, #12
 8004242:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004246:	f000 bc2f 	b.w	8004aa8 <__malloc_unlock>
 800424a:	42a3      	cmp	r3, r4
 800424c:	d90b      	bls.n	8004266 <_free_r+0x4e>
 800424e:	6821      	ldr	r1, [r4, #0]
 8004250:	1862      	adds	r2, r4, r1
 8004252:	4293      	cmp	r3, r2
 8004254:	bf04      	itt	eq
 8004256:	681a      	ldreq	r2, [r3, #0]
 8004258:	685b      	ldreq	r3, [r3, #4]
 800425a:	6063      	str	r3, [r4, #4]
 800425c:	bf04      	itt	eq
 800425e:	1852      	addeq	r2, r2, r1
 8004260:	6022      	streq	r2, [r4, #0]
 8004262:	602c      	str	r4, [r5, #0]
 8004264:	e7ec      	b.n	8004240 <_free_r+0x28>
 8004266:	461a      	mov	r2, r3
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	b10b      	cbz	r3, 8004270 <_free_r+0x58>
 800426c:	42a3      	cmp	r3, r4
 800426e:	d9fa      	bls.n	8004266 <_free_r+0x4e>
 8004270:	6811      	ldr	r1, [r2, #0]
 8004272:	1855      	adds	r5, r2, r1
 8004274:	42a5      	cmp	r5, r4
 8004276:	d10b      	bne.n	8004290 <_free_r+0x78>
 8004278:	6824      	ldr	r4, [r4, #0]
 800427a:	4421      	add	r1, r4
 800427c:	1854      	adds	r4, r2, r1
 800427e:	42a3      	cmp	r3, r4
 8004280:	6011      	str	r1, [r2, #0]
 8004282:	d1dd      	bne.n	8004240 <_free_r+0x28>
 8004284:	681c      	ldr	r4, [r3, #0]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	6053      	str	r3, [r2, #4]
 800428a:	4421      	add	r1, r4
 800428c:	6011      	str	r1, [r2, #0]
 800428e:	e7d7      	b.n	8004240 <_free_r+0x28>
 8004290:	d902      	bls.n	8004298 <_free_r+0x80>
 8004292:	230c      	movs	r3, #12
 8004294:	6003      	str	r3, [r0, #0]
 8004296:	e7d3      	b.n	8004240 <_free_r+0x28>
 8004298:	6825      	ldr	r5, [r4, #0]
 800429a:	1961      	adds	r1, r4, r5
 800429c:	428b      	cmp	r3, r1
 800429e:	bf04      	itt	eq
 80042a0:	6819      	ldreq	r1, [r3, #0]
 80042a2:	685b      	ldreq	r3, [r3, #4]
 80042a4:	6063      	str	r3, [r4, #4]
 80042a6:	bf04      	itt	eq
 80042a8:	1949      	addeq	r1, r1, r5
 80042aa:	6021      	streq	r1, [r4, #0]
 80042ac:	6054      	str	r4, [r2, #4]
 80042ae:	e7c7      	b.n	8004240 <_free_r+0x28>
 80042b0:	b003      	add	sp, #12
 80042b2:	bd30      	pop	{r4, r5, pc}
 80042b4:	200001a8 	.word	0x200001a8

080042b8 <_malloc_r>:
 80042b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ba:	1ccd      	adds	r5, r1, #3
 80042bc:	f025 0503 	bic.w	r5, r5, #3
 80042c0:	3508      	adds	r5, #8
 80042c2:	2d0c      	cmp	r5, #12
 80042c4:	bf38      	it	cc
 80042c6:	250c      	movcc	r5, #12
 80042c8:	2d00      	cmp	r5, #0
 80042ca:	4606      	mov	r6, r0
 80042cc:	db01      	blt.n	80042d2 <_malloc_r+0x1a>
 80042ce:	42a9      	cmp	r1, r5
 80042d0:	d903      	bls.n	80042da <_malloc_r+0x22>
 80042d2:	230c      	movs	r3, #12
 80042d4:	6033      	str	r3, [r6, #0]
 80042d6:	2000      	movs	r0, #0
 80042d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042da:	f000 fbdf 	bl	8004a9c <__malloc_lock>
 80042de:	4921      	ldr	r1, [pc, #132]	; (8004364 <_malloc_r+0xac>)
 80042e0:	680a      	ldr	r2, [r1, #0]
 80042e2:	4614      	mov	r4, r2
 80042e4:	b99c      	cbnz	r4, 800430e <_malloc_r+0x56>
 80042e6:	4f20      	ldr	r7, [pc, #128]	; (8004368 <_malloc_r+0xb0>)
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	b923      	cbnz	r3, 80042f6 <_malloc_r+0x3e>
 80042ec:	4621      	mov	r1, r4
 80042ee:	4630      	mov	r0, r6
 80042f0:	f000 fb2a 	bl	8004948 <_sbrk_r>
 80042f4:	6038      	str	r0, [r7, #0]
 80042f6:	4629      	mov	r1, r5
 80042f8:	4630      	mov	r0, r6
 80042fa:	f000 fb25 	bl	8004948 <_sbrk_r>
 80042fe:	1c43      	adds	r3, r0, #1
 8004300:	d123      	bne.n	800434a <_malloc_r+0x92>
 8004302:	230c      	movs	r3, #12
 8004304:	6033      	str	r3, [r6, #0]
 8004306:	4630      	mov	r0, r6
 8004308:	f000 fbce 	bl	8004aa8 <__malloc_unlock>
 800430c:	e7e3      	b.n	80042d6 <_malloc_r+0x1e>
 800430e:	6823      	ldr	r3, [r4, #0]
 8004310:	1b5b      	subs	r3, r3, r5
 8004312:	d417      	bmi.n	8004344 <_malloc_r+0x8c>
 8004314:	2b0b      	cmp	r3, #11
 8004316:	d903      	bls.n	8004320 <_malloc_r+0x68>
 8004318:	6023      	str	r3, [r4, #0]
 800431a:	441c      	add	r4, r3
 800431c:	6025      	str	r5, [r4, #0]
 800431e:	e004      	b.n	800432a <_malloc_r+0x72>
 8004320:	6863      	ldr	r3, [r4, #4]
 8004322:	42a2      	cmp	r2, r4
 8004324:	bf0c      	ite	eq
 8004326:	600b      	streq	r3, [r1, #0]
 8004328:	6053      	strne	r3, [r2, #4]
 800432a:	4630      	mov	r0, r6
 800432c:	f000 fbbc 	bl	8004aa8 <__malloc_unlock>
 8004330:	f104 000b 	add.w	r0, r4, #11
 8004334:	1d23      	adds	r3, r4, #4
 8004336:	f020 0007 	bic.w	r0, r0, #7
 800433a:	1ac2      	subs	r2, r0, r3
 800433c:	d0cc      	beq.n	80042d8 <_malloc_r+0x20>
 800433e:	1a1b      	subs	r3, r3, r0
 8004340:	50a3      	str	r3, [r4, r2]
 8004342:	e7c9      	b.n	80042d8 <_malloc_r+0x20>
 8004344:	4622      	mov	r2, r4
 8004346:	6864      	ldr	r4, [r4, #4]
 8004348:	e7cc      	b.n	80042e4 <_malloc_r+0x2c>
 800434a:	1cc4      	adds	r4, r0, #3
 800434c:	f024 0403 	bic.w	r4, r4, #3
 8004350:	42a0      	cmp	r0, r4
 8004352:	d0e3      	beq.n	800431c <_malloc_r+0x64>
 8004354:	1a21      	subs	r1, r4, r0
 8004356:	4630      	mov	r0, r6
 8004358:	f000 faf6 	bl	8004948 <_sbrk_r>
 800435c:	3001      	adds	r0, #1
 800435e:	d1dd      	bne.n	800431c <_malloc_r+0x64>
 8004360:	e7cf      	b.n	8004302 <_malloc_r+0x4a>
 8004362:	bf00      	nop
 8004364:	200001a8 	.word	0x200001a8
 8004368:	200001ac 	.word	0x200001ac

0800436c <__sfputc_r>:
 800436c:	6893      	ldr	r3, [r2, #8]
 800436e:	3b01      	subs	r3, #1
 8004370:	2b00      	cmp	r3, #0
 8004372:	b410      	push	{r4}
 8004374:	6093      	str	r3, [r2, #8]
 8004376:	da08      	bge.n	800438a <__sfputc_r+0x1e>
 8004378:	6994      	ldr	r4, [r2, #24]
 800437a:	42a3      	cmp	r3, r4
 800437c:	db01      	blt.n	8004382 <__sfputc_r+0x16>
 800437e:	290a      	cmp	r1, #10
 8004380:	d103      	bne.n	800438a <__sfputc_r+0x1e>
 8004382:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004386:	f7ff bc69 	b.w	8003c5c <__swbuf_r>
 800438a:	6813      	ldr	r3, [r2, #0]
 800438c:	1c58      	adds	r0, r3, #1
 800438e:	6010      	str	r0, [r2, #0]
 8004390:	7019      	strb	r1, [r3, #0]
 8004392:	4608      	mov	r0, r1
 8004394:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004398:	4770      	bx	lr

0800439a <__sfputs_r>:
 800439a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800439c:	4606      	mov	r6, r0
 800439e:	460f      	mov	r7, r1
 80043a0:	4614      	mov	r4, r2
 80043a2:	18d5      	adds	r5, r2, r3
 80043a4:	42ac      	cmp	r4, r5
 80043a6:	d101      	bne.n	80043ac <__sfputs_r+0x12>
 80043a8:	2000      	movs	r0, #0
 80043aa:	e007      	b.n	80043bc <__sfputs_r+0x22>
 80043ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043b0:	463a      	mov	r2, r7
 80043b2:	4630      	mov	r0, r6
 80043b4:	f7ff ffda 	bl	800436c <__sfputc_r>
 80043b8:	1c43      	adds	r3, r0, #1
 80043ba:	d1f3      	bne.n	80043a4 <__sfputs_r+0xa>
 80043bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080043c0 <_vfiprintf_r>:
 80043c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043c4:	460d      	mov	r5, r1
 80043c6:	b09d      	sub	sp, #116	; 0x74
 80043c8:	4614      	mov	r4, r2
 80043ca:	4698      	mov	r8, r3
 80043cc:	4606      	mov	r6, r0
 80043ce:	b118      	cbz	r0, 80043d8 <_vfiprintf_r+0x18>
 80043d0:	6983      	ldr	r3, [r0, #24]
 80043d2:	b90b      	cbnz	r3, 80043d8 <_vfiprintf_r+0x18>
 80043d4:	f7ff fe1c 	bl	8004010 <__sinit>
 80043d8:	4b89      	ldr	r3, [pc, #548]	; (8004600 <_vfiprintf_r+0x240>)
 80043da:	429d      	cmp	r5, r3
 80043dc:	d11b      	bne.n	8004416 <_vfiprintf_r+0x56>
 80043de:	6875      	ldr	r5, [r6, #4]
 80043e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80043e2:	07d9      	lsls	r1, r3, #31
 80043e4:	d405      	bmi.n	80043f2 <_vfiprintf_r+0x32>
 80043e6:	89ab      	ldrh	r3, [r5, #12]
 80043e8:	059a      	lsls	r2, r3, #22
 80043ea:	d402      	bmi.n	80043f2 <_vfiprintf_r+0x32>
 80043ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80043ee:	f7ff fead 	bl	800414c <__retarget_lock_acquire_recursive>
 80043f2:	89ab      	ldrh	r3, [r5, #12]
 80043f4:	071b      	lsls	r3, r3, #28
 80043f6:	d501      	bpl.n	80043fc <_vfiprintf_r+0x3c>
 80043f8:	692b      	ldr	r3, [r5, #16]
 80043fa:	b9eb      	cbnz	r3, 8004438 <_vfiprintf_r+0x78>
 80043fc:	4629      	mov	r1, r5
 80043fe:	4630      	mov	r0, r6
 8004400:	f7ff fc7e 	bl	8003d00 <__swsetup_r>
 8004404:	b1c0      	cbz	r0, 8004438 <_vfiprintf_r+0x78>
 8004406:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004408:	07dc      	lsls	r4, r3, #31
 800440a:	d50e      	bpl.n	800442a <_vfiprintf_r+0x6a>
 800440c:	f04f 30ff 	mov.w	r0, #4294967295
 8004410:	b01d      	add	sp, #116	; 0x74
 8004412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004416:	4b7b      	ldr	r3, [pc, #492]	; (8004604 <_vfiprintf_r+0x244>)
 8004418:	429d      	cmp	r5, r3
 800441a:	d101      	bne.n	8004420 <_vfiprintf_r+0x60>
 800441c:	68b5      	ldr	r5, [r6, #8]
 800441e:	e7df      	b.n	80043e0 <_vfiprintf_r+0x20>
 8004420:	4b79      	ldr	r3, [pc, #484]	; (8004608 <_vfiprintf_r+0x248>)
 8004422:	429d      	cmp	r5, r3
 8004424:	bf08      	it	eq
 8004426:	68f5      	ldreq	r5, [r6, #12]
 8004428:	e7da      	b.n	80043e0 <_vfiprintf_r+0x20>
 800442a:	89ab      	ldrh	r3, [r5, #12]
 800442c:	0598      	lsls	r0, r3, #22
 800442e:	d4ed      	bmi.n	800440c <_vfiprintf_r+0x4c>
 8004430:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004432:	f7ff fe8c 	bl	800414e <__retarget_lock_release_recursive>
 8004436:	e7e9      	b.n	800440c <_vfiprintf_r+0x4c>
 8004438:	2300      	movs	r3, #0
 800443a:	9309      	str	r3, [sp, #36]	; 0x24
 800443c:	2320      	movs	r3, #32
 800443e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004442:	f8cd 800c 	str.w	r8, [sp, #12]
 8004446:	2330      	movs	r3, #48	; 0x30
 8004448:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800460c <_vfiprintf_r+0x24c>
 800444c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004450:	f04f 0901 	mov.w	r9, #1
 8004454:	4623      	mov	r3, r4
 8004456:	469a      	mov	sl, r3
 8004458:	f813 2b01 	ldrb.w	r2, [r3], #1
 800445c:	b10a      	cbz	r2, 8004462 <_vfiprintf_r+0xa2>
 800445e:	2a25      	cmp	r2, #37	; 0x25
 8004460:	d1f9      	bne.n	8004456 <_vfiprintf_r+0x96>
 8004462:	ebba 0b04 	subs.w	fp, sl, r4
 8004466:	d00b      	beq.n	8004480 <_vfiprintf_r+0xc0>
 8004468:	465b      	mov	r3, fp
 800446a:	4622      	mov	r2, r4
 800446c:	4629      	mov	r1, r5
 800446e:	4630      	mov	r0, r6
 8004470:	f7ff ff93 	bl	800439a <__sfputs_r>
 8004474:	3001      	adds	r0, #1
 8004476:	f000 80aa 	beq.w	80045ce <_vfiprintf_r+0x20e>
 800447a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800447c:	445a      	add	r2, fp
 800447e:	9209      	str	r2, [sp, #36]	; 0x24
 8004480:	f89a 3000 	ldrb.w	r3, [sl]
 8004484:	2b00      	cmp	r3, #0
 8004486:	f000 80a2 	beq.w	80045ce <_vfiprintf_r+0x20e>
 800448a:	2300      	movs	r3, #0
 800448c:	f04f 32ff 	mov.w	r2, #4294967295
 8004490:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004494:	f10a 0a01 	add.w	sl, sl, #1
 8004498:	9304      	str	r3, [sp, #16]
 800449a:	9307      	str	r3, [sp, #28]
 800449c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80044a0:	931a      	str	r3, [sp, #104]	; 0x68
 80044a2:	4654      	mov	r4, sl
 80044a4:	2205      	movs	r2, #5
 80044a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044aa:	4858      	ldr	r0, [pc, #352]	; (800460c <_vfiprintf_r+0x24c>)
 80044ac:	f7fb fec8 	bl	8000240 <memchr>
 80044b0:	9a04      	ldr	r2, [sp, #16]
 80044b2:	b9d8      	cbnz	r0, 80044ec <_vfiprintf_r+0x12c>
 80044b4:	06d1      	lsls	r1, r2, #27
 80044b6:	bf44      	itt	mi
 80044b8:	2320      	movmi	r3, #32
 80044ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044be:	0713      	lsls	r3, r2, #28
 80044c0:	bf44      	itt	mi
 80044c2:	232b      	movmi	r3, #43	; 0x2b
 80044c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044c8:	f89a 3000 	ldrb.w	r3, [sl]
 80044cc:	2b2a      	cmp	r3, #42	; 0x2a
 80044ce:	d015      	beq.n	80044fc <_vfiprintf_r+0x13c>
 80044d0:	9a07      	ldr	r2, [sp, #28]
 80044d2:	4654      	mov	r4, sl
 80044d4:	2000      	movs	r0, #0
 80044d6:	f04f 0c0a 	mov.w	ip, #10
 80044da:	4621      	mov	r1, r4
 80044dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80044e0:	3b30      	subs	r3, #48	; 0x30
 80044e2:	2b09      	cmp	r3, #9
 80044e4:	d94e      	bls.n	8004584 <_vfiprintf_r+0x1c4>
 80044e6:	b1b0      	cbz	r0, 8004516 <_vfiprintf_r+0x156>
 80044e8:	9207      	str	r2, [sp, #28]
 80044ea:	e014      	b.n	8004516 <_vfiprintf_r+0x156>
 80044ec:	eba0 0308 	sub.w	r3, r0, r8
 80044f0:	fa09 f303 	lsl.w	r3, r9, r3
 80044f4:	4313      	orrs	r3, r2
 80044f6:	9304      	str	r3, [sp, #16]
 80044f8:	46a2      	mov	sl, r4
 80044fa:	e7d2      	b.n	80044a2 <_vfiprintf_r+0xe2>
 80044fc:	9b03      	ldr	r3, [sp, #12]
 80044fe:	1d19      	adds	r1, r3, #4
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	9103      	str	r1, [sp, #12]
 8004504:	2b00      	cmp	r3, #0
 8004506:	bfbb      	ittet	lt
 8004508:	425b      	neglt	r3, r3
 800450a:	f042 0202 	orrlt.w	r2, r2, #2
 800450e:	9307      	strge	r3, [sp, #28]
 8004510:	9307      	strlt	r3, [sp, #28]
 8004512:	bfb8      	it	lt
 8004514:	9204      	strlt	r2, [sp, #16]
 8004516:	7823      	ldrb	r3, [r4, #0]
 8004518:	2b2e      	cmp	r3, #46	; 0x2e
 800451a:	d10c      	bne.n	8004536 <_vfiprintf_r+0x176>
 800451c:	7863      	ldrb	r3, [r4, #1]
 800451e:	2b2a      	cmp	r3, #42	; 0x2a
 8004520:	d135      	bne.n	800458e <_vfiprintf_r+0x1ce>
 8004522:	9b03      	ldr	r3, [sp, #12]
 8004524:	1d1a      	adds	r2, r3, #4
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	9203      	str	r2, [sp, #12]
 800452a:	2b00      	cmp	r3, #0
 800452c:	bfb8      	it	lt
 800452e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004532:	3402      	adds	r4, #2
 8004534:	9305      	str	r3, [sp, #20]
 8004536:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800461c <_vfiprintf_r+0x25c>
 800453a:	7821      	ldrb	r1, [r4, #0]
 800453c:	2203      	movs	r2, #3
 800453e:	4650      	mov	r0, sl
 8004540:	f7fb fe7e 	bl	8000240 <memchr>
 8004544:	b140      	cbz	r0, 8004558 <_vfiprintf_r+0x198>
 8004546:	2340      	movs	r3, #64	; 0x40
 8004548:	eba0 000a 	sub.w	r0, r0, sl
 800454c:	fa03 f000 	lsl.w	r0, r3, r0
 8004550:	9b04      	ldr	r3, [sp, #16]
 8004552:	4303      	orrs	r3, r0
 8004554:	3401      	adds	r4, #1
 8004556:	9304      	str	r3, [sp, #16]
 8004558:	f814 1b01 	ldrb.w	r1, [r4], #1
 800455c:	482c      	ldr	r0, [pc, #176]	; (8004610 <_vfiprintf_r+0x250>)
 800455e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004562:	2206      	movs	r2, #6
 8004564:	f7fb fe6c 	bl	8000240 <memchr>
 8004568:	2800      	cmp	r0, #0
 800456a:	d03f      	beq.n	80045ec <_vfiprintf_r+0x22c>
 800456c:	4b29      	ldr	r3, [pc, #164]	; (8004614 <_vfiprintf_r+0x254>)
 800456e:	bb1b      	cbnz	r3, 80045b8 <_vfiprintf_r+0x1f8>
 8004570:	9b03      	ldr	r3, [sp, #12]
 8004572:	3307      	adds	r3, #7
 8004574:	f023 0307 	bic.w	r3, r3, #7
 8004578:	3308      	adds	r3, #8
 800457a:	9303      	str	r3, [sp, #12]
 800457c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800457e:	443b      	add	r3, r7
 8004580:	9309      	str	r3, [sp, #36]	; 0x24
 8004582:	e767      	b.n	8004454 <_vfiprintf_r+0x94>
 8004584:	fb0c 3202 	mla	r2, ip, r2, r3
 8004588:	460c      	mov	r4, r1
 800458a:	2001      	movs	r0, #1
 800458c:	e7a5      	b.n	80044da <_vfiprintf_r+0x11a>
 800458e:	2300      	movs	r3, #0
 8004590:	3401      	adds	r4, #1
 8004592:	9305      	str	r3, [sp, #20]
 8004594:	4619      	mov	r1, r3
 8004596:	f04f 0c0a 	mov.w	ip, #10
 800459a:	4620      	mov	r0, r4
 800459c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80045a0:	3a30      	subs	r2, #48	; 0x30
 80045a2:	2a09      	cmp	r2, #9
 80045a4:	d903      	bls.n	80045ae <_vfiprintf_r+0x1ee>
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d0c5      	beq.n	8004536 <_vfiprintf_r+0x176>
 80045aa:	9105      	str	r1, [sp, #20]
 80045ac:	e7c3      	b.n	8004536 <_vfiprintf_r+0x176>
 80045ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80045b2:	4604      	mov	r4, r0
 80045b4:	2301      	movs	r3, #1
 80045b6:	e7f0      	b.n	800459a <_vfiprintf_r+0x1da>
 80045b8:	ab03      	add	r3, sp, #12
 80045ba:	9300      	str	r3, [sp, #0]
 80045bc:	462a      	mov	r2, r5
 80045be:	4b16      	ldr	r3, [pc, #88]	; (8004618 <_vfiprintf_r+0x258>)
 80045c0:	a904      	add	r1, sp, #16
 80045c2:	4630      	mov	r0, r6
 80045c4:	f3af 8000 	nop.w
 80045c8:	4607      	mov	r7, r0
 80045ca:	1c78      	adds	r0, r7, #1
 80045cc:	d1d6      	bne.n	800457c <_vfiprintf_r+0x1bc>
 80045ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80045d0:	07d9      	lsls	r1, r3, #31
 80045d2:	d405      	bmi.n	80045e0 <_vfiprintf_r+0x220>
 80045d4:	89ab      	ldrh	r3, [r5, #12]
 80045d6:	059a      	lsls	r2, r3, #22
 80045d8:	d402      	bmi.n	80045e0 <_vfiprintf_r+0x220>
 80045da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80045dc:	f7ff fdb7 	bl	800414e <__retarget_lock_release_recursive>
 80045e0:	89ab      	ldrh	r3, [r5, #12]
 80045e2:	065b      	lsls	r3, r3, #25
 80045e4:	f53f af12 	bmi.w	800440c <_vfiprintf_r+0x4c>
 80045e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80045ea:	e711      	b.n	8004410 <_vfiprintf_r+0x50>
 80045ec:	ab03      	add	r3, sp, #12
 80045ee:	9300      	str	r3, [sp, #0]
 80045f0:	462a      	mov	r2, r5
 80045f2:	4b09      	ldr	r3, [pc, #36]	; (8004618 <_vfiprintf_r+0x258>)
 80045f4:	a904      	add	r1, sp, #16
 80045f6:	4630      	mov	r0, r6
 80045f8:	f000 f880 	bl	80046fc <_printf_i>
 80045fc:	e7e4      	b.n	80045c8 <_vfiprintf_r+0x208>
 80045fe:	bf00      	nop
 8004600:	08004b58 	.word	0x08004b58
 8004604:	08004b78 	.word	0x08004b78
 8004608:	08004b38 	.word	0x08004b38
 800460c:	08004b98 	.word	0x08004b98
 8004610:	08004ba2 	.word	0x08004ba2
 8004614:	00000000 	.word	0x00000000
 8004618:	0800439b 	.word	0x0800439b
 800461c:	08004b9e 	.word	0x08004b9e

08004620 <_printf_common>:
 8004620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004624:	4616      	mov	r6, r2
 8004626:	4699      	mov	r9, r3
 8004628:	688a      	ldr	r2, [r1, #8]
 800462a:	690b      	ldr	r3, [r1, #16]
 800462c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004630:	4293      	cmp	r3, r2
 8004632:	bfb8      	it	lt
 8004634:	4613      	movlt	r3, r2
 8004636:	6033      	str	r3, [r6, #0]
 8004638:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800463c:	4607      	mov	r7, r0
 800463e:	460c      	mov	r4, r1
 8004640:	b10a      	cbz	r2, 8004646 <_printf_common+0x26>
 8004642:	3301      	adds	r3, #1
 8004644:	6033      	str	r3, [r6, #0]
 8004646:	6823      	ldr	r3, [r4, #0]
 8004648:	0699      	lsls	r1, r3, #26
 800464a:	bf42      	ittt	mi
 800464c:	6833      	ldrmi	r3, [r6, #0]
 800464e:	3302      	addmi	r3, #2
 8004650:	6033      	strmi	r3, [r6, #0]
 8004652:	6825      	ldr	r5, [r4, #0]
 8004654:	f015 0506 	ands.w	r5, r5, #6
 8004658:	d106      	bne.n	8004668 <_printf_common+0x48>
 800465a:	f104 0a19 	add.w	sl, r4, #25
 800465e:	68e3      	ldr	r3, [r4, #12]
 8004660:	6832      	ldr	r2, [r6, #0]
 8004662:	1a9b      	subs	r3, r3, r2
 8004664:	42ab      	cmp	r3, r5
 8004666:	dc26      	bgt.n	80046b6 <_printf_common+0x96>
 8004668:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800466c:	1e13      	subs	r3, r2, #0
 800466e:	6822      	ldr	r2, [r4, #0]
 8004670:	bf18      	it	ne
 8004672:	2301      	movne	r3, #1
 8004674:	0692      	lsls	r2, r2, #26
 8004676:	d42b      	bmi.n	80046d0 <_printf_common+0xb0>
 8004678:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800467c:	4649      	mov	r1, r9
 800467e:	4638      	mov	r0, r7
 8004680:	47c0      	blx	r8
 8004682:	3001      	adds	r0, #1
 8004684:	d01e      	beq.n	80046c4 <_printf_common+0xa4>
 8004686:	6823      	ldr	r3, [r4, #0]
 8004688:	68e5      	ldr	r5, [r4, #12]
 800468a:	6832      	ldr	r2, [r6, #0]
 800468c:	f003 0306 	and.w	r3, r3, #6
 8004690:	2b04      	cmp	r3, #4
 8004692:	bf08      	it	eq
 8004694:	1aad      	subeq	r5, r5, r2
 8004696:	68a3      	ldr	r3, [r4, #8]
 8004698:	6922      	ldr	r2, [r4, #16]
 800469a:	bf0c      	ite	eq
 800469c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046a0:	2500      	movne	r5, #0
 80046a2:	4293      	cmp	r3, r2
 80046a4:	bfc4      	itt	gt
 80046a6:	1a9b      	subgt	r3, r3, r2
 80046a8:	18ed      	addgt	r5, r5, r3
 80046aa:	2600      	movs	r6, #0
 80046ac:	341a      	adds	r4, #26
 80046ae:	42b5      	cmp	r5, r6
 80046b0:	d11a      	bne.n	80046e8 <_printf_common+0xc8>
 80046b2:	2000      	movs	r0, #0
 80046b4:	e008      	b.n	80046c8 <_printf_common+0xa8>
 80046b6:	2301      	movs	r3, #1
 80046b8:	4652      	mov	r2, sl
 80046ba:	4649      	mov	r1, r9
 80046bc:	4638      	mov	r0, r7
 80046be:	47c0      	blx	r8
 80046c0:	3001      	adds	r0, #1
 80046c2:	d103      	bne.n	80046cc <_printf_common+0xac>
 80046c4:	f04f 30ff 	mov.w	r0, #4294967295
 80046c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046cc:	3501      	adds	r5, #1
 80046ce:	e7c6      	b.n	800465e <_printf_common+0x3e>
 80046d0:	18e1      	adds	r1, r4, r3
 80046d2:	1c5a      	adds	r2, r3, #1
 80046d4:	2030      	movs	r0, #48	; 0x30
 80046d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80046da:	4422      	add	r2, r4
 80046dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80046e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80046e4:	3302      	adds	r3, #2
 80046e6:	e7c7      	b.n	8004678 <_printf_common+0x58>
 80046e8:	2301      	movs	r3, #1
 80046ea:	4622      	mov	r2, r4
 80046ec:	4649      	mov	r1, r9
 80046ee:	4638      	mov	r0, r7
 80046f0:	47c0      	blx	r8
 80046f2:	3001      	adds	r0, #1
 80046f4:	d0e6      	beq.n	80046c4 <_printf_common+0xa4>
 80046f6:	3601      	adds	r6, #1
 80046f8:	e7d9      	b.n	80046ae <_printf_common+0x8e>
	...

080046fc <_printf_i>:
 80046fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004700:	460c      	mov	r4, r1
 8004702:	4691      	mov	r9, r2
 8004704:	7e27      	ldrb	r7, [r4, #24]
 8004706:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004708:	2f78      	cmp	r7, #120	; 0x78
 800470a:	4680      	mov	r8, r0
 800470c:	469a      	mov	sl, r3
 800470e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004712:	d807      	bhi.n	8004724 <_printf_i+0x28>
 8004714:	2f62      	cmp	r7, #98	; 0x62
 8004716:	d80a      	bhi.n	800472e <_printf_i+0x32>
 8004718:	2f00      	cmp	r7, #0
 800471a:	f000 80d8 	beq.w	80048ce <_printf_i+0x1d2>
 800471e:	2f58      	cmp	r7, #88	; 0x58
 8004720:	f000 80a3 	beq.w	800486a <_printf_i+0x16e>
 8004724:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004728:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800472c:	e03a      	b.n	80047a4 <_printf_i+0xa8>
 800472e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004732:	2b15      	cmp	r3, #21
 8004734:	d8f6      	bhi.n	8004724 <_printf_i+0x28>
 8004736:	a001      	add	r0, pc, #4	; (adr r0, 800473c <_printf_i+0x40>)
 8004738:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800473c:	08004795 	.word	0x08004795
 8004740:	080047a9 	.word	0x080047a9
 8004744:	08004725 	.word	0x08004725
 8004748:	08004725 	.word	0x08004725
 800474c:	08004725 	.word	0x08004725
 8004750:	08004725 	.word	0x08004725
 8004754:	080047a9 	.word	0x080047a9
 8004758:	08004725 	.word	0x08004725
 800475c:	08004725 	.word	0x08004725
 8004760:	08004725 	.word	0x08004725
 8004764:	08004725 	.word	0x08004725
 8004768:	080048b5 	.word	0x080048b5
 800476c:	080047d9 	.word	0x080047d9
 8004770:	08004897 	.word	0x08004897
 8004774:	08004725 	.word	0x08004725
 8004778:	08004725 	.word	0x08004725
 800477c:	080048d7 	.word	0x080048d7
 8004780:	08004725 	.word	0x08004725
 8004784:	080047d9 	.word	0x080047d9
 8004788:	08004725 	.word	0x08004725
 800478c:	08004725 	.word	0x08004725
 8004790:	0800489f 	.word	0x0800489f
 8004794:	680b      	ldr	r3, [r1, #0]
 8004796:	1d1a      	adds	r2, r3, #4
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	600a      	str	r2, [r1, #0]
 800479c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80047a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047a4:	2301      	movs	r3, #1
 80047a6:	e0a3      	b.n	80048f0 <_printf_i+0x1f4>
 80047a8:	6825      	ldr	r5, [r4, #0]
 80047aa:	6808      	ldr	r0, [r1, #0]
 80047ac:	062e      	lsls	r6, r5, #24
 80047ae:	f100 0304 	add.w	r3, r0, #4
 80047b2:	d50a      	bpl.n	80047ca <_printf_i+0xce>
 80047b4:	6805      	ldr	r5, [r0, #0]
 80047b6:	600b      	str	r3, [r1, #0]
 80047b8:	2d00      	cmp	r5, #0
 80047ba:	da03      	bge.n	80047c4 <_printf_i+0xc8>
 80047bc:	232d      	movs	r3, #45	; 0x2d
 80047be:	426d      	negs	r5, r5
 80047c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047c4:	485e      	ldr	r0, [pc, #376]	; (8004940 <_printf_i+0x244>)
 80047c6:	230a      	movs	r3, #10
 80047c8:	e019      	b.n	80047fe <_printf_i+0x102>
 80047ca:	f015 0f40 	tst.w	r5, #64	; 0x40
 80047ce:	6805      	ldr	r5, [r0, #0]
 80047d0:	600b      	str	r3, [r1, #0]
 80047d2:	bf18      	it	ne
 80047d4:	b22d      	sxthne	r5, r5
 80047d6:	e7ef      	b.n	80047b8 <_printf_i+0xbc>
 80047d8:	680b      	ldr	r3, [r1, #0]
 80047da:	6825      	ldr	r5, [r4, #0]
 80047dc:	1d18      	adds	r0, r3, #4
 80047de:	6008      	str	r0, [r1, #0]
 80047e0:	0628      	lsls	r0, r5, #24
 80047e2:	d501      	bpl.n	80047e8 <_printf_i+0xec>
 80047e4:	681d      	ldr	r5, [r3, #0]
 80047e6:	e002      	b.n	80047ee <_printf_i+0xf2>
 80047e8:	0669      	lsls	r1, r5, #25
 80047ea:	d5fb      	bpl.n	80047e4 <_printf_i+0xe8>
 80047ec:	881d      	ldrh	r5, [r3, #0]
 80047ee:	4854      	ldr	r0, [pc, #336]	; (8004940 <_printf_i+0x244>)
 80047f0:	2f6f      	cmp	r7, #111	; 0x6f
 80047f2:	bf0c      	ite	eq
 80047f4:	2308      	moveq	r3, #8
 80047f6:	230a      	movne	r3, #10
 80047f8:	2100      	movs	r1, #0
 80047fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80047fe:	6866      	ldr	r6, [r4, #4]
 8004800:	60a6      	str	r6, [r4, #8]
 8004802:	2e00      	cmp	r6, #0
 8004804:	bfa2      	ittt	ge
 8004806:	6821      	ldrge	r1, [r4, #0]
 8004808:	f021 0104 	bicge.w	r1, r1, #4
 800480c:	6021      	strge	r1, [r4, #0]
 800480e:	b90d      	cbnz	r5, 8004814 <_printf_i+0x118>
 8004810:	2e00      	cmp	r6, #0
 8004812:	d04d      	beq.n	80048b0 <_printf_i+0x1b4>
 8004814:	4616      	mov	r6, r2
 8004816:	fbb5 f1f3 	udiv	r1, r5, r3
 800481a:	fb03 5711 	mls	r7, r3, r1, r5
 800481e:	5dc7      	ldrb	r7, [r0, r7]
 8004820:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004824:	462f      	mov	r7, r5
 8004826:	42bb      	cmp	r3, r7
 8004828:	460d      	mov	r5, r1
 800482a:	d9f4      	bls.n	8004816 <_printf_i+0x11a>
 800482c:	2b08      	cmp	r3, #8
 800482e:	d10b      	bne.n	8004848 <_printf_i+0x14c>
 8004830:	6823      	ldr	r3, [r4, #0]
 8004832:	07df      	lsls	r7, r3, #31
 8004834:	d508      	bpl.n	8004848 <_printf_i+0x14c>
 8004836:	6923      	ldr	r3, [r4, #16]
 8004838:	6861      	ldr	r1, [r4, #4]
 800483a:	4299      	cmp	r1, r3
 800483c:	bfde      	ittt	le
 800483e:	2330      	movle	r3, #48	; 0x30
 8004840:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004844:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004848:	1b92      	subs	r2, r2, r6
 800484a:	6122      	str	r2, [r4, #16]
 800484c:	f8cd a000 	str.w	sl, [sp]
 8004850:	464b      	mov	r3, r9
 8004852:	aa03      	add	r2, sp, #12
 8004854:	4621      	mov	r1, r4
 8004856:	4640      	mov	r0, r8
 8004858:	f7ff fee2 	bl	8004620 <_printf_common>
 800485c:	3001      	adds	r0, #1
 800485e:	d14c      	bne.n	80048fa <_printf_i+0x1fe>
 8004860:	f04f 30ff 	mov.w	r0, #4294967295
 8004864:	b004      	add	sp, #16
 8004866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800486a:	4835      	ldr	r0, [pc, #212]	; (8004940 <_printf_i+0x244>)
 800486c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004870:	6823      	ldr	r3, [r4, #0]
 8004872:	680e      	ldr	r6, [r1, #0]
 8004874:	061f      	lsls	r7, r3, #24
 8004876:	f856 5b04 	ldr.w	r5, [r6], #4
 800487a:	600e      	str	r6, [r1, #0]
 800487c:	d514      	bpl.n	80048a8 <_printf_i+0x1ac>
 800487e:	07d9      	lsls	r1, r3, #31
 8004880:	bf44      	itt	mi
 8004882:	f043 0320 	orrmi.w	r3, r3, #32
 8004886:	6023      	strmi	r3, [r4, #0]
 8004888:	b91d      	cbnz	r5, 8004892 <_printf_i+0x196>
 800488a:	6823      	ldr	r3, [r4, #0]
 800488c:	f023 0320 	bic.w	r3, r3, #32
 8004890:	6023      	str	r3, [r4, #0]
 8004892:	2310      	movs	r3, #16
 8004894:	e7b0      	b.n	80047f8 <_printf_i+0xfc>
 8004896:	6823      	ldr	r3, [r4, #0]
 8004898:	f043 0320 	orr.w	r3, r3, #32
 800489c:	6023      	str	r3, [r4, #0]
 800489e:	2378      	movs	r3, #120	; 0x78
 80048a0:	4828      	ldr	r0, [pc, #160]	; (8004944 <_printf_i+0x248>)
 80048a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80048a6:	e7e3      	b.n	8004870 <_printf_i+0x174>
 80048a8:	065e      	lsls	r6, r3, #25
 80048aa:	bf48      	it	mi
 80048ac:	b2ad      	uxthmi	r5, r5
 80048ae:	e7e6      	b.n	800487e <_printf_i+0x182>
 80048b0:	4616      	mov	r6, r2
 80048b2:	e7bb      	b.n	800482c <_printf_i+0x130>
 80048b4:	680b      	ldr	r3, [r1, #0]
 80048b6:	6826      	ldr	r6, [r4, #0]
 80048b8:	6960      	ldr	r0, [r4, #20]
 80048ba:	1d1d      	adds	r5, r3, #4
 80048bc:	600d      	str	r5, [r1, #0]
 80048be:	0635      	lsls	r5, r6, #24
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	d501      	bpl.n	80048c8 <_printf_i+0x1cc>
 80048c4:	6018      	str	r0, [r3, #0]
 80048c6:	e002      	b.n	80048ce <_printf_i+0x1d2>
 80048c8:	0671      	lsls	r1, r6, #25
 80048ca:	d5fb      	bpl.n	80048c4 <_printf_i+0x1c8>
 80048cc:	8018      	strh	r0, [r3, #0]
 80048ce:	2300      	movs	r3, #0
 80048d0:	6123      	str	r3, [r4, #16]
 80048d2:	4616      	mov	r6, r2
 80048d4:	e7ba      	b.n	800484c <_printf_i+0x150>
 80048d6:	680b      	ldr	r3, [r1, #0]
 80048d8:	1d1a      	adds	r2, r3, #4
 80048da:	600a      	str	r2, [r1, #0]
 80048dc:	681e      	ldr	r6, [r3, #0]
 80048de:	6862      	ldr	r2, [r4, #4]
 80048e0:	2100      	movs	r1, #0
 80048e2:	4630      	mov	r0, r6
 80048e4:	f7fb fcac 	bl	8000240 <memchr>
 80048e8:	b108      	cbz	r0, 80048ee <_printf_i+0x1f2>
 80048ea:	1b80      	subs	r0, r0, r6
 80048ec:	6060      	str	r0, [r4, #4]
 80048ee:	6863      	ldr	r3, [r4, #4]
 80048f0:	6123      	str	r3, [r4, #16]
 80048f2:	2300      	movs	r3, #0
 80048f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048f8:	e7a8      	b.n	800484c <_printf_i+0x150>
 80048fa:	6923      	ldr	r3, [r4, #16]
 80048fc:	4632      	mov	r2, r6
 80048fe:	4649      	mov	r1, r9
 8004900:	4640      	mov	r0, r8
 8004902:	47d0      	blx	sl
 8004904:	3001      	adds	r0, #1
 8004906:	d0ab      	beq.n	8004860 <_printf_i+0x164>
 8004908:	6823      	ldr	r3, [r4, #0]
 800490a:	079b      	lsls	r3, r3, #30
 800490c:	d413      	bmi.n	8004936 <_printf_i+0x23a>
 800490e:	68e0      	ldr	r0, [r4, #12]
 8004910:	9b03      	ldr	r3, [sp, #12]
 8004912:	4298      	cmp	r0, r3
 8004914:	bfb8      	it	lt
 8004916:	4618      	movlt	r0, r3
 8004918:	e7a4      	b.n	8004864 <_printf_i+0x168>
 800491a:	2301      	movs	r3, #1
 800491c:	4632      	mov	r2, r6
 800491e:	4649      	mov	r1, r9
 8004920:	4640      	mov	r0, r8
 8004922:	47d0      	blx	sl
 8004924:	3001      	adds	r0, #1
 8004926:	d09b      	beq.n	8004860 <_printf_i+0x164>
 8004928:	3501      	adds	r5, #1
 800492a:	68e3      	ldr	r3, [r4, #12]
 800492c:	9903      	ldr	r1, [sp, #12]
 800492e:	1a5b      	subs	r3, r3, r1
 8004930:	42ab      	cmp	r3, r5
 8004932:	dcf2      	bgt.n	800491a <_printf_i+0x21e>
 8004934:	e7eb      	b.n	800490e <_printf_i+0x212>
 8004936:	2500      	movs	r5, #0
 8004938:	f104 0619 	add.w	r6, r4, #25
 800493c:	e7f5      	b.n	800492a <_printf_i+0x22e>
 800493e:	bf00      	nop
 8004940:	08004ba9 	.word	0x08004ba9
 8004944:	08004bba 	.word	0x08004bba

08004948 <_sbrk_r>:
 8004948:	b538      	push	{r3, r4, r5, lr}
 800494a:	4d06      	ldr	r5, [pc, #24]	; (8004964 <_sbrk_r+0x1c>)
 800494c:	2300      	movs	r3, #0
 800494e:	4604      	mov	r4, r0
 8004950:	4608      	mov	r0, r1
 8004952:	602b      	str	r3, [r5, #0]
 8004954:	f7fc f93a 	bl	8000bcc <_sbrk>
 8004958:	1c43      	adds	r3, r0, #1
 800495a:	d102      	bne.n	8004962 <_sbrk_r+0x1a>
 800495c:	682b      	ldr	r3, [r5, #0]
 800495e:	b103      	cbz	r3, 8004962 <_sbrk_r+0x1a>
 8004960:	6023      	str	r3, [r4, #0]
 8004962:	bd38      	pop	{r3, r4, r5, pc}
 8004964:	20000244 	.word	0x20000244

08004968 <__sread>:
 8004968:	b510      	push	{r4, lr}
 800496a:	460c      	mov	r4, r1
 800496c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004970:	f000 f8a0 	bl	8004ab4 <_read_r>
 8004974:	2800      	cmp	r0, #0
 8004976:	bfab      	itete	ge
 8004978:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800497a:	89a3      	ldrhlt	r3, [r4, #12]
 800497c:	181b      	addge	r3, r3, r0
 800497e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004982:	bfac      	ite	ge
 8004984:	6563      	strge	r3, [r4, #84]	; 0x54
 8004986:	81a3      	strhlt	r3, [r4, #12]
 8004988:	bd10      	pop	{r4, pc}

0800498a <__swrite>:
 800498a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800498e:	461f      	mov	r7, r3
 8004990:	898b      	ldrh	r3, [r1, #12]
 8004992:	05db      	lsls	r3, r3, #23
 8004994:	4605      	mov	r5, r0
 8004996:	460c      	mov	r4, r1
 8004998:	4616      	mov	r6, r2
 800499a:	d505      	bpl.n	80049a8 <__swrite+0x1e>
 800499c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049a0:	2302      	movs	r3, #2
 80049a2:	2200      	movs	r2, #0
 80049a4:	f000 f868 	bl	8004a78 <_lseek_r>
 80049a8:	89a3      	ldrh	r3, [r4, #12]
 80049aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049b2:	81a3      	strh	r3, [r4, #12]
 80049b4:	4632      	mov	r2, r6
 80049b6:	463b      	mov	r3, r7
 80049b8:	4628      	mov	r0, r5
 80049ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80049be:	f000 b817 	b.w	80049f0 <_write_r>

080049c2 <__sseek>:
 80049c2:	b510      	push	{r4, lr}
 80049c4:	460c      	mov	r4, r1
 80049c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049ca:	f000 f855 	bl	8004a78 <_lseek_r>
 80049ce:	1c43      	adds	r3, r0, #1
 80049d0:	89a3      	ldrh	r3, [r4, #12]
 80049d2:	bf15      	itete	ne
 80049d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80049d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80049da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80049de:	81a3      	strheq	r3, [r4, #12]
 80049e0:	bf18      	it	ne
 80049e2:	81a3      	strhne	r3, [r4, #12]
 80049e4:	bd10      	pop	{r4, pc}

080049e6 <__sclose>:
 80049e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049ea:	f000 b813 	b.w	8004a14 <_close_r>
	...

080049f0 <_write_r>:
 80049f0:	b538      	push	{r3, r4, r5, lr}
 80049f2:	4d07      	ldr	r5, [pc, #28]	; (8004a10 <_write_r+0x20>)
 80049f4:	4604      	mov	r4, r0
 80049f6:	4608      	mov	r0, r1
 80049f8:	4611      	mov	r1, r2
 80049fa:	2200      	movs	r2, #0
 80049fc:	602a      	str	r2, [r5, #0]
 80049fe:	461a      	mov	r2, r3
 8004a00:	f7fb fe54 	bl	80006ac <_write>
 8004a04:	1c43      	adds	r3, r0, #1
 8004a06:	d102      	bne.n	8004a0e <_write_r+0x1e>
 8004a08:	682b      	ldr	r3, [r5, #0]
 8004a0a:	b103      	cbz	r3, 8004a0e <_write_r+0x1e>
 8004a0c:	6023      	str	r3, [r4, #0]
 8004a0e:	bd38      	pop	{r3, r4, r5, pc}
 8004a10:	20000244 	.word	0x20000244

08004a14 <_close_r>:
 8004a14:	b538      	push	{r3, r4, r5, lr}
 8004a16:	4d06      	ldr	r5, [pc, #24]	; (8004a30 <_close_r+0x1c>)
 8004a18:	2300      	movs	r3, #0
 8004a1a:	4604      	mov	r4, r0
 8004a1c:	4608      	mov	r0, r1
 8004a1e:	602b      	str	r3, [r5, #0]
 8004a20:	f7fc f89f 	bl	8000b62 <_close>
 8004a24:	1c43      	adds	r3, r0, #1
 8004a26:	d102      	bne.n	8004a2e <_close_r+0x1a>
 8004a28:	682b      	ldr	r3, [r5, #0]
 8004a2a:	b103      	cbz	r3, 8004a2e <_close_r+0x1a>
 8004a2c:	6023      	str	r3, [r4, #0]
 8004a2e:	bd38      	pop	{r3, r4, r5, pc}
 8004a30:	20000244 	.word	0x20000244

08004a34 <_fstat_r>:
 8004a34:	b538      	push	{r3, r4, r5, lr}
 8004a36:	4d07      	ldr	r5, [pc, #28]	; (8004a54 <_fstat_r+0x20>)
 8004a38:	2300      	movs	r3, #0
 8004a3a:	4604      	mov	r4, r0
 8004a3c:	4608      	mov	r0, r1
 8004a3e:	4611      	mov	r1, r2
 8004a40:	602b      	str	r3, [r5, #0]
 8004a42:	f7fc f89a 	bl	8000b7a <_fstat>
 8004a46:	1c43      	adds	r3, r0, #1
 8004a48:	d102      	bne.n	8004a50 <_fstat_r+0x1c>
 8004a4a:	682b      	ldr	r3, [r5, #0]
 8004a4c:	b103      	cbz	r3, 8004a50 <_fstat_r+0x1c>
 8004a4e:	6023      	str	r3, [r4, #0]
 8004a50:	bd38      	pop	{r3, r4, r5, pc}
 8004a52:	bf00      	nop
 8004a54:	20000244 	.word	0x20000244

08004a58 <_isatty_r>:
 8004a58:	b538      	push	{r3, r4, r5, lr}
 8004a5a:	4d06      	ldr	r5, [pc, #24]	; (8004a74 <_isatty_r+0x1c>)
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	4604      	mov	r4, r0
 8004a60:	4608      	mov	r0, r1
 8004a62:	602b      	str	r3, [r5, #0]
 8004a64:	f7fc f899 	bl	8000b9a <_isatty>
 8004a68:	1c43      	adds	r3, r0, #1
 8004a6a:	d102      	bne.n	8004a72 <_isatty_r+0x1a>
 8004a6c:	682b      	ldr	r3, [r5, #0]
 8004a6e:	b103      	cbz	r3, 8004a72 <_isatty_r+0x1a>
 8004a70:	6023      	str	r3, [r4, #0]
 8004a72:	bd38      	pop	{r3, r4, r5, pc}
 8004a74:	20000244 	.word	0x20000244

08004a78 <_lseek_r>:
 8004a78:	b538      	push	{r3, r4, r5, lr}
 8004a7a:	4d07      	ldr	r5, [pc, #28]	; (8004a98 <_lseek_r+0x20>)
 8004a7c:	4604      	mov	r4, r0
 8004a7e:	4608      	mov	r0, r1
 8004a80:	4611      	mov	r1, r2
 8004a82:	2200      	movs	r2, #0
 8004a84:	602a      	str	r2, [r5, #0]
 8004a86:	461a      	mov	r2, r3
 8004a88:	f7fc f892 	bl	8000bb0 <_lseek>
 8004a8c:	1c43      	adds	r3, r0, #1
 8004a8e:	d102      	bne.n	8004a96 <_lseek_r+0x1e>
 8004a90:	682b      	ldr	r3, [r5, #0]
 8004a92:	b103      	cbz	r3, 8004a96 <_lseek_r+0x1e>
 8004a94:	6023      	str	r3, [r4, #0]
 8004a96:	bd38      	pop	{r3, r4, r5, pc}
 8004a98:	20000244 	.word	0x20000244

08004a9c <__malloc_lock>:
 8004a9c:	4801      	ldr	r0, [pc, #4]	; (8004aa4 <__malloc_lock+0x8>)
 8004a9e:	f7ff bb55 	b.w	800414c <__retarget_lock_acquire_recursive>
 8004aa2:	bf00      	nop
 8004aa4:	2000023c 	.word	0x2000023c

08004aa8 <__malloc_unlock>:
 8004aa8:	4801      	ldr	r0, [pc, #4]	; (8004ab0 <__malloc_unlock+0x8>)
 8004aaa:	f7ff bb50 	b.w	800414e <__retarget_lock_release_recursive>
 8004aae:	bf00      	nop
 8004ab0:	2000023c 	.word	0x2000023c

08004ab4 <_read_r>:
 8004ab4:	b538      	push	{r3, r4, r5, lr}
 8004ab6:	4d07      	ldr	r5, [pc, #28]	; (8004ad4 <_read_r+0x20>)
 8004ab8:	4604      	mov	r4, r0
 8004aba:	4608      	mov	r0, r1
 8004abc:	4611      	mov	r1, r2
 8004abe:	2200      	movs	r2, #0
 8004ac0:	602a      	str	r2, [r5, #0]
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	f7fc f830 	bl	8000b28 <_read>
 8004ac8:	1c43      	adds	r3, r0, #1
 8004aca:	d102      	bne.n	8004ad2 <_read_r+0x1e>
 8004acc:	682b      	ldr	r3, [r5, #0]
 8004ace:	b103      	cbz	r3, 8004ad2 <_read_r+0x1e>
 8004ad0:	6023      	str	r3, [r4, #0]
 8004ad2:	bd38      	pop	{r3, r4, r5, pc}
 8004ad4:	20000244 	.word	0x20000244

08004ad8 <_init>:
 8004ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ada:	bf00      	nop
 8004adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ade:	bc08      	pop	{r3}
 8004ae0:	469e      	mov	lr, r3
 8004ae2:	4770      	bx	lr

08004ae4 <_fini>:
 8004ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ae6:	bf00      	nop
 8004ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aea:	bc08      	pop	{r3}
 8004aec:	469e      	mov	lr, r3
 8004aee:	4770      	bx	lr
