
stm32f767zi_boot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053dc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  080055dc  080055dc  000155dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056c0  080056c0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080056c0  080056c0  000156c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056c8  080056c8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056c8  080056c8  000156c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056cc  080056cc  000156cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080056d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  20000070  08005740  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  08005740  000202d4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d8b8  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002376  00000000  00000000  0002d956  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c8  00000000  00000000  0002fcd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008e0  00000000  00000000  00030698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002940b  00000000  00000000  00030f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ce65  00000000  00000000  0005a383  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb8a4  00000000  00000000  000671e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00162a8c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002db4  00000000  00000000  00162ae0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	080055c4 	.word	0x080055c4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	080055c4 	.word	0x080055c4

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80005de:	4b0f      	ldr	r3, [pc, #60]	; (800061c <HAL_MspInit+0x44>)
 80005e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e2:	4a0e      	ldr	r2, [pc, #56]	; (800061c <HAL_MspInit+0x44>)
 80005e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005e8:	6413      	str	r3, [r2, #64]	; 0x40
 80005ea:	4b0c      	ldr	r3, [pc, #48]	; (800061c <HAL_MspInit+0x44>)
 80005ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005f6:	4b09      	ldr	r3, [pc, #36]	; (800061c <HAL_MspInit+0x44>)
 80005f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005fa:	4a08      	ldr	r2, [pc, #32]	; (800061c <HAL_MspInit+0x44>)
 80005fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000600:	6453      	str	r3, [r2, #68]	; 0x44
 8000602:	4b06      	ldr	r3, [pc, #24]	; (800061c <HAL_MspInit+0x44>)
 8000604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000606:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800060a:	603b      	str	r3, [r7, #0]
 800060c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800060e:	bf00      	nop
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	40023800 	.word	0x40023800

08000620 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000624:	e7fe      	b.n	8000624 <NMI_Handler+0x4>

08000626 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000626:	b480      	push	{r7}
 8000628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800062a:	e7fe      	b.n	800062a <HardFault_Handler+0x4>

0800062c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000630:	e7fe      	b.n	8000630 <MemManage_Handler+0x4>

08000632 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000632:	b480      	push	{r7}
 8000634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000636:	e7fe      	b.n	8000636 <BusFault_Handler+0x4>

08000638 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800063c:	e7fe      	b.n	800063c <UsageFault_Handler+0x4>

0800063e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800063e:	b480      	push	{r7}
 8000640:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000642:	bf00      	nop
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr

0800064c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000650:	bf00      	nop
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr

0800065a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800065a:	b480      	push	{r7}
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800065e:	bf00      	nop
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr

08000668 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800066c:	f000 fc82 	bl	8000f74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000670:	bf00      	nop
 8000672:	bd80      	pop	{r7, pc}

08000674 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000678:	4802      	ldr	r0, [pc, #8]	; (8000684 <DMA1_Stream1_IRQHandler+0x10>)
 800067a:	f000 ffdd 	bl	8001638 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20000260 	.word	0x20000260

08000688 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800068c:	4802      	ldr	r0, [pc, #8]	; (8000698 <USART3_IRQHandler+0x10>)
 800068e:	f002 ff83 	bl	8003598 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	200001dc 	.word	0x200001dc

0800069c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006a0:	4b06      	ldr	r3, [pc, #24]	; (80006bc <SystemInit+0x20>)
 80006a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006a6:	4a05      	ldr	r2, [pc, #20]	; (80006bc <SystemInit+0x20>)
 80006a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006b0:	bf00      	nop
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	e000ed00 	.word	0xe000ed00

080006c0 <_write>:


UART_HandleTypeDef huart3;

int _write(int file,uint8_t*ptr,int len)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	60f8      	str	r0, [r7, #12]
 80006c8:	60b9      	str	r1, [r7, #8]
 80006ca:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit_IT(&huart3,ptr,len);
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	b29b      	uxth	r3, r3
 80006d0:	461a      	mov	r2, r3
 80006d2:	68b9      	ldr	r1, [r7, #8]
 80006d4:	4803      	ldr	r0, [pc, #12]	; (80006e4 <_write+0x24>)
 80006d6:	f002 fec5 	bl	8003464 <HAL_UART_Transmit_IT>
  return len;
 80006da:	687b      	ldr	r3, [r7, #4]
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3710      	adds	r7, #16
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	200001dc 	.word	0x200001dc

080006e8 <MX_GPIO_Init>:


void SystemClock_config(void);

void MX_GPIO_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08c      	sub	sp, #48	; 0x30
 80006ec:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ee:	f107 031c 	add.w	r3, r7, #28
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]
 80006fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006fe:	4b46      	ldr	r3, [pc, #280]	; (8000818 <MX_GPIO_Init+0x130>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a45      	ldr	r2, [pc, #276]	; (8000818 <MX_GPIO_Init+0x130>)
 8000704:	f043 0304 	orr.w	r3, r3, #4
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b43      	ldr	r3, [pc, #268]	; (8000818 <MX_GPIO_Init+0x130>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0304 	and.w	r3, r3, #4
 8000712:	61bb      	str	r3, [r7, #24]
 8000714:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000716:	4b40      	ldr	r3, [pc, #256]	; (8000818 <MX_GPIO_Init+0x130>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a3f      	ldr	r2, [pc, #252]	; (8000818 <MX_GPIO_Init+0x130>)
 800071c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b3d      	ldr	r3, [pc, #244]	; (8000818 <MX_GPIO_Init+0x130>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800072a:	617b      	str	r3, [r7, #20]
 800072c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072e:	4b3a      	ldr	r3, [pc, #232]	; (8000818 <MX_GPIO_Init+0x130>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a39      	ldr	r2, [pc, #228]	; (8000818 <MX_GPIO_Init+0x130>)
 8000734:	f043 0301 	orr.w	r3, r3, #1
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b37      	ldr	r3, [pc, #220]	; (8000818 <MX_GPIO_Init+0x130>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	613b      	str	r3, [r7, #16]
 8000744:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000746:	4b34      	ldr	r3, [pc, #208]	; (8000818 <MX_GPIO_Init+0x130>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a33      	ldr	r2, [pc, #204]	; (8000818 <MX_GPIO_Init+0x130>)
 800074c:	f043 0302 	orr.w	r3, r3, #2
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b31      	ldr	r3, [pc, #196]	; (8000818 <MX_GPIO_Init+0x130>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0302 	and.w	r3, r3, #2
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800075e:	4b2e      	ldr	r3, [pc, #184]	; (8000818 <MX_GPIO_Init+0x130>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a2d      	ldr	r2, [pc, #180]	; (8000818 <MX_GPIO_Init+0x130>)
 8000764:	f043 0308 	orr.w	r3, r3, #8
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b2b      	ldr	r3, [pc, #172]	; (8000818 <MX_GPIO_Init+0x130>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0308 	and.w	r3, r3, #8
 8000772:	60bb      	str	r3, [r7, #8]
 8000774:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000776:	4b28      	ldr	r3, [pc, #160]	; (8000818 <MX_GPIO_Init+0x130>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a27      	ldr	r2, [pc, #156]	; (8000818 <MX_GPIO_Init+0x130>)
 800077c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b25      	ldr	r3, [pc, #148]	; (8000818 <MX_GPIO_Init+0x130>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800078e:	2200      	movs	r2, #0
 8000790:	f244 0181 	movw	r1, #16513	; 0x4081
 8000794:	4821      	ldr	r0, [pc, #132]	; (800081c <MX_GPIO_Init+0x134>)
 8000796:	f001 fc71 	bl	800207c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	2140      	movs	r1, #64	; 0x40
 800079e:	4820      	ldr	r0, [pc, #128]	; (8000820 <MX_GPIO_Init+0x138>)
 80007a0:	f001 fc6c 	bl	800207c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80007a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007aa:	4b1e      	ldr	r3, [pc, #120]	; (8000824 <MX_GPIO_Init+0x13c>)
 80007ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80007b2:	f107 031c 	add.w	r3, r7, #28
 80007b6:	4619      	mov	r1, r3
 80007b8:	481b      	ldr	r0, [pc, #108]	; (8000828 <MX_GPIO_Init+0x140>)
 80007ba:	f001 f9a7 	bl	8001b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80007be:	f244 0381 	movw	r3, #16513	; 0x4081
 80007c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c4:	2301      	movs	r3, #1
 80007c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007cc:	2300      	movs	r3, #0
 80007ce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d0:	f107 031c 	add.w	r3, r7, #28
 80007d4:	4619      	mov	r1, r3
 80007d6:	4811      	ldr	r0, [pc, #68]	; (800081c <MX_GPIO_Init+0x134>)
 80007d8:	f001 f998 	bl	8001b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80007dc:	2340      	movs	r3, #64	; 0x40
 80007de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e0:	2301      	movs	r3, #1
 80007e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e8:	2300      	movs	r3, #0
 80007ea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007ec:	f107 031c 	add.w	r3, r7, #28
 80007f0:	4619      	mov	r1, r3
 80007f2:	480b      	ldr	r0, [pc, #44]	; (8000820 <MX_GPIO_Init+0x138>)
 80007f4:	f001 f98a 	bl	8001b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007f8:	2380      	movs	r3, #128	; 0x80
 80007fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007fc:	2300      	movs	r3, #0
 80007fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000804:	f107 031c 	add.w	r3, r7, #28
 8000808:	4619      	mov	r1, r3
 800080a:	4805      	ldr	r0, [pc, #20]	; (8000820 <MX_GPIO_Init+0x138>)
 800080c:	f001 f97e 	bl	8001b0c <HAL_GPIO_Init>
}
 8000810:	bf00      	nop
 8000812:	3730      	adds	r7, #48	; 0x30
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40023800 	.word	0x40023800
 800081c:	40020400 	.word	0x40020400
 8000820:	40021800 	.word	0x40021800
 8000824:	10110000 	.word	0x10110000
 8000828:	40020800 	.word	0x40020800

0800082c <SystemClock_Config>:

void SystemClock_Config(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b0b8      	sub	sp, #224	; 0xe0
 8000830:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000832:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000836:	2234      	movs	r2, #52	; 0x34
 8000838:	2100      	movs	r1, #0
 800083a:	4618      	mov	r0, r3
 800083c:	f003 feee 	bl	800461c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000840:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000850:	f107 0308 	add.w	r3, r7, #8
 8000854:	2290      	movs	r2, #144	; 0x90
 8000856:	2100      	movs	r1, #0
 8000858:	4618      	mov	r0, r3
 800085a:	f003 fedf 	bl	800461c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800085e:	f001 fc41 	bl	80020e4 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000862:	4b39      	ldr	r3, [pc, #228]	; (8000948 <SystemClock_Config+0x11c>)
 8000864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000866:	4a38      	ldr	r2, [pc, #224]	; (8000948 <SystemClock_Config+0x11c>)
 8000868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800086c:	6413      	str	r3, [r2, #64]	; 0x40
 800086e:	4b36      	ldr	r3, [pc, #216]	; (8000948 <SystemClock_Config+0x11c>)
 8000870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800087a:	4b34      	ldr	r3, [pc, #208]	; (800094c <SystemClock_Config+0x120>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4a33      	ldr	r2, [pc, #204]	; (800094c <SystemClock_Config+0x120>)
 8000880:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000884:	6013      	str	r3, [r2, #0]
 8000886:	4b31      	ldr	r3, [pc, #196]	; (800094c <SystemClock_Config+0x120>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800088e:	603b      	str	r3, [r7, #0]
 8000890:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000892:	2301      	movs	r3, #1
 8000894:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000898:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800089c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008a0:	2302      	movs	r3, #2
 80008a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008ae:	2304      	movs	r3, #4
 80008b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 80008b4:	23d8      	movs	r3, #216	; 0xd8
 80008b6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008ba:	2302      	movs	r3, #2
 80008bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80008c0:	2309      	movs	r3, #9
 80008c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80008ca:	4618      	mov	r0, r3
 80008cc:	f001 fc6a 	bl	80021a4 <HAL_RCC_OscConfig>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <SystemClock_Config+0xae>
  {
    Error_Handler();
 80008d6:	f000 f842 	bl	800095e <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008da:	f001 fc13 	bl	8002104 <HAL_PWREx_EnableOverDrive>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80008e4:	f000 f83b 	bl	800095e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008e8:	230f      	movs	r3, #15
 80008ea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ee:	2302      	movs	r3, #2
 80008f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f4:	2300      	movs	r3, #0
 80008f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008fa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000902:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000906:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800090a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800090e:	2107      	movs	r1, #7
 8000910:	4618      	mov	r0, r3
 8000912:	f001 fef5 	bl	8002700 <HAL_RCC_ClockConfig>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 800091c:	f000 f81f 	bl	800095e <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000920:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000924:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000926:	2300      	movs	r3, #0
 8000928:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800092a:	f107 0308 	add.w	r3, r7, #8
 800092e:	4618      	mov	r0, r3
 8000930:	f002 f8e8 	bl	8002b04 <HAL_RCCEx_PeriphCLKConfig>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <SystemClock_Config+0x112>
  {
    Error_Handler();
 800093a:	f000 f810 	bl	800095e <Error_Handler>
  }
}
 800093e:	bf00      	nop
 8000940:	37e0      	adds	r7, #224	; 0xe0
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40023800 	.word	0x40023800
 800094c:	40007000 	.word	0x40007000

08000950 <millis>:
void delay(uint32_t ms)
{
	HAL_Delay(ms);
}
uint32_t millis(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8000954:	f000 fb22 	bl	8000f9c <HAL_GetTick>
 8000958:	4603      	mov	r3, r0
}
 800095a:	4618      	mov	r0, r3
 800095c:	bd80      	pop	{r7, pc}

0800095e <Error_Handler>:
void Error_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000962:	b672      	cpsid	i
}
 8000964:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
}
 8000966:	bf00      	nop
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <main>:


int main(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
	uint8_t rx_data;
	uint32_t pre_time;


	HAL_Init();
 8000976:	f000 fabf 	bl	8000ef8 <HAL_Init>
	SystemClock_Config();
 800097a:	f7ff ff57 	bl	800082c <SystemClock_Config>

	//SystemInit();
	MX_GPIO_Init();
 800097e:	f7ff feb3 	bl	80006e8 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8000982:	f000 f973 	bl	8000c6c <MX_USART3_UART_Init>
/*
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif ...? 확인 필요.
*/
	printf("start MCU\r\n");
 8000986:	4813      	ldr	r0, [pc, #76]	; (80009d4 <main+0x64>)
 8000988:	f003 fed6 	bl	8004738 <puts>
	 pre_time = millis();
 800098c:	f7ff ffe0 	bl	8000950 <millis>
 8000990:	6078      	str	r0, [r7, #4]

	  while(1)
	  {
		  if(millis()-pre_time >= 500)
 8000992:	f7ff ffdd 	bl	8000950 <millis>
 8000996:	4602      	mov	r2, r0
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	1ad3      	subs	r3, r2, r3
 800099c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80009a0:	d306      	bcc.n	80009b0 <main+0x40>
		  {
			  pre_time = millis();
 80009a2:	f7ff ffd5 	bl	8000950 <millis>
 80009a6:	6078      	str	r0, [r7, #4]
			  HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 80009a8:	2101      	movs	r1, #1
 80009aa:	480b      	ldr	r0, [pc, #44]	; (80009d8 <main+0x68>)
 80009ac:	f001 fb7f 	bl	80020ae <HAL_GPIO_TogglePin>
		  }

		  if(uartAvailable(2)>0)
 80009b0:	2002      	movs	r0, #2
 80009b2:	f000 f90d 	bl	8000bd0 <uartAvailable>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	ddea      	ble.n	8000992 <main+0x22>
		  {
			  uint8_t rx_data2;

			  rx_data2 = uartRead(2);
 80009bc:	2002      	movs	r0, #2
 80009be:	f000 f935 	bl	8000c2c <uartRead>
 80009c2:	4603      	mov	r3, r0
 80009c4:	70fb      	strb	r3, [r7, #3]
			  printf("uart Rx : %c %x \r\n",rx_data2, rx_data2);
 80009c6:	78fb      	ldrb	r3, [r7, #3]
 80009c8:	78fa      	ldrb	r2, [r7, #3]
 80009ca:	4619      	mov	r1, r3
 80009cc:	4803      	ldr	r0, [pc, #12]	; (80009dc <main+0x6c>)
 80009ce:	f003 fe2d 	bl	800462c <iprintf>
		  if(millis()-pre_time >= 500)
 80009d2:	e7de      	b.n	8000992 <main+0x22>
 80009d4:	080055dc 	.word	0x080055dc
 80009d8:	40020400 	.word	0x40020400
 80009dc:	080055e8 	.word	0x080055e8

080009e0 <qbufferCreate>:
{

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b087      	sub	sp, #28
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	60f8      	str	r0, [r7, #12]
 80009e8:	60b9      	str	r1, [r7, #8]
 80009ea:	607a      	str	r2, [r7, #4]
  bool ret = true;
 80009ec:	2301      	movs	r3, #1
 80009ee:	75fb      	strb	r3, [r7, #23]

  p_node->in    = 0;
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
  p_node->out   = 0;
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	2200      	movs	r2, #0
 80009fa:	605a      	str	r2, [r3, #4]
  p_node->len   = length;
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	687a      	ldr	r2, [r7, #4]
 8000a00:	609a      	str	r2, [r3, #8]
  p_node->p_buf = p_buf;
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	68ba      	ldr	r2, [r7, #8]
 8000a06:	60da      	str	r2, [r3, #12]

  return ret;
 8000a08:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	371c      	adds	r7, #28
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr

08000a16 <qbufferRead>:

  return ret;
}

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8000a16:	b480      	push	{r7}
 8000a18:	b087      	sub	sp, #28
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	60f8      	str	r0, [r7, #12]
 8000a1e:	60b9      	str	r1, [r7, #8]
 8000a20:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8000a22:	2301      	movs	r3, #1
 8000a24:	75fb      	strb	r3, [r7, #23]

  for (int i=0; i<length; i++)
 8000a26:	2300      	movs	r3, #0
 8000a28:	613b      	str	r3, [r7, #16]
 8000a2a:	e026      	b.n	8000a7a <qbufferRead+0x64>
  {
    if (p_node->p_buf != NULL)
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d009      	beq.n	8000a48 <qbufferRead+0x32>
    {
      p_data[i] = p_node->p_buf[p_node->out];
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	68da      	ldr	r2, [r3, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	441a      	add	r2, r3
 8000a3e:	693b      	ldr	r3, [r7, #16]
 8000a40:	68b9      	ldr	r1, [r7, #8]
 8000a42:	440b      	add	r3, r1
 8000a44:	7812      	ldrb	r2, [r2, #0]
 8000a46:	701a      	strb	r2, [r3, #0]
    }

    if (p_node->out != p_node->in)
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	685a      	ldr	r2, [r3, #4]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	d00c      	beq.n	8000a6e <qbufferRead+0x58>
    {
      p_node->out = (p_node->out + 1) % p_node->len;
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	68fa      	ldr	r2, [r7, #12]
 8000a5c:	6892      	ldr	r2, [r2, #8]
 8000a5e:	fbb3 f1f2 	udiv	r1, r3, r2
 8000a62:	fb02 f201 	mul.w	r2, r2, r1
 8000a66:	1a9a      	subs	r2, r3, r2
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	605a      	str	r2, [r3, #4]
 8000a6c:	e002      	b.n	8000a74 <qbufferRead+0x5e>
    }
    else
    {
      ret = false;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	75fb      	strb	r3, [r7, #23]
      break;
 8000a72:	e006      	b.n	8000a82 <qbufferRead+0x6c>
  for (int i=0; i<length; i++)
 8000a74:	693b      	ldr	r3, [r7, #16]
 8000a76:	3301      	adds	r3, #1
 8000a78:	613b      	str	r3, [r7, #16]
 8000a7a:	693b      	ldr	r3, [r7, #16]
 8000a7c:	687a      	ldr	r2, [r7, #4]
 8000a7e:	429a      	cmp	r2, r3
 8000a80:	d8d4      	bhi.n	8000a2c <qbufferRead+0x16>
    }
  }

  return ret;
 8000a82:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	371c      	adds	r7, #28
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <qbufferAvailable>:

uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b085      	sub	sp, #20
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  uint32_t ret;

  ret = (p_node->in - p_node->out) % p_node->len;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	1ad3      	subs	r3, r2, r3
 8000aa2:	687a      	ldr	r2, [r7, #4]
 8000aa4:	6892      	ldr	r2, [r2, #8]
 8000aa6:	fbb3 f1f2 	udiv	r1, r3, r2
 8000aaa:	fb02 f201 	mul.w	r2, r2, r1
 8000aae:	1a9b      	subs	r3, r3, r2
 8000ab0:	60fb      	str	r3, [r7, #12]

  return ret;
 8000ab2:	68fb      	ldr	r3, [r7, #12]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3714      	adds	r7, #20
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	60f8      	str	r0, [r7, #12]
 8000ac8:	60b9      	str	r1, [r7, #8]
 8000aca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000acc:	2300      	movs	r3, #0
 8000ace:	617b      	str	r3, [r7, #20]
 8000ad0:	e00a      	b.n	8000ae8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ad2:	f3af 8000 	nop.w
 8000ad6:	4601      	mov	r1, r0
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	1c5a      	adds	r2, r3, #1
 8000adc:	60ba      	str	r2, [r7, #8]
 8000ade:	b2ca      	uxtb	r2, r1
 8000ae0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	617b      	str	r3, [r7, #20]
 8000ae8:	697a      	ldr	r2, [r7, #20]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	dbf0      	blt.n	8000ad2 <_read+0x12>
	}

return len;
 8000af0:	687b      	ldr	r3, [r7, #4]
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3718      	adds	r7, #24
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <_close>:
	}
	return len;
}

int _close(int file)
{
 8000afa:	b480      	push	{r7}
 8000afc:	b083      	sub	sp, #12
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
	return -1;
 8000b02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr

08000b12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b12:	b480      	push	{r7}
 8000b14:	b083      	sub	sp, #12
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	6078      	str	r0, [r7, #4]
 8000b1a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b22:	605a      	str	r2, [r3, #4]
	return 0;
 8000b24:	2300      	movs	r3, #0
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr

08000b32 <_isatty>:

int _isatty(int file)
{
 8000b32:	b480      	push	{r7}
 8000b34:	b083      	sub	sp, #12
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	6078      	str	r0, [r7, #4]
	return 1;
 8000b3a:	2301      	movs	r3, #1
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	60b9      	str	r1, [r7, #8]
 8000b52:	607a      	str	r2, [r7, #4]
	return 0;
 8000b54:	2300      	movs	r3, #0
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3714      	adds	r7, #20
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
	...

08000b64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b086      	sub	sp, #24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b6c:	4a14      	ldr	r2, [pc, #80]	; (8000bc0 <_sbrk+0x5c>)
 8000b6e:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <_sbrk+0x60>)
 8000b70:	1ad3      	subs	r3, r2, r3
 8000b72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b78:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <_sbrk+0x64>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d102      	bne.n	8000b86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b80:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <_sbrk+0x64>)
 8000b82:	4a12      	ldr	r2, [pc, #72]	; (8000bcc <_sbrk+0x68>)
 8000b84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b86:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <_sbrk+0x64>)
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d207      	bcs.n	8000ba4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b94:	f003 fd18 	bl	80045c8 <__errno>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	220c      	movs	r2, #12
 8000b9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba2:	e009      	b.n	8000bb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ba4:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <_sbrk+0x64>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000baa:	4b07      	ldr	r3, [pc, #28]	; (8000bc8 <_sbrk+0x64>)
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	4a05      	ldr	r2, [pc, #20]	; (8000bc8 <_sbrk+0x64>)
 8000bb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bb6:	68fb      	ldr	r3, [r7, #12]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3718      	adds	r7, #24
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20080000 	.word	0x20080000
 8000bc4:	00000400 	.word	0x00000400
 8000bc8:	2000008c 	.word	0x2000008c
 8000bcc:	200002d8 	.word	0x200002d8

08000bd0 <uartAvailable>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

uint32_t uartAvailable(uint8_t ch)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60fb      	str	r3, [r7, #12]

  switch(ch)
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d019      	beq.n	8000c18 <uartAvailable+0x48>
 8000be4:	2b02      	cmp	r3, #2
 8000be6:	d118      	bne.n	8000c1a <uartAvailable+0x4a>
    case 1:
 //     ret = cdcAvailable();
      break;

    case 2:
     qbuffer[ch].in = (qbuffer[ch].len - hdma_usart3_rx.Instance->NDTR);
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	4a0e      	ldr	r2, [pc, #56]	; (8000c24 <uartAvailable+0x54>)
 8000bec:	011b      	lsls	r3, r3, #4
 8000bee:	4413      	add	r3, r2
 8000bf0:	3308      	adds	r3, #8
 8000bf2:	6819      	ldr	r1, [r3, #0]
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <uartAvailable+0x58>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	685a      	ldr	r2, [r3, #4]
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	1a8a      	subs	r2, r1, r2
 8000bfe:	4909      	ldr	r1, [pc, #36]	; (8000c24 <uartAvailable+0x54>)
 8000c00:	011b      	lsls	r3, r3, #4
 8000c02:	440b      	add	r3, r1
 8000c04:	601a      	str	r2, [r3, #0]
     ret = qbufferAvailable(&qbuffer[ch]); //인터럽트 사용시
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	011b      	lsls	r3, r3, #4
 8000c0a:	4a06      	ldr	r2, [pc, #24]	; (8000c24 <uartAvailable+0x54>)
 8000c0c:	4413      	add	r3, r2
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f7ff ff3e 	bl	8000a90 <qbufferAvailable>
 8000c14:	60f8      	str	r0, [r7, #12]
       break;
 8000c16:	e000      	b.n	8000c1a <uartAvailable+0x4a>
      break;
 8000c18:	bf00      	nop
  }

  return ret;
 8000c1a:	68fb      	ldr	r3, [r7, #12]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3710      	adds	r7, #16
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20000094 	.word	0x20000094
 8000c28:	20000260 	.word	0x20000260

08000c2c <uartRead>:

uint8_t uartRead(uint8_t ch)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d00c      	beq.n	8000c5a <uartRead+0x2e>
 8000c40:	2b02      	cmp	r3, #2
 8000c42:	d10b      	bne.n	8000c5c <uartRead+0x30>
    case 1:
  //    ret = cdcRead();
      break;

    case 2:
      qbufferRead(&qbuffer[ch], &ret, 1);
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	011b      	lsls	r3, r3, #4
 8000c48:	4a07      	ldr	r2, [pc, #28]	; (8000c68 <uartRead+0x3c>)
 8000c4a:	4413      	add	r3, r2
 8000c4c:	f107 010f 	add.w	r1, r7, #15
 8000c50:	2201      	movs	r2, #1
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff fedf 	bl	8000a16 <qbufferRead>
      break;
 8000c58:	e000      	b.n	8000c5c <uartRead+0x30>
      break;
 8000c5a:	bf00      	nop
  }
  return ret;
 8000c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000094 	.word	0x20000094

08000c6c <MX_USART3_UART_Init>:

void MX_USART3_UART_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
  bool ret = false;
 8000c72:	2300      	movs	r3, #0
 8000c74:	71fb      	strb	r3, [r7, #7]

  huart3.Instance = USART3;
 8000c76:	4b34      	ldr	r3, [pc, #208]	; (8000d48 <MX_USART3_UART_Init+0xdc>)
 8000c78:	4a34      	ldr	r2, [pc, #208]	; (8000d4c <MX_USART3_UART_Init+0xe0>)
 8000c7a:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c7c:	4b32      	ldr	r3, [pc, #200]	; (8000d48 <MX_USART3_UART_Init+0xdc>)
 8000c7e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c82:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c84:	4b30      	ldr	r3, [pc, #192]	; (8000d48 <MX_USART3_UART_Init+0xdc>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c8a:	4b2f      	ldr	r3, [pc, #188]	; (8000d48 <MX_USART3_UART_Init+0xdc>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c90:	4b2d      	ldr	r3, [pc, #180]	; (8000d48 <MX_USART3_UART_Init+0xdc>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c96:	4b2c      	ldr	r3, [pc, #176]	; (8000d48 <MX_USART3_UART_Init+0xdc>)
 8000c98:	220c      	movs	r2, #12
 8000c9a:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c9c:	4b2a      	ldr	r3, [pc, #168]	; (8000d48 <MX_USART3_UART_Init+0xdc>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ca2:	4b29      	ldr	r3, [pc, #164]	; (8000d48 <MX_USART3_UART_Init+0xdc>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ca8:	4b27      	ldr	r3, [pc, #156]	; (8000d48 <MX_USART3_UART_Init+0xdc>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cae:	4b26      	ldr	r3, [pc, #152]	; (8000d48 <MX_USART3_UART_Init+0xdc>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_UART_DeInit(&huart3);
 8000cb4:	4824      	ldr	r0, [pc, #144]	; (8000d48 <MX_USART3_UART_Init+0xdc>)
 8000cb6:	f002 fb9b 	bl	80033f0 <HAL_UART_DeInit>

  qbufferCreate(&qbuffer[2], &rx_buf[0], 256);
 8000cba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cbe:	4924      	ldr	r1, [pc, #144]	; (8000d50 <MX_USART3_UART_Init+0xe4>)
 8000cc0:	4824      	ldr	r0, [pc, #144]	; (8000d54 <MX_USART3_UART_Init+0xe8>)
 8000cc2:	f7ff fe8d 	bl	80009e0 <qbufferCreate>

   __HAL_RCC_DMA1_CLK_ENABLE();
 8000cc6:	4b24      	ldr	r3, [pc, #144]	; (8000d58 <MX_USART3_UART_Init+0xec>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	4a23      	ldr	r2, [pc, #140]	; (8000d58 <MX_USART3_UART_Init+0xec>)
 8000ccc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd2:	4b21      	ldr	r3, [pc, #132]	; (8000d58 <MX_USART3_UART_Init+0xec>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cda:	603b      	str	r3, [r7, #0]
 8000cdc:	683b      	ldr	r3, [r7, #0]
   HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	2027      	movs	r0, #39	; 0x27
 8000ce4:	f000 fa65 	bl	80011b2 <HAL_NVIC_SetPriority>
   HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000ce8:	2027      	movs	r0, #39	; 0x27
 8000cea:	f000 fa7e 	bl	80011ea <HAL_NVIC_EnableIRQ>

  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cee:	4816      	ldr	r0, [pc, #88]	; (8000d48 <MX_USART3_UART_Init+0xdc>)
 8000cf0:	f002 fb30 	bl	8003354 <HAL_UART_Init>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d002      	beq.n	8000d00 <MX_USART3_UART_Init+0x94>
  {
    Error_Handler();
 8000cfa:	f7ff fe30 	bl	800095e <Error_Handler>
	  }
		qbuffer[2].in  = qbuffer[2].len - hdma_usart3_rx.Instance->NDTR;
		qbuffer[2].out = qbuffer[2].in;
  }

}
 8000cfe:	e01e      	b.n	8000d3e <MX_USART3_UART_Init+0xd2>
	  ret = true;
 8000d00:	2301      	movs	r3, #1
 8000d02:	71fb      	strb	r3, [r7, #7]
	  is_open[2]=true;
 8000d04:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <MX_USART3_UART_Init+0xf0>)
 8000d06:	2201      	movs	r2, #1
 8000d08:	709a      	strb	r2, [r3, #2]
	   if(HAL_UART_Receive_DMA(&huart3, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 8000d0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d0e:	4910      	ldr	r1, [pc, #64]	; (8000d50 <MX_USART3_UART_Init+0xe4>)
 8000d10:	480d      	ldr	r0, [pc, #52]	; (8000d48 <MX_USART3_UART_Init+0xdc>)
 8000d12:	f002 fc03 	bl	800351c <HAL_UART_Receive_DMA>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d004      	beq.n	8000d26 <MX_USART3_UART_Init+0xba>
		  printf("HAL_ERROR\r\n");
 8000d1c:	4810      	ldr	r0, [pc, #64]	; (8000d60 <MX_USART3_UART_Init+0xf4>)
 8000d1e:	f003 fd0b 	bl	8004738 <puts>
		  ret = false;
 8000d22:	2300      	movs	r3, #0
 8000d24:	71fb      	strb	r3, [r7, #7]
		qbuffer[2].in  = qbuffer[2].len - hdma_usart3_rx.Instance->NDTR;
 8000d26:	4b0f      	ldr	r3, [pc, #60]	; (8000d64 <MX_USART3_UART_Init+0xf8>)
 8000d28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000d2a:	4b0f      	ldr	r3, [pc, #60]	; (8000d68 <MX_USART3_UART_Init+0xfc>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	4a0c      	ldr	r2, [pc, #48]	; (8000d64 <MX_USART3_UART_Init+0xf8>)
 8000d34:	6213      	str	r3, [r2, #32]
		qbuffer[2].out = qbuffer[2].in;
 8000d36:	4b0b      	ldr	r3, [pc, #44]	; (8000d64 <MX_USART3_UART_Init+0xf8>)
 8000d38:	6a1b      	ldr	r3, [r3, #32]
 8000d3a:	4a0a      	ldr	r2, [pc, #40]	; (8000d64 <MX_USART3_UART_Init+0xf8>)
 8000d3c:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	200001dc 	.word	0x200001dc
 8000d4c:	40004800 	.word	0x40004800
 8000d50:	200000d4 	.word	0x200000d4
 8000d54:	200000b4 	.word	0x200000b4
 8000d58:	40023800 	.word	0x40023800
 8000d5c:	20000090 	.word	0x20000090
 8000d60:	080055fc 	.word	0x080055fc
 8000d64:	20000094 	.word	0x20000094
 8000d68:	20000260 	.word	0x20000260

08000d6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b08a      	sub	sp, #40	; 0x28
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d74:	f107 0314 	add.w	r3, r7, #20
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a33      	ldr	r2, [pc, #204]	; (8000e58 <HAL_UART_MspInit+0xec>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d15f      	bne.n	8000e4e <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d8e:	4b33      	ldr	r3, [pc, #204]	; (8000e5c <HAL_UART_MspInit+0xf0>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d92:	4a32      	ldr	r2, [pc, #200]	; (8000e5c <HAL_UART_MspInit+0xf0>)
 8000d94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d98:	6413      	str	r3, [r2, #64]	; 0x40
 8000d9a:	4b30      	ldr	r3, [pc, #192]	; (8000e5c <HAL_UART_MspInit+0xf0>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000da2:	613b      	str	r3, [r7, #16]
 8000da4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000da6:	4b2d      	ldr	r3, [pc, #180]	; (8000e5c <HAL_UART_MspInit+0xf0>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	4a2c      	ldr	r2, [pc, #176]	; (8000e5c <HAL_UART_MspInit+0xf0>)
 8000dac:	f043 0308 	orr.w	r3, r3, #8
 8000db0:	6313      	str	r3, [r2, #48]	; 0x30
 8000db2:	4b2a      	ldr	r3, [pc, #168]	; (8000e5c <HAL_UART_MspInit+0xf0>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	f003 0308 	and.w	r3, r3, #8
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000dbe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dcc:	2303      	movs	r3, #3
 8000dce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dd0:	2307      	movs	r3, #7
 8000dd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4821      	ldr	r0, [pc, #132]	; (8000e60 <HAL_UART_MspInit+0xf4>)
 8000ddc:	f000 fe96 	bl	8001b0c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8000de0:	4b20      	ldr	r3, [pc, #128]	; (8000e64 <HAL_UART_MspInit+0xf8>)
 8000de2:	4a21      	ldr	r2, [pc, #132]	; (8000e68 <HAL_UART_MspInit+0xfc>)
 8000de4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8000de6:	4b1f      	ldr	r3, [pc, #124]	; (8000e64 <HAL_UART_MspInit+0xf8>)
 8000de8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dec:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dee:	4b1d      	ldr	r3, [pc, #116]	; (8000e64 <HAL_UART_MspInit+0xf8>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000df4:	4b1b      	ldr	r3, [pc, #108]	; (8000e64 <HAL_UART_MspInit+0xf8>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000dfa:	4b1a      	ldr	r3, [pc, #104]	; (8000e64 <HAL_UART_MspInit+0xf8>)
 8000dfc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e00:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e02:	4b18      	ldr	r3, [pc, #96]	; (8000e64 <HAL_UART_MspInit+0xf8>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e08:	4b16      	ldr	r3, [pc, #88]	; (8000e64 <HAL_UART_MspInit+0xf8>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8000e0e:	4b15      	ldr	r3, [pc, #84]	; (8000e64 <HAL_UART_MspInit+0xf8>)
 8000e10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e14:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e16:	4b13      	ldr	r3, [pc, #76]	; (8000e64 <HAL_UART_MspInit+0xf8>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e1c:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <HAL_UART_MspInit+0xf8>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000e22:	4810      	ldr	r0, [pc, #64]	; (8000e64 <HAL_UART_MspInit+0xf8>)
 8000e24:	f000 fa0a 	bl	800123c <HAL_DMA_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8000e2e:	f7ff fd96 	bl	800095e <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4a0b      	ldr	r2, [pc, #44]	; (8000e64 <HAL_UART_MspInit+0xf8>)
 8000e36:	671a      	str	r2, [r3, #112]	; 0x70
 8000e38:	4a0a      	ldr	r2, [pc, #40]	; (8000e64 <HAL_UART_MspInit+0xf8>)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	2100      	movs	r1, #0
 8000e42:	2027      	movs	r0, #39	; 0x27
 8000e44:	f000 f9b5 	bl	80011b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000e48:	2027      	movs	r0, #39	; 0x27
 8000e4a:	f000 f9ce 	bl	80011ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000e4e:	bf00      	nop
 8000e50:	3728      	adds	r7, #40	; 0x28
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40004800 	.word	0x40004800
 8000e5c:	40023800 	.word	0x40023800
 8000e60:	40020c00 	.word	0x40020c00
 8000e64:	20000260 	.word	0x20000260
 8000e68:	40026028 	.word	0x40026028

08000e6c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART3)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a0c      	ldr	r2, [pc, #48]	; (8000eac <HAL_UART_MspDeInit+0x40>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d112      	bne.n	8000ea4 <HAL_UART_MspDeInit+0x38>
  {
  /* USER CODE BEGIN USART3_MspDeInit 0 */

  /* USER CODE END USART3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART3_CLK_DISABLE();
 8000e7e:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <HAL_UART_MspDeInit+0x44>)
 8000e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e82:	4a0b      	ldr	r2, [pc, #44]	; (8000eb0 <HAL_UART_MspDeInit+0x44>)
 8000e84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e88:	6413      	str	r3, [r2, #64]	; 0x40

    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    HAL_GPIO_DeInit(GPIOD, STLK_RX_Pin|STLK_TX_Pin);
 8000e8a:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000e8e:	4809      	ldr	r0, [pc, #36]	; (8000eb4 <HAL_UART_MspDeInit+0x48>)
 8000e90:	f000 ffe8 	bl	8001e64 <HAL_GPIO_DeInit>

    /* USART3 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f000 fa7d 	bl	8001398 <HAL_DMA_DeInit>

    /* USART3 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 8000e9e:	2027      	movs	r0, #39	; 0x27
 8000ea0:	f000 f9b1 	bl	8001206 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }
}
 8000ea4:	bf00      	nop
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40004800 	.word	0x40004800
 8000eb0:	40023800 	.word	0x40023800
 8000eb4:	40020c00 	.word	0x40020c00

08000eb8 <HAL_UART_ErrorCallback>:


void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART3)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a05      	ldr	r2, [pc, #20]	; (8000edc <HAL_UART_ErrorCallback+0x24>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d104      	bne.n	8000ed4 <HAL_UART_ErrorCallback+0x1c>
  {
	  HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8000eca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ece:	4804      	ldr	r0, [pc, #16]	; (8000ee0 <HAL_UART_ErrorCallback+0x28>)
 8000ed0:	f001 f8ed 	bl	80020ae <HAL_GPIO_TogglePin>
  }
}
 8000ed4:	bf00      	nop
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40004800 	.word	0x40004800
 8000ee0:	40020400 	.word	0x40020400

08000ee4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
    HAL_UART_Receive_IT(&huart3, (uint8_t *)&rx_data, 1);
    qbufferWrite(&qbuffer, &rx_data, 1);
  }
#endif
}
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000efc:	2003      	movs	r0, #3
 8000efe:	f000 f94d 	bl	800119c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f02:	2000      	movs	r0, #0
 8000f04:	f000 f806 	bl	8000f14 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000f08:	f7ff fb66 	bl	80005d8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000f0c:	2300      	movs	r3, #0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	bd80      	pop	{r7, pc}
	...

08000f14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f1c:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <HAL_InitTick+0x54>)
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <HAL_InitTick+0x58>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	4619      	mov	r1, r3
 8000f26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f32:	4618      	mov	r0, r3
 8000f34:	f000 f975 	bl	8001222 <HAL_SYSTICK_Config>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e00e      	b.n	8000f60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2b0f      	cmp	r3, #15
 8000f46:	d80a      	bhi.n	8000f5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	6879      	ldr	r1, [r7, #4]
 8000f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f50:	f000 f92f 	bl	80011b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f54:	4a06      	ldr	r2, [pc, #24]	; (8000f70 <HAL_InitTick+0x5c>)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	e000      	b.n	8000f60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000000 	.word	0x20000000
 8000f6c:	20000008 	.word	0x20000008
 8000f70:	20000004 	.word	0x20000004

08000f74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <HAL_IncTick+0x20>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <HAL_IncTick+0x24>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4413      	add	r3, r2
 8000f84:	4a04      	ldr	r2, [pc, #16]	; (8000f98 <HAL_IncTick+0x24>)
 8000f86:	6013      	str	r3, [r2, #0]
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	20000008 	.word	0x20000008
 8000f98:	200002c0 	.word	0x200002c0

08000f9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa0:	4b03      	ldr	r3, [pc, #12]	; (8000fb0 <HAL_GetTick+0x14>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	200002c0 	.word	0x200002c0

08000fb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc4:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <__NVIC_SetPriorityGrouping+0x40>)
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fca:	68ba      	ldr	r2, [r7, #8]
 8000fcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000fdc:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fe2:	4a04      	ldr	r2, [pc, #16]	; (8000ff4 <__NVIC_SetPriorityGrouping+0x40>)
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	60d3      	str	r3, [r2, #12]
}
 8000fe8:	bf00      	nop
 8000fea:	3714      	adds	r7, #20
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	e000ed00 	.word	0xe000ed00
 8000ff8:	05fa0000 	.word	0x05fa0000

08000ffc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001000:	4b04      	ldr	r3, [pc, #16]	; (8001014 <__NVIC_GetPriorityGrouping+0x18>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	0a1b      	lsrs	r3, r3, #8
 8001006:	f003 0307 	and.w	r3, r3, #7
}
 800100a:	4618      	mov	r0, r3
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001026:	2b00      	cmp	r3, #0
 8001028:	db0b      	blt.n	8001042 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	f003 021f 	and.w	r2, r3, #31
 8001030:	4907      	ldr	r1, [pc, #28]	; (8001050 <__NVIC_EnableIRQ+0x38>)
 8001032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001036:	095b      	lsrs	r3, r3, #5
 8001038:	2001      	movs	r0, #1
 800103a:	fa00 f202 	lsl.w	r2, r0, r2
 800103e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001042:	bf00      	nop
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	e000e100 	.word	0xe000e100

08001054 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800105e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001062:	2b00      	cmp	r3, #0
 8001064:	db12      	blt.n	800108c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	f003 021f 	and.w	r2, r3, #31
 800106c:	490a      	ldr	r1, [pc, #40]	; (8001098 <__NVIC_DisableIRQ+0x44>)
 800106e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001072:	095b      	lsrs	r3, r3, #5
 8001074:	2001      	movs	r0, #1
 8001076:	fa00 f202 	lsl.w	r2, r0, r2
 800107a:	3320      	adds	r3, #32
 800107c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001080:	f3bf 8f4f 	dsb	sy
}
 8001084:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001086:	f3bf 8f6f 	isb	sy
}
 800108a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800108c:	bf00      	nop
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	e000e100 	.word	0xe000e100

0800109c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	6039      	str	r1, [r7, #0]
 80010a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	db0a      	blt.n	80010c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	b2da      	uxtb	r2, r3
 80010b4:	490c      	ldr	r1, [pc, #48]	; (80010e8 <__NVIC_SetPriority+0x4c>)
 80010b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ba:	0112      	lsls	r2, r2, #4
 80010bc:	b2d2      	uxtb	r2, r2
 80010be:	440b      	add	r3, r1
 80010c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010c4:	e00a      	b.n	80010dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	b2da      	uxtb	r2, r3
 80010ca:	4908      	ldr	r1, [pc, #32]	; (80010ec <__NVIC_SetPriority+0x50>)
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	f003 030f 	and.w	r3, r3, #15
 80010d2:	3b04      	subs	r3, #4
 80010d4:	0112      	lsls	r2, r2, #4
 80010d6:	b2d2      	uxtb	r2, r2
 80010d8:	440b      	add	r3, r1
 80010da:	761a      	strb	r2, [r3, #24]
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	e000e100 	.word	0xe000e100
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b089      	sub	sp, #36	; 0x24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	60b9      	str	r1, [r7, #8]
 80010fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	f003 0307 	and.w	r3, r3, #7
 8001102:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	f1c3 0307 	rsb	r3, r3, #7
 800110a:	2b04      	cmp	r3, #4
 800110c:	bf28      	it	cs
 800110e:	2304      	movcs	r3, #4
 8001110:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	3304      	adds	r3, #4
 8001116:	2b06      	cmp	r3, #6
 8001118:	d902      	bls.n	8001120 <NVIC_EncodePriority+0x30>
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	3b03      	subs	r3, #3
 800111e:	e000      	b.n	8001122 <NVIC_EncodePriority+0x32>
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001124:	f04f 32ff 	mov.w	r2, #4294967295
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	43da      	mvns	r2, r3
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	401a      	ands	r2, r3
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001138:	f04f 31ff 	mov.w	r1, #4294967295
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	fa01 f303 	lsl.w	r3, r1, r3
 8001142:	43d9      	mvns	r1, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001148:	4313      	orrs	r3, r2
         );
}
 800114a:	4618      	mov	r0, r3
 800114c:	3724      	adds	r7, #36	; 0x24
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
	...

08001158 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3b01      	subs	r3, #1
 8001164:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001168:	d301      	bcc.n	800116e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800116a:	2301      	movs	r3, #1
 800116c:	e00f      	b.n	800118e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800116e:	4a0a      	ldr	r2, [pc, #40]	; (8001198 <SysTick_Config+0x40>)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3b01      	subs	r3, #1
 8001174:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001176:	210f      	movs	r1, #15
 8001178:	f04f 30ff 	mov.w	r0, #4294967295
 800117c:	f7ff ff8e 	bl	800109c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001180:	4b05      	ldr	r3, [pc, #20]	; (8001198 <SysTick_Config+0x40>)
 8001182:	2200      	movs	r2, #0
 8001184:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001186:	4b04      	ldr	r3, [pc, #16]	; (8001198 <SysTick_Config+0x40>)
 8001188:	2207      	movs	r2, #7
 800118a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	e000e010 	.word	0xe000e010

0800119c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f7ff ff05 	bl	8000fb4 <__NVIC_SetPriorityGrouping>
}
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b086      	sub	sp, #24
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	4603      	mov	r3, r0
 80011ba:	60b9      	str	r1, [r7, #8]
 80011bc:	607a      	str	r2, [r7, #4]
 80011be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011c4:	f7ff ff1a 	bl	8000ffc <__NVIC_GetPriorityGrouping>
 80011c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	68b9      	ldr	r1, [r7, #8]
 80011ce:	6978      	ldr	r0, [r7, #20]
 80011d0:	f7ff ff8e 	bl	80010f0 <NVIC_EncodePriority>
 80011d4:	4602      	mov	r2, r0
 80011d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011da:	4611      	mov	r1, r2
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff ff5d 	bl	800109c <__NVIC_SetPriority>
}
 80011e2:	bf00      	nop
 80011e4:	3718      	adds	r7, #24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b082      	sub	sp, #8
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	4603      	mov	r3, r0
 80011f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff ff0d 	bl	8001018 <__NVIC_EnableIRQ>
}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	b082      	sub	sp, #8
 800120a:	af00      	add	r7, sp, #0
 800120c:	4603      	mov	r3, r0
 800120e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff ff1d 	bl	8001054 <__NVIC_DisableIRQ>
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b082      	sub	sp, #8
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f7ff ff94 	bl	8001158 <SysTick_Config>
 8001230:	4603      	mov	r3, r0
}
 8001232:	4618      	mov	r0, r3
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
	...

0800123c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001248:	f7ff fea8 	bl	8000f9c <HAL_GetTick>
 800124c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d101      	bne.n	8001258 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	e099      	b.n	800138c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2200      	movs	r2, #0
 800125c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2202      	movs	r2, #2
 8001264:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f022 0201 	bic.w	r2, r2, #1
 8001276:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001278:	e00f      	b.n	800129a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800127a:	f7ff fe8f 	bl	8000f9c <HAL_GetTick>
 800127e:	4602      	mov	r2, r0
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	2b05      	cmp	r3, #5
 8001286:	d908      	bls.n	800129a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2220      	movs	r2, #32
 800128c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2203      	movs	r2, #3
 8001292:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e078      	b.n	800138c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 0301 	and.w	r3, r3, #1
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d1e8      	bne.n	800127a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80012b0:	697a      	ldr	r2, [r7, #20]
 80012b2:	4b38      	ldr	r3, [pc, #224]	; (8001394 <HAL_DMA_Init+0x158>)
 80012b4:	4013      	ands	r3, r2
 80012b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685a      	ldr	r2, [r3, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	691b      	ldr	r3, [r3, #16]
 80012cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6a1b      	ldr	r3, [r3, #32]
 80012e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012e6:	697a      	ldr	r2, [r7, #20]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f0:	2b04      	cmp	r3, #4
 80012f2:	d107      	bne.n	8001304 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fc:	4313      	orrs	r3, r2
 80012fe:	697a      	ldr	r2, [r7, #20]
 8001300:	4313      	orrs	r3, r2
 8001302:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	697a      	ldr	r2, [r7, #20]
 800130a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	695b      	ldr	r3, [r3, #20]
 8001312:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	f023 0307 	bic.w	r3, r3, #7
 800131a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001320:	697a      	ldr	r2, [r7, #20]
 8001322:	4313      	orrs	r3, r2
 8001324:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132a:	2b04      	cmp	r3, #4
 800132c:	d117      	bne.n	800135e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001332:	697a      	ldr	r2, [r7, #20]
 8001334:	4313      	orrs	r3, r2
 8001336:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800133c:	2b00      	cmp	r3, #0
 800133e:	d00e      	beq.n	800135e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f000 fb67 	bl	8001a14 <DMA_CheckFifoParam>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d008      	beq.n	800135e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2240      	movs	r2, #64	; 0x40
 8001350:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2201      	movs	r2, #1
 8001356:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800135a:	2301      	movs	r3, #1
 800135c:	e016      	b.n	800138c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	697a      	ldr	r2, [r7, #20]
 8001364:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f000 fb1e 	bl	80019a8 <DMA_CalcBaseAndBitshift>
 800136c:	4603      	mov	r3, r0
 800136e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001374:	223f      	movs	r2, #63	; 0x3f
 8001376:	409a      	lsls	r2, r3
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2200      	movs	r2, #0
 8001380:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2201      	movs	r2, #1
 8001386:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800138a:	2300      	movs	r3, #0
}
 800138c:	4618      	mov	r0, r3
 800138e:	3718      	adds	r7, #24
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	e010803f 	.word	0xe010803f

08001398 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d101      	bne.n	80013aa <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e050      	b.n	800144c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d101      	bne.n	80013ba <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80013b6:	2302      	movs	r3, #2
 80013b8:	e048      	b.n	800144c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f022 0201 	bic.w	r2, r2, #1
 80013c8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2200      	movs	r2, #0
 80013d8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2200      	movs	r2, #0
 80013e0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2200      	movs	r2, #0
 80013e8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2200      	movs	r2, #0
 80013f0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2221      	movs	r2, #33	; 0x21
 80013f8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f000 fad4 	bl	80019a8 <DMA_CalcBaseAndBitshift>
 8001400:	4603      	mov	r3, r0
 8001402:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001408:	223f      	movs	r2, #63	; 0x3f
 800140a:	409a      	lsls	r2, r3
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2200      	movs	r2, #0
 800141a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2200      	movs	r2, #0
 8001420:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2200      	movs	r2, #0
 8001426:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2200      	movs	r2, #0
 8001438:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2200      	movs	r2, #0
 800143e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800144a:	2300      	movs	r3, #0
}
 800144c:	4618      	mov	r0, r3
 800144e:	3710      	adds	r7, #16
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
 8001460:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001462:	2300      	movs	r3, #0
 8001464:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800146a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001472:	2b01      	cmp	r3, #1
 8001474:	d101      	bne.n	800147a <HAL_DMA_Start_IT+0x26>
 8001476:	2302      	movs	r3, #2
 8001478:	e048      	b.n	800150c <HAL_DMA_Start_IT+0xb8>
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	2201      	movs	r2, #1
 800147e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b01      	cmp	r3, #1
 800148c:	d137      	bne.n	80014fe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	2202      	movs	r2, #2
 8001492:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	2200      	movs	r2, #0
 800149a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	68b9      	ldr	r1, [r7, #8]
 80014a2:	68f8      	ldr	r0, [r7, #12]
 80014a4:	f000 fa52 	bl	800194c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ac:	223f      	movs	r2, #63	; 0x3f
 80014ae:	409a      	lsls	r2, r3
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f042 0216 	orr.w	r2, r2, #22
 80014c2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	695a      	ldr	r2, [r3, #20]
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80014d2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d007      	beq.n	80014ec <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f042 0208 	orr.w	r2, r2, #8
 80014ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f042 0201 	orr.w	r2, r2, #1
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	e005      	b.n	800150a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2200      	movs	r2, #0
 8001502:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001506:	2302      	movs	r3, #2
 8001508:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800150a:	7dfb      	ldrb	r3, [r7, #23]
}
 800150c:	4618      	mov	r0, r3
 800150e:	3718      	adds	r7, #24
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001520:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001522:	f7ff fd3b 	bl	8000f9c <HAL_GetTick>
 8001526:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800152e:	b2db      	uxtb	r3, r3
 8001530:	2b02      	cmp	r3, #2
 8001532:	d008      	beq.n	8001546 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2280      	movs	r2, #128	; 0x80
 8001538:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2200      	movs	r2, #0
 800153e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e052      	b.n	80015ec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f022 0216 	bic.w	r2, r2, #22
 8001554:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	695a      	ldr	r2, [r3, #20]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001564:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156a:	2b00      	cmp	r3, #0
 800156c:	d103      	bne.n	8001576 <HAL_DMA_Abort+0x62>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001572:	2b00      	cmp	r3, #0
 8001574:	d007      	beq.n	8001586 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f022 0208 	bic.w	r2, r2, #8
 8001584:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f022 0201 	bic.w	r2, r2, #1
 8001594:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001596:	e013      	b.n	80015c0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001598:	f7ff fd00 	bl	8000f9c <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b05      	cmp	r3, #5
 80015a4:	d90c      	bls.n	80015c0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2220      	movs	r2, #32
 80015aa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2203      	movs	r2, #3
 80015b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e015      	b.n	80015ec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1e4      	bne.n	8001598 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015d2:	223f      	movs	r2, #63	; 0x3f
 80015d4:	409a      	lsls	r2, r3
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2201      	movs	r2, #1
 80015e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80015ea:	2300      	movs	r3, #0
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3710      	adds	r7, #16
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001602:	b2db      	uxtb	r3, r3
 8001604:	2b02      	cmp	r3, #2
 8001606:	d004      	beq.n	8001612 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2280      	movs	r2, #128	; 0x80
 800160c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e00c      	b.n	800162c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2205      	movs	r2, #5
 8001616:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 0201 	bic.w	r2, r2, #1
 8001628:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800162a:	2300      	movs	r3, #0
}
 800162c:	4618      	mov	r0, r3
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001640:	2300      	movs	r3, #0
 8001642:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001644:	4b92      	ldr	r3, [pc, #584]	; (8001890 <HAL_DMA_IRQHandler+0x258>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a92      	ldr	r2, [pc, #584]	; (8001894 <HAL_DMA_IRQHandler+0x25c>)
 800164a:	fba2 2303 	umull	r2, r3, r2, r3
 800164e:	0a9b      	lsrs	r3, r3, #10
 8001650:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001656:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001662:	2208      	movs	r2, #8
 8001664:	409a      	lsls	r2, r3
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	4013      	ands	r3, r2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d01a      	beq.n	80016a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0304 	and.w	r3, r3, #4
 8001678:	2b00      	cmp	r3, #0
 800167a:	d013      	beq.n	80016a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f022 0204 	bic.w	r2, r2, #4
 800168a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001690:	2208      	movs	r2, #8
 8001692:	409a      	lsls	r2, r3
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800169c:	f043 0201 	orr.w	r2, r3, #1
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016a8:	2201      	movs	r2, #1
 80016aa:	409a      	lsls	r2, r3
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	4013      	ands	r3, r2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d012      	beq.n	80016da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	695b      	ldr	r3, [r3, #20]
 80016ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d00b      	beq.n	80016da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016c6:	2201      	movs	r2, #1
 80016c8:	409a      	lsls	r2, r3
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016d2:	f043 0202 	orr.w	r2, r3, #2
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016de:	2204      	movs	r2, #4
 80016e0:	409a      	lsls	r2, r3
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	4013      	ands	r3, r2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d012      	beq.n	8001710 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d00b      	beq.n	8001710 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016fc:	2204      	movs	r2, #4
 80016fe:	409a      	lsls	r2, r3
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001708:	f043 0204 	orr.w	r2, r3, #4
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001714:	2210      	movs	r2, #16
 8001716:	409a      	lsls	r2, r3
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	4013      	ands	r3, r2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d043      	beq.n	80017a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0308 	and.w	r3, r3, #8
 800172a:	2b00      	cmp	r3, #0
 800172c:	d03c      	beq.n	80017a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001732:	2210      	movs	r2, #16
 8001734:	409a      	lsls	r2, r3
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d018      	beq.n	800177a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d108      	bne.n	8001768 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175a:	2b00      	cmp	r3, #0
 800175c:	d024      	beq.n	80017a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	4798      	blx	r3
 8001766:	e01f      	b.n	80017a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800176c:	2b00      	cmp	r3, #0
 800176e:	d01b      	beq.n	80017a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	4798      	blx	r3
 8001778:	e016      	b.n	80017a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001784:	2b00      	cmp	r3, #0
 8001786:	d107      	bne.n	8001798 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f022 0208 	bic.w	r2, r2, #8
 8001796:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179c:	2b00      	cmp	r3, #0
 800179e:	d003      	beq.n	80017a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ac:	2220      	movs	r2, #32
 80017ae:	409a      	lsls	r2, r3
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	4013      	ands	r3, r2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	f000 808e 	beq.w	80018d6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0310 	and.w	r3, r3, #16
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	f000 8086 	beq.w	80018d6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ce:	2220      	movs	r2, #32
 80017d0:	409a      	lsls	r2, r3
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	2b05      	cmp	r3, #5
 80017e0:	d136      	bne.n	8001850 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f022 0216 	bic.w	r2, r2, #22
 80017f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	695a      	ldr	r2, [r3, #20]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001800:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001806:	2b00      	cmp	r3, #0
 8001808:	d103      	bne.n	8001812 <HAL_DMA_IRQHandler+0x1da>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800180e:	2b00      	cmp	r3, #0
 8001810:	d007      	beq.n	8001822 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f022 0208 	bic.w	r2, r2, #8
 8001820:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001826:	223f      	movs	r2, #63	; 0x3f
 8001828:	409a      	lsls	r2, r3
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2201      	movs	r2, #1
 800183a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001842:	2b00      	cmp	r3, #0
 8001844:	d07d      	beq.n	8001942 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	4798      	blx	r3
        }
        return;
 800184e:	e078      	b.n	8001942 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d01c      	beq.n	8001898 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d108      	bne.n	800187e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001870:	2b00      	cmp	r3, #0
 8001872:	d030      	beq.n	80018d6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	4798      	blx	r3
 800187c:	e02b      	b.n	80018d6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001882:	2b00      	cmp	r3, #0
 8001884:	d027      	beq.n	80018d6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	4798      	blx	r3
 800188e:	e022      	b.n	80018d6 <HAL_DMA_IRQHandler+0x29e>
 8001890:	20000000 	.word	0x20000000
 8001894:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d10f      	bne.n	80018c6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f022 0210 	bic.w	r2, r2, #16
 80018b4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2201      	movs	r2, #1
 80018c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d003      	beq.n	80018d6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d032      	beq.n	8001944 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d022      	beq.n	8001930 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2205      	movs	r2, #5
 80018ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f022 0201 	bic.w	r2, r2, #1
 8001900:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	3301      	adds	r3, #1
 8001906:	60bb      	str	r3, [r7, #8]
 8001908:	697a      	ldr	r2, [r7, #20]
 800190a:	429a      	cmp	r2, r3
 800190c:	d307      	bcc.n	800191e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	2b00      	cmp	r3, #0
 800191a:	d1f2      	bne.n	8001902 <HAL_DMA_IRQHandler+0x2ca>
 800191c:	e000      	b.n	8001920 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800191e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2201      	movs	r2, #1
 800192c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001934:	2b00      	cmp	r3, #0
 8001936:	d005      	beq.n	8001944 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	4798      	blx	r3
 8001940:	e000      	b.n	8001944 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001942:	bf00      	nop
    }
  }
}
 8001944:	3718      	adds	r7, #24
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop

0800194c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
 8001958:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001968:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	683a      	ldr	r2, [r7, #0]
 8001970:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	2b40      	cmp	r3, #64	; 0x40
 8001978:	d108      	bne.n	800198c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	68ba      	ldr	r2, [r7, #8]
 8001988:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800198a:	e007      	b.n	800199c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	68ba      	ldr	r2, [r7, #8]
 8001992:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	60da      	str	r2, [r3, #12]
}
 800199c:	bf00      	nop
 800199e:	3714      	adds	r7, #20
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	3b10      	subs	r3, #16
 80019b8:	4a13      	ldr	r2, [pc, #76]	; (8001a08 <DMA_CalcBaseAndBitshift+0x60>)
 80019ba:	fba2 2303 	umull	r2, r3, r2, r3
 80019be:	091b      	lsrs	r3, r3, #4
 80019c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80019c2:	4a12      	ldr	r2, [pc, #72]	; (8001a0c <DMA_CalcBaseAndBitshift+0x64>)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	4413      	add	r3, r2
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	461a      	mov	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2b03      	cmp	r3, #3
 80019d4:	d908      	bls.n	80019e8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	461a      	mov	r2, r3
 80019dc:	4b0c      	ldr	r3, [pc, #48]	; (8001a10 <DMA_CalcBaseAndBitshift+0x68>)
 80019de:	4013      	ands	r3, r2
 80019e0:	1d1a      	adds	r2, r3, #4
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	659a      	str	r2, [r3, #88]	; 0x58
 80019e6:	e006      	b.n	80019f6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	461a      	mov	r2, r3
 80019ee:	4b08      	ldr	r3, [pc, #32]	; (8001a10 <DMA_CalcBaseAndBitshift+0x68>)
 80019f0:	4013      	ands	r3, r2
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3714      	adds	r7, #20
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	aaaaaaab 	.word	0xaaaaaaab
 8001a0c:	08005620 	.word	0x08005620
 8001a10:	fffffc00 	.word	0xfffffc00

08001a14 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a24:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d11f      	bne.n	8001a6e <DMA_CheckFifoParam+0x5a>
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	2b03      	cmp	r3, #3
 8001a32:	d856      	bhi.n	8001ae2 <DMA_CheckFifoParam+0xce>
 8001a34:	a201      	add	r2, pc, #4	; (adr r2, 8001a3c <DMA_CheckFifoParam+0x28>)
 8001a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a3a:	bf00      	nop
 8001a3c:	08001a4d 	.word	0x08001a4d
 8001a40:	08001a5f 	.word	0x08001a5f
 8001a44:	08001a4d 	.word	0x08001a4d
 8001a48:	08001ae3 	.word	0x08001ae3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d046      	beq.n	8001ae6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a5c:	e043      	b.n	8001ae6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a62:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a66:	d140      	bne.n	8001aea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a6c:	e03d      	b.n	8001aea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a76:	d121      	bne.n	8001abc <DMA_CheckFifoParam+0xa8>
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	2b03      	cmp	r3, #3
 8001a7c:	d837      	bhi.n	8001aee <DMA_CheckFifoParam+0xda>
 8001a7e:	a201      	add	r2, pc, #4	; (adr r2, 8001a84 <DMA_CheckFifoParam+0x70>)
 8001a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a84:	08001a95 	.word	0x08001a95
 8001a88:	08001a9b 	.word	0x08001a9b
 8001a8c:	08001a95 	.word	0x08001a95
 8001a90:	08001aad 	.word	0x08001aad
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	73fb      	strb	r3, [r7, #15]
      break;
 8001a98:	e030      	b.n	8001afc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d025      	beq.n	8001af2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001aaa:	e022      	b.n	8001af2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ab4:	d11f      	bne.n	8001af6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001aba:	e01c      	b.n	8001af6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d903      	bls.n	8001aca <DMA_CheckFifoParam+0xb6>
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	2b03      	cmp	r3, #3
 8001ac6:	d003      	beq.n	8001ad0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001ac8:	e018      	b.n	8001afc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	73fb      	strb	r3, [r7, #15]
      break;
 8001ace:	e015      	b.n	8001afc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d00e      	beq.n	8001afa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	73fb      	strb	r3, [r7, #15]
      break;
 8001ae0:	e00b      	b.n	8001afa <DMA_CheckFifoParam+0xe6>
      break;
 8001ae2:	bf00      	nop
 8001ae4:	e00a      	b.n	8001afc <DMA_CheckFifoParam+0xe8>
      break;
 8001ae6:	bf00      	nop
 8001ae8:	e008      	b.n	8001afc <DMA_CheckFifoParam+0xe8>
      break;
 8001aea:	bf00      	nop
 8001aec:	e006      	b.n	8001afc <DMA_CheckFifoParam+0xe8>
      break;
 8001aee:	bf00      	nop
 8001af0:	e004      	b.n	8001afc <DMA_CheckFifoParam+0xe8>
      break;
 8001af2:	bf00      	nop
 8001af4:	e002      	b.n	8001afc <DMA_CheckFifoParam+0xe8>
      break;   
 8001af6:	bf00      	nop
 8001af8:	e000      	b.n	8001afc <DMA_CheckFifoParam+0xe8>
      break;
 8001afa:	bf00      	nop
    }
  } 
  
  return status; 
 8001afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3714      	adds	r7, #20
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop

08001b0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b089      	sub	sp, #36	; 0x24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001b16:	2300      	movs	r3, #0
 8001b18:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001b22:	2300      	movs	r3, #0
 8001b24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b26:	2300      	movs	r3, #0
 8001b28:	61fb      	str	r3, [r7, #28]
 8001b2a:	e175      	b.n	8001e18 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	697a      	ldr	r2, [r7, #20]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	f040 8164 	bne.w	8001e12 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d00b      	beq.n	8001b6a <HAL_GPIO_Init+0x5e>
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d007      	beq.n	8001b6a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b5e:	2b11      	cmp	r3, #17
 8001b60:	d003      	beq.n	8001b6a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	2b12      	cmp	r3, #18
 8001b68:	d130      	bne.n	8001bcc <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	2203      	movs	r2, #3
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	43db      	mvns	r3, r3
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	68da      	ldr	r2, [r3, #12]
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4013      	ands	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	091b      	lsrs	r3, r3, #4
 8001bb6:	f003 0201 	and.w	r2, r3, #1
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	2203      	movs	r2, #3
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4013      	ands	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	689a      	ldr	r2, [r3, #8]
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d003      	beq.n	8001c0c <HAL_GPIO_Init+0x100>
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	2b12      	cmp	r3, #18
 8001c0a:	d123      	bne.n	8001c54 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	08da      	lsrs	r2, r3, #3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	3208      	adds	r2, #8
 8001c14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	f003 0307 	and.w	r3, r3, #7
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	220f      	movs	r2, #15
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	43db      	mvns	r3, r3
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	691a      	ldr	r2, [r3, #16]
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	f003 0307 	and.w	r3, r3, #7
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	08da      	lsrs	r2, r3, #3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	3208      	adds	r2, #8
 8001c4e:	69b9      	ldr	r1, [r7, #24]
 8001c50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	2203      	movs	r2, #3
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	43db      	mvns	r3, r3
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f003 0203 	and.w	r2, r3, #3
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f000 80be 	beq.w	8001e12 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c96:	4b66      	ldr	r3, [pc, #408]	; (8001e30 <HAL_GPIO_Init+0x324>)
 8001c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9a:	4a65      	ldr	r2, [pc, #404]	; (8001e30 <HAL_GPIO_Init+0x324>)
 8001c9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ca0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ca2:	4b63      	ldr	r3, [pc, #396]	; (8001e30 <HAL_GPIO_Init+0x324>)
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001caa:	60fb      	str	r3, [r7, #12]
 8001cac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001cae:	4a61      	ldr	r2, [pc, #388]	; (8001e34 <HAL_GPIO_Init+0x328>)
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	089b      	lsrs	r3, r3, #2
 8001cb4:	3302      	adds	r3, #2
 8001cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	f003 0303 	and.w	r3, r3, #3
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	220f      	movs	r2, #15
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a58      	ldr	r2, [pc, #352]	; (8001e38 <HAL_GPIO_Init+0x32c>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d037      	beq.n	8001d4a <HAL_GPIO_Init+0x23e>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a57      	ldr	r2, [pc, #348]	; (8001e3c <HAL_GPIO_Init+0x330>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d031      	beq.n	8001d46 <HAL_GPIO_Init+0x23a>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a56      	ldr	r2, [pc, #344]	; (8001e40 <HAL_GPIO_Init+0x334>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d02b      	beq.n	8001d42 <HAL_GPIO_Init+0x236>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a55      	ldr	r2, [pc, #340]	; (8001e44 <HAL_GPIO_Init+0x338>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d025      	beq.n	8001d3e <HAL_GPIO_Init+0x232>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a54      	ldr	r2, [pc, #336]	; (8001e48 <HAL_GPIO_Init+0x33c>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d01f      	beq.n	8001d3a <HAL_GPIO_Init+0x22e>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a53      	ldr	r2, [pc, #332]	; (8001e4c <HAL_GPIO_Init+0x340>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d019      	beq.n	8001d36 <HAL_GPIO_Init+0x22a>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a52      	ldr	r2, [pc, #328]	; (8001e50 <HAL_GPIO_Init+0x344>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d013      	beq.n	8001d32 <HAL_GPIO_Init+0x226>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a51      	ldr	r2, [pc, #324]	; (8001e54 <HAL_GPIO_Init+0x348>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d00d      	beq.n	8001d2e <HAL_GPIO_Init+0x222>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a50      	ldr	r2, [pc, #320]	; (8001e58 <HAL_GPIO_Init+0x34c>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d007      	beq.n	8001d2a <HAL_GPIO_Init+0x21e>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a4f      	ldr	r2, [pc, #316]	; (8001e5c <HAL_GPIO_Init+0x350>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d101      	bne.n	8001d26 <HAL_GPIO_Init+0x21a>
 8001d22:	2309      	movs	r3, #9
 8001d24:	e012      	b.n	8001d4c <HAL_GPIO_Init+0x240>
 8001d26:	230a      	movs	r3, #10
 8001d28:	e010      	b.n	8001d4c <HAL_GPIO_Init+0x240>
 8001d2a:	2308      	movs	r3, #8
 8001d2c:	e00e      	b.n	8001d4c <HAL_GPIO_Init+0x240>
 8001d2e:	2307      	movs	r3, #7
 8001d30:	e00c      	b.n	8001d4c <HAL_GPIO_Init+0x240>
 8001d32:	2306      	movs	r3, #6
 8001d34:	e00a      	b.n	8001d4c <HAL_GPIO_Init+0x240>
 8001d36:	2305      	movs	r3, #5
 8001d38:	e008      	b.n	8001d4c <HAL_GPIO_Init+0x240>
 8001d3a:	2304      	movs	r3, #4
 8001d3c:	e006      	b.n	8001d4c <HAL_GPIO_Init+0x240>
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e004      	b.n	8001d4c <HAL_GPIO_Init+0x240>
 8001d42:	2302      	movs	r3, #2
 8001d44:	e002      	b.n	8001d4c <HAL_GPIO_Init+0x240>
 8001d46:	2301      	movs	r3, #1
 8001d48:	e000      	b.n	8001d4c <HAL_GPIO_Init+0x240>
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	69fa      	ldr	r2, [r7, #28]
 8001d4e:	f002 0203 	and.w	r2, r2, #3
 8001d52:	0092      	lsls	r2, r2, #2
 8001d54:	4093      	lsls	r3, r2
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001d5c:	4935      	ldr	r1, [pc, #212]	; (8001e34 <HAL_GPIO_Init+0x328>)
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	089b      	lsrs	r3, r3, #2
 8001d62:	3302      	adds	r3, #2
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d6a:	4b3d      	ldr	r3, [pc, #244]	; (8001e60 <HAL_GPIO_Init+0x354>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	43db      	mvns	r3, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4013      	ands	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d8e:	4a34      	ldr	r2, [pc, #208]	; (8001e60 <HAL_GPIO_Init+0x354>)
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d94:	4b32      	ldr	r3, [pc, #200]	; (8001e60 <HAL_GPIO_Init+0x354>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4013      	ands	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d003      	beq.n	8001db8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001db8:	4a29      	ldr	r2, [pc, #164]	; (8001e60 <HAL_GPIO_Init+0x354>)
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dbe:	4b28      	ldr	r3, [pc, #160]	; (8001e60 <HAL_GPIO_Init+0x354>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001de2:	4a1f      	ldr	r2, [pc, #124]	; (8001e60 <HAL_GPIO_Init+0x354>)
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001de8:	4b1d      	ldr	r3, [pc, #116]	; (8001e60 <HAL_GPIO_Init+0x354>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	43db      	mvns	r3, r3
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4013      	ands	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d003      	beq.n	8001e0c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e0c:	4a14      	ldr	r2, [pc, #80]	; (8001e60 <HAL_GPIO_Init+0x354>)
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	3301      	adds	r3, #1
 8001e16:	61fb      	str	r3, [r7, #28]
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	2b0f      	cmp	r3, #15
 8001e1c:	f67f ae86 	bls.w	8001b2c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001e20:	bf00      	nop
 8001e22:	bf00      	nop
 8001e24:	3724      	adds	r7, #36	; 0x24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	40023800 	.word	0x40023800
 8001e34:	40013800 	.word	0x40013800
 8001e38:	40020000 	.word	0x40020000
 8001e3c:	40020400 	.word	0x40020400
 8001e40:	40020800 	.word	0x40020800
 8001e44:	40020c00 	.word	0x40020c00
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	40021400 	.word	0x40021400
 8001e50:	40021800 	.word	0x40021800
 8001e54:	40021c00 	.word	0x40021c00
 8001e58:	40022000 	.word	0x40022000
 8001e5c:	40022400 	.word	0x40022400
 8001e60:	40013c00 	.word	0x40013c00

08001e64 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b087      	sub	sp, #28
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8001e72:	2300      	movs	r3, #0
 8001e74:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8001e76:	2300      	movs	r3, #0
 8001e78:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	617b      	str	r3, [r7, #20]
 8001e7e:	e0d9      	b.n	8002034 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001e80:	2201      	movs	r2, #1
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	f040 80c9 	bne.w	800202e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8001e9c:	4a6b      	ldr	r2, [pc, #428]	; (800204c <HAL_GPIO_DeInit+0x1e8>)
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	089b      	lsrs	r3, r3, #2
 8001ea2:	3302      	adds	r3, #2
 8001ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ea8:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	f003 0303 	and.w	r3, r3, #3
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	220f      	movs	r2, #15
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	68ba      	ldr	r2, [r7, #8]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a63      	ldr	r2, [pc, #396]	; (8002050 <HAL_GPIO_DeInit+0x1ec>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d037      	beq.n	8001f36 <HAL_GPIO_DeInit+0xd2>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a62      	ldr	r2, [pc, #392]	; (8002054 <HAL_GPIO_DeInit+0x1f0>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d031      	beq.n	8001f32 <HAL_GPIO_DeInit+0xce>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a61      	ldr	r2, [pc, #388]	; (8002058 <HAL_GPIO_DeInit+0x1f4>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d02b      	beq.n	8001f2e <HAL_GPIO_DeInit+0xca>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a60      	ldr	r2, [pc, #384]	; (800205c <HAL_GPIO_DeInit+0x1f8>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d025      	beq.n	8001f2a <HAL_GPIO_DeInit+0xc6>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a5f      	ldr	r2, [pc, #380]	; (8002060 <HAL_GPIO_DeInit+0x1fc>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d01f      	beq.n	8001f26 <HAL_GPIO_DeInit+0xc2>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a5e      	ldr	r2, [pc, #376]	; (8002064 <HAL_GPIO_DeInit+0x200>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d019      	beq.n	8001f22 <HAL_GPIO_DeInit+0xbe>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a5d      	ldr	r2, [pc, #372]	; (8002068 <HAL_GPIO_DeInit+0x204>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d013      	beq.n	8001f1e <HAL_GPIO_DeInit+0xba>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a5c      	ldr	r2, [pc, #368]	; (800206c <HAL_GPIO_DeInit+0x208>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d00d      	beq.n	8001f1a <HAL_GPIO_DeInit+0xb6>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a5b      	ldr	r2, [pc, #364]	; (8002070 <HAL_GPIO_DeInit+0x20c>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d007      	beq.n	8001f16 <HAL_GPIO_DeInit+0xb2>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a5a      	ldr	r2, [pc, #360]	; (8002074 <HAL_GPIO_DeInit+0x210>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d101      	bne.n	8001f12 <HAL_GPIO_DeInit+0xae>
 8001f0e:	2309      	movs	r3, #9
 8001f10:	e012      	b.n	8001f38 <HAL_GPIO_DeInit+0xd4>
 8001f12:	230a      	movs	r3, #10
 8001f14:	e010      	b.n	8001f38 <HAL_GPIO_DeInit+0xd4>
 8001f16:	2308      	movs	r3, #8
 8001f18:	e00e      	b.n	8001f38 <HAL_GPIO_DeInit+0xd4>
 8001f1a:	2307      	movs	r3, #7
 8001f1c:	e00c      	b.n	8001f38 <HAL_GPIO_DeInit+0xd4>
 8001f1e:	2306      	movs	r3, #6
 8001f20:	e00a      	b.n	8001f38 <HAL_GPIO_DeInit+0xd4>
 8001f22:	2305      	movs	r3, #5
 8001f24:	e008      	b.n	8001f38 <HAL_GPIO_DeInit+0xd4>
 8001f26:	2304      	movs	r3, #4
 8001f28:	e006      	b.n	8001f38 <HAL_GPIO_DeInit+0xd4>
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e004      	b.n	8001f38 <HAL_GPIO_DeInit+0xd4>
 8001f2e:	2302      	movs	r3, #2
 8001f30:	e002      	b.n	8001f38 <HAL_GPIO_DeInit+0xd4>
 8001f32:	2301      	movs	r3, #1
 8001f34:	e000      	b.n	8001f38 <HAL_GPIO_DeInit+0xd4>
 8001f36:	2300      	movs	r3, #0
 8001f38:	697a      	ldr	r2, [r7, #20]
 8001f3a:	f002 0203 	and.w	r2, r2, #3
 8001f3e:	0092      	lsls	r2, r2, #2
 8001f40:	4093      	lsls	r3, r2
 8001f42:	68ba      	ldr	r2, [r7, #8]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d132      	bne.n	8001fae <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001f48:	4b4b      	ldr	r3, [pc, #300]	; (8002078 <HAL_GPIO_DeInit+0x214>)
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	4949      	ldr	r1, [pc, #292]	; (8002078 <HAL_GPIO_DeInit+0x214>)
 8001f52:	4013      	ands	r3, r2
 8001f54:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001f56:	4b48      	ldr	r3, [pc, #288]	; (8002078 <HAL_GPIO_DeInit+0x214>)
 8001f58:	685a      	ldr	r2, [r3, #4]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	4946      	ldr	r1, [pc, #280]	; (8002078 <HAL_GPIO_DeInit+0x214>)
 8001f60:	4013      	ands	r3, r2
 8001f62:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001f64:	4b44      	ldr	r3, [pc, #272]	; (8002078 <HAL_GPIO_DeInit+0x214>)
 8001f66:	689a      	ldr	r2, [r3, #8]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	4942      	ldr	r1, [pc, #264]	; (8002078 <HAL_GPIO_DeInit+0x214>)
 8001f6e:	4013      	ands	r3, r2
 8001f70:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001f72:	4b41      	ldr	r3, [pc, #260]	; (8002078 <HAL_GPIO_DeInit+0x214>)
 8001f74:	68da      	ldr	r2, [r3, #12]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	493f      	ldr	r1, [pc, #252]	; (8002078 <HAL_GPIO_DeInit+0x214>)
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	f003 0303 	and.w	r3, r3, #3
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	220f      	movs	r2, #15
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8001f90:	4a2e      	ldr	r2, [pc, #184]	; (800204c <HAL_GPIO_DeInit+0x1e8>)
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	089b      	lsrs	r3, r3, #2
 8001f96:	3302      	adds	r3, #2
 8001f98:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	43da      	mvns	r2, r3
 8001fa0:	482a      	ldr	r0, [pc, #168]	; (800204c <HAL_GPIO_DeInit+0x1e8>)
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	089b      	lsrs	r3, r3, #2
 8001fa6:	400a      	ands	r2, r1
 8001fa8:	3302      	adds	r3, #2
 8001faa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	2103      	movs	r1, #3
 8001fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	401a      	ands	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	08da      	lsrs	r2, r3, #3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3208      	adds	r2, #8
 8001fcc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	f003 0307 	and.w	r3, r3, #7
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	220f      	movs	r2, #15
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	43db      	mvns	r3, r3
 8001fe0:	697a      	ldr	r2, [r7, #20]
 8001fe2:	08d2      	lsrs	r2, r2, #3
 8001fe4:	4019      	ands	r1, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	3208      	adds	r2, #8
 8001fea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	68da      	ldr	r2, [r3, #12]
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	2103      	movs	r1, #3
 8001ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	401a      	ands	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685a      	ldr	r2, [r3, #4]
 8002008:	2101      	movs	r1, #1
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	fa01 f303 	lsl.w	r3, r1, r3
 8002010:	43db      	mvns	r3, r3
 8002012:	401a      	ands	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	2103      	movs	r1, #3
 8002022:	fa01 f303 	lsl.w	r3, r1, r3
 8002026:	43db      	mvns	r3, r3
 8002028:	401a      	ands	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	3301      	adds	r3, #1
 8002032:	617b      	str	r3, [r7, #20]
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	2b0f      	cmp	r3, #15
 8002038:	f67f af22 	bls.w	8001e80 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800203c:	bf00      	nop
 800203e:	bf00      	nop
 8002040:	371c      	adds	r7, #28
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	40013800 	.word	0x40013800
 8002050:	40020000 	.word	0x40020000
 8002054:	40020400 	.word	0x40020400
 8002058:	40020800 	.word	0x40020800
 800205c:	40020c00 	.word	0x40020c00
 8002060:	40021000 	.word	0x40021000
 8002064:	40021400 	.word	0x40021400
 8002068:	40021800 	.word	0x40021800
 800206c:	40021c00 	.word	0x40021c00
 8002070:	40022000 	.word	0x40022000
 8002074:	40022400 	.word	0x40022400
 8002078:	40013c00 	.word	0x40013c00

0800207c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	460b      	mov	r3, r1
 8002086:	807b      	strh	r3, [r7, #2]
 8002088:	4613      	mov	r3, r2
 800208a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800208c:	787b      	ldrb	r3, [r7, #1]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d003      	beq.n	800209a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002092:	887a      	ldrh	r2, [r7, #2]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002098:	e003      	b.n	80020a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800209a:	887b      	ldrh	r3, [r7, #2]
 800209c:	041a      	lsls	r2, r3, #16
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	619a      	str	r2, [r3, #24]
}
 80020a2:	bf00      	nop
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr

080020ae <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020ae:	b480      	push	{r7}
 80020b0:	b085      	sub	sp, #20
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
 80020b6:	460b      	mov	r3, r1
 80020b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020c0:	887a      	ldrh	r2, [r7, #2]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	4013      	ands	r3, r2
 80020c6:	041a      	lsls	r2, r3, #16
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	43d9      	mvns	r1, r3
 80020cc:	887b      	ldrh	r3, [r7, #2]
 80020ce:	400b      	ands	r3, r1
 80020d0:	431a      	orrs	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	619a      	str	r2, [r3, #24]
}
 80020d6:	bf00      	nop
 80020d8:	3714      	adds	r7, #20
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
	...

080020e4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020e8:	4b05      	ldr	r3, [pc, #20]	; (8002100 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a04      	ldr	r2, [pc, #16]	; (8002100 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80020ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020f2:	6013      	str	r3, [r2, #0]
}
 80020f4:	bf00      	nop
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	40007000 	.word	0x40007000

08002104 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800210a:	2300      	movs	r3, #0
 800210c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800210e:	4b23      	ldr	r3, [pc, #140]	; (800219c <HAL_PWREx_EnableOverDrive+0x98>)
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	4a22      	ldr	r2, [pc, #136]	; (800219c <HAL_PWREx_EnableOverDrive+0x98>)
 8002114:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002118:	6413      	str	r3, [r2, #64]	; 0x40
 800211a:	4b20      	ldr	r3, [pc, #128]	; (800219c <HAL_PWREx_EnableOverDrive+0x98>)
 800211c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002122:	603b      	str	r3, [r7, #0]
 8002124:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002126:	4b1e      	ldr	r3, [pc, #120]	; (80021a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a1d      	ldr	r2, [pc, #116]	; (80021a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800212c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002130:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002132:	f7fe ff33 	bl	8000f9c <HAL_GetTick>
 8002136:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002138:	e009      	b.n	800214e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800213a:	f7fe ff2f 	bl	8000f9c <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002148:	d901      	bls.n	800214e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e022      	b.n	8002194 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800214e:	4b14      	ldr	r3, [pc, #80]	; (80021a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002156:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800215a:	d1ee      	bne.n	800213a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800215c:	4b10      	ldr	r3, [pc, #64]	; (80021a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a0f      	ldr	r2, [pc, #60]	; (80021a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002162:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002166:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002168:	f7fe ff18 	bl	8000f9c <HAL_GetTick>
 800216c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800216e:	e009      	b.n	8002184 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002170:	f7fe ff14 	bl	8000f9c <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800217e:	d901      	bls.n	8002184 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e007      	b.n	8002194 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002184:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002190:	d1ee      	bne.n	8002170 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002192:	2300      	movs	r3, #0
}
 8002194:	4618      	mov	r0, r3
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	40023800 	.word	0x40023800
 80021a0:	40007000 	.word	0x40007000

080021a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80021ac:	2300      	movs	r3, #0
 80021ae:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d101      	bne.n	80021ba <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e29b      	b.n	80026f2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	f000 8087 	beq.w	80022d6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021c8:	4b96      	ldr	r3, [pc, #600]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f003 030c 	and.w	r3, r3, #12
 80021d0:	2b04      	cmp	r3, #4
 80021d2:	d00c      	beq.n	80021ee <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021d4:	4b93      	ldr	r3, [pc, #588]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f003 030c 	and.w	r3, r3, #12
 80021dc:	2b08      	cmp	r3, #8
 80021de:	d112      	bne.n	8002206 <HAL_RCC_OscConfig+0x62>
 80021e0:	4b90      	ldr	r3, [pc, #576]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021ec:	d10b      	bne.n	8002206 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ee:	4b8d      	ldr	r3, [pc, #564]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d06c      	beq.n	80022d4 <HAL_RCC_OscConfig+0x130>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d168      	bne.n	80022d4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e275      	b.n	80026f2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800220e:	d106      	bne.n	800221e <HAL_RCC_OscConfig+0x7a>
 8002210:	4b84      	ldr	r3, [pc, #528]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a83      	ldr	r2, [pc, #524]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 8002216:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800221a:	6013      	str	r3, [r2, #0]
 800221c:	e02e      	b.n	800227c <HAL_RCC_OscConfig+0xd8>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d10c      	bne.n	8002240 <HAL_RCC_OscConfig+0x9c>
 8002226:	4b7f      	ldr	r3, [pc, #508]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a7e      	ldr	r2, [pc, #504]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 800222c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002230:	6013      	str	r3, [r2, #0]
 8002232:	4b7c      	ldr	r3, [pc, #496]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a7b      	ldr	r2, [pc, #492]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 8002238:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800223c:	6013      	str	r3, [r2, #0]
 800223e:	e01d      	b.n	800227c <HAL_RCC_OscConfig+0xd8>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002248:	d10c      	bne.n	8002264 <HAL_RCC_OscConfig+0xc0>
 800224a:	4b76      	ldr	r3, [pc, #472]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a75      	ldr	r2, [pc, #468]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 8002250:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002254:	6013      	str	r3, [r2, #0]
 8002256:	4b73      	ldr	r3, [pc, #460]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a72      	ldr	r2, [pc, #456]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 800225c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002260:	6013      	str	r3, [r2, #0]
 8002262:	e00b      	b.n	800227c <HAL_RCC_OscConfig+0xd8>
 8002264:	4b6f      	ldr	r3, [pc, #444]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a6e      	ldr	r2, [pc, #440]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 800226a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800226e:	6013      	str	r3, [r2, #0]
 8002270:	4b6c      	ldr	r3, [pc, #432]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a6b      	ldr	r2, [pc, #428]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 8002276:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800227a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d013      	beq.n	80022ac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002284:	f7fe fe8a 	bl	8000f9c <HAL_GetTick>
 8002288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800228a:	e008      	b.n	800229e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800228c:	f7fe fe86 	bl	8000f9c <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b64      	cmp	r3, #100	; 0x64
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e229      	b.n	80026f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800229e:	4b61      	ldr	r3, [pc, #388]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d0f0      	beq.n	800228c <HAL_RCC_OscConfig+0xe8>
 80022aa:	e014      	b.n	80022d6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ac:	f7fe fe76 	bl	8000f9c <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022b4:	f7fe fe72 	bl	8000f9c <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b64      	cmp	r3, #100	; 0x64
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e215      	b.n	80026f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022c6:	4b57      	ldr	r3, [pc, #348]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1f0      	bne.n	80022b4 <HAL_RCC_OscConfig+0x110>
 80022d2:	e000      	b.n	80022d6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d069      	beq.n	80023b6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022e2:	4b50      	ldr	r3, [pc, #320]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f003 030c 	and.w	r3, r3, #12
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d00b      	beq.n	8002306 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022ee:	4b4d      	ldr	r3, [pc, #308]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f003 030c 	and.w	r3, r3, #12
 80022f6:	2b08      	cmp	r3, #8
 80022f8:	d11c      	bne.n	8002334 <HAL_RCC_OscConfig+0x190>
 80022fa:	4b4a      	ldr	r3, [pc, #296]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d116      	bne.n	8002334 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002306:	4b47      	ldr	r3, [pc, #284]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d005      	beq.n	800231e <HAL_RCC_OscConfig+0x17a>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d001      	beq.n	800231e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e1e9      	b.n	80026f2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800231e:	4b41      	ldr	r3, [pc, #260]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	493d      	ldr	r1, [pc, #244]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 800232e:	4313      	orrs	r3, r2
 8002330:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002332:	e040      	b.n	80023b6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d023      	beq.n	8002384 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800233c:	4b39      	ldr	r3, [pc, #228]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a38      	ldr	r2, [pc, #224]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 8002342:	f043 0301 	orr.w	r3, r3, #1
 8002346:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002348:	f7fe fe28 	bl	8000f9c <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002350:	f7fe fe24 	bl	8000f9c <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e1c7      	b.n	80026f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002362:	4b30      	ldr	r3, [pc, #192]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0f0      	beq.n	8002350 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800236e:	4b2d      	ldr	r3, [pc, #180]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	4929      	ldr	r1, [pc, #164]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 800237e:	4313      	orrs	r3, r2
 8002380:	600b      	str	r3, [r1, #0]
 8002382:	e018      	b.n	80023b6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002384:	4b27      	ldr	r3, [pc, #156]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a26      	ldr	r2, [pc, #152]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 800238a:	f023 0301 	bic.w	r3, r3, #1
 800238e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002390:	f7fe fe04 	bl	8000f9c <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002398:	f7fe fe00 	bl	8000f9c <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e1a3      	b.n	80026f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023aa:	4b1e      	ldr	r3, [pc, #120]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1f0      	bne.n	8002398 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0308 	and.w	r3, r3, #8
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d038      	beq.n	8002434 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d019      	beq.n	80023fe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023ca:	4b16      	ldr	r3, [pc, #88]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 80023cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023ce:	4a15      	ldr	r2, [pc, #84]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 80023d0:	f043 0301 	orr.w	r3, r3, #1
 80023d4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d6:	f7fe fde1 	bl	8000f9c <HAL_GetTick>
 80023da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023dc:	e008      	b.n	80023f0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023de:	f7fe fddd 	bl	8000f9c <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e180      	b.n	80026f2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023f0:	4b0c      	ldr	r3, [pc, #48]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 80023f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023f4:	f003 0302 	and.w	r3, r3, #2
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d0f0      	beq.n	80023de <HAL_RCC_OscConfig+0x23a>
 80023fc:	e01a      	b.n	8002434 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023fe:	4b09      	ldr	r3, [pc, #36]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 8002400:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002402:	4a08      	ldr	r2, [pc, #32]	; (8002424 <HAL_RCC_OscConfig+0x280>)
 8002404:	f023 0301 	bic.w	r3, r3, #1
 8002408:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800240a:	f7fe fdc7 	bl	8000f9c <HAL_GetTick>
 800240e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002410:	e00a      	b.n	8002428 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002412:	f7fe fdc3 	bl	8000f9c <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d903      	bls.n	8002428 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e166      	b.n	80026f2 <HAL_RCC_OscConfig+0x54e>
 8002424:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002428:	4b92      	ldr	r3, [pc, #584]	; (8002674 <HAL_RCC_OscConfig+0x4d0>)
 800242a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d1ee      	bne.n	8002412 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0304 	and.w	r3, r3, #4
 800243c:	2b00      	cmp	r3, #0
 800243e:	f000 80a4 	beq.w	800258a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002442:	4b8c      	ldr	r3, [pc, #560]	; (8002674 <HAL_RCC_OscConfig+0x4d0>)
 8002444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d10d      	bne.n	800246a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800244e:	4b89      	ldr	r3, [pc, #548]	; (8002674 <HAL_RCC_OscConfig+0x4d0>)
 8002450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002452:	4a88      	ldr	r2, [pc, #544]	; (8002674 <HAL_RCC_OscConfig+0x4d0>)
 8002454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002458:	6413      	str	r3, [r2, #64]	; 0x40
 800245a:	4b86      	ldr	r3, [pc, #536]	; (8002674 <HAL_RCC_OscConfig+0x4d0>)
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002462:	60bb      	str	r3, [r7, #8]
 8002464:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002466:	2301      	movs	r3, #1
 8002468:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800246a:	4b83      	ldr	r3, [pc, #524]	; (8002678 <HAL_RCC_OscConfig+0x4d4>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002472:	2b00      	cmp	r3, #0
 8002474:	d118      	bne.n	80024a8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002476:	4b80      	ldr	r3, [pc, #512]	; (8002678 <HAL_RCC_OscConfig+0x4d4>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a7f      	ldr	r2, [pc, #508]	; (8002678 <HAL_RCC_OscConfig+0x4d4>)
 800247c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002480:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002482:	f7fe fd8b 	bl	8000f9c <HAL_GetTick>
 8002486:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002488:	e008      	b.n	800249c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800248a:	f7fe fd87 	bl	8000f9c <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b64      	cmp	r3, #100	; 0x64
 8002496:	d901      	bls.n	800249c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e12a      	b.n	80026f2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800249c:	4b76      	ldr	r3, [pc, #472]	; (8002678 <HAL_RCC_OscConfig+0x4d4>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d0f0      	beq.n	800248a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d106      	bne.n	80024be <HAL_RCC_OscConfig+0x31a>
 80024b0:	4b70      	ldr	r3, [pc, #448]	; (8002674 <HAL_RCC_OscConfig+0x4d0>)
 80024b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b4:	4a6f      	ldr	r2, [pc, #444]	; (8002674 <HAL_RCC_OscConfig+0x4d0>)
 80024b6:	f043 0301 	orr.w	r3, r3, #1
 80024ba:	6713      	str	r3, [r2, #112]	; 0x70
 80024bc:	e02d      	b.n	800251a <HAL_RCC_OscConfig+0x376>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10c      	bne.n	80024e0 <HAL_RCC_OscConfig+0x33c>
 80024c6:	4b6b      	ldr	r3, [pc, #428]	; (8002674 <HAL_RCC_OscConfig+0x4d0>)
 80024c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ca:	4a6a      	ldr	r2, [pc, #424]	; (8002674 <HAL_RCC_OscConfig+0x4d0>)
 80024cc:	f023 0301 	bic.w	r3, r3, #1
 80024d0:	6713      	str	r3, [r2, #112]	; 0x70
 80024d2:	4b68      	ldr	r3, [pc, #416]	; (8002674 <HAL_RCC_OscConfig+0x4d0>)
 80024d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d6:	4a67      	ldr	r2, [pc, #412]	; (8002674 <HAL_RCC_OscConfig+0x4d0>)
 80024d8:	f023 0304 	bic.w	r3, r3, #4
 80024dc:	6713      	str	r3, [r2, #112]	; 0x70
 80024de:	e01c      	b.n	800251a <HAL_RCC_OscConfig+0x376>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	2b05      	cmp	r3, #5
 80024e6:	d10c      	bne.n	8002502 <HAL_RCC_OscConfig+0x35e>
 80024e8:	4b62      	ldr	r3, [pc, #392]	; (8002674 <HAL_RCC_OscConfig+0x4d0>)
 80024ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ec:	4a61      	ldr	r2, [pc, #388]	; (8002674 <HAL_RCC_OscConfig+0x4d0>)
 80024ee:	f043 0304 	orr.w	r3, r3, #4
 80024f2:	6713      	str	r3, [r2, #112]	; 0x70
 80024f4:	4b5f      	ldr	r3, [pc, #380]	; (8002674 <HAL_RCC_OscConfig+0x4d0>)
 80024f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f8:	4a5e      	ldr	r2, [pc, #376]	; (8002674 <HAL_RCC_OscConfig+0x4d0>)
 80024fa:	f043 0301 	orr.w	r3, r3, #1
 80024fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002500:	e00b      	b.n	800251a <HAL_RCC_OscConfig+0x376>
 8002502:	4b5c      	ldr	r3, [pc, #368]	; (8002674 <HAL_RCC_OscConfig+0x4d0>)
 8002504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002506:	4a5b      	ldr	r2, [pc, #364]	; (8002674 <HAL_RCC_OscConfig+0x4d0>)
 8002508:	f023 0301 	bic.w	r3, r3, #1
 800250c:	6713      	str	r3, [r2, #112]	; 0x70
 800250e:	4b59      	ldr	r3, [pc, #356]	; (8002674 <HAL_RCC_OscConfig+0x4d0>)
 8002510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002512:	4a58      	ldr	r2, [pc, #352]	; (8002674 <HAL_RCC_OscConfig+0x4d0>)
 8002514:	f023 0304 	bic.w	r3, r3, #4
 8002518:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d015      	beq.n	800254e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002522:	f7fe fd3b 	bl	8000f9c <HAL_GetTick>
 8002526:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002528:	e00a      	b.n	8002540 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800252a:	f7fe fd37 	bl	8000f9c <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	f241 3288 	movw	r2, #5000	; 0x1388
 8002538:	4293      	cmp	r3, r2
 800253a:	d901      	bls.n	8002540 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e0d8      	b.n	80026f2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002540:	4b4c      	ldr	r3, [pc, #304]	; (8002674 <HAL_RCC_OscConfig+0x4d0>)
 8002542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d0ee      	beq.n	800252a <HAL_RCC_OscConfig+0x386>
 800254c:	e014      	b.n	8002578 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800254e:	f7fe fd25 	bl	8000f9c <HAL_GetTick>
 8002552:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002554:	e00a      	b.n	800256c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002556:	f7fe fd21 	bl	8000f9c <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	f241 3288 	movw	r2, #5000	; 0x1388
 8002564:	4293      	cmp	r3, r2
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e0c2      	b.n	80026f2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800256c:	4b41      	ldr	r3, [pc, #260]	; (8002674 <HAL_RCC_OscConfig+0x4d0>)
 800256e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d1ee      	bne.n	8002556 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002578:	7dfb      	ldrb	r3, [r7, #23]
 800257a:	2b01      	cmp	r3, #1
 800257c:	d105      	bne.n	800258a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800257e:	4b3d      	ldr	r3, [pc, #244]	; (8002674 <HAL_RCC_OscConfig+0x4d0>)
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	4a3c      	ldr	r2, [pc, #240]	; (8002674 <HAL_RCC_OscConfig+0x4d0>)
 8002584:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002588:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	2b00      	cmp	r3, #0
 8002590:	f000 80ae 	beq.w	80026f0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002594:	4b37      	ldr	r3, [pc, #220]	; (8002674 <HAL_RCC_OscConfig+0x4d0>)
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f003 030c 	and.w	r3, r3, #12
 800259c:	2b08      	cmp	r3, #8
 800259e:	d06d      	beq.n	800267c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d14b      	bne.n	8002640 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025a8:	4b32      	ldr	r3, [pc, #200]	; (8002674 <HAL_RCC_OscConfig+0x4d0>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a31      	ldr	r2, [pc, #196]	; (8002674 <HAL_RCC_OscConfig+0x4d0>)
 80025ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b4:	f7fe fcf2 	bl	8000f9c <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025bc:	f7fe fcee 	bl	8000f9c <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e091      	b.n	80026f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ce:	4b29      	ldr	r3, [pc, #164]	; (8002674 <HAL_RCC_OscConfig+0x4d0>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1f0      	bne.n	80025bc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	69da      	ldr	r2, [r3, #28]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a1b      	ldr	r3, [r3, #32]
 80025e2:	431a      	orrs	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e8:	019b      	lsls	r3, r3, #6
 80025ea:	431a      	orrs	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f0:	085b      	lsrs	r3, r3, #1
 80025f2:	3b01      	subs	r3, #1
 80025f4:	041b      	lsls	r3, r3, #16
 80025f6:	431a      	orrs	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fc:	061b      	lsls	r3, r3, #24
 80025fe:	431a      	orrs	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002604:	071b      	lsls	r3, r3, #28
 8002606:	491b      	ldr	r1, [pc, #108]	; (8002674 <HAL_RCC_OscConfig+0x4d0>)
 8002608:	4313      	orrs	r3, r2
 800260a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800260c:	4b19      	ldr	r3, [pc, #100]	; (8002674 <HAL_RCC_OscConfig+0x4d0>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a18      	ldr	r2, [pc, #96]	; (8002674 <HAL_RCC_OscConfig+0x4d0>)
 8002612:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002616:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002618:	f7fe fcc0 	bl	8000f9c <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002620:	f7fe fcbc 	bl	8000f9c <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e05f      	b.n	80026f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002632:	4b10      	ldr	r3, [pc, #64]	; (8002674 <HAL_RCC_OscConfig+0x4d0>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d0f0      	beq.n	8002620 <HAL_RCC_OscConfig+0x47c>
 800263e:	e057      	b.n	80026f0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002640:	4b0c      	ldr	r3, [pc, #48]	; (8002674 <HAL_RCC_OscConfig+0x4d0>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a0b      	ldr	r2, [pc, #44]	; (8002674 <HAL_RCC_OscConfig+0x4d0>)
 8002646:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800264a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264c:	f7fe fca6 	bl	8000f9c <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002654:	f7fe fca2 	bl	8000f9c <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e045      	b.n	80026f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002666:	4b03      	ldr	r3, [pc, #12]	; (8002674 <HAL_RCC_OscConfig+0x4d0>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1f0      	bne.n	8002654 <HAL_RCC_OscConfig+0x4b0>
 8002672:	e03d      	b.n	80026f0 <HAL_RCC_OscConfig+0x54c>
 8002674:	40023800 	.word	0x40023800
 8002678:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800267c:	4b1f      	ldr	r3, [pc, #124]	; (80026fc <HAL_RCC_OscConfig+0x558>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d030      	beq.n	80026ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002694:	429a      	cmp	r2, r3
 8002696:	d129      	bne.n	80026ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d122      	bne.n	80026ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026ac:	4013      	ands	r3, r2
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026b2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d119      	bne.n	80026ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c2:	085b      	lsrs	r3, r3, #1
 80026c4:	3b01      	subs	r3, #1
 80026c6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d10f      	bne.n	80026ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80026d8:	429a      	cmp	r2, r3
 80026da:	d107      	bne.n	80026ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d001      	beq.n	80026f0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e000      	b.n	80026f2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3718      	adds	r7, #24
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	40023800 	.word	0x40023800

08002700 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800270a:	2300      	movs	r3, #0
 800270c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d101      	bne.n	8002718 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e0d0      	b.n	80028ba <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002718:	4b6a      	ldr	r3, [pc, #424]	; (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 030f 	and.w	r3, r3, #15
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	429a      	cmp	r2, r3
 8002724:	d910      	bls.n	8002748 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002726:	4b67      	ldr	r3, [pc, #412]	; (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f023 020f 	bic.w	r2, r3, #15
 800272e:	4965      	ldr	r1, [pc, #404]	; (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	4313      	orrs	r3, r2
 8002734:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002736:	4b63      	ldr	r3, [pc, #396]	; (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 030f 	and.w	r3, r3, #15
 800273e:	683a      	ldr	r2, [r7, #0]
 8002740:	429a      	cmp	r2, r3
 8002742:	d001      	beq.n	8002748 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e0b8      	b.n	80028ba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0302 	and.w	r3, r3, #2
 8002750:	2b00      	cmp	r3, #0
 8002752:	d020      	beq.n	8002796 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0304 	and.w	r3, r3, #4
 800275c:	2b00      	cmp	r3, #0
 800275e:	d005      	beq.n	800276c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002760:	4b59      	ldr	r3, [pc, #356]	; (80028c8 <HAL_RCC_ClockConfig+0x1c8>)
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	4a58      	ldr	r2, [pc, #352]	; (80028c8 <HAL_RCC_ClockConfig+0x1c8>)
 8002766:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800276a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0308 	and.w	r3, r3, #8
 8002774:	2b00      	cmp	r3, #0
 8002776:	d005      	beq.n	8002784 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002778:	4b53      	ldr	r3, [pc, #332]	; (80028c8 <HAL_RCC_ClockConfig+0x1c8>)
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	4a52      	ldr	r2, [pc, #328]	; (80028c8 <HAL_RCC_ClockConfig+0x1c8>)
 800277e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002782:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002784:	4b50      	ldr	r3, [pc, #320]	; (80028c8 <HAL_RCC_ClockConfig+0x1c8>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	494d      	ldr	r1, [pc, #308]	; (80028c8 <HAL_RCC_ClockConfig+0x1c8>)
 8002792:	4313      	orrs	r3, r2
 8002794:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d040      	beq.n	8002824 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d107      	bne.n	80027ba <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027aa:	4b47      	ldr	r3, [pc, #284]	; (80028c8 <HAL_RCC_ClockConfig+0x1c8>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d115      	bne.n	80027e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e07f      	b.n	80028ba <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d107      	bne.n	80027d2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027c2:	4b41      	ldr	r3, [pc, #260]	; (80028c8 <HAL_RCC_ClockConfig+0x1c8>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d109      	bne.n	80027e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e073      	b.n	80028ba <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027d2:	4b3d      	ldr	r3, [pc, #244]	; (80028c8 <HAL_RCC_ClockConfig+0x1c8>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e06b      	b.n	80028ba <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027e2:	4b39      	ldr	r3, [pc, #228]	; (80028c8 <HAL_RCC_ClockConfig+0x1c8>)
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f023 0203 	bic.w	r2, r3, #3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	4936      	ldr	r1, [pc, #216]	; (80028c8 <HAL_RCC_ClockConfig+0x1c8>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027f4:	f7fe fbd2 	bl	8000f9c <HAL_GetTick>
 80027f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027fa:	e00a      	b.n	8002812 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027fc:	f7fe fbce 	bl	8000f9c <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	f241 3288 	movw	r2, #5000	; 0x1388
 800280a:	4293      	cmp	r3, r2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e053      	b.n	80028ba <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002812:	4b2d      	ldr	r3, [pc, #180]	; (80028c8 <HAL_RCC_ClockConfig+0x1c8>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f003 020c 	and.w	r2, r3, #12
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	429a      	cmp	r2, r3
 8002822:	d1eb      	bne.n	80027fc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002824:	4b27      	ldr	r3, [pc, #156]	; (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 030f 	and.w	r3, r3, #15
 800282c:	683a      	ldr	r2, [r7, #0]
 800282e:	429a      	cmp	r2, r3
 8002830:	d210      	bcs.n	8002854 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002832:	4b24      	ldr	r3, [pc, #144]	; (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f023 020f 	bic.w	r2, r3, #15
 800283a:	4922      	ldr	r1, [pc, #136]	; (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	4313      	orrs	r3, r2
 8002840:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002842:	4b20      	ldr	r3, [pc, #128]	; (80028c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 030f 	and.w	r3, r3, #15
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	429a      	cmp	r2, r3
 800284e:	d001      	beq.n	8002854 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e032      	b.n	80028ba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0304 	and.w	r3, r3, #4
 800285c:	2b00      	cmp	r3, #0
 800285e:	d008      	beq.n	8002872 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002860:	4b19      	ldr	r3, [pc, #100]	; (80028c8 <HAL_RCC_ClockConfig+0x1c8>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	4916      	ldr	r1, [pc, #88]	; (80028c8 <HAL_RCC_ClockConfig+0x1c8>)
 800286e:	4313      	orrs	r3, r2
 8002870:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0308 	and.w	r3, r3, #8
 800287a:	2b00      	cmp	r3, #0
 800287c:	d009      	beq.n	8002892 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800287e:	4b12      	ldr	r3, [pc, #72]	; (80028c8 <HAL_RCC_ClockConfig+0x1c8>)
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	490e      	ldr	r1, [pc, #56]	; (80028c8 <HAL_RCC_ClockConfig+0x1c8>)
 800288e:	4313      	orrs	r3, r2
 8002890:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002892:	f000 f821 	bl	80028d8 <HAL_RCC_GetSysClockFreq>
 8002896:	4602      	mov	r2, r0
 8002898:	4b0b      	ldr	r3, [pc, #44]	; (80028c8 <HAL_RCC_ClockConfig+0x1c8>)
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	091b      	lsrs	r3, r3, #4
 800289e:	f003 030f 	and.w	r3, r3, #15
 80028a2:	490a      	ldr	r1, [pc, #40]	; (80028cc <HAL_RCC_ClockConfig+0x1cc>)
 80028a4:	5ccb      	ldrb	r3, [r1, r3]
 80028a6:	fa22 f303 	lsr.w	r3, r2, r3
 80028aa:	4a09      	ldr	r2, [pc, #36]	; (80028d0 <HAL_RCC_ClockConfig+0x1d0>)
 80028ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028ae:	4b09      	ldr	r3, [pc, #36]	; (80028d4 <HAL_RCC_ClockConfig+0x1d4>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7fe fb2e 	bl	8000f14 <HAL_InitTick>

  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	40023c00 	.word	0x40023c00
 80028c8:	40023800 	.word	0x40023800
 80028cc:	08005608 	.word	0x08005608
 80028d0:	20000000 	.word	0x20000000
 80028d4:	20000004 	.word	0x20000004

080028d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80028dc:	b084      	sub	sp, #16
 80028de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80028e0:	2300      	movs	r3, #0
 80028e2:	607b      	str	r3, [r7, #4]
 80028e4:	2300      	movs	r3, #0
 80028e6:	60fb      	str	r3, [r7, #12]
 80028e8:	2300      	movs	r3, #0
 80028ea:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80028ec:	2300      	movs	r3, #0
 80028ee:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028f0:	4b67      	ldr	r3, [pc, #412]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f003 030c 	and.w	r3, r3, #12
 80028f8:	2b08      	cmp	r3, #8
 80028fa:	d00d      	beq.n	8002918 <HAL_RCC_GetSysClockFreq+0x40>
 80028fc:	2b08      	cmp	r3, #8
 80028fe:	f200 80bd 	bhi.w	8002a7c <HAL_RCC_GetSysClockFreq+0x1a4>
 8002902:	2b00      	cmp	r3, #0
 8002904:	d002      	beq.n	800290c <HAL_RCC_GetSysClockFreq+0x34>
 8002906:	2b04      	cmp	r3, #4
 8002908:	d003      	beq.n	8002912 <HAL_RCC_GetSysClockFreq+0x3a>
 800290a:	e0b7      	b.n	8002a7c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800290c:	4b61      	ldr	r3, [pc, #388]	; (8002a94 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800290e:	60bb      	str	r3, [r7, #8]
      break;
 8002910:	e0b7      	b.n	8002a82 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002912:	4b61      	ldr	r3, [pc, #388]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002914:	60bb      	str	r3, [r7, #8]
      break;
 8002916:	e0b4      	b.n	8002a82 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002918:	4b5d      	ldr	r3, [pc, #372]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002920:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002922:	4b5b      	ldr	r3, [pc, #364]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d04d      	beq.n	80029ca <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800292e:	4b58      	ldr	r3, [pc, #352]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	099b      	lsrs	r3, r3, #6
 8002934:	461a      	mov	r2, r3
 8002936:	f04f 0300 	mov.w	r3, #0
 800293a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800293e:	f04f 0100 	mov.w	r1, #0
 8002942:	ea02 0800 	and.w	r8, r2, r0
 8002946:	ea03 0901 	and.w	r9, r3, r1
 800294a:	4640      	mov	r0, r8
 800294c:	4649      	mov	r1, r9
 800294e:	f04f 0200 	mov.w	r2, #0
 8002952:	f04f 0300 	mov.w	r3, #0
 8002956:	014b      	lsls	r3, r1, #5
 8002958:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800295c:	0142      	lsls	r2, r0, #5
 800295e:	4610      	mov	r0, r2
 8002960:	4619      	mov	r1, r3
 8002962:	ebb0 0008 	subs.w	r0, r0, r8
 8002966:	eb61 0109 	sbc.w	r1, r1, r9
 800296a:	f04f 0200 	mov.w	r2, #0
 800296e:	f04f 0300 	mov.w	r3, #0
 8002972:	018b      	lsls	r3, r1, #6
 8002974:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002978:	0182      	lsls	r2, r0, #6
 800297a:	1a12      	subs	r2, r2, r0
 800297c:	eb63 0301 	sbc.w	r3, r3, r1
 8002980:	f04f 0000 	mov.w	r0, #0
 8002984:	f04f 0100 	mov.w	r1, #0
 8002988:	00d9      	lsls	r1, r3, #3
 800298a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800298e:	00d0      	lsls	r0, r2, #3
 8002990:	4602      	mov	r2, r0
 8002992:	460b      	mov	r3, r1
 8002994:	eb12 0208 	adds.w	r2, r2, r8
 8002998:	eb43 0309 	adc.w	r3, r3, r9
 800299c:	f04f 0000 	mov.w	r0, #0
 80029a0:	f04f 0100 	mov.w	r1, #0
 80029a4:	0259      	lsls	r1, r3, #9
 80029a6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80029aa:	0250      	lsls	r0, r2, #9
 80029ac:	4602      	mov	r2, r0
 80029ae:	460b      	mov	r3, r1
 80029b0:	4610      	mov	r0, r2
 80029b2:	4619      	mov	r1, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	461a      	mov	r2, r3
 80029b8:	f04f 0300 	mov.w	r3, #0
 80029bc:	f7fd fc90 	bl	80002e0 <__aeabi_uldivmod>
 80029c0:	4602      	mov	r2, r0
 80029c2:	460b      	mov	r3, r1
 80029c4:	4613      	mov	r3, r2
 80029c6:	60fb      	str	r3, [r7, #12]
 80029c8:	e04a      	b.n	8002a60 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029ca:	4b31      	ldr	r3, [pc, #196]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	099b      	lsrs	r3, r3, #6
 80029d0:	461a      	mov	r2, r3
 80029d2:	f04f 0300 	mov.w	r3, #0
 80029d6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80029da:	f04f 0100 	mov.w	r1, #0
 80029de:	ea02 0400 	and.w	r4, r2, r0
 80029e2:	ea03 0501 	and.w	r5, r3, r1
 80029e6:	4620      	mov	r0, r4
 80029e8:	4629      	mov	r1, r5
 80029ea:	f04f 0200 	mov.w	r2, #0
 80029ee:	f04f 0300 	mov.w	r3, #0
 80029f2:	014b      	lsls	r3, r1, #5
 80029f4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80029f8:	0142      	lsls	r2, r0, #5
 80029fa:	4610      	mov	r0, r2
 80029fc:	4619      	mov	r1, r3
 80029fe:	1b00      	subs	r0, r0, r4
 8002a00:	eb61 0105 	sbc.w	r1, r1, r5
 8002a04:	f04f 0200 	mov.w	r2, #0
 8002a08:	f04f 0300 	mov.w	r3, #0
 8002a0c:	018b      	lsls	r3, r1, #6
 8002a0e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002a12:	0182      	lsls	r2, r0, #6
 8002a14:	1a12      	subs	r2, r2, r0
 8002a16:	eb63 0301 	sbc.w	r3, r3, r1
 8002a1a:	f04f 0000 	mov.w	r0, #0
 8002a1e:	f04f 0100 	mov.w	r1, #0
 8002a22:	00d9      	lsls	r1, r3, #3
 8002a24:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a28:	00d0      	lsls	r0, r2, #3
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	1912      	adds	r2, r2, r4
 8002a30:	eb45 0303 	adc.w	r3, r5, r3
 8002a34:	f04f 0000 	mov.w	r0, #0
 8002a38:	f04f 0100 	mov.w	r1, #0
 8002a3c:	0299      	lsls	r1, r3, #10
 8002a3e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002a42:	0290      	lsls	r0, r2, #10
 8002a44:	4602      	mov	r2, r0
 8002a46:	460b      	mov	r3, r1
 8002a48:	4610      	mov	r0, r2
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	461a      	mov	r2, r3
 8002a50:	f04f 0300 	mov.w	r3, #0
 8002a54:	f7fd fc44 	bl	80002e0 <__aeabi_uldivmod>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002a60:	4b0b      	ldr	r3, [pc, #44]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	0c1b      	lsrs	r3, r3, #16
 8002a66:	f003 0303 	and.w	r3, r3, #3
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a78:	60bb      	str	r3, [r7, #8]
      break;
 8002a7a:	e002      	b.n	8002a82 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a7c:	4b05      	ldr	r3, [pc, #20]	; (8002a94 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002a7e:	60bb      	str	r3, [r7, #8]
      break;
 8002a80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a82:	68bb      	ldr	r3, [r7, #8]
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3710      	adds	r7, #16
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002a8e:	bf00      	nop
 8002a90:	40023800 	.word	0x40023800
 8002a94:	00f42400 	.word	0x00f42400
 8002a98:	007a1200 	.word	0x007a1200

08002a9c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002aa0:	4b03      	ldr	r3, [pc, #12]	; (8002ab0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	20000000 	.word	0x20000000

08002ab4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ab8:	f7ff fff0 	bl	8002a9c <HAL_RCC_GetHCLKFreq>
 8002abc:	4602      	mov	r2, r0
 8002abe:	4b05      	ldr	r3, [pc, #20]	; (8002ad4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	0a9b      	lsrs	r3, r3, #10
 8002ac4:	f003 0307 	and.w	r3, r3, #7
 8002ac8:	4903      	ldr	r1, [pc, #12]	; (8002ad8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002aca:	5ccb      	ldrb	r3, [r1, r3]
 8002acc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	40023800 	.word	0x40023800
 8002ad8:	08005618 	.word	0x08005618

08002adc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ae0:	f7ff ffdc 	bl	8002a9c <HAL_RCC_GetHCLKFreq>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	4b05      	ldr	r3, [pc, #20]	; (8002afc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	0b5b      	lsrs	r3, r3, #13
 8002aec:	f003 0307 	and.w	r3, r3, #7
 8002af0:	4903      	ldr	r1, [pc, #12]	; (8002b00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002af2:	5ccb      	ldrb	r3, [r1, r3]
 8002af4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	40023800 	.word	0x40023800
 8002b00:	08005618 	.word	0x08005618

08002b04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b088      	sub	sp, #32
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002b10:	2300      	movs	r3, #0
 8002b12:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002b14:	2300      	movs	r3, #0
 8002b16:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0301 	and.w	r3, r3, #1
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d012      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b2c:	4b69      	ldr	r3, [pc, #420]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	4a68      	ldr	r2, [pc, #416]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b32:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002b36:	6093      	str	r3, [r2, #8]
 8002b38:	4b66      	ldr	r3, [pc, #408]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b3a:	689a      	ldr	r2, [r3, #8]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b40:	4964      	ldr	r1, [pc, #400]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d017      	beq.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b5e:	4b5d      	ldr	r3, [pc, #372]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b6c:	4959      	ldr	r1, [pc, #356]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b7c:	d101      	bne.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d101      	bne.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d017      	beq.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b9a:	4b4e      	ldr	r3, [pc, #312]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ba0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba8:	494a      	ldr	r1, [pc, #296]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bb8:	d101      	bne.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0320 	and.w	r3, r3, #32
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f000 808b 	beq.w	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002be8:	4b3a      	ldr	r3, [pc, #232]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bec:	4a39      	ldr	r2, [pc, #228]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bf2:	6413      	str	r3, [r2, #64]	; 0x40
 8002bf4:	4b37      	ldr	r3, [pc, #220]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bfc:	60bb      	str	r3, [r7, #8]
 8002bfe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002c00:	4b35      	ldr	r3, [pc, #212]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a34      	ldr	r2, [pc, #208]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c0c:	f7fe f9c6 	bl	8000f9c <HAL_GetTick>
 8002c10:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c12:	e008      	b.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c14:	f7fe f9c2 	bl	8000f9c <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b64      	cmp	r3, #100	; 0x64
 8002c20:	d901      	bls.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e38f      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c26:	4b2c      	ldr	r3, [pc, #176]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d0f0      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c32:	4b28      	ldr	r3, [pc, #160]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c3a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d035      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d02e      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c50:	4b20      	ldr	r3, [pc, #128]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c58:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c5a:	4b1e      	ldr	r3, [pc, #120]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c5e:	4a1d      	ldr	r2, [pc, #116]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c64:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c66:	4b1b      	ldr	r3, [pc, #108]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6a:	4a1a      	ldr	r2, [pc, #104]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c70:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002c72:	4a18      	ldr	r2, [pc, #96]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c78:	4b16      	ldr	r3, [pc, #88]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c7c:	f003 0301 	and.w	r3, r3, #1
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d114      	bne.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c84:	f7fe f98a 	bl	8000f9c <HAL_GetTick>
 8002c88:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c8a:	e00a      	b.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c8c:	f7fe f986 	bl	8000f9c <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e351      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca2:	4b0c      	ldr	r3, [pc, #48]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d0ee      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002cba:	d111      	bne.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002cbc:	4b05      	ldr	r3, [pc, #20]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002cc8:	4b04      	ldr	r3, [pc, #16]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002cca:	400b      	ands	r3, r1
 8002ccc:	4901      	ldr	r1, [pc, #4]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	608b      	str	r3, [r1, #8]
 8002cd2:	e00b      	b.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002cd4:	40023800 	.word	0x40023800
 8002cd8:	40007000 	.word	0x40007000
 8002cdc:	0ffffcff 	.word	0x0ffffcff
 8002ce0:	4bb3      	ldr	r3, [pc, #716]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	4ab2      	ldr	r2, [pc, #712]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ce6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002cea:	6093      	str	r3, [r2, #8]
 8002cec:	4bb0      	ldr	r3, [pc, #704]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cf8:	49ad      	ldr	r1, [pc, #692]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0310 	and.w	r3, r3, #16
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d010      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002d0a:	4ba9      	ldr	r3, [pc, #676]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d10:	4aa7      	ldr	r2, [pc, #668]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d16:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002d1a:	4ba5      	ldr	r3, [pc, #660]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d1c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d24:	49a2      	ldr	r1, [pc, #648]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d00a      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d38:	4b9d      	ldr	r3, [pc, #628]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d3e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d46:	499a      	ldr	r1, [pc, #616]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00a      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d5a:	4b95      	ldr	r3, [pc, #596]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d60:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d68:	4991      	ldr	r1, [pc, #580]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00a      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d7c:	4b8c      	ldr	r3, [pc, #560]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d8a:	4989      	ldr	r1, [pc, #548]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00a      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d9e:	4b84      	ldr	r3, [pc, #528]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002da4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dac:	4980      	ldr	r1, [pc, #512]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00a      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002dc0:	4b7b      	ldr	r3, [pc, #492]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc6:	f023 0203 	bic.w	r2, r3, #3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dce:	4978      	ldr	r1, [pc, #480]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00a      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002de2:	4b73      	ldr	r3, [pc, #460]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de8:	f023 020c 	bic.w	r2, r3, #12
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002df0:	496f      	ldr	r1, [pc, #444]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d00a      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e04:	4b6a      	ldr	r3, [pc, #424]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e0a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e12:	4967      	ldr	r1, [pc, #412]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00a      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e26:	4b62      	ldr	r3, [pc, #392]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e2c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e34:	495e      	ldr	r1, [pc, #376]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00a      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e48:	4b59      	ldr	r3, [pc, #356]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e4e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e56:	4956      	ldr	r1, [pc, #344]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00a      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002e6a:	4b51      	ldr	r3, [pc, #324]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e70:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e78:	494d      	ldr	r1, [pc, #308]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00a      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002e8c:	4b48      	ldr	r3, [pc, #288]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e92:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e9a:	4945      	ldr	r1, [pc, #276]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00a      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002eae:	4b40      	ldr	r3, [pc, #256]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ebc:	493c      	ldr	r1, [pc, #240]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d00a      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002ed0:	4b37      	ldr	r3, [pc, #220]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ede:	4934      	ldr	r1, [pc, #208]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d011      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002ef2:	4b2f      	ldr	r3, [pc, #188]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f00:	492b      	ldr	r1, [pc, #172]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f10:	d101      	bne.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002f12:	2301      	movs	r3, #1
 8002f14:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0308 	and.w	r3, r3, #8
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002f22:	2301      	movs	r3, #1
 8002f24:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00a      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f32:	4b1f      	ldr	r3, [pc, #124]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f38:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f40:	491b      	ldr	r1, [pc, #108]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00b      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f54:	4b16      	ldr	r3, [pc, #88]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f5a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f64:	4912      	ldr	r1, [pc, #72]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00b      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002f78:	4b0d      	ldr	r3, [pc, #52]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f7e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f88:	4909      	ldr	r1, [pc, #36]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d00f      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f9c:	4b04      	ldr	r3, [pc, #16]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fa2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fac:	e002      	b.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002fae:	bf00      	nop
 8002fb0:	40023800 	.word	0x40023800
 8002fb4:	4986      	ldr	r1, [pc, #536]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d00b      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002fc8:	4b81      	ldr	r3, [pc, #516]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fce:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fd8:	497d      	ldr	r1, [pc, #500]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d006      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f000 80d6 	beq.w	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002ff4:	4b76      	ldr	r3, [pc, #472]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a75      	ldr	r2, [pc, #468]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ffa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ffe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003000:	f7fd ffcc 	bl	8000f9c <HAL_GetTick>
 8003004:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003006:	e008      	b.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003008:	f7fd ffc8 	bl	8000f9c <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b64      	cmp	r3, #100	; 0x64
 8003014:	d901      	bls.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e195      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800301a:	4b6d      	ldr	r3, [pc, #436]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1f0      	bne.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	2b00      	cmp	r3, #0
 8003030:	d021      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003036:	2b00      	cmp	r3, #0
 8003038:	d11d      	bne.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800303a:	4b65      	ldr	r3, [pc, #404]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800303c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003040:	0c1b      	lsrs	r3, r3, #16
 8003042:	f003 0303 	and.w	r3, r3, #3
 8003046:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003048:	4b61      	ldr	r3, [pc, #388]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800304a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800304e:	0e1b      	lsrs	r3, r3, #24
 8003050:	f003 030f 	and.w	r3, r3, #15
 8003054:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	019a      	lsls	r2, r3, #6
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	041b      	lsls	r3, r3, #16
 8003060:	431a      	orrs	r2, r3
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	061b      	lsls	r3, r3, #24
 8003066:	431a      	orrs	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	071b      	lsls	r3, r3, #28
 800306e:	4958      	ldr	r1, [pc, #352]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003070:	4313      	orrs	r3, r2
 8003072:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d004      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003086:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800308a:	d00a      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003094:	2b00      	cmp	r3, #0
 8003096:	d02e      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030a0:	d129      	bne.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80030a2:	4b4b      	ldr	r3, [pc, #300]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030a8:	0c1b      	lsrs	r3, r3, #16
 80030aa:	f003 0303 	and.w	r3, r3, #3
 80030ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80030b0:	4b47      	ldr	r3, [pc, #284]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030b6:	0f1b      	lsrs	r3, r3, #28
 80030b8:	f003 0307 	and.w	r3, r3, #7
 80030bc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	019a      	lsls	r2, r3, #6
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	041b      	lsls	r3, r3, #16
 80030c8:	431a      	orrs	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	061b      	lsls	r3, r3, #24
 80030d0:	431a      	orrs	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	071b      	lsls	r3, r3, #28
 80030d6:	493e      	ldr	r1, [pc, #248]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80030de:	4b3c      	ldr	r3, [pc, #240]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030e4:	f023 021f 	bic.w	r2, r3, #31
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ec:	3b01      	subs	r3, #1
 80030ee:	4938      	ldr	r1, [pc, #224]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d01d      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003102:	4b33      	ldr	r3, [pc, #204]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003104:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003108:	0e1b      	lsrs	r3, r3, #24
 800310a:	f003 030f 	and.w	r3, r3, #15
 800310e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003110:	4b2f      	ldr	r3, [pc, #188]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003112:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003116:	0f1b      	lsrs	r3, r3, #28
 8003118:	f003 0307 	and.w	r3, r3, #7
 800311c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	019a      	lsls	r2, r3, #6
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	041b      	lsls	r3, r3, #16
 800312a:	431a      	orrs	r2, r3
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	061b      	lsls	r3, r3, #24
 8003130:	431a      	orrs	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	071b      	lsls	r3, r3, #28
 8003136:	4926      	ldr	r1, [pc, #152]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003138:	4313      	orrs	r3, r2
 800313a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d011      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	019a      	lsls	r2, r3, #6
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	041b      	lsls	r3, r3, #16
 8003156:	431a      	orrs	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	061b      	lsls	r3, r3, #24
 800315e:	431a      	orrs	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	071b      	lsls	r3, r3, #28
 8003166:	491a      	ldr	r1, [pc, #104]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003168:	4313      	orrs	r3, r2
 800316a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800316e:	4b18      	ldr	r3, [pc, #96]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a17      	ldr	r2, [pc, #92]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003174:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003178:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800317a:	f7fd ff0f 	bl	8000f9c <HAL_GetTick>
 800317e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003180:	e008      	b.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003182:	f7fd ff0b 	bl	8000f9c <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	2b64      	cmp	r3, #100	; 0x64
 800318e:	d901      	bls.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e0d8      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003194:	4b0e      	ldr	r3, [pc, #56]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d0f0      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	f040 80ce 	bne.w	8003344 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80031a8:	4b09      	ldr	r3, [pc, #36]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a08      	ldr	r2, [pc, #32]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031b4:	f7fd fef2 	bl	8000f9c <HAL_GetTick>
 80031b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80031ba:	e00b      	b.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80031bc:	f7fd feee 	bl	8000f9c <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b64      	cmp	r3, #100	; 0x64
 80031c8:	d904      	bls.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e0bb      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80031ce:	bf00      	nop
 80031d0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80031d4:	4b5e      	ldr	r3, [pc, #376]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031e0:	d0ec      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d003      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d009      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d02e      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003206:	2b00      	cmp	r3, #0
 8003208:	d12a      	bne.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800320a:	4b51      	ldr	r3, [pc, #324]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800320c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003210:	0c1b      	lsrs	r3, r3, #16
 8003212:	f003 0303 	and.w	r3, r3, #3
 8003216:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003218:	4b4d      	ldr	r3, [pc, #308]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800321a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800321e:	0f1b      	lsrs	r3, r3, #28
 8003220:	f003 0307 	and.w	r3, r3, #7
 8003224:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	019a      	lsls	r2, r3, #6
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	041b      	lsls	r3, r3, #16
 8003230:	431a      	orrs	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	061b      	lsls	r3, r3, #24
 8003238:	431a      	orrs	r2, r3
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	071b      	lsls	r3, r3, #28
 800323e:	4944      	ldr	r1, [pc, #272]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003240:	4313      	orrs	r3, r2
 8003242:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003246:	4b42      	ldr	r3, [pc, #264]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003248:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800324c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003254:	3b01      	subs	r3, #1
 8003256:	021b      	lsls	r3, r3, #8
 8003258:	493d      	ldr	r1, [pc, #244]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800325a:	4313      	orrs	r3, r2
 800325c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d022      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003270:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003274:	d11d      	bne.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003276:	4b36      	ldr	r3, [pc, #216]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800327c:	0e1b      	lsrs	r3, r3, #24
 800327e:	f003 030f 	and.w	r3, r3, #15
 8003282:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003284:	4b32      	ldr	r3, [pc, #200]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800328a:	0f1b      	lsrs	r3, r3, #28
 800328c:	f003 0307 	and.w	r3, r3, #7
 8003290:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	019a      	lsls	r2, r3, #6
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a1b      	ldr	r3, [r3, #32]
 800329c:	041b      	lsls	r3, r3, #16
 800329e:	431a      	orrs	r2, r3
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	061b      	lsls	r3, r3, #24
 80032a4:	431a      	orrs	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	071b      	lsls	r3, r3, #28
 80032aa:	4929      	ldr	r1, [pc, #164]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0308 	and.w	r3, r3, #8
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d028      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80032be:	4b24      	ldr	r3, [pc, #144]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032c4:	0e1b      	lsrs	r3, r3, #24
 80032c6:	f003 030f 	and.w	r3, r3, #15
 80032ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80032cc:	4b20      	ldr	r3, [pc, #128]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d2:	0c1b      	lsrs	r3, r3, #16
 80032d4:	f003 0303 	and.w	r3, r3, #3
 80032d8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	019a      	lsls	r2, r3, #6
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	041b      	lsls	r3, r3, #16
 80032e4:	431a      	orrs	r2, r3
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	061b      	lsls	r3, r3, #24
 80032ea:	431a      	orrs	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	69db      	ldr	r3, [r3, #28]
 80032f0:	071b      	lsls	r3, r3, #28
 80032f2:	4917      	ldr	r1, [pc, #92]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80032fa:	4b15      	ldr	r3, [pc, #84]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003300:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003308:	4911      	ldr	r1, [pc, #68]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800330a:	4313      	orrs	r3, r2
 800330c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003310:	4b0f      	ldr	r3, [pc, #60]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a0e      	ldr	r2, [pc, #56]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003316:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800331a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800331c:	f7fd fe3e 	bl	8000f9c <HAL_GetTick>
 8003320:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003322:	e008      	b.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003324:	f7fd fe3a 	bl	8000f9c <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b64      	cmp	r3, #100	; 0x64
 8003330:	d901      	bls.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e007      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003336:	4b06      	ldr	r3, [pc, #24]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800333e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003342:	d1ef      	bne.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3720      	adds	r7, #32
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	40023800 	.word	0x40023800

08003354 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d101      	bne.n	8003366 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e040      	b.n	80033e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800336a:	2b00      	cmp	r3, #0
 800336c:	d106      	bne.n	800337c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f7fd fcf8 	bl	8000d6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2224      	movs	r2, #36	; 0x24
 8003380:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f022 0201 	bic.w	r2, r2, #1
 8003390:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 fb2a 	bl	80039ec <UART_SetConfig>
 8003398:	4603      	mov	r3, r0
 800339a:	2b01      	cmp	r3, #1
 800339c:	d101      	bne.n	80033a2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e022      	b.n	80033e8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d002      	beq.n	80033b0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 fd80 	bl	8003eb0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	685a      	ldr	r2, [r3, #4]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	689a      	ldr	r2, [r3, #8]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f042 0201 	orr.w	r2, r2, #1
 80033de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 fe07 	bl	8003ff4 <UART_CheckIdleState>
 80033e6:	4603      	mov	r3, r0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3708      	adds	r7, #8
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e02b      	b.n	800345a <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2224      	movs	r2, #36	; 0x24
 8003406:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f022 0201 	bic.w	r2, r2, #1
 8003416:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2200      	movs	r2, #0
 800341e:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2200      	movs	r2, #0
 8003426:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2200      	movs	r2, #0
 800342e:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f7fd fd1b 	bl	8000e6c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
	...

08003464 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	4613      	mov	r3, r2
 8003470:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003476:	2b20      	cmp	r3, #32
 8003478:	d145      	bne.n	8003506 <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d002      	beq.n	8003486 <HAL_UART_Transmit_IT+0x22>
 8003480:	88fb      	ldrh	r3, [r7, #6]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e03e      	b.n	8003508 <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003490:	2b01      	cmp	r3, #1
 8003492:	d101      	bne.n	8003498 <HAL_UART_Transmit_IT+0x34>
 8003494:	2302      	movs	r3, #2
 8003496:	e037      	b.n	8003508 <HAL_UART_Transmit_IT+0xa4>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	68ba      	ldr	r2, [r7, #8]
 80034a4:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	88fa      	ldrh	r2, [r7, #6]
 80034aa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	88fa      	ldrh	r2, [r7, #6]
 80034b2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2200      	movs	r2, #0
 80034ba:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2221      	movs	r2, #33	; 0x21
 80034c8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034d2:	d107      	bne.n	80034e4 <HAL_UART_Transmit_IT+0x80>
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d103      	bne.n	80034e4 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	4a0d      	ldr	r2, [pc, #52]	; (8003514 <HAL_UART_Transmit_IT+0xb0>)
 80034e0:	669a      	str	r2, [r3, #104]	; 0x68
 80034e2:	e002      	b.n	80034ea <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	4a0c      	ldr	r2, [pc, #48]	; (8003518 <HAL_UART_Transmit_IT+0xb4>)
 80034e8:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003500:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8003502:	2300      	movs	r3, #0
 8003504:	e000      	b.n	8003508 <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 8003506:	2302      	movs	r3, #2
  }
}
 8003508:	4618      	mov	r0, r3
 800350a:	3714      	adds	r7, #20
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr
 8003514:	080044c7 	.word	0x080044c7
 8003518:	08004455 	.word	0x08004455

0800351c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	4613      	mov	r3, r2
 8003528:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800352e:	2b20      	cmp	r3, #32
 8003530:	d12c      	bne.n	800358c <HAL_UART_Receive_DMA+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d002      	beq.n	800353e <HAL_UART_Receive_DMA+0x22>
 8003538:	88fb      	ldrh	r3, [r7, #6]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e025      	b.n	800358e <HAL_UART_Receive_DMA+0x72>
    }

    __HAL_LOCK(huart);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003548:	2b01      	cmp	r3, #1
 800354a:	d101      	bne.n	8003550 <HAL_UART_Receive_DMA+0x34>
 800354c:	2302      	movs	r3, #2
 800354e:	e01e      	b.n	800358e <HAL_UART_Receive_DMA+0x72>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d007      	beq.n	800357c <HAL_UART_Receive_DMA+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800357a:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800357c:	88fb      	ldrh	r3, [r7, #6]
 800357e:	461a      	mov	r2, r3
 8003580:	68b9      	ldr	r1, [r7, #8]
 8003582:	68f8      	ldr	r0, [r7, #12]
 8003584:	f000 fdfc 	bl	8004180 <UART_Start_Receive_DMA>
 8003588:	4603      	mov	r3, r0
 800358a:	e000      	b.n	800358e <HAL_UART_Receive_DMA+0x72>
  }
  else
  {
    return HAL_BUSY;
 800358c:	2302      	movs	r3, #2
  }
}
 800358e:	4618      	mov	r0, r3
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
	...

08003598 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b088      	sub	sp, #32
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	69db      	ldr	r3, [r3, #28]
 80035a6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80035b8:	69fa      	ldr	r2, [r7, #28]
 80035ba:	f640 030f 	movw	r3, #2063	; 0x80f
 80035be:	4013      	ands	r3, r2
 80035c0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d113      	bne.n	80035f0 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	f003 0320 	and.w	r3, r3, #32
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00e      	beq.n	80035f0 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	f003 0320 	and.w	r3, r3, #32
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d009      	beq.n	80035f0 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f000 81cc 	beq.w	800397e <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	4798      	blx	r3
      }
      return;
 80035ee:	e1c6      	b.n	800397e <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	f000 80e3 	beq.w	80037be <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d105      	bne.n	800360e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003602:	69ba      	ldr	r2, [r7, #24]
 8003604:	4ba5      	ldr	r3, [pc, #660]	; (800389c <HAL_UART_IRQHandler+0x304>)
 8003606:	4013      	ands	r3, r2
 8003608:	2b00      	cmp	r3, #0
 800360a:	f000 80d8 	beq.w	80037be <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	f003 0301 	and.w	r3, r3, #1
 8003614:	2b00      	cmp	r3, #0
 8003616:	d010      	beq.n	800363a <HAL_UART_IRQHandler+0xa2>
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00b      	beq.n	800363a <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2201      	movs	r2, #1
 8003628:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003630:	f043 0201 	orr.w	r2, r3, #1
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	f003 0302 	and.w	r3, r3, #2
 8003640:	2b00      	cmp	r3, #0
 8003642:	d010      	beq.n	8003666 <HAL_UART_IRQHandler+0xce>
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00b      	beq.n	8003666 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2202      	movs	r2, #2
 8003654:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800365c:	f043 0204 	orr.w	r2, r3, #4
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	f003 0304 	and.w	r3, r3, #4
 800366c:	2b00      	cmp	r3, #0
 800366e:	d010      	beq.n	8003692 <HAL_UART_IRQHandler+0xfa>
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00b      	beq.n	8003692 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2204      	movs	r2, #4
 8003680:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003688:	f043 0202 	orr.w	r2, r3, #2
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	f003 0308 	and.w	r3, r3, #8
 8003698:	2b00      	cmp	r3, #0
 800369a:	d015      	beq.n	80036c8 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	f003 0320 	and.w	r3, r3, #32
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d104      	bne.n	80036b0 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00b      	beq.n	80036c8 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2208      	movs	r2, #8
 80036b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036be:	f043 0208 	orr.w	r2, r3, #8
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d011      	beq.n	80036f6 <HAL_UART_IRQHandler+0x15e>
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00c      	beq.n	80036f6 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036ec:	f043 0220 	orr.w	r2, r3, #32
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	f000 8140 	beq.w	8003982 <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	f003 0320 	and.w	r3, r3, #32
 8003708:	2b00      	cmp	r3, #0
 800370a:	d00c      	beq.n	8003726 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	f003 0320 	and.w	r3, r3, #32
 8003712:	2b00      	cmp	r3, #0
 8003714:	d007      	beq.n	8003726 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800371a:	2b00      	cmp	r3, #0
 800371c:	d003      	beq.n	8003726 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800372c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003738:	2b40      	cmp	r3, #64	; 0x40
 800373a:	d004      	beq.n	8003746 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003742:	2b00      	cmp	r3, #0
 8003744:	d031      	beq.n	80037aa <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 fd9b 	bl	8004282 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003756:	2b40      	cmp	r3, #64	; 0x40
 8003758:	d123      	bne.n	80037a2 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	689a      	ldr	r2, [r3, #8]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003768:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800376e:	2b00      	cmp	r3, #0
 8003770:	d013      	beq.n	800379a <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003776:	4a4a      	ldr	r2, [pc, #296]	; (80038a0 <HAL_UART_IRQHandler+0x308>)
 8003778:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800377e:	4618      	mov	r0, r3
 8003780:	f7fd ff38 	bl	80015f4 <HAL_DMA_Abort_IT>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d017      	beq.n	80037ba <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800378e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003794:	4610      	mov	r0, r2
 8003796:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003798:	e00f      	b.n	80037ba <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f7fd fb8c 	bl	8000eb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037a0:	e00b      	b.n	80037ba <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f7fd fb88 	bl	8000eb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037a8:	e007      	b.n	80037ba <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f7fd fb84 	bl	8000eb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80037b8:	e0e3      	b.n	8003982 <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037ba:	bf00      	nop
    return;
 80037bc:	e0e1      	b.n	8003982 <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	f040 80a7 	bne.w	8003916 <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	f003 0310 	and.w	r3, r3, #16
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f000 80a1 	beq.w	8003916 <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	f003 0310 	and.w	r3, r3, #16
 80037da:	2b00      	cmp	r3, #0
 80037dc:	f000 809b 	beq.w	8003916 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2210      	movs	r2, #16
 80037e6:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f2:	2b40      	cmp	r3, #64	; 0x40
 80037f4:	d156      	bne.n	80038a4 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8003800:	893b      	ldrh	r3, [r7, #8]
 8003802:	2b00      	cmp	r3, #0
 8003804:	f000 80bf 	beq.w	8003986 <HAL_UART_IRQHandler+0x3ee>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800380e:	893a      	ldrh	r2, [r7, #8]
 8003810:	429a      	cmp	r2, r3
 8003812:	f080 80b8 	bcs.w	8003986 <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	893a      	ldrh	r2, [r7, #8]
 800381a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003822:	69db      	ldr	r3, [r3, #28]
 8003824:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003828:	d02a      	beq.n	8003880 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003838:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	689a      	ldr	r2, [r3, #8]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f022 0201 	bic.w	r2, r2, #1
 8003848:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	689a      	ldr	r2, [r3, #8]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003858:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2220      	movs	r2, #32
 800385e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f022 0210 	bic.w	r2, r2, #16
 8003874:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387a:	4618      	mov	r0, r3
 800387c:	f7fd fe4a 	bl	8001514 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800388c:	b29b      	uxth	r3, r3
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	b29b      	uxth	r3, r3
 8003892:	4619      	mov	r1, r3
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 f893 	bl	80039c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800389a:	e074      	b.n	8003986 <HAL_UART_IRQHandler+0x3ee>
 800389c:	04000120 	.word	0x04000120
 80038a0:	08004429 	.word	0x08004429
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80038bc:	b29b      	uxth	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d063      	beq.n	800398a <HAL_UART_IRQHandler+0x3f2>
          && (nb_rx_data > 0U))
 80038c2:	897b      	ldrh	r3, [r7, #10]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d060      	beq.n	800398a <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80038d6:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	689a      	ldr	r2, [r3, #8]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f022 0201 	bic.w	r2, r2, #1
 80038e6:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2220      	movs	r2, #32
 80038ec:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f022 0210 	bic.w	r2, r2, #16
 8003908:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800390a:	897b      	ldrh	r3, [r7, #10]
 800390c:	4619      	mov	r1, r3
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 f856 	bl	80039c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003914:	e039      	b.n	800398a <HAL_UART_IRQHandler+0x3f2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00d      	beq.n	800393c <HAL_UART_IRQHandler+0x3a4>
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d008      	beq.n	800393c <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003932:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f000 f84f 	bl	80039d8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800393a:	e029      	b.n	8003990 <HAL_UART_IRQHandler+0x3f8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00d      	beq.n	8003962 <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800394c:	2b00      	cmp	r3, #0
 800394e:	d008      	beq.n	8003962 <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003954:	2b00      	cmp	r3, #0
 8003956:	d01a      	beq.n	800398e <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	4798      	blx	r3
    }
    return;
 8003960:	e015      	b.n	800398e <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003968:	2b00      	cmp	r3, #0
 800396a:	d011      	beq.n	8003990 <HAL_UART_IRQHandler+0x3f8>
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00c      	beq.n	8003990 <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 fde3 	bl	8004542 <UART_EndTransmit_IT>
    return;
 800397c:	e008      	b.n	8003990 <HAL_UART_IRQHandler+0x3f8>
      return;
 800397e:	bf00      	nop
 8003980:	e006      	b.n	8003990 <HAL_UART_IRQHandler+0x3f8>
    return;
 8003982:	bf00      	nop
 8003984:	e004      	b.n	8003990 <HAL_UART_IRQHandler+0x3f8>
      return;
 8003986:	bf00      	nop
 8003988:	e002      	b.n	8003990 <HAL_UART_IRQHandler+0x3f8>
      return;
 800398a:	bf00      	nop
 800398c:	e000      	b.n	8003990 <HAL_UART_IRQHandler+0x3f8>
    return;
 800398e:	bf00      	nop
  }

}
 8003990:	3720      	adds	r7, #32
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop

08003998 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80039b4:	bf00      	nop
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	460b      	mov	r3, r1
 80039ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80039cc:	bf00      	nop
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80039e0:	bf00      	nop
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b088      	sub	sp, #32
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80039f4:	2300      	movs	r3, #0
 80039f6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689a      	ldr	r2, [r3, #8]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	691b      	ldr	r3, [r3, #16]
 8003a00:	431a      	orrs	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	695b      	ldr	r3, [r3, #20]
 8003a06:	431a      	orrs	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	69db      	ldr	r3, [r3, #28]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	4ba7      	ldr	r3, [pc, #668]	; (8003cb4 <UART_SetConfig+0x2c8>)
 8003a18:	4013      	ands	r3, r2
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	6812      	ldr	r2, [r2, #0]
 8003a1e:	6979      	ldr	r1, [r7, #20]
 8003a20:	430b      	orrs	r3, r1
 8003a22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	68da      	ldr	r2, [r3, #12]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	430a      	orrs	r2, r1
 8003a38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a1b      	ldr	r3, [r3, #32]
 8003a44:	697a      	ldr	r2, [r7, #20]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a95      	ldr	r2, [pc, #596]	; (8003cb8 <UART_SetConfig+0x2cc>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d120      	bne.n	8003aaa <UART_SetConfig+0xbe>
 8003a68:	4b94      	ldr	r3, [pc, #592]	; (8003cbc <UART_SetConfig+0x2d0>)
 8003a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a6e:	f003 0303 	and.w	r3, r3, #3
 8003a72:	2b03      	cmp	r3, #3
 8003a74:	d816      	bhi.n	8003aa4 <UART_SetConfig+0xb8>
 8003a76:	a201      	add	r2, pc, #4	; (adr r2, 8003a7c <UART_SetConfig+0x90>)
 8003a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a7c:	08003a8d 	.word	0x08003a8d
 8003a80:	08003a99 	.word	0x08003a99
 8003a84:	08003a93 	.word	0x08003a93
 8003a88:	08003a9f 	.word	0x08003a9f
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	77fb      	strb	r3, [r7, #31]
 8003a90:	e14f      	b.n	8003d32 <UART_SetConfig+0x346>
 8003a92:	2302      	movs	r3, #2
 8003a94:	77fb      	strb	r3, [r7, #31]
 8003a96:	e14c      	b.n	8003d32 <UART_SetConfig+0x346>
 8003a98:	2304      	movs	r3, #4
 8003a9a:	77fb      	strb	r3, [r7, #31]
 8003a9c:	e149      	b.n	8003d32 <UART_SetConfig+0x346>
 8003a9e:	2308      	movs	r3, #8
 8003aa0:	77fb      	strb	r3, [r7, #31]
 8003aa2:	e146      	b.n	8003d32 <UART_SetConfig+0x346>
 8003aa4:	2310      	movs	r3, #16
 8003aa6:	77fb      	strb	r3, [r7, #31]
 8003aa8:	e143      	b.n	8003d32 <UART_SetConfig+0x346>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a84      	ldr	r2, [pc, #528]	; (8003cc0 <UART_SetConfig+0x2d4>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d132      	bne.n	8003b1a <UART_SetConfig+0x12e>
 8003ab4:	4b81      	ldr	r3, [pc, #516]	; (8003cbc <UART_SetConfig+0x2d0>)
 8003ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aba:	f003 030c 	and.w	r3, r3, #12
 8003abe:	2b0c      	cmp	r3, #12
 8003ac0:	d828      	bhi.n	8003b14 <UART_SetConfig+0x128>
 8003ac2:	a201      	add	r2, pc, #4	; (adr r2, 8003ac8 <UART_SetConfig+0xdc>)
 8003ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac8:	08003afd 	.word	0x08003afd
 8003acc:	08003b15 	.word	0x08003b15
 8003ad0:	08003b15 	.word	0x08003b15
 8003ad4:	08003b15 	.word	0x08003b15
 8003ad8:	08003b09 	.word	0x08003b09
 8003adc:	08003b15 	.word	0x08003b15
 8003ae0:	08003b15 	.word	0x08003b15
 8003ae4:	08003b15 	.word	0x08003b15
 8003ae8:	08003b03 	.word	0x08003b03
 8003aec:	08003b15 	.word	0x08003b15
 8003af0:	08003b15 	.word	0x08003b15
 8003af4:	08003b15 	.word	0x08003b15
 8003af8:	08003b0f 	.word	0x08003b0f
 8003afc:	2300      	movs	r3, #0
 8003afe:	77fb      	strb	r3, [r7, #31]
 8003b00:	e117      	b.n	8003d32 <UART_SetConfig+0x346>
 8003b02:	2302      	movs	r3, #2
 8003b04:	77fb      	strb	r3, [r7, #31]
 8003b06:	e114      	b.n	8003d32 <UART_SetConfig+0x346>
 8003b08:	2304      	movs	r3, #4
 8003b0a:	77fb      	strb	r3, [r7, #31]
 8003b0c:	e111      	b.n	8003d32 <UART_SetConfig+0x346>
 8003b0e:	2308      	movs	r3, #8
 8003b10:	77fb      	strb	r3, [r7, #31]
 8003b12:	e10e      	b.n	8003d32 <UART_SetConfig+0x346>
 8003b14:	2310      	movs	r3, #16
 8003b16:	77fb      	strb	r3, [r7, #31]
 8003b18:	e10b      	b.n	8003d32 <UART_SetConfig+0x346>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a69      	ldr	r2, [pc, #420]	; (8003cc4 <UART_SetConfig+0x2d8>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d120      	bne.n	8003b66 <UART_SetConfig+0x17a>
 8003b24:	4b65      	ldr	r3, [pc, #404]	; (8003cbc <UART_SetConfig+0x2d0>)
 8003b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b2a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003b2e:	2b30      	cmp	r3, #48	; 0x30
 8003b30:	d013      	beq.n	8003b5a <UART_SetConfig+0x16e>
 8003b32:	2b30      	cmp	r3, #48	; 0x30
 8003b34:	d814      	bhi.n	8003b60 <UART_SetConfig+0x174>
 8003b36:	2b20      	cmp	r3, #32
 8003b38:	d009      	beq.n	8003b4e <UART_SetConfig+0x162>
 8003b3a:	2b20      	cmp	r3, #32
 8003b3c:	d810      	bhi.n	8003b60 <UART_SetConfig+0x174>
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d002      	beq.n	8003b48 <UART_SetConfig+0x15c>
 8003b42:	2b10      	cmp	r3, #16
 8003b44:	d006      	beq.n	8003b54 <UART_SetConfig+0x168>
 8003b46:	e00b      	b.n	8003b60 <UART_SetConfig+0x174>
 8003b48:	2300      	movs	r3, #0
 8003b4a:	77fb      	strb	r3, [r7, #31]
 8003b4c:	e0f1      	b.n	8003d32 <UART_SetConfig+0x346>
 8003b4e:	2302      	movs	r3, #2
 8003b50:	77fb      	strb	r3, [r7, #31]
 8003b52:	e0ee      	b.n	8003d32 <UART_SetConfig+0x346>
 8003b54:	2304      	movs	r3, #4
 8003b56:	77fb      	strb	r3, [r7, #31]
 8003b58:	e0eb      	b.n	8003d32 <UART_SetConfig+0x346>
 8003b5a:	2308      	movs	r3, #8
 8003b5c:	77fb      	strb	r3, [r7, #31]
 8003b5e:	e0e8      	b.n	8003d32 <UART_SetConfig+0x346>
 8003b60:	2310      	movs	r3, #16
 8003b62:	77fb      	strb	r3, [r7, #31]
 8003b64:	e0e5      	b.n	8003d32 <UART_SetConfig+0x346>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a57      	ldr	r2, [pc, #348]	; (8003cc8 <UART_SetConfig+0x2dc>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d120      	bne.n	8003bb2 <UART_SetConfig+0x1c6>
 8003b70:	4b52      	ldr	r3, [pc, #328]	; (8003cbc <UART_SetConfig+0x2d0>)
 8003b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b76:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003b7a:	2bc0      	cmp	r3, #192	; 0xc0
 8003b7c:	d013      	beq.n	8003ba6 <UART_SetConfig+0x1ba>
 8003b7e:	2bc0      	cmp	r3, #192	; 0xc0
 8003b80:	d814      	bhi.n	8003bac <UART_SetConfig+0x1c0>
 8003b82:	2b80      	cmp	r3, #128	; 0x80
 8003b84:	d009      	beq.n	8003b9a <UART_SetConfig+0x1ae>
 8003b86:	2b80      	cmp	r3, #128	; 0x80
 8003b88:	d810      	bhi.n	8003bac <UART_SetConfig+0x1c0>
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d002      	beq.n	8003b94 <UART_SetConfig+0x1a8>
 8003b8e:	2b40      	cmp	r3, #64	; 0x40
 8003b90:	d006      	beq.n	8003ba0 <UART_SetConfig+0x1b4>
 8003b92:	e00b      	b.n	8003bac <UART_SetConfig+0x1c0>
 8003b94:	2300      	movs	r3, #0
 8003b96:	77fb      	strb	r3, [r7, #31]
 8003b98:	e0cb      	b.n	8003d32 <UART_SetConfig+0x346>
 8003b9a:	2302      	movs	r3, #2
 8003b9c:	77fb      	strb	r3, [r7, #31]
 8003b9e:	e0c8      	b.n	8003d32 <UART_SetConfig+0x346>
 8003ba0:	2304      	movs	r3, #4
 8003ba2:	77fb      	strb	r3, [r7, #31]
 8003ba4:	e0c5      	b.n	8003d32 <UART_SetConfig+0x346>
 8003ba6:	2308      	movs	r3, #8
 8003ba8:	77fb      	strb	r3, [r7, #31]
 8003baa:	e0c2      	b.n	8003d32 <UART_SetConfig+0x346>
 8003bac:	2310      	movs	r3, #16
 8003bae:	77fb      	strb	r3, [r7, #31]
 8003bb0:	e0bf      	b.n	8003d32 <UART_SetConfig+0x346>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a45      	ldr	r2, [pc, #276]	; (8003ccc <UART_SetConfig+0x2e0>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d125      	bne.n	8003c08 <UART_SetConfig+0x21c>
 8003bbc:	4b3f      	ldr	r3, [pc, #252]	; (8003cbc <UART_SetConfig+0x2d0>)
 8003bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bca:	d017      	beq.n	8003bfc <UART_SetConfig+0x210>
 8003bcc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bd0:	d817      	bhi.n	8003c02 <UART_SetConfig+0x216>
 8003bd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bd6:	d00b      	beq.n	8003bf0 <UART_SetConfig+0x204>
 8003bd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bdc:	d811      	bhi.n	8003c02 <UART_SetConfig+0x216>
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d003      	beq.n	8003bea <UART_SetConfig+0x1fe>
 8003be2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003be6:	d006      	beq.n	8003bf6 <UART_SetConfig+0x20a>
 8003be8:	e00b      	b.n	8003c02 <UART_SetConfig+0x216>
 8003bea:	2300      	movs	r3, #0
 8003bec:	77fb      	strb	r3, [r7, #31]
 8003bee:	e0a0      	b.n	8003d32 <UART_SetConfig+0x346>
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	77fb      	strb	r3, [r7, #31]
 8003bf4:	e09d      	b.n	8003d32 <UART_SetConfig+0x346>
 8003bf6:	2304      	movs	r3, #4
 8003bf8:	77fb      	strb	r3, [r7, #31]
 8003bfa:	e09a      	b.n	8003d32 <UART_SetConfig+0x346>
 8003bfc:	2308      	movs	r3, #8
 8003bfe:	77fb      	strb	r3, [r7, #31]
 8003c00:	e097      	b.n	8003d32 <UART_SetConfig+0x346>
 8003c02:	2310      	movs	r3, #16
 8003c04:	77fb      	strb	r3, [r7, #31]
 8003c06:	e094      	b.n	8003d32 <UART_SetConfig+0x346>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a30      	ldr	r2, [pc, #192]	; (8003cd0 <UART_SetConfig+0x2e4>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d125      	bne.n	8003c5e <UART_SetConfig+0x272>
 8003c12:	4b2a      	ldr	r3, [pc, #168]	; (8003cbc <UART_SetConfig+0x2d0>)
 8003c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c18:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003c1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c20:	d017      	beq.n	8003c52 <UART_SetConfig+0x266>
 8003c22:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c26:	d817      	bhi.n	8003c58 <UART_SetConfig+0x26c>
 8003c28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c2c:	d00b      	beq.n	8003c46 <UART_SetConfig+0x25a>
 8003c2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c32:	d811      	bhi.n	8003c58 <UART_SetConfig+0x26c>
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d003      	beq.n	8003c40 <UART_SetConfig+0x254>
 8003c38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c3c:	d006      	beq.n	8003c4c <UART_SetConfig+0x260>
 8003c3e:	e00b      	b.n	8003c58 <UART_SetConfig+0x26c>
 8003c40:	2301      	movs	r3, #1
 8003c42:	77fb      	strb	r3, [r7, #31]
 8003c44:	e075      	b.n	8003d32 <UART_SetConfig+0x346>
 8003c46:	2302      	movs	r3, #2
 8003c48:	77fb      	strb	r3, [r7, #31]
 8003c4a:	e072      	b.n	8003d32 <UART_SetConfig+0x346>
 8003c4c:	2304      	movs	r3, #4
 8003c4e:	77fb      	strb	r3, [r7, #31]
 8003c50:	e06f      	b.n	8003d32 <UART_SetConfig+0x346>
 8003c52:	2308      	movs	r3, #8
 8003c54:	77fb      	strb	r3, [r7, #31]
 8003c56:	e06c      	b.n	8003d32 <UART_SetConfig+0x346>
 8003c58:	2310      	movs	r3, #16
 8003c5a:	77fb      	strb	r3, [r7, #31]
 8003c5c:	e069      	b.n	8003d32 <UART_SetConfig+0x346>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a1c      	ldr	r2, [pc, #112]	; (8003cd4 <UART_SetConfig+0x2e8>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d137      	bne.n	8003cd8 <UART_SetConfig+0x2ec>
 8003c68:	4b14      	ldr	r3, [pc, #80]	; (8003cbc <UART_SetConfig+0x2d0>)
 8003c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c6e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003c72:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003c76:	d017      	beq.n	8003ca8 <UART_SetConfig+0x2bc>
 8003c78:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003c7c:	d817      	bhi.n	8003cae <UART_SetConfig+0x2c2>
 8003c7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c82:	d00b      	beq.n	8003c9c <UART_SetConfig+0x2b0>
 8003c84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c88:	d811      	bhi.n	8003cae <UART_SetConfig+0x2c2>
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d003      	beq.n	8003c96 <UART_SetConfig+0x2aa>
 8003c8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c92:	d006      	beq.n	8003ca2 <UART_SetConfig+0x2b6>
 8003c94:	e00b      	b.n	8003cae <UART_SetConfig+0x2c2>
 8003c96:	2300      	movs	r3, #0
 8003c98:	77fb      	strb	r3, [r7, #31]
 8003c9a:	e04a      	b.n	8003d32 <UART_SetConfig+0x346>
 8003c9c:	2302      	movs	r3, #2
 8003c9e:	77fb      	strb	r3, [r7, #31]
 8003ca0:	e047      	b.n	8003d32 <UART_SetConfig+0x346>
 8003ca2:	2304      	movs	r3, #4
 8003ca4:	77fb      	strb	r3, [r7, #31]
 8003ca6:	e044      	b.n	8003d32 <UART_SetConfig+0x346>
 8003ca8:	2308      	movs	r3, #8
 8003caa:	77fb      	strb	r3, [r7, #31]
 8003cac:	e041      	b.n	8003d32 <UART_SetConfig+0x346>
 8003cae:	2310      	movs	r3, #16
 8003cb0:	77fb      	strb	r3, [r7, #31]
 8003cb2:	e03e      	b.n	8003d32 <UART_SetConfig+0x346>
 8003cb4:	efff69f3 	.word	0xefff69f3
 8003cb8:	40011000 	.word	0x40011000
 8003cbc:	40023800 	.word	0x40023800
 8003cc0:	40004400 	.word	0x40004400
 8003cc4:	40004800 	.word	0x40004800
 8003cc8:	40004c00 	.word	0x40004c00
 8003ccc:	40005000 	.word	0x40005000
 8003cd0:	40011400 	.word	0x40011400
 8003cd4:	40007800 	.word	0x40007800
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a71      	ldr	r2, [pc, #452]	; (8003ea4 <UART_SetConfig+0x4b8>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d125      	bne.n	8003d2e <UART_SetConfig+0x342>
 8003ce2:	4b71      	ldr	r3, [pc, #452]	; (8003ea8 <UART_SetConfig+0x4bc>)
 8003ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003cec:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003cf0:	d017      	beq.n	8003d22 <UART_SetConfig+0x336>
 8003cf2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003cf6:	d817      	bhi.n	8003d28 <UART_SetConfig+0x33c>
 8003cf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cfc:	d00b      	beq.n	8003d16 <UART_SetConfig+0x32a>
 8003cfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d02:	d811      	bhi.n	8003d28 <UART_SetConfig+0x33c>
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d003      	beq.n	8003d10 <UART_SetConfig+0x324>
 8003d08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d0c:	d006      	beq.n	8003d1c <UART_SetConfig+0x330>
 8003d0e:	e00b      	b.n	8003d28 <UART_SetConfig+0x33c>
 8003d10:	2300      	movs	r3, #0
 8003d12:	77fb      	strb	r3, [r7, #31]
 8003d14:	e00d      	b.n	8003d32 <UART_SetConfig+0x346>
 8003d16:	2302      	movs	r3, #2
 8003d18:	77fb      	strb	r3, [r7, #31]
 8003d1a:	e00a      	b.n	8003d32 <UART_SetConfig+0x346>
 8003d1c:	2304      	movs	r3, #4
 8003d1e:	77fb      	strb	r3, [r7, #31]
 8003d20:	e007      	b.n	8003d32 <UART_SetConfig+0x346>
 8003d22:	2308      	movs	r3, #8
 8003d24:	77fb      	strb	r3, [r7, #31]
 8003d26:	e004      	b.n	8003d32 <UART_SetConfig+0x346>
 8003d28:	2310      	movs	r3, #16
 8003d2a:	77fb      	strb	r3, [r7, #31]
 8003d2c:	e001      	b.n	8003d32 <UART_SetConfig+0x346>
 8003d2e:	2310      	movs	r3, #16
 8003d30:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	69db      	ldr	r3, [r3, #28]
 8003d36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d3a:	d15b      	bne.n	8003df4 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8003d3c:	7ffb      	ldrb	r3, [r7, #31]
 8003d3e:	2b08      	cmp	r3, #8
 8003d40:	d827      	bhi.n	8003d92 <UART_SetConfig+0x3a6>
 8003d42:	a201      	add	r2, pc, #4	; (adr r2, 8003d48 <UART_SetConfig+0x35c>)
 8003d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d48:	08003d6d 	.word	0x08003d6d
 8003d4c:	08003d75 	.word	0x08003d75
 8003d50:	08003d7d 	.word	0x08003d7d
 8003d54:	08003d93 	.word	0x08003d93
 8003d58:	08003d83 	.word	0x08003d83
 8003d5c:	08003d93 	.word	0x08003d93
 8003d60:	08003d93 	.word	0x08003d93
 8003d64:	08003d93 	.word	0x08003d93
 8003d68:	08003d8b 	.word	0x08003d8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d6c:	f7fe fea2 	bl	8002ab4 <HAL_RCC_GetPCLK1Freq>
 8003d70:	61b8      	str	r0, [r7, #24]
        break;
 8003d72:	e013      	b.n	8003d9c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d74:	f7fe feb2 	bl	8002adc <HAL_RCC_GetPCLK2Freq>
 8003d78:	61b8      	str	r0, [r7, #24]
        break;
 8003d7a:	e00f      	b.n	8003d9c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d7c:	4b4b      	ldr	r3, [pc, #300]	; (8003eac <UART_SetConfig+0x4c0>)
 8003d7e:	61bb      	str	r3, [r7, #24]
        break;
 8003d80:	e00c      	b.n	8003d9c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d82:	f7fe fda9 	bl	80028d8 <HAL_RCC_GetSysClockFreq>
 8003d86:	61b8      	str	r0, [r7, #24]
        break;
 8003d88:	e008      	b.n	8003d9c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d8e:	61bb      	str	r3, [r7, #24]
        break;
 8003d90:	e004      	b.n	8003d9c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8003d92:	2300      	movs	r3, #0
 8003d94:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	77bb      	strb	r3, [r7, #30]
        break;
 8003d9a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d074      	beq.n	8003e8c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	005a      	lsls	r2, r3, #1
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	085b      	lsrs	r3, r3, #1
 8003dac:	441a      	add	r2, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	2b0f      	cmp	r3, #15
 8003dbe:	d916      	bls.n	8003dee <UART_SetConfig+0x402>
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dc6:	d212      	bcs.n	8003dee <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	f023 030f 	bic.w	r3, r3, #15
 8003dd0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	085b      	lsrs	r3, r3, #1
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	f003 0307 	and.w	r3, r3, #7
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	89fb      	ldrh	r3, [r7, #14]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	89fa      	ldrh	r2, [r7, #14]
 8003dea:	60da      	str	r2, [r3, #12]
 8003dec:	e04e      	b.n	8003e8c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	77bb      	strb	r3, [r7, #30]
 8003df2:	e04b      	b.n	8003e8c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003df4:	7ffb      	ldrb	r3, [r7, #31]
 8003df6:	2b08      	cmp	r3, #8
 8003df8:	d827      	bhi.n	8003e4a <UART_SetConfig+0x45e>
 8003dfa:	a201      	add	r2, pc, #4	; (adr r2, 8003e00 <UART_SetConfig+0x414>)
 8003dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e00:	08003e25 	.word	0x08003e25
 8003e04:	08003e2d 	.word	0x08003e2d
 8003e08:	08003e35 	.word	0x08003e35
 8003e0c:	08003e4b 	.word	0x08003e4b
 8003e10:	08003e3b 	.word	0x08003e3b
 8003e14:	08003e4b 	.word	0x08003e4b
 8003e18:	08003e4b 	.word	0x08003e4b
 8003e1c:	08003e4b 	.word	0x08003e4b
 8003e20:	08003e43 	.word	0x08003e43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e24:	f7fe fe46 	bl	8002ab4 <HAL_RCC_GetPCLK1Freq>
 8003e28:	61b8      	str	r0, [r7, #24]
        break;
 8003e2a:	e013      	b.n	8003e54 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e2c:	f7fe fe56 	bl	8002adc <HAL_RCC_GetPCLK2Freq>
 8003e30:	61b8      	str	r0, [r7, #24]
        break;
 8003e32:	e00f      	b.n	8003e54 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e34:	4b1d      	ldr	r3, [pc, #116]	; (8003eac <UART_SetConfig+0x4c0>)
 8003e36:	61bb      	str	r3, [r7, #24]
        break;
 8003e38:	e00c      	b.n	8003e54 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e3a:	f7fe fd4d 	bl	80028d8 <HAL_RCC_GetSysClockFreq>
 8003e3e:	61b8      	str	r0, [r7, #24]
        break;
 8003e40:	e008      	b.n	8003e54 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e46:	61bb      	str	r3, [r7, #24]
        break;
 8003e48:	e004      	b.n	8003e54 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	77bb      	strb	r3, [r7, #30]
        break;
 8003e52:	bf00      	nop
    }

    if (pclk != 0U)
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d018      	beq.n	8003e8c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	085a      	lsrs	r2, r3, #1
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	441a      	add	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	2b0f      	cmp	r3, #15
 8003e74:	d908      	bls.n	8003e88 <UART_SetConfig+0x49c>
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e7c:	d204      	bcs.n	8003e88 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	60da      	str	r2, [r3, #12]
 8003e86:	e001      	b.n	8003e8c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003e98:	7fbb      	ldrb	r3, [r7, #30]
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3720      	adds	r7, #32
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	40007c00 	.word	0x40007c00
 8003ea8:	40023800 	.word	0x40023800
 8003eac:	00f42400 	.word	0x00f42400

08003eb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebc:	f003 0301 	and.w	r3, r3, #1
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00a      	beq.n	8003eda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	430a      	orrs	r2, r1
 8003ed8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00a      	beq.n	8003efc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f00:	f003 0304 	and.w	r3, r3, #4
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d00a      	beq.n	8003f1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f22:	f003 0308 	and.w	r3, r3, #8
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00a      	beq.n	8003f40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f44:	f003 0310 	and.w	r3, r3, #16
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d00a      	beq.n	8003f62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f66:	f003 0320 	and.w	r3, r3, #32
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00a      	beq.n	8003f84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	430a      	orrs	r2, r1
 8003f82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d01a      	beq.n	8003fc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003faa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fae:	d10a      	bne.n	8003fc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	430a      	orrs	r2, r1
 8003fc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00a      	beq.n	8003fe8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	605a      	str	r2, [r3, #4]
  }
}
 8003fe8:	bf00      	nop
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b086      	sub	sp, #24
 8003ff8:	af02      	add	r7, sp, #8
 8003ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004004:	f7fc ffca 	bl	8000f9c <HAL_GetTick>
 8004008:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0308 	and.w	r3, r3, #8
 8004014:	2b08      	cmp	r3, #8
 8004016:	d10e      	bne.n	8004036 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004018:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800401c:	9300      	str	r3, [sp, #0]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2200      	movs	r2, #0
 8004022:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 f82d 	bl	8004086 <UART_WaitOnFlagUntilTimeout>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d001      	beq.n	8004036 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e023      	b.n	800407e <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0304 	and.w	r3, r3, #4
 8004040:	2b04      	cmp	r3, #4
 8004042:	d10e      	bne.n	8004062 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004044:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004048:	9300      	str	r3, [sp, #0]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 f817 	bl	8004086 <UART_WaitOnFlagUntilTimeout>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d001      	beq.n	8004062 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e00d      	b.n	800407e <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2220      	movs	r2, #32
 8004066:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2220      	movs	r2, #32
 800406c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3710      	adds	r7, #16
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}

08004086 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004086:	b580      	push	{r7, lr}
 8004088:	b084      	sub	sp, #16
 800408a:	af00      	add	r7, sp, #0
 800408c:	60f8      	str	r0, [r7, #12]
 800408e:	60b9      	str	r1, [r7, #8]
 8004090:	603b      	str	r3, [r7, #0]
 8004092:	4613      	mov	r3, r2
 8004094:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004096:	e05e      	b.n	8004156 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800409e:	d05a      	beq.n	8004156 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040a0:	f7fc ff7c 	bl	8000f9c <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	69ba      	ldr	r2, [r7, #24]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d302      	bcc.n	80040b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d11b      	bne.n	80040ee <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80040c4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	689a      	ldr	r2, [r3, #8]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f022 0201 	bic.w	r2, r2, #1
 80040d4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2220      	movs	r2, #32
 80040da:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2220      	movs	r2, #32
 80040e0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e043      	b.n	8004176 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0304 	and.w	r3, r3, #4
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d02c      	beq.n	8004156 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	69db      	ldr	r3, [r3, #28]
 8004102:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004106:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800410a:	d124      	bne.n	8004156 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004114:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004124:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	689a      	ldr	r2, [r3, #8]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f022 0201 	bic.w	r2, r2, #1
 8004134:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2220      	movs	r2, #32
 800413a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2220      	movs	r2, #32
 8004140:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2220      	movs	r2, #32
 8004146:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e00f      	b.n	8004176 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	69da      	ldr	r2, [r3, #28]
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	4013      	ands	r3, r2
 8004160:	68ba      	ldr	r2, [r7, #8]
 8004162:	429a      	cmp	r2, r3
 8004164:	bf0c      	ite	eq
 8004166:	2301      	moveq	r3, #1
 8004168:	2300      	movne	r3, #0
 800416a:	b2db      	uxtb	r3, r3
 800416c:	461a      	mov	r2, r3
 800416e:	79fb      	ldrb	r3, [r7, #7]
 8004170:	429a      	cmp	r2, r3
 8004172:	d091      	beq.n	8004098 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3710      	adds	r7, #16
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
	...

08004180 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	4613      	mov	r3, r2
 800418c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	68ba      	ldr	r2, [r7, #8]
 8004192:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	88fa      	ldrh	r2, [r7, #6]
 8004198:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2222      	movs	r2, #34	; 0x22
 80041a8:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d02b      	beq.n	800420a <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b6:	4a25      	ldr	r2, [pc, #148]	; (800424c <UART_Start_Receive_DMA+0xcc>)
 80041b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041be:	4a24      	ldr	r2, [pc, #144]	; (8004250 <UART_Start_Receive_DMA+0xd0>)
 80041c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041c6:	4a23      	ldr	r2, [pc, #140]	; (8004254 <UART_Start_Receive_DMA+0xd4>)
 80041c8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ce:	2200      	movs	r2, #0
 80041d0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	3324      	adds	r3, #36	; 0x24
 80041dc:	4619      	mov	r1, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e2:	461a      	mov	r2, r3
 80041e4:	88fb      	ldrh	r3, [r7, #6]
 80041e6:	f7fd f935 	bl	8001454 <HAL_DMA_Start_IT>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00c      	beq.n	800420a <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2210      	movs	r2, #16
 80041f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2220      	movs	r2, #32
 8004204:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e01c      	b.n	8004244 <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004220:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	689a      	ldr	r2, [r3, #8]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f042 0201 	orr.w	r2, r2, #1
 8004230:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	689a      	ldr	r2, [r3, #8]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004240:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8004242:	2300      	movs	r3, #0
}
 8004244:	4618      	mov	r0, r3
 8004246:	3710      	adds	r7, #16
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	080042e1 	.word	0x080042e1
 8004250:	08004375 	.word	0x08004375
 8004254:	080043ad 	.word	0x080043ad

08004258 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800426e:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2220      	movs	r2, #32
 8004274:	679a      	str	r2, [r3, #120]	; 0x78
}
 8004276:	bf00      	nop
 8004278:	370c      	adds	r7, #12
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr

08004282 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004282:	b480      	push	{r7}
 8004284:	b083      	sub	sp, #12
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004298:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	689a      	ldr	r2, [r3, #8]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f022 0201 	bic.w	r2, r2, #1
 80042a8:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d107      	bne.n	80042c2 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f022 0210 	bic.w	r2, r2, #16
 80042c0:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2220      	movs	r2, #32
 80042c6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	665a      	str	r2, [r3, #100]	; 0x64
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ec:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	69db      	ldr	r3, [r3, #28]
 80042f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042f6:	d02a      	beq.n	800434e <UART_DMAReceiveCplt+0x6e>
  {
    huart->RxXferCount = 0U;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800430e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	689a      	ldr	r2, [r3, #8]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f022 0201 	bic.w	r2, r2, #1
 800431e:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	689a      	ldr	r2, [r3, #8]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800432e:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2220      	movs	r2, #32
 8004334:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800433a:	2b01      	cmp	r3, #1
 800433c:	d107      	bne.n	800434e <UART_DMAReceiveCplt+0x6e>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f022 0210 	bic.w	r2, r2, #16
 800434c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004352:	2b01      	cmp	r3, #1
 8004354:	d107      	bne.n	8004366 <UART_DMAReceiveCplt+0x86>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800435c:	4619      	mov	r1, r3
 800435e:	68f8      	ldr	r0, [r7, #12]
 8004360:	f7ff fb2e 	bl	80039c0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004364:	e002      	b.n	800436c <UART_DMAReceiveCplt+0x8c>
    HAL_UART_RxCpltCallback(huart);
 8004366:	68f8      	ldr	r0, [r7, #12]
 8004368:	f7fc fdbc 	bl	8000ee4 <HAL_UART_RxCpltCallback>
}
 800436c:	bf00      	nop
 800436e:	3710      	adds	r7, #16
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004380:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004386:	2b01      	cmp	r3, #1
 8004388:	d109      	bne.n	800439e <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004390:	085b      	lsrs	r3, r3, #1
 8004392:	b29b      	uxth	r3, r3
 8004394:	4619      	mov	r1, r3
 8004396:	68f8      	ldr	r0, [r7, #12]
 8004398:	f7ff fb12 	bl	80039c0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800439c:	e002      	b.n	80043a4 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800439e:	68f8      	ldr	r0, [r7, #12]
 80043a0:	f7ff fb04 	bl	80039ac <HAL_UART_RxHalfCpltCallback>
}
 80043a4:	bf00      	nop
 80043a6:	3710      	adds	r7, #16
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b086      	sub	sp, #24
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043be:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043c4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043d0:	2b80      	cmp	r3, #128	; 0x80
 80043d2:	d109      	bne.n	80043e8 <UART_DMAError+0x3c>
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	2b21      	cmp	r3, #33	; 0x21
 80043d8:	d106      	bne.n	80043e8 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	2200      	movs	r2, #0
 80043de:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80043e2:	6978      	ldr	r0, [r7, #20]
 80043e4:	f7ff ff38 	bl	8004258 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f2:	2b40      	cmp	r3, #64	; 0x40
 80043f4:	d109      	bne.n	800440a <UART_DMAError+0x5e>
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2b22      	cmp	r3, #34	; 0x22
 80043fa:	d106      	bne.n	800440a <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	2200      	movs	r2, #0
 8004400:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8004404:	6978      	ldr	r0, [r7, #20]
 8004406:	f7ff ff3c 	bl	8004282 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004410:	f043 0210 	orr.w	r2, r3, #16
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800441a:	6978      	ldr	r0, [r7, #20]
 800441c:	f7fc fd4c 	bl	8000eb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004420:	bf00      	nop
 8004422:	3718      	adds	r7, #24
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004434:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004446:	68f8      	ldr	r0, [r7, #12]
 8004448:	f7fc fd36 	bl	8000eb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800444c:	bf00      	nop
 800444e:	3710      	adds	r7, #16
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}

08004454 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004460:	2b21      	cmp	r3, #33	; 0x21
 8004462:	d12a      	bne.n	80044ba <UART_TxISR_8BIT+0x66>
  {
    if (huart->TxXferCount == 0U)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800446a:	b29b      	uxth	r3, r3
 800446c:	2b00      	cmp	r3, #0
 800446e:	d110      	bne.n	8004492 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800447e:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800448e:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004490:	e013      	b.n	80044ba <UART_TxISR_8BIT+0x66>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004496:	781a      	ldrb	r2, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044a2:	1c5a      	adds	r2, r3, #1
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	3b01      	subs	r3, #1
 80044b2:	b29a      	uxth	r2, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80044ba:	bf00      	nop
 80044bc:	370c      	adds	r7, #12
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr

080044c6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80044c6:	b480      	push	{r7}
 80044c8:	b085      	sub	sp, #20
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044d2:	2b21      	cmp	r3, #33	; 0x21
 80044d4:	d12f      	bne.n	8004536 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80044dc:	b29b      	uxth	r3, r3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d110      	bne.n	8004504 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044f0:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004500:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004502:	e018      	b.n	8004536 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004508:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	881b      	ldrh	r3, [r3, #0]
 800450e:	461a      	mov	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004518:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800451e:	1c9a      	adds	r2, r3, #2
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800452a:	b29b      	uxth	r3, r3
 800452c:	3b01      	subs	r3, #1
 800452e:	b29a      	uxth	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004536:	bf00      	nop
 8004538:	3714      	adds	r7, #20
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr

08004542 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004542:	b580      	push	{r7, lr}
 8004544:	b082      	sub	sp, #8
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004558:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2220      	movs	r2, #32
 800455e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f7ff fa16 	bl	8003998 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800456c:	bf00      	nop
 800456e:	3708      	adds	r7, #8
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004574:	f8df d034 	ldr.w	sp, [pc, #52]	; 80045ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004578:	480d      	ldr	r0, [pc, #52]	; (80045b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800457a:	490e      	ldr	r1, [pc, #56]	; (80045b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800457c:	4a0e      	ldr	r2, [pc, #56]	; (80045b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800457e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004580:	e002      	b.n	8004588 <LoopCopyDataInit>

08004582 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004582:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004584:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004586:	3304      	adds	r3, #4

08004588 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004588:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800458a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800458c:	d3f9      	bcc.n	8004582 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800458e:	4a0b      	ldr	r2, [pc, #44]	; (80045bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004590:	4c0b      	ldr	r4, [pc, #44]	; (80045c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004592:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004594:	e001      	b.n	800459a <LoopFillZerobss>

08004596 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004596:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004598:	3204      	adds	r2, #4

0800459a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800459a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800459c:	d3fb      	bcc.n	8004596 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800459e:	f7fc f87d 	bl	800069c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80045a2:	f000 f817 	bl	80045d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80045a6:	f7fc f9e3 	bl	8000970 <main>
  bx  lr    
 80045aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80045ac:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80045b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80045b4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80045b8:	080056d0 	.word	0x080056d0
  ldr r2, =_sbss
 80045bc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80045c0:	200002d4 	.word	0x200002d4

080045c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80045c4:	e7fe      	b.n	80045c4 <ADC_IRQHandler>
	...

080045c8 <__errno>:
 80045c8:	4b01      	ldr	r3, [pc, #4]	; (80045d0 <__errno+0x8>)
 80045ca:	6818      	ldr	r0, [r3, #0]
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	2000000c 	.word	0x2000000c

080045d4 <__libc_init_array>:
 80045d4:	b570      	push	{r4, r5, r6, lr}
 80045d6:	4d0d      	ldr	r5, [pc, #52]	; (800460c <__libc_init_array+0x38>)
 80045d8:	4c0d      	ldr	r4, [pc, #52]	; (8004610 <__libc_init_array+0x3c>)
 80045da:	1b64      	subs	r4, r4, r5
 80045dc:	10a4      	asrs	r4, r4, #2
 80045de:	2600      	movs	r6, #0
 80045e0:	42a6      	cmp	r6, r4
 80045e2:	d109      	bne.n	80045f8 <__libc_init_array+0x24>
 80045e4:	4d0b      	ldr	r5, [pc, #44]	; (8004614 <__libc_init_array+0x40>)
 80045e6:	4c0c      	ldr	r4, [pc, #48]	; (8004618 <__libc_init_array+0x44>)
 80045e8:	f000 ffec 	bl	80055c4 <_init>
 80045ec:	1b64      	subs	r4, r4, r5
 80045ee:	10a4      	asrs	r4, r4, #2
 80045f0:	2600      	movs	r6, #0
 80045f2:	42a6      	cmp	r6, r4
 80045f4:	d105      	bne.n	8004602 <__libc_init_array+0x2e>
 80045f6:	bd70      	pop	{r4, r5, r6, pc}
 80045f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80045fc:	4798      	blx	r3
 80045fe:	3601      	adds	r6, #1
 8004600:	e7ee      	b.n	80045e0 <__libc_init_array+0xc>
 8004602:	f855 3b04 	ldr.w	r3, [r5], #4
 8004606:	4798      	blx	r3
 8004608:	3601      	adds	r6, #1
 800460a:	e7f2      	b.n	80045f2 <__libc_init_array+0x1e>
 800460c:	080056c8 	.word	0x080056c8
 8004610:	080056c8 	.word	0x080056c8
 8004614:	080056c8 	.word	0x080056c8
 8004618:	080056cc 	.word	0x080056cc

0800461c <memset>:
 800461c:	4402      	add	r2, r0
 800461e:	4603      	mov	r3, r0
 8004620:	4293      	cmp	r3, r2
 8004622:	d100      	bne.n	8004626 <memset+0xa>
 8004624:	4770      	bx	lr
 8004626:	f803 1b01 	strb.w	r1, [r3], #1
 800462a:	e7f9      	b.n	8004620 <memset+0x4>

0800462c <iprintf>:
 800462c:	b40f      	push	{r0, r1, r2, r3}
 800462e:	4b0a      	ldr	r3, [pc, #40]	; (8004658 <iprintf+0x2c>)
 8004630:	b513      	push	{r0, r1, r4, lr}
 8004632:	681c      	ldr	r4, [r3, #0]
 8004634:	b124      	cbz	r4, 8004640 <iprintf+0x14>
 8004636:	69a3      	ldr	r3, [r4, #24]
 8004638:	b913      	cbnz	r3, 8004640 <iprintf+0x14>
 800463a:	4620      	mov	r0, r4
 800463c:	f000 fa5e 	bl	8004afc <__sinit>
 8004640:	ab05      	add	r3, sp, #20
 8004642:	9a04      	ldr	r2, [sp, #16]
 8004644:	68a1      	ldr	r1, [r4, #8]
 8004646:	9301      	str	r3, [sp, #4]
 8004648:	4620      	mov	r0, r4
 800464a:	f000 fc2f 	bl	8004eac <_vfiprintf_r>
 800464e:	b002      	add	sp, #8
 8004650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004654:	b004      	add	sp, #16
 8004656:	4770      	bx	lr
 8004658:	2000000c 	.word	0x2000000c

0800465c <_puts_r>:
 800465c:	b570      	push	{r4, r5, r6, lr}
 800465e:	460e      	mov	r6, r1
 8004660:	4605      	mov	r5, r0
 8004662:	b118      	cbz	r0, 800466c <_puts_r+0x10>
 8004664:	6983      	ldr	r3, [r0, #24]
 8004666:	b90b      	cbnz	r3, 800466c <_puts_r+0x10>
 8004668:	f000 fa48 	bl	8004afc <__sinit>
 800466c:	69ab      	ldr	r3, [r5, #24]
 800466e:	68ac      	ldr	r4, [r5, #8]
 8004670:	b913      	cbnz	r3, 8004678 <_puts_r+0x1c>
 8004672:	4628      	mov	r0, r5
 8004674:	f000 fa42 	bl	8004afc <__sinit>
 8004678:	4b2c      	ldr	r3, [pc, #176]	; (800472c <_puts_r+0xd0>)
 800467a:	429c      	cmp	r4, r3
 800467c:	d120      	bne.n	80046c0 <_puts_r+0x64>
 800467e:	686c      	ldr	r4, [r5, #4]
 8004680:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004682:	07db      	lsls	r3, r3, #31
 8004684:	d405      	bmi.n	8004692 <_puts_r+0x36>
 8004686:	89a3      	ldrh	r3, [r4, #12]
 8004688:	0598      	lsls	r0, r3, #22
 800468a:	d402      	bmi.n	8004692 <_puts_r+0x36>
 800468c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800468e:	f000 fad3 	bl	8004c38 <__retarget_lock_acquire_recursive>
 8004692:	89a3      	ldrh	r3, [r4, #12]
 8004694:	0719      	lsls	r1, r3, #28
 8004696:	d51d      	bpl.n	80046d4 <_puts_r+0x78>
 8004698:	6923      	ldr	r3, [r4, #16]
 800469a:	b1db      	cbz	r3, 80046d4 <_puts_r+0x78>
 800469c:	3e01      	subs	r6, #1
 800469e:	68a3      	ldr	r3, [r4, #8]
 80046a0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80046a4:	3b01      	subs	r3, #1
 80046a6:	60a3      	str	r3, [r4, #8]
 80046a8:	bb39      	cbnz	r1, 80046fa <_puts_r+0x9e>
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	da38      	bge.n	8004720 <_puts_r+0xc4>
 80046ae:	4622      	mov	r2, r4
 80046b0:	210a      	movs	r1, #10
 80046b2:	4628      	mov	r0, r5
 80046b4:	f000 f848 	bl	8004748 <__swbuf_r>
 80046b8:	3001      	adds	r0, #1
 80046ba:	d011      	beq.n	80046e0 <_puts_r+0x84>
 80046bc:	250a      	movs	r5, #10
 80046be:	e011      	b.n	80046e4 <_puts_r+0x88>
 80046c0:	4b1b      	ldr	r3, [pc, #108]	; (8004730 <_puts_r+0xd4>)
 80046c2:	429c      	cmp	r4, r3
 80046c4:	d101      	bne.n	80046ca <_puts_r+0x6e>
 80046c6:	68ac      	ldr	r4, [r5, #8]
 80046c8:	e7da      	b.n	8004680 <_puts_r+0x24>
 80046ca:	4b1a      	ldr	r3, [pc, #104]	; (8004734 <_puts_r+0xd8>)
 80046cc:	429c      	cmp	r4, r3
 80046ce:	bf08      	it	eq
 80046d0:	68ec      	ldreq	r4, [r5, #12]
 80046d2:	e7d5      	b.n	8004680 <_puts_r+0x24>
 80046d4:	4621      	mov	r1, r4
 80046d6:	4628      	mov	r0, r5
 80046d8:	f000 f888 	bl	80047ec <__swsetup_r>
 80046dc:	2800      	cmp	r0, #0
 80046de:	d0dd      	beq.n	800469c <_puts_r+0x40>
 80046e0:	f04f 35ff 	mov.w	r5, #4294967295
 80046e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80046e6:	07da      	lsls	r2, r3, #31
 80046e8:	d405      	bmi.n	80046f6 <_puts_r+0x9a>
 80046ea:	89a3      	ldrh	r3, [r4, #12]
 80046ec:	059b      	lsls	r3, r3, #22
 80046ee:	d402      	bmi.n	80046f6 <_puts_r+0x9a>
 80046f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80046f2:	f000 faa2 	bl	8004c3a <__retarget_lock_release_recursive>
 80046f6:	4628      	mov	r0, r5
 80046f8:	bd70      	pop	{r4, r5, r6, pc}
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	da04      	bge.n	8004708 <_puts_r+0xac>
 80046fe:	69a2      	ldr	r2, [r4, #24]
 8004700:	429a      	cmp	r2, r3
 8004702:	dc06      	bgt.n	8004712 <_puts_r+0xb6>
 8004704:	290a      	cmp	r1, #10
 8004706:	d004      	beq.n	8004712 <_puts_r+0xb6>
 8004708:	6823      	ldr	r3, [r4, #0]
 800470a:	1c5a      	adds	r2, r3, #1
 800470c:	6022      	str	r2, [r4, #0]
 800470e:	7019      	strb	r1, [r3, #0]
 8004710:	e7c5      	b.n	800469e <_puts_r+0x42>
 8004712:	4622      	mov	r2, r4
 8004714:	4628      	mov	r0, r5
 8004716:	f000 f817 	bl	8004748 <__swbuf_r>
 800471a:	3001      	adds	r0, #1
 800471c:	d1bf      	bne.n	800469e <_puts_r+0x42>
 800471e:	e7df      	b.n	80046e0 <_puts_r+0x84>
 8004720:	6823      	ldr	r3, [r4, #0]
 8004722:	250a      	movs	r5, #10
 8004724:	1c5a      	adds	r2, r3, #1
 8004726:	6022      	str	r2, [r4, #0]
 8004728:	701d      	strb	r5, [r3, #0]
 800472a:	e7db      	b.n	80046e4 <_puts_r+0x88>
 800472c:	0800564c 	.word	0x0800564c
 8004730:	0800566c 	.word	0x0800566c
 8004734:	0800562c 	.word	0x0800562c

08004738 <puts>:
 8004738:	4b02      	ldr	r3, [pc, #8]	; (8004744 <puts+0xc>)
 800473a:	4601      	mov	r1, r0
 800473c:	6818      	ldr	r0, [r3, #0]
 800473e:	f7ff bf8d 	b.w	800465c <_puts_r>
 8004742:	bf00      	nop
 8004744:	2000000c 	.word	0x2000000c

08004748 <__swbuf_r>:
 8004748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800474a:	460e      	mov	r6, r1
 800474c:	4614      	mov	r4, r2
 800474e:	4605      	mov	r5, r0
 8004750:	b118      	cbz	r0, 800475a <__swbuf_r+0x12>
 8004752:	6983      	ldr	r3, [r0, #24]
 8004754:	b90b      	cbnz	r3, 800475a <__swbuf_r+0x12>
 8004756:	f000 f9d1 	bl	8004afc <__sinit>
 800475a:	4b21      	ldr	r3, [pc, #132]	; (80047e0 <__swbuf_r+0x98>)
 800475c:	429c      	cmp	r4, r3
 800475e:	d12b      	bne.n	80047b8 <__swbuf_r+0x70>
 8004760:	686c      	ldr	r4, [r5, #4]
 8004762:	69a3      	ldr	r3, [r4, #24]
 8004764:	60a3      	str	r3, [r4, #8]
 8004766:	89a3      	ldrh	r3, [r4, #12]
 8004768:	071a      	lsls	r2, r3, #28
 800476a:	d52f      	bpl.n	80047cc <__swbuf_r+0x84>
 800476c:	6923      	ldr	r3, [r4, #16]
 800476e:	b36b      	cbz	r3, 80047cc <__swbuf_r+0x84>
 8004770:	6923      	ldr	r3, [r4, #16]
 8004772:	6820      	ldr	r0, [r4, #0]
 8004774:	1ac0      	subs	r0, r0, r3
 8004776:	6963      	ldr	r3, [r4, #20]
 8004778:	b2f6      	uxtb	r6, r6
 800477a:	4283      	cmp	r3, r0
 800477c:	4637      	mov	r7, r6
 800477e:	dc04      	bgt.n	800478a <__swbuf_r+0x42>
 8004780:	4621      	mov	r1, r4
 8004782:	4628      	mov	r0, r5
 8004784:	f000 f926 	bl	80049d4 <_fflush_r>
 8004788:	bb30      	cbnz	r0, 80047d8 <__swbuf_r+0x90>
 800478a:	68a3      	ldr	r3, [r4, #8]
 800478c:	3b01      	subs	r3, #1
 800478e:	60a3      	str	r3, [r4, #8]
 8004790:	6823      	ldr	r3, [r4, #0]
 8004792:	1c5a      	adds	r2, r3, #1
 8004794:	6022      	str	r2, [r4, #0]
 8004796:	701e      	strb	r6, [r3, #0]
 8004798:	6963      	ldr	r3, [r4, #20]
 800479a:	3001      	adds	r0, #1
 800479c:	4283      	cmp	r3, r0
 800479e:	d004      	beq.n	80047aa <__swbuf_r+0x62>
 80047a0:	89a3      	ldrh	r3, [r4, #12]
 80047a2:	07db      	lsls	r3, r3, #31
 80047a4:	d506      	bpl.n	80047b4 <__swbuf_r+0x6c>
 80047a6:	2e0a      	cmp	r6, #10
 80047a8:	d104      	bne.n	80047b4 <__swbuf_r+0x6c>
 80047aa:	4621      	mov	r1, r4
 80047ac:	4628      	mov	r0, r5
 80047ae:	f000 f911 	bl	80049d4 <_fflush_r>
 80047b2:	b988      	cbnz	r0, 80047d8 <__swbuf_r+0x90>
 80047b4:	4638      	mov	r0, r7
 80047b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047b8:	4b0a      	ldr	r3, [pc, #40]	; (80047e4 <__swbuf_r+0x9c>)
 80047ba:	429c      	cmp	r4, r3
 80047bc:	d101      	bne.n	80047c2 <__swbuf_r+0x7a>
 80047be:	68ac      	ldr	r4, [r5, #8]
 80047c0:	e7cf      	b.n	8004762 <__swbuf_r+0x1a>
 80047c2:	4b09      	ldr	r3, [pc, #36]	; (80047e8 <__swbuf_r+0xa0>)
 80047c4:	429c      	cmp	r4, r3
 80047c6:	bf08      	it	eq
 80047c8:	68ec      	ldreq	r4, [r5, #12]
 80047ca:	e7ca      	b.n	8004762 <__swbuf_r+0x1a>
 80047cc:	4621      	mov	r1, r4
 80047ce:	4628      	mov	r0, r5
 80047d0:	f000 f80c 	bl	80047ec <__swsetup_r>
 80047d4:	2800      	cmp	r0, #0
 80047d6:	d0cb      	beq.n	8004770 <__swbuf_r+0x28>
 80047d8:	f04f 37ff 	mov.w	r7, #4294967295
 80047dc:	e7ea      	b.n	80047b4 <__swbuf_r+0x6c>
 80047de:	bf00      	nop
 80047e0:	0800564c 	.word	0x0800564c
 80047e4:	0800566c 	.word	0x0800566c
 80047e8:	0800562c 	.word	0x0800562c

080047ec <__swsetup_r>:
 80047ec:	4b32      	ldr	r3, [pc, #200]	; (80048b8 <__swsetup_r+0xcc>)
 80047ee:	b570      	push	{r4, r5, r6, lr}
 80047f0:	681d      	ldr	r5, [r3, #0]
 80047f2:	4606      	mov	r6, r0
 80047f4:	460c      	mov	r4, r1
 80047f6:	b125      	cbz	r5, 8004802 <__swsetup_r+0x16>
 80047f8:	69ab      	ldr	r3, [r5, #24]
 80047fa:	b913      	cbnz	r3, 8004802 <__swsetup_r+0x16>
 80047fc:	4628      	mov	r0, r5
 80047fe:	f000 f97d 	bl	8004afc <__sinit>
 8004802:	4b2e      	ldr	r3, [pc, #184]	; (80048bc <__swsetup_r+0xd0>)
 8004804:	429c      	cmp	r4, r3
 8004806:	d10f      	bne.n	8004828 <__swsetup_r+0x3c>
 8004808:	686c      	ldr	r4, [r5, #4]
 800480a:	89a3      	ldrh	r3, [r4, #12]
 800480c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004810:	0719      	lsls	r1, r3, #28
 8004812:	d42c      	bmi.n	800486e <__swsetup_r+0x82>
 8004814:	06dd      	lsls	r5, r3, #27
 8004816:	d411      	bmi.n	800483c <__swsetup_r+0x50>
 8004818:	2309      	movs	r3, #9
 800481a:	6033      	str	r3, [r6, #0]
 800481c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004820:	81a3      	strh	r3, [r4, #12]
 8004822:	f04f 30ff 	mov.w	r0, #4294967295
 8004826:	e03e      	b.n	80048a6 <__swsetup_r+0xba>
 8004828:	4b25      	ldr	r3, [pc, #148]	; (80048c0 <__swsetup_r+0xd4>)
 800482a:	429c      	cmp	r4, r3
 800482c:	d101      	bne.n	8004832 <__swsetup_r+0x46>
 800482e:	68ac      	ldr	r4, [r5, #8]
 8004830:	e7eb      	b.n	800480a <__swsetup_r+0x1e>
 8004832:	4b24      	ldr	r3, [pc, #144]	; (80048c4 <__swsetup_r+0xd8>)
 8004834:	429c      	cmp	r4, r3
 8004836:	bf08      	it	eq
 8004838:	68ec      	ldreq	r4, [r5, #12]
 800483a:	e7e6      	b.n	800480a <__swsetup_r+0x1e>
 800483c:	0758      	lsls	r0, r3, #29
 800483e:	d512      	bpl.n	8004866 <__swsetup_r+0x7a>
 8004840:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004842:	b141      	cbz	r1, 8004856 <__swsetup_r+0x6a>
 8004844:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004848:	4299      	cmp	r1, r3
 800484a:	d002      	beq.n	8004852 <__swsetup_r+0x66>
 800484c:	4630      	mov	r0, r6
 800484e:	f000 fa59 	bl	8004d04 <_free_r>
 8004852:	2300      	movs	r3, #0
 8004854:	6363      	str	r3, [r4, #52]	; 0x34
 8004856:	89a3      	ldrh	r3, [r4, #12]
 8004858:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800485c:	81a3      	strh	r3, [r4, #12]
 800485e:	2300      	movs	r3, #0
 8004860:	6063      	str	r3, [r4, #4]
 8004862:	6923      	ldr	r3, [r4, #16]
 8004864:	6023      	str	r3, [r4, #0]
 8004866:	89a3      	ldrh	r3, [r4, #12]
 8004868:	f043 0308 	orr.w	r3, r3, #8
 800486c:	81a3      	strh	r3, [r4, #12]
 800486e:	6923      	ldr	r3, [r4, #16]
 8004870:	b94b      	cbnz	r3, 8004886 <__swsetup_r+0x9a>
 8004872:	89a3      	ldrh	r3, [r4, #12]
 8004874:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800487c:	d003      	beq.n	8004886 <__swsetup_r+0x9a>
 800487e:	4621      	mov	r1, r4
 8004880:	4630      	mov	r0, r6
 8004882:	f000 f9ff 	bl	8004c84 <__smakebuf_r>
 8004886:	89a0      	ldrh	r0, [r4, #12]
 8004888:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800488c:	f010 0301 	ands.w	r3, r0, #1
 8004890:	d00a      	beq.n	80048a8 <__swsetup_r+0xbc>
 8004892:	2300      	movs	r3, #0
 8004894:	60a3      	str	r3, [r4, #8]
 8004896:	6963      	ldr	r3, [r4, #20]
 8004898:	425b      	negs	r3, r3
 800489a:	61a3      	str	r3, [r4, #24]
 800489c:	6923      	ldr	r3, [r4, #16]
 800489e:	b943      	cbnz	r3, 80048b2 <__swsetup_r+0xc6>
 80048a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80048a4:	d1ba      	bne.n	800481c <__swsetup_r+0x30>
 80048a6:	bd70      	pop	{r4, r5, r6, pc}
 80048a8:	0781      	lsls	r1, r0, #30
 80048aa:	bf58      	it	pl
 80048ac:	6963      	ldrpl	r3, [r4, #20]
 80048ae:	60a3      	str	r3, [r4, #8]
 80048b0:	e7f4      	b.n	800489c <__swsetup_r+0xb0>
 80048b2:	2000      	movs	r0, #0
 80048b4:	e7f7      	b.n	80048a6 <__swsetup_r+0xba>
 80048b6:	bf00      	nop
 80048b8:	2000000c 	.word	0x2000000c
 80048bc:	0800564c 	.word	0x0800564c
 80048c0:	0800566c 	.word	0x0800566c
 80048c4:	0800562c 	.word	0x0800562c

080048c8 <__sflush_r>:
 80048c8:	898a      	ldrh	r2, [r1, #12]
 80048ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048ce:	4605      	mov	r5, r0
 80048d0:	0710      	lsls	r0, r2, #28
 80048d2:	460c      	mov	r4, r1
 80048d4:	d458      	bmi.n	8004988 <__sflush_r+0xc0>
 80048d6:	684b      	ldr	r3, [r1, #4]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	dc05      	bgt.n	80048e8 <__sflush_r+0x20>
 80048dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80048de:	2b00      	cmp	r3, #0
 80048e0:	dc02      	bgt.n	80048e8 <__sflush_r+0x20>
 80048e2:	2000      	movs	r0, #0
 80048e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048ea:	2e00      	cmp	r6, #0
 80048ec:	d0f9      	beq.n	80048e2 <__sflush_r+0x1a>
 80048ee:	2300      	movs	r3, #0
 80048f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80048f4:	682f      	ldr	r7, [r5, #0]
 80048f6:	602b      	str	r3, [r5, #0]
 80048f8:	d032      	beq.n	8004960 <__sflush_r+0x98>
 80048fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80048fc:	89a3      	ldrh	r3, [r4, #12]
 80048fe:	075a      	lsls	r2, r3, #29
 8004900:	d505      	bpl.n	800490e <__sflush_r+0x46>
 8004902:	6863      	ldr	r3, [r4, #4]
 8004904:	1ac0      	subs	r0, r0, r3
 8004906:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004908:	b10b      	cbz	r3, 800490e <__sflush_r+0x46>
 800490a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800490c:	1ac0      	subs	r0, r0, r3
 800490e:	2300      	movs	r3, #0
 8004910:	4602      	mov	r2, r0
 8004912:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004914:	6a21      	ldr	r1, [r4, #32]
 8004916:	4628      	mov	r0, r5
 8004918:	47b0      	blx	r6
 800491a:	1c43      	adds	r3, r0, #1
 800491c:	89a3      	ldrh	r3, [r4, #12]
 800491e:	d106      	bne.n	800492e <__sflush_r+0x66>
 8004920:	6829      	ldr	r1, [r5, #0]
 8004922:	291d      	cmp	r1, #29
 8004924:	d82c      	bhi.n	8004980 <__sflush_r+0xb8>
 8004926:	4a2a      	ldr	r2, [pc, #168]	; (80049d0 <__sflush_r+0x108>)
 8004928:	40ca      	lsrs	r2, r1
 800492a:	07d6      	lsls	r6, r2, #31
 800492c:	d528      	bpl.n	8004980 <__sflush_r+0xb8>
 800492e:	2200      	movs	r2, #0
 8004930:	6062      	str	r2, [r4, #4]
 8004932:	04d9      	lsls	r1, r3, #19
 8004934:	6922      	ldr	r2, [r4, #16]
 8004936:	6022      	str	r2, [r4, #0]
 8004938:	d504      	bpl.n	8004944 <__sflush_r+0x7c>
 800493a:	1c42      	adds	r2, r0, #1
 800493c:	d101      	bne.n	8004942 <__sflush_r+0x7a>
 800493e:	682b      	ldr	r3, [r5, #0]
 8004940:	b903      	cbnz	r3, 8004944 <__sflush_r+0x7c>
 8004942:	6560      	str	r0, [r4, #84]	; 0x54
 8004944:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004946:	602f      	str	r7, [r5, #0]
 8004948:	2900      	cmp	r1, #0
 800494a:	d0ca      	beq.n	80048e2 <__sflush_r+0x1a>
 800494c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004950:	4299      	cmp	r1, r3
 8004952:	d002      	beq.n	800495a <__sflush_r+0x92>
 8004954:	4628      	mov	r0, r5
 8004956:	f000 f9d5 	bl	8004d04 <_free_r>
 800495a:	2000      	movs	r0, #0
 800495c:	6360      	str	r0, [r4, #52]	; 0x34
 800495e:	e7c1      	b.n	80048e4 <__sflush_r+0x1c>
 8004960:	6a21      	ldr	r1, [r4, #32]
 8004962:	2301      	movs	r3, #1
 8004964:	4628      	mov	r0, r5
 8004966:	47b0      	blx	r6
 8004968:	1c41      	adds	r1, r0, #1
 800496a:	d1c7      	bne.n	80048fc <__sflush_r+0x34>
 800496c:	682b      	ldr	r3, [r5, #0]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d0c4      	beq.n	80048fc <__sflush_r+0x34>
 8004972:	2b1d      	cmp	r3, #29
 8004974:	d001      	beq.n	800497a <__sflush_r+0xb2>
 8004976:	2b16      	cmp	r3, #22
 8004978:	d101      	bne.n	800497e <__sflush_r+0xb6>
 800497a:	602f      	str	r7, [r5, #0]
 800497c:	e7b1      	b.n	80048e2 <__sflush_r+0x1a>
 800497e:	89a3      	ldrh	r3, [r4, #12]
 8004980:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004984:	81a3      	strh	r3, [r4, #12]
 8004986:	e7ad      	b.n	80048e4 <__sflush_r+0x1c>
 8004988:	690f      	ldr	r7, [r1, #16]
 800498a:	2f00      	cmp	r7, #0
 800498c:	d0a9      	beq.n	80048e2 <__sflush_r+0x1a>
 800498e:	0793      	lsls	r3, r2, #30
 8004990:	680e      	ldr	r6, [r1, #0]
 8004992:	bf08      	it	eq
 8004994:	694b      	ldreq	r3, [r1, #20]
 8004996:	600f      	str	r7, [r1, #0]
 8004998:	bf18      	it	ne
 800499a:	2300      	movne	r3, #0
 800499c:	eba6 0807 	sub.w	r8, r6, r7
 80049a0:	608b      	str	r3, [r1, #8]
 80049a2:	f1b8 0f00 	cmp.w	r8, #0
 80049a6:	dd9c      	ble.n	80048e2 <__sflush_r+0x1a>
 80049a8:	6a21      	ldr	r1, [r4, #32]
 80049aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80049ac:	4643      	mov	r3, r8
 80049ae:	463a      	mov	r2, r7
 80049b0:	4628      	mov	r0, r5
 80049b2:	47b0      	blx	r6
 80049b4:	2800      	cmp	r0, #0
 80049b6:	dc06      	bgt.n	80049c6 <__sflush_r+0xfe>
 80049b8:	89a3      	ldrh	r3, [r4, #12]
 80049ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049be:	81a3      	strh	r3, [r4, #12]
 80049c0:	f04f 30ff 	mov.w	r0, #4294967295
 80049c4:	e78e      	b.n	80048e4 <__sflush_r+0x1c>
 80049c6:	4407      	add	r7, r0
 80049c8:	eba8 0800 	sub.w	r8, r8, r0
 80049cc:	e7e9      	b.n	80049a2 <__sflush_r+0xda>
 80049ce:	bf00      	nop
 80049d0:	20400001 	.word	0x20400001

080049d4 <_fflush_r>:
 80049d4:	b538      	push	{r3, r4, r5, lr}
 80049d6:	690b      	ldr	r3, [r1, #16]
 80049d8:	4605      	mov	r5, r0
 80049da:	460c      	mov	r4, r1
 80049dc:	b913      	cbnz	r3, 80049e4 <_fflush_r+0x10>
 80049de:	2500      	movs	r5, #0
 80049e0:	4628      	mov	r0, r5
 80049e2:	bd38      	pop	{r3, r4, r5, pc}
 80049e4:	b118      	cbz	r0, 80049ee <_fflush_r+0x1a>
 80049e6:	6983      	ldr	r3, [r0, #24]
 80049e8:	b90b      	cbnz	r3, 80049ee <_fflush_r+0x1a>
 80049ea:	f000 f887 	bl	8004afc <__sinit>
 80049ee:	4b14      	ldr	r3, [pc, #80]	; (8004a40 <_fflush_r+0x6c>)
 80049f0:	429c      	cmp	r4, r3
 80049f2:	d11b      	bne.n	8004a2c <_fflush_r+0x58>
 80049f4:	686c      	ldr	r4, [r5, #4]
 80049f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d0ef      	beq.n	80049de <_fflush_r+0xa>
 80049fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004a00:	07d0      	lsls	r0, r2, #31
 8004a02:	d404      	bmi.n	8004a0e <_fflush_r+0x3a>
 8004a04:	0599      	lsls	r1, r3, #22
 8004a06:	d402      	bmi.n	8004a0e <_fflush_r+0x3a>
 8004a08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a0a:	f000 f915 	bl	8004c38 <__retarget_lock_acquire_recursive>
 8004a0e:	4628      	mov	r0, r5
 8004a10:	4621      	mov	r1, r4
 8004a12:	f7ff ff59 	bl	80048c8 <__sflush_r>
 8004a16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a18:	07da      	lsls	r2, r3, #31
 8004a1a:	4605      	mov	r5, r0
 8004a1c:	d4e0      	bmi.n	80049e0 <_fflush_r+0xc>
 8004a1e:	89a3      	ldrh	r3, [r4, #12]
 8004a20:	059b      	lsls	r3, r3, #22
 8004a22:	d4dd      	bmi.n	80049e0 <_fflush_r+0xc>
 8004a24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a26:	f000 f908 	bl	8004c3a <__retarget_lock_release_recursive>
 8004a2a:	e7d9      	b.n	80049e0 <_fflush_r+0xc>
 8004a2c:	4b05      	ldr	r3, [pc, #20]	; (8004a44 <_fflush_r+0x70>)
 8004a2e:	429c      	cmp	r4, r3
 8004a30:	d101      	bne.n	8004a36 <_fflush_r+0x62>
 8004a32:	68ac      	ldr	r4, [r5, #8]
 8004a34:	e7df      	b.n	80049f6 <_fflush_r+0x22>
 8004a36:	4b04      	ldr	r3, [pc, #16]	; (8004a48 <_fflush_r+0x74>)
 8004a38:	429c      	cmp	r4, r3
 8004a3a:	bf08      	it	eq
 8004a3c:	68ec      	ldreq	r4, [r5, #12]
 8004a3e:	e7da      	b.n	80049f6 <_fflush_r+0x22>
 8004a40:	0800564c 	.word	0x0800564c
 8004a44:	0800566c 	.word	0x0800566c
 8004a48:	0800562c 	.word	0x0800562c

08004a4c <std>:
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	b510      	push	{r4, lr}
 8004a50:	4604      	mov	r4, r0
 8004a52:	e9c0 3300 	strd	r3, r3, [r0]
 8004a56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a5a:	6083      	str	r3, [r0, #8]
 8004a5c:	8181      	strh	r1, [r0, #12]
 8004a5e:	6643      	str	r3, [r0, #100]	; 0x64
 8004a60:	81c2      	strh	r2, [r0, #14]
 8004a62:	6183      	str	r3, [r0, #24]
 8004a64:	4619      	mov	r1, r3
 8004a66:	2208      	movs	r2, #8
 8004a68:	305c      	adds	r0, #92	; 0x5c
 8004a6a:	f7ff fdd7 	bl	800461c <memset>
 8004a6e:	4b05      	ldr	r3, [pc, #20]	; (8004a84 <std+0x38>)
 8004a70:	6263      	str	r3, [r4, #36]	; 0x24
 8004a72:	4b05      	ldr	r3, [pc, #20]	; (8004a88 <std+0x3c>)
 8004a74:	62a3      	str	r3, [r4, #40]	; 0x28
 8004a76:	4b05      	ldr	r3, [pc, #20]	; (8004a8c <std+0x40>)
 8004a78:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a7a:	4b05      	ldr	r3, [pc, #20]	; (8004a90 <std+0x44>)
 8004a7c:	6224      	str	r4, [r4, #32]
 8004a7e:	6323      	str	r3, [r4, #48]	; 0x30
 8004a80:	bd10      	pop	{r4, pc}
 8004a82:	bf00      	nop
 8004a84:	08005455 	.word	0x08005455
 8004a88:	08005477 	.word	0x08005477
 8004a8c:	080054af 	.word	0x080054af
 8004a90:	080054d3 	.word	0x080054d3

08004a94 <_cleanup_r>:
 8004a94:	4901      	ldr	r1, [pc, #4]	; (8004a9c <_cleanup_r+0x8>)
 8004a96:	f000 b8af 	b.w	8004bf8 <_fwalk_reent>
 8004a9a:	bf00      	nop
 8004a9c:	080049d5 	.word	0x080049d5

08004aa0 <__sfmoreglue>:
 8004aa0:	b570      	push	{r4, r5, r6, lr}
 8004aa2:	1e4a      	subs	r2, r1, #1
 8004aa4:	2568      	movs	r5, #104	; 0x68
 8004aa6:	4355      	muls	r5, r2
 8004aa8:	460e      	mov	r6, r1
 8004aaa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004aae:	f000 f979 	bl	8004da4 <_malloc_r>
 8004ab2:	4604      	mov	r4, r0
 8004ab4:	b140      	cbz	r0, 8004ac8 <__sfmoreglue+0x28>
 8004ab6:	2100      	movs	r1, #0
 8004ab8:	e9c0 1600 	strd	r1, r6, [r0]
 8004abc:	300c      	adds	r0, #12
 8004abe:	60a0      	str	r0, [r4, #8]
 8004ac0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004ac4:	f7ff fdaa 	bl	800461c <memset>
 8004ac8:	4620      	mov	r0, r4
 8004aca:	bd70      	pop	{r4, r5, r6, pc}

08004acc <__sfp_lock_acquire>:
 8004acc:	4801      	ldr	r0, [pc, #4]	; (8004ad4 <__sfp_lock_acquire+0x8>)
 8004ace:	f000 b8b3 	b.w	8004c38 <__retarget_lock_acquire_recursive>
 8004ad2:	bf00      	nop
 8004ad4:	200002cc 	.word	0x200002cc

08004ad8 <__sfp_lock_release>:
 8004ad8:	4801      	ldr	r0, [pc, #4]	; (8004ae0 <__sfp_lock_release+0x8>)
 8004ada:	f000 b8ae 	b.w	8004c3a <__retarget_lock_release_recursive>
 8004ade:	bf00      	nop
 8004ae0:	200002cc 	.word	0x200002cc

08004ae4 <__sinit_lock_acquire>:
 8004ae4:	4801      	ldr	r0, [pc, #4]	; (8004aec <__sinit_lock_acquire+0x8>)
 8004ae6:	f000 b8a7 	b.w	8004c38 <__retarget_lock_acquire_recursive>
 8004aea:	bf00      	nop
 8004aec:	200002c7 	.word	0x200002c7

08004af0 <__sinit_lock_release>:
 8004af0:	4801      	ldr	r0, [pc, #4]	; (8004af8 <__sinit_lock_release+0x8>)
 8004af2:	f000 b8a2 	b.w	8004c3a <__retarget_lock_release_recursive>
 8004af6:	bf00      	nop
 8004af8:	200002c7 	.word	0x200002c7

08004afc <__sinit>:
 8004afc:	b510      	push	{r4, lr}
 8004afe:	4604      	mov	r4, r0
 8004b00:	f7ff fff0 	bl	8004ae4 <__sinit_lock_acquire>
 8004b04:	69a3      	ldr	r3, [r4, #24]
 8004b06:	b11b      	cbz	r3, 8004b10 <__sinit+0x14>
 8004b08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b0c:	f7ff bff0 	b.w	8004af0 <__sinit_lock_release>
 8004b10:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004b14:	6523      	str	r3, [r4, #80]	; 0x50
 8004b16:	4b13      	ldr	r3, [pc, #76]	; (8004b64 <__sinit+0x68>)
 8004b18:	4a13      	ldr	r2, [pc, #76]	; (8004b68 <__sinit+0x6c>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	62a2      	str	r2, [r4, #40]	; 0x28
 8004b1e:	42a3      	cmp	r3, r4
 8004b20:	bf04      	itt	eq
 8004b22:	2301      	moveq	r3, #1
 8004b24:	61a3      	streq	r3, [r4, #24]
 8004b26:	4620      	mov	r0, r4
 8004b28:	f000 f820 	bl	8004b6c <__sfp>
 8004b2c:	6060      	str	r0, [r4, #4]
 8004b2e:	4620      	mov	r0, r4
 8004b30:	f000 f81c 	bl	8004b6c <__sfp>
 8004b34:	60a0      	str	r0, [r4, #8]
 8004b36:	4620      	mov	r0, r4
 8004b38:	f000 f818 	bl	8004b6c <__sfp>
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	60e0      	str	r0, [r4, #12]
 8004b40:	2104      	movs	r1, #4
 8004b42:	6860      	ldr	r0, [r4, #4]
 8004b44:	f7ff ff82 	bl	8004a4c <std>
 8004b48:	68a0      	ldr	r0, [r4, #8]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	2109      	movs	r1, #9
 8004b4e:	f7ff ff7d 	bl	8004a4c <std>
 8004b52:	68e0      	ldr	r0, [r4, #12]
 8004b54:	2202      	movs	r2, #2
 8004b56:	2112      	movs	r1, #18
 8004b58:	f7ff ff78 	bl	8004a4c <std>
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	61a3      	str	r3, [r4, #24]
 8004b60:	e7d2      	b.n	8004b08 <__sinit+0xc>
 8004b62:	bf00      	nop
 8004b64:	08005628 	.word	0x08005628
 8004b68:	08004a95 	.word	0x08004a95

08004b6c <__sfp>:
 8004b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b6e:	4607      	mov	r7, r0
 8004b70:	f7ff ffac 	bl	8004acc <__sfp_lock_acquire>
 8004b74:	4b1e      	ldr	r3, [pc, #120]	; (8004bf0 <__sfp+0x84>)
 8004b76:	681e      	ldr	r6, [r3, #0]
 8004b78:	69b3      	ldr	r3, [r6, #24]
 8004b7a:	b913      	cbnz	r3, 8004b82 <__sfp+0x16>
 8004b7c:	4630      	mov	r0, r6
 8004b7e:	f7ff ffbd 	bl	8004afc <__sinit>
 8004b82:	3648      	adds	r6, #72	; 0x48
 8004b84:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	d503      	bpl.n	8004b94 <__sfp+0x28>
 8004b8c:	6833      	ldr	r3, [r6, #0]
 8004b8e:	b30b      	cbz	r3, 8004bd4 <__sfp+0x68>
 8004b90:	6836      	ldr	r6, [r6, #0]
 8004b92:	e7f7      	b.n	8004b84 <__sfp+0x18>
 8004b94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004b98:	b9d5      	cbnz	r5, 8004bd0 <__sfp+0x64>
 8004b9a:	4b16      	ldr	r3, [pc, #88]	; (8004bf4 <__sfp+0x88>)
 8004b9c:	60e3      	str	r3, [r4, #12]
 8004b9e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004ba2:	6665      	str	r5, [r4, #100]	; 0x64
 8004ba4:	f000 f847 	bl	8004c36 <__retarget_lock_init_recursive>
 8004ba8:	f7ff ff96 	bl	8004ad8 <__sfp_lock_release>
 8004bac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004bb0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004bb4:	6025      	str	r5, [r4, #0]
 8004bb6:	61a5      	str	r5, [r4, #24]
 8004bb8:	2208      	movs	r2, #8
 8004bba:	4629      	mov	r1, r5
 8004bbc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004bc0:	f7ff fd2c 	bl	800461c <memset>
 8004bc4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004bc8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004bcc:	4620      	mov	r0, r4
 8004bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bd0:	3468      	adds	r4, #104	; 0x68
 8004bd2:	e7d9      	b.n	8004b88 <__sfp+0x1c>
 8004bd4:	2104      	movs	r1, #4
 8004bd6:	4638      	mov	r0, r7
 8004bd8:	f7ff ff62 	bl	8004aa0 <__sfmoreglue>
 8004bdc:	4604      	mov	r4, r0
 8004bde:	6030      	str	r0, [r6, #0]
 8004be0:	2800      	cmp	r0, #0
 8004be2:	d1d5      	bne.n	8004b90 <__sfp+0x24>
 8004be4:	f7ff ff78 	bl	8004ad8 <__sfp_lock_release>
 8004be8:	230c      	movs	r3, #12
 8004bea:	603b      	str	r3, [r7, #0]
 8004bec:	e7ee      	b.n	8004bcc <__sfp+0x60>
 8004bee:	bf00      	nop
 8004bf0:	08005628 	.word	0x08005628
 8004bf4:	ffff0001 	.word	0xffff0001

08004bf8 <_fwalk_reent>:
 8004bf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bfc:	4606      	mov	r6, r0
 8004bfe:	4688      	mov	r8, r1
 8004c00:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004c04:	2700      	movs	r7, #0
 8004c06:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004c0a:	f1b9 0901 	subs.w	r9, r9, #1
 8004c0e:	d505      	bpl.n	8004c1c <_fwalk_reent+0x24>
 8004c10:	6824      	ldr	r4, [r4, #0]
 8004c12:	2c00      	cmp	r4, #0
 8004c14:	d1f7      	bne.n	8004c06 <_fwalk_reent+0xe>
 8004c16:	4638      	mov	r0, r7
 8004c18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c1c:	89ab      	ldrh	r3, [r5, #12]
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d907      	bls.n	8004c32 <_fwalk_reent+0x3a>
 8004c22:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c26:	3301      	adds	r3, #1
 8004c28:	d003      	beq.n	8004c32 <_fwalk_reent+0x3a>
 8004c2a:	4629      	mov	r1, r5
 8004c2c:	4630      	mov	r0, r6
 8004c2e:	47c0      	blx	r8
 8004c30:	4307      	orrs	r7, r0
 8004c32:	3568      	adds	r5, #104	; 0x68
 8004c34:	e7e9      	b.n	8004c0a <_fwalk_reent+0x12>

08004c36 <__retarget_lock_init_recursive>:
 8004c36:	4770      	bx	lr

08004c38 <__retarget_lock_acquire_recursive>:
 8004c38:	4770      	bx	lr

08004c3a <__retarget_lock_release_recursive>:
 8004c3a:	4770      	bx	lr

08004c3c <__swhatbuf_r>:
 8004c3c:	b570      	push	{r4, r5, r6, lr}
 8004c3e:	460e      	mov	r6, r1
 8004c40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c44:	2900      	cmp	r1, #0
 8004c46:	b096      	sub	sp, #88	; 0x58
 8004c48:	4614      	mov	r4, r2
 8004c4a:	461d      	mov	r5, r3
 8004c4c:	da07      	bge.n	8004c5e <__swhatbuf_r+0x22>
 8004c4e:	2300      	movs	r3, #0
 8004c50:	602b      	str	r3, [r5, #0]
 8004c52:	89b3      	ldrh	r3, [r6, #12]
 8004c54:	061a      	lsls	r2, r3, #24
 8004c56:	d410      	bmi.n	8004c7a <__swhatbuf_r+0x3e>
 8004c58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c5c:	e00e      	b.n	8004c7c <__swhatbuf_r+0x40>
 8004c5e:	466a      	mov	r2, sp
 8004c60:	f000 fc5e 	bl	8005520 <_fstat_r>
 8004c64:	2800      	cmp	r0, #0
 8004c66:	dbf2      	blt.n	8004c4e <__swhatbuf_r+0x12>
 8004c68:	9a01      	ldr	r2, [sp, #4]
 8004c6a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004c6e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004c72:	425a      	negs	r2, r3
 8004c74:	415a      	adcs	r2, r3
 8004c76:	602a      	str	r2, [r5, #0]
 8004c78:	e7ee      	b.n	8004c58 <__swhatbuf_r+0x1c>
 8004c7a:	2340      	movs	r3, #64	; 0x40
 8004c7c:	2000      	movs	r0, #0
 8004c7e:	6023      	str	r3, [r4, #0]
 8004c80:	b016      	add	sp, #88	; 0x58
 8004c82:	bd70      	pop	{r4, r5, r6, pc}

08004c84 <__smakebuf_r>:
 8004c84:	898b      	ldrh	r3, [r1, #12]
 8004c86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004c88:	079d      	lsls	r5, r3, #30
 8004c8a:	4606      	mov	r6, r0
 8004c8c:	460c      	mov	r4, r1
 8004c8e:	d507      	bpl.n	8004ca0 <__smakebuf_r+0x1c>
 8004c90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004c94:	6023      	str	r3, [r4, #0]
 8004c96:	6123      	str	r3, [r4, #16]
 8004c98:	2301      	movs	r3, #1
 8004c9a:	6163      	str	r3, [r4, #20]
 8004c9c:	b002      	add	sp, #8
 8004c9e:	bd70      	pop	{r4, r5, r6, pc}
 8004ca0:	ab01      	add	r3, sp, #4
 8004ca2:	466a      	mov	r2, sp
 8004ca4:	f7ff ffca 	bl	8004c3c <__swhatbuf_r>
 8004ca8:	9900      	ldr	r1, [sp, #0]
 8004caa:	4605      	mov	r5, r0
 8004cac:	4630      	mov	r0, r6
 8004cae:	f000 f879 	bl	8004da4 <_malloc_r>
 8004cb2:	b948      	cbnz	r0, 8004cc8 <__smakebuf_r+0x44>
 8004cb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cb8:	059a      	lsls	r2, r3, #22
 8004cba:	d4ef      	bmi.n	8004c9c <__smakebuf_r+0x18>
 8004cbc:	f023 0303 	bic.w	r3, r3, #3
 8004cc0:	f043 0302 	orr.w	r3, r3, #2
 8004cc4:	81a3      	strh	r3, [r4, #12]
 8004cc6:	e7e3      	b.n	8004c90 <__smakebuf_r+0xc>
 8004cc8:	4b0d      	ldr	r3, [pc, #52]	; (8004d00 <__smakebuf_r+0x7c>)
 8004cca:	62b3      	str	r3, [r6, #40]	; 0x28
 8004ccc:	89a3      	ldrh	r3, [r4, #12]
 8004cce:	6020      	str	r0, [r4, #0]
 8004cd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cd4:	81a3      	strh	r3, [r4, #12]
 8004cd6:	9b00      	ldr	r3, [sp, #0]
 8004cd8:	6163      	str	r3, [r4, #20]
 8004cda:	9b01      	ldr	r3, [sp, #4]
 8004cdc:	6120      	str	r0, [r4, #16]
 8004cde:	b15b      	cbz	r3, 8004cf8 <__smakebuf_r+0x74>
 8004ce0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ce4:	4630      	mov	r0, r6
 8004ce6:	f000 fc2d 	bl	8005544 <_isatty_r>
 8004cea:	b128      	cbz	r0, 8004cf8 <__smakebuf_r+0x74>
 8004cec:	89a3      	ldrh	r3, [r4, #12]
 8004cee:	f023 0303 	bic.w	r3, r3, #3
 8004cf2:	f043 0301 	orr.w	r3, r3, #1
 8004cf6:	81a3      	strh	r3, [r4, #12]
 8004cf8:	89a0      	ldrh	r0, [r4, #12]
 8004cfa:	4305      	orrs	r5, r0
 8004cfc:	81a5      	strh	r5, [r4, #12]
 8004cfe:	e7cd      	b.n	8004c9c <__smakebuf_r+0x18>
 8004d00:	08004a95 	.word	0x08004a95

08004d04 <_free_r>:
 8004d04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d06:	2900      	cmp	r1, #0
 8004d08:	d048      	beq.n	8004d9c <_free_r+0x98>
 8004d0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d0e:	9001      	str	r0, [sp, #4]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f1a1 0404 	sub.w	r4, r1, #4
 8004d16:	bfb8      	it	lt
 8004d18:	18e4      	addlt	r4, r4, r3
 8004d1a:	f000 fc35 	bl	8005588 <__malloc_lock>
 8004d1e:	4a20      	ldr	r2, [pc, #128]	; (8004da0 <_free_r+0x9c>)
 8004d20:	9801      	ldr	r0, [sp, #4]
 8004d22:	6813      	ldr	r3, [r2, #0]
 8004d24:	4615      	mov	r5, r2
 8004d26:	b933      	cbnz	r3, 8004d36 <_free_r+0x32>
 8004d28:	6063      	str	r3, [r4, #4]
 8004d2a:	6014      	str	r4, [r2, #0]
 8004d2c:	b003      	add	sp, #12
 8004d2e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d32:	f000 bc2f 	b.w	8005594 <__malloc_unlock>
 8004d36:	42a3      	cmp	r3, r4
 8004d38:	d90b      	bls.n	8004d52 <_free_r+0x4e>
 8004d3a:	6821      	ldr	r1, [r4, #0]
 8004d3c:	1862      	adds	r2, r4, r1
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	bf04      	itt	eq
 8004d42:	681a      	ldreq	r2, [r3, #0]
 8004d44:	685b      	ldreq	r3, [r3, #4]
 8004d46:	6063      	str	r3, [r4, #4]
 8004d48:	bf04      	itt	eq
 8004d4a:	1852      	addeq	r2, r2, r1
 8004d4c:	6022      	streq	r2, [r4, #0]
 8004d4e:	602c      	str	r4, [r5, #0]
 8004d50:	e7ec      	b.n	8004d2c <_free_r+0x28>
 8004d52:	461a      	mov	r2, r3
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	b10b      	cbz	r3, 8004d5c <_free_r+0x58>
 8004d58:	42a3      	cmp	r3, r4
 8004d5a:	d9fa      	bls.n	8004d52 <_free_r+0x4e>
 8004d5c:	6811      	ldr	r1, [r2, #0]
 8004d5e:	1855      	adds	r5, r2, r1
 8004d60:	42a5      	cmp	r5, r4
 8004d62:	d10b      	bne.n	8004d7c <_free_r+0x78>
 8004d64:	6824      	ldr	r4, [r4, #0]
 8004d66:	4421      	add	r1, r4
 8004d68:	1854      	adds	r4, r2, r1
 8004d6a:	42a3      	cmp	r3, r4
 8004d6c:	6011      	str	r1, [r2, #0]
 8004d6e:	d1dd      	bne.n	8004d2c <_free_r+0x28>
 8004d70:	681c      	ldr	r4, [r3, #0]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	6053      	str	r3, [r2, #4]
 8004d76:	4421      	add	r1, r4
 8004d78:	6011      	str	r1, [r2, #0]
 8004d7a:	e7d7      	b.n	8004d2c <_free_r+0x28>
 8004d7c:	d902      	bls.n	8004d84 <_free_r+0x80>
 8004d7e:	230c      	movs	r3, #12
 8004d80:	6003      	str	r3, [r0, #0]
 8004d82:	e7d3      	b.n	8004d2c <_free_r+0x28>
 8004d84:	6825      	ldr	r5, [r4, #0]
 8004d86:	1961      	adds	r1, r4, r5
 8004d88:	428b      	cmp	r3, r1
 8004d8a:	bf04      	itt	eq
 8004d8c:	6819      	ldreq	r1, [r3, #0]
 8004d8e:	685b      	ldreq	r3, [r3, #4]
 8004d90:	6063      	str	r3, [r4, #4]
 8004d92:	bf04      	itt	eq
 8004d94:	1949      	addeq	r1, r1, r5
 8004d96:	6021      	streq	r1, [r4, #0]
 8004d98:	6054      	str	r4, [r2, #4]
 8004d9a:	e7c7      	b.n	8004d2c <_free_r+0x28>
 8004d9c:	b003      	add	sp, #12
 8004d9e:	bd30      	pop	{r4, r5, pc}
 8004da0:	200001d4 	.word	0x200001d4

08004da4 <_malloc_r>:
 8004da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004da6:	1ccd      	adds	r5, r1, #3
 8004da8:	f025 0503 	bic.w	r5, r5, #3
 8004dac:	3508      	adds	r5, #8
 8004dae:	2d0c      	cmp	r5, #12
 8004db0:	bf38      	it	cc
 8004db2:	250c      	movcc	r5, #12
 8004db4:	2d00      	cmp	r5, #0
 8004db6:	4606      	mov	r6, r0
 8004db8:	db01      	blt.n	8004dbe <_malloc_r+0x1a>
 8004dba:	42a9      	cmp	r1, r5
 8004dbc:	d903      	bls.n	8004dc6 <_malloc_r+0x22>
 8004dbe:	230c      	movs	r3, #12
 8004dc0:	6033      	str	r3, [r6, #0]
 8004dc2:	2000      	movs	r0, #0
 8004dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004dc6:	f000 fbdf 	bl	8005588 <__malloc_lock>
 8004dca:	4921      	ldr	r1, [pc, #132]	; (8004e50 <_malloc_r+0xac>)
 8004dcc:	680a      	ldr	r2, [r1, #0]
 8004dce:	4614      	mov	r4, r2
 8004dd0:	b99c      	cbnz	r4, 8004dfa <_malloc_r+0x56>
 8004dd2:	4f20      	ldr	r7, [pc, #128]	; (8004e54 <_malloc_r+0xb0>)
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	b923      	cbnz	r3, 8004de2 <_malloc_r+0x3e>
 8004dd8:	4621      	mov	r1, r4
 8004dda:	4630      	mov	r0, r6
 8004ddc:	f000 fb2a 	bl	8005434 <_sbrk_r>
 8004de0:	6038      	str	r0, [r7, #0]
 8004de2:	4629      	mov	r1, r5
 8004de4:	4630      	mov	r0, r6
 8004de6:	f000 fb25 	bl	8005434 <_sbrk_r>
 8004dea:	1c43      	adds	r3, r0, #1
 8004dec:	d123      	bne.n	8004e36 <_malloc_r+0x92>
 8004dee:	230c      	movs	r3, #12
 8004df0:	6033      	str	r3, [r6, #0]
 8004df2:	4630      	mov	r0, r6
 8004df4:	f000 fbce 	bl	8005594 <__malloc_unlock>
 8004df8:	e7e3      	b.n	8004dc2 <_malloc_r+0x1e>
 8004dfa:	6823      	ldr	r3, [r4, #0]
 8004dfc:	1b5b      	subs	r3, r3, r5
 8004dfe:	d417      	bmi.n	8004e30 <_malloc_r+0x8c>
 8004e00:	2b0b      	cmp	r3, #11
 8004e02:	d903      	bls.n	8004e0c <_malloc_r+0x68>
 8004e04:	6023      	str	r3, [r4, #0]
 8004e06:	441c      	add	r4, r3
 8004e08:	6025      	str	r5, [r4, #0]
 8004e0a:	e004      	b.n	8004e16 <_malloc_r+0x72>
 8004e0c:	6863      	ldr	r3, [r4, #4]
 8004e0e:	42a2      	cmp	r2, r4
 8004e10:	bf0c      	ite	eq
 8004e12:	600b      	streq	r3, [r1, #0]
 8004e14:	6053      	strne	r3, [r2, #4]
 8004e16:	4630      	mov	r0, r6
 8004e18:	f000 fbbc 	bl	8005594 <__malloc_unlock>
 8004e1c:	f104 000b 	add.w	r0, r4, #11
 8004e20:	1d23      	adds	r3, r4, #4
 8004e22:	f020 0007 	bic.w	r0, r0, #7
 8004e26:	1ac2      	subs	r2, r0, r3
 8004e28:	d0cc      	beq.n	8004dc4 <_malloc_r+0x20>
 8004e2a:	1a1b      	subs	r3, r3, r0
 8004e2c:	50a3      	str	r3, [r4, r2]
 8004e2e:	e7c9      	b.n	8004dc4 <_malloc_r+0x20>
 8004e30:	4622      	mov	r2, r4
 8004e32:	6864      	ldr	r4, [r4, #4]
 8004e34:	e7cc      	b.n	8004dd0 <_malloc_r+0x2c>
 8004e36:	1cc4      	adds	r4, r0, #3
 8004e38:	f024 0403 	bic.w	r4, r4, #3
 8004e3c:	42a0      	cmp	r0, r4
 8004e3e:	d0e3      	beq.n	8004e08 <_malloc_r+0x64>
 8004e40:	1a21      	subs	r1, r4, r0
 8004e42:	4630      	mov	r0, r6
 8004e44:	f000 faf6 	bl	8005434 <_sbrk_r>
 8004e48:	3001      	adds	r0, #1
 8004e4a:	d1dd      	bne.n	8004e08 <_malloc_r+0x64>
 8004e4c:	e7cf      	b.n	8004dee <_malloc_r+0x4a>
 8004e4e:	bf00      	nop
 8004e50:	200001d4 	.word	0x200001d4
 8004e54:	200001d8 	.word	0x200001d8

08004e58 <__sfputc_r>:
 8004e58:	6893      	ldr	r3, [r2, #8]
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	b410      	push	{r4}
 8004e60:	6093      	str	r3, [r2, #8]
 8004e62:	da08      	bge.n	8004e76 <__sfputc_r+0x1e>
 8004e64:	6994      	ldr	r4, [r2, #24]
 8004e66:	42a3      	cmp	r3, r4
 8004e68:	db01      	blt.n	8004e6e <__sfputc_r+0x16>
 8004e6a:	290a      	cmp	r1, #10
 8004e6c:	d103      	bne.n	8004e76 <__sfputc_r+0x1e>
 8004e6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e72:	f7ff bc69 	b.w	8004748 <__swbuf_r>
 8004e76:	6813      	ldr	r3, [r2, #0]
 8004e78:	1c58      	adds	r0, r3, #1
 8004e7a:	6010      	str	r0, [r2, #0]
 8004e7c:	7019      	strb	r1, [r3, #0]
 8004e7e:	4608      	mov	r0, r1
 8004e80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e84:	4770      	bx	lr

08004e86 <__sfputs_r>:
 8004e86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e88:	4606      	mov	r6, r0
 8004e8a:	460f      	mov	r7, r1
 8004e8c:	4614      	mov	r4, r2
 8004e8e:	18d5      	adds	r5, r2, r3
 8004e90:	42ac      	cmp	r4, r5
 8004e92:	d101      	bne.n	8004e98 <__sfputs_r+0x12>
 8004e94:	2000      	movs	r0, #0
 8004e96:	e007      	b.n	8004ea8 <__sfputs_r+0x22>
 8004e98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e9c:	463a      	mov	r2, r7
 8004e9e:	4630      	mov	r0, r6
 8004ea0:	f7ff ffda 	bl	8004e58 <__sfputc_r>
 8004ea4:	1c43      	adds	r3, r0, #1
 8004ea6:	d1f3      	bne.n	8004e90 <__sfputs_r+0xa>
 8004ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004eac <_vfiprintf_r>:
 8004eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eb0:	460d      	mov	r5, r1
 8004eb2:	b09d      	sub	sp, #116	; 0x74
 8004eb4:	4614      	mov	r4, r2
 8004eb6:	4698      	mov	r8, r3
 8004eb8:	4606      	mov	r6, r0
 8004eba:	b118      	cbz	r0, 8004ec4 <_vfiprintf_r+0x18>
 8004ebc:	6983      	ldr	r3, [r0, #24]
 8004ebe:	b90b      	cbnz	r3, 8004ec4 <_vfiprintf_r+0x18>
 8004ec0:	f7ff fe1c 	bl	8004afc <__sinit>
 8004ec4:	4b89      	ldr	r3, [pc, #548]	; (80050ec <_vfiprintf_r+0x240>)
 8004ec6:	429d      	cmp	r5, r3
 8004ec8:	d11b      	bne.n	8004f02 <_vfiprintf_r+0x56>
 8004eca:	6875      	ldr	r5, [r6, #4]
 8004ecc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ece:	07d9      	lsls	r1, r3, #31
 8004ed0:	d405      	bmi.n	8004ede <_vfiprintf_r+0x32>
 8004ed2:	89ab      	ldrh	r3, [r5, #12]
 8004ed4:	059a      	lsls	r2, r3, #22
 8004ed6:	d402      	bmi.n	8004ede <_vfiprintf_r+0x32>
 8004ed8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004eda:	f7ff fead 	bl	8004c38 <__retarget_lock_acquire_recursive>
 8004ede:	89ab      	ldrh	r3, [r5, #12]
 8004ee0:	071b      	lsls	r3, r3, #28
 8004ee2:	d501      	bpl.n	8004ee8 <_vfiprintf_r+0x3c>
 8004ee4:	692b      	ldr	r3, [r5, #16]
 8004ee6:	b9eb      	cbnz	r3, 8004f24 <_vfiprintf_r+0x78>
 8004ee8:	4629      	mov	r1, r5
 8004eea:	4630      	mov	r0, r6
 8004eec:	f7ff fc7e 	bl	80047ec <__swsetup_r>
 8004ef0:	b1c0      	cbz	r0, 8004f24 <_vfiprintf_r+0x78>
 8004ef2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ef4:	07dc      	lsls	r4, r3, #31
 8004ef6:	d50e      	bpl.n	8004f16 <_vfiprintf_r+0x6a>
 8004ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8004efc:	b01d      	add	sp, #116	; 0x74
 8004efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f02:	4b7b      	ldr	r3, [pc, #492]	; (80050f0 <_vfiprintf_r+0x244>)
 8004f04:	429d      	cmp	r5, r3
 8004f06:	d101      	bne.n	8004f0c <_vfiprintf_r+0x60>
 8004f08:	68b5      	ldr	r5, [r6, #8]
 8004f0a:	e7df      	b.n	8004ecc <_vfiprintf_r+0x20>
 8004f0c:	4b79      	ldr	r3, [pc, #484]	; (80050f4 <_vfiprintf_r+0x248>)
 8004f0e:	429d      	cmp	r5, r3
 8004f10:	bf08      	it	eq
 8004f12:	68f5      	ldreq	r5, [r6, #12]
 8004f14:	e7da      	b.n	8004ecc <_vfiprintf_r+0x20>
 8004f16:	89ab      	ldrh	r3, [r5, #12]
 8004f18:	0598      	lsls	r0, r3, #22
 8004f1a:	d4ed      	bmi.n	8004ef8 <_vfiprintf_r+0x4c>
 8004f1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f1e:	f7ff fe8c 	bl	8004c3a <__retarget_lock_release_recursive>
 8004f22:	e7e9      	b.n	8004ef8 <_vfiprintf_r+0x4c>
 8004f24:	2300      	movs	r3, #0
 8004f26:	9309      	str	r3, [sp, #36]	; 0x24
 8004f28:	2320      	movs	r3, #32
 8004f2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f32:	2330      	movs	r3, #48	; 0x30
 8004f34:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80050f8 <_vfiprintf_r+0x24c>
 8004f38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f3c:	f04f 0901 	mov.w	r9, #1
 8004f40:	4623      	mov	r3, r4
 8004f42:	469a      	mov	sl, r3
 8004f44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f48:	b10a      	cbz	r2, 8004f4e <_vfiprintf_r+0xa2>
 8004f4a:	2a25      	cmp	r2, #37	; 0x25
 8004f4c:	d1f9      	bne.n	8004f42 <_vfiprintf_r+0x96>
 8004f4e:	ebba 0b04 	subs.w	fp, sl, r4
 8004f52:	d00b      	beq.n	8004f6c <_vfiprintf_r+0xc0>
 8004f54:	465b      	mov	r3, fp
 8004f56:	4622      	mov	r2, r4
 8004f58:	4629      	mov	r1, r5
 8004f5a:	4630      	mov	r0, r6
 8004f5c:	f7ff ff93 	bl	8004e86 <__sfputs_r>
 8004f60:	3001      	adds	r0, #1
 8004f62:	f000 80aa 	beq.w	80050ba <_vfiprintf_r+0x20e>
 8004f66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f68:	445a      	add	r2, fp
 8004f6a:	9209      	str	r2, [sp, #36]	; 0x24
 8004f6c:	f89a 3000 	ldrb.w	r3, [sl]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	f000 80a2 	beq.w	80050ba <_vfiprintf_r+0x20e>
 8004f76:	2300      	movs	r3, #0
 8004f78:	f04f 32ff 	mov.w	r2, #4294967295
 8004f7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f80:	f10a 0a01 	add.w	sl, sl, #1
 8004f84:	9304      	str	r3, [sp, #16]
 8004f86:	9307      	str	r3, [sp, #28]
 8004f88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f8c:	931a      	str	r3, [sp, #104]	; 0x68
 8004f8e:	4654      	mov	r4, sl
 8004f90:	2205      	movs	r2, #5
 8004f92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f96:	4858      	ldr	r0, [pc, #352]	; (80050f8 <_vfiprintf_r+0x24c>)
 8004f98:	f7fb f952 	bl	8000240 <memchr>
 8004f9c:	9a04      	ldr	r2, [sp, #16]
 8004f9e:	b9d8      	cbnz	r0, 8004fd8 <_vfiprintf_r+0x12c>
 8004fa0:	06d1      	lsls	r1, r2, #27
 8004fa2:	bf44      	itt	mi
 8004fa4:	2320      	movmi	r3, #32
 8004fa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004faa:	0713      	lsls	r3, r2, #28
 8004fac:	bf44      	itt	mi
 8004fae:	232b      	movmi	r3, #43	; 0x2b
 8004fb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fb4:	f89a 3000 	ldrb.w	r3, [sl]
 8004fb8:	2b2a      	cmp	r3, #42	; 0x2a
 8004fba:	d015      	beq.n	8004fe8 <_vfiprintf_r+0x13c>
 8004fbc:	9a07      	ldr	r2, [sp, #28]
 8004fbe:	4654      	mov	r4, sl
 8004fc0:	2000      	movs	r0, #0
 8004fc2:	f04f 0c0a 	mov.w	ip, #10
 8004fc6:	4621      	mov	r1, r4
 8004fc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004fcc:	3b30      	subs	r3, #48	; 0x30
 8004fce:	2b09      	cmp	r3, #9
 8004fd0:	d94e      	bls.n	8005070 <_vfiprintf_r+0x1c4>
 8004fd2:	b1b0      	cbz	r0, 8005002 <_vfiprintf_r+0x156>
 8004fd4:	9207      	str	r2, [sp, #28]
 8004fd6:	e014      	b.n	8005002 <_vfiprintf_r+0x156>
 8004fd8:	eba0 0308 	sub.w	r3, r0, r8
 8004fdc:	fa09 f303 	lsl.w	r3, r9, r3
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	9304      	str	r3, [sp, #16]
 8004fe4:	46a2      	mov	sl, r4
 8004fe6:	e7d2      	b.n	8004f8e <_vfiprintf_r+0xe2>
 8004fe8:	9b03      	ldr	r3, [sp, #12]
 8004fea:	1d19      	adds	r1, r3, #4
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	9103      	str	r1, [sp, #12]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	bfbb      	ittet	lt
 8004ff4:	425b      	neglt	r3, r3
 8004ff6:	f042 0202 	orrlt.w	r2, r2, #2
 8004ffa:	9307      	strge	r3, [sp, #28]
 8004ffc:	9307      	strlt	r3, [sp, #28]
 8004ffe:	bfb8      	it	lt
 8005000:	9204      	strlt	r2, [sp, #16]
 8005002:	7823      	ldrb	r3, [r4, #0]
 8005004:	2b2e      	cmp	r3, #46	; 0x2e
 8005006:	d10c      	bne.n	8005022 <_vfiprintf_r+0x176>
 8005008:	7863      	ldrb	r3, [r4, #1]
 800500a:	2b2a      	cmp	r3, #42	; 0x2a
 800500c:	d135      	bne.n	800507a <_vfiprintf_r+0x1ce>
 800500e:	9b03      	ldr	r3, [sp, #12]
 8005010:	1d1a      	adds	r2, r3, #4
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	9203      	str	r2, [sp, #12]
 8005016:	2b00      	cmp	r3, #0
 8005018:	bfb8      	it	lt
 800501a:	f04f 33ff 	movlt.w	r3, #4294967295
 800501e:	3402      	adds	r4, #2
 8005020:	9305      	str	r3, [sp, #20]
 8005022:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005108 <_vfiprintf_r+0x25c>
 8005026:	7821      	ldrb	r1, [r4, #0]
 8005028:	2203      	movs	r2, #3
 800502a:	4650      	mov	r0, sl
 800502c:	f7fb f908 	bl	8000240 <memchr>
 8005030:	b140      	cbz	r0, 8005044 <_vfiprintf_r+0x198>
 8005032:	2340      	movs	r3, #64	; 0x40
 8005034:	eba0 000a 	sub.w	r0, r0, sl
 8005038:	fa03 f000 	lsl.w	r0, r3, r0
 800503c:	9b04      	ldr	r3, [sp, #16]
 800503e:	4303      	orrs	r3, r0
 8005040:	3401      	adds	r4, #1
 8005042:	9304      	str	r3, [sp, #16]
 8005044:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005048:	482c      	ldr	r0, [pc, #176]	; (80050fc <_vfiprintf_r+0x250>)
 800504a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800504e:	2206      	movs	r2, #6
 8005050:	f7fb f8f6 	bl	8000240 <memchr>
 8005054:	2800      	cmp	r0, #0
 8005056:	d03f      	beq.n	80050d8 <_vfiprintf_r+0x22c>
 8005058:	4b29      	ldr	r3, [pc, #164]	; (8005100 <_vfiprintf_r+0x254>)
 800505a:	bb1b      	cbnz	r3, 80050a4 <_vfiprintf_r+0x1f8>
 800505c:	9b03      	ldr	r3, [sp, #12]
 800505e:	3307      	adds	r3, #7
 8005060:	f023 0307 	bic.w	r3, r3, #7
 8005064:	3308      	adds	r3, #8
 8005066:	9303      	str	r3, [sp, #12]
 8005068:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800506a:	443b      	add	r3, r7
 800506c:	9309      	str	r3, [sp, #36]	; 0x24
 800506e:	e767      	b.n	8004f40 <_vfiprintf_r+0x94>
 8005070:	fb0c 3202 	mla	r2, ip, r2, r3
 8005074:	460c      	mov	r4, r1
 8005076:	2001      	movs	r0, #1
 8005078:	e7a5      	b.n	8004fc6 <_vfiprintf_r+0x11a>
 800507a:	2300      	movs	r3, #0
 800507c:	3401      	adds	r4, #1
 800507e:	9305      	str	r3, [sp, #20]
 8005080:	4619      	mov	r1, r3
 8005082:	f04f 0c0a 	mov.w	ip, #10
 8005086:	4620      	mov	r0, r4
 8005088:	f810 2b01 	ldrb.w	r2, [r0], #1
 800508c:	3a30      	subs	r2, #48	; 0x30
 800508e:	2a09      	cmp	r2, #9
 8005090:	d903      	bls.n	800509a <_vfiprintf_r+0x1ee>
 8005092:	2b00      	cmp	r3, #0
 8005094:	d0c5      	beq.n	8005022 <_vfiprintf_r+0x176>
 8005096:	9105      	str	r1, [sp, #20]
 8005098:	e7c3      	b.n	8005022 <_vfiprintf_r+0x176>
 800509a:	fb0c 2101 	mla	r1, ip, r1, r2
 800509e:	4604      	mov	r4, r0
 80050a0:	2301      	movs	r3, #1
 80050a2:	e7f0      	b.n	8005086 <_vfiprintf_r+0x1da>
 80050a4:	ab03      	add	r3, sp, #12
 80050a6:	9300      	str	r3, [sp, #0]
 80050a8:	462a      	mov	r2, r5
 80050aa:	4b16      	ldr	r3, [pc, #88]	; (8005104 <_vfiprintf_r+0x258>)
 80050ac:	a904      	add	r1, sp, #16
 80050ae:	4630      	mov	r0, r6
 80050b0:	f3af 8000 	nop.w
 80050b4:	4607      	mov	r7, r0
 80050b6:	1c78      	adds	r0, r7, #1
 80050b8:	d1d6      	bne.n	8005068 <_vfiprintf_r+0x1bc>
 80050ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80050bc:	07d9      	lsls	r1, r3, #31
 80050be:	d405      	bmi.n	80050cc <_vfiprintf_r+0x220>
 80050c0:	89ab      	ldrh	r3, [r5, #12]
 80050c2:	059a      	lsls	r2, r3, #22
 80050c4:	d402      	bmi.n	80050cc <_vfiprintf_r+0x220>
 80050c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80050c8:	f7ff fdb7 	bl	8004c3a <__retarget_lock_release_recursive>
 80050cc:	89ab      	ldrh	r3, [r5, #12]
 80050ce:	065b      	lsls	r3, r3, #25
 80050d0:	f53f af12 	bmi.w	8004ef8 <_vfiprintf_r+0x4c>
 80050d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80050d6:	e711      	b.n	8004efc <_vfiprintf_r+0x50>
 80050d8:	ab03      	add	r3, sp, #12
 80050da:	9300      	str	r3, [sp, #0]
 80050dc:	462a      	mov	r2, r5
 80050de:	4b09      	ldr	r3, [pc, #36]	; (8005104 <_vfiprintf_r+0x258>)
 80050e0:	a904      	add	r1, sp, #16
 80050e2:	4630      	mov	r0, r6
 80050e4:	f000 f880 	bl	80051e8 <_printf_i>
 80050e8:	e7e4      	b.n	80050b4 <_vfiprintf_r+0x208>
 80050ea:	bf00      	nop
 80050ec:	0800564c 	.word	0x0800564c
 80050f0:	0800566c 	.word	0x0800566c
 80050f4:	0800562c 	.word	0x0800562c
 80050f8:	0800568c 	.word	0x0800568c
 80050fc:	08005696 	.word	0x08005696
 8005100:	00000000 	.word	0x00000000
 8005104:	08004e87 	.word	0x08004e87
 8005108:	08005692 	.word	0x08005692

0800510c <_printf_common>:
 800510c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005110:	4616      	mov	r6, r2
 8005112:	4699      	mov	r9, r3
 8005114:	688a      	ldr	r2, [r1, #8]
 8005116:	690b      	ldr	r3, [r1, #16]
 8005118:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800511c:	4293      	cmp	r3, r2
 800511e:	bfb8      	it	lt
 8005120:	4613      	movlt	r3, r2
 8005122:	6033      	str	r3, [r6, #0]
 8005124:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005128:	4607      	mov	r7, r0
 800512a:	460c      	mov	r4, r1
 800512c:	b10a      	cbz	r2, 8005132 <_printf_common+0x26>
 800512e:	3301      	adds	r3, #1
 8005130:	6033      	str	r3, [r6, #0]
 8005132:	6823      	ldr	r3, [r4, #0]
 8005134:	0699      	lsls	r1, r3, #26
 8005136:	bf42      	ittt	mi
 8005138:	6833      	ldrmi	r3, [r6, #0]
 800513a:	3302      	addmi	r3, #2
 800513c:	6033      	strmi	r3, [r6, #0]
 800513e:	6825      	ldr	r5, [r4, #0]
 8005140:	f015 0506 	ands.w	r5, r5, #6
 8005144:	d106      	bne.n	8005154 <_printf_common+0x48>
 8005146:	f104 0a19 	add.w	sl, r4, #25
 800514a:	68e3      	ldr	r3, [r4, #12]
 800514c:	6832      	ldr	r2, [r6, #0]
 800514e:	1a9b      	subs	r3, r3, r2
 8005150:	42ab      	cmp	r3, r5
 8005152:	dc26      	bgt.n	80051a2 <_printf_common+0x96>
 8005154:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005158:	1e13      	subs	r3, r2, #0
 800515a:	6822      	ldr	r2, [r4, #0]
 800515c:	bf18      	it	ne
 800515e:	2301      	movne	r3, #1
 8005160:	0692      	lsls	r2, r2, #26
 8005162:	d42b      	bmi.n	80051bc <_printf_common+0xb0>
 8005164:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005168:	4649      	mov	r1, r9
 800516a:	4638      	mov	r0, r7
 800516c:	47c0      	blx	r8
 800516e:	3001      	adds	r0, #1
 8005170:	d01e      	beq.n	80051b0 <_printf_common+0xa4>
 8005172:	6823      	ldr	r3, [r4, #0]
 8005174:	68e5      	ldr	r5, [r4, #12]
 8005176:	6832      	ldr	r2, [r6, #0]
 8005178:	f003 0306 	and.w	r3, r3, #6
 800517c:	2b04      	cmp	r3, #4
 800517e:	bf08      	it	eq
 8005180:	1aad      	subeq	r5, r5, r2
 8005182:	68a3      	ldr	r3, [r4, #8]
 8005184:	6922      	ldr	r2, [r4, #16]
 8005186:	bf0c      	ite	eq
 8005188:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800518c:	2500      	movne	r5, #0
 800518e:	4293      	cmp	r3, r2
 8005190:	bfc4      	itt	gt
 8005192:	1a9b      	subgt	r3, r3, r2
 8005194:	18ed      	addgt	r5, r5, r3
 8005196:	2600      	movs	r6, #0
 8005198:	341a      	adds	r4, #26
 800519a:	42b5      	cmp	r5, r6
 800519c:	d11a      	bne.n	80051d4 <_printf_common+0xc8>
 800519e:	2000      	movs	r0, #0
 80051a0:	e008      	b.n	80051b4 <_printf_common+0xa8>
 80051a2:	2301      	movs	r3, #1
 80051a4:	4652      	mov	r2, sl
 80051a6:	4649      	mov	r1, r9
 80051a8:	4638      	mov	r0, r7
 80051aa:	47c0      	blx	r8
 80051ac:	3001      	adds	r0, #1
 80051ae:	d103      	bne.n	80051b8 <_printf_common+0xac>
 80051b0:	f04f 30ff 	mov.w	r0, #4294967295
 80051b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051b8:	3501      	adds	r5, #1
 80051ba:	e7c6      	b.n	800514a <_printf_common+0x3e>
 80051bc:	18e1      	adds	r1, r4, r3
 80051be:	1c5a      	adds	r2, r3, #1
 80051c0:	2030      	movs	r0, #48	; 0x30
 80051c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80051c6:	4422      	add	r2, r4
 80051c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80051d0:	3302      	adds	r3, #2
 80051d2:	e7c7      	b.n	8005164 <_printf_common+0x58>
 80051d4:	2301      	movs	r3, #1
 80051d6:	4622      	mov	r2, r4
 80051d8:	4649      	mov	r1, r9
 80051da:	4638      	mov	r0, r7
 80051dc:	47c0      	blx	r8
 80051de:	3001      	adds	r0, #1
 80051e0:	d0e6      	beq.n	80051b0 <_printf_common+0xa4>
 80051e2:	3601      	adds	r6, #1
 80051e4:	e7d9      	b.n	800519a <_printf_common+0x8e>
	...

080051e8 <_printf_i>:
 80051e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051ec:	460c      	mov	r4, r1
 80051ee:	4691      	mov	r9, r2
 80051f0:	7e27      	ldrb	r7, [r4, #24]
 80051f2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80051f4:	2f78      	cmp	r7, #120	; 0x78
 80051f6:	4680      	mov	r8, r0
 80051f8:	469a      	mov	sl, r3
 80051fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051fe:	d807      	bhi.n	8005210 <_printf_i+0x28>
 8005200:	2f62      	cmp	r7, #98	; 0x62
 8005202:	d80a      	bhi.n	800521a <_printf_i+0x32>
 8005204:	2f00      	cmp	r7, #0
 8005206:	f000 80d8 	beq.w	80053ba <_printf_i+0x1d2>
 800520a:	2f58      	cmp	r7, #88	; 0x58
 800520c:	f000 80a3 	beq.w	8005356 <_printf_i+0x16e>
 8005210:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005214:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005218:	e03a      	b.n	8005290 <_printf_i+0xa8>
 800521a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800521e:	2b15      	cmp	r3, #21
 8005220:	d8f6      	bhi.n	8005210 <_printf_i+0x28>
 8005222:	a001      	add	r0, pc, #4	; (adr r0, 8005228 <_printf_i+0x40>)
 8005224:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005228:	08005281 	.word	0x08005281
 800522c:	08005295 	.word	0x08005295
 8005230:	08005211 	.word	0x08005211
 8005234:	08005211 	.word	0x08005211
 8005238:	08005211 	.word	0x08005211
 800523c:	08005211 	.word	0x08005211
 8005240:	08005295 	.word	0x08005295
 8005244:	08005211 	.word	0x08005211
 8005248:	08005211 	.word	0x08005211
 800524c:	08005211 	.word	0x08005211
 8005250:	08005211 	.word	0x08005211
 8005254:	080053a1 	.word	0x080053a1
 8005258:	080052c5 	.word	0x080052c5
 800525c:	08005383 	.word	0x08005383
 8005260:	08005211 	.word	0x08005211
 8005264:	08005211 	.word	0x08005211
 8005268:	080053c3 	.word	0x080053c3
 800526c:	08005211 	.word	0x08005211
 8005270:	080052c5 	.word	0x080052c5
 8005274:	08005211 	.word	0x08005211
 8005278:	08005211 	.word	0x08005211
 800527c:	0800538b 	.word	0x0800538b
 8005280:	680b      	ldr	r3, [r1, #0]
 8005282:	1d1a      	adds	r2, r3, #4
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	600a      	str	r2, [r1, #0]
 8005288:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800528c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005290:	2301      	movs	r3, #1
 8005292:	e0a3      	b.n	80053dc <_printf_i+0x1f4>
 8005294:	6825      	ldr	r5, [r4, #0]
 8005296:	6808      	ldr	r0, [r1, #0]
 8005298:	062e      	lsls	r6, r5, #24
 800529a:	f100 0304 	add.w	r3, r0, #4
 800529e:	d50a      	bpl.n	80052b6 <_printf_i+0xce>
 80052a0:	6805      	ldr	r5, [r0, #0]
 80052a2:	600b      	str	r3, [r1, #0]
 80052a4:	2d00      	cmp	r5, #0
 80052a6:	da03      	bge.n	80052b0 <_printf_i+0xc8>
 80052a8:	232d      	movs	r3, #45	; 0x2d
 80052aa:	426d      	negs	r5, r5
 80052ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052b0:	485e      	ldr	r0, [pc, #376]	; (800542c <_printf_i+0x244>)
 80052b2:	230a      	movs	r3, #10
 80052b4:	e019      	b.n	80052ea <_printf_i+0x102>
 80052b6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80052ba:	6805      	ldr	r5, [r0, #0]
 80052bc:	600b      	str	r3, [r1, #0]
 80052be:	bf18      	it	ne
 80052c0:	b22d      	sxthne	r5, r5
 80052c2:	e7ef      	b.n	80052a4 <_printf_i+0xbc>
 80052c4:	680b      	ldr	r3, [r1, #0]
 80052c6:	6825      	ldr	r5, [r4, #0]
 80052c8:	1d18      	adds	r0, r3, #4
 80052ca:	6008      	str	r0, [r1, #0]
 80052cc:	0628      	lsls	r0, r5, #24
 80052ce:	d501      	bpl.n	80052d4 <_printf_i+0xec>
 80052d0:	681d      	ldr	r5, [r3, #0]
 80052d2:	e002      	b.n	80052da <_printf_i+0xf2>
 80052d4:	0669      	lsls	r1, r5, #25
 80052d6:	d5fb      	bpl.n	80052d0 <_printf_i+0xe8>
 80052d8:	881d      	ldrh	r5, [r3, #0]
 80052da:	4854      	ldr	r0, [pc, #336]	; (800542c <_printf_i+0x244>)
 80052dc:	2f6f      	cmp	r7, #111	; 0x6f
 80052de:	bf0c      	ite	eq
 80052e0:	2308      	moveq	r3, #8
 80052e2:	230a      	movne	r3, #10
 80052e4:	2100      	movs	r1, #0
 80052e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80052ea:	6866      	ldr	r6, [r4, #4]
 80052ec:	60a6      	str	r6, [r4, #8]
 80052ee:	2e00      	cmp	r6, #0
 80052f0:	bfa2      	ittt	ge
 80052f2:	6821      	ldrge	r1, [r4, #0]
 80052f4:	f021 0104 	bicge.w	r1, r1, #4
 80052f8:	6021      	strge	r1, [r4, #0]
 80052fa:	b90d      	cbnz	r5, 8005300 <_printf_i+0x118>
 80052fc:	2e00      	cmp	r6, #0
 80052fe:	d04d      	beq.n	800539c <_printf_i+0x1b4>
 8005300:	4616      	mov	r6, r2
 8005302:	fbb5 f1f3 	udiv	r1, r5, r3
 8005306:	fb03 5711 	mls	r7, r3, r1, r5
 800530a:	5dc7      	ldrb	r7, [r0, r7]
 800530c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005310:	462f      	mov	r7, r5
 8005312:	42bb      	cmp	r3, r7
 8005314:	460d      	mov	r5, r1
 8005316:	d9f4      	bls.n	8005302 <_printf_i+0x11a>
 8005318:	2b08      	cmp	r3, #8
 800531a:	d10b      	bne.n	8005334 <_printf_i+0x14c>
 800531c:	6823      	ldr	r3, [r4, #0]
 800531e:	07df      	lsls	r7, r3, #31
 8005320:	d508      	bpl.n	8005334 <_printf_i+0x14c>
 8005322:	6923      	ldr	r3, [r4, #16]
 8005324:	6861      	ldr	r1, [r4, #4]
 8005326:	4299      	cmp	r1, r3
 8005328:	bfde      	ittt	le
 800532a:	2330      	movle	r3, #48	; 0x30
 800532c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005330:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005334:	1b92      	subs	r2, r2, r6
 8005336:	6122      	str	r2, [r4, #16]
 8005338:	f8cd a000 	str.w	sl, [sp]
 800533c:	464b      	mov	r3, r9
 800533e:	aa03      	add	r2, sp, #12
 8005340:	4621      	mov	r1, r4
 8005342:	4640      	mov	r0, r8
 8005344:	f7ff fee2 	bl	800510c <_printf_common>
 8005348:	3001      	adds	r0, #1
 800534a:	d14c      	bne.n	80053e6 <_printf_i+0x1fe>
 800534c:	f04f 30ff 	mov.w	r0, #4294967295
 8005350:	b004      	add	sp, #16
 8005352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005356:	4835      	ldr	r0, [pc, #212]	; (800542c <_printf_i+0x244>)
 8005358:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800535c:	6823      	ldr	r3, [r4, #0]
 800535e:	680e      	ldr	r6, [r1, #0]
 8005360:	061f      	lsls	r7, r3, #24
 8005362:	f856 5b04 	ldr.w	r5, [r6], #4
 8005366:	600e      	str	r6, [r1, #0]
 8005368:	d514      	bpl.n	8005394 <_printf_i+0x1ac>
 800536a:	07d9      	lsls	r1, r3, #31
 800536c:	bf44      	itt	mi
 800536e:	f043 0320 	orrmi.w	r3, r3, #32
 8005372:	6023      	strmi	r3, [r4, #0]
 8005374:	b91d      	cbnz	r5, 800537e <_printf_i+0x196>
 8005376:	6823      	ldr	r3, [r4, #0]
 8005378:	f023 0320 	bic.w	r3, r3, #32
 800537c:	6023      	str	r3, [r4, #0]
 800537e:	2310      	movs	r3, #16
 8005380:	e7b0      	b.n	80052e4 <_printf_i+0xfc>
 8005382:	6823      	ldr	r3, [r4, #0]
 8005384:	f043 0320 	orr.w	r3, r3, #32
 8005388:	6023      	str	r3, [r4, #0]
 800538a:	2378      	movs	r3, #120	; 0x78
 800538c:	4828      	ldr	r0, [pc, #160]	; (8005430 <_printf_i+0x248>)
 800538e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005392:	e7e3      	b.n	800535c <_printf_i+0x174>
 8005394:	065e      	lsls	r6, r3, #25
 8005396:	bf48      	it	mi
 8005398:	b2ad      	uxthmi	r5, r5
 800539a:	e7e6      	b.n	800536a <_printf_i+0x182>
 800539c:	4616      	mov	r6, r2
 800539e:	e7bb      	b.n	8005318 <_printf_i+0x130>
 80053a0:	680b      	ldr	r3, [r1, #0]
 80053a2:	6826      	ldr	r6, [r4, #0]
 80053a4:	6960      	ldr	r0, [r4, #20]
 80053a6:	1d1d      	adds	r5, r3, #4
 80053a8:	600d      	str	r5, [r1, #0]
 80053aa:	0635      	lsls	r5, r6, #24
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	d501      	bpl.n	80053b4 <_printf_i+0x1cc>
 80053b0:	6018      	str	r0, [r3, #0]
 80053b2:	e002      	b.n	80053ba <_printf_i+0x1d2>
 80053b4:	0671      	lsls	r1, r6, #25
 80053b6:	d5fb      	bpl.n	80053b0 <_printf_i+0x1c8>
 80053b8:	8018      	strh	r0, [r3, #0]
 80053ba:	2300      	movs	r3, #0
 80053bc:	6123      	str	r3, [r4, #16]
 80053be:	4616      	mov	r6, r2
 80053c0:	e7ba      	b.n	8005338 <_printf_i+0x150>
 80053c2:	680b      	ldr	r3, [r1, #0]
 80053c4:	1d1a      	adds	r2, r3, #4
 80053c6:	600a      	str	r2, [r1, #0]
 80053c8:	681e      	ldr	r6, [r3, #0]
 80053ca:	6862      	ldr	r2, [r4, #4]
 80053cc:	2100      	movs	r1, #0
 80053ce:	4630      	mov	r0, r6
 80053d0:	f7fa ff36 	bl	8000240 <memchr>
 80053d4:	b108      	cbz	r0, 80053da <_printf_i+0x1f2>
 80053d6:	1b80      	subs	r0, r0, r6
 80053d8:	6060      	str	r0, [r4, #4]
 80053da:	6863      	ldr	r3, [r4, #4]
 80053dc:	6123      	str	r3, [r4, #16]
 80053de:	2300      	movs	r3, #0
 80053e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053e4:	e7a8      	b.n	8005338 <_printf_i+0x150>
 80053e6:	6923      	ldr	r3, [r4, #16]
 80053e8:	4632      	mov	r2, r6
 80053ea:	4649      	mov	r1, r9
 80053ec:	4640      	mov	r0, r8
 80053ee:	47d0      	blx	sl
 80053f0:	3001      	adds	r0, #1
 80053f2:	d0ab      	beq.n	800534c <_printf_i+0x164>
 80053f4:	6823      	ldr	r3, [r4, #0]
 80053f6:	079b      	lsls	r3, r3, #30
 80053f8:	d413      	bmi.n	8005422 <_printf_i+0x23a>
 80053fa:	68e0      	ldr	r0, [r4, #12]
 80053fc:	9b03      	ldr	r3, [sp, #12]
 80053fe:	4298      	cmp	r0, r3
 8005400:	bfb8      	it	lt
 8005402:	4618      	movlt	r0, r3
 8005404:	e7a4      	b.n	8005350 <_printf_i+0x168>
 8005406:	2301      	movs	r3, #1
 8005408:	4632      	mov	r2, r6
 800540a:	4649      	mov	r1, r9
 800540c:	4640      	mov	r0, r8
 800540e:	47d0      	blx	sl
 8005410:	3001      	adds	r0, #1
 8005412:	d09b      	beq.n	800534c <_printf_i+0x164>
 8005414:	3501      	adds	r5, #1
 8005416:	68e3      	ldr	r3, [r4, #12]
 8005418:	9903      	ldr	r1, [sp, #12]
 800541a:	1a5b      	subs	r3, r3, r1
 800541c:	42ab      	cmp	r3, r5
 800541e:	dcf2      	bgt.n	8005406 <_printf_i+0x21e>
 8005420:	e7eb      	b.n	80053fa <_printf_i+0x212>
 8005422:	2500      	movs	r5, #0
 8005424:	f104 0619 	add.w	r6, r4, #25
 8005428:	e7f5      	b.n	8005416 <_printf_i+0x22e>
 800542a:	bf00      	nop
 800542c:	0800569d 	.word	0x0800569d
 8005430:	080056ae 	.word	0x080056ae

08005434 <_sbrk_r>:
 8005434:	b538      	push	{r3, r4, r5, lr}
 8005436:	4d06      	ldr	r5, [pc, #24]	; (8005450 <_sbrk_r+0x1c>)
 8005438:	2300      	movs	r3, #0
 800543a:	4604      	mov	r4, r0
 800543c:	4608      	mov	r0, r1
 800543e:	602b      	str	r3, [r5, #0]
 8005440:	f7fb fb90 	bl	8000b64 <_sbrk>
 8005444:	1c43      	adds	r3, r0, #1
 8005446:	d102      	bne.n	800544e <_sbrk_r+0x1a>
 8005448:	682b      	ldr	r3, [r5, #0]
 800544a:	b103      	cbz	r3, 800544e <_sbrk_r+0x1a>
 800544c:	6023      	str	r3, [r4, #0]
 800544e:	bd38      	pop	{r3, r4, r5, pc}
 8005450:	200002d0 	.word	0x200002d0

08005454 <__sread>:
 8005454:	b510      	push	{r4, lr}
 8005456:	460c      	mov	r4, r1
 8005458:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800545c:	f000 f8a0 	bl	80055a0 <_read_r>
 8005460:	2800      	cmp	r0, #0
 8005462:	bfab      	itete	ge
 8005464:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005466:	89a3      	ldrhlt	r3, [r4, #12]
 8005468:	181b      	addge	r3, r3, r0
 800546a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800546e:	bfac      	ite	ge
 8005470:	6563      	strge	r3, [r4, #84]	; 0x54
 8005472:	81a3      	strhlt	r3, [r4, #12]
 8005474:	bd10      	pop	{r4, pc}

08005476 <__swrite>:
 8005476:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800547a:	461f      	mov	r7, r3
 800547c:	898b      	ldrh	r3, [r1, #12]
 800547e:	05db      	lsls	r3, r3, #23
 8005480:	4605      	mov	r5, r0
 8005482:	460c      	mov	r4, r1
 8005484:	4616      	mov	r6, r2
 8005486:	d505      	bpl.n	8005494 <__swrite+0x1e>
 8005488:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800548c:	2302      	movs	r3, #2
 800548e:	2200      	movs	r2, #0
 8005490:	f000 f868 	bl	8005564 <_lseek_r>
 8005494:	89a3      	ldrh	r3, [r4, #12]
 8005496:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800549a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800549e:	81a3      	strh	r3, [r4, #12]
 80054a0:	4632      	mov	r2, r6
 80054a2:	463b      	mov	r3, r7
 80054a4:	4628      	mov	r0, r5
 80054a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054aa:	f000 b817 	b.w	80054dc <_write_r>

080054ae <__sseek>:
 80054ae:	b510      	push	{r4, lr}
 80054b0:	460c      	mov	r4, r1
 80054b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054b6:	f000 f855 	bl	8005564 <_lseek_r>
 80054ba:	1c43      	adds	r3, r0, #1
 80054bc:	89a3      	ldrh	r3, [r4, #12]
 80054be:	bf15      	itete	ne
 80054c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80054c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80054c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80054ca:	81a3      	strheq	r3, [r4, #12]
 80054cc:	bf18      	it	ne
 80054ce:	81a3      	strhne	r3, [r4, #12]
 80054d0:	bd10      	pop	{r4, pc}

080054d2 <__sclose>:
 80054d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054d6:	f000 b813 	b.w	8005500 <_close_r>
	...

080054dc <_write_r>:
 80054dc:	b538      	push	{r3, r4, r5, lr}
 80054de:	4d07      	ldr	r5, [pc, #28]	; (80054fc <_write_r+0x20>)
 80054e0:	4604      	mov	r4, r0
 80054e2:	4608      	mov	r0, r1
 80054e4:	4611      	mov	r1, r2
 80054e6:	2200      	movs	r2, #0
 80054e8:	602a      	str	r2, [r5, #0]
 80054ea:	461a      	mov	r2, r3
 80054ec:	f7fb f8e8 	bl	80006c0 <_write>
 80054f0:	1c43      	adds	r3, r0, #1
 80054f2:	d102      	bne.n	80054fa <_write_r+0x1e>
 80054f4:	682b      	ldr	r3, [r5, #0]
 80054f6:	b103      	cbz	r3, 80054fa <_write_r+0x1e>
 80054f8:	6023      	str	r3, [r4, #0]
 80054fa:	bd38      	pop	{r3, r4, r5, pc}
 80054fc:	200002d0 	.word	0x200002d0

08005500 <_close_r>:
 8005500:	b538      	push	{r3, r4, r5, lr}
 8005502:	4d06      	ldr	r5, [pc, #24]	; (800551c <_close_r+0x1c>)
 8005504:	2300      	movs	r3, #0
 8005506:	4604      	mov	r4, r0
 8005508:	4608      	mov	r0, r1
 800550a:	602b      	str	r3, [r5, #0]
 800550c:	f7fb faf5 	bl	8000afa <_close>
 8005510:	1c43      	adds	r3, r0, #1
 8005512:	d102      	bne.n	800551a <_close_r+0x1a>
 8005514:	682b      	ldr	r3, [r5, #0]
 8005516:	b103      	cbz	r3, 800551a <_close_r+0x1a>
 8005518:	6023      	str	r3, [r4, #0]
 800551a:	bd38      	pop	{r3, r4, r5, pc}
 800551c:	200002d0 	.word	0x200002d0

08005520 <_fstat_r>:
 8005520:	b538      	push	{r3, r4, r5, lr}
 8005522:	4d07      	ldr	r5, [pc, #28]	; (8005540 <_fstat_r+0x20>)
 8005524:	2300      	movs	r3, #0
 8005526:	4604      	mov	r4, r0
 8005528:	4608      	mov	r0, r1
 800552a:	4611      	mov	r1, r2
 800552c:	602b      	str	r3, [r5, #0]
 800552e:	f7fb faf0 	bl	8000b12 <_fstat>
 8005532:	1c43      	adds	r3, r0, #1
 8005534:	d102      	bne.n	800553c <_fstat_r+0x1c>
 8005536:	682b      	ldr	r3, [r5, #0]
 8005538:	b103      	cbz	r3, 800553c <_fstat_r+0x1c>
 800553a:	6023      	str	r3, [r4, #0]
 800553c:	bd38      	pop	{r3, r4, r5, pc}
 800553e:	bf00      	nop
 8005540:	200002d0 	.word	0x200002d0

08005544 <_isatty_r>:
 8005544:	b538      	push	{r3, r4, r5, lr}
 8005546:	4d06      	ldr	r5, [pc, #24]	; (8005560 <_isatty_r+0x1c>)
 8005548:	2300      	movs	r3, #0
 800554a:	4604      	mov	r4, r0
 800554c:	4608      	mov	r0, r1
 800554e:	602b      	str	r3, [r5, #0]
 8005550:	f7fb faef 	bl	8000b32 <_isatty>
 8005554:	1c43      	adds	r3, r0, #1
 8005556:	d102      	bne.n	800555e <_isatty_r+0x1a>
 8005558:	682b      	ldr	r3, [r5, #0]
 800555a:	b103      	cbz	r3, 800555e <_isatty_r+0x1a>
 800555c:	6023      	str	r3, [r4, #0]
 800555e:	bd38      	pop	{r3, r4, r5, pc}
 8005560:	200002d0 	.word	0x200002d0

08005564 <_lseek_r>:
 8005564:	b538      	push	{r3, r4, r5, lr}
 8005566:	4d07      	ldr	r5, [pc, #28]	; (8005584 <_lseek_r+0x20>)
 8005568:	4604      	mov	r4, r0
 800556a:	4608      	mov	r0, r1
 800556c:	4611      	mov	r1, r2
 800556e:	2200      	movs	r2, #0
 8005570:	602a      	str	r2, [r5, #0]
 8005572:	461a      	mov	r2, r3
 8005574:	f7fb fae8 	bl	8000b48 <_lseek>
 8005578:	1c43      	adds	r3, r0, #1
 800557a:	d102      	bne.n	8005582 <_lseek_r+0x1e>
 800557c:	682b      	ldr	r3, [r5, #0]
 800557e:	b103      	cbz	r3, 8005582 <_lseek_r+0x1e>
 8005580:	6023      	str	r3, [r4, #0]
 8005582:	bd38      	pop	{r3, r4, r5, pc}
 8005584:	200002d0 	.word	0x200002d0

08005588 <__malloc_lock>:
 8005588:	4801      	ldr	r0, [pc, #4]	; (8005590 <__malloc_lock+0x8>)
 800558a:	f7ff bb55 	b.w	8004c38 <__retarget_lock_acquire_recursive>
 800558e:	bf00      	nop
 8005590:	200002c8 	.word	0x200002c8

08005594 <__malloc_unlock>:
 8005594:	4801      	ldr	r0, [pc, #4]	; (800559c <__malloc_unlock+0x8>)
 8005596:	f7ff bb50 	b.w	8004c3a <__retarget_lock_release_recursive>
 800559a:	bf00      	nop
 800559c:	200002c8 	.word	0x200002c8

080055a0 <_read_r>:
 80055a0:	b538      	push	{r3, r4, r5, lr}
 80055a2:	4d07      	ldr	r5, [pc, #28]	; (80055c0 <_read_r+0x20>)
 80055a4:	4604      	mov	r4, r0
 80055a6:	4608      	mov	r0, r1
 80055a8:	4611      	mov	r1, r2
 80055aa:	2200      	movs	r2, #0
 80055ac:	602a      	str	r2, [r5, #0]
 80055ae:	461a      	mov	r2, r3
 80055b0:	f7fb fa86 	bl	8000ac0 <_read>
 80055b4:	1c43      	adds	r3, r0, #1
 80055b6:	d102      	bne.n	80055be <_read_r+0x1e>
 80055b8:	682b      	ldr	r3, [r5, #0]
 80055ba:	b103      	cbz	r3, 80055be <_read_r+0x1e>
 80055bc:	6023      	str	r3, [r4, #0]
 80055be:	bd38      	pop	{r3, r4, r5, pc}
 80055c0:	200002d0 	.word	0x200002d0

080055c4 <_init>:
 80055c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055c6:	bf00      	nop
 80055c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055ca:	bc08      	pop	{r3}
 80055cc:	469e      	mov	lr, r3
 80055ce:	4770      	bx	lr

080055d0 <_fini>:
 80055d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055d2:	bf00      	nop
 80055d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055d6:	bc08      	pop	{r3}
 80055d8:	469e      	mov	lr, r3
 80055da:	4770      	bx	lr
