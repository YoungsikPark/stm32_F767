
stm32f767zi_boot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f88  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000754  0800a188  0800a188  0001a188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a8dc  0800a8dc  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a8dc  0800a8dc  0001a8dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a8e4  0800a8e4  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a8e4  0800a8e4  0001a8e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a8e8  0800a8e8  0001a8e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800a8ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000754  200001e4  0800aad0  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000938  0800aad0  00020938  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013804  00000000  00000000  00020212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000329b  00000000  00000000  00033a16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf8  00000000  00000000  00036cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bc0  00000000  00000000  000379b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a46c  00000000  00000000  00038570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011a98  00000000  00000000  000629dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fcbba  00000000  00000000  00074474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017102e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004638  00000000  00000000  00171084  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e4 	.word	0x200001e4
 800021c:	00000000 	.word	0x00000000
 8000220:	0800a170 	.word	0x0800a170

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e8 	.word	0x200001e8
 800023c:	0800a170 	.word	0x0800a170

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_drsub>:
 8000310:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000314:	e002      	b.n	800031c <__adddf3>
 8000316:	bf00      	nop

08000318 <__aeabi_dsub>:
 8000318:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800031c <__adddf3>:
 800031c:	b530      	push	{r4, r5, lr}
 800031e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000322:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000326:	ea94 0f05 	teq	r4, r5
 800032a:	bf08      	it	eq
 800032c:	ea90 0f02 	teqeq	r0, r2
 8000330:	bf1f      	itttt	ne
 8000332:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000336:	ea55 0c02 	orrsne.w	ip, r5, r2
 800033a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800033e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000342:	f000 80e2 	beq.w	800050a <__adddf3+0x1ee>
 8000346:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800034a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800034e:	bfb8      	it	lt
 8000350:	426d      	neglt	r5, r5
 8000352:	dd0c      	ble.n	800036e <__adddf3+0x52>
 8000354:	442c      	add	r4, r5
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	ea82 0000 	eor.w	r0, r2, r0
 8000362:	ea83 0101 	eor.w	r1, r3, r1
 8000366:	ea80 0202 	eor.w	r2, r0, r2
 800036a:	ea81 0303 	eor.w	r3, r1, r3
 800036e:	2d36      	cmp	r5, #54	; 0x36
 8000370:	bf88      	it	hi
 8000372:	bd30      	pophi	{r4, r5, pc}
 8000374:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000378:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800037c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000380:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000384:	d002      	beq.n	800038c <__adddf3+0x70>
 8000386:	4240      	negs	r0, r0
 8000388:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800038c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000390:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000394:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000398:	d002      	beq.n	80003a0 <__adddf3+0x84>
 800039a:	4252      	negs	r2, r2
 800039c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003a0:	ea94 0f05 	teq	r4, r5
 80003a4:	f000 80a7 	beq.w	80004f6 <__adddf3+0x1da>
 80003a8:	f1a4 0401 	sub.w	r4, r4, #1
 80003ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80003b0:	db0d      	blt.n	80003ce <__adddf3+0xb2>
 80003b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003b6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ba:	1880      	adds	r0, r0, r2
 80003bc:	f141 0100 	adc.w	r1, r1, #0
 80003c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003c4:	1880      	adds	r0, r0, r2
 80003c6:	fa43 f305 	asr.w	r3, r3, r5
 80003ca:	4159      	adcs	r1, r3
 80003cc:	e00e      	b.n	80003ec <__adddf3+0xd0>
 80003ce:	f1a5 0520 	sub.w	r5, r5, #32
 80003d2:	f10e 0e20 	add.w	lr, lr, #32
 80003d6:	2a01      	cmp	r2, #1
 80003d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003dc:	bf28      	it	cs
 80003de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003e2:	fa43 f305 	asr.w	r3, r3, r5
 80003e6:	18c0      	adds	r0, r0, r3
 80003e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003f0:	d507      	bpl.n	8000402 <__adddf3+0xe6>
 80003f2:	f04f 0e00 	mov.w	lr, #0
 80003f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000402:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000406:	d31b      	bcc.n	8000440 <__adddf3+0x124>
 8000408:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800040c:	d30c      	bcc.n	8000428 <__adddf3+0x10c>
 800040e:	0849      	lsrs	r1, r1, #1
 8000410:	ea5f 0030 	movs.w	r0, r0, rrx
 8000414:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000418:	f104 0401 	add.w	r4, r4, #1
 800041c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000420:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000424:	f080 809a 	bcs.w	800055c <__adddf3+0x240>
 8000428:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800042c:	bf08      	it	eq
 800042e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000432:	f150 0000 	adcs.w	r0, r0, #0
 8000436:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800043a:	ea41 0105 	orr.w	r1, r1, r5
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000444:	4140      	adcs	r0, r0
 8000446:	eb41 0101 	adc.w	r1, r1, r1
 800044a:	3c01      	subs	r4, #1
 800044c:	bf28      	it	cs
 800044e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000452:	d2e9      	bcs.n	8000428 <__adddf3+0x10c>
 8000454:	f091 0f00 	teq	r1, #0
 8000458:	bf04      	itt	eq
 800045a:	4601      	moveq	r1, r0
 800045c:	2000      	moveq	r0, #0
 800045e:	fab1 f381 	clz	r3, r1
 8000462:	bf08      	it	eq
 8000464:	3320      	addeq	r3, #32
 8000466:	f1a3 030b 	sub.w	r3, r3, #11
 800046a:	f1b3 0220 	subs.w	r2, r3, #32
 800046e:	da0c      	bge.n	800048a <__adddf3+0x16e>
 8000470:	320c      	adds	r2, #12
 8000472:	dd08      	ble.n	8000486 <__adddf3+0x16a>
 8000474:	f102 0c14 	add.w	ip, r2, #20
 8000478:	f1c2 020c 	rsb	r2, r2, #12
 800047c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000480:	fa21 f102 	lsr.w	r1, r1, r2
 8000484:	e00c      	b.n	80004a0 <__adddf3+0x184>
 8000486:	f102 0214 	add.w	r2, r2, #20
 800048a:	bfd8      	it	le
 800048c:	f1c2 0c20 	rsble	ip, r2, #32
 8000490:	fa01 f102 	lsl.w	r1, r1, r2
 8000494:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000498:	bfdc      	itt	le
 800049a:	ea41 010c 	orrle.w	r1, r1, ip
 800049e:	4090      	lslle	r0, r2
 80004a0:	1ae4      	subs	r4, r4, r3
 80004a2:	bfa2      	ittt	ge
 80004a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004a8:	4329      	orrge	r1, r5
 80004aa:	bd30      	popge	{r4, r5, pc}
 80004ac:	ea6f 0404 	mvn.w	r4, r4
 80004b0:	3c1f      	subs	r4, #31
 80004b2:	da1c      	bge.n	80004ee <__adddf3+0x1d2>
 80004b4:	340c      	adds	r4, #12
 80004b6:	dc0e      	bgt.n	80004d6 <__adddf3+0x1ba>
 80004b8:	f104 0414 	add.w	r4, r4, #20
 80004bc:	f1c4 0220 	rsb	r2, r4, #32
 80004c0:	fa20 f004 	lsr.w	r0, r0, r4
 80004c4:	fa01 f302 	lsl.w	r3, r1, r2
 80004c8:	ea40 0003 	orr.w	r0, r0, r3
 80004cc:	fa21 f304 	lsr.w	r3, r1, r4
 80004d0:	ea45 0103 	orr.w	r1, r5, r3
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f1c4 040c 	rsb	r4, r4, #12
 80004da:	f1c4 0220 	rsb	r2, r4, #32
 80004de:	fa20 f002 	lsr.w	r0, r0, r2
 80004e2:	fa01 f304 	lsl.w	r3, r1, r4
 80004e6:	ea40 0003 	orr.w	r0, r0, r3
 80004ea:	4629      	mov	r1, r5
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	fa21 f004 	lsr.w	r0, r1, r4
 80004f2:	4629      	mov	r1, r5
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f094 0f00 	teq	r4, #0
 80004fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004fe:	bf06      	itte	eq
 8000500:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000504:	3401      	addeq	r4, #1
 8000506:	3d01      	subne	r5, #1
 8000508:	e74e      	b.n	80003a8 <__adddf3+0x8c>
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf18      	it	ne
 8000510:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000514:	d029      	beq.n	800056a <__adddf3+0x24e>
 8000516:	ea94 0f05 	teq	r4, r5
 800051a:	bf08      	it	eq
 800051c:	ea90 0f02 	teqeq	r0, r2
 8000520:	d005      	beq.n	800052e <__adddf3+0x212>
 8000522:	ea54 0c00 	orrs.w	ip, r4, r0
 8000526:	bf04      	itt	eq
 8000528:	4619      	moveq	r1, r3
 800052a:	4610      	moveq	r0, r2
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	ea91 0f03 	teq	r1, r3
 8000532:	bf1e      	ittt	ne
 8000534:	2100      	movne	r1, #0
 8000536:	2000      	movne	r0, #0
 8000538:	bd30      	popne	{r4, r5, pc}
 800053a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800053e:	d105      	bne.n	800054c <__adddf3+0x230>
 8000540:	0040      	lsls	r0, r0, #1
 8000542:	4149      	adcs	r1, r1
 8000544:	bf28      	it	cs
 8000546:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000550:	bf3c      	itt	cc
 8000552:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000556:	bd30      	popcc	{r4, r5, pc}
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800055c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000560:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000564:	f04f 0000 	mov.w	r0, #0
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf1a      	itte	ne
 8000570:	4619      	movne	r1, r3
 8000572:	4610      	movne	r0, r2
 8000574:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000578:	bf1c      	itt	ne
 800057a:	460b      	movne	r3, r1
 800057c:	4602      	movne	r2, r0
 800057e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000582:	bf06      	itte	eq
 8000584:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000588:	ea91 0f03 	teqeq	r1, r3
 800058c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	bf00      	nop

08000594 <__aeabi_ui2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f04f 0500 	mov.w	r5, #0
 80005ac:	f04f 0100 	mov.w	r1, #0
 80005b0:	e750      	b.n	8000454 <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_i2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005cc:	bf48      	it	mi
 80005ce:	4240      	negmi	r0, r0
 80005d0:	f04f 0100 	mov.w	r1, #0
 80005d4:	e73e      	b.n	8000454 <__adddf3+0x138>
 80005d6:	bf00      	nop

080005d8 <__aeabi_f2d>:
 80005d8:	0042      	lsls	r2, r0, #1
 80005da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005de:	ea4f 0131 	mov.w	r1, r1, rrx
 80005e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005e6:	bf1f      	itttt	ne
 80005e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005f4:	4770      	bxne	lr
 80005f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005fa:	bf08      	it	eq
 80005fc:	4770      	bxeq	lr
 80005fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000602:	bf04      	itt	eq
 8000604:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000608:	4770      	bxeq	lr
 800060a:	b530      	push	{r4, r5, lr}
 800060c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000610:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000614:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000618:	e71c      	b.n	8000454 <__adddf3+0x138>
 800061a:	bf00      	nop

0800061c <__aeabi_ul2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f04f 0500 	mov.w	r5, #0
 800062a:	e00a      	b.n	8000642 <__aeabi_l2d+0x16>

0800062c <__aeabi_l2d>:
 800062c:	ea50 0201 	orrs.w	r2, r0, r1
 8000630:	bf08      	it	eq
 8000632:	4770      	bxeq	lr
 8000634:	b530      	push	{r4, r5, lr}
 8000636:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800063a:	d502      	bpl.n	8000642 <__aeabi_l2d+0x16>
 800063c:	4240      	negs	r0, r0
 800063e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000642:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000646:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800064e:	f43f aed8 	beq.w	8000402 <__adddf3+0xe6>
 8000652:	f04f 0203 	mov.w	r2, #3
 8000656:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800065a:	bf18      	it	ne
 800065c:	3203      	addne	r2, #3
 800065e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000662:	bf18      	it	ne
 8000664:	3203      	addne	r2, #3
 8000666:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800066a:	f1c2 0320 	rsb	r3, r2, #32
 800066e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000672:	fa20 f002 	lsr.w	r0, r0, r2
 8000676:	fa01 fe03 	lsl.w	lr, r1, r3
 800067a:	ea40 000e 	orr.w	r0, r0, lr
 800067e:	fa21 f102 	lsr.w	r1, r1, r2
 8000682:	4414      	add	r4, r2
 8000684:	e6bd      	b.n	8000402 <__adddf3+0xe6>
 8000686:	bf00      	nop

08000688 <__aeabi_uldivmod>:
 8000688:	b953      	cbnz	r3, 80006a0 <__aeabi_uldivmod+0x18>
 800068a:	b94a      	cbnz	r2, 80006a0 <__aeabi_uldivmod+0x18>
 800068c:	2900      	cmp	r1, #0
 800068e:	bf08      	it	eq
 8000690:	2800      	cmpeq	r0, #0
 8000692:	bf1c      	itt	ne
 8000694:	f04f 31ff 	movne.w	r1, #4294967295
 8000698:	f04f 30ff 	movne.w	r0, #4294967295
 800069c:	f000 b9a6 	b.w	80009ec <__aeabi_idiv0>
 80006a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006a8:	f000 f83e 	bl	8000728 <__udivmoddi4>
 80006ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006b4:	b004      	add	sp, #16
 80006b6:	4770      	bx	lr

080006b8 <__aeabi_d2lz>:
 80006b8:	b508      	push	{r3, lr}
 80006ba:	4602      	mov	r2, r0
 80006bc:	460b      	mov	r3, r1
 80006be:	ec43 2b17 	vmov	d7, r2, r3
 80006c2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006ca:	d403      	bmi.n	80006d4 <__aeabi_d2lz+0x1c>
 80006cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006d0:	f000 b80a 	b.w	80006e8 <__aeabi_d2ulz>
 80006d4:	eeb1 7b47 	vneg.f64	d7, d7
 80006d8:	ec51 0b17 	vmov	r0, r1, d7
 80006dc:	f000 f804 	bl	80006e8 <__aeabi_d2ulz>
 80006e0:	4240      	negs	r0, r0
 80006e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e6:	bd08      	pop	{r3, pc}

080006e8 <__aeabi_d2ulz>:
 80006e8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000718 <__aeabi_d2ulz+0x30>
 80006ec:	ec41 0b17 	vmov	d7, r0, r1
 80006f0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000720 <__aeabi_d2ulz+0x38>
 80006f4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006f8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006fc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000700:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000704:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000708:	ee16 1a10 	vmov	r1, s12
 800070c:	ee17 0a90 	vmov	r0, s15
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	f3af 8000 	nop.w
 8000718:	00000000 	.word	0x00000000
 800071c:	3df00000 	.word	0x3df00000
 8000720:	00000000 	.word	0x00000000
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800072c:	9d08      	ldr	r5, [sp, #32]
 800072e:	4604      	mov	r4, r0
 8000730:	468c      	mov	ip, r1
 8000732:	2b00      	cmp	r3, #0
 8000734:	f040 8083 	bne.w	800083e <__udivmoddi4+0x116>
 8000738:	428a      	cmp	r2, r1
 800073a:	4617      	mov	r7, r2
 800073c:	d947      	bls.n	80007ce <__udivmoddi4+0xa6>
 800073e:	fab2 f282 	clz	r2, r2
 8000742:	b142      	cbz	r2, 8000756 <__udivmoddi4+0x2e>
 8000744:	f1c2 0020 	rsb	r0, r2, #32
 8000748:	fa24 f000 	lsr.w	r0, r4, r0
 800074c:	4091      	lsls	r1, r2
 800074e:	4097      	lsls	r7, r2
 8000750:	ea40 0c01 	orr.w	ip, r0, r1
 8000754:	4094      	lsls	r4, r2
 8000756:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800075a:	0c23      	lsrs	r3, r4, #16
 800075c:	fbbc f6f8 	udiv	r6, ip, r8
 8000760:	fa1f fe87 	uxth.w	lr, r7
 8000764:	fb08 c116 	mls	r1, r8, r6, ip
 8000768:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800076c:	fb06 f10e 	mul.w	r1, r6, lr
 8000770:	4299      	cmp	r1, r3
 8000772:	d909      	bls.n	8000788 <__udivmoddi4+0x60>
 8000774:	18fb      	adds	r3, r7, r3
 8000776:	f106 30ff 	add.w	r0, r6, #4294967295
 800077a:	f080 8119 	bcs.w	80009b0 <__udivmoddi4+0x288>
 800077e:	4299      	cmp	r1, r3
 8000780:	f240 8116 	bls.w	80009b0 <__udivmoddi4+0x288>
 8000784:	3e02      	subs	r6, #2
 8000786:	443b      	add	r3, r7
 8000788:	1a5b      	subs	r3, r3, r1
 800078a:	b2a4      	uxth	r4, r4
 800078c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000790:	fb08 3310 	mls	r3, r8, r0, r3
 8000794:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000798:	fb00 fe0e 	mul.w	lr, r0, lr
 800079c:	45a6      	cmp	lr, r4
 800079e:	d909      	bls.n	80007b4 <__udivmoddi4+0x8c>
 80007a0:	193c      	adds	r4, r7, r4
 80007a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80007a6:	f080 8105 	bcs.w	80009b4 <__udivmoddi4+0x28c>
 80007aa:	45a6      	cmp	lr, r4
 80007ac:	f240 8102 	bls.w	80009b4 <__udivmoddi4+0x28c>
 80007b0:	3802      	subs	r0, #2
 80007b2:	443c      	add	r4, r7
 80007b4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007b8:	eba4 040e 	sub.w	r4, r4, lr
 80007bc:	2600      	movs	r6, #0
 80007be:	b11d      	cbz	r5, 80007c8 <__udivmoddi4+0xa0>
 80007c0:	40d4      	lsrs	r4, r2
 80007c2:	2300      	movs	r3, #0
 80007c4:	e9c5 4300 	strd	r4, r3, [r5]
 80007c8:	4631      	mov	r1, r6
 80007ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ce:	b902      	cbnz	r2, 80007d2 <__udivmoddi4+0xaa>
 80007d0:	deff      	udf	#255	; 0xff
 80007d2:	fab2 f282 	clz	r2, r2
 80007d6:	2a00      	cmp	r2, #0
 80007d8:	d150      	bne.n	800087c <__udivmoddi4+0x154>
 80007da:	1bcb      	subs	r3, r1, r7
 80007dc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007e0:	fa1f f887 	uxth.w	r8, r7
 80007e4:	2601      	movs	r6, #1
 80007e6:	fbb3 fcfe 	udiv	ip, r3, lr
 80007ea:	0c21      	lsrs	r1, r4, #16
 80007ec:	fb0e 331c 	mls	r3, lr, ip, r3
 80007f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007f4:	fb08 f30c 	mul.w	r3, r8, ip
 80007f8:	428b      	cmp	r3, r1
 80007fa:	d907      	bls.n	800080c <__udivmoddi4+0xe4>
 80007fc:	1879      	adds	r1, r7, r1
 80007fe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000802:	d202      	bcs.n	800080a <__udivmoddi4+0xe2>
 8000804:	428b      	cmp	r3, r1
 8000806:	f200 80e9 	bhi.w	80009dc <__udivmoddi4+0x2b4>
 800080a:	4684      	mov	ip, r0
 800080c:	1ac9      	subs	r1, r1, r3
 800080e:	b2a3      	uxth	r3, r4
 8000810:	fbb1 f0fe 	udiv	r0, r1, lr
 8000814:	fb0e 1110 	mls	r1, lr, r0, r1
 8000818:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800081c:	fb08 f800 	mul.w	r8, r8, r0
 8000820:	45a0      	cmp	r8, r4
 8000822:	d907      	bls.n	8000834 <__udivmoddi4+0x10c>
 8000824:	193c      	adds	r4, r7, r4
 8000826:	f100 33ff 	add.w	r3, r0, #4294967295
 800082a:	d202      	bcs.n	8000832 <__udivmoddi4+0x10a>
 800082c:	45a0      	cmp	r8, r4
 800082e:	f200 80d9 	bhi.w	80009e4 <__udivmoddi4+0x2bc>
 8000832:	4618      	mov	r0, r3
 8000834:	eba4 0408 	sub.w	r4, r4, r8
 8000838:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800083c:	e7bf      	b.n	80007be <__udivmoddi4+0x96>
 800083e:	428b      	cmp	r3, r1
 8000840:	d909      	bls.n	8000856 <__udivmoddi4+0x12e>
 8000842:	2d00      	cmp	r5, #0
 8000844:	f000 80b1 	beq.w	80009aa <__udivmoddi4+0x282>
 8000848:	2600      	movs	r6, #0
 800084a:	e9c5 0100 	strd	r0, r1, [r5]
 800084e:	4630      	mov	r0, r6
 8000850:	4631      	mov	r1, r6
 8000852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000856:	fab3 f683 	clz	r6, r3
 800085a:	2e00      	cmp	r6, #0
 800085c:	d14a      	bne.n	80008f4 <__udivmoddi4+0x1cc>
 800085e:	428b      	cmp	r3, r1
 8000860:	d302      	bcc.n	8000868 <__udivmoddi4+0x140>
 8000862:	4282      	cmp	r2, r0
 8000864:	f200 80b8 	bhi.w	80009d8 <__udivmoddi4+0x2b0>
 8000868:	1a84      	subs	r4, r0, r2
 800086a:	eb61 0103 	sbc.w	r1, r1, r3
 800086e:	2001      	movs	r0, #1
 8000870:	468c      	mov	ip, r1
 8000872:	2d00      	cmp	r5, #0
 8000874:	d0a8      	beq.n	80007c8 <__udivmoddi4+0xa0>
 8000876:	e9c5 4c00 	strd	r4, ip, [r5]
 800087a:	e7a5      	b.n	80007c8 <__udivmoddi4+0xa0>
 800087c:	f1c2 0320 	rsb	r3, r2, #32
 8000880:	fa20 f603 	lsr.w	r6, r0, r3
 8000884:	4097      	lsls	r7, r2
 8000886:	fa01 f002 	lsl.w	r0, r1, r2
 800088a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800088e:	40d9      	lsrs	r1, r3
 8000890:	4330      	orrs	r0, r6
 8000892:	0c03      	lsrs	r3, r0, #16
 8000894:	fbb1 f6fe 	udiv	r6, r1, lr
 8000898:	fa1f f887 	uxth.w	r8, r7
 800089c:	fb0e 1116 	mls	r1, lr, r6, r1
 80008a0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008a4:	fb06 f108 	mul.w	r1, r6, r8
 80008a8:	4299      	cmp	r1, r3
 80008aa:	fa04 f402 	lsl.w	r4, r4, r2
 80008ae:	d909      	bls.n	80008c4 <__udivmoddi4+0x19c>
 80008b0:	18fb      	adds	r3, r7, r3
 80008b2:	f106 3cff 	add.w	ip, r6, #4294967295
 80008b6:	f080 808d 	bcs.w	80009d4 <__udivmoddi4+0x2ac>
 80008ba:	4299      	cmp	r1, r3
 80008bc:	f240 808a 	bls.w	80009d4 <__udivmoddi4+0x2ac>
 80008c0:	3e02      	subs	r6, #2
 80008c2:	443b      	add	r3, r7
 80008c4:	1a5b      	subs	r3, r3, r1
 80008c6:	b281      	uxth	r1, r0
 80008c8:	fbb3 f0fe 	udiv	r0, r3, lr
 80008cc:	fb0e 3310 	mls	r3, lr, r0, r3
 80008d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008d4:	fb00 f308 	mul.w	r3, r0, r8
 80008d8:	428b      	cmp	r3, r1
 80008da:	d907      	bls.n	80008ec <__udivmoddi4+0x1c4>
 80008dc:	1879      	adds	r1, r7, r1
 80008de:	f100 3cff 	add.w	ip, r0, #4294967295
 80008e2:	d273      	bcs.n	80009cc <__udivmoddi4+0x2a4>
 80008e4:	428b      	cmp	r3, r1
 80008e6:	d971      	bls.n	80009cc <__udivmoddi4+0x2a4>
 80008e8:	3802      	subs	r0, #2
 80008ea:	4439      	add	r1, r7
 80008ec:	1acb      	subs	r3, r1, r3
 80008ee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80008f2:	e778      	b.n	80007e6 <__udivmoddi4+0xbe>
 80008f4:	f1c6 0c20 	rsb	ip, r6, #32
 80008f8:	fa03 f406 	lsl.w	r4, r3, r6
 80008fc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000900:	431c      	orrs	r4, r3
 8000902:	fa20 f70c 	lsr.w	r7, r0, ip
 8000906:	fa01 f306 	lsl.w	r3, r1, r6
 800090a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800090e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000912:	431f      	orrs	r7, r3
 8000914:	0c3b      	lsrs	r3, r7, #16
 8000916:	fbb1 f9fe 	udiv	r9, r1, lr
 800091a:	fa1f f884 	uxth.w	r8, r4
 800091e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000922:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000926:	fb09 fa08 	mul.w	sl, r9, r8
 800092a:	458a      	cmp	sl, r1
 800092c:	fa02 f206 	lsl.w	r2, r2, r6
 8000930:	fa00 f306 	lsl.w	r3, r0, r6
 8000934:	d908      	bls.n	8000948 <__udivmoddi4+0x220>
 8000936:	1861      	adds	r1, r4, r1
 8000938:	f109 30ff 	add.w	r0, r9, #4294967295
 800093c:	d248      	bcs.n	80009d0 <__udivmoddi4+0x2a8>
 800093e:	458a      	cmp	sl, r1
 8000940:	d946      	bls.n	80009d0 <__udivmoddi4+0x2a8>
 8000942:	f1a9 0902 	sub.w	r9, r9, #2
 8000946:	4421      	add	r1, r4
 8000948:	eba1 010a 	sub.w	r1, r1, sl
 800094c:	b2bf      	uxth	r7, r7
 800094e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000952:	fb0e 1110 	mls	r1, lr, r0, r1
 8000956:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800095a:	fb00 f808 	mul.w	r8, r0, r8
 800095e:	45b8      	cmp	r8, r7
 8000960:	d907      	bls.n	8000972 <__udivmoddi4+0x24a>
 8000962:	19e7      	adds	r7, r4, r7
 8000964:	f100 31ff 	add.w	r1, r0, #4294967295
 8000968:	d22e      	bcs.n	80009c8 <__udivmoddi4+0x2a0>
 800096a:	45b8      	cmp	r8, r7
 800096c:	d92c      	bls.n	80009c8 <__udivmoddi4+0x2a0>
 800096e:	3802      	subs	r0, #2
 8000970:	4427      	add	r7, r4
 8000972:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000976:	eba7 0708 	sub.w	r7, r7, r8
 800097a:	fba0 8902 	umull	r8, r9, r0, r2
 800097e:	454f      	cmp	r7, r9
 8000980:	46c6      	mov	lr, r8
 8000982:	4649      	mov	r1, r9
 8000984:	d31a      	bcc.n	80009bc <__udivmoddi4+0x294>
 8000986:	d017      	beq.n	80009b8 <__udivmoddi4+0x290>
 8000988:	b15d      	cbz	r5, 80009a2 <__udivmoddi4+0x27a>
 800098a:	ebb3 020e 	subs.w	r2, r3, lr
 800098e:	eb67 0701 	sbc.w	r7, r7, r1
 8000992:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000996:	40f2      	lsrs	r2, r6
 8000998:	ea4c 0202 	orr.w	r2, ip, r2
 800099c:	40f7      	lsrs	r7, r6
 800099e:	e9c5 2700 	strd	r2, r7, [r5]
 80009a2:	2600      	movs	r6, #0
 80009a4:	4631      	mov	r1, r6
 80009a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009aa:	462e      	mov	r6, r5
 80009ac:	4628      	mov	r0, r5
 80009ae:	e70b      	b.n	80007c8 <__udivmoddi4+0xa0>
 80009b0:	4606      	mov	r6, r0
 80009b2:	e6e9      	b.n	8000788 <__udivmoddi4+0x60>
 80009b4:	4618      	mov	r0, r3
 80009b6:	e6fd      	b.n	80007b4 <__udivmoddi4+0x8c>
 80009b8:	4543      	cmp	r3, r8
 80009ba:	d2e5      	bcs.n	8000988 <__udivmoddi4+0x260>
 80009bc:	ebb8 0e02 	subs.w	lr, r8, r2
 80009c0:	eb69 0104 	sbc.w	r1, r9, r4
 80009c4:	3801      	subs	r0, #1
 80009c6:	e7df      	b.n	8000988 <__udivmoddi4+0x260>
 80009c8:	4608      	mov	r0, r1
 80009ca:	e7d2      	b.n	8000972 <__udivmoddi4+0x24a>
 80009cc:	4660      	mov	r0, ip
 80009ce:	e78d      	b.n	80008ec <__udivmoddi4+0x1c4>
 80009d0:	4681      	mov	r9, r0
 80009d2:	e7b9      	b.n	8000948 <__udivmoddi4+0x220>
 80009d4:	4666      	mov	r6, ip
 80009d6:	e775      	b.n	80008c4 <__udivmoddi4+0x19c>
 80009d8:	4630      	mov	r0, r6
 80009da:	e74a      	b.n	8000872 <__udivmoddi4+0x14a>
 80009dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80009e0:	4439      	add	r1, r7
 80009e2:	e713      	b.n	800080c <__udivmoddi4+0xe4>
 80009e4:	3802      	subs	r0, #2
 80009e6:	443c      	add	r4, r7
 80009e8:	e724      	b.n	8000834 <__udivmoddi4+0x10c>
 80009ea:	bf00      	nop

080009ec <__aeabi_idiv0>:
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009f6:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <HAL_MspInit+0x44>)
 80009f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fa:	4a0e      	ldr	r2, [pc, #56]	; (8000a34 <HAL_MspInit+0x44>)
 80009fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a00:	6413      	str	r3, [r2, #64]	; 0x40
 8000a02:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <HAL_MspInit+0x44>)
 8000a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0e:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <HAL_MspInit+0x44>)
 8000a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a12:	4a08      	ldr	r2, [pc, #32]	; (8000a34 <HAL_MspInit+0x44>)
 8000a14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a18:	6453      	str	r3, [r2, #68]	; 0x44
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <HAL_MspInit+0x44>)
 8000a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a22:	603b      	str	r3, [r7, #0]
 8000a24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a26:	bf00      	nop
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	40023800 	.word	0x40023800

08000a38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <NMI_Handler+0x4>

08000a3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a42:	e7fe      	b.n	8000a42 <HardFault_Handler+0x4>

08000a44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a48:	e7fe      	b.n	8000a48 <MemManage_Handler+0x4>

08000a4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a4e:	e7fe      	b.n	8000a4e <BusFault_Handler+0x4>

08000a50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a54:	e7fe      	b.n	8000a54 <UsageFault_Handler+0x4>

08000a56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a56:	b480      	push	{r7}
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr

08000a64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr

08000a72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a84:	f002 fae4 	bl	8003050 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a88:	bf00      	nop
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000a90:	4802      	ldr	r0, [pc, #8]	; (8000a9c <DMA1_Stream1_IRQHandler+0x10>)
 8000a92:	f002 fe3f 	bl	8003714 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	200008a8 	.word	0x200008a8

08000aa0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000aa4:	4802      	ldr	r0, [pc, #8]	; (8000ab0 <USART3_IRQHandler+0x10>)
 8000aa6:	f005 f989 	bl	8005dbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000824 	.word	0x20000824

08000ab4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ab8:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <SystemInit+0x20>)
 8000aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000abe:	4a05      	ldr	r2, [pc, #20]	; (8000ad4 <SystemInit+0x20>)
 8000ac0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ac4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <cliInit>:
void cliMemoryDump(cli_args_t *args);
void cliMemoryWrite(cli_args_t *args);
void cliMemoryDelete(cli_args_t *args);

bool cliInit(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  cli_node.is_open = false;
 8000adc:	4b1f      	ldr	r3, [pc, #124]	; (8000b5c <cliInit+0x84>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	721a      	strb	r2, [r3, #8]
  cli_node.is_log  = false;
 8000ae2:	4b1e      	ldr	r3, [pc, #120]	; (8000b5c <cliInit+0x84>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	725a      	strb	r2, [r3, #9]
  cli_node.state   = CLI_RX_IDLE;
 8000ae8:	4b1c      	ldr	r3, [pc, #112]	; (8000b5c <cliInit+0x84>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	741a      	strb	r2, [r3, #16]

  cli_node.hist_line_i     = 0;
 8000aee:	4b1b      	ldr	r3, [pc, #108]	; (8000b5c <cliInit+0x84>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  cli_node.hist_line_last  = 0;
 8000af6:	4b19      	ldr	r3, [pc, #100]	; (8000b5c <cliInit+0x84>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  cli_node.hist_line_count = 0;
 8000afe:	4b17      	ldr	r3, [pc, #92]	; (8000b5c <cliInit+0x84>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  cli_node.hist_line_new   = false;
 8000b06:	4b15      	ldr	r3, [pc, #84]	; (8000b5c <cliInit+0x84>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

  cli_node.cmd_args.getData  = cliArgsGetData;
 8000b0e:	4b13      	ldr	r3, [pc, #76]	; (8000b5c <cliInit+0x84>)
 8000b10:	4a13      	ldr	r2, [pc, #76]	; (8000b60 <cliInit+0x88>)
 8000b12:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 8000b16:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <cliInit+0x84>)
 8000b18:	4a12      	ldr	r2, [pc, #72]	; (8000b64 <cliInit+0x8c>)
 8000b1a:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 8000b1e:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <cliInit+0x84>)
 8000b20:	4a11      	ldr	r2, [pc, #68]	; (8000b68 <cliInit+0x90>)
 8000b22:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 8000b26:	4b0d      	ldr	r3, [pc, #52]	; (8000b5c <cliInit+0x84>)
 8000b28:	4a10      	ldr	r2, [pc, #64]	; (8000b6c <cliInit+0x94>)
 8000b2a:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440

  cliLineClean(&cli_node);
 8000b2e:	480b      	ldr	r0, [pc, #44]	; (8000b5c <cliInit+0x84>)
 8000b30:	f000 fae0 	bl	80010f4 <cliLineClean>


  cliAdd("help", cliShowList);
 8000b34:	490e      	ldr	r1, [pc, #56]	; (8000b70 <cliInit+0x98>)
 8000b36:	480f      	ldr	r0, [pc, #60]	; (8000b74 <cliInit+0x9c>)
 8000b38:	f000 fd60 	bl	80015fc <cliAdd>
  cliAdd("md"  , cliMemoryDump);
 8000b3c:	490e      	ldr	r1, [pc, #56]	; (8000b78 <cliInit+0xa0>)
 8000b3e:	480f      	ldr	r0, [pc, #60]	; (8000b7c <cliInit+0xa4>)
 8000b40:	f000 fd5c 	bl	80015fc <cliAdd>
  cliAdd("mw8", cliMemoryWrite);
 8000b44:	490e      	ldr	r1, [pc, #56]	; (8000b80 <cliInit+0xa8>)
 8000b46:	480f      	ldr	r0, [pc, #60]	; (8000b84 <cliInit+0xac>)
 8000b48:	f000 fd58 	bl	80015fc <cliAdd>
  cliOpen(2,115200);
 8000b4c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000b50:	2002      	movs	r0, #2
 8000b52:	f000 f819 	bl	8000b88 <cliOpen>

  return true;
 8000b56:	2301      	movs	r3, #1
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	200003a8 	.word	0x200003a8
 8000b60:	080014b9 	.word	0x080014b9
 8000b64:	08001509 	.word	0x08001509
 8000b68:	08001561 	.word	0x08001561
 8000b6c:	080015a9 	.word	0x080015a9
 8000b70:	08001691 	.word	0x08001691
 8000b74:	0800a188 	.word	0x0800a188
 8000b78:	08001701 	.word	0x08001701
 8000b7c:	0800a190 	.word	0x0800a190
 8000b80:	08001839 	.word	0x08001839
 8000b84:	0800a194 	.word	0x0800a194

08000b88 <cliOpen>:

bool cliOpen(uint8_t ch, uint32_t baud)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	6039      	str	r1, [r7, #0]
 8000b92:	71fb      	strb	r3, [r7, #7]
  cli_node.ch = ch;
 8000b94:	4a08      	ldr	r2, [pc, #32]	; (8000bb8 <cliOpen+0x30>)
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	7013      	strb	r3, [r2, #0]
  cli_node.baud = baud;
 8000b9a:	4a07      	ldr	r2, [pc, #28]	; (8000bb8 <cliOpen+0x30>)
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	6053      	str	r3, [r2, #4]

  //cli_node.is_open = uartOpen(ch, baud);
  cli_node.is_open = 1;
 8000ba0:	4b05      	ldr	r3, [pc, #20]	; (8000bb8 <cliOpen+0x30>)
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	721a      	strb	r2, [r3, #8]
  return cli_node.is_open;
 8000ba6:	4b04      	ldr	r3, [pc, #16]	; (8000bb8 <cliOpen+0x30>)
 8000ba8:	7a1b      	ldrb	r3, [r3, #8]
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	200003a8 	.word	0x200003a8

08000bbc <cliShowPrompt>:
    uartPrintf(p_cli->log_ch, "\n");
  }
}
*/
void cliShowPrompt(cli_t *p_cli)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  uartPrintf(p_cli->ch, "\n\r");
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	4906      	ldr	r1, [pc, #24]	; (8000be4 <cliShowPrompt+0x28>)
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f001 fc6a 	bl	80024a4 <uartPrintf>
  uartPrintf(p_cli->ch, CLI_PROMPT_STR);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	4904      	ldr	r1, [pc, #16]	; (8000be8 <cliShowPrompt+0x2c>)
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f001 fc64 	bl	80024a4 <uartPrintf>

}
 8000bdc:	bf00      	nop
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	0800a198 	.word	0x0800a198
 8000be8:	0800a19c 	.word	0x0800a19c

08000bec <cliMain>:

bool cliMain(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  if (cli_node.is_open != true)
 8000bf0:	4b0d      	ldr	r3, [pc, #52]	; (8000c28 <cliMain+0x3c>)
 8000bf2:	7a1b      	ldrb	r3, [r3, #8]
 8000bf4:	f083 0301 	eor.w	r3, r3, #1
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <cliMain+0x16>
  {
    return false;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	e010      	b.n	8000c24 <cliMain+0x38>
  }

  if (uartAvailable(2) > 0)
 8000c02:	2002      	movs	r0, #2
 8000c04:	f001 fbd8 	bl	80023b8 <uartAvailable>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d009      	beq.n	8000c22 <cliMain+0x36>
  {
    cliUpdate(&cli_node, uartRead(cli_node.ch));
 8000c0e:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <cliMain+0x3c>)
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	4618      	mov	r0, r3
 8000c14:	f001 fbfe 	bl	8002414 <uartRead>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4802      	ldr	r0, [pc, #8]	; (8000c28 <cliMain+0x3c>)
 8000c1e:	f000 f805 	bl	8000c2c <cliUpdate>
  }

  return true;
 8000c22:	2301      	movs	r3, #1
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	200003a8 	.word	0x200003a8

08000c2c <cliUpdate>:
{
  return uartWrite(2, p_data, length);
}

bool cliUpdate(cli_t *p_cli, uint8_t rx_data)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08c      	sub	sp, #48	; 0x30
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	460b      	mov	r3, r1
 8000c36:	70fb      	strb	r3, [r7, #3]
  bool ret = false;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t tx_buf[8];
  cli_line_t *line;

  line = &p_cli->line;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8000c44:	61fb      	str	r3, [r7, #28]


  if (p_cli->state == CLI_RX_IDLE)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	7c1b      	ldrb	r3, [r3, #16]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	f040 8168 	bne.w	8000f20 <cliUpdate+0x2f4>
  {
    switch(rx_data)
 8000c50:	78fb      	ldrb	r3, [r7, #3]
 8000c52:	2b7f      	cmp	r3, #127	; 0x7f
 8000c54:	d02a      	beq.n	8000cac <cliUpdate+0x80>
 8000c56:	2b7f      	cmp	r3, #127	; 0x7f
 8000c58:	f300 80da 	bgt.w	8000e10 <cliUpdate+0x1e4>
 8000c5c:	2b1b      	cmp	r3, #27
 8000c5e:	d021      	beq.n	8000ca4 <cliUpdate+0x78>
 8000c60:	2b1b      	cmp	r3, #27
 8000c62:	f300 80d5 	bgt.w	8000e10 <cliUpdate+0x1e4>
 8000c66:	2b08      	cmp	r3, #8
 8000c68:	d062      	beq.n	8000d30 <cliUpdate+0x104>
 8000c6a:	2b0d      	cmp	r3, #13
 8000c6c:	f040 80d0 	bne.w	8000e10 <cliUpdate+0x1e4>
    {
      case CLI_KEY_ENTER:
        if (line->count > 0)
 8000c70:	69fb      	ldr	r3, [r7, #28]
 8000c72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d005      	beq.n	8000c86 <cliUpdate+0x5a>
        {
          cliLineAdd(p_cli);
 8000c7a:	6878      	ldr	r0, [r7, #4]
 8000c7c:	f000 fa54 	bl	8001128 <cliLineAdd>
          cliRunCmd(p_cli);
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	f000 fb1f 	bl	80012c4 <cliRunCmd>
        }

        line->count = 0;
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	2200      	movs	r2, #0
 8000c8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        line->cursor = 0;
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	2200      	movs	r2, #0
 8000c92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        line->buf[0] = 0;
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	2200      	movs	r2, #0
 8000c9a:	701a      	strb	r2, [r3, #0]
        cliShowPrompt(p_cli);
 8000c9c:	6878      	ldr	r0, [r7, #4]
 8000c9e:	f7ff ff8d 	bl	8000bbc <cliShowPrompt>
        break;
 8000ca2:	e144      	b.n	8000f2e <cliUpdate+0x302>
      case CLI_KEY_ESC:
        p_cli->state = CLI_RX_SP1;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	741a      	strb	r2, [r3, #16]
        break;
 8000caa:	e140      	b.n	8000f2e <cliUpdate+0x302>
      case CLI_KEY_DEL:
        if (line->cursor < line->count)
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	f080 8133 	bcs.w	8000f24 <cliUpdate+0x2f8>
        {
          uint8_t mov_len;

          mov_len = line->count - line->cursor;
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8000cc4:	69fb      	ldr	r3, [r7, #28]
 8000cc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000cca:	1ad3      	subs	r3, r2, r3
 8000ccc:	76fb      	strb	r3, [r7, #27]
          for (int i=1; i<mov_len; i++)
 8000cce:	2301      	movs	r3, #1
 8000cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000cd2:	e013      	b.n	8000cfc <cliUpdate+0xd0>
          {
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8000cd4:	69fb      	ldr	r3, [r7, #28]
 8000cd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000cda:	461a      	mov	r2, r3
 8000cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cde:	441a      	add	r2, r3
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cea:	440b      	add	r3, r1
 8000cec:	3b01      	subs	r3, #1
 8000cee:	69f9      	ldr	r1, [r7, #28]
 8000cf0:	5c89      	ldrb	r1, [r1, r2]
 8000cf2:	69fa      	ldr	r2, [r7, #28]
 8000cf4:	54d1      	strb	r1, [r2, r3]
          for (int i=1; i<mov_len; i++)
 8000cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000cfc:	7efb      	ldrb	r3, [r7, #27]
 8000cfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d00:	429a      	cmp	r2, r3
 8000d02:	dbe7      	blt.n	8000cd4 <cliUpdate+0xa8>
          }

          line->count--;
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	b2da      	uxtb	r2, r3
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          line->buf[line->count] = 0;
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	2100      	movs	r1, #0
 8000d20:	5499      	strb	r1, [r3, r2]

          uartPrintf(p_cli->ch, "\x1B[1P");
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	498e      	ldr	r1, [pc, #568]	; (8000f60 <cliUpdate+0x334>)
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f001 fbbb 	bl	80024a4 <uartPrintf>
        }
        break;
 8000d2e:	e0f9      	b.n	8000f24 <cliUpdate+0x2f8>
      case CLI_KEY_BACK:
        if (line->count > 0 && line->cursor > 0)
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d055      	beq.n	8000de6 <cliUpdate+0x1ba>
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d050      	beq.n	8000de6 <cliUpdate+0x1ba>
        {
          if (line->cursor == line->count)
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d10e      	bne.n	8000d72 <cliUpdate+0x146>
          {
            line->count--;
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	b2da      	uxtb	r2, r3
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->buf[line->count] = 0;
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	2100      	movs	r1, #0
 8000d70:	5499      	strb	r1, [r3, r2]
          }

          if (line->cursor < line->count)
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d231      	bcs.n	8000de6 <cliUpdate+0x1ba>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000d8e:	1ad3      	subs	r3, r2, r3
 8000d90:	76bb      	strb	r3, [r7, #26]

            for (int i=0; i<mov_len; i++)
 8000d92:	2300      	movs	r3, #0
 8000d94:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d96:	e013      	b.n	8000dc0 <cliUpdate+0x194>
            {
              line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000d9e:	461a      	mov	r2, r3
 8000da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000da2:	441a      	add	r2, r3
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000daa:	4619      	mov	r1, r3
 8000dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dae:	440b      	add	r3, r1
 8000db0:	3b01      	subs	r3, #1
 8000db2:	69f9      	ldr	r1, [r7, #28]
 8000db4:	5c89      	ldrb	r1, [r1, r2]
 8000db6:	69fa      	ldr	r2, [r7, #28]
 8000db8:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 8000dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8000dc0:	7ebb      	ldrb	r3, [r7, #26]
 8000dc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	dbe7      	blt.n	8000d98 <cliUpdate+0x16c>
            }

            line->count--;
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000dce:	3b01      	subs	r3, #1
 8000dd0:	b2da      	uxtb	r2, r3
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->buf[line->count] = 0;
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000dde:	461a      	mov	r2, r3
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	2100      	movs	r1, #0
 8000de4:	5499      	strb	r1, [r3, r2]
          }
        }

        if (line->cursor > 0)
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	f000 809b 	beq.w	8000f28 <cliUpdate+0x2fc>
        {
          line->cursor--;
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000df8:	3b01      	subs	r3, #1
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	4957      	ldr	r1, [pc, #348]	; (8000f64 <cliUpdate+0x338>)
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f001 fb4b 	bl	80024a4 <uartPrintf>
        }
        break;
 8000e0e:	e08b      	b.n	8000f28 <cliUpdate+0x2fc>
      default:
        if ((line->count + 1) < line->buf_len)
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000e16:	3301      	adds	r3, #1
 8000e18:	69fa      	ldr	r2, [r7, #28]
 8000e1a:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	f280 8084 	bge.w	8000f2c <cliUpdate+0x300>
        {
          if (line->cursor == line->count)
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d124      	bne.n	8000e7e <cliUpdate+0x252>
          {
            uartWrite(p_cli->ch, &rx_data, 1);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	1cf9      	adds	r1, r7, #3
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f001 fb09 	bl	8002454 <uartWrite>

            line->buf[line->cursor] = rx_data;
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000e48:	461a      	mov	r2, r3
 8000e4a:	78f9      	ldrb	r1, [r7, #3]
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	5499      	strb	r1, [r3, r2]
            line->count++;
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000e56:	3301      	adds	r3, #1
 8000e58:	b2da      	uxtb	r2, r3
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->cursor++;
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000e66:	3301      	adds	r3, #1
 8000e68:	b2da      	uxtb	r2, r3
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
            line->buf[line->count] = 0;
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000e76:	461a      	mov	r2, r3
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	5499      	strb	r1, [r3, r2]
          }
          if (line->cursor < line->count)
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	d24e      	bcs.n	8000f2c <cliUpdate+0x300>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000e9a:	1ad3      	subs	r3, r2, r3
 8000e9c:	767b      	strb	r3, [r7, #25]
            for (int i=0; i<mov_len; i++)
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ea2:	e013      	b.n	8000ecc <cliUpdate+0x2a0>
            {
              line->buf[line->count - i] = line->buf[line->count - i - 1];
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000eaa:	461a      	mov	r2, r3
 8000eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eae:	1ad3      	subs	r3, r2, r3
 8000eb0:	1e5a      	subs	r2, r3, #1
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000eb8:	4619      	mov	r1, r3
 8000eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ebc:	1acb      	subs	r3, r1, r3
 8000ebe:	69f9      	ldr	r1, [r7, #28]
 8000ec0:	5c89      	ldrb	r1, [r1, r2]
 8000ec2:	69fa      	ldr	r2, [r7, #28]
 8000ec4:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 8000ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec8:	3301      	adds	r3, #1
 8000eca:	627b      	str	r3, [r7, #36]	; 0x24
 8000ecc:	7e7b      	ldrb	r3, [r7, #25]
 8000ece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	dbe7      	blt.n	8000ea4 <cliUpdate+0x278>
            }
            line->buf[line->cursor] = rx_data;
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000eda:	461a      	mov	r2, r3
 8000edc:	78f9      	ldrb	r1, [r7, #3]
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	5499      	strb	r1, [r3, r2]
            line->count++;
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000ee8:	3301      	adds	r3, #1
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->cursor++;
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000ef8:	3301      	adds	r3, #1
 8000efa:	b2da      	uxtb	r2, r3
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
            line->buf[line->count] = 0;
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000f08:	461a      	mov	r2, r3
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	5499      	strb	r1, [r3, r2]

            uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	78fa      	ldrb	r2, [r7, #3]
 8000f16:	4914      	ldr	r1, [pc, #80]	; (8000f68 <cliUpdate+0x33c>)
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f001 fac3 	bl	80024a4 <uartPrintf>
          }
        }
        break;
 8000f1e:	e005      	b.n	8000f2c <cliUpdate+0x300>
    }
  }
 8000f20:	bf00      	nop
 8000f22:	e004      	b.n	8000f2e <cliUpdate+0x302>
        break;
 8000f24:	bf00      	nop
 8000f26:	e002      	b.n	8000f2e <cliUpdate+0x302>
        break;
 8000f28:	bf00      	nop
 8000f2a:	e000      	b.n	8000f2e <cliUpdate+0x302>
        break;
 8000f2c:	bf00      	nop

  switch(p_cli->state)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	7c1b      	ldrb	r3, [r3, #16]
 8000f32:	3b01      	subs	r3, #1
 8000f34:	2b03      	cmp	r3, #3
 8000f36:	f200 80d2 	bhi.w	80010de <cliUpdate+0x4b2>
 8000f3a:	a201      	add	r2, pc, #4	; (adr r2, 8000f40 <cliUpdate+0x314>)
 8000f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f40:	08000f51 	.word	0x08000f51
 8000f44:	08000f59 	.word	0x08000f59
 8000f48:	08000f6d 	.word	0x08000f6d
 8000f4c:	080010d5 	.word	0x080010d5
  {
    case CLI_RX_SP1:
      p_cli->state = CLI_RX_SP2;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2202      	movs	r2, #2
 8000f54:	741a      	strb	r2, [r3, #16]
      break;
 8000f56:	e0c2      	b.n	80010de <cliUpdate+0x4b2>

    case CLI_RX_SP2:
      p_cli->state = CLI_RX_SP3;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2203      	movs	r2, #3
 8000f5c:	741a      	strb	r2, [r3, #16]
      break;
 8000f5e:	e0be      	b.n	80010de <cliUpdate+0x4b2>
 8000f60:	0800a1a4 	.word	0x0800a1a4
 8000f64:	0800a1ac 	.word	0x0800a1ac
 8000f68:	0800a1b4 	.word	0x0800a1b4

    case CLI_RX_SP3:
      p_cli->state = CLI_RX_IDLE;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	741a      	strb	r2, [r3, #16]

      if (rx_data == CLI_KEY_LEFT)
 8000f72:	78fb      	ldrb	r3, [r7, #3]
 8000f74:	2b44      	cmp	r3, #68	; 0x44
 8000f76:	d11a      	bne.n	8000fae <cliUpdate+0x382>
      {
        if (line->cursor > 0)
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d015      	beq.n	8000fae <cliUpdate+0x382>
        {
          line->cursor--;
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000f88:	3b01      	subs	r3, #1
 8000f8a:	b2da      	uxtb	r2, r3
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          tx_buf[0] = 0x1B;
 8000f92:	231b      	movs	r3, #27
 8000f94:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 8000f96:	235b      	movs	r3, #91	; 0x5b
 8000f98:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 8000f9a:	78fb      	ldrb	r3, [r7, #3]
 8000f9c:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	f107 010c 	add.w	r1, r7, #12
 8000fa6:	2203      	movs	r2, #3
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f001 fa53 	bl	8002454 <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_RIGHT)
 8000fae:	78fb      	ldrb	r3, [r7, #3]
 8000fb0:	2b43      	cmp	r3, #67	; 0x43
 8000fb2:	d11d      	bne.n	8000ff0 <cliUpdate+0x3c4>
      {
        if (line->cursor < line->count)
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d215      	bcs.n	8000ff0 <cliUpdate+0x3c4>
        {
          line->cursor++;
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000fca:	3301      	adds	r3, #1
 8000fcc:	b2da      	uxtb	r2, r3
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

          tx_buf[0] = 0x1B;
 8000fd4:	231b      	movs	r3, #27
 8000fd6:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 8000fd8:	235b      	movs	r3, #91	; 0x5b
 8000fda:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 8000fdc:	78fb      	ldrb	r3, [r7, #3]
 8000fde:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	f107 010c 	add.w	r1, r7, #12
 8000fe8:	2203      	movs	r2, #3
 8000fea:	4618      	mov	r0, r3
 8000fec:	f001 fa32 	bl	8002454 <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_UP)
 8000ff0:	78fb      	ldrb	r3, [r7, #3]
 8000ff2:	2b41      	cmp	r3, #65	; 0x41
 8000ff4:	d10c      	bne.n	8001010 <cliUpdate+0x3e4>
      {
        cliLineChange(p_cli, true);
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f000 f8d9 	bl	80011b0 <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	781a      	ldrb	r2, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8001008:	4619      	mov	r1, r3
 800100a:	4610      	mov	r0, r2
 800100c:	f001 fa4a 	bl	80024a4 <uartPrintf>
      }

      if (rx_data == CLI_KEY_DOWN)
 8001010:	78fb      	ldrb	r3, [r7, #3]
 8001012:	2b42      	cmp	r3, #66	; 0x42
 8001014:	d10c      	bne.n	8001030 <cliUpdate+0x404>
      {
        cliLineChange(p_cli, false);
 8001016:	2100      	movs	r1, #0
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f000 f8c9 	bl	80011b0 <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	781a      	ldrb	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8001028:	4619      	mov	r1, r3
 800102a:	4610      	mov	r0, r2
 800102c:	f001 fa3a 	bl	80024a4 <uartPrintf>
      }

      if (rx_data == CLI_KEY_HOME)
 8001030:	78fb      	ldrb	r3, [r7, #3]
 8001032:	2b31      	cmp	r3, #49	; 0x31
 8001034:	d10f      	bne.n	8001056 <cliUpdate+0x42a>
      {
        uartPrintf(p_cli->ch, "\x1B[%dD", line->cursor);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	7818      	ldrb	r0, [r3, #0]
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001040:	461a      	mov	r2, r3
 8001042:	492a      	ldr	r1, [pc, #168]	; (80010ec <cliUpdate+0x4c0>)
 8001044:	f001 fa2e 	bl	80024a4 <uartPrintf>
        line->cursor = 0;
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	2200      	movs	r2, #0
 800104c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        p_cli->state = CLI_RX_SP4;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2204      	movs	r2, #4
 8001054:	741a      	strb	r2, [r3, #16]
      }

      if (rx_data == CLI_KEY_END)
 8001056:	78fb      	ldrb	r3, [r7, #3]
 8001058:	2b34      	cmp	r3, #52	; 0x34
 800105a:	d13f      	bne.n	80010dc <cliUpdate+0x4b0>
      {
        uint16_t mov_len;

        if (line->cursor < line->count)
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001068:	429a      	cmp	r2, r3
 800106a:	d210      	bcs.n	800108e <cliUpdate+0x462>
        {
          mov_len = line->count - line->cursor;
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001072:	b29a      	uxth	r2, r3
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800107a:	b29b      	uxth	r3, r3
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dC", mov_len);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	8afa      	ldrh	r2, [r7, #22]
 8001086:	491a      	ldr	r1, [pc, #104]	; (80010f0 <cliUpdate+0x4c4>)
 8001088:	4618      	mov	r0, r3
 800108a:	f001 fa0b 	bl	80024a4 <uartPrintf>
        }
        if (line->cursor > line->count)
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800109a:	429a      	cmp	r2, r3
 800109c:	d910      	bls.n	80010c0 <cliUpdate+0x494>
        {
          mov_len = line->cursor - line->count;
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80010a4:	b29a      	uxth	r2, r3
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80010ac:	b29b      	uxth	r3, r3
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dD", mov_len);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	8afa      	ldrh	r2, [r7, #22]
 80010b8:	490c      	ldr	r1, [pc, #48]	; (80010ec <cliUpdate+0x4c0>)
 80010ba:	4618      	mov	r0, r3
 80010bc:	f001 f9f2 	bl	80024a4 <uartPrintf>
        }
        line->cursor = line->count;
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        p_cli->state = CLI_RX_SP4;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2204      	movs	r2, #4
 80010d0:	741a      	strb	r2, [r3, #16]
      }
      break;
 80010d2:	e003      	b.n	80010dc <cliUpdate+0x4b0>

    case CLI_RX_SP4:
      p_cli->state = CLI_RX_IDLE;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	741a      	strb	r2, [r3, #16]
      break;
 80010da:	e000      	b.n	80010de <cliUpdate+0x4b2>
      break;
 80010dc:	bf00      	nop



//  cliShowLog(p_cli);

  return ret;
 80010de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3730      	adds	r7, #48	; 0x30
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	0800a1c0 	.word	0x0800a1c0
 80010f0:	0800a1c8 	.word	0x0800a1c8

080010f4 <cliLineClean>:

void cliLineClean(cli_t *p_cli)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  p_cli->line.count   = 0;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2200      	movs	r2, #0
 8001100:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
  p_cli->line.cursor  = 0;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	f883 22e5 	strb.w	r2, [r3, #741]	; 0x2e5
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	223f      	movs	r2, #63	; 0x3f
 8001110:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
  p_cli->line.buf[0]  = 0;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	f883 22a4 	strb.w	r2, [r3, #676]	; 0x2a4
}
 800111c:	bf00      	nop
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <cliLineAdd>:

void cliLineAdd(cli_t *p_cli)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]

  p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8001136:	461a      	mov	r2, r3
 8001138:	6879      	ldr	r1, [r7, #4]
 800113a:	4613      	mov	r3, r2
 800113c:	015b      	lsls	r3, r3, #5
 800113e:	4413      	add	r3, r2
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	4413      	add	r3, r2
 8001144:	440b      	add	r3, r1
 8001146:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4610      	mov	r0, r2
 800114e:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8001152:	2243      	movs	r2, #67	; 0x43
 8001154:	4619      	mov	r1, r3
 8001156:	f005 fdfd 	bl	8006d54 <memcpy>

  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8001160:	2b03      	cmp	r3, #3
 8001162:	d807      	bhi.n	8001174 <cliLineAdd+0x4c>
  {
    p_cli->hist_line_count++;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 800116a:	3301      	adds	r3, #1
 800116c:	b2da      	uxtb	r2, r3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  }

  p_cli->hist_line_i    = p_cli->hist_line_last;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 800117a:	b25a      	sxtb	r2, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8001188:	3301      	adds	r3, #1
 800118a:	425a      	negs	r2, r3
 800118c:	f003 0303 	and.w	r3, r3, #3
 8001190:	f002 0203 	and.w	r2, r2, #3
 8001194:	bf58      	it	pl
 8001196:	4253      	negpl	r3, r2
 8001198:	b2da      	uxtb	r2, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  p_cli->hist_line_new  = true;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2201      	movs	r2, #1
 80011a4:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
}
 80011a8:	bf00      	nop
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <cliLineChange>:

void cliLineChange(cli_t *p_cli, int8_t key_up)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	460b      	mov	r3, r1
 80011ba:	70fb      	strb	r3, [r7, #3]
  uint8_t change_i;


  if (p_cli->hist_line_count == 0)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d076      	beq.n	80012b4 <cliLineChange+0x104>
  {
    return;
  }


  if (p_cli->line.cursor > 0)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d008      	beq.n	80011e2 <cliLineChange+0x32>
  {
    uartPrintf(p_cli->ch, "\x1B[%dD", p_cli->line.cursor);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	7818      	ldrb	r0, [r3, #0]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 80011da:	461a      	mov	r2, r3
 80011dc:	4937      	ldr	r1, [pc, #220]	; (80012bc <cliLineChange+0x10c>)
 80011de:	f001 f961 	bl	80024a4 <uartPrintf>
  }
  if (p_cli->line.count > 0)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d008      	beq.n	80011fe <cliLineChange+0x4e>
  {
    uartPrintf(p_cli->ch, "\x1B[%dP", p_cli->line.count);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	7818      	ldrb	r0, [r3, #0]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 80011f6:	461a      	mov	r2, r3
 80011f8:	4931      	ldr	r1, [pc, #196]	; (80012c0 <cliLineChange+0x110>)
 80011fa:	f001 f953 	bl	80024a4 <uartPrintf>
  }


  if (key_up == true)
 80011fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d125      	bne.n	8001252 <cliLineChange+0xa2>
  {
    if (p_cli->hist_line_new == true)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 800120c:	2b00      	cmp	r3, #0
 800120e:	d006      	beq.n	800121e <cliLineChange+0x6e>
    {
      p_cli->hist_line_i = p_cli->hist_line_last;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8001216:	b25a      	sxtb	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    }
    p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) % p_cli->hist_line_count;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8001224:	461a      	mov	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 800122c:	4413      	add	r3, r2
 800122e:	3b01      	subs	r3, #1
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	f892 2197 	ldrb.w	r2, [r2, #407]	; 0x197
 8001236:	fb93 f1f2 	sdiv	r1, r3, r2
 800123a:	fb02 f201 	mul.w	r2, r2, r1
 800123e:	1a9b      	subs	r3, r3, r2
 8001240:	b25a      	sxtb	r2, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 800124e:	73fb      	strb	r3, [r7, #15]
 8001250:	e013      	b.n	800127a <cliLineChange+0xca>
  }
  else
  {
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8001258:	3301      	adds	r3, #1
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	f892 2197 	ldrb.w	r2, [r2, #407]	; 0x197
 8001260:	fb93 f1f2 	sdiv	r1, r3, r2
 8001264:	fb02 f201 	mul.w	r2, r2, r1
 8001268:	1a9b      	subs	r3, r3, r2
 800126a:	b25a      	sxtb	r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8001278:	73fb      	strb	r3, [r7, #15]
  }

  p_cli->line = p_cli->line_buf[change_i];
 800127a:	7bfa      	ldrb	r2, [r7, #15]
 800127c:	6879      	ldr	r1, [r7, #4]
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	4613      	mov	r3, r2
 8001282:	015b      	lsls	r3, r3, #5
 8001284:	4413      	add	r3, r2
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	4413      	add	r3, r2
 800128a:	4403      	add	r3, r0
 800128c:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 8001290:	f501 7329 	add.w	r3, r1, #676	; 0x2a4
 8001294:	4611      	mov	r1, r2
 8001296:	2243      	movs	r2, #67	; 0x43
 8001298:	4618      	mov	r0, r3
 800129a:	f005 fd5b 	bl	8006d54 <memcpy>
  p_cli->line.cursor = p_cli->line.count;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f893 22e6 	ldrb.w	r2, [r3, #742]	; 0x2e6
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f883 22e5 	strb.w	r2, [r3, #741]	; 0x2e5

  p_cli->hist_line_new = false;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2200      	movs	r2, #0
 80012ae:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
 80012b2:	e000      	b.n	80012b6 <cliLineChange+0x106>
    return;
 80012b4:	bf00      	nop
}
 80012b6:	3710      	adds	r7, #16
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	0800a1c0 	.word	0x0800a1c0
 80012c0:	0800a1d0 	.word	0x0800a1d0

080012c4 <cliRunCmd>:

bool cliRunCmd(cli_t *p_cli)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  bool ret = false;
 80012cc:	2300      	movs	r3, #0
 80012ce:	72fb      	strb	r3, [r7, #11]


  if (cliParseArgs(p_cli) == true)
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f000 f851 	bl	8001378 <cliParseArgs>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d046      	beq.n	800136a <cliRunCmd+0xa6>
  {
    cliPrintf("\r\n");
 80012dc:	4825      	ldr	r0, [pc, #148]	; (8001374 <cliRunCmd+0xb0>)
 80012de:	f000 f893 	bl	8001408 <cliPrintf>

    cliToUpper(p_cli->argv[0]);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80012e8:	4618      	mov	r0, r3
 80012ea:	f000 f8b1 	bl	8001450 <cliToUpper>

    for (int i=0; i<p_cli->cmd_count; i++)
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	e033      	b.n	800135c <cliRunCmd+0x98>
    {
      if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 80012fa:	68fa      	ldr	r2, [r7, #12]
 80012fc:	4613      	mov	r3, r2
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	4413      	add	r3, r2
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	4413      	add	r3, r2
 800130c:	3304      	adds	r3, #4
 800130e:	4619      	mov	r1, r3
 8001310:	f7fe ff96 	bl	8000240 <strcmp>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d11d      	bne.n	8001356 <cliRunCmd+0x92>
      {
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 8001320:	3b01      	subs	r3, #1
 8001322:	b29a      	uxth	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f8a3 242c 	strh.w	r2, [r3, #1068]	; 0x42c
        p_cli->cmd_args.argv = &p_cli->argv[1];
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f503 728c 	add.w	r2, r3, #280	; 0x118
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
        p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 8001336:	6879      	ldr	r1, [r7, #4]
 8001338:	68fa      	ldr	r2, [r7, #12]
 800133a:	4613      	mov	r3, r2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	4413      	add	r3, r2
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	440b      	add	r3, r1
 8001344:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	f202 422c 	addw	r2, r2, #1068	; 0x42c
 8001350:	4610      	mov	r0, r2
 8001352:	4798      	blx	r3
        break;
 8001354:	e009      	b.n	800136a <cliRunCmd+0xa6>
    for (int i=0; i<p_cli->cmd_count; i++)
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	3301      	adds	r3, #1
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 8001362:	461a      	mov	r2, r3
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	4293      	cmp	r3, r2
 8001368:	dbc4      	blt.n	80012f4 <cliRunCmd+0x30>
      }
    }
  }

  return ret;
 800136a:	7afb      	ldrb	r3, [r7, #11]
}
 800136c:	4618      	mov	r0, r3
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	0800a1d8 	.word	0x0800a1d8

08001378 <cliParseArgs>:

bool cliParseArgs(cli_t *p_cli)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b088      	sub	sp, #32
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8001380:	2300      	movs	r3, #0
 8001382:	77fb      	strb	r3, [r7, #31]
  char *tok;
  char *next_ptr;
  uint16_t argc = 0;
 8001384:	2300      	movs	r3, #0
 8001386:	82fb      	strh	r3, [r7, #22]
  static const char *delim = " \f\n\r\t\v";
  char *cmdline;
  char **argv;

  p_cli->argc = 0;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2200      	movs	r2, #0
 800138c:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112

  cmdline = (char *)p_cli->line.buf;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8001396:	613b      	str	r3, [r7, #16]
  argv    = p_cli->argv;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800139e:	60fb      	str	r3, [r7, #12]

  argv[argc] = NULL;
 80013a0:	8afb      	ldrh	r3, [r7, #22]
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	68fa      	ldr	r2, [r7, #12]
 80013a6:	4413      	add	r3, r2
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]

  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 80013ac:	4b15      	ldr	r3, [pc, #84]	; (8001404 <cliParseArgs+0x8c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f107 0208 	add.w	r2, r7, #8
 80013b4:	4619      	mov	r1, r3
 80013b6:	6938      	ldr	r0, [r7, #16]
 80013b8:	f006 fbee 	bl	8007b98 <strtok_r>
 80013bc:	61b8      	str	r0, [r7, #24]
 80013be:	e010      	b.n	80013e2 <cliParseArgs+0x6a>
  {
    argv[argc++] = tok;
 80013c0:	8afb      	ldrh	r3, [r7, #22]
 80013c2:	1c5a      	adds	r2, r3, #1
 80013c4:	82fa      	strh	r2, [r7, #22]
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	68fa      	ldr	r2, [r7, #12]
 80013ca:	4413      	add	r3, r2
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	601a      	str	r2, [r3, #0]
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 80013d0:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <cliParseArgs+0x8c>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f107 0208 	add.w	r2, r7, #8
 80013d8:	4619      	mov	r1, r3
 80013da:	2000      	movs	r0, #0
 80013dc:	f006 fbdc 	bl	8007b98 <strtok_r>
 80013e0:	61b8      	str	r0, [r7, #24]
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1eb      	bne.n	80013c0 <cliParseArgs+0x48>
  }

  p_cli->argc = argc;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	8afa      	ldrh	r2, [r7, #22]
 80013ec:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112

  if (argc > 0)
 80013f0:	8afb      	ldrh	r3, [r7, #22]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <cliParseArgs+0x82>
  {
    ret = true;
 80013f6:	2301      	movs	r3, #1
 80013f8:	77fb      	strb	r3, [r7, #31]
  }

  return ret;
 80013fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3720      	adds	r7, #32
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	20000004 	.word	0x20000004

08001408 <cliPrintf>:

void cliPrintf(const char *fmt, ...)
{
 8001408:	b40f      	push	{r0, r1, r2, r3}
 800140a:	b580      	push	{r7, lr}
 800140c:	b084      	sub	sp, #16
 800140e:	af00      	add	r7, sp, #0
  va_list arg;
  va_start (arg, fmt);
 8001410:	f107 031c 	add.w	r3, r7, #28
 8001414:	607b      	str	r3, [r7, #4]
  int32_t len;
  cli_t *p_cli = &cli_node;
 8001416:	4b0d      	ldr	r3, [pc, #52]	; (800144c <cliPrintf+0x44>)
 8001418:	60fb      	str	r3, [r7, #12]


  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	f103 0011 	add.w	r0, r3, #17
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001428:	f006 fc6c 	bl	8007d04 <vsniprintf>
 800142c:	60b8      	str	r0, [r7, #8]
  va_end (arg);

  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	7818      	ldrb	r0, [r3, #0]
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	3311      	adds	r3, #17
 8001436:	68ba      	ldr	r2, [r7, #8]
 8001438:	4619      	mov	r1, r3
 800143a:	f001 f80b 	bl	8002454 <uartWrite>
}
 800143e:	bf00      	nop
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001448:	b004      	add	sp, #16
 800144a:	4770      	bx	lr
 800144c:	200003a8 	.word	0x200003a8

08001450 <cliToUpper>:

void cliToUpper(char *str)
{
 8001450:	b480      	push	{r7}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8001458:	2300      	movs	r3, #0
 800145a:	81fb      	strh	r3, [r7, #14]
 800145c:	e018      	b.n	8001490 <cliToUpper+0x40>
  {
    str_ch = str[i];
 800145e:	89fb      	ldrh	r3, [r7, #14]
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	4413      	add	r3, r2
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	737b      	strb	r3, [r7, #13]

    if (str_ch == 0)
 8001468:	7b7b      	ldrb	r3, [r7, #13]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d014      	beq.n	8001498 <cliToUpper+0x48>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 800146e:	7b7b      	ldrb	r3, [r7, #13]
 8001470:	2b60      	cmp	r3, #96	; 0x60
 8001472:	d905      	bls.n	8001480 <cliToUpper+0x30>
 8001474:	7b7b      	ldrb	r3, [r7, #13]
 8001476:	2b7a      	cmp	r3, #122	; 0x7a
 8001478:	d802      	bhi.n	8001480 <cliToUpper+0x30>
    {
      str_ch = str_ch - 'a' + 'A';
 800147a:	7b7b      	ldrb	r3, [r7, #13]
 800147c:	3b20      	subs	r3, #32
 800147e:	737b      	strb	r3, [r7, #13]
    }
    str[i] = str_ch;
 8001480:	89fb      	ldrh	r3, [r7, #14]
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	4413      	add	r3, r2
 8001486:	7b7a      	ldrb	r2, [r7, #13]
 8001488:	701a      	strb	r2, [r3, #0]
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 800148a:	89fb      	ldrh	r3, [r7, #14]
 800148c:	3301      	adds	r3, #1
 800148e:	81fb      	strh	r3, [r7, #14]
 8001490:	89fb      	ldrh	r3, [r7, #14]
 8001492:	2b0f      	cmp	r3, #15
 8001494:	d9e3      	bls.n	800145e <cliToUpper+0xe>
 8001496:	e000      	b.n	800149a <cliToUpper+0x4a>
      break;
 8001498:	bf00      	nop
  }

  if (i == CLI_CMD_NAME_MAX)
 800149a:	89fb      	ldrh	r3, [r7, #14]
 800149c:	2b10      	cmp	r3, #16
 800149e:	d105      	bne.n	80014ac <cliToUpper+0x5c>
  {
    str[i-1] = 0;
 80014a0:	89fb      	ldrh	r3, [r7, #14]
 80014a2:	3b01      	subs	r3, #1
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	4413      	add	r3, r2
 80014a8:	2200      	movs	r2, #0
 80014aa:	701a      	strb	r2, [r3, #0]
  }
}
 80014ac:	bf00      	nop
 80014ae:	3714      	adds	r7, #20
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <cliArgsGetData>:

int32_t cliArgsGetData(uint8_t index)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = 0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 80014c6:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <cliArgsGetData+0x4c>)
 80014c8:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	b29a      	uxth	r2, r3
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d301      	bcc.n	80014dc <cliArgsGetData+0x24>
  {
    return 0;
 80014d8:	2300      	movs	r3, #0
 80014da:	e00e      	b.n	80014fa <cliArgsGetData+0x42>
  }

  ret = (int32_t)strtoul((const char * ) p_cli->cmd_args.argv[index], (char **)NULL, (int) 0);
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80014e2:	79fb      	ldrb	r3, [r7, #7]
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	4413      	add	r3, r2
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2200      	movs	r2, #0
 80014ec:	2100      	movs	r1, #0
 80014ee:	4618      	mov	r0, r3
 80014f0:	f006 fbd2 	bl	8007c98 <strtoul>
 80014f4:	4603      	mov	r3, r0
 80014f6:	60fb      	str	r3, [r7, #12]

  return ret;
 80014f8:	68fb      	ldr	r3, [r7, #12]
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3710      	adds	r7, #16
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	200003a8 	.word	0x200003a8

08001508 <cliArgsGetFloat>:

float cliArgsGetFloat(uint8_t index)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	71fb      	strb	r3, [r7, #7]
  float ret = 0.0;
 8001512:	f04f 0300 	mov.w	r3, #0
 8001516:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8001518:	4b10      	ldr	r3, [pc, #64]	; (800155c <cliArgsGetFloat+0x54>)
 800151a:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	b29a      	uxth	r2, r3
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 8001526:	429a      	cmp	r2, r3
 8001528:	d302      	bcc.n	8001530 <cliArgsGetFloat+0x28>
  {
    return 0;
 800152a:	f04f 0300 	mov.w	r3, #0
 800152e:	e00d      	b.n	800154c <cliArgsGetFloat+0x44>
  }

  ret = (float)strtof((const char * ) p_cli->cmd_args.argv[index], (char **)NULL);
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8001536:	79fb      	ldrb	r3, [r7, #7]
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	4413      	add	r3, r2
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2100      	movs	r1, #0
 8001540:	4618      	mov	r0, r3
 8001542:	f006 fabd 	bl	8007ac0 <strtof>
 8001546:	ed87 0a03 	vstr	s0, [r7, #12]

  return ret;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	ee07 3a90 	vmov	s15, r3
}
 8001550:	eeb0 0a67 	vmov.f32	s0, s15
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	200003a8 	.word	0x200003a8

08001560 <cliArgsGetStr>:

char *cliArgsGetStr(uint8_t index)
{
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	71fb      	strb	r3, [r7, #7]
  char *ret = NULL;
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 800156e:	4b0d      	ldr	r3, [pc, #52]	; (80015a4 <cliArgsGetStr+0x44>)
 8001570:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8001572:	79fb      	ldrb	r3, [r7, #7]
 8001574:	b29a      	uxth	r2, r3
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 800157c:	429a      	cmp	r2, r3
 800157e:	d301      	bcc.n	8001584 <cliArgsGetStr+0x24>
  {
    return 0;
 8001580:	2300      	movs	r3, #0
 8001582:	e008      	b.n	8001596 <cliArgsGetStr+0x36>
  }

  ret = p_cli->cmd_args.argv[index];
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	4413      	add	r3, r2
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	60fb      	str	r3, [r7, #12]

  return ret;
 8001594:	68fb      	ldr	r3, [r7, #12]
}
 8001596:	4618      	mov	r0, r3
 8001598:	3714      	adds	r7, #20
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	200003a8 	.word	0x200003a8

080015a8 <cliArgsIsStr>:

bool cliArgsIsStr(uint8_t index, char *p_str)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	6039      	str	r1, [r7, #0]
 80015b2:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 80015b4:	2300      	movs	r3, #0
 80015b6:	73fb      	strb	r3, [r7, #15]
  cli_t *p_cli = &cli_node;
 80015b8:	4b0f      	ldr	r3, [pc, #60]	; (80015f8 <cliArgsIsStr+0x50>)
 80015ba:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 80015bc:	79fb      	ldrb	r3, [r7, #7]
 80015be:	b29a      	uxth	r2, r3
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d301      	bcc.n	80015ce <cliArgsIsStr+0x26>
  {
    return 0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	e010      	b.n	80015f0 <cliArgsIsStr+0x48>
  }

  if(strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80015d4:	79fb      	ldrb	r3, [r7, #7]
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	4413      	add	r3, r2
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4619      	mov	r1, r3
 80015de:	6838      	ldr	r0, [r7, #0]
 80015e0:	f7fe fe2e 	bl	8000240 <strcmp>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d101      	bne.n	80015ee <cliArgsIsStr+0x46>
  {
    ret = true;
 80015ea:	2301      	movs	r3, #1
 80015ec:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80015ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3710      	adds	r7, #16
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	200003a8 	.word	0x200003a8

080015fc <cliAdd>:
    return false;
  }
}

bool cliAdd(const char *cmd_str, void (*p_func)(cli_args_t *))
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
  bool ret = true;
 8001606:	2301      	movs	r3, #1
 8001608:	75fb      	strb	r3, [r7, #23]
  cli_t *p_cli = &cli_node;
 800160a:	4b20      	ldr	r3, [pc, #128]	; (800168c <cliAdd+0x90>)
 800160c:	613b      	str	r3, [r7, #16]
  uint16_t index;

  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 8001614:	2b0f      	cmp	r3, #15
 8001616:	d901      	bls.n	800161c <cliAdd+0x20>
  {
    return false;
 8001618:	2300      	movs	r3, #0
 800161a:	e032      	b.n	8001682 <cliAdd+0x86>
  }

  index = p_cli->cmd_count;
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 8001622:	81fb      	strh	r3, [r7, #14]

  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 8001624:	89fa      	ldrh	r2, [r7, #14]
 8001626:	4613      	mov	r3, r2
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	4413      	add	r3, r2
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	4413      	add	r3, r2
 8001636:	3304      	adds	r3, #4
 8001638:	6879      	ldr	r1, [r7, #4]
 800163a:	4618      	mov	r0, r3
 800163c:	f005 fc44 	bl	8006ec8 <strcpy>
  p_cli->cmd_list[index].cmd_func = p_func;
 8001640:	89fa      	ldrh	r2, [r7, #14]
 8001642:	6939      	ldr	r1, [r7, #16]
 8001644:	4613      	mov	r3, r2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	4413      	add	r3, r2
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	440b      	add	r3, r1
 800164e:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 8001652:	683a      	ldr	r2, [r7, #0]
 8001654:	601a      	str	r2, [r3, #0]

  cliToUpper(p_cli->cmd_list[index].cmd_str);
 8001656:	89fa      	ldrh	r2, [r7, #14]
 8001658:	4613      	mov	r3, r2
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	4413      	add	r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	4413      	add	r3, r2
 8001668:	3304      	adds	r3, #4
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff fef0 	bl	8001450 <cliToUpper>

  p_cli->cmd_count++;
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 8001676:	3301      	adds	r3, #1
 8001678:	b29a      	uxth	r2, r3
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	f8a3 22e8 	strh.w	r2, [r3, #744]	; 0x2e8

  return ret;
 8001680:	7dfb      	ldrb	r3, [r7, #23]
}
 8001682:	4618      	mov	r0, r3
 8001684:	3718      	adds	r7, #24
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	200003a8 	.word	0x200003a8

08001690 <cliShowList>:

void cliShowList(cli_args_t *args)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  cli_t *p_cli = &cli_node;
 8001698:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <cliShowList+0x60>)
 800169a:	60bb      	str	r3, [r7, #8]


  printf("\r\n");
 800169c:	4815      	ldr	r0, [pc, #84]	; (80016f4 <cliShowList+0x64>)
 800169e:	f005 fc0b 	bl	8006eb8 <puts>
  printf("---------- cmd list ---------\r\n");
 80016a2:	4815      	ldr	r0, [pc, #84]	; (80016f8 <cliShowList+0x68>)
 80016a4:	f005 fc08 	bl	8006eb8 <puts>

  for (int i=0; i<p_cli->cmd_count; i++)
 80016a8:	2300      	movs	r3, #0
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	e012      	b.n	80016d4 <cliShowList+0x44>
  {
    printf(p_cli->cmd_list[i].cmd_str);
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	4613      	mov	r3, r2
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	4413      	add	r3, r2
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 80016bc:	68ba      	ldr	r2, [r7, #8]
 80016be:	4413      	add	r3, r2
 80016c0:	3304      	adds	r3, #4
 80016c2:	4618      	mov	r0, r3
 80016c4:	f005 fb5c 	bl	8006d80 <iprintf>
    printf("\r\n");
 80016c8:	480a      	ldr	r0, [pc, #40]	; (80016f4 <cliShowList+0x64>)
 80016ca:	f005 fbf5 	bl	8006eb8 <puts>
  for (int i=0; i<p_cli->cmd_count; i++)
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	3301      	adds	r3, #1
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 80016da:	461a      	mov	r2, r3
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	4293      	cmp	r3, r2
 80016e0:	dbe5      	blt.n	80016ae <cliShowList+0x1e>
  }

  printf("-----------------------------\r\n");
 80016e2:	4806      	ldr	r0, [pc, #24]	; (80016fc <cliShowList+0x6c>)
 80016e4:	f005 fbe8 	bl	8006eb8 <puts>
}
 80016e8:	bf00      	nop
 80016ea:	3710      	adds	r7, #16
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	200003a8 	.word	0x200003a8
 80016f4:	0800a1dc 	.word	0x0800a1dc
 80016f8:	0800a1e0 	.word	0x0800a1e0
 80016fc:	0800a200 	.word	0x0800a200

08001700 <cliMemoryDump>:

void cliMemoryDump(cli_args_t *args)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b08c      	sub	sp, #48	; 0x30
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  int idx, size = 16;
 8001708:	2310      	movs	r3, #16
 800170a:	62bb      	str	r3, [r7, #40]	; 0x28
  unsigned int *addr;
  int idx1, i;
  unsigned int *ascptr;
  unsigned char asc[4];

  int    argc = args->argc;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	881b      	ldrh	r3, [r3, #0]
 8001710:	617b      	str	r3, [r7, #20]
  char **argv = args->argv;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	613b      	str	r3, [r7, #16]

  if(args->argc < 1)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	881b      	ldrh	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d103      	bne.n	8001728 <cliMemoryDump+0x28>
  {
    cliPrintf(">> md addr [size] \n");
 8001720:	4840      	ldr	r0, [pc, #256]	; (8001824 <cliMemoryDump+0x124>)
 8001722:	f7ff fe71 	bl	8001408 <cliPrintf>
 8001726:	e079      	b.n	800181c <cliMemoryDump+0x11c>
    return;
  }

  if(argc > 1)
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	2b01      	cmp	r3, #1
 800172c:	dd09      	ble.n	8001742 <cliMemoryDump+0x42>
  {
    size = (int)strtoul((const char * ) argv[1], (char **)NULL, (int) 0);
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	3304      	adds	r3, #4
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2200      	movs	r2, #0
 8001736:	2100      	movs	r1, #0
 8001738:	4618      	mov	r0, r3
 800173a:	f006 faad 	bl	8007c98 <strtoul>
 800173e:	4603      	mov	r3, r0
 8001740:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2200      	movs	r2, #0
 8001748:	2100      	movs	r1, #0
 800174a:	4618      	mov	r0, r3
 800174c:	f006 faa4 	bl	8007c98 <strtoul>
 8001750:	4603      	mov	r3, r0
 8001752:	627b      	str	r3, [r7, #36]	; 0x24
  ascptr = (unsigned int *)addr;
 8001754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001756:	61bb      	str	r3, [r7, #24]

  for (idx = 0; idx<size; idx++)
 8001758:	2300      	movs	r3, #0
 800175a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800175c:	e05a      	b.n	8001814 <cliMemoryDump+0x114>
  {
    if((idx%4) == 0)
 800175e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001760:	f003 0303 	and.w	r3, r3, #3
 8001764:	2b00      	cmp	r3, #0
 8001766:	d104      	bne.n	8001772 <cliMemoryDump+0x72>
    {
      printf("   0x%08X: ", (unsigned int)addr);
 8001768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176a:	4619      	mov	r1, r3
 800176c:	482e      	ldr	r0, [pc, #184]	; (8001828 <cliMemoryDump+0x128>)
 800176e:	f005 fb07 	bl	8006d80 <iprintf>
    }
    printf(" 0x%08X", *(addr));
 8001772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4619      	mov	r1, r3
 8001778:	482c      	ldr	r0, [pc, #176]	; (800182c <cliMemoryDump+0x12c>)
 800177a:	f005 fb01 	bl	8006d80 <iprintf>

    if ((idx%4) == 3)
 800177e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001780:	425a      	negs	r2, r3
 8001782:	f003 0303 	and.w	r3, r3, #3
 8001786:	f002 0203 	and.w	r2, r2, #3
 800178a:	bf58      	it	pl
 800178c:	4253      	negpl	r3, r2
 800178e:	2b03      	cmp	r3, #3
 8001790:	d13a      	bne.n	8001808 <cliMemoryDump+0x108>
    {
      for (idx1= 0; idx1< 4; idx1++)
 8001792:	2300      	movs	r3, #0
 8001794:	623b      	str	r3, [r7, #32]
 8001796:	e031      	b.n	80017fc <cliMemoryDump+0xfc>
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	681b      	ldr	r3, [r3, #0]
      {
        memcpy((char *)asc, (char *)ascptr, 4);
 800179c:	60fb      	str	r3, [r7, #12]
		if(idx1 == 0)
 800179e:	6a3b      	ldr	r3, [r7, #32]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d102      	bne.n	80017aa <cliMemoryDump+0xaa>
		{
	       printf("  |");
 80017a4:	4822      	ldr	r0, [pc, #136]	; (8001830 <cliMemoryDump+0x130>)
 80017a6:	f005 faeb 	bl	8006d80 <iprintf>
		}
        for (i=0;i<4;i++)
 80017aa:	2300      	movs	r3, #0
 80017ac:	61fb      	str	r3, [r7, #28]
 80017ae:	e01c      	b.n	80017ea <cliMemoryDump+0xea>
        {
           if (asc[i] > 0x1f && asc[i] < 0x7f)
 80017b0:	f107 020c 	add.w	r2, r7, #12
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	4413      	add	r3, r2
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	2b1f      	cmp	r3, #31
 80017bc:	d90f      	bls.n	80017de <cliMemoryDump+0xde>
 80017be:	f107 020c 	add.w	r2, r7, #12
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	4413      	add	r3, r2
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b7e      	cmp	r3, #126	; 0x7e
 80017ca:	d808      	bhi.n	80017de <cliMemoryDump+0xde>
          {
            printf("%c", asc[i]);
 80017cc:	f107 020c 	add.w	r2, r7, #12
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	4413      	add	r3, r2
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f005 faea 	bl	8006db0 <putchar>
 80017dc:	e002      	b.n	80017e4 <cliMemoryDump+0xe4>
          }
          else
          {
            printf(".");
 80017de:	202e      	movs	r0, #46	; 0x2e
 80017e0:	f005 fae6 	bl	8006db0 <putchar>
        for (i=0;i<4;i++)
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	3301      	adds	r3, #1
 80017e8:	61fb      	str	r3, [r7, #28]
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	2b03      	cmp	r3, #3
 80017ee:	dddf      	ble.n	80017b0 <cliMemoryDump+0xb0>
          }
        }
        ascptr+=1;
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	3304      	adds	r3, #4
 80017f4:	61bb      	str	r3, [r7, #24]
      for (idx1= 0; idx1< 4; idx1++)
 80017f6:	6a3b      	ldr	r3, [r7, #32]
 80017f8:	3301      	adds	r3, #1
 80017fa:	623b      	str	r3, [r7, #32]
 80017fc:	6a3b      	ldr	r3, [r7, #32]
 80017fe:	2b03      	cmp	r3, #3
 8001800:	ddca      	ble.n	8001798 <cliMemoryDump+0x98>
      }
      printf("|\r\n");
 8001802:	480c      	ldr	r0, [pc, #48]	; (8001834 <cliMemoryDump+0x134>)
 8001804:	f005 fb58 	bl	8006eb8 <puts>
    }
    addr++;
 8001808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180a:	3304      	adds	r3, #4
 800180c:	627b      	str	r3, [r7, #36]	; 0x24
  for (idx = 0; idx<size; idx++)
 800180e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001810:	3301      	adds	r3, #1
 8001812:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001814:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001818:	429a      	cmp	r2, r3
 800181a:	dba0      	blt.n	800175e <cliMemoryDump+0x5e>
  }
}
 800181c:	3730      	adds	r7, #48	; 0x30
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	0800a220 	.word	0x0800a220
 8001828:	0800a234 	.word	0x0800a234
 800182c:	0800a240 	.word	0x0800a240
 8001830:	0800a248 	.word	0x0800a248
 8001834:	0800a24c 	.word	0x0800a24c

08001838 <cliMemoryWrite>:
*	Description :
*		-
*/

void cliMemoryWrite(cli_args_t *args)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b08a      	sub	sp, #40	; 0x28
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
	uint32_t	size,addr,data;
//	unsigned int *addr;
//	unsigned int *ascptr;

	uint8_t ret;
	int    argc = args->argc;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	881b      	ldrh	r3, [r3, #0]
 8001844:	61fb      	str	r3, [r7, #28]

    addr    = (uint32_t)args->getData(0);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	2000      	movs	r0, #0
 800184c:	4798      	blx	r3
 800184e:	4603      	mov	r3, r0
 8001850:	627b      	str	r3, [r7, #36]	; 0x24
    data    = (uint32_t)args->getData(1);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	2001      	movs	r0, #1
 8001858:	4798      	blx	r3
 800185a:	4603      	mov	r3, r0
 800185c:	61bb      	str	r3, [r7, #24]
    size    = (uint32_t)args->getData(2);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	2002      	movs	r0, #2
 8001864:	4798      	blx	r3
 8001866:	4603      	mov	r3, r0
 8001868:	617b      	str	r3, [r7, #20]

	if(argc < 1){
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	2b00      	cmp	r3, #0
 800186e:	dc02      	bgt.n	8001876 <cliMemoryWrite+0x3e>
		printf("mw8 addr data [size]\r\n");
 8001870:	4813      	ldr	r0, [pc, #76]	; (80018c0 <cliMemoryWrite+0x88>)
 8001872:	f005 fb21 	bl	8006eb8 <puts>
	}

	end_addr = addr + size;
 8001876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	4413      	add	r3, r2
 800187c:	613b      	str	r3, [r7, #16]

	for( ; addr < end_addr; addr++)
 800187e:	e00c      	b.n	800189a <cliMemoryWrite+0x62>
	{
		ret = flashWrite(addr, (uint8_t *)&pattern, 2);
 8001880:	f107 030c 	add.w	r3, r7, #12
 8001884:	2202      	movs	r2, #2
 8001886:	4619      	mov	r1, r3
 8001888:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800188a:	f000 f8a3 	bl	80019d4 <flashWrite>
 800188e:	4603      	mov	r3, r0
 8001890:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	for( ; addr < end_addr; addr++)
 8001894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001896:	3301      	adds	r3, #1
 8001898:	627b      	str	r3, [r7, #36]	; 0x24
 800189a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	429a      	cmp	r2, r3
 80018a0:	d8ee      	bhi.n	8001880 <cliMemoryWrite+0x48>
	}

	if(ret == 0)
 80018a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d103      	bne.n	80018b2 <cliMemoryWrite+0x7a>
	{
		printf("Write Success\r\n");
 80018aa:	4806      	ldr	r0, [pc, #24]	; (80018c4 <cliMemoryWrite+0x8c>)
 80018ac:	f005 fb04 	bl	8006eb8 <puts>
	else
	{
		printf("Write Fail\r\n");
	}

	return(ret);
 80018b0:	e003      	b.n	80018ba <cliMemoryWrite+0x82>
		printf("Write Fail\r\n");
 80018b2:	4805      	ldr	r0, [pc, #20]	; (80018c8 <cliMemoryWrite+0x90>)
 80018b4:	f005 fb00 	bl	8006eb8 <puts>
	return(ret);
 80018b8:	bf00      	nop
}
 80018ba:	3728      	adds	r7, #40	; 0x28
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	0800a250 	.word	0x0800a250
 80018c4:	0800a268 	.word	0x0800a268
 80018c8:	0800a278 	.word	0x0800a278

080018cc <flashInit>:
static bool flashInSector(uint16_t sector_num, uint32_t addr, uint32_t length);



bool flashInit(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  {
    flash_tbl[i].addr   = 0x8000000 + i*1024;
    flash_tbl[i].length = 1024;
  }*/

  cliAdd("flash", cliFlash);
 80018d0:	4903      	ldr	r1, [pc, #12]	; (80018e0 <flashInit+0x14>)
 80018d2:	4804      	ldr	r0, [pc, #16]	; (80018e4 <flashInit+0x18>)
 80018d4:	f7ff fe92 	bl	80015fc <cliAdd>

  return true;
 80018d8:	2301      	movs	r3, #1
}
 80018da:	4618      	mov	r0, r3
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	08001b95 	.word	0x08001b95
 80018e4:	0800a28c 	.word	0x0800a28c

080018e8 <flashErase>:

bool flashErase(uint32_t addr, uint32_t length)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b08a      	sub	sp, #40	; 0x28
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  bool ret = false;
 80018f2:	2300      	movs	r3, #0
 80018f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t page_error=0;
 80018f8:	2300      	movs	r3, #0
 80018fa:	60fb      	str	r3, [r7, #12]
  uint32_t end_addr=0;
 80018fc:	2300      	movs	r3, #0
 80018fe:	623b      	str	r3, [r7, #32]
  int16_t  start_sector_num = -1;
 8001900:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001904:	83fb      	strh	r3, [r7, #30]
  uint32_t sector_count = 0;
 8001906:	2300      	movs	r3, #0
 8001908:	61bb      	str	r3, [r7, #24]

  uint32_t FirstSector = 0, NbOfSectors = 0;
 800190a:	2300      	movs	r3, #0
 800190c:	617b      	str	r3, [r7, #20]
 800190e:	2300      	movs	r3, #0
 8001910:	613b      	str	r3, [r7, #16]



    ret = HAL_FLASH_Unlock();
 8001912:	f002 f9c5 	bl	8003ca0 <HAL_FLASH_Unlock>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	bf14      	ite	ne
 800191c:	2301      	movne	r3, #1
 800191e:	2300      	moveq	r3, #0
 8001920:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    ret = HAL_FLASH_OB_Unlock();
 8001924:	f002 f9ee 	bl	8003d04 <HAL_FLASH_OB_Unlock>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	bf14      	ite	ne
 800192e:	2301      	movne	r3, #1
 8001930:	2300      	moveq	r3, #0
 8001932:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Get the Dual bank configuration status */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |
 8001936:	4b22      	ldr	r3, [pc, #136]	; (80019c0 <flashErase+0xd8>)
 8001938:	22f3      	movs	r2, #243	; 0xf3
 800193a:	60da      	str	r2, [r3, #12]
                             FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_ERSERR);

    HAL_FLASHEx_OBGetConfig(&OBInit);
 800193c:	4821      	ldr	r0, [pc, #132]	; (80019c4 <flashErase+0xdc>)
 800193e:	f002 fb9d 	bl	800407c <HAL_FLASHEx_OBGetConfig>

    if((OBInit.USERConfig & OB_NDBANK_SINGLE_BANK) == OB_NDBANK_DUAL_BANK)
 8001942:	4b20      	ldr	r3, [pc, #128]	; (80019c4 <flashErase+0xdc>)
 8001944:	695b      	ldr	r3, [r3, #20]
 8001946:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d102      	bne.n	8001954 <flashErase+0x6c>
    {
  	  printf("Dual Bank Flash init Ok\r\n");
 800194e:	481e      	ldr	r0, [pc, #120]	; (80019c8 <flashErase+0xe0>)
 8001950:	f005 fab2 	bl	8006eb8 <puts>
    }

    end_addr = addr+length;
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	4413      	add	r3, r2
 800195a:	623b      	str	r3, [r7, #32]

    //printf("end_addr : %x\r\n",end_addr);
    /* Get the number of sector to erase from 1st sector*/
    FirstSector = GetSector(addr);
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f000 f87d 	bl	8001a5c <GetSector>
 8001962:	6178      	str	r0, [r7, #20]
    NbOfSectors = GetSector(addr) - FirstSector + 1;
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f000 f879 	bl	8001a5c <GetSector>
 800196a:	4602      	mov	r2, r0
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	3301      	adds	r3, #1
 8001972:	613b      	str	r3, [r7, #16]

    //printf("FirstSector : %d\r\n",FirstSector);
    //printf("NbofSector  : %d\r\n",NbOfSectors);

    init.TypeErase      = FLASH_TYPEERASE_SECTORS;
 8001974:	4b15      	ldr	r3, [pc, #84]	; (80019cc <flashErase+0xe4>)
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]
    init.VoltageRange   = FLASH_VOLTAGE_RANGE_3; // FLASH_BANK_1;
 800197a:	4b14      	ldr	r3, [pc, #80]	; (80019cc <flashErase+0xe4>)
 800197c:	2202      	movs	r2, #2
 800197e:	611a      	str	r2, [r3, #16]
    init.Sector 		= FirstSector; // 지우기 시작할 페이지
 8001980:	4a12      	ldr	r2, [pc, #72]	; (80019cc <flashErase+0xe4>)
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	6093      	str	r3, [r2, #8]
    init.NbSectors      = NbOfSectors; // 지울 페이지 수
 8001986:	4a11      	ldr	r2, [pc, #68]	; (80019cc <flashErase+0xe4>)
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	60d3      	str	r3, [r2, #12]

    status = HAL_FLASHEx_Erase(&init, &page_error);
 800198c:	f107 030c 	add.w	r3, r7, #12
 8001990:	4619      	mov	r1, r3
 8001992:	480e      	ldr	r0, [pc, #56]	; (80019cc <flashErase+0xe4>)
 8001994:	f002 fb02 	bl	8003f9c <HAL_FLASHEx_Erase>
 8001998:	4603      	mov	r3, r0
 800199a:	461a      	mov	r2, r3
 800199c:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <flashErase+0xe8>)
 800199e:	701a      	strb	r2, [r3, #0]
    if (status == HAL_OK)
 80019a0:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <flashErase+0xe8>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d102      	bne.n	80019ae <flashErase+0xc6>
    {
      ret = true;
 80019a8:	2301      	movs	r3, #1
 80019aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    HAL_FLASH_Lock();
 80019ae:	f002 f999 	bl	8003ce4 <HAL_FLASH_Lock>

  return ret;
 80019b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3728      	adds	r7, #40	; 0x28
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40023c00 	.word	0x40023c00
 80019c4:	20000800 	.word	0x20000800
 80019c8:	0800a294 	.word	0x0800a294
 80019cc:	200007ec 	.word	0x200007ec
 80019d0:	20000820 	.word	0x20000820

080019d4 <flashWrite>:

bool flashWrite(uint32_t addr, uint8_t *p_data, uint32_t length)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b088      	sub	sp, #32
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]
  bool ret = true;
 80019e0:	2301      	movs	r3, #1
 80019e2:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status;


  if (addr%2 != 0)
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <flashWrite+0x1e>
  {
    return false;
 80019ee:	2300      	movs	r3, #0
 80019f0:	e030      	b.n	8001a54 <flashWrite+0x80>
  }

  HAL_FLASH_Unlock();
 80019f2:	f002 f955 	bl	8003ca0 <HAL_FLASH_Unlock>

  for (int i=0; i<length; i+=2)
 80019f6:	2300      	movs	r3, #0
 80019f8:	61bb      	str	r3, [r7, #24]
 80019fa:	e024      	b.n	8001a46 <flashWrite+0x72>
  {
    uint16_t data;

    data  = p_data[i+0] << 0;
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	68ba      	ldr	r2, [r7, #8]
 8001a00:	4413      	add	r3, r2
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	82fb      	strh	r3, [r7, #22]
    data |= p_data[i+1] << 8;
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	68ba      	ldr	r2, [r7, #8]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	021b      	lsls	r3, r3, #8
 8001a12:	b21a      	sxth	r2, r3
 8001a14:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	b21b      	sxth	r3, r3
 8001a1c:	82fb      	strh	r3, [r7, #22]

    //printf("write data: %x\r\n",data);

    status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, addr + i, (uint64_t)data);
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	18d1      	adds	r1, r2, r3
 8001a24:	8afa      	ldrh	r2, [r7, #22]
 8001a26:	f04f 0300 	mov.w	r3, #0
 8001a2a:	2001      	movs	r0, #1
 8001a2c:	f002 f8dc 	bl	8003be8 <HAL_FLASH_Program>
 8001a30:	4603      	mov	r3, r0
 8001a32:	757b      	strb	r3, [r7, #21]
    if (status != HAL_OK)
 8001a34:	7d7b      	ldrb	r3, [r7, #21]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d002      	beq.n	8001a40 <flashWrite+0x6c>
    {
      ret = false;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	77fb      	strb	r3, [r7, #31]
      break;
 8001a3e:	e006      	b.n	8001a4e <flashWrite+0x7a>
  for (int i=0; i<length; i+=2)
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	3302      	adds	r3, #2
 8001a44:	61bb      	str	r3, [r7, #24]
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d8d6      	bhi.n	80019fc <flashWrite+0x28>
    }
  }

  HAL_FLASH_Lock();
 8001a4e:	f002 f949 	bl	8003ce4 <HAL_FLASH_Lock>

  return ret;
 8001a52:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3720      	adds	r7, #32
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <GetSector>:

  return ret;
}

static uint32_t GetSector(uint32_t Address)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 8001a64:	2300      	movs	r3, #0
 8001a66:	60fb      	str	r3, [r7, #12]

  if((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0))
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4a40      	ldr	r2, [pc, #256]	; (8001b6c <GetSector+0x110>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d206      	bcs.n	8001a7e <GetSector+0x22>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001a76:	d302      	bcc.n	8001a7e <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	e06f      	b.n	8001b5e <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_2) && (Address >= ADDR_FLASH_SECTOR_1))
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a3b      	ldr	r2, [pc, #236]	; (8001b70 <GetSector+0x114>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d806      	bhi.n	8001a94 <GetSector+0x38>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a38      	ldr	r2, [pc, #224]	; (8001b6c <GetSector+0x110>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d302      	bcc.n	8001a94 <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	e064      	b.n	8001b5e <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_3) && (Address >= ADDR_FLASH_SECTOR_2))
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	4a37      	ldr	r2, [pc, #220]	; (8001b74 <GetSector+0x118>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d206      	bcs.n	8001aaa <GetSector+0x4e>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	4a34      	ldr	r2, [pc, #208]	; (8001b70 <GetSector+0x114>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d902      	bls.n	8001aaa <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	e059      	b.n	8001b5e <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_4) && (Address >= ADDR_FLASH_SECTOR_3))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a32      	ldr	r2, [pc, #200]	; (8001b78 <GetSector+0x11c>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d806      	bhi.n	8001ac0 <GetSector+0x64>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a2f      	ldr	r2, [pc, #188]	; (8001b74 <GetSector+0x118>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d302      	bcc.n	8001ac0 <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;
 8001aba:	2303      	movs	r3, #3
 8001abc:	60fb      	str	r3, [r7, #12]
 8001abe:	e04e      	b.n	8001b5e <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_5) && (Address >= ADDR_FLASH_SECTOR_4))
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4a2e      	ldr	r2, [pc, #184]	; (8001b7c <GetSector+0x120>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d806      	bhi.n	8001ad6 <GetSector+0x7a>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4a2b      	ldr	r2, [pc, #172]	; (8001b78 <GetSector+0x11c>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d902      	bls.n	8001ad6 <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;
 8001ad0:	2304      	movs	r3, #4
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	e043      	b.n	8001b5e <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_6) && (Address >= ADDR_FLASH_SECTOR_5))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a29      	ldr	r2, [pc, #164]	; (8001b80 <GetSector+0x124>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d806      	bhi.n	8001aec <GetSector+0x90>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a26      	ldr	r2, [pc, #152]	; (8001b7c <GetSector+0x120>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d902      	bls.n	8001aec <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;
 8001ae6:	2305      	movs	r3, #5
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	e038      	b.n	8001b5e <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_7) && (Address >= ADDR_FLASH_SECTOR_6))
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	4a25      	ldr	r2, [pc, #148]	; (8001b84 <GetSector+0x128>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d806      	bhi.n	8001b02 <GetSector+0xa6>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	4a22      	ldr	r2, [pc, #136]	; (8001b80 <GetSector+0x124>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d902      	bls.n	8001b02 <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;
 8001afc:	2306      	movs	r3, #6
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	e02d      	b.n	8001b5e <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_8) && (Address >= ADDR_FLASH_SECTOR_7))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8001b08:	d206      	bcs.n	8001b18 <GetSector+0xbc>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a1d      	ldr	r2, [pc, #116]	; (8001b84 <GetSector+0x128>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d902      	bls.n	8001b18 <GetSector+0xbc>
  {
    sector = FLASH_SECTOR_7;
 8001b12:	2307      	movs	r3, #7
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	e022      	b.n	8001b5e <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_9) && (Address >= ADDR_FLASH_SECTOR_8))
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	4a1b      	ldr	r2, [pc, #108]	; (8001b88 <GetSector+0x12c>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d806      	bhi.n	8001b2e <GetSector+0xd2>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8001b26:	d302      	bcc.n	8001b2e <GetSector+0xd2>
  {
    sector = FLASH_SECTOR_8;
 8001b28:	2308      	movs	r3, #8
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	e017      	b.n	8001b5e <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_10) && (Address >= ADDR_FLASH_SECTOR_9))
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a16      	ldr	r2, [pc, #88]	; (8001b8c <GetSector+0x130>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d806      	bhi.n	8001b44 <GetSector+0xe8>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a13      	ldr	r2, [pc, #76]	; (8001b88 <GetSector+0x12c>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d902      	bls.n	8001b44 <GetSector+0xe8>
  {
    sector = FLASH_SECTOR_9;
 8001b3e:	2309      	movs	r3, #9
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	e00c      	b.n	8001b5e <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_11) && (Address >= ADDR_FLASH_SECTOR_10))
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4a12      	ldr	r2, [pc, #72]	; (8001b90 <GetSector+0x134>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d806      	bhi.n	8001b5a <GetSector+0xfe>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4a0f      	ldr	r2, [pc, #60]	; (8001b8c <GetSector+0x130>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d902      	bls.n	8001b5a <GetSector+0xfe>
  {
    sector = FLASH_SECTOR_10;
 8001b54:	230a      	movs	r3, #10
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	e001      	b.n	8001b5e <GetSector+0x102>
    sector = FLASH_SECTOR_23;
  }
#else
  else /* (Address < FLASH_END_ADDR) && (Address >= ADDR_FLASH_SECTOR_11) */
  {
    sector = FLASH_SECTOR_11;
 8001b5a:	230b      	movs	r3, #11
 8001b5c:	60fb      	str	r3, [r7, #12]
  }
#endif /* DUAL_BANK */
  return sector;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3714      	adds	r7, #20
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	08008000 	.word	0x08008000
 8001b70:	0800ffff 	.word	0x0800ffff
 8001b74:	08018000 	.word	0x08018000
 8001b78:	0801ffff 	.word	0x0801ffff
 8001b7c:	0803ffff 	.word	0x0803ffff
 8001b80:	0807ffff 	.word	0x0807ffff
 8001b84:	080bffff 	.word	0x080bffff
 8001b88:	0813ffff 	.word	0x0813ffff
 8001b8c:	0817ffff 	.word	0x0817ffff
 8001b90:	081bffff 	.word	0x081bffff

08001b94 <cliFlash>:



void cliFlash(cli_args_t *args)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b08c      	sub	sp, #48	; 0x30
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f



  if (args->argc == 1 && args->isStr(0, "info") == true)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	881b      	ldrh	r3, [r3, #0]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d121      	bne.n	8001bee <cliFlash+0x5a>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	495c      	ldr	r1, [pc, #368]	; (8001d20 <cliFlash+0x18c>)
 8001bb0:	2000      	movs	r0, #0
 8001bb2:	4798      	blx	r3
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d019      	beq.n	8001bee <cliFlash+0x5a>
  {
    for (int i=0; i<FLASH_SECTOR_MAX; i++)
 8001bba:	2300      	movs	r3, #0
 8001bbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bbe:	e010      	b.n	8001be2 <cliFlash+0x4e>
    {
      cliPrintf("0x%X : %dKB\r\n", flash_tbl[i].addr, flash_tbl[i].length/1024);
 8001bc0:	4a58      	ldr	r2, [pc, #352]	; (8001d24 <cliFlash+0x190>)
 8001bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bc4:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8001bc8:	4a56      	ldr	r2, [pc, #344]	; (8001d24 <cliFlash+0x190>)
 8001bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bcc:	00db      	lsls	r3, r3, #3
 8001bce:	4413      	add	r3, r2
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	0a9b      	lsrs	r3, r3, #10
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	4854      	ldr	r0, [pc, #336]	; (8001d28 <cliFlash+0x194>)
 8001bd8:	f7ff fc16 	bl	8001408 <cliPrintf>
    for (int i=0; i<FLASH_SECTOR_MAX; i++)
 8001bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bde:	3301      	adds	r3, #1
 8001be0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001be4:	2b0a      	cmp	r3, #10
 8001be6:	ddeb      	ble.n	8001bc0 <cliFlash+0x2c>
    }

    ret = true;
 8001be8:	2301      	movs	r3, #1
 8001bea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  if (args->argc == 3 && args->isStr(0, "read") == true)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	881b      	ldrh	r3, [r3, #0]
 8001bf2:	2b03      	cmp	r3, #3
 8001bf4:	d12b      	bne.n	8001c4e <cliFlash+0xba>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	695b      	ldr	r3, [r3, #20]
 8001bfa:	494c      	ldr	r1, [pc, #304]	; (8001d2c <cliFlash+0x198>)
 8001bfc:	2000      	movs	r0, #0
 8001bfe:	4798      	blx	r3
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d023      	beq.n	8001c4e <cliFlash+0xba>
  {
    uint32_t addr;
    uint32_t length;

    addr   = (uint32_t)args->getData(1);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	2001      	movs	r0, #1
 8001c0c:	4798      	blx	r3
 8001c0e:	4603      	mov	r3, r0
 8001c10:	623b      	str	r3, [r7, #32]
    length = (uint32_t)args->getData(2);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	2002      	movs	r0, #2
 8001c18:	4798      	blx	r3
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	61fb      	str	r3, [r7, #28]

    for (int i=0; i<length; i++)
 8001c1e:	2300      	movs	r3, #0
 8001c20:	627b      	str	r3, [r7, #36]	; 0x24
 8001c22:	e00d      	b.n	8001c40 <cliFlash+0xac>
    {
      cliPrintf("0x%X : 0x%X\r\n", addr+i, *((uint8_t *)(addr+i)));
 8001c24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c26:	6a3b      	ldr	r3, [r7, #32]
 8001c28:	18d1      	adds	r1, r2, r3
 8001c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c2c:	6a3b      	ldr	r3, [r7, #32]
 8001c2e:	4413      	add	r3, r2
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	461a      	mov	r2, r3
 8001c34:	483e      	ldr	r0, [pc, #248]	; (8001d30 <cliFlash+0x19c>)
 8001c36:	f7ff fbe7 	bl	8001408 <cliPrintf>
    for (int i=0; i<length; i++)
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c42:	69fa      	ldr	r2, [r7, #28]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d8ed      	bhi.n	8001c24 <cliFlash+0x90>
    }

    ret = true;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  if (args->argc == 3 && args->isStr(0, "erase") == true)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	881b      	ldrh	r3, [r3, #0]
 8001c52:	2b03      	cmp	r3, #3
 8001c54:	d121      	bne.n	8001c9a <cliFlash+0x106>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	695b      	ldr	r3, [r3, #20]
 8001c5a:	4936      	ldr	r1, [pc, #216]	; (8001d34 <cliFlash+0x1a0>)
 8001c5c:	2000      	movs	r0, #0
 8001c5e:	4798      	blx	r3
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d019      	beq.n	8001c9a <cliFlash+0x106>
  {
    uint32_t addr;
    uint32_t length;

    addr   = (uint32_t)args->getData(1);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	2001      	movs	r0, #1
 8001c6c:	4798      	blx	r3
 8001c6e:	4603      	mov	r3, r0
 8001c70:	61bb      	str	r3, [r7, #24]
    length = (uint32_t)args->getData(2);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	2002      	movs	r0, #2
 8001c78:	4798      	blx	r3
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	617b      	str	r3, [r7, #20]

    if (flashErase(addr, length) == true)
 8001c7e:	6979      	ldr	r1, [r7, #20]
 8001c80:	69b8      	ldr	r0, [r7, #24]
 8001c82:	f7ff fe31 	bl	80018e8 <flashErase>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d003      	beq.n	8001c94 <cliFlash+0x100>
    {
      cliPrintf("Erase OK\r\n");
 8001c8c:	482a      	ldr	r0, [pc, #168]	; (8001d38 <cliFlash+0x1a4>)
 8001c8e:	f7ff fbbb 	bl	8001408 <cliPrintf>
 8001c92:	e002      	b.n	8001c9a <cliFlash+0x106>
    }
    else
    {
      cliPrintf("Erase Fail\r\n");
 8001c94:	4829      	ldr	r0, [pc, #164]	; (8001d3c <cliFlash+0x1a8>)
 8001c96:	f7ff fbb7 	bl	8001408 <cliPrintf>
    }
  }

  if (args->argc == 3 && args->isStr(0, "write") == true)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	881b      	ldrh	r3, [r3, #0]
 8001c9e:	2b03      	cmp	r3, #3
 8001ca0:	d127      	bne.n	8001cf2 <cliFlash+0x15e>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	695b      	ldr	r3, [r3, #20]
 8001ca6:	4926      	ldr	r1, [pc, #152]	; (8001d40 <cliFlash+0x1ac>)
 8001ca8:	2000      	movs	r0, #0
 8001caa:	4798      	blx	r3
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d01f      	beq.n	8001cf2 <cliFlash+0x15e>
  {
    uint32_t addr;
    uint32_t data;

    addr   = (uint32_t)args->getData(1);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	2001      	movs	r0, #1
 8001cb8:	4798      	blx	r3
 8001cba:	4603      	mov	r3, r0
 8001cbc:	613b      	str	r3, [r7, #16]
    data   = (uint32_t)args->getData(2);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	2002      	movs	r0, #2
 8001cc4:	4798      	blx	r3
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	60fb      	str	r3, [r7, #12]

    if (flashWrite(addr, (uint8_t *)&data, 4) == true)
 8001cca:	f107 030c 	add.w	r3, r7, #12
 8001cce:	2204      	movs	r2, #4
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	6938      	ldr	r0, [r7, #16]
 8001cd4:	f7ff fe7e 	bl	80019d4 <flashWrite>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <cliFlash+0x152>
    {
      cliPrintf("Write OK\r\n");
 8001cde:	4819      	ldr	r0, [pc, #100]	; (8001d44 <cliFlash+0x1b0>)
 8001ce0:	f7ff fb92 	bl	8001408 <cliPrintf>
 8001ce4:	e002      	b.n	8001cec <cliFlash+0x158>
    }
    else
    {
      cliPrintf("Write Fail\r\n");
 8001ce6:	4818      	ldr	r0, [pc, #96]	; (8001d48 <cliFlash+0x1b4>)
 8001ce8:	f7ff fb8e 	bl	8001408 <cliPrintf>
    }

    ret = true;
 8001cec:	2301      	movs	r3, #1
 8001cee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  if (ret != true)
 8001cf2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001cf6:	f083 0301 	eor.w	r3, r3, #1
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d00b      	beq.n	8001d18 <cliFlash+0x184>
  {
    cliPrintf("flash info\r\n");
 8001d00:	4812      	ldr	r0, [pc, #72]	; (8001d4c <cliFlash+0x1b8>)
 8001d02:	f7ff fb81 	bl	8001408 <cliPrintf>
    cliPrintf("flash read  addr length\r\n");
 8001d06:	4812      	ldr	r0, [pc, #72]	; (8001d50 <cliFlash+0x1bc>)
 8001d08:	f7ff fb7e 	bl	8001408 <cliPrintf>
    cliPrintf("flash erase addr length\r\n");
 8001d0c:	4811      	ldr	r0, [pc, #68]	; (8001d54 <cliFlash+0x1c0>)
 8001d0e:	f7ff fb7b 	bl	8001408 <cliPrintf>
    cliPrintf("flash write addr data\r\n");
 8001d12:	4811      	ldr	r0, [pc, #68]	; (8001d58 <cliFlash+0x1c4>)
 8001d14:	f7ff fb78 	bl	8001408 <cliPrintf>
  }
}
 8001d18:	bf00      	nop
 8001d1a:	3730      	adds	r7, #48	; 0x30
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	0800a2c0 	.word	0x0800a2c0
 8001d24:	20000200 	.word	0x20000200
 8001d28:	0800a2c8 	.word	0x0800a2c8
 8001d2c:	0800a2d8 	.word	0x0800a2d8
 8001d30:	0800a2e0 	.word	0x0800a2e0
 8001d34:	0800a2f0 	.word	0x0800a2f0
 8001d38:	0800a2f8 	.word	0x0800a2f8
 8001d3c:	0800a304 	.word	0x0800a304
 8001d40:	0800a314 	.word	0x0800a314
 8001d44:	0800a31c 	.word	0x0800a31c
 8001d48:	0800a328 	.word	0x0800a328
 8001d4c:	0800a338 	.word	0x0800a338
 8001d50:	0800a348 	.word	0x0800a348
 8001d54:	0800a364 	.word	0x0800a364
 8001d58:	0800a380 	.word	0x0800a380

08001d5c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001d60:	f3bf 8f4f 	dsb	sy
}
 8001d64:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d66:	f3bf 8f6f 	isb	sy
}
 8001d6a:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001d6c:	4b0d      	ldr	r3, [pc, #52]	; (8001da4 <SCB_EnableICache+0x48>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001d74:	f3bf 8f4f 	dsb	sy
}
 8001d78:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d7a:	f3bf 8f6f 	isb	sy
}
 8001d7e:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001d80:	4b08      	ldr	r3, [pc, #32]	; (8001da4 <SCB_EnableICache+0x48>)
 8001d82:	695b      	ldr	r3, [r3, #20]
 8001d84:	4a07      	ldr	r2, [pc, #28]	; (8001da4 <SCB_EnableICache+0x48>)
 8001d86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d8a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d8c:	f3bf 8f4f 	dsb	sy
}
 8001d90:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d92:	f3bf 8f6f 	isb	sy
}
 8001d96:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8001d98:	bf00      	nop
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	e000ed00 	.word	0xe000ed00

08001da8 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001dae:	4b1f      	ldr	r3, [pc, #124]	; (8001e2c <SCB_EnableDCache+0x84>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001db6:	f3bf 8f4f 	dsb	sy
}
 8001dba:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001dbc:	4b1b      	ldr	r3, [pc, #108]	; (8001e2c <SCB_EnableDCache+0x84>)
 8001dbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001dc2:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	0b5b      	lsrs	r3, r3, #13
 8001dc8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001dcc:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	08db      	lsrs	r3, r3, #3
 8001dd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001dd6:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	015a      	lsls	r2, r3, #5
 8001ddc:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001de0:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001de2:	68ba      	ldr	r2, [r7, #8]
 8001de4:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001de6:	4911      	ldr	r1, [pc, #68]	; (8001e2c <SCB_EnableDCache+0x84>)
 8001de8:	4313      	orrs	r3, r2
 8001dea:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	1e5a      	subs	r2, r3, #1
 8001df2:	60ba      	str	r2, [r7, #8]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d1ef      	bne.n	8001dd8 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	1e5a      	subs	r2, r3, #1
 8001dfc:	60fa      	str	r2, [r7, #12]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d1e5      	bne.n	8001dce <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8001e02:	f3bf 8f4f 	dsb	sy
}
 8001e06:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001e08:	4b08      	ldr	r3, [pc, #32]	; (8001e2c <SCB_EnableDCache+0x84>)
 8001e0a:	695b      	ldr	r3, [r3, #20]
 8001e0c:	4a07      	ldr	r2, [pc, #28]	; (8001e2c <SCB_EnableDCache+0x84>)
 8001e0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e12:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001e14:	f3bf 8f4f 	dsb	sy
}
 8001e18:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e1a:	f3bf 8f6f 	isb	sy
}
 8001e1e:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001e20:	bf00      	nop
 8001e22:	3714      	adds	r7, #20
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	e000ed00 	.word	0xe000ed00

08001e30 <__io_putchar>:


UART_HandleTypeDef huart3;

int __io_putchar(int ch)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  uartWrite(2, (uint8_t *)&ch, 1);
 8001e38:	1d3b      	adds	r3, r7, #4
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	2002      	movs	r0, #2
 8001e40:	f000 fb08 	bl	8002454 <uartWrite>
  return 1;
 8001e44:	2301      	movs	r3, #1
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
	...

08001e50 <MX_GPIO_Init>:
static void CPU_CACHE_Enable(void);

void SystemClock_config(void);

void MX_GPIO_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b08c      	sub	sp, #48	; 0x30
 8001e54:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e56:	f107 031c 	add.w	r3, r7, #28
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	605a      	str	r2, [r3, #4]
 8001e60:	609a      	str	r2, [r3, #8]
 8001e62:	60da      	str	r2, [r3, #12]
 8001e64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e66:	4b46      	ldr	r3, [pc, #280]	; (8001f80 <MX_GPIO_Init+0x130>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	4a45      	ldr	r2, [pc, #276]	; (8001f80 <MX_GPIO_Init+0x130>)
 8001e6c:	f043 0304 	orr.w	r3, r3, #4
 8001e70:	6313      	str	r3, [r2, #48]	; 0x30
 8001e72:	4b43      	ldr	r3, [pc, #268]	; (8001f80 <MX_GPIO_Init+0x130>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	f003 0304 	and.w	r3, r3, #4
 8001e7a:	61bb      	str	r3, [r7, #24]
 8001e7c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e7e:	4b40      	ldr	r3, [pc, #256]	; (8001f80 <MX_GPIO_Init+0x130>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	4a3f      	ldr	r2, [pc, #252]	; (8001f80 <MX_GPIO_Init+0x130>)
 8001e84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e88:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8a:	4b3d      	ldr	r3, [pc, #244]	; (8001f80 <MX_GPIO_Init+0x130>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e92:	617b      	str	r3, [r7, #20]
 8001e94:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e96:	4b3a      	ldr	r3, [pc, #232]	; (8001f80 <MX_GPIO_Init+0x130>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	4a39      	ldr	r2, [pc, #228]	; (8001f80 <MX_GPIO_Init+0x130>)
 8001e9c:	f043 0301 	orr.w	r3, r3, #1
 8001ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea2:	4b37      	ldr	r3, [pc, #220]	; (8001f80 <MX_GPIO_Init+0x130>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	613b      	str	r3, [r7, #16]
 8001eac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eae:	4b34      	ldr	r3, [pc, #208]	; (8001f80 <MX_GPIO_Init+0x130>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	4a33      	ldr	r2, [pc, #204]	; (8001f80 <MX_GPIO_Init+0x130>)
 8001eb4:	f043 0302 	orr.w	r3, r3, #2
 8001eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eba:	4b31      	ldr	r3, [pc, #196]	; (8001f80 <MX_GPIO_Init+0x130>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	60fb      	str	r3, [r7, #12]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ec6:	4b2e      	ldr	r3, [pc, #184]	; (8001f80 <MX_GPIO_Init+0x130>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	4a2d      	ldr	r2, [pc, #180]	; (8001f80 <MX_GPIO_Init+0x130>)
 8001ecc:	f043 0308 	orr.w	r3, r3, #8
 8001ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed2:	4b2b      	ldr	r3, [pc, #172]	; (8001f80 <MX_GPIO_Init+0x130>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	f003 0308 	and.w	r3, r3, #8
 8001eda:	60bb      	str	r3, [r7, #8]
 8001edc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ede:	4b28      	ldr	r3, [pc, #160]	; (8001f80 <MX_GPIO_Init+0x130>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	4a27      	ldr	r2, [pc, #156]	; (8001f80 <MX_GPIO_Init+0x130>)
 8001ee4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eea:	4b25      	ldr	r3, [pc, #148]	; (8001f80 <MX_GPIO_Init+0x130>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ef2:	607b      	str	r3, [r7, #4]
 8001ef4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f244 0181 	movw	r1, #16513	; 0x4081
 8001efc:	4821      	ldr	r0, [pc, #132]	; (8001f84 <MX_GPIO_Init+0x134>)
 8001efe:	f002 fc99 	bl	8004834 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001f02:	2200      	movs	r2, #0
 8001f04:	2140      	movs	r1, #64	; 0x40
 8001f06:	4820      	ldr	r0, [pc, #128]	; (8001f88 <MX_GPIO_Init+0x138>)
 8001f08:	f002 fc94 	bl	8004834 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001f0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f12:	4b1e      	ldr	r3, [pc, #120]	; (8001f8c <MX_GPIO_Init+0x13c>)
 8001f14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001f1a:	f107 031c 	add.w	r3, r7, #28
 8001f1e:	4619      	mov	r1, r3
 8001f20:	481b      	ldr	r0, [pc, #108]	; (8001f90 <MX_GPIO_Init+0x140>)
 8001f22:	f002 f9cf 	bl	80042c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001f26:	f244 0381 	movw	r3, #16513	; 0x4081
 8001f2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f30:	2300      	movs	r3, #0
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f34:	2300      	movs	r3, #0
 8001f36:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f38:	f107 031c 	add.w	r3, r7, #28
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4811      	ldr	r0, [pc, #68]	; (8001f84 <MX_GPIO_Init+0x134>)
 8001f40:	f002 f9c0 	bl	80042c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001f44:	2340      	movs	r3, #64	; 0x40
 8001f46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f50:	2300      	movs	r3, #0
 8001f52:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001f54:	f107 031c 	add.w	r3, r7, #28
 8001f58:	4619      	mov	r1, r3
 8001f5a:	480b      	ldr	r0, [pc, #44]	; (8001f88 <MX_GPIO_Init+0x138>)
 8001f5c:	f002 f9b2 	bl	80042c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001f60:	2380      	movs	r3, #128	; 0x80
 8001f62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f64:	2300      	movs	r3, #0
 8001f66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001f6c:	f107 031c 	add.w	r3, r7, #28
 8001f70:	4619      	mov	r1, r3
 8001f72:	4805      	ldr	r0, [pc, #20]	; (8001f88 <MX_GPIO_Init+0x138>)
 8001f74:	f002 f9a6 	bl	80042c4 <HAL_GPIO_Init>
}
 8001f78:	bf00      	nop
 8001f7a:	3730      	adds	r7, #48	; 0x30
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40023800 	.word	0x40023800
 8001f84:	40020400 	.word	0x40020400
 8001f88:	40021800 	.word	0x40021800
 8001f8c:	10110000 	.word	0x10110000
 8001f90:	40020800 	.word	0x40020800

08001f94 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b0b8      	sub	sp, #224	; 0xe0
 8001f98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f9a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001f9e:	2234      	movs	r2, #52	; 0x34
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f004 fee4 	bl	8006d70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fa8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	605a      	str	r2, [r3, #4]
 8001fb2:	609a      	str	r2, [r3, #8]
 8001fb4:	60da      	str	r2, [r3, #12]
 8001fb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fb8:	f107 0308 	add.w	r3, r7, #8
 8001fbc:	2290      	movs	r2, #144	; 0x90
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f004 fed5 	bl	8006d70 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001fc6:	f002 fc69 	bl	800489c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fca:	4b39      	ldr	r3, [pc, #228]	; (80020b0 <SystemClock_Config+0x11c>)
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	4a38      	ldr	r2, [pc, #224]	; (80020b0 <SystemClock_Config+0x11c>)
 8001fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fd6:	4b36      	ldr	r3, [pc, #216]	; (80020b0 <SystemClock_Config+0x11c>)
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fde:	607b      	str	r3, [r7, #4]
 8001fe0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fe2:	4b34      	ldr	r3, [pc, #208]	; (80020b4 <SystemClock_Config+0x120>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a33      	ldr	r2, [pc, #204]	; (80020b4 <SystemClock_Config+0x120>)
 8001fe8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001fec:	6013      	str	r3, [r2, #0]
 8001fee:	4b31      	ldr	r3, [pc, #196]	; (80020b4 <SystemClock_Config+0x120>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ff6:	603b      	str	r3, [r7, #0]
 8001ff8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002000:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002004:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002008:	2302      	movs	r3, #2
 800200a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800200e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002012:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002016:	2304      	movs	r3, #4
 8002018:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 800201c:	23d8      	movs	r3, #216	; 0xd8
 800201e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002022:	2302      	movs	r3, #2
 8002024:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8002028:	2309      	movs	r3, #9
 800202a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800202e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002032:	4618      	mov	r0, r3
 8002034:	f002 fc92 	bl	800495c <HAL_RCC_OscConfig>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800203e:	f000 f84a 	bl	80020d6 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002042:	f002 fc3b 	bl	80048bc <HAL_PWREx_EnableOverDrive>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800204c:	f000 f843 	bl	80020d6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002050:	230f      	movs	r3, #15
 8002052:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002056:	2302      	movs	r3, #2
 8002058:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800205c:	2300      	movs	r3, #0
 800205e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002062:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002066:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800206a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800206e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002072:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002076:	2107      	movs	r1, #7
 8002078:	4618      	mov	r0, r3
 800207a:	f002 ff1d 	bl	8004eb8 <HAL_RCC_ClockConfig>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8002084:	f000 f827 	bl	80020d6 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002088:	f44f 7380 	mov.w	r3, #256	; 0x100
 800208c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800208e:	2300      	movs	r3, #0
 8002090:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002092:	f107 0308 	add.w	r3, r7, #8
 8002096:	4618      	mov	r0, r3
 8002098:	f003 f910 	bl	80052bc <HAL_RCCEx_PeriphCLKConfig>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <SystemClock_Config+0x112>
  {
    Error_Handler();
 80020a2:	f000 f818 	bl	80020d6 <Error_Handler>
  }
}
 80020a6:	bf00      	nop
 80020a8:	37e0      	adds	r7, #224	; 0xe0
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40023800 	.word	0x40023800
 80020b4:	40007000 	.word	0x40007000

080020b8 <CPU_CACHE_Enable>:

/* USER CODE BEGIN 4 */
static void CPU_CACHE_Enable(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* Enable I-Cache */
  SCB_EnableICache();
 80020bc:	f7ff fe4e 	bl	8001d5c <SCB_EnableICache>

  /* Enable D-Cache */
  SCB_EnableDCache();
 80020c0:	f7ff fe72 	bl	8001da8 <SCB_EnableDCache>
}
 80020c4:	bf00      	nop
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <millis>:
void delay(uint32_t ms)
{
	HAL_Delay(ms);
}
uint32_t millis(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80020cc:	f000 ffd4 	bl	8003078 <HAL_GetTick>
 80020d0:	4603      	mov	r3, r0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <Error_Handler>:
void Error_Handler(void)
{
 80020d6:	b480      	push	{r7}
 80020d8:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80020da:	b672      	cpsid	i
}
 80020dc:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
}
 80020de:	bf00      	nop
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <main>:

int main(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
	uint32_t pre_time;
	uint32_t k=16;
 80020ee:	2310      	movs	r3, #16
 80020f0:	603b      	str	r3, [r7, #0]

	CPU_CACHE_Enable();
 80020f2:	f7ff ffe1 	bl	80020b8 <CPU_CACHE_Enable>

	HAL_Init();
 80020f6:	f000 ff6d 	bl	8002fd4 <HAL_Init>
	SystemClock_Config();
 80020fa:	f7ff ff4b 	bl	8001f94 <SystemClock_Config>

	//SystemInit();
	MX_GPIO_Init();
 80020fe:	f7ff fea7 	bl	8001e50 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8002102:	f000 f9fd 	bl	8002500 <MX_USART3_UART_Init>
	flashInit();
 8002106:	f7ff fbe1 	bl	80018cc <flashInit>
	ymodemInit();
 800210a:	f000 fb3b 	bl	8002784 <ymodemInit>
	cliFlash();
 800210e:	f7ff fd41 	bl	8001b94 <cliFlash>
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif //...? 확인 필요.
*/

	printf("start MCU\r\n");
 8002112:	480c      	ldr	r0, [pc, #48]	; (8002144 <main+0x5c>)
 8002114:	f004 fed0 	bl	8006eb8 <puts>
	 pre_time = millis();
 8002118:	f7ff ffd6 	bl	80020c8 <millis>
 800211c:	6078      	str	r0, [r7, #4]

	  while(1)
	  {
		  if(millis()-pre_time >= 500)
 800211e:	f7ff ffd3 	bl	80020c8 <millis>
 8002122:	4602      	mov	r2, r0
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800212c:	d306      	bcc.n	800213c <main+0x54>
		  {
			  pre_time = millis();
 800212e:	f7ff ffcb 	bl	80020c8 <millis>
 8002132:	6078      	str	r0, [r7, #4]
			  HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 8002134:	2101      	movs	r1, #1
 8002136:	4804      	ldr	r0, [pc, #16]	; (8002148 <main+0x60>)
 8002138:	f002 fb95 	bl	8004866 <HAL_GPIO_TogglePin>
		  }

		  cliMain();
 800213c:	f7fe fd56 	bl	8000bec <cliMain>
	  {
 8002140:	e7ed      	b.n	800211e <main+0x36>
 8002142:	bf00      	nop
 8002144:	0800a398 	.word	0x0800a398
 8002148:	40020400 	.word	0x40020400

0800214c <qbufferCreate>:
{

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 800214c:	b480      	push	{r7}
 800214e:	b087      	sub	sp, #28
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8002158:	2301      	movs	r3, #1
 800215a:	75fb      	strb	r3, [r7, #23]

  p_node->in    = 0;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2200      	movs	r2, #0
 8002160:	601a      	str	r2, [r3, #0]
  p_node->out   = 0;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2200      	movs	r2, #0
 8002166:	605a      	str	r2, [r3, #4]
  p_node->len   = length;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	609a      	str	r2, [r3, #8]
  p_node->p_buf = p_buf;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	68ba      	ldr	r2, [r7, #8]
 8002172:	60da      	str	r2, [r3, #12]

  return ret;
 8002174:	7dfb      	ldrb	r3, [r7, #23]
}
 8002176:	4618      	mov	r0, r3
 8002178:	371c      	adds	r7, #28
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr

08002182 <qbufferRead>:

  return ret;
}

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8002182:	b480      	push	{r7}
 8002184:	b087      	sub	sp, #28
 8002186:	af00      	add	r7, sp, #0
 8002188:	60f8      	str	r0, [r7, #12]
 800218a:	60b9      	str	r1, [r7, #8]
 800218c:	607a      	str	r2, [r7, #4]
  bool ret = true;
 800218e:	2301      	movs	r3, #1
 8002190:	75fb      	strb	r3, [r7, #23]

  for (int i=0; i<length; i++)
 8002192:	2300      	movs	r3, #0
 8002194:	613b      	str	r3, [r7, #16]
 8002196:	e026      	b.n	80021e6 <qbufferRead+0x64>
  {
    if (p_node->p_buf != NULL)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d009      	beq.n	80021b4 <qbufferRead+0x32>
    {
      p_data[i] = p_node->p_buf[p_node->out];
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	68da      	ldr	r2, [r3, #12]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	441a      	add	r2, r3
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	68b9      	ldr	r1, [r7, #8]
 80021ae:	440b      	add	r3, r1
 80021b0:	7812      	ldrb	r2, [r2, #0]
 80021b2:	701a      	strb	r2, [r3, #0]
    }

    if (p_node->out != p_node->in)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	685a      	ldr	r2, [r3, #4]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d00c      	beq.n	80021da <qbufferRead+0x58>
    {
      p_node->out = (p_node->out + 1) % p_node->len;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	3301      	adds	r3, #1
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	6892      	ldr	r2, [r2, #8]
 80021ca:	fbb3 f1f2 	udiv	r1, r3, r2
 80021ce:	fb02 f201 	mul.w	r2, r2, r1
 80021d2:	1a9a      	subs	r2, r3, r2
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	605a      	str	r2, [r3, #4]
 80021d8:	e002      	b.n	80021e0 <qbufferRead+0x5e>
    }
    else
    {
      ret = false;
 80021da:	2300      	movs	r3, #0
 80021dc:	75fb      	strb	r3, [r7, #23]
      break;
 80021de:	e006      	b.n	80021ee <qbufferRead+0x6c>
  for (int i=0; i<length; i++)
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	3301      	adds	r3, #1
 80021e4:	613b      	str	r3, [r7, #16]
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d8d4      	bhi.n	8002198 <qbufferRead+0x16>
    }
  }
  return ret;
 80021ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	371c      	adds	r7, #28
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <qbufferAvailable>:

uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  uint32_t ret;

  ret = (p_node->in - p_node->out) % p_node->len;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	6892      	ldr	r2, [r2, #8]
 8002212:	fbb3 f1f2 	udiv	r1, r3, r2
 8002216:	fb02 f201 	mul.w	r2, r2, r1
 800221a:	1a9b      	subs	r3, r3, r2
 800221c:	60fb      	str	r3, [r7, #12]

  return ret;
 800221e:	68fb      	ldr	r3, [r7, #12]
}
 8002220:	4618      	mov	r0, r3
 8002222:	3714      	adds	r7, #20
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
	return 1;
 8002230:	2301      	movs	r3, #1
}
 8002232:	4618      	mov	r0, r3
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <_kill>:

int _kill(int pid, int sig)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002246:	f004 fd5b 	bl	8006d00 <__errno>
 800224a:	4603      	mov	r3, r0
 800224c:	2216      	movs	r2, #22
 800224e:	601a      	str	r2, [r3, #0]
	return -1;
 8002250:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002254:	4618      	mov	r0, r3
 8002256:	3708      	adds	r7, #8
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <_exit>:

void _exit (int status)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002264:	f04f 31ff 	mov.w	r1, #4294967295
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f7ff ffe7 	bl	800223c <_kill>
	while (1) {}		/* Make sure we hang here */
 800226e:	e7fe      	b.n	800226e <_exit+0x12>

08002270 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800227c:	2300      	movs	r3, #0
 800227e:	617b      	str	r3, [r7, #20]
 8002280:	e00a      	b.n	8002298 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002282:	f3af 8000 	nop.w
 8002286:	4601      	mov	r1, r0
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	1c5a      	adds	r2, r3, #1
 800228c:	60ba      	str	r2, [r7, #8]
 800228e:	b2ca      	uxtb	r2, r1
 8002290:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	3301      	adds	r3, #1
 8002296:	617b      	str	r3, [r7, #20]
 8002298:	697a      	ldr	r2, [r7, #20]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	429a      	cmp	r2, r3
 800229e:	dbf0      	blt.n	8002282 <_read+0x12>
	}

return len;
 80022a0:	687b      	ldr	r3, [r7, #4]
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3718      	adds	r7, #24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b086      	sub	sp, #24
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	60f8      	str	r0, [r7, #12]
 80022b2:	60b9      	str	r1, [r7, #8]
 80022b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022b6:	2300      	movs	r3, #0
 80022b8:	617b      	str	r3, [r7, #20]
 80022ba:	e009      	b.n	80022d0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	1c5a      	adds	r2, r3, #1
 80022c0:	60ba      	str	r2, [r7, #8]
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff fdb3 	bl	8001e30 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	3301      	adds	r3, #1
 80022ce:	617b      	str	r3, [r7, #20]
 80022d0:	697a      	ldr	r2, [r7, #20]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	dbf1      	blt.n	80022bc <_write+0x12>
	}
	return len;
 80022d8:	687b      	ldr	r3, [r7, #4]
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3718      	adds	r7, #24
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <_close>:

int _close(int file)
{
 80022e2:	b480      	push	{r7}
 80022e4:	b083      	sub	sp, #12
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
	return -1;
 80022ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr

080022fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022fa:	b480      	push	{r7}
 80022fc:	b083      	sub	sp, #12
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
 8002302:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800230a:	605a      	str	r2, [r3, #4]
	return 0;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr

0800231a <_isatty>:

int _isatty(int file)
{
 800231a:	b480      	push	{r7}
 800231c:	b083      	sub	sp, #12
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
	return 1;
 8002322:	2301      	movs	r3, #1
}
 8002324:	4618      	mov	r0, r3
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
	return 0;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3714      	adds	r7, #20
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
	...

0800234c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002354:	4a14      	ldr	r2, [pc, #80]	; (80023a8 <_sbrk+0x5c>)
 8002356:	4b15      	ldr	r3, [pc, #84]	; (80023ac <_sbrk+0x60>)
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002360:	4b13      	ldr	r3, [pc, #76]	; (80023b0 <_sbrk+0x64>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d102      	bne.n	800236e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002368:	4b11      	ldr	r3, [pc, #68]	; (80023b0 <_sbrk+0x64>)
 800236a:	4a12      	ldr	r2, [pc, #72]	; (80023b4 <_sbrk+0x68>)
 800236c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800236e:	4b10      	ldr	r3, [pc, #64]	; (80023b0 <_sbrk+0x64>)
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4413      	add	r3, r2
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	429a      	cmp	r2, r3
 800237a:	d207      	bcs.n	800238c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800237c:	f004 fcc0 	bl	8006d00 <__errno>
 8002380:	4603      	mov	r3, r0
 8002382:	220c      	movs	r2, #12
 8002384:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002386:	f04f 33ff 	mov.w	r3, #4294967295
 800238a:	e009      	b.n	80023a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800238c:	4b08      	ldr	r3, [pc, #32]	; (80023b0 <_sbrk+0x64>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002392:	4b07      	ldr	r3, [pc, #28]	; (80023b0 <_sbrk+0x64>)
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4413      	add	r3, r2
 800239a:	4a05      	ldr	r2, [pc, #20]	; (80023b0 <_sbrk+0x64>)
 800239c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800239e:	68fb      	ldr	r3, [r7, #12]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3718      	adds	r7, #24
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	20080000 	.word	0x20080000
 80023ac:	00000400 	.word	0x00000400
 80023b0:	20000258 	.word	0x20000258
 80023b4:	20000938 	.word	0x20000938

080023b8 <uartAvailable>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

uint32_t uartAvailable(uint8_t ch)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	4603      	mov	r3, r0
 80023c0:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 80023c2:	2300      	movs	r3, #0
 80023c4:	60fb      	str	r3, [r7, #12]

  switch(ch)
 80023c6:	79fb      	ldrb	r3, [r7, #7]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d019      	beq.n	8002400 <uartAvailable+0x48>
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d118      	bne.n	8002402 <uartAvailable+0x4a>
    case 1:
 //     ret = cdcAvailable();
      break;

    case 2:
     qbuffer[ch].in = (qbuffer[ch].len - hdma_usart3_rx.Instance->NDTR);
 80023d0:	79fb      	ldrb	r3, [r7, #7]
 80023d2:	4a0e      	ldr	r2, [pc, #56]	; (800240c <uartAvailable+0x54>)
 80023d4:	011b      	lsls	r3, r3, #4
 80023d6:	4413      	add	r3, r2
 80023d8:	3308      	adds	r3, #8
 80023da:	6819      	ldr	r1, [r3, #0]
 80023dc:	4b0c      	ldr	r3, [pc, #48]	; (8002410 <uartAvailable+0x58>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	685a      	ldr	r2, [r3, #4]
 80023e2:	79fb      	ldrb	r3, [r7, #7]
 80023e4:	1a8a      	subs	r2, r1, r2
 80023e6:	4909      	ldr	r1, [pc, #36]	; (800240c <uartAvailable+0x54>)
 80023e8:	011b      	lsls	r3, r3, #4
 80023ea:	440b      	add	r3, r1
 80023ec:	601a      	str	r2, [r3, #0]
     ret = qbufferAvailable(&qbuffer[ch]); //인터럽트 사용시
 80023ee:	79fb      	ldrb	r3, [r7, #7]
 80023f0:	011b      	lsls	r3, r3, #4
 80023f2:	4a06      	ldr	r2, [pc, #24]	; (800240c <uartAvailable+0x54>)
 80023f4:	4413      	add	r3, r2
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7ff ff00 	bl	80021fc <qbufferAvailable>
 80023fc:	60f8      	str	r0, [r7, #12]
       break;
 80023fe:	e000      	b.n	8002402 <uartAvailable+0x4a>
      break;
 8002400:	bf00      	nop
  }

  return ret;
 8002402:	68fb      	ldr	r3, [r7, #12]
}
 8002404:	4618      	mov	r0, r3
 8002406:	3710      	adds	r7, #16
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	20000260 	.word	0x20000260
 8002410:	200008a8 	.word	0x200008a8

08002414 <uartRead>:

uint8_t uartRead(uint8_t ch)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	4603      	mov	r3, r0
 800241c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 0;
 800241e:	2300      	movs	r3, #0
 8002420:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 8002422:	79fb      	ldrb	r3, [r7, #7]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d00c      	beq.n	8002442 <uartRead+0x2e>
 8002428:	2b02      	cmp	r3, #2
 800242a:	d10b      	bne.n	8002444 <uartRead+0x30>
    case 1:
  //    ret = cdcRead();
      break;

    case 2:
      qbufferRead(&qbuffer[ch], &ret, 1);
 800242c:	79fb      	ldrb	r3, [r7, #7]
 800242e:	011b      	lsls	r3, r3, #4
 8002430:	4a07      	ldr	r2, [pc, #28]	; (8002450 <uartRead+0x3c>)
 8002432:	4413      	add	r3, r2
 8002434:	f107 010f 	add.w	r1, r7, #15
 8002438:	2201      	movs	r2, #1
 800243a:	4618      	mov	r0, r3
 800243c:	f7ff fea1 	bl	8002182 <qbufferRead>
      break;
 8002440:	e000      	b.n	8002444 <uartRead+0x30>
      break;
 8002442:	bf00      	nop
  }
  return ret;
 8002444:	7bfb      	ldrb	r3, [r7, #15]
}
 8002446:	4618      	mov	r0, r3
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	20000260 	.word	0x20000260

08002454 <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af00      	add	r7, sp, #0
 800245a:	4603      	mov	r3, r0
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
 8002460:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 8002462:	2300      	movs	r3, #0
 8002464:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  switch(ch)
 8002466:	7bfb      	ldrb	r3, [r7, #15]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d010      	beq.n	800248e <uartWrite+0x3a>
 800246c:	2b02      	cmp	r3, #2
 800246e:	d111      	bne.n	8002494 <uartWrite+0x40>
    case 1:
    //  ret = cdcWrite(p_data, length);
      break;

    case 2:
      status = HAL_UART_Transmit(&huart3, p_data, length, 100);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	b29a      	uxth	r2, r3
 8002474:	2364      	movs	r3, #100	; 0x64
 8002476:	68b9      	ldr	r1, [r7, #8]
 8002478:	4809      	ldr	r0, [pc, #36]	; (80024a0 <uartWrite+0x4c>)
 800247a:	f003 fbce 	bl	8005c1a <HAL_UART_Transmit>
 800247e:	4603      	mov	r3, r0
 8002480:	74fb      	strb	r3, [r7, #19]
      if (status == HAL_OK)
 8002482:	7cfb      	ldrb	r3, [r7, #19]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d104      	bne.n	8002492 <uartWrite+0x3e>
      {
        ret = length;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	617b      	str	r3, [r7, #20]
      }

      break;
 800248c:	e001      	b.n	8002492 <uartWrite+0x3e>
      break;
 800248e:	bf00      	nop
 8002490:	e000      	b.n	8002494 <uartWrite+0x40>
      break;
 8002492:	bf00      	nop
  }

  return ret;
 8002494:	697b      	ldr	r3, [r7, #20]
}
 8002496:	4618      	mov	r0, r3
 8002498:	3718      	adds	r7, #24
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	20000824 	.word	0x20000824

080024a4 <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 80024a4:	b40e      	push	{r1, r2, r3}
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b0c7      	sub	sp, #284	; 0x11c
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	4602      	mov	r2, r0
 80024ae:	1dfb      	adds	r3, r7, #7
 80024b0:	701a      	strb	r2, [r3, #0]
  char buf[256];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
 80024b2:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80024b6:	f107 030c 	add.w	r3, r7, #12
 80024ba:	601a      	str	r2, [r3, #0]
  len = vsnprintf(buf, 256, fmt, args);
 80024bc:	f107 030c 	add.w	r3, r7, #12
 80024c0:	f107 0010 	add.w	r0, r7, #16
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80024ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024ce:	f005 fc19 	bl	8007d04 <vsniprintf>
 80024d2:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

  ret = uartWrite(ch, (uint8_t *)buf, len);
 80024d6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80024da:	f107 0110 	add.w	r1, r7, #16
 80024de:	1dfb      	adds	r3, r7, #7
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7ff ffb6 	bl	8002454 <uartWrite>
 80024e8:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

  va_end(args);


  return ret;
 80024ec:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 80024f6:	46bd      	mov	sp, r7
 80024f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80024fc:	b003      	add	sp, #12
 80024fe:	4770      	bx	lr

08002500 <MX_USART3_UART_Init>:
void MX_USART3_UART_Init(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
  //bool ret = false;

  huart3.Instance = USART3;
 8002506:	4b33      	ldr	r3, [pc, #204]	; (80025d4 <MX_USART3_UART_Init+0xd4>)
 8002508:	4a33      	ldr	r2, [pc, #204]	; (80025d8 <MX_USART3_UART_Init+0xd8>)
 800250a:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800250c:	4b31      	ldr	r3, [pc, #196]	; (80025d4 <MX_USART3_UART_Init+0xd4>)
 800250e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002512:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002514:	4b2f      	ldr	r3, [pc, #188]	; (80025d4 <MX_USART3_UART_Init+0xd4>)
 8002516:	2200      	movs	r2, #0
 8002518:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800251a:	4b2e      	ldr	r3, [pc, #184]	; (80025d4 <MX_USART3_UART_Init+0xd4>)
 800251c:	2200      	movs	r2, #0
 800251e:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002520:	4b2c      	ldr	r3, [pc, #176]	; (80025d4 <MX_USART3_UART_Init+0xd4>)
 8002522:	2200      	movs	r2, #0
 8002524:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002526:	4b2b      	ldr	r3, [pc, #172]	; (80025d4 <MX_USART3_UART_Init+0xd4>)
 8002528:	220c      	movs	r2, #12
 800252a:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800252c:	4b29      	ldr	r3, [pc, #164]	; (80025d4 <MX_USART3_UART_Init+0xd4>)
 800252e:	2200      	movs	r2, #0
 8002530:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002532:	4b28      	ldr	r3, [pc, #160]	; (80025d4 <MX_USART3_UART_Init+0xd4>)
 8002534:	2200      	movs	r2, #0
 8002536:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002538:	4b26      	ldr	r3, [pc, #152]	; (80025d4 <MX_USART3_UART_Init+0xd4>)
 800253a:	2200      	movs	r2, #0
 800253c:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800253e:	4b25      	ldr	r3, [pc, #148]	; (80025d4 <MX_USART3_UART_Init+0xd4>)
 8002540:	2200      	movs	r2, #0
 8002542:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_UART_DeInit(&huart3);
 8002544:	4823      	ldr	r0, [pc, #140]	; (80025d4 <MX_USART3_UART_Init+0xd4>)
 8002546:	f003 fb2f 	bl	8005ba8 <HAL_UART_DeInit>

  qbufferCreate(&qbuffer[2], &rx_buf[0], 256);
 800254a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800254e:	4923      	ldr	r1, [pc, #140]	; (80025dc <MX_USART3_UART_Init+0xdc>)
 8002550:	4823      	ldr	r0, [pc, #140]	; (80025e0 <MX_USART3_UART_Init+0xe0>)
 8002552:	f7ff fdfb 	bl	800214c <qbufferCreate>

   __HAL_RCC_DMA1_CLK_ENABLE();
 8002556:	4b23      	ldr	r3, [pc, #140]	; (80025e4 <MX_USART3_UART_Init+0xe4>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255a:	4a22      	ldr	r2, [pc, #136]	; (80025e4 <MX_USART3_UART_Init+0xe4>)
 800255c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002560:	6313      	str	r3, [r2, #48]	; 0x30
 8002562:	4b20      	ldr	r3, [pc, #128]	; (80025e4 <MX_USART3_UART_Init+0xe4>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800256a:	607b      	str	r3, [r7, #4]
 800256c:	687b      	ldr	r3, [r7, #4]
   HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800256e:	2200      	movs	r2, #0
 8002570:	2100      	movs	r1, #0
 8002572:	200c      	movs	r0, #12
 8002574:	f000 fe8b 	bl	800328e <HAL_NVIC_SetPriority>
   HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002578:	200c      	movs	r0, #12
 800257a:	f000 fea4 	bl	80032c6 <HAL_NVIC_EnableIRQ>

  if (HAL_UART_Init(&huart3) != HAL_OK)
 800257e:	4815      	ldr	r0, [pc, #84]	; (80025d4 <MX_USART3_UART_Init+0xd4>)
 8002580:	f003 fac4 	bl	8005b0c <HAL_UART_Init>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d002      	beq.n	8002590 <MX_USART3_UART_Init+0x90>
  {
    Error_Handler();
 800258a:	f7ff fda4 	bl	80020d6 <Error_Handler>
 800258e:	e01a      	b.n	80025c6 <MX_USART3_UART_Init+0xc6>
  }
  else
  {
	 // ret = true;
	  is_open[2]=true;
 8002590:	4b15      	ldr	r3, [pc, #84]	; (80025e8 <MX_USART3_UART_Init+0xe8>)
 8002592:	2201      	movs	r2, #1
 8002594:	709a      	strb	r2, [r3, #2]
	//if(HAL_UART_Receive_IT(&huart3, (uint8_t *)&rx_data, 1) != HAL_OK)
	   if(HAL_UART_Receive_DMA(&huart3, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 8002596:	f44f 7280 	mov.w	r2, #256	; 0x100
 800259a:	4910      	ldr	r1, [pc, #64]	; (80025dc <MX_USART3_UART_Init+0xdc>)
 800259c:	480d      	ldr	r0, [pc, #52]	; (80025d4 <MX_USART3_UART_Init+0xd4>)
 800259e:	f003 fbcf 	bl	8005d40 <HAL_UART_Receive_DMA>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d002      	beq.n	80025ae <MX_USART3_UART_Init+0xae>
	  {
		  printf("HAL_ERROR\r\n");
 80025a8:	4810      	ldr	r0, [pc, #64]	; (80025ec <MX_USART3_UART_Init+0xec>)
 80025aa:	f004 fc85 	bl	8006eb8 <puts>
		 // ret = false;
	  }
		qbuffer[2].in  = qbuffer[2].len - hdma_usart3_rx.Instance->NDTR;
 80025ae:	4b10      	ldr	r3, [pc, #64]	; (80025f0 <MX_USART3_UART_Init+0xf0>)
 80025b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025b2:	4b10      	ldr	r3, [pc, #64]	; (80025f4 <MX_USART3_UART_Init+0xf4>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	4a0d      	ldr	r2, [pc, #52]	; (80025f0 <MX_USART3_UART_Init+0xf0>)
 80025bc:	6213      	str	r3, [r2, #32]
		qbuffer[2].out = qbuffer[2].in;
 80025be:	4b0c      	ldr	r3, [pc, #48]	; (80025f0 <MX_USART3_UART_Init+0xf0>)
 80025c0:	6a1b      	ldr	r3, [r3, #32]
 80025c2:	4a0b      	ldr	r2, [pc, #44]	; (80025f0 <MX_USART3_UART_Init+0xf0>)
 80025c4:	6253      	str	r3, [r2, #36]	; 0x24
  }

  cliInit();
 80025c6:	f7fe fa87 	bl	8000ad8 <cliInit>
}
 80025ca:	bf00      	nop
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	20000824 	.word	0x20000824
 80025d8:	40004800 	.word	0x40004800
 80025dc:	200002a0 	.word	0x200002a0
 80025e0:	20000280 	.word	0x20000280
 80025e4:	40023800 	.word	0x40023800
 80025e8:	2000025c 	.word	0x2000025c
 80025ec:	0800a3a4 	.word	0x0800a3a4
 80025f0:	20000260 	.word	0x20000260
 80025f4:	200008a8 	.word	0x200008a8

080025f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b08a      	sub	sp, #40	; 0x28
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002600:	f107 0314 	add.w	r3, r7, #20
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	605a      	str	r2, [r3, #4]
 800260a:	609a      	str	r2, [r3, #8]
 800260c:	60da      	str	r2, [r3, #12]
 800260e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a33      	ldr	r2, [pc, #204]	; (80026e4 <HAL_UART_MspInit+0xec>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d15f      	bne.n	80026da <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800261a:	4b33      	ldr	r3, [pc, #204]	; (80026e8 <HAL_UART_MspInit+0xf0>)
 800261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261e:	4a32      	ldr	r2, [pc, #200]	; (80026e8 <HAL_UART_MspInit+0xf0>)
 8002620:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002624:	6413      	str	r3, [r2, #64]	; 0x40
 8002626:	4b30      	ldr	r3, [pc, #192]	; (80026e8 <HAL_UART_MspInit+0xf0>)
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800262e:	613b      	str	r3, [r7, #16]
 8002630:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002632:	4b2d      	ldr	r3, [pc, #180]	; (80026e8 <HAL_UART_MspInit+0xf0>)
 8002634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002636:	4a2c      	ldr	r2, [pc, #176]	; (80026e8 <HAL_UART_MspInit+0xf0>)
 8002638:	f043 0308 	orr.w	r3, r3, #8
 800263c:	6313      	str	r3, [r2, #48]	; 0x30
 800263e:	4b2a      	ldr	r3, [pc, #168]	; (80026e8 <HAL_UART_MspInit+0xf0>)
 8002640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002642:	f003 0308 	and.w	r3, r3, #8
 8002646:	60fb      	str	r3, [r7, #12]
 8002648:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800264a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800264e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002650:	2302      	movs	r3, #2
 8002652:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002654:	2300      	movs	r3, #0
 8002656:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002658:	2303      	movs	r3, #3
 800265a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800265c:	2307      	movs	r3, #7
 800265e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002660:	f107 0314 	add.w	r3, r7, #20
 8002664:	4619      	mov	r1, r3
 8002666:	4821      	ldr	r0, [pc, #132]	; (80026ec <HAL_UART_MspInit+0xf4>)
 8002668:	f001 fe2c 	bl	80042c4 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800266c:	4b20      	ldr	r3, [pc, #128]	; (80026f0 <HAL_UART_MspInit+0xf8>)
 800266e:	4a21      	ldr	r2, [pc, #132]	; (80026f4 <HAL_UART_MspInit+0xfc>)
 8002670:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002672:	4b1f      	ldr	r3, [pc, #124]	; (80026f0 <HAL_UART_MspInit+0xf8>)
 8002674:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002678:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800267a:	4b1d      	ldr	r3, [pc, #116]	; (80026f0 <HAL_UART_MspInit+0xf8>)
 800267c:	2200      	movs	r2, #0
 800267e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002680:	4b1b      	ldr	r3, [pc, #108]	; (80026f0 <HAL_UART_MspInit+0xf8>)
 8002682:	2200      	movs	r2, #0
 8002684:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002686:	4b1a      	ldr	r3, [pc, #104]	; (80026f0 <HAL_UART_MspInit+0xf8>)
 8002688:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800268c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800268e:	4b18      	ldr	r3, [pc, #96]	; (80026f0 <HAL_UART_MspInit+0xf8>)
 8002690:	2200      	movs	r2, #0
 8002692:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002694:	4b16      	ldr	r3, [pc, #88]	; (80026f0 <HAL_UART_MspInit+0xf8>)
 8002696:	2200      	movs	r2, #0
 8002698:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800269a:	4b15      	ldr	r3, [pc, #84]	; (80026f0 <HAL_UART_MspInit+0xf8>)
 800269c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026a0:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80026a2:	4b13      	ldr	r3, [pc, #76]	; (80026f0 <HAL_UART_MspInit+0xf8>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026a8:	4b11      	ldr	r3, [pc, #68]	; (80026f0 <HAL_UART_MspInit+0xf8>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80026ae:	4810      	ldr	r0, [pc, #64]	; (80026f0 <HAL_UART_MspInit+0xf8>)
 80026b0:	f000 fe32 	bl	8003318 <HAL_DMA_Init>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 80026ba:	f7ff fd0c 	bl	80020d6 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a0b      	ldr	r2, [pc, #44]	; (80026f0 <HAL_UART_MspInit+0xf8>)
 80026c2:	671a      	str	r2, [r3, #112]	; 0x70
 80026c4:	4a0a      	ldr	r2, [pc, #40]	; (80026f0 <HAL_UART_MspInit+0xf8>)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80026ca:	2200      	movs	r2, #0
 80026cc:	2100      	movs	r1, #0
 80026ce:	2027      	movs	r0, #39	; 0x27
 80026d0:	f000 fddd 	bl	800328e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80026d4:	2027      	movs	r0, #39	; 0x27
 80026d6:	f000 fdf6 	bl	80032c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80026da:	bf00      	nop
 80026dc:	3728      	adds	r7, #40	; 0x28
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	40004800 	.word	0x40004800
 80026e8:	40023800 	.word	0x40023800
 80026ec:	40020c00 	.word	0x40020c00
 80026f0:	200008a8 	.word	0x200008a8
 80026f4:	40026028 	.word	0x40026028

080026f8 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART3)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a0c      	ldr	r2, [pc, #48]	; (8002738 <HAL_UART_MspDeInit+0x40>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d112      	bne.n	8002730 <HAL_UART_MspDeInit+0x38>
  {
  /* USER CODE BEGIN USART3_MspDeInit 0 */

  /* USER CODE END USART3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART3_CLK_DISABLE();
 800270a:	4b0c      	ldr	r3, [pc, #48]	; (800273c <HAL_UART_MspDeInit+0x44>)
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	4a0b      	ldr	r2, [pc, #44]	; (800273c <HAL_UART_MspDeInit+0x44>)
 8002710:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002714:	6413      	str	r3, [r2, #64]	; 0x40

    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    HAL_GPIO_DeInit(GPIOD, STLK_RX_Pin|STLK_TX_Pin);
 8002716:	f44f 7140 	mov.w	r1, #768	; 0x300
 800271a:	4809      	ldr	r0, [pc, #36]	; (8002740 <HAL_UART_MspDeInit+0x48>)
 800271c:	f001 ff7e 	bl	800461c <HAL_GPIO_DeInit>

    /* USART3 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002724:	4618      	mov	r0, r3
 8002726:	f000 fea5 	bl	8003474 <HAL_DMA_DeInit>

    /* USART3 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 800272a:	2027      	movs	r0, #39	; 0x27
 800272c:	f000 fdd9 	bl	80032e2 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }
}
 8002730:	bf00      	nop
 8002732:	3708      	adds	r7, #8
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40004800 	.word	0x40004800
 800273c:	40023800 	.word	0x40023800
 8002740:	40020c00 	.word	0x40020c00

08002744 <HAL_UART_ErrorCallback>:


void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART3)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a05      	ldr	r2, [pc, #20]	; (8002768 <HAL_UART_ErrorCallback+0x24>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d104      	bne.n	8002760 <HAL_UART_ErrorCallback+0x1c>
  {
	  HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8002756:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800275a:	4804      	ldr	r0, [pc, #16]	; (800276c <HAL_UART_ErrorCallback+0x28>)
 800275c:	f002 f883 	bl	8004866 <HAL_GPIO_TogglePin>
  }
}
 8002760:	bf00      	nop
 8002762:	3708      	adds	r7, #8
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	40004800 	.word	0x40004800
 800276c:	40020400 	.word	0x40020400

08002770 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
    HAL_UART_Receive_IT(&huart3, (uint8_t *)&rx_data, 1);
    qbufferWrite(&qbuffer, &rx_data, 1);
  }
#endif
}
 8002778:	bf00      	nop
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <ymodemInit>:




bool ymodemInit(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
#ifdef _USE_HW_CLI
  cliAdd("ymodem", cliYmodem);
 8002788:	4903      	ldr	r1, [pc, #12]	; (8002798 <ymodemInit+0x14>)
 800278a:	4804      	ldr	r0, [pc, #16]	; (800279c <ymodemInit+0x18>)
 800278c:	f7fe ff36 	bl	80015fc <cliAdd>
#endif

  return true;
 8002790:	2301      	movs	r3, #1
}
 8002792:	4618      	mov	r0, r3
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	08002db9 	.word	0x08002db9
 800279c:	0800a3b0 	.word	0x0800a3b0

080027a0 <ymodemOpen>:

bool ymodemOpen(ymodem_t *p_modem, uint8_t ch)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	460b      	mov	r3, r1
 80027aa:	70fb      	strb	r3, [r7, #3]
  bool ret = true;
 80027ac:	2301      	movs	r3, #1
 80027ae:	73fb      	strb	r3, [r7, #15]

  p_modem->ch = ch;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	78fa      	ldrb	r2, [r7, #3]
 80027b4:	701a      	strb	r2, [r3, #0]
  p_modem->is_init = true;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2201      	movs	r2, #1
 80027ba:	705a      	strb	r2, [r3, #1]

  p_modem->state           = YMODEM_STATE_WAIT_HEAD;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	729a      	strb	r2, [r3, #10]
  p_modem->rx_packet.state = YMODEM_PACKET_WAIT_FIRST;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  p_modem->file_buf        = &p_modem->rx_packet.buffer[3];
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f103 02c5 	add.w	r2, r3, #197	; 0xc5
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  p_modem->file_buf_length = 0;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
  p_modem->pre_time        = millis();
 80027de:	f7ff fc73 	bl	80020c8 <millis>
 80027e2:	4602      	mov	r2, r0
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	60da      	str	r2, [r3, #12]
  p_modem->start_time      = 3000;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80027ee:	611a      	str	r2, [r3, #16]
  p_modem->ack_mode        = 0;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	765a      	strb	r2, [r3, #25]

  p_modem->rx_packet.data = &p_modem->rx_packet.buffer[3];
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f103 02c5 	add.w	r2, r3, #197	; 0xc5
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  return ret;
 8002802:	7bfb      	ldrb	r3, [r7, #15]
}
 8002804:	4618      	mov	r0, r3
 8002806:	3710      	adds	r7, #16
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <ymodemPutch>:

bool ymodemPutch(ymodem_t *p_modem, uint8_t data)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	460b      	mov	r3, r1
 8002816:	70fb      	strb	r3, [r7, #3]
  bool ret = true;
 8002818:	2301      	movs	r3, #1
 800281a:	73fb      	strb	r3, [r7, #15]

  ret = uartWrite(p_modem->ch, &data, 1);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	1cf9      	adds	r1, r7, #3
 8002822:	2201      	movs	r2, #1
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff fe15 	bl	8002454 <uartWrite>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	bf14      	ite	ne
 8002830:	2301      	movne	r3, #1
 8002832:	2300      	moveq	r3, #0
 8002834:	73fb      	strb	r3, [r7, #15]

  return ret;
 8002836:	7bfb      	ldrb	r3, [r7, #15]
}
 8002838:	4618      	mov	r0, r3
 800283a:	3710      	adds	r7, #16
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <ymodemGetFileInfo>:

bool ymodemGetFileInfo(ymodem_t *p_modem)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  bool ret = true;
 8002848:	2301      	movs	r3, #1
 800284a:	72fb      	strb	r3, [r7, #11]
  bool valid;
  uint16_t size_i;

  valid = false;
 800284c:	2300      	movs	r3, #0
 800284e:	75fb      	strb	r3, [r7, #23]
  for (int i=0; i<128; i++)
 8002850:	2300      	movs	r3, #0
 8002852:	613b      	str	r3, [r7, #16]
 8002854:	e01c      	b.n	8002890 <ymodemGetFileInfo+0x50>
  {
    p_modem->file_name[i] = p_modem->rx_packet.data[i];
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	4413      	add	r3, r2
 8002860:	7819      	ldrb	r1, [r3, #0]
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	4413      	add	r3, r2
 8002868:	331a      	adds	r3, #26
 800286a:	460a      	mov	r2, r1
 800286c:	701a      	strb	r2, [r3, #0]
    if (p_modem->file_name[i] == 0x00)
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	4413      	add	r3, r2
 8002874:	331a      	adds	r3, #26
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d106      	bne.n	800288a <ymodemGetFileInfo+0x4a>
    {
      size_i = i + 1;
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	b29b      	uxth	r3, r3
 8002880:	3301      	adds	r3, #1
 8002882:	82bb      	strh	r3, [r7, #20]
      valid = true;
 8002884:	2301      	movs	r3, #1
 8002886:	75fb      	strb	r3, [r7, #23]
      break;
 8002888:	e005      	b.n	8002896 <ymodemGetFileInfo+0x56>
  for (int i=0; i<128; i++)
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	3301      	adds	r3, #1
 800288e:	613b      	str	r3, [r7, #16]
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	2b7f      	cmp	r3, #127	; 0x7f
 8002894:	dddf      	ble.n	8002856 <ymodemGetFileInfo+0x16>
    }
  }

  if (valid == true)
 8002896:	7dfb      	ldrb	r3, [r7, #23]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d026      	beq.n	80028ea <ymodemGetFileInfo+0xaa>
  {
    for (int i=size_i; i<128; i++)
 800289c:	8abb      	ldrh	r3, [r7, #20]
 800289e:	60fb      	str	r3, [r7, #12]
 80028a0:	e012      	b.n	80028c8 <ymodemGetFileInfo+0x88>
    {
      if (p_modem->rx_packet.data[i] == 0x20)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	4413      	add	r3, r2
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	2b20      	cmp	r3, #32
 80028b0:	d107      	bne.n	80028c2 <ymodemGetFileInfo+0x82>
      {
        p_modem->rx_packet.data[i] = 0x00;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	4413      	add	r3, r2
 80028bc:	2200      	movs	r2, #0
 80028be:	701a      	strb	r2, [r3, #0]
        break;
 80028c0:	e005      	b.n	80028ce <ymodemGetFileInfo+0x8e>
    for (int i=size_i; i<128; i++)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	3301      	adds	r3, #1
 80028c6:	60fb      	str	r3, [r7, #12]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2b7f      	cmp	r3, #127	; 0x7f
 80028cc:	dde9      	ble.n	80028a2 <ymodemGetFileInfo+0x62>
      }
    }

    p_modem->file_length = (uint32_t)strtoul((const char * )&p_modem->rx_packet.data[size_i], (char **)NULL, (int) 0);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80028d4:	8abb      	ldrh	r3, [r7, #20]
 80028d6:	4413      	add	r3, r2
 80028d8:	2200      	movs	r2, #0
 80028da:	2100      	movs	r1, #0
 80028dc:	4618      	mov	r0, r3
 80028de:	f005 f9db 	bl	8007c98 <strtoul>
 80028e2:	4602      	mov	r2, r0
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  }

  return ret;
 80028ea:	7afb      	ldrb	r3, [r7, #11]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3718      	adds	r7, #24
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <ymodemReceive>:

/*********************************************************************/
/* y modem 본격 적으로 실행이 되는 함수.
/*********************************************************************/
bool ymodemReceive(ymodem_t *p_modem)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  bool ret = false;
 80028fc:	2300      	movs	r3, #0
 80028fe:	73fb      	strb	r3, [r7, #15]
  bool update = false;
 8002900:	2300      	movs	r3, #0
 8002902:	73bb      	strb	r3, [r7, #14]
  uint32_t buf_length;


  if (p_modem->is_init != true)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	785b      	ldrb	r3, [r3, #1]
 8002908:	f083 0301 	eor.w	r3, r3, #1
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d004      	beq.n	800291c <ymodemReceive+0x28>
  {
    p_modem->type = YMODEM_TYPE_ERROR;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2204      	movs	r2, #4
 8002916:	721a      	strb	r2, [r3, #8]
    return true;
 8002918:	2301      	movs	r3, #1
 800291a:	e13d      	b.n	8002b98 <ymodemReceive+0x2a4>
  }

  if (uartAvailable(p_modem->ch) > 0)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff fd49 	bl	80023b8 <uartAvailable>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d00a      	beq.n	8002942 <ymodemReceive+0x4e>
  {
    p_modem->rx_data = uartRead(p_modem->ch);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff fd6f 	bl	8002414 <uartRead>
 8002936:	4603      	mov	r3, r0
 8002938:	461a      	mov	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	725a      	strb	r2, [r3, #9]
    update = true;
 800293e:	2301      	movs	r3, #1
 8002940:	73bb      	strb	r3, [r7, #14]
    //uartPrintf(_DEF_UART1, "Rx 0x%X, %d\n", p_modem->rx_data, p_modem->rx_packet.state);
  } // 첫 패킷 들어오고 처리가 안될수도 있음 이건 어케할건지..?

  if (update == true && ymodemReceivePacket(&p_modem->rx_packet, p_modem->rx_data) == true)
 8002942:	7bbb      	ldrb	r3, [r7, #14]
 8002944:	2b00      	cmp	r3, #0
 8002946:	f000 8109 	beq.w	8002b5c <ymodemReceive+0x268>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	7a5b      	ldrb	r3, [r3, #9]
 8002954:	4619      	mov	r1, r3
 8002956:	4610      	mov	r0, r2
 8002958:	f000 f922 	bl	8002ba0 <ymodemReceivePacket>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	f000 80fc 	beq.w	8002b5c <ymodemReceive+0x268>
  {
 //   uartPrintf(_DEF_UART1, "RxPacket 0x%X\n", p_modem->rx_packet.stx);

    if (p_modem->state != YMODEM_STATE_WAIT_HEAD)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	7a9b      	ldrb	r3, [r3, #10]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d007      	beq.n	800297c <ymodemReceive+0x88>
    {
      if (p_modem->rx_packet.stx == YMODEM_CAN)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 8002972:	2b18      	cmp	r3, #24
 8002974:	d102      	bne.n	800297c <ymodemReceive+0x88>
      {
        p_modem->state = YMODEM_STATE_WAIT_CANCEL;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2205      	movs	r2, #5
 800297a:	729a      	strb	r2, [r3, #10]
      }
    }

    switch(p_modem->state)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	7a9b      	ldrb	r3, [r3, #10]
 8002980:	2b05      	cmp	r3, #5
 8002982:	f200 80f0 	bhi.w	8002b66 <ymodemReceive+0x272>
 8002986:	a201      	add	r2, pc, #4	; (adr r2, 800298c <ymodemReceive+0x98>)
 8002988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800298c:	080029a5 	.word	0x080029a5
 8002990:	08002a01 	.word	0x08002a01
 8002994:	08002a8d 	.word	0x08002a8d
 8002998:	08002b11 	.word	0x08002b11
 800299c:	08002b29 	.word	0x08002b29
 80029a0:	08002b43 	.word	0x08002b43
    {
      case YMODEM_STATE_WAIT_HEAD: //첫번째 헤더 기다릴때
        if (p_modem->rx_packet.stx == YMODEM_EOT)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 80029aa:	2b04      	cmp	r3, #4
 80029ac:	d107      	bne.n	80029be <ymodemReceive+0xca>
        {
          ymodemPutch(p_modem, YMODEM_NACK);
 80029ae:	2115      	movs	r1, #21
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f7ff ff2b 	bl	800280c <ymodemPutch>
          p_modem->state = YMODEM_STATE_WAIT_LAST;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2203      	movs	r2, #3
 80029ba:	729a      	strb	r2, [r3, #10]

          p_modem->state = YMODEM_STATE_WAIT_FIRST;
          p_modem->type = YMODEM_TYPE_START;
          ret = true;
        }
        break;
 80029bc:	e0d0      	b.n	8002b60 <ymodemReceive+0x26c>
        else if (p_modem->rx_packet.seq[0] == 0x00)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f040 80cb 	bne.w	8002b60 <ymodemReceive+0x26c>
          p_modem->file_addr = 0;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
          ymodemGetFileInfo(p_modem);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f7ff ff34 	bl	8002840 <ymodemGetFileInfo>
          ymodemPutch(p_modem, YMODEM_ACK);
 80029d8:	2106      	movs	r1, #6
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f7ff ff16 	bl	800280c <ymodemPutch>
          ymodemPutch(p_modem, YMODEM_C);
 80029e0:	2143      	movs	r1, #67	; 0x43
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f7ff ff12 	bl	800280c <ymodemPutch>
          p_modem->ack_mode = YMODEM_RESP_ACK_C;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2202      	movs	r2, #2
 80029ec:	765a      	strb	r2, [r3, #25]
          p_modem->state = YMODEM_STATE_WAIT_FIRST;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2201      	movs	r2, #1
 80029f2:	729a      	strb	r2, [r3, #10]
          p_modem->type = YMODEM_TYPE_START;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	721a      	strb	r2, [r3, #8]
          ret = true;
 80029fa:	2301      	movs	r3, #1
 80029fc:	73fb      	strb	r3, [r7, #15]
        break;
 80029fe:	e0af      	b.n	8002b60 <ymodemReceive+0x26c>

      case YMODEM_STATE_WAIT_FIRST: //첫번째 데이터 기다릴때
        if (p_modem->rx_packet.stx == YMODEM_EOT)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 8002a06:	2b04      	cmp	r3, #4
 8002a08:	d107      	bne.n	8002a1a <ymodemReceive+0x126>
        {
          ymodemPutch(p_modem, YMODEM_NACK);
 8002a0a:	2115      	movs	r1, #21
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f7ff fefd 	bl	800280c <ymodemPutch>
          p_modem->state = YMODEM_STATE_WAIT_LAST;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2203      	movs	r2, #3
 8002a16:	729a      	strb	r2, [r3, #10]
          ymodemPutch(p_modem, YMODEM_ACK);

          p_modem->state = YMODEM_STATE_WAIT_DATA;
          p_modem->type = YMODEM_TYPE_DATA;
        }
        break;
 8002a18:	e0a4      	b.n	8002b64 <ymodemReceive+0x270>
        else if (p_modem->rx_packet.seq[0] == 0x01)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	f040 809f 	bne.w	8002b64 <ymodemReceive+0x270>
          p_modem->file_addr = 0;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
          p_modem->file_received = 0;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
          buf_length = (p_modem->file_length - p_modem->file_addr);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	60bb      	str	r3, [r7, #8]
          if (buf_length > p_modem->rx_packet.length)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d903      	bls.n	8002a5c <ymodemReceive+0x168>
            buf_length = p_modem->rx_packet.length;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 8002a5a:	60bb      	str	r3, [r7, #8]
          p_modem->file_buf_length = buf_length;
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
          p_modem->file_received += buf_length;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	441a      	add	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
          ymodemPutch(p_modem, YMODEM_ACK);
 8002a76:	2106      	movs	r1, #6
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f7ff fec7 	bl	800280c <ymodemPutch>
          p_modem->state = YMODEM_STATE_WAIT_DATA;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2202      	movs	r2, #2
 8002a82:	729a      	strb	r2, [r3, #10]
          p_modem->type = YMODEM_TYPE_DATA;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	721a      	strb	r2, [r3, #8]
        break;
 8002a8a:	e06b      	b.n	8002b64 <ymodemReceive+0x270>

      case YMODEM_STATE_WAIT_DATA: // 데이터 있을때
        if (p_modem->rx_packet.stx == YMODEM_EOT)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 8002a92:	2b04      	cmp	r3, #4
 8002a94:	d107      	bne.n	8002aa6 <ymodemReceive+0x1b2>
        {
          ymodemPutch(p_modem, YMODEM_NACK);
 8002a96:	2115      	movs	r1, #21
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f7ff feb7 	bl	800280c <ymodemPutch>
          p_modem->state = YMODEM_STATE_WAIT_LAST;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2203      	movs	r2, #3
 8002aa2:	729a      	strb	r2, [r3, #10]
          ymodemPutch(p_modem, YMODEM_ACK);
          p_modem->ack_mode = YMODEM_RESP_ACK;
          p_modem->type = YMODEM_TYPE_DATA;
          ret = true;
        }
        break;
 8002aa4:	e05f      	b.n	8002b66 <ymodemReceive+0x272>
          buf_length = (p_modem->file_length - p_modem->file_addr);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	60bb      	str	r3, [r7, #8]
          if (buf_length > p_modem->rx_packet.length)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 8002abc:	461a      	mov	r2, r3
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d903      	bls.n	8002acc <ymodemReceive+0x1d8>
            buf_length = p_modem->rx_packet.length;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 8002aca:	60bb      	str	r3, [r7, #8]
          p_modem->file_buf_length = buf_length;
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
          p_modem->file_addr += buf_length;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	441a      	add	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
          p_modem->file_received += buf_length;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	441a      	add	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
          ymodemPutch(p_modem, YMODEM_ACK);
 8002af6:	2106      	movs	r1, #6
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f7ff fe87 	bl	800280c <ymodemPutch>
          p_modem->ack_mode = YMODEM_RESP_ACK;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2201      	movs	r2, #1
 8002b02:	765a      	strb	r2, [r3, #25]
          p_modem->type = YMODEM_TYPE_DATA;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	721a      	strb	r2, [r3, #8]
          ret = true;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	73fb      	strb	r3, [r7, #15]
        break;
 8002b0e:	e02a      	b.n	8002b66 <ymodemReceive+0x272>

      case YMODEM_STATE_WAIT_LAST: //데이터 기다릴때
        ymodemPutch(p_modem, YMODEM_ACK); // 0x06보내고
 8002b10:	2106      	movs	r1, #6
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f7ff fe7a 	bl	800280c <ymodemPutch>
        ymodemPutch(p_modem, YMODEM_C); // 대문자 C 보냄
 8002b18:	2143      	movs	r1, #67	; 0x43
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f7ff fe76 	bl	800280c <ymodemPutch>
        p_modem->state = YMODEM_STATE_WAIT_END;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2204      	movs	r2, #4
 8002b24:	729a      	strb	r2, [r3, #10]
        break;
 8002b26:	e01e      	b.n	8002b66 <ymodemReceive+0x272>

      case YMODEM_STATE_WAIT_END:
        ymodemPutch(p_modem, YMODEM_ACK); // 끝 신호 보냄
 8002b28:	2106      	movs	r1, #6
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f7ff fe6e 	bl	800280c <ymodemPutch>
        p_modem->state = YMODEM_STATE_WAIT_HEAD;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	729a      	strb	r2, [r3, #10]
        p_modem->type = YMODEM_TYPE_END; // 끝신호  들어오면
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2202      	movs	r2, #2
 8002b3a:	721a      	strb	r2, [r3, #8]
        ret = true;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	73fb      	strb	r3, [r7, #15]
        break;
 8002b40:	e011      	b.n	8002b66 <ymodemReceive+0x272>

      case YMODEM_STATE_WAIT_CANCEL:// 취소신호
    	  ymodemPutch(p_modem, YMODEM_ACK); //
 8002b42:	2106      	movs	r1, #6
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f7ff fe61 	bl	800280c <ymodemPutch>
        p_modem->state = YMODEM_STATE_WAIT_HEAD;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	729a      	strb	r2, [r3, #10]
        p_modem->type = YMODEM_TYPE_CANCEL;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2203      	movs	r2, #3
 8002b54:	721a      	strb	r2, [r3, #8]
        ret = true;
 8002b56:	2301      	movs	r3, #1
 8002b58:	73fb      	strb	r3, [r7, #15]
        break;
 8002b5a:	e004      	b.n	8002b66 <ymodemReceive+0x272>
    }
  }
 8002b5c:	bf00      	nop
 8002b5e:	e002      	b.n	8002b66 <ymodemReceive+0x272>
        break;
 8002b60:	bf00      	nop
 8002b62:	e000      	b.n	8002b66 <ymodemReceive+0x272>
        break;
 8002b64:	bf00      	nop
  {
    if (p_modem->rx_packet.state == YMODEM_PACKET_WAIT_FIRST)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d112      	bne.n	8002b96 <ymodemReceive+0x2a2>
    {
      if (millis()-p_modem->pre_time >= p_modem->start_time)
 8002b70:	f7ff faaa 	bl	80020c8 <millis>
 8002b74:	4602      	mov	r2, r0
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	1ad2      	subs	r2, r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d308      	bcc.n	8002b96 <ymodemReceive+0x2a2>
      {
        p_modem->pre_time = millis();
 8002b84:	f7ff faa0 	bl	80020c8 <millis>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	60da      	str	r2, [r3, #12]
        ymodemPutch(p_modem, YMODEM_C);
 8002b8e:	2143      	movs	r1, #67	; 0x43
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f7ff fe3b 	bl	800280c <ymodemPutch>
      }
    }
  }

  return ret;
 8002b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3710      	adds	r7, #16
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <ymodemReceivePacket>:

bool ymodemReceivePacket(ymodem_packet_t *p_packet, uint8_t data_in)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	460b      	mov	r3, r1
 8002baa:	70fb      	strb	r3, [r7, #3]
  bool ret = false;
 8002bac:	2300      	movs	r3, #0
 8002bae:	73fb      	strb	r3, [r7, #15]


  switch(p_packet->state)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	2b05      	cmp	r3, #5
 8002bb6:	f200 809b 	bhi.w	8002cf0 <ymodemReceivePacket+0x150>
 8002bba:	a201      	add	r2, pc, #4	; (adr r2, 8002bc0 <ymodemReceivePacket+0x20>)
 8002bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc0:	08002bd9 	.word	0x08002bd9
 8002bc4:	08002c2d 	.word	0x08002c2d
 8002bc8:	08002c3b 	.word	0x08002c3b
 8002bcc:	08002c65 	.word	0x08002c65
 8002bd0:	08002c93 	.word	0x08002c93
 8002bd4:	08002ca7 	.word	0x08002ca7
  {
    case YMODEM_PACKET_WAIT_FIRST:
      if (data_in == YMODEM_SOH)
 8002bd8:	78fb      	ldrb	r3, [r7, #3]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d108      	bne.n	8002bf0 <ymodemReceivePacket+0x50>
      {
        p_packet->length = 128;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2280      	movs	r2, #128	; 0x80
 8002be2:	819a      	strh	r2, [r3, #12]
        p_packet->stx = data_in;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	78fa      	ldrb	r2, [r7, #3]
 8002be8:	711a      	strb	r2, [r3, #4]
        p_packet->state = YMODEM_PACKET_WAIT_SEQ1;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2201      	movs	r2, #1
 8002bee:	701a      	strb	r2, [r3, #0]
      }
      if (data_in == YMODEM_STX)
 8002bf0:	78fb      	ldrb	r3, [r7, #3]
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d109      	bne.n	8002c0a <ymodemReceivePacket+0x6a>
      {
        p_packet->length = 1024;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bfc:	819a      	strh	r2, [r3, #12]
        p_packet->stx = data_in;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	78fa      	ldrb	r2, [r7, #3]
 8002c02:	711a      	strb	r2, [r3, #4]
        p_packet->state = YMODEM_PACKET_WAIT_SEQ1;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	701a      	strb	r2, [r3, #0]
      }
      if (data_in == YMODEM_EOT)
 8002c0a:	78fb      	ldrb	r3, [r7, #3]
 8002c0c:	2b04      	cmp	r3, #4
 8002c0e:	d104      	bne.n	8002c1a <ymodemReceivePacket+0x7a>
      {
        p_packet->stx = data_in;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	78fa      	ldrb	r2, [r7, #3]
 8002c14:	711a      	strb	r2, [r3, #4]
        ret = true;
 8002c16:	2301      	movs	r3, #1
 8002c18:	73fb      	strb	r3, [r7, #15]
      }
      if (data_in == YMODEM_CAN)
 8002c1a:	78fb      	ldrb	r3, [r7, #3]
 8002c1c:	2b18      	cmp	r3, #24
 8002c1e:	d162      	bne.n	8002ce6 <ymodemReceivePacket+0x146>
      {
        p_packet->stx = data_in;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	78fa      	ldrb	r2, [r7, #3]
 8002c24:	711a      	strb	r2, [r3, #4]
        ret = true;
 8002c26:	2301      	movs	r3, #1
 8002c28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c2a:	e05c      	b.n	8002ce6 <ymodemReceivePacket+0x146>

    case YMODEM_PACKET_WAIT_SEQ1:
      p_packet->seq[0] = data_in;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	78fa      	ldrb	r2, [r7, #3]
 8002c30:	715a      	strb	r2, [r3, #5]
      p_packet->state = YMODEM_PACKET_WAIT_SEQ2;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2202      	movs	r2, #2
 8002c36:	701a      	strb	r2, [r3, #0]
      break;
 8002c38:	e05a      	b.n	8002cf0 <ymodemReceivePacket+0x150>

    case YMODEM_PACKET_WAIT_SEQ2:
      p_packet->seq[1] = data_in;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	78fa      	ldrb	r2, [r7, #3]
 8002c3e:	719a      	strb	r2, [r3, #6]
      if (p_packet->seq[0] == (uint8_t)(~data_in))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	795a      	ldrb	r2, [r3, #5]
 8002c44:	78fb      	ldrb	r3, [r7, #3]
 8002c46:	43db      	mvns	r3, r3
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d106      	bne.n	8002c5c <ymodemReceivePacket+0xbc>
      {
        p_packet->index = 0;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	805a      	strh	r2, [r3, #2]
        p_packet->state = YMODEM_PACKET_WAIT_DATA;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2203      	movs	r2, #3
 8002c58:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        p_packet->state = YMODEM_PACKET_WAIT_FIRST;
      }
      break;
 8002c5a:	e049      	b.n	8002cf0 <ymodemReceivePacket+0x150>
        p_packet->state = YMODEM_PACKET_WAIT_FIRST;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	701a      	strb	r2, [r3, #0]
      break;
 8002c62:	e045      	b.n	8002cf0 <ymodemReceivePacket+0x150>

    case YMODEM_PACKET_WAIT_DATA:
      p_packet->data[p_packet->index] = data_in;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	8852      	ldrh	r2, [r2, #2]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	78fa      	ldrb	r2, [r7, #3]
 8002c70:	701a      	strb	r2, [r3, #0]
      p_packet->index++;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	885b      	ldrh	r3, [r3, #2]
 8002c76:	3301      	adds	r3, #1
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	805a      	strh	r2, [r3, #2]
      if (p_packet->index >= p_packet->length)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	885a      	ldrh	r2, [r3, #2]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	899b      	ldrh	r3, [r3, #12]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d32f      	bcc.n	8002cea <ymodemReceivePacket+0x14a>
      {
        p_packet->state = YMODEM_PACKET_WAIT_CRCH;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2204      	movs	r2, #4
 8002c8e:	701a      	strb	r2, [r3, #0]
      }
      break;
 8002c90:	e02b      	b.n	8002cea <ymodemReceivePacket+0x14a>

    case YMODEM_PACKET_WAIT_CRCH:
      p_packet->crc_recv = (data_in<<8);
 8002c92:	78fb      	ldrb	r3, [r7, #3]
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	021b      	lsls	r3, r3, #8
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	821a      	strh	r2, [r3, #16]
      p_packet->state = YMODEM_PACKET_WAIT_CRCL;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2205      	movs	r2, #5
 8002ca2:	701a      	strb	r2, [r3, #0]
      break;
 8002ca4:	e024      	b.n	8002cf0 <ymodemReceivePacket+0x150>

    case YMODEM_PACKET_WAIT_CRCL:
      p_packet->crc_recv |= (data_in<<0);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	8a1a      	ldrh	r2, [r3, #16]
 8002caa:	78fb      	ldrb	r3, [r7, #3]
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	b29a      	uxth	r2, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	821a      	strh	r2, [r3, #16]
      p_packet->state = YMODEM_PACKET_WAIT_FIRST;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	701a      	strb	r2, [r3, #0]

      p_packet->crc = crc16(p_packet->data, p_packet->length);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689a      	ldr	r2, [r3, #8]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	899b      	ldrh	r3, [r3, #12]
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	4610      	mov	r0, r2
 8002cc8:	f000 f83a 	bl	8002d40 <crc16>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	461a      	mov	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	81da      	strh	r2, [r3, #14]

      if (p_packet->crc == p_packet->crc_recv)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	89da      	ldrh	r2, [r3, #14]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	8a1b      	ldrh	r3, [r3, #16]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d106      	bne.n	8002cee <ymodemReceivePacket+0x14e>
      {
        ret = true;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	73fb      	strb	r3, [r7, #15]
      }
      //uartPrintf(_DEF_UART1, "crc %X %X\n", p_packet->crc, p_packet->crc_recv);
      break;
 8002ce4:	e003      	b.n	8002cee <ymodemReceivePacket+0x14e>
      break;
 8002ce6:	bf00      	nop
 8002ce8:	e002      	b.n	8002cf0 <ymodemReceivePacket+0x150>
      break;
 8002cea:	bf00      	nop
 8002cec:	e000      	b.n	8002cf0 <ymodemReceivePacket+0x150>
      break;
 8002cee:	bf00      	nop
  }

  return ret;
 8002cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3710      	adds	r7, #16
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop

08002cfc <crc_update>:


#define CRC_POLY 0x1021

uint16_t crc_update(uint16_t crc_in, int incr)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b085      	sub	sp, #20
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	4603      	mov	r3, r0
 8002d04:	6039      	str	r1, [r7, #0]
 8002d06:	80fb      	strh	r3, [r7, #6]
  uint16_t xor = crc_in >> 15;
 8002d08:	88fb      	ldrh	r3, [r7, #6]
 8002d0a:	0bdb      	lsrs	r3, r3, #15
 8002d0c:	81bb      	strh	r3, [r7, #12]
  uint16_t out = crc_in << 1;
 8002d0e:	88fb      	ldrh	r3, [r7, #6]
 8002d10:	005b      	lsls	r3, r3, #1
 8002d12:	81fb      	strh	r3, [r7, #14]

  if (incr)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d002      	beq.n	8002d20 <crc_update+0x24>
  {
    out++;
 8002d1a:	89fb      	ldrh	r3, [r7, #14]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	81fb      	strh	r3, [r7, #14]
  }

  if (xor)
 8002d20:	89bb      	ldrh	r3, [r7, #12]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d005      	beq.n	8002d32 <crc_update+0x36>
  {
    out ^= CRC_POLY;
 8002d26:	89fb      	ldrh	r3, [r7, #14]
 8002d28:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8002d2c:	f083 0301 	eor.w	r3, r3, #1
 8002d30:	81fb      	strh	r3, [r7, #14]
  }

  return out;
 8002d32:	89fb      	ldrh	r3, [r7, #14]
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3714      	adds	r7, #20
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <crc16>:

uint16_t crc16(uint8_t *data, uint16_t size)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	460b      	mov	r3, r1
 8002d4a:	807b      	strh	r3, [r7, #2]
  uint16_t crc, i;

  for (crc = 0; size > 0; size--, data++)
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	81fb      	strh	r3, [r7, #14]
 8002d50:	e01a      	b.n	8002d88 <crc16+0x48>
  {
    for (i = 0x80; i; i >>= 1)
 8002d52:	2380      	movs	r3, #128	; 0x80
 8002d54:	81bb      	strh	r3, [r7, #12]
 8002d56:	e00e      	b.n	8002d76 <crc16+0x36>
    {
      crc = crc_update(crc, *data & i);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	89bb      	ldrh	r3, [r7, #12]
 8002d60:	401a      	ands	r2, r3
 8002d62:	89fb      	ldrh	r3, [r7, #14]
 8002d64:	4611      	mov	r1, r2
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7ff ffc8 	bl	8002cfc <crc_update>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	81fb      	strh	r3, [r7, #14]
    for (i = 0x80; i; i >>= 1)
 8002d70:	89bb      	ldrh	r3, [r7, #12]
 8002d72:	085b      	lsrs	r3, r3, #1
 8002d74:	81bb      	strh	r3, [r7, #12]
 8002d76:	89bb      	ldrh	r3, [r7, #12]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d1ed      	bne.n	8002d58 <crc16+0x18>
  for (crc = 0; size > 0; size--, data++)
 8002d7c:	887b      	ldrh	r3, [r7, #2]
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	807b      	strh	r3, [r7, #2]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	3301      	adds	r3, #1
 8002d86:	607b      	str	r3, [r7, #4]
 8002d88:	887b      	ldrh	r3, [r7, #2]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1e1      	bne.n	8002d52 <crc16+0x12>
    }
  }

  for (i = 0; i < 16; i++)
 8002d8e:	2300      	movs	r3, #0
 8002d90:	81bb      	strh	r3, [r7, #12]
 8002d92:	e009      	b.n	8002da8 <crc16+0x68>
  {
    crc = crc_update(crc, 0);
 8002d94:	89fb      	ldrh	r3, [r7, #14]
 8002d96:	2100      	movs	r1, #0
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7ff ffaf 	bl	8002cfc <crc_update>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	81fb      	strh	r3, [r7, #14]
  for (i = 0; i < 16; i++)
 8002da2:	89bb      	ldrh	r3, [r7, #12]
 8002da4:	3301      	adds	r3, #1
 8002da6:	81bb      	strh	r3, [r7, #12]
 8002da8:	89bb      	ldrh	r3, [r7, #12]
 8002daa:	2b0f      	cmp	r3, #15
 8002dac:	d9f2      	bls.n	8002d94 <crc16+0x54>
  }

  return crc;
 8002dae:	89fb      	ldrh	r3, [r7, #14]
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3710      	adds	r7, #16
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <cliYmodem>:


#if 1
void cliYmodem(cli_args_t *args)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	f5ad 6d9c 	sub.w	sp, sp, #1248	; 0x4e0
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	1d3b      	adds	r3, r7, #4
 8002dc2:	6018      	str	r0, [r3, #0]
  bool ret = false;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	f887 34df 	strb.w	r3, [r7, #1247]	; 0x4df
  ymodem_t ymodem;
  bool keep_loop ;
  uint8_t err_code = 0;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	f887 34dd 	strb.w	r3, [r7, #1245]	; 0x4dd

  uint32_t pre_time;
  uint32_t addr_offset;
  uint32_t addr;

  uint8_t log_ch = 1;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	f887 34d7 	strb.w	r3, [r7, #1239]	; 0x4d7



  if (args->argc == 2 && args->isStr(0, "down"))
 8002dd6:	1d3b      	adds	r3, r7, #4
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	881b      	ldrh	r3, [r3, #0]
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	f040 80d4 	bne.w	8002f8a <cliYmodem+0x1d2>
 8002de2:	1d3b      	adds	r3, r7, #4
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	695b      	ldr	r3, [r3, #20]
 8002de8:	496f      	ldr	r1, [pc, #444]	; (8002fa8 <cliYmodem+0x1f0>)
 8002dea:	2000      	movs	r0, #0
 8002dec:	4798      	blx	r3
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	f000 80ca 	beq.w	8002f8a <cliYmodem+0x1d2>
  {

    addr_offset = args->getData(1);
 8002df6:	1d3b      	adds	r3, r7, #4
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	2001      	movs	r0, #1
 8002dfe:	4798      	blx	r3
 8002e00:	4603      	mov	r3, r0
 8002e02:	f8c7 34d0 	str.w	r3, [r7, #1232]	; 0x4d0

    ymodemOpen(&ymodem, 2);
 8002e06:	f107 0308 	add.w	r3, r7, #8
 8002e0a:	2102      	movs	r1, #2
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7ff fcc7 	bl	80027a0 <ymodemOpen>

    cliPrintf("download ...");
 8002e12:	4866      	ldr	r0, [pc, #408]	; (8002fac <cliYmodem+0x1f4>)
 8002e14:	f7fe faf8 	bl	8001408 <cliPrintf>
    pre_time = millis();
 8002e18:	f7ff f956 	bl	80020c8 <millis>
 8002e1c:	f8c7 04d8 	str.w	r0, [r7, #1240]	; 0x4d8

    keep_loop = true;
 8002e20:	2301      	movs	r3, #1
 8002e22:	f887 34de 	strb.w	r3, [r7, #1246]	; 0x4de

    while(keep_loop)
 8002e26:	e095      	b.n	8002f54 <cliYmodem+0x19c>
    {
      if (ymodemReceive(&ymodem) == true)
 8002e28:	f107 0308 	add.w	r3, r7, #8
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7ff fd61 	bl	80028f4 <ymodemReceive>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d07a      	beq.n	8002f2e <cliYmodem+0x176>
      {
          pre_time = millis();
 8002e38:	f7ff f946 	bl	80020c8 <millis>
 8002e3c:	f8c7 04d8 	str.w	r0, [r7, #1240]	; 0x4d8
        switch(ymodem.type)
 8002e40:	f107 0308 	add.w	r3, r7, #8
 8002e44:	7a1b      	ldrb	r3, [r3, #8]
 8002e46:	2b04      	cmp	r3, #4
 8002e48:	d874      	bhi.n	8002f34 <cliYmodem+0x17c>
 8002e4a:	a201      	add	r2, pc, #4	; (adr r2, 8002e50 <cliYmodem+0x98>)
 8002e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e50:	08002e65 	.word	0x08002e65
 8002e54:	08002e81 	.word	0x08002e81
 8002e58:	08002ee7 	.word	0x08002ee7
 8002e5c:	08002efb 	.word	0x08002efb
 8002e60:	08002f15 	.word	0x08002f15
        {
          case YMODEM_TYPE_START:
            uartPrintf(log_ch, "YMODEM_TYPE_START %s %d\n", ymodem.file_name, ymodem.file_length);
 8002e64:	f107 0308 	add.w	r3, r7, #8
 8002e68:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 8002e6c:	f107 0308 	add.w	r3, r7, #8
 8002e70:	f103 021a 	add.w	r2, r3, #26
 8002e74:	f897 04d7 	ldrb.w	r0, [r7, #1239]	; 0x4d7
 8002e78:	460b      	mov	r3, r1
 8002e7a:	494d      	ldr	r1, [pc, #308]	; (8002fb0 <cliYmodem+0x1f8>)
 8002e7c:	f7ff fb12 	bl	80024a4 <uartPrintf>
			    uartPrintf(log_ch, "wait erase\r\n");
			}
            break;
*/
          case YMODEM_TYPE_DATA:
            uartPrintf(log_ch, "YMODEM_TYPE_DATA %d %d %%\n", ymodem.rx_packet.seq[0], ymodem.file_received*100 / ymodem.file_length);
 8002e80:	f107 0308 	add.w	r3, r7, #8
 8002e84:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8002e88:	4619      	mov	r1, r3
 8002e8a:	f107 0308 	add.w	r3, r7, #8
 8002e8e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002e92:	2264      	movs	r2, #100	; 0x64
 8002e94:	fb02 f203 	mul.w	r2, r2, r3
 8002e98:	f107 0308 	add.w	r3, r7, #8
 8002e9c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ea4:	f897 04d7 	ldrb.w	r0, [r7, #1239]	; 0x4d7
 8002ea8:	460a      	mov	r2, r1
 8002eaa:	4942      	ldr	r1, [pc, #264]	; (8002fb4 <cliYmodem+0x1fc>)
 8002eac:	f7ff fafa 	bl	80024a4 <uartPrintf>
		    //addr = addr_offset + ymodem.file_addr;
		     if (flashWrite(FLASH_ADDR_FW + ymodem.file_addr, ymodem.file_buf, ymodem.file_buf_length) != true)
 8002eb0:	f107 0308 	add.w	r3, r7, #8
 8002eb4:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8002eb8:	4b3f      	ldr	r3, [pc, #252]	; (8002fb8 <cliYmodem+0x200>)
 8002eba:	4413      	add	r3, r2
 8002ebc:	f107 0208 	add.w	r2, r7, #8
 8002ec0:	f8d2 10a8 	ldr.w	r1, [r2, #168]	; 0xa8
 8002ec4:	f107 0208 	add.w	r2, r7, #8
 8002ec8:	f8b2 20ac 	ldrh.w	r2, [r2, #172]	; 0xac
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7fe fd81 	bl	80019d4 <flashWrite>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d02c      	beq.n	8002f32 <cliYmodem+0x17a>
		     {
			   keep_loop = false;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	f887 34de 	strb.w	r3, [r7, #1246]	; 0x4de
			   err_code = 2;
 8002ede:	2302      	movs	r3, #2
 8002ee0:	f887 34dd 	strb.w	r3, [r7, #1245]	; 0x4dd
		     }
		    break;
 8002ee4:	e025      	b.n	8002f32 <cliYmodem+0x17a>

          case YMODEM_TYPE_END:
            uartPrintf(log_ch, "YMODEM_TYPE_END \n");
 8002ee6:	f897 34d7 	ldrb.w	r3, [r7, #1239]	; 0x4d7
 8002eea:	4934      	ldr	r1, [pc, #208]	; (8002fbc <cliYmodem+0x204>)
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7ff fad9 	bl	80024a4 <uartPrintf>
            keep_loop = false;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	f887 34de 	strb.w	r3, [r7, #1246]	; 0x4de
            break;
 8002ef8:	e01c      	b.n	8002f34 <cliYmodem+0x17c>

          case YMODEM_TYPE_CANCEL:
            uartPrintf(log_ch, "YMODEM_TYPE_CANCEL \n");
 8002efa:	f897 34d7 	ldrb.w	r3, [r7, #1239]	; 0x4d7
 8002efe:	4930      	ldr	r1, [pc, #192]	; (8002fc0 <cliYmodem+0x208>)
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7ff facf 	bl	80024a4 <uartPrintf>
            err_code = 3;
 8002f06:	2303      	movs	r3, #3
 8002f08:	f887 34dd 	strb.w	r3, [r7, #1245]	; 0x4dd
            keep_loop = false;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	f887 34de 	strb.w	r3, [r7, #1246]	; 0x4de
            break;
 8002f12:	e00f      	b.n	8002f34 <cliYmodem+0x17c>

          case YMODEM_TYPE_ERROR:
            uartPrintf(log_ch, "YMODEM_TYPE_ERROR \n");
 8002f14:	f897 34d7 	ldrb.w	r3, [r7, #1239]	; 0x4d7
 8002f18:	492a      	ldr	r1, [pc, #168]	; (8002fc4 <cliYmodem+0x20c>)
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7ff fac2 	bl	80024a4 <uartPrintf>
            err_code = 4;
 8002f20:	2304      	movs	r3, #4
 8002f22:	f887 34dd 	strb.w	r3, [r7, #1245]	; 0x4dd
            keep_loop = false;
 8002f26:	2300      	movs	r3, #0
 8002f28:	f887 34de 	strb.w	r3, [r7, #1246]	; 0x4de
            break;
 8002f2c:	e002      	b.n	8002f34 <cliYmodem+0x17c>
        }
      }
 8002f2e:	bf00      	nop
 8002f30:	e000      	b.n	8002f34 <cliYmodem+0x17c>
		    break;
 8002f32:	bf00      	nop
      	if (millis()-pre_time >= 15*1000)
 8002f34:	f7ff f8c8 	bl	80020c8 <millis>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	; 0x4d8
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	f643 2297 	movw	r2, #14999	; 0x3a97
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d905      	bls.n	8002f54 <cliYmodem+0x19c>
     	{
     	  keep_loop = false;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	f887 34de 	strb.w	r3, [r7, #1246]	; 0x4de
     	  err_code = 5;
 8002f4e:	2305      	movs	r3, #5
 8002f50:	f887 34dd 	strb.w	r3, [r7, #1245]	; 0x4dd
    while(keep_loop)
 8002f54:	f897 34de 	ldrb.w	r3, [r7, #1246]	; 0x4de
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	f47f af65 	bne.w	8002e28 <cliYmodem+0x70>
     	}
    }



    if((ymodem.type == YMODEM_TYPE_END)||(err_code != false))
 8002f5e:	f107 0308 	add.w	r3, r7, #8
 8002f62:	7a1b      	ldrb	r3, [r3, #8]
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d003      	beq.n	8002f70 <cliYmodem+0x1b8>
 8002f68:	f897 34dd 	ldrb.w	r3, [r7, #1245]	; 0x4dd
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d003      	beq.n	8002f78 <cliYmodem+0x1c0>
    {
     cliPrintf("Down OK\n");
 8002f70:	4815      	ldr	r0, [pc, #84]	; (8002fc8 <cliYmodem+0x210>)
 8002f72:	f7fe fa49 	bl	8001408 <cliPrintf>
 8002f76:	e005      	b.n	8002f84 <cliYmodem+0x1cc>
    }
    else
	{
	 cliPrintf("Down Fail :%d \n",err_code);
 8002f78:	f897 34dd 	ldrb.w	r3, [r7, #1245]	; 0x4dd
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	4813      	ldr	r0, [pc, #76]	; (8002fcc <cliYmodem+0x214>)
 8002f80:	f7fe fa42 	bl	8001408 <cliPrintf>
	}
	ret = true;
 8002f84:	2301      	movs	r3, #1
 8002f86:	f887 34df 	strb.w	r3, [r7, #1247]	; 0x4df
  }

  if (ret != true)
 8002f8a:	f897 34df 	ldrb.w	r3, [r7, #1247]	; 0x4df
 8002f8e:	f083 0301 	eor.w	r3, r3, #1
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d002      	beq.n	8002f9e <cliYmodem+0x1e6>
  {
    cliPrintf("ymodem down [addr] \r\n");
 8002f98:	480d      	ldr	r0, [pc, #52]	; (8002fd0 <cliYmodem+0x218>)
 8002f9a:	f7fe fa35 	bl	8001408 <cliPrintf>
  }
}
 8002f9e:	bf00      	nop
 8002fa0:	f507 679c 	add.w	r7, r7, #1248	; 0x4e0
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	0800a3b8 	.word	0x0800a3b8
 8002fac:	0800a3c0 	.word	0x0800a3c0
 8002fb0:	0800a3d0 	.word	0x0800a3d0
 8002fb4:	0800a3ec 	.word	0x0800a3ec
 8002fb8:	08010000 	.word	0x08010000
 8002fbc:	0800a408 	.word	0x0800a408
 8002fc0:	0800a41c 	.word	0x0800a41c
 8002fc4:	0800a434 	.word	0x0800a434
 8002fc8:	0800a448 	.word	0x0800a448
 8002fcc:	0800a454 	.word	0x0800a454
 8002fd0:	0800a464 	.word	0x0800a464

08002fd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fd8:	2003      	movs	r0, #3
 8002fda:	f000 f94d 	bl	8003278 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fde:	2000      	movs	r0, #0
 8002fe0:	f000 f806 	bl	8002ff0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002fe4:	f7fd fd04 	bl	80009f0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	bd80      	pop	{r7, pc}
	...

08002ff0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ff8:	4b12      	ldr	r3, [pc, #72]	; (8003044 <HAL_InitTick+0x54>)
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	4b12      	ldr	r3, [pc, #72]	; (8003048 <HAL_InitTick+0x58>)
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	4619      	mov	r1, r3
 8003002:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003006:	fbb3 f3f1 	udiv	r3, r3, r1
 800300a:	fbb2 f3f3 	udiv	r3, r2, r3
 800300e:	4618      	mov	r0, r3
 8003010:	f000 f975 	bl	80032fe <HAL_SYSTICK_Config>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e00e      	b.n	800303c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2b0f      	cmp	r3, #15
 8003022:	d80a      	bhi.n	800303a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003024:	2200      	movs	r2, #0
 8003026:	6879      	ldr	r1, [r7, #4]
 8003028:	f04f 30ff 	mov.w	r0, #4294967295
 800302c:	f000 f92f 	bl	800328e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003030:	4a06      	ldr	r2, [pc, #24]	; (800304c <HAL_InitTick+0x5c>)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003036:	2300      	movs	r3, #0
 8003038:	e000      	b.n	800303c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
}
 800303c:	4618      	mov	r0, r3
 800303e:	3708      	adds	r7, #8
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	20000000 	.word	0x20000000
 8003048:	2000000c 	.word	0x2000000c
 800304c:	20000008 	.word	0x20000008

08003050 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003054:	4b06      	ldr	r3, [pc, #24]	; (8003070 <HAL_IncTick+0x20>)
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	461a      	mov	r2, r3
 800305a:	4b06      	ldr	r3, [pc, #24]	; (8003074 <HAL_IncTick+0x24>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4413      	add	r3, r2
 8003060:	4a04      	ldr	r2, [pc, #16]	; (8003074 <HAL_IncTick+0x24>)
 8003062:	6013      	str	r3, [r2, #0]
}
 8003064:	bf00      	nop
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	2000000c 	.word	0x2000000c
 8003074:	20000908 	.word	0x20000908

08003078 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003078:	b480      	push	{r7}
 800307a:	af00      	add	r7, sp, #0
  return uwTick;
 800307c:	4b03      	ldr	r3, [pc, #12]	; (800308c <HAL_GetTick+0x14>)
 800307e:	681b      	ldr	r3, [r3, #0]
}
 8003080:	4618      	mov	r0, r3
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	20000908 	.word	0x20000908

08003090 <__NVIC_SetPriorityGrouping>:
{
 8003090:	b480      	push	{r7}
 8003092:	b085      	sub	sp, #20
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f003 0307 	and.w	r3, r3, #7
 800309e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030a0:	4b0b      	ldr	r3, [pc, #44]	; (80030d0 <__NVIC_SetPriorityGrouping+0x40>)
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030a6:	68ba      	ldr	r2, [r7, #8]
 80030a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030ac:	4013      	ands	r3, r2
 80030ae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80030b8:	4b06      	ldr	r3, [pc, #24]	; (80030d4 <__NVIC_SetPriorityGrouping+0x44>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030be:	4a04      	ldr	r2, [pc, #16]	; (80030d0 <__NVIC_SetPriorityGrouping+0x40>)
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	60d3      	str	r3, [r2, #12]
}
 80030c4:	bf00      	nop
 80030c6:	3714      	adds	r7, #20
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr
 80030d0:	e000ed00 	.word	0xe000ed00
 80030d4:	05fa0000 	.word	0x05fa0000

080030d8 <__NVIC_GetPriorityGrouping>:
{
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030dc:	4b04      	ldr	r3, [pc, #16]	; (80030f0 <__NVIC_GetPriorityGrouping+0x18>)
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	0a1b      	lsrs	r3, r3, #8
 80030e2:	f003 0307 	and.w	r3, r3, #7
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr
 80030f0:	e000ed00 	.word	0xe000ed00

080030f4 <__NVIC_EnableIRQ>:
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	4603      	mov	r3, r0
 80030fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003102:	2b00      	cmp	r3, #0
 8003104:	db0b      	blt.n	800311e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003106:	79fb      	ldrb	r3, [r7, #7]
 8003108:	f003 021f 	and.w	r2, r3, #31
 800310c:	4907      	ldr	r1, [pc, #28]	; (800312c <__NVIC_EnableIRQ+0x38>)
 800310e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003112:	095b      	lsrs	r3, r3, #5
 8003114:	2001      	movs	r0, #1
 8003116:	fa00 f202 	lsl.w	r2, r0, r2
 800311a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800311e:	bf00      	nop
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	e000e100 	.word	0xe000e100

08003130 <__NVIC_DisableIRQ>:
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	4603      	mov	r3, r0
 8003138:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800313a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800313e:	2b00      	cmp	r3, #0
 8003140:	db12      	blt.n	8003168 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003142:	79fb      	ldrb	r3, [r7, #7]
 8003144:	f003 021f 	and.w	r2, r3, #31
 8003148:	490a      	ldr	r1, [pc, #40]	; (8003174 <__NVIC_DisableIRQ+0x44>)
 800314a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800314e:	095b      	lsrs	r3, r3, #5
 8003150:	2001      	movs	r0, #1
 8003152:	fa00 f202 	lsl.w	r2, r0, r2
 8003156:	3320      	adds	r3, #32
 8003158:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800315c:	f3bf 8f4f 	dsb	sy
}
 8003160:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003162:	f3bf 8f6f 	isb	sy
}
 8003166:	bf00      	nop
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr
 8003174:	e000e100 	.word	0xe000e100

08003178 <__NVIC_SetPriority>:
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	4603      	mov	r3, r0
 8003180:	6039      	str	r1, [r7, #0]
 8003182:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003188:	2b00      	cmp	r3, #0
 800318a:	db0a      	blt.n	80031a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	b2da      	uxtb	r2, r3
 8003190:	490c      	ldr	r1, [pc, #48]	; (80031c4 <__NVIC_SetPriority+0x4c>)
 8003192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003196:	0112      	lsls	r2, r2, #4
 8003198:	b2d2      	uxtb	r2, r2
 800319a:	440b      	add	r3, r1
 800319c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80031a0:	e00a      	b.n	80031b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	b2da      	uxtb	r2, r3
 80031a6:	4908      	ldr	r1, [pc, #32]	; (80031c8 <__NVIC_SetPriority+0x50>)
 80031a8:	79fb      	ldrb	r3, [r7, #7]
 80031aa:	f003 030f 	and.w	r3, r3, #15
 80031ae:	3b04      	subs	r3, #4
 80031b0:	0112      	lsls	r2, r2, #4
 80031b2:	b2d2      	uxtb	r2, r2
 80031b4:	440b      	add	r3, r1
 80031b6:	761a      	strb	r2, [r3, #24]
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr
 80031c4:	e000e100 	.word	0xe000e100
 80031c8:	e000ed00 	.word	0xe000ed00

080031cc <NVIC_EncodePriority>:
{
 80031cc:	b480      	push	{r7}
 80031ce:	b089      	sub	sp, #36	; 0x24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f003 0307 	and.w	r3, r3, #7
 80031de:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	f1c3 0307 	rsb	r3, r3, #7
 80031e6:	2b04      	cmp	r3, #4
 80031e8:	bf28      	it	cs
 80031ea:	2304      	movcs	r3, #4
 80031ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	3304      	adds	r3, #4
 80031f2:	2b06      	cmp	r3, #6
 80031f4:	d902      	bls.n	80031fc <NVIC_EncodePriority+0x30>
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	3b03      	subs	r3, #3
 80031fa:	e000      	b.n	80031fe <NVIC_EncodePriority+0x32>
 80031fc:	2300      	movs	r3, #0
 80031fe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003200:	f04f 32ff 	mov.w	r2, #4294967295
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	fa02 f303 	lsl.w	r3, r2, r3
 800320a:	43da      	mvns	r2, r3
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	401a      	ands	r2, r3
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003214:	f04f 31ff 	mov.w	r1, #4294967295
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	fa01 f303 	lsl.w	r3, r1, r3
 800321e:	43d9      	mvns	r1, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003224:	4313      	orrs	r3, r2
}
 8003226:	4618      	mov	r0, r3
 8003228:	3724      	adds	r7, #36	; 0x24
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
	...

08003234 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	3b01      	subs	r3, #1
 8003240:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003244:	d301      	bcc.n	800324a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003246:	2301      	movs	r3, #1
 8003248:	e00f      	b.n	800326a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800324a:	4a0a      	ldr	r2, [pc, #40]	; (8003274 <SysTick_Config+0x40>)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	3b01      	subs	r3, #1
 8003250:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003252:	210f      	movs	r1, #15
 8003254:	f04f 30ff 	mov.w	r0, #4294967295
 8003258:	f7ff ff8e 	bl	8003178 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800325c:	4b05      	ldr	r3, [pc, #20]	; (8003274 <SysTick_Config+0x40>)
 800325e:	2200      	movs	r2, #0
 8003260:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003262:	4b04      	ldr	r3, [pc, #16]	; (8003274 <SysTick_Config+0x40>)
 8003264:	2207      	movs	r2, #7
 8003266:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3708      	adds	r7, #8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	e000e010 	.word	0xe000e010

08003278 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f7ff ff05 	bl	8003090 <__NVIC_SetPriorityGrouping>
}
 8003286:	bf00      	nop
 8003288:	3708      	adds	r7, #8
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800328e:	b580      	push	{r7, lr}
 8003290:	b086      	sub	sp, #24
 8003292:	af00      	add	r7, sp, #0
 8003294:	4603      	mov	r3, r0
 8003296:	60b9      	str	r1, [r7, #8]
 8003298:	607a      	str	r2, [r7, #4]
 800329a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800329c:	2300      	movs	r3, #0
 800329e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032a0:	f7ff ff1a 	bl	80030d8 <__NVIC_GetPriorityGrouping>
 80032a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	68b9      	ldr	r1, [r7, #8]
 80032aa:	6978      	ldr	r0, [r7, #20]
 80032ac:	f7ff ff8e 	bl	80031cc <NVIC_EncodePriority>
 80032b0:	4602      	mov	r2, r0
 80032b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032b6:	4611      	mov	r1, r2
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7ff ff5d 	bl	8003178 <__NVIC_SetPriority>
}
 80032be:	bf00      	nop
 80032c0:	3718      	adds	r7, #24
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b082      	sub	sp, #8
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	4603      	mov	r3, r0
 80032ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7ff ff0d 	bl	80030f4 <__NVIC_EnableIRQ>
}
 80032da:	bf00      	nop
 80032dc:	3708      	adds	r7, #8
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80032e2:	b580      	push	{r7, lr}
 80032e4:	b082      	sub	sp, #8
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	4603      	mov	r3, r0
 80032ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80032ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7ff ff1d 	bl	8003130 <__NVIC_DisableIRQ>
}
 80032f6:	bf00      	nop
 80032f8:	3708      	adds	r7, #8
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032fe:	b580      	push	{r7, lr}
 8003300:	b082      	sub	sp, #8
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f7ff ff94 	bl	8003234 <SysTick_Config>
 800330c:	4603      	mov	r3, r0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
	...

08003318 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003320:	2300      	movs	r3, #0
 8003322:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003324:	f7ff fea8 	bl	8003078 <HAL_GetTick>
 8003328:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d101      	bne.n	8003334 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e099      	b.n	8003468 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2202      	movs	r2, #2
 8003340:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f022 0201 	bic.w	r2, r2, #1
 8003352:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003354:	e00f      	b.n	8003376 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003356:	f7ff fe8f 	bl	8003078 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	2b05      	cmp	r3, #5
 8003362:	d908      	bls.n	8003376 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2220      	movs	r2, #32
 8003368:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2203      	movs	r2, #3
 800336e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e078      	b.n	8003468 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0301 	and.w	r3, r3, #1
 8003380:	2b00      	cmp	r3, #0
 8003382:	d1e8      	bne.n	8003356 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800338c:	697a      	ldr	r2, [r7, #20]
 800338e:	4b38      	ldr	r3, [pc, #224]	; (8003470 <HAL_DMA_Init+0x158>)
 8003390:	4013      	ands	r3, r2
 8003392:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685a      	ldr	r2, [r3, #4]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	691b      	ldr	r3, [r3, #16]
 80033a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	699b      	ldr	r3, [r3, #24]
 80033b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a1b      	ldr	r3, [r3, #32]
 80033c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033cc:	2b04      	cmp	r3, #4
 80033ce:	d107      	bne.n	80033e0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d8:	4313      	orrs	r3, r2
 80033da:	697a      	ldr	r2, [r7, #20]
 80033dc:	4313      	orrs	r3, r2
 80033de:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	697a      	ldr	r2, [r7, #20]
 80033e6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	f023 0307 	bic.w	r3, r3, #7
 80033f6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fc:	697a      	ldr	r2, [r7, #20]
 80033fe:	4313      	orrs	r3, r2
 8003400:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003406:	2b04      	cmp	r3, #4
 8003408:	d117      	bne.n	800343a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800340e:	697a      	ldr	r2, [r7, #20]
 8003410:	4313      	orrs	r3, r2
 8003412:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003418:	2b00      	cmp	r3, #0
 800341a:	d00e      	beq.n	800343a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f000 fb67 	bl	8003af0 <DMA_CheckFifoParam>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d008      	beq.n	800343a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2240      	movs	r2, #64	; 0x40
 800342c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003436:	2301      	movs	r3, #1
 8003438:	e016      	b.n	8003468 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	697a      	ldr	r2, [r7, #20]
 8003440:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 fb1e 	bl	8003a84 <DMA_CalcBaseAndBitshift>
 8003448:	4603      	mov	r3, r0
 800344a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003450:	223f      	movs	r2, #63	; 0x3f
 8003452:	409a      	lsls	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2201      	movs	r2, #1
 8003462:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003466:	2300      	movs	r3, #0
}
 8003468:	4618      	mov	r0, r3
 800346a:	3718      	adds	r7, #24
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	e010803f 	.word	0xe010803f

08003474 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e050      	b.n	8003528 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d101      	bne.n	8003496 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003492:	2302      	movs	r3, #2
 8003494:	e048      	b.n	8003528 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f022 0201 	bic.w	r2, r2, #1
 80034a4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2200      	movs	r2, #0
 80034ac:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2200      	movs	r2, #0
 80034b4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2200      	movs	r2, #0
 80034bc:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2200      	movs	r2, #0
 80034c4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2200      	movs	r2, #0
 80034cc:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2221      	movs	r2, #33	; 0x21
 80034d4:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 fad4 	bl	8003a84 <DMA_CalcBaseAndBitshift>
 80034dc:	4603      	mov	r3, r0
 80034de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e4:	223f      	movs	r2, #63	; 0x3f
 80034e6:	409a      	lsls	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003526:	2300      	movs	r3, #0
}
 8003528:	4618      	mov	r0, r3
 800352a:	3710      	adds	r7, #16
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	607a      	str	r2, [r7, #4]
 800353c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800353e:	2300      	movs	r3, #0
 8003540:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003546:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800354e:	2b01      	cmp	r3, #1
 8003550:	d101      	bne.n	8003556 <HAL_DMA_Start_IT+0x26>
 8003552:	2302      	movs	r3, #2
 8003554:	e048      	b.n	80035e8 <HAL_DMA_Start_IT+0xb8>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2201      	movs	r2, #1
 800355a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b01      	cmp	r3, #1
 8003568:	d137      	bne.n	80035da <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2202      	movs	r2, #2
 800356e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	68b9      	ldr	r1, [r7, #8]
 800357e:	68f8      	ldr	r0, [r7, #12]
 8003580:	f000 fa52 	bl	8003a28 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003588:	223f      	movs	r2, #63	; 0x3f
 800358a:	409a      	lsls	r2, r3
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f042 0216 	orr.w	r2, r2, #22
 800359e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	695a      	ldr	r2, [r3, #20]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035ae:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d007      	beq.n	80035c8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f042 0208 	orr.w	r2, r2, #8
 80035c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f042 0201 	orr.w	r2, r2, #1
 80035d6:	601a      	str	r2, [r3, #0]
 80035d8:	e005      	b.n	80035e6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80035e2:	2302      	movs	r3, #2
 80035e4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80035e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3718      	adds	r7, #24
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035fc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80035fe:	f7ff fd3b 	bl	8003078 <HAL_GetTick>
 8003602:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800360a:	b2db      	uxtb	r3, r3
 800360c:	2b02      	cmp	r3, #2
 800360e:	d008      	beq.n	8003622 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2280      	movs	r2, #128	; 0x80
 8003614:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e052      	b.n	80036c8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f022 0216 	bic.w	r2, r2, #22
 8003630:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	695a      	ldr	r2, [r3, #20]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003640:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	2b00      	cmp	r3, #0
 8003648:	d103      	bne.n	8003652 <HAL_DMA_Abort+0x62>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800364e:	2b00      	cmp	r3, #0
 8003650:	d007      	beq.n	8003662 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 0208 	bic.w	r2, r2, #8
 8003660:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 0201 	bic.w	r2, r2, #1
 8003670:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003672:	e013      	b.n	800369c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003674:	f7ff fd00 	bl	8003078 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b05      	cmp	r3, #5
 8003680:	d90c      	bls.n	800369c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2220      	movs	r2, #32
 8003686:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2203      	movs	r2, #3
 8003694:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e015      	b.n	80036c8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1e4      	bne.n	8003674 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ae:	223f      	movs	r2, #63	; 0x3f
 80036b0:	409a      	lsls	r2, r3
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2201      	movs	r2, #1
 80036c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80036c6:	2300      	movs	r3, #0
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3710      	adds	r7, #16
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d004      	beq.n	80036ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2280      	movs	r2, #128	; 0x80
 80036e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e00c      	b.n	8003708 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2205      	movs	r2, #5
 80036f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f022 0201 	bic.w	r2, r2, #1
 8003704:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b086      	sub	sp, #24
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800371c:	2300      	movs	r3, #0
 800371e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003720:	4b92      	ldr	r3, [pc, #584]	; (800396c <HAL_DMA_IRQHandler+0x258>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a92      	ldr	r2, [pc, #584]	; (8003970 <HAL_DMA_IRQHandler+0x25c>)
 8003726:	fba2 2303 	umull	r2, r3, r2, r3
 800372a:	0a9b      	lsrs	r3, r3, #10
 800372c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003732:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800373e:	2208      	movs	r2, #8
 8003740:	409a      	lsls	r2, r3
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	4013      	ands	r3, r2
 8003746:	2b00      	cmp	r3, #0
 8003748:	d01a      	beq.n	8003780 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0304 	and.w	r3, r3, #4
 8003754:	2b00      	cmp	r3, #0
 8003756:	d013      	beq.n	8003780 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f022 0204 	bic.w	r2, r2, #4
 8003766:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800376c:	2208      	movs	r2, #8
 800376e:	409a      	lsls	r2, r3
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003778:	f043 0201 	orr.w	r2, r3, #1
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003784:	2201      	movs	r2, #1
 8003786:	409a      	lsls	r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	4013      	ands	r3, r2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d012      	beq.n	80037b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00b      	beq.n	80037b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037a2:	2201      	movs	r2, #1
 80037a4:	409a      	lsls	r2, r3
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ae:	f043 0202 	orr.w	r2, r3, #2
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ba:	2204      	movs	r2, #4
 80037bc:	409a      	lsls	r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	4013      	ands	r3, r2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d012      	beq.n	80037ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0302 	and.w	r3, r3, #2
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d00b      	beq.n	80037ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d8:	2204      	movs	r2, #4
 80037da:	409a      	lsls	r2, r3
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e4:	f043 0204 	orr.w	r2, r3, #4
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037f0:	2210      	movs	r2, #16
 80037f2:	409a      	lsls	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	4013      	ands	r3, r2
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d043      	beq.n	8003884 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0308 	and.w	r3, r3, #8
 8003806:	2b00      	cmp	r3, #0
 8003808:	d03c      	beq.n	8003884 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800380e:	2210      	movs	r2, #16
 8003810:	409a      	lsls	r2, r3
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d018      	beq.n	8003856 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d108      	bne.n	8003844 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003836:	2b00      	cmp	r3, #0
 8003838:	d024      	beq.n	8003884 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	4798      	blx	r3
 8003842:	e01f      	b.n	8003884 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003848:	2b00      	cmp	r3, #0
 800384a:	d01b      	beq.n	8003884 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	4798      	blx	r3
 8003854:	e016      	b.n	8003884 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003860:	2b00      	cmp	r3, #0
 8003862:	d107      	bne.n	8003874 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f022 0208 	bic.w	r2, r2, #8
 8003872:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003878:	2b00      	cmp	r3, #0
 800387a:	d003      	beq.n	8003884 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003888:	2220      	movs	r2, #32
 800388a:	409a      	lsls	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	4013      	ands	r3, r2
 8003890:	2b00      	cmp	r3, #0
 8003892:	f000 808e 	beq.w	80039b2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0310 	and.w	r3, r3, #16
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f000 8086 	beq.w	80039b2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038aa:	2220      	movs	r2, #32
 80038ac:	409a      	lsls	r2, r3
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b05      	cmp	r3, #5
 80038bc:	d136      	bne.n	800392c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f022 0216 	bic.w	r2, r2, #22
 80038cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	695a      	ldr	r2, [r3, #20]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d103      	bne.n	80038ee <HAL_DMA_IRQHandler+0x1da>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d007      	beq.n	80038fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f022 0208 	bic.w	r2, r2, #8
 80038fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003902:	223f      	movs	r2, #63	; 0x3f
 8003904:	409a      	lsls	r2, r3
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2201      	movs	r2, #1
 8003916:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800391e:	2b00      	cmp	r3, #0
 8003920:	d07d      	beq.n	8003a1e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	4798      	blx	r3
        }
        return;
 800392a:	e078      	b.n	8003a1e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d01c      	beq.n	8003974 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d108      	bne.n	800395a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800394c:	2b00      	cmp	r3, #0
 800394e:	d030      	beq.n	80039b2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	4798      	blx	r3
 8003958:	e02b      	b.n	80039b2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800395e:	2b00      	cmp	r3, #0
 8003960:	d027      	beq.n	80039b2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	4798      	blx	r3
 800396a:	e022      	b.n	80039b2 <HAL_DMA_IRQHandler+0x29e>
 800396c:	20000000 	.word	0x20000000
 8003970:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10f      	bne.n	80039a2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f022 0210 	bic.w	r2, r2, #16
 8003990:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2201      	movs	r2, #1
 800399e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d003      	beq.n	80039b2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d032      	beq.n	8003a20 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039be:	f003 0301 	and.w	r3, r3, #1
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d022      	beq.n	8003a0c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2205      	movs	r2, #5
 80039ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f022 0201 	bic.w	r2, r2, #1
 80039dc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	3301      	adds	r3, #1
 80039e2:	60bb      	str	r3, [r7, #8]
 80039e4:	697a      	ldr	r2, [r7, #20]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d307      	bcc.n	80039fa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0301 	and.w	r3, r3, #1
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1f2      	bne.n	80039de <HAL_DMA_IRQHandler+0x2ca>
 80039f8:	e000      	b.n	80039fc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80039fa:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d005      	beq.n	8003a20 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	4798      	blx	r3
 8003a1c:	e000      	b.n	8003a20 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003a1e:	bf00      	nop
    }
  }
}
 8003a20:	3718      	adds	r7, #24
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop

08003a28 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b085      	sub	sp, #20
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]
 8003a34:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a44:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	683a      	ldr	r2, [r7, #0]
 8003a4c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	2b40      	cmp	r3, #64	; 0x40
 8003a54:	d108      	bne.n	8003a68 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68ba      	ldr	r2, [r7, #8]
 8003a64:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003a66:	e007      	b.n	8003a78 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68ba      	ldr	r2, [r7, #8]
 8003a6e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	60da      	str	r2, [r3, #12]
}
 8003a78:	bf00      	nop
 8003a7a:	3714      	adds	r7, #20
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b085      	sub	sp, #20
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	3b10      	subs	r3, #16
 8003a94:	4a13      	ldr	r2, [pc, #76]	; (8003ae4 <DMA_CalcBaseAndBitshift+0x60>)
 8003a96:	fba2 2303 	umull	r2, r3, r2, r3
 8003a9a:	091b      	lsrs	r3, r3, #4
 8003a9c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003a9e:	4a12      	ldr	r2, [pc, #72]	; (8003ae8 <DMA_CalcBaseAndBitshift+0x64>)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2b03      	cmp	r3, #3
 8003ab0:	d908      	bls.n	8003ac4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	4b0c      	ldr	r3, [pc, #48]	; (8003aec <DMA_CalcBaseAndBitshift+0x68>)
 8003aba:	4013      	ands	r3, r2
 8003abc:	1d1a      	adds	r2, r3, #4
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	659a      	str	r2, [r3, #88]	; 0x58
 8003ac2:	e006      	b.n	8003ad2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	461a      	mov	r2, r3
 8003aca:	4b08      	ldr	r3, [pc, #32]	; (8003aec <DMA_CalcBaseAndBitshift+0x68>)
 8003acc:	4013      	ands	r3, r2
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3714      	adds	r7, #20
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	aaaaaaab 	.word	0xaaaaaaab
 8003ae8:	0800a494 	.word	0x0800a494
 8003aec:	fffffc00 	.word	0xfffffc00

08003af0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003af8:	2300      	movs	r3, #0
 8003afa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b00:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d11f      	bne.n	8003b4a <DMA_CheckFifoParam+0x5a>
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	2b03      	cmp	r3, #3
 8003b0e:	d856      	bhi.n	8003bbe <DMA_CheckFifoParam+0xce>
 8003b10:	a201      	add	r2, pc, #4	; (adr r2, 8003b18 <DMA_CheckFifoParam+0x28>)
 8003b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b16:	bf00      	nop
 8003b18:	08003b29 	.word	0x08003b29
 8003b1c:	08003b3b 	.word	0x08003b3b
 8003b20:	08003b29 	.word	0x08003b29
 8003b24:	08003bbf 	.word	0x08003bbf
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d046      	beq.n	8003bc2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b38:	e043      	b.n	8003bc2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b42:	d140      	bne.n	8003bc6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b48:	e03d      	b.n	8003bc6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b52:	d121      	bne.n	8003b98 <DMA_CheckFifoParam+0xa8>
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	2b03      	cmp	r3, #3
 8003b58:	d837      	bhi.n	8003bca <DMA_CheckFifoParam+0xda>
 8003b5a:	a201      	add	r2, pc, #4	; (adr r2, 8003b60 <DMA_CheckFifoParam+0x70>)
 8003b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b60:	08003b71 	.word	0x08003b71
 8003b64:	08003b77 	.word	0x08003b77
 8003b68:	08003b71 	.word	0x08003b71
 8003b6c:	08003b89 	.word	0x08003b89
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	73fb      	strb	r3, [r7, #15]
      break;
 8003b74:	e030      	b.n	8003bd8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d025      	beq.n	8003bce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b86:	e022      	b.n	8003bce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b90:	d11f      	bne.n	8003bd2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003b96:	e01c      	b.n	8003bd2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d903      	bls.n	8003ba6 <DMA_CheckFifoParam+0xb6>
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	2b03      	cmp	r3, #3
 8003ba2:	d003      	beq.n	8003bac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003ba4:	e018      	b.n	8003bd8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	73fb      	strb	r3, [r7, #15]
      break;
 8003baa:	e015      	b.n	8003bd8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00e      	beq.n	8003bd6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	73fb      	strb	r3, [r7, #15]
      break;
 8003bbc:	e00b      	b.n	8003bd6 <DMA_CheckFifoParam+0xe6>
      break;
 8003bbe:	bf00      	nop
 8003bc0:	e00a      	b.n	8003bd8 <DMA_CheckFifoParam+0xe8>
      break;
 8003bc2:	bf00      	nop
 8003bc4:	e008      	b.n	8003bd8 <DMA_CheckFifoParam+0xe8>
      break;
 8003bc6:	bf00      	nop
 8003bc8:	e006      	b.n	8003bd8 <DMA_CheckFifoParam+0xe8>
      break;
 8003bca:	bf00      	nop
 8003bcc:	e004      	b.n	8003bd8 <DMA_CheckFifoParam+0xe8>
      break;
 8003bce:	bf00      	nop
 8003bd0:	e002      	b.n	8003bd8 <DMA_CheckFifoParam+0xe8>
      break;   
 8003bd2:	bf00      	nop
 8003bd4:	e000      	b.n	8003bd8 <DMA_CheckFifoParam+0xe8>
      break;
 8003bd6:	bf00      	nop
    }
  } 
  
  return status; 
 8003bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3714      	adds	r7, #20
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop

08003be8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003bfa:	4b27      	ldr	r3, [pc, #156]	; (8003c98 <HAL_FLASH_Program+0xb0>)
 8003bfc:	7d1b      	ldrb	r3, [r3, #20]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d101      	bne.n	8003c06 <HAL_FLASH_Program+0x1e>
 8003c02:	2302      	movs	r3, #2
 8003c04:	e043      	b.n	8003c8e <HAL_FLASH_Program+0xa6>
 8003c06:	4b24      	ldr	r3, [pc, #144]	; (8003c98 <HAL_FLASH_Program+0xb0>)
 8003c08:	2201      	movs	r2, #1
 8003c0a:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003c0c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003c10:	f000 f894 	bl	8003d3c <FLASH_WaitForLastOperation>
 8003c14:	4603      	mov	r3, r0
 8003c16:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8003c18:	7dfb      	ldrb	r3, [r7, #23]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d133      	bne.n	8003c86 <HAL_FLASH_Program+0x9e>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2b03      	cmp	r3, #3
 8003c22:	d823      	bhi.n	8003c6c <HAL_FLASH_Program+0x84>
 8003c24:	a201      	add	r2, pc, #4	; (adr r2, 8003c2c <HAL_FLASH_Program+0x44>)
 8003c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c2a:	bf00      	nop
 8003c2c:	08003c3d 	.word	0x08003c3d
 8003c30:	08003c49 	.word	0x08003c49
 8003c34:	08003c55 	.word	0x08003c55
 8003c38:	08003c61 	.word	0x08003c61
    switch(TypeProgram)
    {
      case FLASH_TYPEPROGRAM_BYTE :
      {
        /*Program byte (8-bit) at a specified address.*/
        FLASH_Program_Byte(Address, (uint8_t) Data);
 8003c3c:	783b      	ldrb	r3, [r7, #0]
 8003c3e:	4619      	mov	r1, r3
 8003c40:	68b8      	ldr	r0, [r7, #8]
 8003c42:	f000 f93d 	bl	8003ec0 <FLASH_Program_Byte>
        break;
 8003c46:	e012      	b.n	8003c6e <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_HALFWORD :
      {
        /*Program halfword (16-bit) at a specified address.*/
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8003c48:	883b      	ldrh	r3, [r7, #0]
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	68b8      	ldr	r0, [r7, #8]
 8003c4e:	f000 f911 	bl	8003e74 <FLASH_Program_HalfWord>
        break;
 8003c52:	e00c      	b.n	8003c6e <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_WORD :
      {
        /*Program word (32-bit) at a specified address.*/
        FLASH_Program_Word(Address, (uint32_t) Data);
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	4619      	mov	r1, r3
 8003c58:	68b8      	ldr	r0, [r7, #8]
 8003c5a:	f000 f8e5 	bl	8003e28 <FLASH_Program_Word>
        break;
 8003c5e:	e006      	b.n	8003c6e <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_DOUBLEWORD :
      {
        /*Program double word (64-bit) at a specified address.*/
        FLASH_Program_DoubleWord(Address, Data);
 8003c60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c64:	68b8      	ldr	r0, [r7, #8]
 8003c66:	f000 f8a9 	bl	8003dbc <FLASH_Program_DoubleWord>
        break;
 8003c6a:	e000      	b.n	8003c6e <HAL_FLASH_Program+0x86>
      }
      default :
        break;
 8003c6c:	bf00      	nop
    }
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003c6e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003c72:	f000 f863 	bl	8003d3c <FLASH_WaitForLastOperation>
 8003c76:	4603      	mov	r3, r0
 8003c78:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8003c7a:	4b08      	ldr	r3, [pc, #32]	; (8003c9c <HAL_FLASH_Program+0xb4>)
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	4a07      	ldr	r2, [pc, #28]	; (8003c9c <HAL_FLASH_Program+0xb4>)
 8003c80:	f023 0301 	bic.w	r3, r3, #1
 8003c84:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003c86:	4b04      	ldr	r3, [pc, #16]	; (8003c98 <HAL_FLASH_Program+0xb0>)
 8003c88:	2200      	movs	r2, #0
 8003c8a:	751a      	strb	r2, [r3, #20]

  return status;
 8003c8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3718      	adds	r7, #24
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	2000090c 	.word	0x2000090c
 8003c9c:	40023c00 	.word	0x40023c00

08003ca0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003caa:	4b0b      	ldr	r3, [pc, #44]	; (8003cd8 <HAL_FLASH_Unlock+0x38>)
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	da0b      	bge.n	8003cca <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003cb2:	4b09      	ldr	r3, [pc, #36]	; (8003cd8 <HAL_FLASH_Unlock+0x38>)
 8003cb4:	4a09      	ldr	r2, [pc, #36]	; (8003cdc <HAL_FLASH_Unlock+0x3c>)
 8003cb6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003cb8:	4b07      	ldr	r3, [pc, #28]	; (8003cd8 <HAL_FLASH_Unlock+0x38>)
 8003cba:	4a09      	ldr	r2, [pc, #36]	; (8003ce0 <HAL_FLASH_Unlock+0x40>)
 8003cbc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003cbe:	4b06      	ldr	r3, [pc, #24]	; (8003cd8 <HAL_FLASH_Unlock+0x38>)
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	da01      	bge.n	8003cca <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003cca:	79fb      	ldrb	r3, [r7, #7]
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr
 8003cd8:	40023c00 	.word	0x40023c00
 8003cdc:	45670123 	.word	0x45670123
 8003ce0:	cdef89ab 	.word	0xcdef89ab

08003ce4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8003ce8:	4b05      	ldr	r3, [pc, #20]	; (8003d00 <HAL_FLASH_Lock+0x1c>)
 8003cea:	691b      	ldr	r3, [r3, #16]
 8003cec:	4a04      	ldr	r2, [pc, #16]	; (8003d00 <HAL_FLASH_Lock+0x1c>)
 8003cee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003cf2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr
 8003d00:	40023c00 	.word	0x40023c00

08003d04 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8003d04:	b480      	push	{r7}
 8003d06:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 8003d08:	4b09      	ldr	r3, [pc, #36]	; (8003d30 <HAL_FLASH_OB_Unlock+0x2c>)
 8003d0a:	695b      	ldr	r3, [r3, #20]
 8003d0c:	f003 0301 	and.w	r3, r3, #1
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d007      	beq.n	8003d24 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 8003d14:	4b06      	ldr	r3, [pc, #24]	; (8003d30 <HAL_FLASH_OB_Unlock+0x2c>)
 8003d16:	4a07      	ldr	r2, [pc, #28]	; (8003d34 <HAL_FLASH_OB_Unlock+0x30>)
 8003d18:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 8003d1a:	4b05      	ldr	r3, [pc, #20]	; (8003d30 <HAL_FLASH_OB_Unlock+0x2c>)
 8003d1c:	4a06      	ldr	r2, [pc, #24]	; (8003d38 <HAL_FLASH_OB_Unlock+0x34>)
 8003d1e:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 8003d20:	2300      	movs	r3, #0
 8003d22:	e000      	b.n	8003d26 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr
 8003d30:	40023c00 	.word	0x40023c00
 8003d34:	08192a3b 	.word	0x08192a3b
 8003d38:	4c5d6e7f 	.word	0x4c5d6e7f

08003d3c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003d44:	2300      	movs	r3, #0
 8003d46:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003d48:	4b1a      	ldr	r3, [pc, #104]	; (8003db4 <FLASH_WaitForLastOperation+0x78>)
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	619a      	str	r2, [r3, #24]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8003d4e:	f7ff f993 	bl	8003078 <HAL_GetTick>
 8003d52:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003d54:	e010      	b.n	8003d78 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d5c:	d00c      	beq.n	8003d78 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d007      	beq.n	8003d74 <FLASH_WaitForLastOperation+0x38>
 8003d64:	f7ff f988 	bl	8003078 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d201      	bcs.n	8003d78 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e019      	b.n	8003dac <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003d78:	4b0f      	ldr	r3, [pc, #60]	; (8003db8 <FLASH_WaitForLastOperation+0x7c>)
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1e8      	bne.n	8003d56 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 8003d84:	4b0c      	ldr	r3, [pc, #48]	; (8003db8 <FLASH_WaitForLastOperation+0x7c>)
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d003      	beq.n	8003d98 <FLASH_WaitForLastOperation+0x5c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003d90:	f000 f8ba 	bl	8003f08 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e009      	b.n	8003dac <FLASH_WaitForLastOperation+0x70>
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8003d98:	4b07      	ldr	r3, [pc, #28]	; (8003db8 <FLASH_WaitForLastOperation+0x7c>)
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	f003 0301 	and.w	r3, r3, #1
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d002      	beq.n	8003daa <FLASH_WaitForLastOperation+0x6e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003da4:	4b04      	ldr	r3, [pc, #16]	; (8003db8 <FLASH_WaitForLastOperation+0x7c>)
 8003da6:	2201      	movs	r2, #1
 8003da8:	60da      	str	r2, [r3, #12]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
  
}  
 8003dac:	4618      	mov	r0, r3
 8003dae:	3710      	adds	r7, #16
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	2000090c 	.word	0x2000090c
 8003db8:	40023c00 	.word	0x40023c00

08003dbc <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8003dc8:	4b16      	ldr	r3, [pc, #88]	; (8003e24 <FLASH_Program_DoubleWord+0x68>)
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	4a15      	ldr	r2, [pc, #84]	; (8003e24 <FLASH_Program_DoubleWord+0x68>)
 8003dce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dd2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8003dd4:	4b13      	ldr	r3, [pc, #76]	; (8003e24 <FLASH_Program_DoubleWord+0x68>)
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	4a12      	ldr	r2, [pc, #72]	; (8003e24 <FLASH_Program_DoubleWord+0x68>)
 8003dda:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003dde:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003de0:	4b10      	ldr	r3, [pc, #64]	; (8003e24 <FLASH_Program_DoubleWord+0x68>)
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	4a0f      	ldr	r2, [pc, #60]	; (8003e24 <FLASH_Program_DoubleWord+0x68>)
 8003de6:	f043 0301 	orr.w	r3, r3, #1
 8003dea:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8003df2:	f3bf 8f6f 	isb	sy
}
 8003df6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8003df8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003dfc:	f04f 0200 	mov.w	r2, #0
 8003e00:	f04f 0300 	mov.w	r3, #0
 8003e04:	000a      	movs	r2, r1
 8003e06:	2300      	movs	r3, #0
 8003e08:	68f9      	ldr	r1, [r7, #12]
 8003e0a:	3104      	adds	r1, #4
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	600b      	str	r3, [r1, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003e10:	f3bf 8f4f 	dsb	sy
}
 8003e14:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8003e16:	bf00      	nop
 8003e18:	3714      	adds	r7, #20
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	40023c00 	.word	0x40023c00

08003e28 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8003e32:	4b0f      	ldr	r3, [pc, #60]	; (8003e70 <FLASH_Program_Word+0x48>)
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	4a0e      	ldr	r2, [pc, #56]	; (8003e70 <FLASH_Program_Word+0x48>)
 8003e38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e3c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8003e3e:	4b0c      	ldr	r3, [pc, #48]	; (8003e70 <FLASH_Program_Word+0x48>)
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	4a0b      	ldr	r2, [pc, #44]	; (8003e70 <FLASH_Program_Word+0x48>)
 8003e44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e48:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003e4a:	4b09      	ldr	r3, [pc, #36]	; (8003e70 <FLASH_Program_Word+0x48>)
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	4a08      	ldr	r2, [pc, #32]	; (8003e70 <FLASH_Program_Word+0x48>)
 8003e50:	f043 0301 	orr.w	r3, r3, #1
 8003e54:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	683a      	ldr	r2, [r7, #0]
 8003e5a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003e5c:	f3bf 8f4f 	dsb	sy
}
 8003e60:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8003e62:	bf00      	nop
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	40023c00 	.word	0x40023c00

08003e74 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8003e80:	4b0e      	ldr	r3, [pc, #56]	; (8003ebc <FLASH_Program_HalfWord+0x48>)
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	4a0d      	ldr	r2, [pc, #52]	; (8003ebc <FLASH_Program_HalfWord+0x48>)
 8003e86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e8a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8003e8c:	4b0b      	ldr	r3, [pc, #44]	; (8003ebc <FLASH_Program_HalfWord+0x48>)
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	4a0a      	ldr	r2, [pc, #40]	; (8003ebc <FLASH_Program_HalfWord+0x48>)
 8003e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e96:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003e98:	4b08      	ldr	r3, [pc, #32]	; (8003ebc <FLASH_Program_HalfWord+0x48>)
 8003e9a:	691b      	ldr	r3, [r3, #16]
 8003e9c:	4a07      	ldr	r2, [pc, #28]	; (8003ebc <FLASH_Program_HalfWord+0x48>)
 8003e9e:	f043 0301 	orr.w	r3, r3, #1
 8003ea2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	887a      	ldrh	r2, [r7, #2]
 8003ea8:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003eaa:	f3bf 8f4f 	dsb	sy
}
 8003eae:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
  
}
 8003eb0:	bf00      	nop
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr
 8003ebc:	40023c00 	.word	0x40023c00

08003ec0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	460b      	mov	r3, r1
 8003eca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8003ecc:	4b0d      	ldr	r3, [pc, #52]	; (8003f04 <FLASH_Program_Byte+0x44>)
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	4a0c      	ldr	r2, [pc, #48]	; (8003f04 <FLASH_Program_Byte+0x44>)
 8003ed2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ed6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8003ed8:	4b0a      	ldr	r3, [pc, #40]	; (8003f04 <FLASH_Program_Byte+0x44>)
 8003eda:	4a0a      	ldr	r2, [pc, #40]	; (8003f04 <FLASH_Program_Byte+0x44>)
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003ee0:	4b08      	ldr	r3, [pc, #32]	; (8003f04 <FLASH_Program_Byte+0x44>)
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	4a07      	ldr	r2, [pc, #28]	; (8003f04 <FLASH_Program_Byte+0x44>)
 8003ee6:	f043 0301 	orr.w	r3, r3, #1
 8003eea:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	78fa      	ldrb	r2, [r7, #3]
 8003ef0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003ef2:	f3bf 8f4f 	dsb	sy
}
 8003ef6:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8003ef8:	bf00      	nop
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr
 8003f04:	40023c00 	.word	0x40023c00

08003f08 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8003f0c:	4b21      	ldr	r3, [pc, #132]	; (8003f94 <FLASH_SetErrorCode+0x8c>)
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	f003 0302 	and.w	r3, r3, #2
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d005      	beq.n	8003f24 <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8003f18:	4b1f      	ldr	r3, [pc, #124]	; (8003f98 <FLASH_SetErrorCode+0x90>)
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	f043 0320 	orr.w	r3, r3, #32
 8003f20:	4a1d      	ldr	r2, [pc, #116]	; (8003f98 <FLASH_SetErrorCode+0x90>)
 8003f22:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8003f24:	4b1b      	ldr	r3, [pc, #108]	; (8003f94 <FLASH_SetErrorCode+0x8c>)
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	f003 0310 	and.w	r3, r3, #16
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d005      	beq.n	8003f3c <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003f30:	4b19      	ldr	r3, [pc, #100]	; (8003f98 <FLASH_SetErrorCode+0x90>)
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	f043 0310 	orr.w	r3, r3, #16
 8003f38:	4a17      	ldr	r2, [pc, #92]	; (8003f98 <FLASH_SetErrorCode+0x90>)
 8003f3a:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8003f3c:	4b15      	ldr	r3, [pc, #84]	; (8003f94 <FLASH_SetErrorCode+0x8c>)
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	f003 0320 	and.w	r3, r3, #32
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d005      	beq.n	8003f54 <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003f48:	4b13      	ldr	r3, [pc, #76]	; (8003f98 <FLASH_SetErrorCode+0x90>)
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	f043 0308 	orr.w	r3, r3, #8
 8003f50:	4a11      	ldr	r2, [pc, #68]	; (8003f98 <FLASH_SetErrorCode+0x90>)
 8003f52:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8003f54:	4b0f      	ldr	r3, [pc, #60]	; (8003f94 <FLASH_SetErrorCode+0x8c>)
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d005      	beq.n	8003f6c <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8003f60:	4b0d      	ldr	r3, [pc, #52]	; (8003f98 <FLASH_SetErrorCode+0x90>)
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	f043 0304 	orr.w	r3, r3, #4
 8003f68:	4a0b      	ldr	r2, [pc, #44]	; (8003f98 <FLASH_SetErrorCode+0x90>)
 8003f6a:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 8003f6c:	4b09      	ldr	r3, [pc, #36]	; (8003f94 <FLASH_SetErrorCode+0x8c>)
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d005      	beq.n	8003f84 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 8003f78:	4b07      	ldr	r3, [pc, #28]	; (8003f98 <FLASH_SetErrorCode+0x90>)
 8003f7a:	699b      	ldr	r3, [r3, #24]
 8003f7c:	f043 0302 	orr.w	r3, r3, #2
 8003f80:	4a05      	ldr	r2, [pc, #20]	; (8003f98 <FLASH_SetErrorCode+0x90>)
 8003f82:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8003f84:	4b03      	ldr	r3, [pc, #12]	; (8003f94 <FLASH_SetErrorCode+0x8c>)
 8003f86:	22f2      	movs	r2, #242	; 0xf2
 8003f88:	60da      	str	r2, [r3, #12]
}
 8003f8a:	bf00      	nop
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr
 8003f94:	40023c00 	.word	0x40023c00
 8003f98:	2000090c 	.word	0x2000090c

08003f9c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0;
 8003faa:	2300      	movs	r3, #0
 8003fac:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003fae:	4b30      	ldr	r3, [pc, #192]	; (8004070 <HAL_FLASHEx_Erase+0xd4>)
 8003fb0:	7d1b      	ldrb	r3, [r3, #20]
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d101      	bne.n	8003fba <HAL_FLASHEx_Erase+0x1e>
 8003fb6:	2302      	movs	r3, #2
 8003fb8:	e056      	b.n	8004068 <HAL_FLASHEx_Erase+0xcc>
 8003fba:	4b2d      	ldr	r3, [pc, #180]	; (8004070 <HAL_FLASHEx_Erase+0xd4>)
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003fc0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003fc4:	f7ff feba 	bl	8003d3c <FLASH_WaitForLastOperation>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8003fcc:	7bfb      	ldrb	r3, [r7, #15]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d146      	bne.n	8004060 <HAL_FLASHEx_Erase+0xc4>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8003fd8:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d115      	bne.n	800400e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
#if defined (FLASH_OPTCR_nDBANK)      
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	b2da      	uxtb	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	4619      	mov	r1, r3
 8003fee:	4610      	mov	r0, r2
 8003ff0:	f000 f870 	bl	80040d4 <FLASH_MassErase>
#else
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange);      
#endif /* FLASH_OPTCR_nDBANK */
                      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003ff4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003ff8:	f7ff fea0 	bl	8003d3c <FLASH_WaitForLastOperation>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8004000:	4b1c      	ldr	r3, [pc, #112]	; (8004074 <HAL_FLASHEx_Erase+0xd8>)
 8004002:	691a      	ldr	r2, [r3, #16]
 8004004:	491b      	ldr	r1, [pc, #108]	; (8004074 <HAL_FLASHEx_Erase+0xd8>)
 8004006:	4b1c      	ldr	r3, [pc, #112]	; (8004078 <HAL_FLASHEx_Erase+0xdc>)
 8004008:	4013      	ands	r3, r2
 800400a:	610b      	str	r3, [r1, #16]
 800400c:	e028      	b.n	8004060 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	60bb      	str	r3, [r7, #8]
 8004014:	e01c      	b.n	8004050 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	b2db      	uxtb	r3, r3
 800401c:	4619      	mov	r1, r3
 800401e:	68b8      	ldr	r0, [r7, #8]
 8004020:	f000 f894 	bl	800414c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004024:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004028:	f7ff fe88 	bl	8003d3c <FLASH_WaitForLastOperation>
 800402c:	4603      	mov	r3, r0
 800402e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER Bit and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 8004030:	4b10      	ldr	r3, [pc, #64]	; (8004074 <HAL_FLASHEx_Erase+0xd8>)
 8004032:	691b      	ldr	r3, [r3, #16]
 8004034:	4a0f      	ldr	r2, [pc, #60]	; (8004074 <HAL_FLASHEx_Erase+0xd8>)
 8004036:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800403a:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 800403c:	7bfb      	ldrb	r3, [r7, #15]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d003      	beq.n	800404a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	68ba      	ldr	r2, [r7, #8]
 8004046:	601a      	str	r2, [r3, #0]
          break;
 8004048:	e00a      	b.n	8004060 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	3301      	adds	r3, #1
 800404e:	60bb      	str	r3, [r7, #8]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	68da      	ldr	r2, [r3, #12]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	4413      	add	r3, r2
 800405a:	68ba      	ldr	r2, [r7, #8]
 800405c:	429a      	cmp	r2, r3
 800405e:	d3da      	bcc.n	8004016 <HAL_FLASHEx_Erase+0x7a>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004060:	4b03      	ldr	r3, [pc, #12]	; (8004070 <HAL_FLASHEx_Erase+0xd4>)
 8004062:	2200      	movs	r2, #0
 8004064:	751a      	strb	r2, [r3, #20]

  return status;
 8004066:	7bfb      	ldrb	r3, [r7, #15]
}
 8004068:	4618      	mov	r0, r3
 800406a:	3710      	adds	r7, #16
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	2000090c 	.word	0x2000090c
 8004074:	40023c00 	.word	0x40023c00
 8004078:	ffff7ffb 	.word	0xffff7ffb

0800407c <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  * 
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER |\
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	223f      	movs	r2, #63	; 0x3f
 8004088:	601a      	str	r2, [r3, #0]
	                OPTIONBYTE_BOR | OPTIONBYTE_BOOTADDR_0 | OPTIONBYTE_BOOTADDR_1;

  /*Get WRP*/
  pOBInit->WRPSector = FLASH_OB_GetWRP();
 800408a:	f000 f8b1 	bl	80041f0 <FLASH_OB_GetWRP>
 800408e:	4602      	mov	r2, r0
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 8004094:	f000 f8cc 	bl	8004230 <FLASH_OB_GetRDP>
 8004098:	4603      	mov	r3, r0
 800409a:	461a      	mov	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	60da      	str	r2, [r3, #12]

  /*Get USER*/
  pOBInit->USERConfig = FLASH_OB_GetUser();
 80040a0:	f000 f8b6 	bl	8004210 <FLASH_OB_GetUser>
 80040a4:	4602      	mov	r2, r0
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	615a      	str	r2, [r3, #20]

  /*Get BOR Level*/
  pOBInit->BORLevel = FLASH_OB_GetBOR();
 80040aa:	f000 f8e1 	bl	8004270 <FLASH_OB_GetBOR>
 80040ae:	4602      	mov	r2, r0
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	611a      	str	r2, [r3, #16]
  
  /*Get Boot Address when Boot pin = 0 */
  pOBInit->BootAddr0 = FLASH_OB_GetBootAddress(OPTIONBYTE_BOOTADDR_0);
 80040b4:	2010      	movs	r0, #16
 80040b6:	f000 f8e9 	bl	800428c <FLASH_OB_GetBootAddress>
 80040ba:	4602      	mov	r2, r0
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	619a      	str	r2, [r3, #24]
  
  /*Get Boot Address when Boot pin = 1 */
  pOBInit->BootAddr1 = FLASH_OB_GetBootAddress(OPTIONBYTE_BOOTADDR_1);
 80040c0:	2020      	movs	r0, #32
 80040c2:	f000 f8e3 	bl	800428c <FLASH_OB_GetBootAddress>
 80040c6:	4602      	mov	r2, r0
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	61da      	str	r2, [r3, #28]
  pOBInit->PCROPSector = FLASH_OB_GetPCROP();
  
  /*Get PCROP_RDP Value */
  pOBInit->PCROPRdp = FLASH_OB_GetPCROPRDP();
#endif /* FLASH_OPTCR2_PCROP */
}
 80040cc:	bf00      	nop
 80040ce:	3708      	adds	r7, #8
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	4603      	mov	r3, r0
 80040dc:	6039      	str	r1, [r7, #0]
 80040de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
 80040e0:	4b19      	ldr	r3, [pc, #100]	; (8004148 <FLASH_MassErase+0x74>)
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	4a18      	ldr	r2, [pc, #96]	; (8004148 <FLASH_MassErase+0x74>)
 80040e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040ea:	6113      	str	r3, [r2, #16]
  if(Banks == FLASH_BANK_BOTH)
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	2b03      	cmp	r3, #3
 80040f0:	d107      	bne.n	8004102 <FLASH_MassErase+0x2e>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 80040f2:	4b15      	ldr	r3, [pc, #84]	; (8004148 <FLASH_MassErase+0x74>)
 80040f4:	691a      	ldr	r2, [r3, #16]
 80040f6:	4914      	ldr	r1, [pc, #80]	; (8004148 <FLASH_MassErase+0x74>)
 80040f8:	f248 0304 	movw	r3, #32772	; 0x8004
 80040fc:	4313      	orrs	r3, r2
 80040fe:	610b      	str	r3, [r1, #16]
 8004100:	e00f      	b.n	8004122 <FLASH_MassErase+0x4e>
  }
  else if(Banks == FLASH_BANK_2)
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	2b02      	cmp	r3, #2
 8004106:	d106      	bne.n	8004116 <FLASH_MassErase+0x42>
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8004108:	4b0f      	ldr	r3, [pc, #60]	; (8004148 <FLASH_MassErase+0x74>)
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	4a0e      	ldr	r2, [pc, #56]	; (8004148 <FLASH_MassErase+0x74>)
 800410e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004112:	6113      	str	r3, [r2, #16]
 8004114:	e005      	b.n	8004122 <FLASH_MassErase+0x4e>
  }
  else
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;    
 8004116:	4b0c      	ldr	r3, [pc, #48]	; (8004148 <FLASH_MassErase+0x74>)
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	4a0b      	ldr	r2, [pc, #44]	; (8004148 <FLASH_MassErase+0x74>)
 800411c:	f043 0304 	orr.w	r3, r3, #4
 8004120:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 8004122:	4b09      	ldr	r3, [pc, #36]	; (8004148 <FLASH_MassErase+0x74>)
 8004124:	691a      	ldr	r2, [r3, #16]
 8004126:	79fb      	ldrb	r3, [r7, #7]
 8004128:	021b      	lsls	r3, r3, #8
 800412a:	4313      	orrs	r3, r2
 800412c:	4a06      	ldr	r2, [pc, #24]	; (8004148 <FLASH_MassErase+0x74>)
 800412e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004132:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8004134:	f3bf 8f4f 	dsb	sy
}
 8004138:	bf00      	nop
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800413a:	bf00      	nop
 800413c:	370c      	adds	r7, #12
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	40023c00 	.word	0x40023c00

0800414c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	460b      	mov	r3, r1
 8004156:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0;
 8004158:	2300      	movs	r3, #0
 800415a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800415c:	78fb      	ldrb	r3, [r7, #3]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d102      	bne.n	8004168 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8004162:	2300      	movs	r3, #0
 8004164:	60fb      	str	r3, [r7, #12]
 8004166:	e010      	b.n	800418a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8004168:	78fb      	ldrb	r3, [r7, #3]
 800416a:	2b01      	cmp	r3, #1
 800416c:	d103      	bne.n	8004176 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800416e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004172:	60fb      	str	r3, [r7, #12]
 8004174:	e009      	b.n	800418a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8004176:	78fb      	ldrb	r3, [r7, #3]
 8004178:	2b02      	cmp	r3, #2
 800417a:	d103      	bne.n	8004184 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800417c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004180:	60fb      	str	r3, [r7, #12]
 8004182:	e002      	b.n	800418a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004184:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004188:	60fb      	str	r3, [r7, #12]
  }
  
  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if(Sector > FLASH_SECTOR_11) 
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2b0b      	cmp	r3, #11
 800418e:	d902      	bls.n	8004196 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	3304      	adds	r3, #4
 8004194:	607b      	str	r3, [r7, #4]
  }  

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 8004196:	4b15      	ldr	r3, [pc, #84]	; (80041ec <FLASH_Erase_Sector+0xa0>)
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	4a14      	ldr	r2, [pc, #80]	; (80041ec <FLASH_Erase_Sector+0xa0>)
 800419c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041a0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80041a2:	4b12      	ldr	r3, [pc, #72]	; (80041ec <FLASH_Erase_Sector+0xa0>)
 80041a4:	691a      	ldr	r2, [r3, #16]
 80041a6:	4911      	ldr	r1, [pc, #68]	; (80041ec <FLASH_Erase_Sector+0xa0>)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80041ae:	4b0f      	ldr	r3, [pc, #60]	; (80041ec <FLASH_Erase_Sector+0xa0>)
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	4a0e      	ldr	r2, [pc, #56]	; (80041ec <FLASH_Erase_Sector+0xa0>)
 80041b4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80041b8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80041ba:	4b0c      	ldr	r3, [pc, #48]	; (80041ec <FLASH_Erase_Sector+0xa0>)
 80041bc:	691a      	ldr	r2, [r3, #16]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	00db      	lsls	r3, r3, #3
 80041c2:	4313      	orrs	r3, r2
 80041c4:	4a09      	ldr	r2, [pc, #36]	; (80041ec <FLASH_Erase_Sector+0xa0>)
 80041c6:	f043 0302 	orr.w	r3, r3, #2
 80041ca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80041cc:	4b07      	ldr	r3, [pc, #28]	; (80041ec <FLASH_Erase_Sector+0xa0>)
 80041ce:	691b      	ldr	r3, [r3, #16]
 80041d0:	4a06      	ldr	r2, [pc, #24]	; (80041ec <FLASH_Erase_Sector+0xa0>)
 80041d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041d6:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 80041d8:	f3bf 8f4f 	dsb	sy
}
 80041dc:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80041de:	bf00      	nop
 80041e0:	3714      	adds	r7, #20
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	40023c00 	.word	0x40023c00

080041f0 <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint32_t FLASH Write Protection Option Bytes value
  */
static uint32_t FLASH_OB_GetWRP(void)
{
 80041f0:	b480      	push	{r7}
 80041f2:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return ((uint32_t)(FLASH->OPTCR & 0x0FFF0000));
 80041f4:	4b04      	ldr	r3, [pc, #16]	; (8004208 <FLASH_OB_GetWRP+0x18>)
 80041f6:	695a      	ldr	r2, [r3, #20]
 80041f8:	4b04      	ldr	r3, [pc, #16]	; (800420c <FLASH_OB_GetWRP+0x1c>)
 80041fa:	4013      	ands	r3, r2
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	40023c00 	.word	0x40023c00
 800420c:	0fff0000 	.word	0x0fff0000

08004210 <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint32_t FLASH User Option Bytes values: WWDG_SW(Bit4), IWDG_SW(Bit5), nRST_STOP(Bit6), 
  *         nRST_STDBY(Bit7), nDBOOT(Bit28), nDBANK(Bit29), IWDG_STDBY(Bit30) and IWDG_STOP(Bit31).
  */
static uint32_t FLASH_OB_GetUser(void)
{
 8004210:	b480      	push	{r7}
 8004212:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint32_t)(FLASH->OPTCR & 0xF00000F0U));
 8004214:	4b04      	ldr	r3, [pc, #16]	; (8004228 <FLASH_OB_GetUser+0x18>)
 8004216:	695a      	ldr	r2, [r3, #20]
 8004218:	4b04      	ldr	r3, [pc, #16]	; (800422c <FLASH_OB_GetUser+0x1c>)
 800421a:	4013      	ands	r3, r2
}
 800421c:	4618      	mov	r0, r3
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	40023c00 	.word	0x40023c00
 800422c:	f00000f0 	.word	0xf00000f0

08004230 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
 8004236:	23aa      	movs	r3, #170	; 0xaa
 8004238:	71fb      	strb	r3, [r7, #7]
  
  if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS)) == OB_RDP_LEVEL_0)
 800423a:	4b0c      	ldr	r3, [pc, #48]	; (800426c <FLASH_OB_GetRDP+0x3c>)
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	b2db      	uxtb	r3, r3
 8004240:	2baa      	cmp	r3, #170	; 0xaa
 8004242:	d102      	bne.n	800424a <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_0;
 8004244:	23aa      	movs	r3, #170	; 0xaa
 8004246:	71fb      	strb	r3, [r7, #7]
 8004248:	e009      	b.n	800425e <FLASH_OB_GetRDP+0x2e>
  }
  else if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS)) == OB_RDP_LEVEL_2)
 800424a:	4b08      	ldr	r3, [pc, #32]	; (800426c <FLASH_OB_GetRDP+0x3c>)
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	b2db      	uxtb	r3, r3
 8004250:	2bcc      	cmp	r3, #204	; 0xcc
 8004252:	d102      	bne.n	800425a <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_2;
 8004254:	23cc      	movs	r3, #204	; 0xcc
 8004256:	71fb      	strb	r3, [r7, #7]
 8004258:	e001      	b.n	800425e <FLASH_OB_GetRDP+0x2e>
  }
  else 
  {
    readstatus = OB_RDP_LEVEL_1;
 800425a:	2355      	movs	r3, #85	; 0x55
 800425c:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
 800425e:	79fb      	ldrb	r3, [r7, #7]
}
 8004260:	4618      	mov	r0, r3
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr
 800426c:	40023c15 	.word	0x40023c15

08004270 <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
  */
static uint32_t FLASH_OB_GetBOR(void)
{
 8004270:	b480      	push	{r7}
 8004272:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return ((uint32_t)(FLASH->OPTCR & 0x0C));
 8004274:	4b04      	ldr	r3, [pc, #16]	; (8004288 <FLASH_OB_GetBOR+0x18>)
 8004276:	695b      	ldr	r3, [r3, #20]
 8004278:	f003 030c 	and.w	r3, r3, #12
}
 800427c:	4618      	mov	r0, r3
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	40023c00 	.word	0x40023c00

0800428c <FLASH_OB_GetBootAddress>:
  *            - OB_BOOTADDR_DTCM_RAM : Boot from DTCM RAM (0x20000000)                 
  *            - OB_BOOTADDR_SRAM1 : Boot from SRAM1 (0x20010000)                    
  *            - OB_BOOTADDR_SRAM2 : Boot from SRAM2 (0x2004C000) 
  */
static uint32_t FLASH_OB_GetBootAddress(uint32_t BootOption)
{  
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  uint32_t Address = 0;
 8004294:	2300      	movs	r3, #0
 8004296:	60fb      	str	r3, [r7, #12]
    
	/* Return the Boot base Address */
  if(BootOption == OPTIONBYTE_BOOTADDR_0)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2b10      	cmp	r3, #16
 800429c:	d104      	bne.n	80042a8 <FLASH_OB_GetBootAddress+0x1c>
  {			
    Address = FLASH->OPTCR1 & FLASH_OPTCR1_BOOT_ADD0;
 800429e:	4b08      	ldr	r3, [pc, #32]	; (80042c0 <FLASH_OB_GetBootAddress+0x34>)
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	60fb      	str	r3, [r7, #12]
 80042a6:	e004      	b.n	80042b2 <FLASH_OB_GetBootAddress+0x26>
	}
  else
	{
		Address = ((FLASH->OPTCR1 & FLASH_OPTCR1_BOOT_ADD1) >> 16);
 80042a8:	4b05      	ldr	r3, [pc, #20]	; (80042c0 <FLASH_OB_GetBootAddress+0x34>)
 80042aa:	699b      	ldr	r3, [r3, #24]
 80042ac:	0c1b      	lsrs	r3, r3, #16
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	60fb      	str	r3, [r7, #12]
	}

  return Address;
 80042b2:	68fb      	ldr	r3, [r7, #12]
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3714      	adds	r7, #20
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr
 80042c0:	40023c00 	.word	0x40023c00

080042c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b089      	sub	sp, #36	; 0x24
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80042ce:	2300      	movs	r3, #0
 80042d0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80042d2:	2300      	movs	r3, #0
 80042d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80042d6:	2300      	movs	r3, #0
 80042d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80042da:	2300      	movs	r3, #0
 80042dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80042de:	2300      	movs	r3, #0
 80042e0:	61fb      	str	r3, [r7, #28]
 80042e2:	e175      	b.n	80045d0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80042e4:	2201      	movs	r2, #1
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	4013      	ands	r3, r2
 80042f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80042f8:	693a      	ldr	r2, [r7, #16]
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	f040 8164 	bne.w	80045ca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	2b01      	cmp	r3, #1
 8004308:	d00b      	beq.n	8004322 <HAL_GPIO_Init+0x5e>
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	2b02      	cmp	r3, #2
 8004310:	d007      	beq.n	8004322 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004316:	2b11      	cmp	r3, #17
 8004318:	d003      	beq.n	8004322 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	2b12      	cmp	r3, #18
 8004320:	d130      	bne.n	8004384 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	005b      	lsls	r3, r3, #1
 800432c:	2203      	movs	r2, #3
 800432e:	fa02 f303 	lsl.w	r3, r2, r3
 8004332:	43db      	mvns	r3, r3
 8004334:	69ba      	ldr	r2, [r7, #24]
 8004336:	4013      	ands	r3, r2
 8004338:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	68da      	ldr	r2, [r3, #12]
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	005b      	lsls	r3, r3, #1
 8004342:	fa02 f303 	lsl.w	r3, r2, r3
 8004346:	69ba      	ldr	r2, [r7, #24]
 8004348:	4313      	orrs	r3, r2
 800434a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	69ba      	ldr	r2, [r7, #24]
 8004350:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004358:	2201      	movs	r2, #1
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	fa02 f303 	lsl.w	r3, r2, r3
 8004360:	43db      	mvns	r3, r3
 8004362:	69ba      	ldr	r2, [r7, #24]
 8004364:	4013      	ands	r3, r2
 8004366:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	091b      	lsrs	r3, r3, #4
 800436e:	f003 0201 	and.w	r2, r3, #1
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	fa02 f303 	lsl.w	r3, r2, r3
 8004378:	69ba      	ldr	r2, [r7, #24]
 800437a:	4313      	orrs	r3, r2
 800437c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	69ba      	ldr	r2, [r7, #24]
 8004382:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	005b      	lsls	r3, r3, #1
 800438e:	2203      	movs	r2, #3
 8004390:	fa02 f303 	lsl.w	r3, r2, r3
 8004394:	43db      	mvns	r3, r3
 8004396:	69ba      	ldr	r2, [r7, #24]
 8004398:	4013      	ands	r3, r2
 800439a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	689a      	ldr	r2, [r3, #8]
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	005b      	lsls	r3, r3, #1
 80043a4:	fa02 f303 	lsl.w	r3, r2, r3
 80043a8:	69ba      	ldr	r2, [r7, #24]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	69ba      	ldr	r2, [r7, #24]
 80043b2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d003      	beq.n	80043c4 <HAL_GPIO_Init+0x100>
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	2b12      	cmp	r3, #18
 80043c2:	d123      	bne.n	800440c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	08da      	lsrs	r2, r3, #3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	3208      	adds	r2, #8
 80043cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	f003 0307 	and.w	r3, r3, #7
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	220f      	movs	r2, #15
 80043dc:	fa02 f303 	lsl.w	r3, r2, r3
 80043e0:	43db      	mvns	r3, r3
 80043e2:	69ba      	ldr	r2, [r7, #24]
 80043e4:	4013      	ands	r3, r2
 80043e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	691a      	ldr	r2, [r3, #16]
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	f003 0307 	and.w	r3, r3, #7
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	fa02 f303 	lsl.w	r3, r2, r3
 80043f8:	69ba      	ldr	r2, [r7, #24]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	08da      	lsrs	r2, r3, #3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	3208      	adds	r2, #8
 8004406:	69b9      	ldr	r1, [r7, #24]
 8004408:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	005b      	lsls	r3, r3, #1
 8004416:	2203      	movs	r2, #3
 8004418:	fa02 f303 	lsl.w	r3, r2, r3
 800441c:	43db      	mvns	r3, r3
 800441e:	69ba      	ldr	r2, [r7, #24]
 8004420:	4013      	ands	r3, r2
 8004422:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f003 0203 	and.w	r2, r3, #3
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	005b      	lsls	r3, r3, #1
 8004430:	fa02 f303 	lsl.w	r3, r2, r3
 8004434:	69ba      	ldr	r2, [r7, #24]
 8004436:	4313      	orrs	r3, r2
 8004438:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	69ba      	ldr	r2, [r7, #24]
 800443e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004448:	2b00      	cmp	r3, #0
 800444a:	f000 80be 	beq.w	80045ca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800444e:	4b66      	ldr	r3, [pc, #408]	; (80045e8 <HAL_GPIO_Init+0x324>)
 8004450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004452:	4a65      	ldr	r2, [pc, #404]	; (80045e8 <HAL_GPIO_Init+0x324>)
 8004454:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004458:	6453      	str	r3, [r2, #68]	; 0x44
 800445a:	4b63      	ldr	r3, [pc, #396]	; (80045e8 <HAL_GPIO_Init+0x324>)
 800445c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800445e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004462:	60fb      	str	r3, [r7, #12]
 8004464:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004466:	4a61      	ldr	r2, [pc, #388]	; (80045ec <HAL_GPIO_Init+0x328>)
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	089b      	lsrs	r3, r3, #2
 800446c:	3302      	adds	r3, #2
 800446e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004472:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	f003 0303 	and.w	r3, r3, #3
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	220f      	movs	r2, #15
 800447e:	fa02 f303 	lsl.w	r3, r2, r3
 8004482:	43db      	mvns	r3, r3
 8004484:	69ba      	ldr	r2, [r7, #24]
 8004486:	4013      	ands	r3, r2
 8004488:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a58      	ldr	r2, [pc, #352]	; (80045f0 <HAL_GPIO_Init+0x32c>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d037      	beq.n	8004502 <HAL_GPIO_Init+0x23e>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a57      	ldr	r2, [pc, #348]	; (80045f4 <HAL_GPIO_Init+0x330>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d031      	beq.n	80044fe <HAL_GPIO_Init+0x23a>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a56      	ldr	r2, [pc, #344]	; (80045f8 <HAL_GPIO_Init+0x334>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d02b      	beq.n	80044fa <HAL_GPIO_Init+0x236>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a55      	ldr	r2, [pc, #340]	; (80045fc <HAL_GPIO_Init+0x338>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d025      	beq.n	80044f6 <HAL_GPIO_Init+0x232>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a54      	ldr	r2, [pc, #336]	; (8004600 <HAL_GPIO_Init+0x33c>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d01f      	beq.n	80044f2 <HAL_GPIO_Init+0x22e>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a53      	ldr	r2, [pc, #332]	; (8004604 <HAL_GPIO_Init+0x340>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d019      	beq.n	80044ee <HAL_GPIO_Init+0x22a>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a52      	ldr	r2, [pc, #328]	; (8004608 <HAL_GPIO_Init+0x344>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d013      	beq.n	80044ea <HAL_GPIO_Init+0x226>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a51      	ldr	r2, [pc, #324]	; (800460c <HAL_GPIO_Init+0x348>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d00d      	beq.n	80044e6 <HAL_GPIO_Init+0x222>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a50      	ldr	r2, [pc, #320]	; (8004610 <HAL_GPIO_Init+0x34c>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d007      	beq.n	80044e2 <HAL_GPIO_Init+0x21e>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a4f      	ldr	r2, [pc, #316]	; (8004614 <HAL_GPIO_Init+0x350>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d101      	bne.n	80044de <HAL_GPIO_Init+0x21a>
 80044da:	2309      	movs	r3, #9
 80044dc:	e012      	b.n	8004504 <HAL_GPIO_Init+0x240>
 80044de:	230a      	movs	r3, #10
 80044e0:	e010      	b.n	8004504 <HAL_GPIO_Init+0x240>
 80044e2:	2308      	movs	r3, #8
 80044e4:	e00e      	b.n	8004504 <HAL_GPIO_Init+0x240>
 80044e6:	2307      	movs	r3, #7
 80044e8:	e00c      	b.n	8004504 <HAL_GPIO_Init+0x240>
 80044ea:	2306      	movs	r3, #6
 80044ec:	e00a      	b.n	8004504 <HAL_GPIO_Init+0x240>
 80044ee:	2305      	movs	r3, #5
 80044f0:	e008      	b.n	8004504 <HAL_GPIO_Init+0x240>
 80044f2:	2304      	movs	r3, #4
 80044f4:	e006      	b.n	8004504 <HAL_GPIO_Init+0x240>
 80044f6:	2303      	movs	r3, #3
 80044f8:	e004      	b.n	8004504 <HAL_GPIO_Init+0x240>
 80044fa:	2302      	movs	r3, #2
 80044fc:	e002      	b.n	8004504 <HAL_GPIO_Init+0x240>
 80044fe:	2301      	movs	r3, #1
 8004500:	e000      	b.n	8004504 <HAL_GPIO_Init+0x240>
 8004502:	2300      	movs	r3, #0
 8004504:	69fa      	ldr	r2, [r7, #28]
 8004506:	f002 0203 	and.w	r2, r2, #3
 800450a:	0092      	lsls	r2, r2, #2
 800450c:	4093      	lsls	r3, r2
 800450e:	69ba      	ldr	r2, [r7, #24]
 8004510:	4313      	orrs	r3, r2
 8004512:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004514:	4935      	ldr	r1, [pc, #212]	; (80045ec <HAL_GPIO_Init+0x328>)
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	089b      	lsrs	r3, r3, #2
 800451a:	3302      	adds	r3, #2
 800451c:	69ba      	ldr	r2, [r7, #24]
 800451e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004522:	4b3d      	ldr	r3, [pc, #244]	; (8004618 <HAL_GPIO_Init+0x354>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	43db      	mvns	r3, r3
 800452c:	69ba      	ldr	r2, [r7, #24]
 800452e:	4013      	ands	r3, r2
 8004530:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d003      	beq.n	8004546 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800453e:	69ba      	ldr	r2, [r7, #24]
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	4313      	orrs	r3, r2
 8004544:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004546:	4a34      	ldr	r2, [pc, #208]	; (8004618 <HAL_GPIO_Init+0x354>)
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800454c:	4b32      	ldr	r3, [pc, #200]	; (8004618 <HAL_GPIO_Init+0x354>)
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	43db      	mvns	r3, r3
 8004556:	69ba      	ldr	r2, [r7, #24]
 8004558:	4013      	ands	r3, r2
 800455a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d003      	beq.n	8004570 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004568:	69ba      	ldr	r2, [r7, #24]
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	4313      	orrs	r3, r2
 800456e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004570:	4a29      	ldr	r2, [pc, #164]	; (8004618 <HAL_GPIO_Init+0x354>)
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004576:	4b28      	ldr	r3, [pc, #160]	; (8004618 <HAL_GPIO_Init+0x354>)
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	43db      	mvns	r3, r3
 8004580:	69ba      	ldr	r2, [r7, #24]
 8004582:	4013      	ands	r3, r2
 8004584:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d003      	beq.n	800459a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004592:	69ba      	ldr	r2, [r7, #24]
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	4313      	orrs	r3, r2
 8004598:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800459a:	4a1f      	ldr	r2, [pc, #124]	; (8004618 <HAL_GPIO_Init+0x354>)
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80045a0:	4b1d      	ldr	r3, [pc, #116]	; (8004618 <HAL_GPIO_Init+0x354>)
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	43db      	mvns	r3, r3
 80045aa:	69ba      	ldr	r2, [r7, #24]
 80045ac:	4013      	ands	r3, r2
 80045ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d003      	beq.n	80045c4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80045bc:	69ba      	ldr	r2, [r7, #24]
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80045c4:	4a14      	ldr	r2, [pc, #80]	; (8004618 <HAL_GPIO_Init+0x354>)
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	3301      	adds	r3, #1
 80045ce:	61fb      	str	r3, [r7, #28]
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	2b0f      	cmp	r3, #15
 80045d4:	f67f ae86 	bls.w	80042e4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80045d8:	bf00      	nop
 80045da:	bf00      	nop
 80045dc:	3724      	adds	r7, #36	; 0x24
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop
 80045e8:	40023800 	.word	0x40023800
 80045ec:	40013800 	.word	0x40013800
 80045f0:	40020000 	.word	0x40020000
 80045f4:	40020400 	.word	0x40020400
 80045f8:	40020800 	.word	0x40020800
 80045fc:	40020c00 	.word	0x40020c00
 8004600:	40021000 	.word	0x40021000
 8004604:	40021400 	.word	0x40021400
 8004608:	40021800 	.word	0x40021800
 800460c:	40021c00 	.word	0x40021c00
 8004610:	40022000 	.word	0x40022000
 8004614:	40022400 	.word	0x40022400
 8004618:	40013c00 	.word	0x40013c00

0800461c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800461c:	b480      	push	{r7}
 800461e:	b087      	sub	sp, #28
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8004626:	2300      	movs	r3, #0
 8004628:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800462a:	2300      	movs	r3, #0
 800462c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800462e:	2300      	movs	r3, #0
 8004630:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004632:	2300      	movs	r3, #0
 8004634:	617b      	str	r3, [r7, #20]
 8004636:	e0d9      	b.n	80047ec <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004638:	2201      	movs	r2, #1
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	fa02 f303 	lsl.w	r3, r2, r3
 8004640:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004642:	683a      	ldr	r2, [r7, #0]
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	4013      	ands	r3, r2
 8004648:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800464a:	68fa      	ldr	r2, [r7, #12]
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	429a      	cmp	r2, r3
 8004650:	f040 80c9 	bne.w	80047e6 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8004654:	4a6b      	ldr	r2, [pc, #428]	; (8004804 <HAL_GPIO_DeInit+0x1e8>)
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	089b      	lsrs	r3, r3, #2
 800465a:	3302      	adds	r3, #2
 800465c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004660:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	f003 0303 	and.w	r3, r3, #3
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	220f      	movs	r2, #15
 800466c:	fa02 f303 	lsl.w	r3, r2, r3
 8004670:	68ba      	ldr	r2, [r7, #8]
 8004672:	4013      	ands	r3, r2
 8004674:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a63      	ldr	r2, [pc, #396]	; (8004808 <HAL_GPIO_DeInit+0x1ec>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d037      	beq.n	80046ee <HAL_GPIO_DeInit+0xd2>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a62      	ldr	r2, [pc, #392]	; (800480c <HAL_GPIO_DeInit+0x1f0>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d031      	beq.n	80046ea <HAL_GPIO_DeInit+0xce>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a61      	ldr	r2, [pc, #388]	; (8004810 <HAL_GPIO_DeInit+0x1f4>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d02b      	beq.n	80046e6 <HAL_GPIO_DeInit+0xca>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a60      	ldr	r2, [pc, #384]	; (8004814 <HAL_GPIO_DeInit+0x1f8>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d025      	beq.n	80046e2 <HAL_GPIO_DeInit+0xc6>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a5f      	ldr	r2, [pc, #380]	; (8004818 <HAL_GPIO_DeInit+0x1fc>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d01f      	beq.n	80046de <HAL_GPIO_DeInit+0xc2>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a5e      	ldr	r2, [pc, #376]	; (800481c <HAL_GPIO_DeInit+0x200>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d019      	beq.n	80046da <HAL_GPIO_DeInit+0xbe>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a5d      	ldr	r2, [pc, #372]	; (8004820 <HAL_GPIO_DeInit+0x204>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d013      	beq.n	80046d6 <HAL_GPIO_DeInit+0xba>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a5c      	ldr	r2, [pc, #368]	; (8004824 <HAL_GPIO_DeInit+0x208>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d00d      	beq.n	80046d2 <HAL_GPIO_DeInit+0xb6>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a5b      	ldr	r2, [pc, #364]	; (8004828 <HAL_GPIO_DeInit+0x20c>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d007      	beq.n	80046ce <HAL_GPIO_DeInit+0xb2>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a5a      	ldr	r2, [pc, #360]	; (800482c <HAL_GPIO_DeInit+0x210>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d101      	bne.n	80046ca <HAL_GPIO_DeInit+0xae>
 80046c6:	2309      	movs	r3, #9
 80046c8:	e012      	b.n	80046f0 <HAL_GPIO_DeInit+0xd4>
 80046ca:	230a      	movs	r3, #10
 80046cc:	e010      	b.n	80046f0 <HAL_GPIO_DeInit+0xd4>
 80046ce:	2308      	movs	r3, #8
 80046d0:	e00e      	b.n	80046f0 <HAL_GPIO_DeInit+0xd4>
 80046d2:	2307      	movs	r3, #7
 80046d4:	e00c      	b.n	80046f0 <HAL_GPIO_DeInit+0xd4>
 80046d6:	2306      	movs	r3, #6
 80046d8:	e00a      	b.n	80046f0 <HAL_GPIO_DeInit+0xd4>
 80046da:	2305      	movs	r3, #5
 80046dc:	e008      	b.n	80046f0 <HAL_GPIO_DeInit+0xd4>
 80046de:	2304      	movs	r3, #4
 80046e0:	e006      	b.n	80046f0 <HAL_GPIO_DeInit+0xd4>
 80046e2:	2303      	movs	r3, #3
 80046e4:	e004      	b.n	80046f0 <HAL_GPIO_DeInit+0xd4>
 80046e6:	2302      	movs	r3, #2
 80046e8:	e002      	b.n	80046f0 <HAL_GPIO_DeInit+0xd4>
 80046ea:	2301      	movs	r3, #1
 80046ec:	e000      	b.n	80046f0 <HAL_GPIO_DeInit+0xd4>
 80046ee:	2300      	movs	r3, #0
 80046f0:	697a      	ldr	r2, [r7, #20]
 80046f2:	f002 0203 	and.w	r2, r2, #3
 80046f6:	0092      	lsls	r2, r2, #2
 80046f8:	4093      	lsls	r3, r2
 80046fa:	68ba      	ldr	r2, [r7, #8]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d132      	bne.n	8004766 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004700:	4b4b      	ldr	r3, [pc, #300]	; (8004830 <HAL_GPIO_DeInit+0x214>)
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	43db      	mvns	r3, r3
 8004708:	4949      	ldr	r1, [pc, #292]	; (8004830 <HAL_GPIO_DeInit+0x214>)
 800470a:	4013      	ands	r3, r2
 800470c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800470e:	4b48      	ldr	r3, [pc, #288]	; (8004830 <HAL_GPIO_DeInit+0x214>)
 8004710:	685a      	ldr	r2, [r3, #4]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	43db      	mvns	r3, r3
 8004716:	4946      	ldr	r1, [pc, #280]	; (8004830 <HAL_GPIO_DeInit+0x214>)
 8004718:	4013      	ands	r3, r2
 800471a:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800471c:	4b44      	ldr	r3, [pc, #272]	; (8004830 <HAL_GPIO_DeInit+0x214>)
 800471e:	689a      	ldr	r2, [r3, #8]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	43db      	mvns	r3, r3
 8004724:	4942      	ldr	r1, [pc, #264]	; (8004830 <HAL_GPIO_DeInit+0x214>)
 8004726:	4013      	ands	r3, r2
 8004728:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800472a:	4b41      	ldr	r3, [pc, #260]	; (8004830 <HAL_GPIO_DeInit+0x214>)
 800472c:	68da      	ldr	r2, [r3, #12]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	43db      	mvns	r3, r3
 8004732:	493f      	ldr	r1, [pc, #252]	; (8004830 <HAL_GPIO_DeInit+0x214>)
 8004734:	4013      	ands	r3, r2
 8004736:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	f003 0303 	and.w	r3, r3, #3
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	220f      	movs	r2, #15
 8004742:	fa02 f303 	lsl.w	r3, r2, r3
 8004746:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8004748:	4a2e      	ldr	r2, [pc, #184]	; (8004804 <HAL_GPIO_DeInit+0x1e8>)
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	089b      	lsrs	r3, r3, #2
 800474e:	3302      	adds	r3, #2
 8004750:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	43da      	mvns	r2, r3
 8004758:	482a      	ldr	r0, [pc, #168]	; (8004804 <HAL_GPIO_DeInit+0x1e8>)
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	089b      	lsrs	r3, r3, #2
 800475e:	400a      	ands	r2, r1
 8004760:	3302      	adds	r3, #2
 8004762:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	005b      	lsls	r3, r3, #1
 800476e:	2103      	movs	r1, #3
 8004770:	fa01 f303 	lsl.w	r3, r1, r3
 8004774:	43db      	mvns	r3, r3
 8004776:	401a      	ands	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	08da      	lsrs	r2, r3, #3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	3208      	adds	r2, #8
 8004784:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	f003 0307 	and.w	r3, r3, #7
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	220f      	movs	r2, #15
 8004792:	fa02 f303 	lsl.w	r3, r2, r3
 8004796:	43db      	mvns	r3, r3
 8004798:	697a      	ldr	r2, [r7, #20]
 800479a:	08d2      	lsrs	r2, r2, #3
 800479c:	4019      	ands	r1, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	3208      	adds	r2, #8
 80047a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	68da      	ldr	r2, [r3, #12]
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	005b      	lsls	r3, r3, #1
 80047ae:	2103      	movs	r1, #3
 80047b0:	fa01 f303 	lsl.w	r3, r1, r3
 80047b4:	43db      	mvns	r3, r3
 80047b6:	401a      	ands	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685a      	ldr	r2, [r3, #4]
 80047c0:	2101      	movs	r1, #1
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	fa01 f303 	lsl.w	r3, r1, r3
 80047c8:	43db      	mvns	r3, r3
 80047ca:	401a      	ands	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	689a      	ldr	r2, [r3, #8]
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	005b      	lsls	r3, r3, #1
 80047d8:	2103      	movs	r1, #3
 80047da:	fa01 f303 	lsl.w	r3, r1, r3
 80047de:	43db      	mvns	r3, r3
 80047e0:	401a      	ands	r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	3301      	adds	r3, #1
 80047ea:	617b      	str	r3, [r7, #20]
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	2b0f      	cmp	r3, #15
 80047f0:	f67f af22 	bls.w	8004638 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80047f4:	bf00      	nop
 80047f6:	bf00      	nop
 80047f8:	371c      	adds	r7, #28
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	40013800 	.word	0x40013800
 8004808:	40020000 	.word	0x40020000
 800480c:	40020400 	.word	0x40020400
 8004810:	40020800 	.word	0x40020800
 8004814:	40020c00 	.word	0x40020c00
 8004818:	40021000 	.word	0x40021000
 800481c:	40021400 	.word	0x40021400
 8004820:	40021800 	.word	0x40021800
 8004824:	40021c00 	.word	0x40021c00
 8004828:	40022000 	.word	0x40022000
 800482c:	40022400 	.word	0x40022400
 8004830:	40013c00 	.word	0x40013c00

08004834 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	460b      	mov	r3, r1
 800483e:	807b      	strh	r3, [r7, #2]
 8004840:	4613      	mov	r3, r2
 8004842:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004844:	787b      	ldrb	r3, [r7, #1]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d003      	beq.n	8004852 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800484a:	887a      	ldrh	r2, [r7, #2]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004850:	e003      	b.n	800485a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004852:	887b      	ldrh	r3, [r7, #2]
 8004854:	041a      	lsls	r2, r3, #16
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	619a      	str	r2, [r3, #24]
}
 800485a:	bf00      	nop
 800485c:	370c      	adds	r7, #12
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr

08004866 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004866:	b480      	push	{r7}
 8004868:	b085      	sub	sp, #20
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
 800486e:	460b      	mov	r3, r1
 8004870:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004878:	887a      	ldrh	r2, [r7, #2]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	4013      	ands	r3, r2
 800487e:	041a      	lsls	r2, r3, #16
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	43d9      	mvns	r1, r3
 8004884:	887b      	ldrh	r3, [r7, #2]
 8004886:	400b      	ands	r3, r1
 8004888:	431a      	orrs	r2, r3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	619a      	str	r2, [r3, #24]
}
 800488e:	bf00      	nop
 8004890:	3714      	adds	r7, #20
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr
	...

0800489c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800489c:	b480      	push	{r7}
 800489e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048a0:	4b05      	ldr	r3, [pc, #20]	; (80048b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a04      	ldr	r2, [pc, #16]	; (80048b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80048a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048aa:	6013      	str	r3, [r2, #0]
}
 80048ac:	bf00      	nop
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr
 80048b6:	bf00      	nop
 80048b8:	40007000 	.word	0x40007000

080048bc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80048c2:	2300      	movs	r3, #0
 80048c4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80048c6:	4b23      	ldr	r3, [pc, #140]	; (8004954 <HAL_PWREx_EnableOverDrive+0x98>)
 80048c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ca:	4a22      	ldr	r2, [pc, #136]	; (8004954 <HAL_PWREx_EnableOverDrive+0x98>)
 80048cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048d0:	6413      	str	r3, [r2, #64]	; 0x40
 80048d2:	4b20      	ldr	r3, [pc, #128]	; (8004954 <HAL_PWREx_EnableOverDrive+0x98>)
 80048d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048da:	603b      	str	r3, [r7, #0]
 80048dc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80048de:	4b1e      	ldr	r3, [pc, #120]	; (8004958 <HAL_PWREx_EnableOverDrive+0x9c>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a1d      	ldr	r2, [pc, #116]	; (8004958 <HAL_PWREx_EnableOverDrive+0x9c>)
 80048e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048e8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80048ea:	f7fe fbc5 	bl	8003078 <HAL_GetTick>
 80048ee:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80048f0:	e009      	b.n	8004906 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80048f2:	f7fe fbc1 	bl	8003078 <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004900:	d901      	bls.n	8004906 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e022      	b.n	800494c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004906:	4b14      	ldr	r3, [pc, #80]	; (8004958 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800490e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004912:	d1ee      	bne.n	80048f2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004914:	4b10      	ldr	r3, [pc, #64]	; (8004958 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a0f      	ldr	r2, [pc, #60]	; (8004958 <HAL_PWREx_EnableOverDrive+0x9c>)
 800491a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800491e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004920:	f7fe fbaa 	bl	8003078 <HAL_GetTick>
 8004924:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004926:	e009      	b.n	800493c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004928:	f7fe fba6 	bl	8003078 <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004936:	d901      	bls.n	800493c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	e007      	b.n	800494c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800493c:	4b06      	ldr	r3, [pc, #24]	; (8004958 <HAL_PWREx_EnableOverDrive+0x9c>)
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004944:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004948:	d1ee      	bne.n	8004928 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	3708      	adds	r7, #8
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}
 8004954:	40023800 	.word	0x40023800
 8004958:	40007000 	.word	0x40007000

0800495c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b086      	sub	sp, #24
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004964:	2300      	movs	r3, #0
 8004966:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d101      	bne.n	8004972 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e29b      	b.n	8004eaa <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0301 	and.w	r3, r3, #1
 800497a:	2b00      	cmp	r3, #0
 800497c:	f000 8087 	beq.w	8004a8e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004980:	4b96      	ldr	r3, [pc, #600]	; (8004bdc <HAL_RCC_OscConfig+0x280>)
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	f003 030c 	and.w	r3, r3, #12
 8004988:	2b04      	cmp	r3, #4
 800498a:	d00c      	beq.n	80049a6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800498c:	4b93      	ldr	r3, [pc, #588]	; (8004bdc <HAL_RCC_OscConfig+0x280>)
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f003 030c 	and.w	r3, r3, #12
 8004994:	2b08      	cmp	r3, #8
 8004996:	d112      	bne.n	80049be <HAL_RCC_OscConfig+0x62>
 8004998:	4b90      	ldr	r3, [pc, #576]	; (8004bdc <HAL_RCC_OscConfig+0x280>)
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049a4:	d10b      	bne.n	80049be <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049a6:	4b8d      	ldr	r3, [pc, #564]	; (8004bdc <HAL_RCC_OscConfig+0x280>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d06c      	beq.n	8004a8c <HAL_RCC_OscConfig+0x130>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d168      	bne.n	8004a8c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e275      	b.n	8004eaa <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049c6:	d106      	bne.n	80049d6 <HAL_RCC_OscConfig+0x7a>
 80049c8:	4b84      	ldr	r3, [pc, #528]	; (8004bdc <HAL_RCC_OscConfig+0x280>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a83      	ldr	r2, [pc, #524]	; (8004bdc <HAL_RCC_OscConfig+0x280>)
 80049ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049d2:	6013      	str	r3, [r2, #0]
 80049d4:	e02e      	b.n	8004a34 <HAL_RCC_OscConfig+0xd8>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d10c      	bne.n	80049f8 <HAL_RCC_OscConfig+0x9c>
 80049de:	4b7f      	ldr	r3, [pc, #508]	; (8004bdc <HAL_RCC_OscConfig+0x280>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a7e      	ldr	r2, [pc, #504]	; (8004bdc <HAL_RCC_OscConfig+0x280>)
 80049e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049e8:	6013      	str	r3, [r2, #0]
 80049ea:	4b7c      	ldr	r3, [pc, #496]	; (8004bdc <HAL_RCC_OscConfig+0x280>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a7b      	ldr	r2, [pc, #492]	; (8004bdc <HAL_RCC_OscConfig+0x280>)
 80049f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049f4:	6013      	str	r3, [r2, #0]
 80049f6:	e01d      	b.n	8004a34 <HAL_RCC_OscConfig+0xd8>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a00:	d10c      	bne.n	8004a1c <HAL_RCC_OscConfig+0xc0>
 8004a02:	4b76      	ldr	r3, [pc, #472]	; (8004bdc <HAL_RCC_OscConfig+0x280>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a75      	ldr	r2, [pc, #468]	; (8004bdc <HAL_RCC_OscConfig+0x280>)
 8004a08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a0c:	6013      	str	r3, [r2, #0]
 8004a0e:	4b73      	ldr	r3, [pc, #460]	; (8004bdc <HAL_RCC_OscConfig+0x280>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a72      	ldr	r2, [pc, #456]	; (8004bdc <HAL_RCC_OscConfig+0x280>)
 8004a14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a18:	6013      	str	r3, [r2, #0]
 8004a1a:	e00b      	b.n	8004a34 <HAL_RCC_OscConfig+0xd8>
 8004a1c:	4b6f      	ldr	r3, [pc, #444]	; (8004bdc <HAL_RCC_OscConfig+0x280>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a6e      	ldr	r2, [pc, #440]	; (8004bdc <HAL_RCC_OscConfig+0x280>)
 8004a22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a26:	6013      	str	r3, [r2, #0]
 8004a28:	4b6c      	ldr	r3, [pc, #432]	; (8004bdc <HAL_RCC_OscConfig+0x280>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a6b      	ldr	r2, [pc, #428]	; (8004bdc <HAL_RCC_OscConfig+0x280>)
 8004a2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d013      	beq.n	8004a64 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a3c:	f7fe fb1c 	bl	8003078 <HAL_GetTick>
 8004a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a42:	e008      	b.n	8004a56 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a44:	f7fe fb18 	bl	8003078 <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	2b64      	cmp	r3, #100	; 0x64
 8004a50:	d901      	bls.n	8004a56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e229      	b.n	8004eaa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a56:	4b61      	ldr	r3, [pc, #388]	; (8004bdc <HAL_RCC_OscConfig+0x280>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d0f0      	beq.n	8004a44 <HAL_RCC_OscConfig+0xe8>
 8004a62:	e014      	b.n	8004a8e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a64:	f7fe fb08 	bl	8003078 <HAL_GetTick>
 8004a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a6a:	e008      	b.n	8004a7e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a6c:	f7fe fb04 	bl	8003078 <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	2b64      	cmp	r3, #100	; 0x64
 8004a78:	d901      	bls.n	8004a7e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e215      	b.n	8004eaa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a7e:	4b57      	ldr	r3, [pc, #348]	; (8004bdc <HAL_RCC_OscConfig+0x280>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d1f0      	bne.n	8004a6c <HAL_RCC_OscConfig+0x110>
 8004a8a:	e000      	b.n	8004a8e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0302 	and.w	r3, r3, #2
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d069      	beq.n	8004b6e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a9a:	4b50      	ldr	r3, [pc, #320]	; (8004bdc <HAL_RCC_OscConfig+0x280>)
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f003 030c 	and.w	r3, r3, #12
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d00b      	beq.n	8004abe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004aa6:	4b4d      	ldr	r3, [pc, #308]	; (8004bdc <HAL_RCC_OscConfig+0x280>)
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f003 030c 	and.w	r3, r3, #12
 8004aae:	2b08      	cmp	r3, #8
 8004ab0:	d11c      	bne.n	8004aec <HAL_RCC_OscConfig+0x190>
 8004ab2:	4b4a      	ldr	r3, [pc, #296]	; (8004bdc <HAL_RCC_OscConfig+0x280>)
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d116      	bne.n	8004aec <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004abe:	4b47      	ldr	r3, [pc, #284]	; (8004bdc <HAL_RCC_OscConfig+0x280>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0302 	and.w	r3, r3, #2
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d005      	beq.n	8004ad6 <HAL_RCC_OscConfig+0x17a>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d001      	beq.n	8004ad6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e1e9      	b.n	8004eaa <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ad6:	4b41      	ldr	r3, [pc, #260]	; (8004bdc <HAL_RCC_OscConfig+0x280>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	00db      	lsls	r3, r3, #3
 8004ae4:	493d      	ldr	r1, [pc, #244]	; (8004bdc <HAL_RCC_OscConfig+0x280>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aea:	e040      	b.n	8004b6e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d023      	beq.n	8004b3c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004af4:	4b39      	ldr	r3, [pc, #228]	; (8004bdc <HAL_RCC_OscConfig+0x280>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a38      	ldr	r2, [pc, #224]	; (8004bdc <HAL_RCC_OscConfig+0x280>)
 8004afa:	f043 0301 	orr.w	r3, r3, #1
 8004afe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b00:	f7fe faba 	bl	8003078 <HAL_GetTick>
 8004b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b06:	e008      	b.n	8004b1a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b08:	f7fe fab6 	bl	8003078 <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d901      	bls.n	8004b1a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e1c7      	b.n	8004eaa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b1a:	4b30      	ldr	r3, [pc, #192]	; (8004bdc <HAL_RCC_OscConfig+0x280>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0302 	and.w	r3, r3, #2
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d0f0      	beq.n	8004b08 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b26:	4b2d      	ldr	r3, [pc, #180]	; (8004bdc <HAL_RCC_OscConfig+0x280>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	00db      	lsls	r3, r3, #3
 8004b34:	4929      	ldr	r1, [pc, #164]	; (8004bdc <HAL_RCC_OscConfig+0x280>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	600b      	str	r3, [r1, #0]
 8004b3a:	e018      	b.n	8004b6e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b3c:	4b27      	ldr	r3, [pc, #156]	; (8004bdc <HAL_RCC_OscConfig+0x280>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a26      	ldr	r2, [pc, #152]	; (8004bdc <HAL_RCC_OscConfig+0x280>)
 8004b42:	f023 0301 	bic.w	r3, r3, #1
 8004b46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b48:	f7fe fa96 	bl	8003078 <HAL_GetTick>
 8004b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b4e:	e008      	b.n	8004b62 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b50:	f7fe fa92 	bl	8003078 <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e1a3      	b.n	8004eaa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b62:	4b1e      	ldr	r3, [pc, #120]	; (8004bdc <HAL_RCC_OscConfig+0x280>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0302 	and.w	r3, r3, #2
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d1f0      	bne.n	8004b50 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0308 	and.w	r3, r3, #8
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d038      	beq.n	8004bec <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d019      	beq.n	8004bb6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b82:	4b16      	ldr	r3, [pc, #88]	; (8004bdc <HAL_RCC_OscConfig+0x280>)
 8004b84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b86:	4a15      	ldr	r2, [pc, #84]	; (8004bdc <HAL_RCC_OscConfig+0x280>)
 8004b88:	f043 0301 	orr.w	r3, r3, #1
 8004b8c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b8e:	f7fe fa73 	bl	8003078 <HAL_GetTick>
 8004b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b94:	e008      	b.n	8004ba8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b96:	f7fe fa6f 	bl	8003078 <HAL_GetTick>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d901      	bls.n	8004ba8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e180      	b.n	8004eaa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ba8:	4b0c      	ldr	r3, [pc, #48]	; (8004bdc <HAL_RCC_OscConfig+0x280>)
 8004baa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bac:	f003 0302 	and.w	r3, r3, #2
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d0f0      	beq.n	8004b96 <HAL_RCC_OscConfig+0x23a>
 8004bb4:	e01a      	b.n	8004bec <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bb6:	4b09      	ldr	r3, [pc, #36]	; (8004bdc <HAL_RCC_OscConfig+0x280>)
 8004bb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bba:	4a08      	ldr	r2, [pc, #32]	; (8004bdc <HAL_RCC_OscConfig+0x280>)
 8004bbc:	f023 0301 	bic.w	r3, r3, #1
 8004bc0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bc2:	f7fe fa59 	bl	8003078 <HAL_GetTick>
 8004bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bc8:	e00a      	b.n	8004be0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bca:	f7fe fa55 	bl	8003078 <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d903      	bls.n	8004be0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e166      	b.n	8004eaa <HAL_RCC_OscConfig+0x54e>
 8004bdc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004be0:	4b92      	ldr	r3, [pc, #584]	; (8004e2c <HAL_RCC_OscConfig+0x4d0>)
 8004be2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004be4:	f003 0302 	and.w	r3, r3, #2
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d1ee      	bne.n	8004bca <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0304 	and.w	r3, r3, #4
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	f000 80a4 	beq.w	8004d42 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bfa:	4b8c      	ldr	r3, [pc, #560]	; (8004e2c <HAL_RCC_OscConfig+0x4d0>)
 8004bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d10d      	bne.n	8004c22 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c06:	4b89      	ldr	r3, [pc, #548]	; (8004e2c <HAL_RCC_OscConfig+0x4d0>)
 8004c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0a:	4a88      	ldr	r2, [pc, #544]	; (8004e2c <HAL_RCC_OscConfig+0x4d0>)
 8004c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c10:	6413      	str	r3, [r2, #64]	; 0x40
 8004c12:	4b86      	ldr	r3, [pc, #536]	; (8004e2c <HAL_RCC_OscConfig+0x4d0>)
 8004c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c1a:	60bb      	str	r3, [r7, #8]
 8004c1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c22:	4b83      	ldr	r3, [pc, #524]	; (8004e30 <HAL_RCC_OscConfig+0x4d4>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d118      	bne.n	8004c60 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004c2e:	4b80      	ldr	r3, [pc, #512]	; (8004e30 <HAL_RCC_OscConfig+0x4d4>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a7f      	ldr	r2, [pc, #508]	; (8004e30 <HAL_RCC_OscConfig+0x4d4>)
 8004c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c3a:	f7fe fa1d 	bl	8003078 <HAL_GetTick>
 8004c3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c40:	e008      	b.n	8004c54 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c42:	f7fe fa19 	bl	8003078 <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	2b64      	cmp	r3, #100	; 0x64
 8004c4e:	d901      	bls.n	8004c54 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e12a      	b.n	8004eaa <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c54:	4b76      	ldr	r3, [pc, #472]	; (8004e30 <HAL_RCC_OscConfig+0x4d4>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d0f0      	beq.n	8004c42 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d106      	bne.n	8004c76 <HAL_RCC_OscConfig+0x31a>
 8004c68:	4b70      	ldr	r3, [pc, #448]	; (8004e2c <HAL_RCC_OscConfig+0x4d0>)
 8004c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c6c:	4a6f      	ldr	r2, [pc, #444]	; (8004e2c <HAL_RCC_OscConfig+0x4d0>)
 8004c6e:	f043 0301 	orr.w	r3, r3, #1
 8004c72:	6713      	str	r3, [r2, #112]	; 0x70
 8004c74:	e02d      	b.n	8004cd2 <HAL_RCC_OscConfig+0x376>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d10c      	bne.n	8004c98 <HAL_RCC_OscConfig+0x33c>
 8004c7e:	4b6b      	ldr	r3, [pc, #428]	; (8004e2c <HAL_RCC_OscConfig+0x4d0>)
 8004c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c82:	4a6a      	ldr	r2, [pc, #424]	; (8004e2c <HAL_RCC_OscConfig+0x4d0>)
 8004c84:	f023 0301 	bic.w	r3, r3, #1
 8004c88:	6713      	str	r3, [r2, #112]	; 0x70
 8004c8a:	4b68      	ldr	r3, [pc, #416]	; (8004e2c <HAL_RCC_OscConfig+0x4d0>)
 8004c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c8e:	4a67      	ldr	r2, [pc, #412]	; (8004e2c <HAL_RCC_OscConfig+0x4d0>)
 8004c90:	f023 0304 	bic.w	r3, r3, #4
 8004c94:	6713      	str	r3, [r2, #112]	; 0x70
 8004c96:	e01c      	b.n	8004cd2 <HAL_RCC_OscConfig+0x376>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	2b05      	cmp	r3, #5
 8004c9e:	d10c      	bne.n	8004cba <HAL_RCC_OscConfig+0x35e>
 8004ca0:	4b62      	ldr	r3, [pc, #392]	; (8004e2c <HAL_RCC_OscConfig+0x4d0>)
 8004ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca4:	4a61      	ldr	r2, [pc, #388]	; (8004e2c <HAL_RCC_OscConfig+0x4d0>)
 8004ca6:	f043 0304 	orr.w	r3, r3, #4
 8004caa:	6713      	str	r3, [r2, #112]	; 0x70
 8004cac:	4b5f      	ldr	r3, [pc, #380]	; (8004e2c <HAL_RCC_OscConfig+0x4d0>)
 8004cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cb0:	4a5e      	ldr	r2, [pc, #376]	; (8004e2c <HAL_RCC_OscConfig+0x4d0>)
 8004cb2:	f043 0301 	orr.w	r3, r3, #1
 8004cb6:	6713      	str	r3, [r2, #112]	; 0x70
 8004cb8:	e00b      	b.n	8004cd2 <HAL_RCC_OscConfig+0x376>
 8004cba:	4b5c      	ldr	r3, [pc, #368]	; (8004e2c <HAL_RCC_OscConfig+0x4d0>)
 8004cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cbe:	4a5b      	ldr	r2, [pc, #364]	; (8004e2c <HAL_RCC_OscConfig+0x4d0>)
 8004cc0:	f023 0301 	bic.w	r3, r3, #1
 8004cc4:	6713      	str	r3, [r2, #112]	; 0x70
 8004cc6:	4b59      	ldr	r3, [pc, #356]	; (8004e2c <HAL_RCC_OscConfig+0x4d0>)
 8004cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cca:	4a58      	ldr	r2, [pc, #352]	; (8004e2c <HAL_RCC_OscConfig+0x4d0>)
 8004ccc:	f023 0304 	bic.w	r3, r3, #4
 8004cd0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d015      	beq.n	8004d06 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cda:	f7fe f9cd 	bl	8003078 <HAL_GetTick>
 8004cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ce0:	e00a      	b.n	8004cf8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ce2:	f7fe f9c9 	bl	8003078 <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d901      	bls.n	8004cf8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e0d8      	b.n	8004eaa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cf8:	4b4c      	ldr	r3, [pc, #304]	; (8004e2c <HAL_RCC_OscConfig+0x4d0>)
 8004cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cfc:	f003 0302 	and.w	r3, r3, #2
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d0ee      	beq.n	8004ce2 <HAL_RCC_OscConfig+0x386>
 8004d04:	e014      	b.n	8004d30 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d06:	f7fe f9b7 	bl	8003078 <HAL_GetTick>
 8004d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d0c:	e00a      	b.n	8004d24 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d0e:	f7fe f9b3 	bl	8003078 <HAL_GetTick>
 8004d12:	4602      	mov	r2, r0
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d901      	bls.n	8004d24 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e0c2      	b.n	8004eaa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d24:	4b41      	ldr	r3, [pc, #260]	; (8004e2c <HAL_RCC_OscConfig+0x4d0>)
 8004d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d28:	f003 0302 	and.w	r3, r3, #2
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d1ee      	bne.n	8004d0e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d30:	7dfb      	ldrb	r3, [r7, #23]
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d105      	bne.n	8004d42 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d36:	4b3d      	ldr	r3, [pc, #244]	; (8004e2c <HAL_RCC_OscConfig+0x4d0>)
 8004d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3a:	4a3c      	ldr	r2, [pc, #240]	; (8004e2c <HAL_RCC_OscConfig+0x4d0>)
 8004d3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d40:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	f000 80ae 	beq.w	8004ea8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d4c:	4b37      	ldr	r3, [pc, #220]	; (8004e2c <HAL_RCC_OscConfig+0x4d0>)
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	f003 030c 	and.w	r3, r3, #12
 8004d54:	2b08      	cmp	r3, #8
 8004d56:	d06d      	beq.n	8004e34 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	699b      	ldr	r3, [r3, #24]
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	d14b      	bne.n	8004df8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d60:	4b32      	ldr	r3, [pc, #200]	; (8004e2c <HAL_RCC_OscConfig+0x4d0>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a31      	ldr	r2, [pc, #196]	; (8004e2c <HAL_RCC_OscConfig+0x4d0>)
 8004d66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d6c:	f7fe f984 	bl	8003078 <HAL_GetTick>
 8004d70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d72:	e008      	b.n	8004d86 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d74:	f7fe f980 	bl	8003078 <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	2b02      	cmp	r3, #2
 8004d80:	d901      	bls.n	8004d86 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e091      	b.n	8004eaa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d86:	4b29      	ldr	r3, [pc, #164]	; (8004e2c <HAL_RCC_OscConfig+0x4d0>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d1f0      	bne.n	8004d74 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	69da      	ldr	r2, [r3, #28]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a1b      	ldr	r3, [r3, #32]
 8004d9a:	431a      	orrs	r2, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da0:	019b      	lsls	r3, r3, #6
 8004da2:	431a      	orrs	r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da8:	085b      	lsrs	r3, r3, #1
 8004daa:	3b01      	subs	r3, #1
 8004dac:	041b      	lsls	r3, r3, #16
 8004dae:	431a      	orrs	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db4:	061b      	lsls	r3, r3, #24
 8004db6:	431a      	orrs	r2, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dbc:	071b      	lsls	r3, r3, #28
 8004dbe:	491b      	ldr	r1, [pc, #108]	; (8004e2c <HAL_RCC_OscConfig+0x4d0>)
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004dc4:	4b19      	ldr	r3, [pc, #100]	; (8004e2c <HAL_RCC_OscConfig+0x4d0>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a18      	ldr	r2, [pc, #96]	; (8004e2c <HAL_RCC_OscConfig+0x4d0>)
 8004dca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004dce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dd0:	f7fe f952 	bl	8003078 <HAL_GetTick>
 8004dd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dd6:	e008      	b.n	8004dea <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dd8:	f7fe f94e 	bl	8003078 <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d901      	bls.n	8004dea <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e05f      	b.n	8004eaa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dea:	4b10      	ldr	r3, [pc, #64]	; (8004e2c <HAL_RCC_OscConfig+0x4d0>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d0f0      	beq.n	8004dd8 <HAL_RCC_OscConfig+0x47c>
 8004df6:	e057      	b.n	8004ea8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004df8:	4b0c      	ldr	r3, [pc, #48]	; (8004e2c <HAL_RCC_OscConfig+0x4d0>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a0b      	ldr	r2, [pc, #44]	; (8004e2c <HAL_RCC_OscConfig+0x4d0>)
 8004dfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e04:	f7fe f938 	bl	8003078 <HAL_GetTick>
 8004e08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e0a:	e008      	b.n	8004e1e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e0c:	f7fe f934 	bl	8003078 <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d901      	bls.n	8004e1e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e045      	b.n	8004eaa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e1e:	4b03      	ldr	r3, [pc, #12]	; (8004e2c <HAL_RCC_OscConfig+0x4d0>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d1f0      	bne.n	8004e0c <HAL_RCC_OscConfig+0x4b0>
 8004e2a:	e03d      	b.n	8004ea8 <HAL_RCC_OscConfig+0x54c>
 8004e2c:	40023800 	.word	0x40023800
 8004e30:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004e34:	4b1f      	ldr	r3, [pc, #124]	; (8004eb4 <HAL_RCC_OscConfig+0x558>)
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	699b      	ldr	r3, [r3, #24]
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d030      	beq.n	8004ea4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d129      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d122      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004e64:	4013      	ands	r3, r2
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e6a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d119      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e7a:	085b      	lsrs	r3, r3, #1
 8004e7c:	3b01      	subs	r3, #1
 8004e7e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d10f      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e8e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d107      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d001      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e000      	b.n	8004eaa <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3718      	adds	r7, #24
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	40023800 	.word	0x40023800

08004eb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d101      	bne.n	8004ed0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e0d0      	b.n	8005072 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ed0:	4b6a      	ldr	r3, [pc, #424]	; (800507c <HAL_RCC_ClockConfig+0x1c4>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 030f 	and.w	r3, r3, #15
 8004ed8:	683a      	ldr	r2, [r7, #0]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d910      	bls.n	8004f00 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ede:	4b67      	ldr	r3, [pc, #412]	; (800507c <HAL_RCC_ClockConfig+0x1c4>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f023 020f 	bic.w	r2, r3, #15
 8004ee6:	4965      	ldr	r1, [pc, #404]	; (800507c <HAL_RCC_ClockConfig+0x1c4>)
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eee:	4b63      	ldr	r3, [pc, #396]	; (800507c <HAL_RCC_ClockConfig+0x1c4>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 030f 	and.w	r3, r3, #15
 8004ef6:	683a      	ldr	r2, [r7, #0]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d001      	beq.n	8004f00 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e0b8      	b.n	8005072 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0302 	and.w	r3, r3, #2
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d020      	beq.n	8004f4e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 0304 	and.w	r3, r3, #4
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d005      	beq.n	8004f24 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f18:	4b59      	ldr	r3, [pc, #356]	; (8005080 <HAL_RCC_ClockConfig+0x1c8>)
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	4a58      	ldr	r2, [pc, #352]	; (8005080 <HAL_RCC_ClockConfig+0x1c8>)
 8004f1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f22:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0308 	and.w	r3, r3, #8
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d005      	beq.n	8004f3c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f30:	4b53      	ldr	r3, [pc, #332]	; (8005080 <HAL_RCC_ClockConfig+0x1c8>)
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	4a52      	ldr	r2, [pc, #328]	; (8005080 <HAL_RCC_ClockConfig+0x1c8>)
 8004f36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f3a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f3c:	4b50      	ldr	r3, [pc, #320]	; (8005080 <HAL_RCC_ClockConfig+0x1c8>)
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	494d      	ldr	r1, [pc, #308]	; (8005080 <HAL_RCC_ClockConfig+0x1c8>)
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0301 	and.w	r3, r3, #1
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d040      	beq.n	8004fdc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d107      	bne.n	8004f72 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f62:	4b47      	ldr	r3, [pc, #284]	; (8005080 <HAL_RCC_ClockConfig+0x1c8>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d115      	bne.n	8004f9a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e07f      	b.n	8005072 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d107      	bne.n	8004f8a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f7a:	4b41      	ldr	r3, [pc, #260]	; (8005080 <HAL_RCC_ClockConfig+0x1c8>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d109      	bne.n	8004f9a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e073      	b.n	8005072 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f8a:	4b3d      	ldr	r3, [pc, #244]	; (8005080 <HAL_RCC_ClockConfig+0x1c8>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0302 	and.w	r3, r3, #2
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d101      	bne.n	8004f9a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e06b      	b.n	8005072 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f9a:	4b39      	ldr	r3, [pc, #228]	; (8005080 <HAL_RCC_ClockConfig+0x1c8>)
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	f023 0203 	bic.w	r2, r3, #3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	4936      	ldr	r1, [pc, #216]	; (8005080 <HAL_RCC_ClockConfig+0x1c8>)
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fac:	f7fe f864 	bl	8003078 <HAL_GetTick>
 8004fb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fb2:	e00a      	b.n	8004fca <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fb4:	f7fe f860 	bl	8003078 <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d901      	bls.n	8004fca <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e053      	b.n	8005072 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fca:	4b2d      	ldr	r3, [pc, #180]	; (8005080 <HAL_RCC_ClockConfig+0x1c8>)
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f003 020c 	and.w	r2, r3, #12
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d1eb      	bne.n	8004fb4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004fdc:	4b27      	ldr	r3, [pc, #156]	; (800507c <HAL_RCC_ClockConfig+0x1c4>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 030f 	and.w	r3, r3, #15
 8004fe4:	683a      	ldr	r2, [r7, #0]
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d210      	bcs.n	800500c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fea:	4b24      	ldr	r3, [pc, #144]	; (800507c <HAL_RCC_ClockConfig+0x1c4>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f023 020f 	bic.w	r2, r3, #15
 8004ff2:	4922      	ldr	r1, [pc, #136]	; (800507c <HAL_RCC_ClockConfig+0x1c4>)
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ffa:	4b20      	ldr	r3, [pc, #128]	; (800507c <HAL_RCC_ClockConfig+0x1c4>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 030f 	and.w	r3, r3, #15
 8005002:	683a      	ldr	r2, [r7, #0]
 8005004:	429a      	cmp	r2, r3
 8005006:	d001      	beq.n	800500c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e032      	b.n	8005072 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0304 	and.w	r3, r3, #4
 8005014:	2b00      	cmp	r3, #0
 8005016:	d008      	beq.n	800502a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005018:	4b19      	ldr	r3, [pc, #100]	; (8005080 <HAL_RCC_ClockConfig+0x1c8>)
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	4916      	ldr	r1, [pc, #88]	; (8005080 <HAL_RCC_ClockConfig+0x1c8>)
 8005026:	4313      	orrs	r3, r2
 8005028:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0308 	and.w	r3, r3, #8
 8005032:	2b00      	cmp	r3, #0
 8005034:	d009      	beq.n	800504a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005036:	4b12      	ldr	r3, [pc, #72]	; (8005080 <HAL_RCC_ClockConfig+0x1c8>)
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	00db      	lsls	r3, r3, #3
 8005044:	490e      	ldr	r1, [pc, #56]	; (8005080 <HAL_RCC_ClockConfig+0x1c8>)
 8005046:	4313      	orrs	r3, r2
 8005048:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800504a:	f000 f821 	bl	8005090 <HAL_RCC_GetSysClockFreq>
 800504e:	4602      	mov	r2, r0
 8005050:	4b0b      	ldr	r3, [pc, #44]	; (8005080 <HAL_RCC_ClockConfig+0x1c8>)
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	091b      	lsrs	r3, r3, #4
 8005056:	f003 030f 	and.w	r3, r3, #15
 800505a:	490a      	ldr	r1, [pc, #40]	; (8005084 <HAL_RCC_ClockConfig+0x1cc>)
 800505c:	5ccb      	ldrb	r3, [r1, r3]
 800505e:	fa22 f303 	lsr.w	r3, r2, r3
 8005062:	4a09      	ldr	r2, [pc, #36]	; (8005088 <HAL_RCC_ClockConfig+0x1d0>)
 8005064:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005066:	4b09      	ldr	r3, [pc, #36]	; (800508c <HAL_RCC_ClockConfig+0x1d4>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4618      	mov	r0, r3
 800506c:	f7fd ffc0 	bl	8002ff0 <HAL_InitTick>

  return HAL_OK;
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	3710      	adds	r7, #16
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	40023c00 	.word	0x40023c00
 8005080:	40023800 	.word	0x40023800
 8005084:	0800a47c 	.word	0x0800a47c
 8005088:	20000000 	.word	0x20000000
 800508c:	20000008 	.word	0x20000008

08005090 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005090:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005094:	b084      	sub	sp, #16
 8005096:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005098:	2300      	movs	r3, #0
 800509a:	607b      	str	r3, [r7, #4]
 800509c:	2300      	movs	r3, #0
 800509e:	60fb      	str	r3, [r7, #12]
 80050a0:	2300      	movs	r3, #0
 80050a2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80050a4:	2300      	movs	r3, #0
 80050a6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050a8:	4b67      	ldr	r3, [pc, #412]	; (8005248 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	f003 030c 	and.w	r3, r3, #12
 80050b0:	2b08      	cmp	r3, #8
 80050b2:	d00d      	beq.n	80050d0 <HAL_RCC_GetSysClockFreq+0x40>
 80050b4:	2b08      	cmp	r3, #8
 80050b6:	f200 80bd 	bhi.w	8005234 <HAL_RCC_GetSysClockFreq+0x1a4>
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d002      	beq.n	80050c4 <HAL_RCC_GetSysClockFreq+0x34>
 80050be:	2b04      	cmp	r3, #4
 80050c0:	d003      	beq.n	80050ca <HAL_RCC_GetSysClockFreq+0x3a>
 80050c2:	e0b7      	b.n	8005234 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80050c4:	4b61      	ldr	r3, [pc, #388]	; (800524c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80050c6:	60bb      	str	r3, [r7, #8]
      break;
 80050c8:	e0b7      	b.n	800523a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80050ca:	4b61      	ldr	r3, [pc, #388]	; (8005250 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80050cc:	60bb      	str	r3, [r7, #8]
      break;
 80050ce:	e0b4      	b.n	800523a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050d0:	4b5d      	ldr	r3, [pc, #372]	; (8005248 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050d8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80050da:	4b5b      	ldr	r3, [pc, #364]	; (8005248 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d04d      	beq.n	8005182 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050e6:	4b58      	ldr	r3, [pc, #352]	; (8005248 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	099b      	lsrs	r3, r3, #6
 80050ec:	461a      	mov	r2, r3
 80050ee:	f04f 0300 	mov.w	r3, #0
 80050f2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80050f6:	f04f 0100 	mov.w	r1, #0
 80050fa:	ea02 0800 	and.w	r8, r2, r0
 80050fe:	ea03 0901 	and.w	r9, r3, r1
 8005102:	4640      	mov	r0, r8
 8005104:	4649      	mov	r1, r9
 8005106:	f04f 0200 	mov.w	r2, #0
 800510a:	f04f 0300 	mov.w	r3, #0
 800510e:	014b      	lsls	r3, r1, #5
 8005110:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005114:	0142      	lsls	r2, r0, #5
 8005116:	4610      	mov	r0, r2
 8005118:	4619      	mov	r1, r3
 800511a:	ebb0 0008 	subs.w	r0, r0, r8
 800511e:	eb61 0109 	sbc.w	r1, r1, r9
 8005122:	f04f 0200 	mov.w	r2, #0
 8005126:	f04f 0300 	mov.w	r3, #0
 800512a:	018b      	lsls	r3, r1, #6
 800512c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005130:	0182      	lsls	r2, r0, #6
 8005132:	1a12      	subs	r2, r2, r0
 8005134:	eb63 0301 	sbc.w	r3, r3, r1
 8005138:	f04f 0000 	mov.w	r0, #0
 800513c:	f04f 0100 	mov.w	r1, #0
 8005140:	00d9      	lsls	r1, r3, #3
 8005142:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005146:	00d0      	lsls	r0, r2, #3
 8005148:	4602      	mov	r2, r0
 800514a:	460b      	mov	r3, r1
 800514c:	eb12 0208 	adds.w	r2, r2, r8
 8005150:	eb43 0309 	adc.w	r3, r3, r9
 8005154:	f04f 0000 	mov.w	r0, #0
 8005158:	f04f 0100 	mov.w	r1, #0
 800515c:	0259      	lsls	r1, r3, #9
 800515e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005162:	0250      	lsls	r0, r2, #9
 8005164:	4602      	mov	r2, r0
 8005166:	460b      	mov	r3, r1
 8005168:	4610      	mov	r0, r2
 800516a:	4619      	mov	r1, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	461a      	mov	r2, r3
 8005170:	f04f 0300 	mov.w	r3, #0
 8005174:	f7fb fa88 	bl	8000688 <__aeabi_uldivmod>
 8005178:	4602      	mov	r2, r0
 800517a:	460b      	mov	r3, r1
 800517c:	4613      	mov	r3, r2
 800517e:	60fb      	str	r3, [r7, #12]
 8005180:	e04a      	b.n	8005218 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005182:	4b31      	ldr	r3, [pc, #196]	; (8005248 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	099b      	lsrs	r3, r3, #6
 8005188:	461a      	mov	r2, r3
 800518a:	f04f 0300 	mov.w	r3, #0
 800518e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005192:	f04f 0100 	mov.w	r1, #0
 8005196:	ea02 0400 	and.w	r4, r2, r0
 800519a:	ea03 0501 	and.w	r5, r3, r1
 800519e:	4620      	mov	r0, r4
 80051a0:	4629      	mov	r1, r5
 80051a2:	f04f 0200 	mov.w	r2, #0
 80051a6:	f04f 0300 	mov.w	r3, #0
 80051aa:	014b      	lsls	r3, r1, #5
 80051ac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80051b0:	0142      	lsls	r2, r0, #5
 80051b2:	4610      	mov	r0, r2
 80051b4:	4619      	mov	r1, r3
 80051b6:	1b00      	subs	r0, r0, r4
 80051b8:	eb61 0105 	sbc.w	r1, r1, r5
 80051bc:	f04f 0200 	mov.w	r2, #0
 80051c0:	f04f 0300 	mov.w	r3, #0
 80051c4:	018b      	lsls	r3, r1, #6
 80051c6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80051ca:	0182      	lsls	r2, r0, #6
 80051cc:	1a12      	subs	r2, r2, r0
 80051ce:	eb63 0301 	sbc.w	r3, r3, r1
 80051d2:	f04f 0000 	mov.w	r0, #0
 80051d6:	f04f 0100 	mov.w	r1, #0
 80051da:	00d9      	lsls	r1, r3, #3
 80051dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80051e0:	00d0      	lsls	r0, r2, #3
 80051e2:	4602      	mov	r2, r0
 80051e4:	460b      	mov	r3, r1
 80051e6:	1912      	adds	r2, r2, r4
 80051e8:	eb45 0303 	adc.w	r3, r5, r3
 80051ec:	f04f 0000 	mov.w	r0, #0
 80051f0:	f04f 0100 	mov.w	r1, #0
 80051f4:	0299      	lsls	r1, r3, #10
 80051f6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80051fa:	0290      	lsls	r0, r2, #10
 80051fc:	4602      	mov	r2, r0
 80051fe:	460b      	mov	r3, r1
 8005200:	4610      	mov	r0, r2
 8005202:	4619      	mov	r1, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	461a      	mov	r2, r3
 8005208:	f04f 0300 	mov.w	r3, #0
 800520c:	f7fb fa3c 	bl	8000688 <__aeabi_uldivmod>
 8005210:	4602      	mov	r2, r0
 8005212:	460b      	mov	r3, r1
 8005214:	4613      	mov	r3, r2
 8005216:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005218:	4b0b      	ldr	r3, [pc, #44]	; (8005248 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	0c1b      	lsrs	r3, r3, #16
 800521e:	f003 0303 	and.w	r3, r3, #3
 8005222:	3301      	adds	r3, #1
 8005224:	005b      	lsls	r3, r3, #1
 8005226:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8005228:	68fa      	ldr	r2, [r7, #12]
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005230:	60bb      	str	r3, [r7, #8]
      break;
 8005232:	e002      	b.n	800523a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005234:	4b05      	ldr	r3, [pc, #20]	; (800524c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005236:	60bb      	str	r3, [r7, #8]
      break;
 8005238:	bf00      	nop
    }
  }
  return sysclockfreq;
 800523a:	68bb      	ldr	r3, [r7, #8]
}
 800523c:	4618      	mov	r0, r3
 800523e:	3710      	adds	r7, #16
 8005240:	46bd      	mov	sp, r7
 8005242:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005246:	bf00      	nop
 8005248:	40023800 	.word	0x40023800
 800524c:	00f42400 	.word	0x00f42400
 8005250:	007a1200 	.word	0x007a1200

08005254 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005254:	b480      	push	{r7}
 8005256:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005258:	4b03      	ldr	r3, [pc, #12]	; (8005268 <HAL_RCC_GetHCLKFreq+0x14>)
 800525a:	681b      	ldr	r3, [r3, #0]
}
 800525c:	4618      	mov	r0, r3
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	20000000 	.word	0x20000000

0800526c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005270:	f7ff fff0 	bl	8005254 <HAL_RCC_GetHCLKFreq>
 8005274:	4602      	mov	r2, r0
 8005276:	4b05      	ldr	r3, [pc, #20]	; (800528c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	0a9b      	lsrs	r3, r3, #10
 800527c:	f003 0307 	and.w	r3, r3, #7
 8005280:	4903      	ldr	r1, [pc, #12]	; (8005290 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005282:	5ccb      	ldrb	r3, [r1, r3]
 8005284:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005288:	4618      	mov	r0, r3
 800528a:	bd80      	pop	{r7, pc}
 800528c:	40023800 	.word	0x40023800
 8005290:	0800a48c 	.word	0x0800a48c

08005294 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005298:	f7ff ffdc 	bl	8005254 <HAL_RCC_GetHCLKFreq>
 800529c:	4602      	mov	r2, r0
 800529e:	4b05      	ldr	r3, [pc, #20]	; (80052b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	0b5b      	lsrs	r3, r3, #13
 80052a4:	f003 0307 	and.w	r3, r3, #7
 80052a8:	4903      	ldr	r1, [pc, #12]	; (80052b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052aa:	5ccb      	ldrb	r3, [r1, r3]
 80052ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	40023800 	.word	0x40023800
 80052b8:	0800a48c 	.word	0x0800a48c

080052bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b088      	sub	sp, #32
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80052c4:	2300      	movs	r3, #0
 80052c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80052c8:	2300      	movs	r3, #0
 80052ca:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80052cc:	2300      	movs	r3, #0
 80052ce:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80052d0:	2300      	movs	r3, #0
 80052d2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80052d4:	2300      	movs	r3, #0
 80052d6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0301 	and.w	r3, r3, #1
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d012      	beq.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80052e4:	4b69      	ldr	r3, [pc, #420]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	4a68      	ldr	r2, [pc, #416]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052ea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80052ee:	6093      	str	r3, [r2, #8]
 80052f0:	4b66      	ldr	r3, [pc, #408]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052f2:	689a      	ldr	r2, [r3, #8]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052f8:	4964      	ldr	r1, [pc, #400]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052fa:	4313      	orrs	r3, r2
 80052fc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005302:	2b00      	cmp	r3, #0
 8005304:	d101      	bne.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005306:	2301      	movs	r3, #1
 8005308:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d017      	beq.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005316:	4b5d      	ldr	r3, [pc, #372]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005318:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800531c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005324:	4959      	ldr	r1, [pc, #356]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005326:	4313      	orrs	r3, r2
 8005328:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005330:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005334:	d101      	bne.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005336:	2301      	movs	r3, #1
 8005338:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800533e:	2b00      	cmp	r3, #0
 8005340:	d101      	bne.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005342:	2301      	movs	r3, #1
 8005344:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800534e:	2b00      	cmp	r3, #0
 8005350:	d017      	beq.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005352:	4b4e      	ldr	r3, [pc, #312]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005354:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005358:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005360:	494a      	ldr	r1, [pc, #296]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005362:	4313      	orrs	r3, r2
 8005364:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005370:	d101      	bne.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005372:	2301      	movs	r3, #1
 8005374:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537a:	2b00      	cmp	r3, #0
 800537c:	d101      	bne.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800537e:	2301      	movs	r3, #1
 8005380:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d001      	beq.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800538e:	2301      	movs	r3, #1
 8005390:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0320 	and.w	r3, r3, #32
 800539a:	2b00      	cmp	r3, #0
 800539c:	f000 808b 	beq.w	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80053a0:	4b3a      	ldr	r3, [pc, #232]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a4:	4a39      	ldr	r2, [pc, #228]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053aa:	6413      	str	r3, [r2, #64]	; 0x40
 80053ac:	4b37      	ldr	r3, [pc, #220]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053b4:	60bb      	str	r3, [r7, #8]
 80053b6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80053b8:	4b35      	ldr	r3, [pc, #212]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a34      	ldr	r2, [pc, #208]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80053be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053c4:	f7fd fe58 	bl	8003078 <HAL_GetTick>
 80053c8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80053ca:	e008      	b.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053cc:	f7fd fe54 	bl	8003078 <HAL_GetTick>
 80053d0:	4602      	mov	r2, r0
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	1ad3      	subs	r3, r2, r3
 80053d6:	2b64      	cmp	r3, #100	; 0x64
 80053d8:	d901      	bls.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80053da:	2303      	movs	r3, #3
 80053dc:	e38f      	b.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80053de:	4b2c      	ldr	r3, [pc, #176]	; (8005490 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d0f0      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80053ea:	4b28      	ldr	r3, [pc, #160]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053f2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d035      	beq.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005402:	693a      	ldr	r2, [r7, #16]
 8005404:	429a      	cmp	r2, r3
 8005406:	d02e      	beq.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005408:	4b20      	ldr	r3, [pc, #128]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800540a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800540c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005410:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005412:	4b1e      	ldr	r3, [pc, #120]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005416:	4a1d      	ldr	r2, [pc, #116]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800541c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800541e:	4b1b      	ldr	r3, [pc, #108]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005422:	4a1a      	ldr	r2, [pc, #104]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005424:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005428:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800542a:	4a18      	ldr	r2, [pc, #96]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005430:	4b16      	ldr	r3, [pc, #88]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005434:	f003 0301 	and.w	r3, r3, #1
 8005438:	2b01      	cmp	r3, #1
 800543a:	d114      	bne.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800543c:	f7fd fe1c 	bl	8003078 <HAL_GetTick>
 8005440:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005442:	e00a      	b.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005444:	f7fd fe18 	bl	8003078 <HAL_GetTick>
 8005448:	4602      	mov	r2, r0
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005452:	4293      	cmp	r3, r2
 8005454:	d901      	bls.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e351      	b.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800545a:	4b0c      	ldr	r3, [pc, #48]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800545c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800545e:	f003 0302 	and.w	r3, r3, #2
 8005462:	2b00      	cmp	r3, #0
 8005464:	d0ee      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800546a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800546e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005472:	d111      	bne.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005474:	4b05      	ldr	r3, [pc, #20]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005480:	4b04      	ldr	r3, [pc, #16]	; (8005494 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005482:	400b      	ands	r3, r1
 8005484:	4901      	ldr	r1, [pc, #4]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005486:	4313      	orrs	r3, r2
 8005488:	608b      	str	r3, [r1, #8]
 800548a:	e00b      	b.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800548c:	40023800 	.word	0x40023800
 8005490:	40007000 	.word	0x40007000
 8005494:	0ffffcff 	.word	0x0ffffcff
 8005498:	4bb3      	ldr	r3, [pc, #716]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	4ab2      	ldr	r2, [pc, #712]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800549e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80054a2:	6093      	str	r3, [r2, #8]
 80054a4:	4bb0      	ldr	r3, [pc, #704]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80054a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054b0:	49ad      	ldr	r1, [pc, #692]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80054b2:	4313      	orrs	r3, r2
 80054b4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 0310 	and.w	r3, r3, #16
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d010      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80054c2:	4ba9      	ldr	r3, [pc, #676]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80054c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054c8:	4aa7      	ldr	r2, [pc, #668]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80054ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054ce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80054d2:	4ba5      	ldr	r3, [pc, #660]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80054d4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054dc:	49a2      	ldr	r1, [pc, #648]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80054de:	4313      	orrs	r3, r2
 80054e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d00a      	beq.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80054f0:	4b9d      	ldr	r3, [pc, #628]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80054f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054f6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054fe:	499a      	ldr	r1, [pc, #616]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005500:	4313      	orrs	r3, r2
 8005502:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00a      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005512:	4b95      	ldr	r3, [pc, #596]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005518:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005520:	4991      	ldr	r1, [pc, #580]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005522:	4313      	orrs	r3, r2
 8005524:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005530:	2b00      	cmp	r3, #0
 8005532:	d00a      	beq.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005534:	4b8c      	ldr	r3, [pc, #560]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800553a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005542:	4989      	ldr	r1, [pc, #548]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005544:	4313      	orrs	r3, r2
 8005546:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00a      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005556:	4b84      	ldr	r3, [pc, #528]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800555c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005564:	4980      	ldr	r1, [pc, #512]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005566:	4313      	orrs	r3, r2
 8005568:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005574:	2b00      	cmp	r3, #0
 8005576:	d00a      	beq.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005578:	4b7b      	ldr	r3, [pc, #492]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800557a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800557e:	f023 0203 	bic.w	r2, r3, #3
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005586:	4978      	ldr	r1, [pc, #480]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005588:	4313      	orrs	r3, r2
 800558a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005596:	2b00      	cmp	r3, #0
 8005598:	d00a      	beq.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800559a:	4b73      	ldr	r3, [pc, #460]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800559c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055a0:	f023 020c 	bic.w	r2, r3, #12
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055a8:	496f      	ldr	r1, [pc, #444]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055aa:	4313      	orrs	r3, r2
 80055ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d00a      	beq.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80055bc:	4b6a      	ldr	r3, [pc, #424]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055c2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055ca:	4967      	ldr	r1, [pc, #412]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055cc:	4313      	orrs	r3, r2
 80055ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d00a      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80055de:	4b62      	ldr	r3, [pc, #392]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055e4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055ec:	495e      	ldr	r1, [pc, #376]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055ee:	4313      	orrs	r3, r2
 80055f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d00a      	beq.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005600:	4b59      	ldr	r3, [pc, #356]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005606:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800560e:	4956      	ldr	r1, [pc, #344]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005610:	4313      	orrs	r3, r2
 8005612:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800561e:	2b00      	cmp	r3, #0
 8005620:	d00a      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005622:	4b51      	ldr	r3, [pc, #324]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005624:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005628:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005630:	494d      	ldr	r1, [pc, #308]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005632:	4313      	orrs	r3, r2
 8005634:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005640:	2b00      	cmp	r3, #0
 8005642:	d00a      	beq.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005644:	4b48      	ldr	r3, [pc, #288]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800564a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005652:	4945      	ldr	r1, [pc, #276]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005654:	4313      	orrs	r3, r2
 8005656:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005662:	2b00      	cmp	r3, #0
 8005664:	d00a      	beq.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005666:	4b40      	ldr	r3, [pc, #256]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800566c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005674:	493c      	ldr	r1, [pc, #240]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005676:	4313      	orrs	r3, r2
 8005678:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005684:	2b00      	cmp	r3, #0
 8005686:	d00a      	beq.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005688:	4b37      	ldr	r3, [pc, #220]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800568a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800568e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005696:	4934      	ldr	r1, [pc, #208]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005698:	4313      	orrs	r3, r2
 800569a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d011      	beq.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80056aa:	4b2f      	ldr	r3, [pc, #188]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056b0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056b8:	492b      	ldr	r1, [pc, #172]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056ba:	4313      	orrs	r3, r2
 80056bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056c8:	d101      	bne.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80056ca:	2301      	movs	r3, #1
 80056cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 0308 	and.w	r3, r3, #8
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d001      	beq.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80056da:	2301      	movs	r3, #1
 80056dc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d00a      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80056ea:	4b1f      	ldr	r3, [pc, #124]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056f0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056f8:	491b      	ldr	r1, [pc, #108]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056fa:	4313      	orrs	r3, r2
 80056fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00b      	beq.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800570c:	4b16      	ldr	r3, [pc, #88]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800570e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005712:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800571c:	4912      	ldr	r1, [pc, #72]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800571e:	4313      	orrs	r3, r2
 8005720:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800572c:	2b00      	cmp	r3, #0
 800572e:	d00b      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005730:	4b0d      	ldr	r3, [pc, #52]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005736:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005740:	4909      	ldr	r1, [pc, #36]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005742:	4313      	orrs	r3, r2
 8005744:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00f      	beq.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005754:	4b04      	ldr	r3, [pc, #16]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005756:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800575a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005764:	e002      	b.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8005766:	bf00      	nop
 8005768:	40023800 	.word	0x40023800
 800576c:	4986      	ldr	r1, [pc, #536]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800576e:	4313      	orrs	r3, r2
 8005770:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800577c:	2b00      	cmp	r3, #0
 800577e:	d00b      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005780:	4b81      	ldr	r3, [pc, #516]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005782:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005786:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005790:	497d      	ldr	r1, [pc, #500]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005792:	4313      	orrs	r3, r2
 8005794:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	2b01      	cmp	r3, #1
 800579c:	d006      	beq.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	f000 80d6 	beq.w	8005958 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80057ac:	4b76      	ldr	r3, [pc, #472]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a75      	ldr	r2, [pc, #468]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80057b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057b8:	f7fd fc5e 	bl	8003078 <HAL_GetTick>
 80057bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80057be:	e008      	b.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80057c0:	f7fd fc5a 	bl	8003078 <HAL_GetTick>
 80057c4:	4602      	mov	r2, r0
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	2b64      	cmp	r3, #100	; 0x64
 80057cc:	d901      	bls.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057ce:	2303      	movs	r3, #3
 80057d0:	e195      	b.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80057d2:	4b6d      	ldr	r3, [pc, #436]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d1f0      	bne.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 0301 	and.w	r3, r3, #1
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d021      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x572>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d11d      	bne.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80057f2:	4b65      	ldr	r3, [pc, #404]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057f8:	0c1b      	lsrs	r3, r3, #16
 80057fa:	f003 0303 	and.w	r3, r3, #3
 80057fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005800:	4b61      	ldr	r3, [pc, #388]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005802:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005806:	0e1b      	lsrs	r3, r3, #24
 8005808:	f003 030f 	and.w	r3, r3, #15
 800580c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	019a      	lsls	r2, r3, #6
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	041b      	lsls	r3, r3, #16
 8005818:	431a      	orrs	r2, r3
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	061b      	lsls	r3, r3, #24
 800581e:	431a      	orrs	r2, r3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	071b      	lsls	r3, r3, #28
 8005826:	4958      	ldr	r1, [pc, #352]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005828:	4313      	orrs	r3, r2
 800582a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005836:	2b00      	cmp	r3, #0
 8005838:	d004      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800583e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005842:	d00a      	beq.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800584c:	2b00      	cmp	r3, #0
 800584e:	d02e      	beq.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005854:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005858:	d129      	bne.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800585a:	4b4b      	ldr	r3, [pc, #300]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800585c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005860:	0c1b      	lsrs	r3, r3, #16
 8005862:	f003 0303 	and.w	r3, r3, #3
 8005866:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005868:	4b47      	ldr	r3, [pc, #284]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800586a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800586e:	0f1b      	lsrs	r3, r3, #28
 8005870:	f003 0307 	and.w	r3, r3, #7
 8005874:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	019a      	lsls	r2, r3, #6
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	041b      	lsls	r3, r3, #16
 8005880:	431a      	orrs	r2, r3
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	061b      	lsls	r3, r3, #24
 8005888:	431a      	orrs	r2, r3
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	071b      	lsls	r3, r3, #28
 800588e:	493e      	ldr	r1, [pc, #248]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005890:	4313      	orrs	r3, r2
 8005892:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005896:	4b3c      	ldr	r3, [pc, #240]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005898:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800589c:	f023 021f 	bic.w	r2, r3, #31
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a4:	3b01      	subs	r3, #1
 80058a6:	4938      	ldr	r1, [pc, #224]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058a8:	4313      	orrs	r3, r2
 80058aa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d01d      	beq.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80058ba:	4b33      	ldr	r3, [pc, #204]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058c0:	0e1b      	lsrs	r3, r3, #24
 80058c2:	f003 030f 	and.w	r3, r3, #15
 80058c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80058c8:	4b2f      	ldr	r3, [pc, #188]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058ce:	0f1b      	lsrs	r3, r3, #28
 80058d0:	f003 0307 	and.w	r3, r3, #7
 80058d4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	019a      	lsls	r2, r3, #6
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	691b      	ldr	r3, [r3, #16]
 80058e0:	041b      	lsls	r3, r3, #16
 80058e2:	431a      	orrs	r2, r3
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	061b      	lsls	r3, r3, #24
 80058e8:	431a      	orrs	r2, r3
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	071b      	lsls	r3, r3, #28
 80058ee:	4926      	ldr	r1, [pc, #152]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058f0:	4313      	orrs	r3, r2
 80058f2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d011      	beq.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	019a      	lsls	r2, r3, #6
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	691b      	ldr	r3, [r3, #16]
 800590c:	041b      	lsls	r3, r3, #16
 800590e:	431a      	orrs	r2, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	061b      	lsls	r3, r3, #24
 8005916:	431a      	orrs	r2, r3
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	071b      	lsls	r3, r3, #28
 800591e:	491a      	ldr	r1, [pc, #104]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005920:	4313      	orrs	r3, r2
 8005922:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005926:	4b18      	ldr	r3, [pc, #96]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a17      	ldr	r2, [pc, #92]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800592c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005930:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005932:	f7fd fba1 	bl	8003078 <HAL_GetTick>
 8005936:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005938:	e008      	b.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800593a:	f7fd fb9d 	bl	8003078 <HAL_GetTick>
 800593e:	4602      	mov	r2, r0
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	2b64      	cmp	r3, #100	; 0x64
 8005946:	d901      	bls.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005948:	2303      	movs	r3, #3
 800594a:	e0d8      	b.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800594c:	4b0e      	ldr	r3, [pc, #56]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d0f0      	beq.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	2b01      	cmp	r3, #1
 800595c:	f040 80ce 	bne.w	8005afc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005960:	4b09      	ldr	r3, [pc, #36]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a08      	ldr	r2, [pc, #32]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005966:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800596a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800596c:	f7fd fb84 	bl	8003078 <HAL_GetTick>
 8005970:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005972:	e00b      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005974:	f7fd fb80 	bl	8003078 <HAL_GetTick>
 8005978:	4602      	mov	r2, r0
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	1ad3      	subs	r3, r2, r3
 800597e:	2b64      	cmp	r3, #100	; 0x64
 8005980:	d904      	bls.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005982:	2303      	movs	r3, #3
 8005984:	e0bb      	b.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005986:	bf00      	nop
 8005988:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800598c:	4b5e      	ldr	r3, [pc, #376]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005994:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005998:	d0ec      	beq.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d003      	beq.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d009      	beq.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d02e      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d12a      	bne.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80059c2:	4b51      	ldr	r3, [pc, #324]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80059c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059c8:	0c1b      	lsrs	r3, r3, #16
 80059ca:	f003 0303 	and.w	r3, r3, #3
 80059ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80059d0:	4b4d      	ldr	r3, [pc, #308]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80059d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059d6:	0f1b      	lsrs	r3, r3, #28
 80059d8:	f003 0307 	and.w	r3, r3, #7
 80059dc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	695b      	ldr	r3, [r3, #20]
 80059e2:	019a      	lsls	r2, r3, #6
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	041b      	lsls	r3, r3, #16
 80059e8:	431a      	orrs	r2, r3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	699b      	ldr	r3, [r3, #24]
 80059ee:	061b      	lsls	r3, r3, #24
 80059f0:	431a      	orrs	r2, r3
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	071b      	lsls	r3, r3, #28
 80059f6:	4944      	ldr	r1, [pc, #272]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80059f8:	4313      	orrs	r3, r2
 80059fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80059fe:	4b42      	ldr	r3, [pc, #264]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a04:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a0c:	3b01      	subs	r3, #1
 8005a0e:	021b      	lsls	r3, r3, #8
 8005a10:	493d      	ldr	r1, [pc, #244]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a12:	4313      	orrs	r3, r2
 8005a14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d022      	beq.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a2c:	d11d      	bne.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005a2e:	4b36      	ldr	r3, [pc, #216]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a34:	0e1b      	lsrs	r3, r3, #24
 8005a36:	f003 030f 	and.w	r3, r3, #15
 8005a3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005a3c:	4b32      	ldr	r3, [pc, #200]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a42:	0f1b      	lsrs	r3, r3, #28
 8005a44:	f003 0307 	and.w	r3, r3, #7
 8005a48:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	695b      	ldr	r3, [r3, #20]
 8005a4e:	019a      	lsls	r2, r3, #6
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a1b      	ldr	r3, [r3, #32]
 8005a54:	041b      	lsls	r3, r3, #16
 8005a56:	431a      	orrs	r2, r3
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	061b      	lsls	r3, r3, #24
 8005a5c:	431a      	orrs	r2, r3
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	071b      	lsls	r3, r3, #28
 8005a62:	4929      	ldr	r1, [pc, #164]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a64:	4313      	orrs	r3, r2
 8005a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 0308 	and.w	r3, r3, #8
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d028      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005a76:	4b24      	ldr	r3, [pc, #144]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a7c:	0e1b      	lsrs	r3, r3, #24
 8005a7e:	f003 030f 	and.w	r3, r3, #15
 8005a82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005a84:	4b20      	ldr	r3, [pc, #128]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a8a:	0c1b      	lsrs	r3, r3, #16
 8005a8c:	f003 0303 	and.w	r3, r3, #3
 8005a90:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	695b      	ldr	r3, [r3, #20]
 8005a96:	019a      	lsls	r2, r3, #6
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	041b      	lsls	r3, r3, #16
 8005a9c:	431a      	orrs	r2, r3
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	061b      	lsls	r3, r3, #24
 8005aa2:	431a      	orrs	r2, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	69db      	ldr	r3, [r3, #28]
 8005aa8:	071b      	lsls	r3, r3, #28
 8005aaa:	4917      	ldr	r1, [pc, #92]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005aac:	4313      	orrs	r3, r2
 8005aae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005ab2:	4b15      	ldr	r3, [pc, #84]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ab4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ab8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac0:	4911      	ldr	r1, [pc, #68]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005ac8:	4b0f      	ldr	r3, [pc, #60]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a0e      	ldr	r2, [pc, #56]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ace:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ad2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ad4:	f7fd fad0 	bl	8003078 <HAL_GetTick>
 8005ad8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005ada:	e008      	b.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005adc:	f7fd facc 	bl	8003078 <HAL_GetTick>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	1ad3      	subs	r3, r2, r3
 8005ae6:	2b64      	cmp	r3, #100	; 0x64
 8005ae8:	d901      	bls.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005aea:	2303      	movs	r3, #3
 8005aec:	e007      	b.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005aee:	4b06      	ldr	r3, [pc, #24]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005af6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005afa:	d1ef      	bne.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3720      	adds	r7, #32
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	40023800 	.word	0x40023800

08005b0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b082      	sub	sp, #8
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d101      	bne.n	8005b1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e040      	b.n	8005ba0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d106      	bne.n	8005b34 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f7fc fd62 	bl	80025f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2224      	movs	r2, #36	; 0x24
 8005b38:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f022 0201 	bic.w	r2, r2, #1
 8005b48:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 fb60 	bl	8006210 <UART_SetConfig>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d101      	bne.n	8005b5a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e022      	b.n	8005ba0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d002      	beq.n	8005b68 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 fdb6 	bl	80066d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	685a      	ldr	r2, [r3, #4]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	689a      	ldr	r2, [r3, #8]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f042 0201 	orr.w	r2, r2, #1
 8005b96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f000 fe3d 	bl	8006818 <UART_CheckIdleState>
 8005b9e:	4603      	mov	r3, r0
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3708      	adds	r7, #8
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d101      	bne.n	8005bba <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e02b      	b.n	8005c12 <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2224      	movs	r2, #36	; 0x24
 8005bbe:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f022 0201 	bic.w	r2, r2, #1
 8005bce:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	2200      	movs	r2, #0
 8005be6:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f7fc fd85 	bl	80026f8 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3708      	adds	r7, #8
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}

08005c1a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c1a:	b580      	push	{r7, lr}
 8005c1c:	b08a      	sub	sp, #40	; 0x28
 8005c1e:	af02      	add	r7, sp, #8
 8005c20:	60f8      	str	r0, [r7, #12]
 8005c22:	60b9      	str	r1, [r7, #8]
 8005c24:	603b      	str	r3, [r7, #0]
 8005c26:	4613      	mov	r3, r2
 8005c28:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c2e:	2b20      	cmp	r3, #32
 8005c30:	f040 8081 	bne.w	8005d36 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d002      	beq.n	8005c40 <HAL_UART_Transmit+0x26>
 8005c3a:	88fb      	ldrh	r3, [r7, #6]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d101      	bne.n	8005c44 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	e079      	b.n	8005d38 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d101      	bne.n	8005c52 <HAL_UART_Transmit+0x38>
 8005c4e:	2302      	movs	r3, #2
 8005c50:	e072      	b.n	8005d38 <HAL_UART_Transmit+0x11e>
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2201      	movs	r2, #1
 8005c56:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2221      	movs	r2, #33	; 0x21
 8005c66:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c68:	f7fd fa06 	bl	8003078 <HAL_GetTick>
 8005c6c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	88fa      	ldrh	r2, [r7, #6]
 8005c72:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	88fa      	ldrh	r2, [r7, #6]
 8005c7a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c86:	d108      	bne.n	8005c9a <HAL_UART_Transmit+0x80>
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d104      	bne.n	8005c9a <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005c90:	2300      	movs	r3, #0
 8005c92:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	61bb      	str	r3, [r7, #24]
 8005c98:	e003      	b.n	8005ca2 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005caa:	e02c      	b.n	8005d06 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	9300      	str	r3, [sp, #0]
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	2180      	movs	r1, #128	; 0x80
 8005cb6:	68f8      	ldr	r0, [r7, #12]
 8005cb8:	f000 fdf7 	bl	80068aa <UART_WaitOnFlagUntilTimeout>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d001      	beq.n	8005cc6 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005cc2:	2303      	movs	r3, #3
 8005cc4:	e038      	b.n	8005d38 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d10b      	bne.n	8005ce4 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	881b      	ldrh	r3, [r3, #0]
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005cda:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005cdc:	69bb      	ldr	r3, [r7, #24]
 8005cde:	3302      	adds	r3, #2
 8005ce0:	61bb      	str	r3, [r7, #24]
 8005ce2:	e007      	b.n	8005cf4 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	781a      	ldrb	r2, [r3, #0]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	3b01      	subs	r3, #1
 8005cfe:	b29a      	uxth	r2, r3
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d1cc      	bne.n	8005cac <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	9300      	str	r3, [sp, #0]
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	2140      	movs	r1, #64	; 0x40
 8005d1c:	68f8      	ldr	r0, [r7, #12]
 8005d1e:	f000 fdc4 	bl	80068aa <UART_WaitOnFlagUntilTimeout>
 8005d22:	4603      	mov	r3, r0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d001      	beq.n	8005d2c <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8005d28:	2303      	movs	r3, #3
 8005d2a:	e005      	b.n	8005d38 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2220      	movs	r2, #32
 8005d30:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005d32:	2300      	movs	r3, #0
 8005d34:	e000      	b.n	8005d38 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005d36:	2302      	movs	r3, #2
  }
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3720      	adds	r7, #32
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}

08005d40 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	60f8      	str	r0, [r7, #12]
 8005d48:	60b9      	str	r1, [r7, #8]
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d52:	2b20      	cmp	r3, #32
 8005d54:	d12c      	bne.n	8005db0 <HAL_UART_Receive_DMA+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d002      	beq.n	8005d62 <HAL_UART_Receive_DMA+0x22>
 8005d5c:	88fb      	ldrh	r3, [r7, #6]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d101      	bne.n	8005d66 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	e025      	b.n	8005db2 <HAL_UART_Receive_DMA+0x72>
    }

    __HAL_LOCK(huart);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d101      	bne.n	8005d74 <HAL_UART_Receive_DMA+0x34>
 8005d70:	2302      	movs	r3, #2
 8005d72:	e01e      	b.n	8005db2 <HAL_UART_Receive_DMA+0x72>
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d007      	beq.n	8005da0 <HAL_UART_Receive_DMA+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005d9e:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005da0:	88fb      	ldrh	r3, [r7, #6]
 8005da2:	461a      	mov	r2, r3
 8005da4:	68b9      	ldr	r1, [r7, #8]
 8005da6:	68f8      	ldr	r0, [r7, #12]
 8005da8:	f000 fdfc 	bl	80069a4 <UART_Start_Receive_DMA>
 8005dac:	4603      	mov	r3, r0
 8005dae:	e000      	b.n	8005db2 <HAL_UART_Receive_DMA+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005db0:	2302      	movs	r3, #2
  }
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3710      	adds	r7, #16
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
	...

08005dbc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b088      	sub	sp, #32
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	69db      	ldr	r3, [r3, #28]
 8005dca:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005ddc:	69fa      	ldr	r2, [r7, #28]
 8005dde:	f640 030f 	movw	r3, #2063	; 0x80f
 8005de2:	4013      	ands	r3, r2
 8005de4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d113      	bne.n	8005e14 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	f003 0320 	and.w	r3, r3, #32
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d00e      	beq.n	8005e14 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005df6:	69bb      	ldr	r3, [r7, #24]
 8005df8:	f003 0320 	and.w	r3, r3, #32
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d009      	beq.n	8005e14 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	f000 81cc 	beq.w	80061a2 <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	4798      	blx	r3
      }
      return;
 8005e12:	e1c6      	b.n	80061a2 <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	f000 80e3 	beq.w	8005fe2 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	f003 0301 	and.w	r3, r3, #1
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d105      	bne.n	8005e32 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005e26:	69ba      	ldr	r2, [r7, #24]
 8005e28:	4ba5      	ldr	r3, [pc, #660]	; (80060c0 <HAL_UART_IRQHandler+0x304>)
 8005e2a:	4013      	ands	r3, r2
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	f000 80d8 	beq.w	8005fe2 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	f003 0301 	and.w	r3, r3, #1
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d010      	beq.n	8005e5e <HAL_UART_IRQHandler+0xa2>
 8005e3c:	69bb      	ldr	r3, [r7, #24]
 8005e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d00b      	beq.n	8005e5e <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e54:	f043 0201 	orr.w	r2, r3, #1
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	f003 0302 	and.w	r3, r3, #2
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d010      	beq.n	8005e8a <HAL_UART_IRQHandler+0xce>
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	f003 0301 	and.w	r3, r3, #1
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00b      	beq.n	8005e8a <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2202      	movs	r2, #2
 8005e78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e80:	f043 0204 	orr.w	r2, r3, #4
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	f003 0304 	and.w	r3, r3, #4
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d010      	beq.n	8005eb6 <HAL_UART_IRQHandler+0xfa>
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	f003 0301 	and.w	r3, r3, #1
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d00b      	beq.n	8005eb6 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2204      	movs	r2, #4
 8005ea4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005eac:	f043 0202 	orr.w	r2, r3, #2
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	f003 0308 	and.w	r3, r3, #8
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d015      	beq.n	8005eec <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	f003 0320 	and.w	r3, r3, #32
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d104      	bne.n	8005ed4 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d00b      	beq.n	8005eec <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2208      	movs	r2, #8
 8005eda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ee2:	f043 0208 	orr.w	r2, r3, #8
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d011      	beq.n	8005f1a <HAL_UART_IRQHandler+0x15e>
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d00c      	beq.n	8005f1a <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f08:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f10:	f043 0220 	orr.w	r2, r3, #32
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	f000 8140 	beq.w	80061a6 <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	f003 0320 	and.w	r3, r3, #32
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d00c      	beq.n	8005f4a <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005f30:	69bb      	ldr	r3, [r7, #24]
 8005f32:	f003 0320 	and.w	r3, r3, #32
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d007      	beq.n	8005f4a <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d003      	beq.n	8005f4a <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f50:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f5c:	2b40      	cmp	r3, #64	; 0x40
 8005f5e:	d004      	beq.n	8005f6a <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d031      	beq.n	8005fce <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 fd9b 	bl	8006aa6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f7a:	2b40      	cmp	r3, #64	; 0x40
 8005f7c:	d123      	bne.n	8005fc6 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	689a      	ldr	r2, [r3, #8]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f8c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d013      	beq.n	8005fbe <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f9a:	4a4a      	ldr	r2, [pc, #296]	; (80060c4 <HAL_UART_IRQHandler+0x308>)
 8005f9c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f7fd fb94 	bl	80036d0 <HAL_DMA_Abort_IT>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d017      	beq.n	8005fde <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005fb8:	4610      	mov	r0, r2
 8005fba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fbc:	e00f      	b.n	8005fde <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f7fc fbc0 	bl	8002744 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fc4:	e00b      	b.n	8005fde <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f7fc fbbc 	bl	8002744 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fcc:	e007      	b.n	8005fde <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f7fc fbb8 	bl	8002744 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005fdc:	e0e3      	b.n	80061a6 <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fde:	bf00      	nop
    return;
 8005fe0:	e0e1      	b.n	80061a6 <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	f040 80a7 	bne.w	800613a <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	f003 0310 	and.w	r3, r3, #16
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	f000 80a1 	beq.w	800613a <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005ff8:	69bb      	ldr	r3, [r7, #24]
 8005ffa:	f003 0310 	and.w	r3, r3, #16
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	f000 809b 	beq.w	800613a <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2210      	movs	r2, #16
 800600a:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006016:	2b40      	cmp	r3, #64	; 0x40
 8006018:	d156      	bne.n	80060c8 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8006024:	893b      	ldrh	r3, [r7, #8]
 8006026:	2b00      	cmp	r3, #0
 8006028:	f000 80bf 	beq.w	80061aa <HAL_UART_IRQHandler+0x3ee>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006032:	893a      	ldrh	r2, [r7, #8]
 8006034:	429a      	cmp	r2, r3
 8006036:	f080 80b8 	bcs.w	80061aa <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	893a      	ldrh	r2, [r7, #8]
 800603e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006046:	69db      	ldr	r3, [r3, #28]
 8006048:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800604c:	d02a      	beq.n	80060a4 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800605c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	689a      	ldr	r2, [r3, #8]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f022 0201 	bic.w	r2, r2, #1
 800606c:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	689a      	ldr	r2, [r3, #8]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800607c:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2220      	movs	r2, #32
 8006082:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f022 0210 	bic.w	r2, r2, #16
 8006098:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800609e:	4618      	mov	r0, r3
 80060a0:	f7fd faa6 	bl	80035f0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	1ad3      	subs	r3, r2, r3
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	4619      	mov	r1, r3
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f000 f893 	bl	80061e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80060be:	e074      	b.n	80061aa <HAL_UART_IRQHandler+0x3ee>
 80060c0:	04000120 	.word	0x04000120
 80060c4:	08006c4d 	.word	0x08006c4d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	1ad3      	subs	r3, r2, r3
 80060d8:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d063      	beq.n	80061ae <HAL_UART_IRQHandler+0x3f2>
          && (nb_rx_data > 0U))
 80060e6:	897b      	ldrh	r3, [r7, #10]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d060      	beq.n	80061ae <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80060fa:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	689a      	ldr	r2, [r3, #8]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f022 0201 	bic.w	r2, r2, #1
 800610a:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2220      	movs	r2, #32
 8006110:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f022 0210 	bic.w	r2, r2, #16
 800612c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800612e:	897b      	ldrh	r3, [r7, #10]
 8006130:	4619      	mov	r1, r3
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 f856 	bl	80061e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006138:	e039      	b.n	80061ae <HAL_UART_IRQHandler+0x3f2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006140:	2b00      	cmp	r3, #0
 8006142:	d00d      	beq.n	8006160 <HAL_UART_IRQHandler+0x3a4>
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800614a:	2b00      	cmp	r3, #0
 800614c:	d008      	beq.n	8006160 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006156:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 f84f 	bl	80061fc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800615e:	e029      	b.n	80061b4 <HAL_UART_IRQHandler+0x3f8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006166:	2b00      	cmp	r3, #0
 8006168:	d00d      	beq.n	8006186 <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006170:	2b00      	cmp	r3, #0
 8006172:	d008      	beq.n	8006186 <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006178:	2b00      	cmp	r3, #0
 800617a:	d01a      	beq.n	80061b2 <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	4798      	blx	r3
    }
    return;
 8006184:	e015      	b.n	80061b2 <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800618c:	2b00      	cmp	r3, #0
 800618e:	d011      	beq.n	80061b4 <HAL_UART_IRQHandler+0x3f8>
 8006190:	69bb      	ldr	r3, [r7, #24]
 8006192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006196:	2b00      	cmp	r3, #0
 8006198:	d00c      	beq.n	80061b4 <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 fd6c 	bl	8006c78 <UART_EndTransmit_IT>
    return;
 80061a0:	e008      	b.n	80061b4 <HAL_UART_IRQHandler+0x3f8>
      return;
 80061a2:	bf00      	nop
 80061a4:	e006      	b.n	80061b4 <HAL_UART_IRQHandler+0x3f8>
    return;
 80061a6:	bf00      	nop
 80061a8:	e004      	b.n	80061b4 <HAL_UART_IRQHandler+0x3f8>
      return;
 80061aa:	bf00      	nop
 80061ac:	e002      	b.n	80061b4 <HAL_UART_IRQHandler+0x3f8>
      return;
 80061ae:	bf00      	nop
 80061b0:	e000      	b.n	80061b4 <HAL_UART_IRQHandler+0x3f8>
    return;
 80061b2:	bf00      	nop
  }

}
 80061b4:	3720      	adds	r7, #32
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop

080061bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80061c4:	bf00      	nop
 80061c6:	370c      	adds	r7, #12
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80061d8:	bf00      	nop
 80061da:	370c      	adds	r7, #12
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr

080061e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b083      	sub	sp, #12
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	460b      	mov	r3, r1
 80061ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80061f0:	bf00      	nop
 80061f2:	370c      	adds	r7, #12
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b083      	sub	sp, #12
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006204:	bf00      	nop
 8006206:	370c      	adds	r7, #12
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr

08006210 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b088      	sub	sp, #32
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006218:	2300      	movs	r3, #0
 800621a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	689a      	ldr	r2, [r3, #8]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	691b      	ldr	r3, [r3, #16]
 8006224:	431a      	orrs	r2, r3
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	695b      	ldr	r3, [r3, #20]
 800622a:	431a      	orrs	r2, r3
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	69db      	ldr	r3, [r3, #28]
 8006230:	4313      	orrs	r3, r2
 8006232:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	4ba7      	ldr	r3, [pc, #668]	; (80064d8 <UART_SetConfig+0x2c8>)
 800623c:	4013      	ands	r3, r2
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	6812      	ldr	r2, [r2, #0]
 8006242:	6979      	ldr	r1, [r7, #20]
 8006244:	430b      	orrs	r3, r1
 8006246:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	68da      	ldr	r2, [r3, #12]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	430a      	orrs	r2, r1
 800625c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	699b      	ldr	r3, [r3, #24]
 8006262:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6a1b      	ldr	r3, [r3, #32]
 8006268:	697a      	ldr	r2, [r7, #20]
 800626a:	4313      	orrs	r3, r2
 800626c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	697a      	ldr	r2, [r7, #20]
 800627e:	430a      	orrs	r2, r1
 8006280:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a95      	ldr	r2, [pc, #596]	; (80064dc <UART_SetConfig+0x2cc>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d120      	bne.n	80062ce <UART_SetConfig+0xbe>
 800628c:	4b94      	ldr	r3, [pc, #592]	; (80064e0 <UART_SetConfig+0x2d0>)
 800628e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006292:	f003 0303 	and.w	r3, r3, #3
 8006296:	2b03      	cmp	r3, #3
 8006298:	d816      	bhi.n	80062c8 <UART_SetConfig+0xb8>
 800629a:	a201      	add	r2, pc, #4	; (adr r2, 80062a0 <UART_SetConfig+0x90>)
 800629c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a0:	080062b1 	.word	0x080062b1
 80062a4:	080062bd 	.word	0x080062bd
 80062a8:	080062b7 	.word	0x080062b7
 80062ac:	080062c3 	.word	0x080062c3
 80062b0:	2301      	movs	r3, #1
 80062b2:	77fb      	strb	r3, [r7, #31]
 80062b4:	e14f      	b.n	8006556 <UART_SetConfig+0x346>
 80062b6:	2302      	movs	r3, #2
 80062b8:	77fb      	strb	r3, [r7, #31]
 80062ba:	e14c      	b.n	8006556 <UART_SetConfig+0x346>
 80062bc:	2304      	movs	r3, #4
 80062be:	77fb      	strb	r3, [r7, #31]
 80062c0:	e149      	b.n	8006556 <UART_SetConfig+0x346>
 80062c2:	2308      	movs	r3, #8
 80062c4:	77fb      	strb	r3, [r7, #31]
 80062c6:	e146      	b.n	8006556 <UART_SetConfig+0x346>
 80062c8:	2310      	movs	r3, #16
 80062ca:	77fb      	strb	r3, [r7, #31]
 80062cc:	e143      	b.n	8006556 <UART_SetConfig+0x346>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a84      	ldr	r2, [pc, #528]	; (80064e4 <UART_SetConfig+0x2d4>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d132      	bne.n	800633e <UART_SetConfig+0x12e>
 80062d8:	4b81      	ldr	r3, [pc, #516]	; (80064e0 <UART_SetConfig+0x2d0>)
 80062da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062de:	f003 030c 	and.w	r3, r3, #12
 80062e2:	2b0c      	cmp	r3, #12
 80062e4:	d828      	bhi.n	8006338 <UART_SetConfig+0x128>
 80062e6:	a201      	add	r2, pc, #4	; (adr r2, 80062ec <UART_SetConfig+0xdc>)
 80062e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ec:	08006321 	.word	0x08006321
 80062f0:	08006339 	.word	0x08006339
 80062f4:	08006339 	.word	0x08006339
 80062f8:	08006339 	.word	0x08006339
 80062fc:	0800632d 	.word	0x0800632d
 8006300:	08006339 	.word	0x08006339
 8006304:	08006339 	.word	0x08006339
 8006308:	08006339 	.word	0x08006339
 800630c:	08006327 	.word	0x08006327
 8006310:	08006339 	.word	0x08006339
 8006314:	08006339 	.word	0x08006339
 8006318:	08006339 	.word	0x08006339
 800631c:	08006333 	.word	0x08006333
 8006320:	2300      	movs	r3, #0
 8006322:	77fb      	strb	r3, [r7, #31]
 8006324:	e117      	b.n	8006556 <UART_SetConfig+0x346>
 8006326:	2302      	movs	r3, #2
 8006328:	77fb      	strb	r3, [r7, #31]
 800632a:	e114      	b.n	8006556 <UART_SetConfig+0x346>
 800632c:	2304      	movs	r3, #4
 800632e:	77fb      	strb	r3, [r7, #31]
 8006330:	e111      	b.n	8006556 <UART_SetConfig+0x346>
 8006332:	2308      	movs	r3, #8
 8006334:	77fb      	strb	r3, [r7, #31]
 8006336:	e10e      	b.n	8006556 <UART_SetConfig+0x346>
 8006338:	2310      	movs	r3, #16
 800633a:	77fb      	strb	r3, [r7, #31]
 800633c:	e10b      	b.n	8006556 <UART_SetConfig+0x346>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a69      	ldr	r2, [pc, #420]	; (80064e8 <UART_SetConfig+0x2d8>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d120      	bne.n	800638a <UART_SetConfig+0x17a>
 8006348:	4b65      	ldr	r3, [pc, #404]	; (80064e0 <UART_SetConfig+0x2d0>)
 800634a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800634e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006352:	2b30      	cmp	r3, #48	; 0x30
 8006354:	d013      	beq.n	800637e <UART_SetConfig+0x16e>
 8006356:	2b30      	cmp	r3, #48	; 0x30
 8006358:	d814      	bhi.n	8006384 <UART_SetConfig+0x174>
 800635a:	2b20      	cmp	r3, #32
 800635c:	d009      	beq.n	8006372 <UART_SetConfig+0x162>
 800635e:	2b20      	cmp	r3, #32
 8006360:	d810      	bhi.n	8006384 <UART_SetConfig+0x174>
 8006362:	2b00      	cmp	r3, #0
 8006364:	d002      	beq.n	800636c <UART_SetConfig+0x15c>
 8006366:	2b10      	cmp	r3, #16
 8006368:	d006      	beq.n	8006378 <UART_SetConfig+0x168>
 800636a:	e00b      	b.n	8006384 <UART_SetConfig+0x174>
 800636c:	2300      	movs	r3, #0
 800636e:	77fb      	strb	r3, [r7, #31]
 8006370:	e0f1      	b.n	8006556 <UART_SetConfig+0x346>
 8006372:	2302      	movs	r3, #2
 8006374:	77fb      	strb	r3, [r7, #31]
 8006376:	e0ee      	b.n	8006556 <UART_SetConfig+0x346>
 8006378:	2304      	movs	r3, #4
 800637a:	77fb      	strb	r3, [r7, #31]
 800637c:	e0eb      	b.n	8006556 <UART_SetConfig+0x346>
 800637e:	2308      	movs	r3, #8
 8006380:	77fb      	strb	r3, [r7, #31]
 8006382:	e0e8      	b.n	8006556 <UART_SetConfig+0x346>
 8006384:	2310      	movs	r3, #16
 8006386:	77fb      	strb	r3, [r7, #31]
 8006388:	e0e5      	b.n	8006556 <UART_SetConfig+0x346>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a57      	ldr	r2, [pc, #348]	; (80064ec <UART_SetConfig+0x2dc>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d120      	bne.n	80063d6 <UART_SetConfig+0x1c6>
 8006394:	4b52      	ldr	r3, [pc, #328]	; (80064e0 <UART_SetConfig+0x2d0>)
 8006396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800639a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800639e:	2bc0      	cmp	r3, #192	; 0xc0
 80063a0:	d013      	beq.n	80063ca <UART_SetConfig+0x1ba>
 80063a2:	2bc0      	cmp	r3, #192	; 0xc0
 80063a4:	d814      	bhi.n	80063d0 <UART_SetConfig+0x1c0>
 80063a6:	2b80      	cmp	r3, #128	; 0x80
 80063a8:	d009      	beq.n	80063be <UART_SetConfig+0x1ae>
 80063aa:	2b80      	cmp	r3, #128	; 0x80
 80063ac:	d810      	bhi.n	80063d0 <UART_SetConfig+0x1c0>
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d002      	beq.n	80063b8 <UART_SetConfig+0x1a8>
 80063b2:	2b40      	cmp	r3, #64	; 0x40
 80063b4:	d006      	beq.n	80063c4 <UART_SetConfig+0x1b4>
 80063b6:	e00b      	b.n	80063d0 <UART_SetConfig+0x1c0>
 80063b8:	2300      	movs	r3, #0
 80063ba:	77fb      	strb	r3, [r7, #31]
 80063bc:	e0cb      	b.n	8006556 <UART_SetConfig+0x346>
 80063be:	2302      	movs	r3, #2
 80063c0:	77fb      	strb	r3, [r7, #31]
 80063c2:	e0c8      	b.n	8006556 <UART_SetConfig+0x346>
 80063c4:	2304      	movs	r3, #4
 80063c6:	77fb      	strb	r3, [r7, #31]
 80063c8:	e0c5      	b.n	8006556 <UART_SetConfig+0x346>
 80063ca:	2308      	movs	r3, #8
 80063cc:	77fb      	strb	r3, [r7, #31]
 80063ce:	e0c2      	b.n	8006556 <UART_SetConfig+0x346>
 80063d0:	2310      	movs	r3, #16
 80063d2:	77fb      	strb	r3, [r7, #31]
 80063d4:	e0bf      	b.n	8006556 <UART_SetConfig+0x346>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a45      	ldr	r2, [pc, #276]	; (80064f0 <UART_SetConfig+0x2e0>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d125      	bne.n	800642c <UART_SetConfig+0x21c>
 80063e0:	4b3f      	ldr	r3, [pc, #252]	; (80064e0 <UART_SetConfig+0x2d0>)
 80063e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063ee:	d017      	beq.n	8006420 <UART_SetConfig+0x210>
 80063f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063f4:	d817      	bhi.n	8006426 <UART_SetConfig+0x216>
 80063f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063fa:	d00b      	beq.n	8006414 <UART_SetConfig+0x204>
 80063fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006400:	d811      	bhi.n	8006426 <UART_SetConfig+0x216>
 8006402:	2b00      	cmp	r3, #0
 8006404:	d003      	beq.n	800640e <UART_SetConfig+0x1fe>
 8006406:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800640a:	d006      	beq.n	800641a <UART_SetConfig+0x20a>
 800640c:	e00b      	b.n	8006426 <UART_SetConfig+0x216>
 800640e:	2300      	movs	r3, #0
 8006410:	77fb      	strb	r3, [r7, #31]
 8006412:	e0a0      	b.n	8006556 <UART_SetConfig+0x346>
 8006414:	2302      	movs	r3, #2
 8006416:	77fb      	strb	r3, [r7, #31]
 8006418:	e09d      	b.n	8006556 <UART_SetConfig+0x346>
 800641a:	2304      	movs	r3, #4
 800641c:	77fb      	strb	r3, [r7, #31]
 800641e:	e09a      	b.n	8006556 <UART_SetConfig+0x346>
 8006420:	2308      	movs	r3, #8
 8006422:	77fb      	strb	r3, [r7, #31]
 8006424:	e097      	b.n	8006556 <UART_SetConfig+0x346>
 8006426:	2310      	movs	r3, #16
 8006428:	77fb      	strb	r3, [r7, #31]
 800642a:	e094      	b.n	8006556 <UART_SetConfig+0x346>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a30      	ldr	r2, [pc, #192]	; (80064f4 <UART_SetConfig+0x2e4>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d125      	bne.n	8006482 <UART_SetConfig+0x272>
 8006436:	4b2a      	ldr	r3, [pc, #168]	; (80064e0 <UART_SetConfig+0x2d0>)
 8006438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800643c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006440:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006444:	d017      	beq.n	8006476 <UART_SetConfig+0x266>
 8006446:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800644a:	d817      	bhi.n	800647c <UART_SetConfig+0x26c>
 800644c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006450:	d00b      	beq.n	800646a <UART_SetConfig+0x25a>
 8006452:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006456:	d811      	bhi.n	800647c <UART_SetConfig+0x26c>
 8006458:	2b00      	cmp	r3, #0
 800645a:	d003      	beq.n	8006464 <UART_SetConfig+0x254>
 800645c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006460:	d006      	beq.n	8006470 <UART_SetConfig+0x260>
 8006462:	e00b      	b.n	800647c <UART_SetConfig+0x26c>
 8006464:	2301      	movs	r3, #1
 8006466:	77fb      	strb	r3, [r7, #31]
 8006468:	e075      	b.n	8006556 <UART_SetConfig+0x346>
 800646a:	2302      	movs	r3, #2
 800646c:	77fb      	strb	r3, [r7, #31]
 800646e:	e072      	b.n	8006556 <UART_SetConfig+0x346>
 8006470:	2304      	movs	r3, #4
 8006472:	77fb      	strb	r3, [r7, #31]
 8006474:	e06f      	b.n	8006556 <UART_SetConfig+0x346>
 8006476:	2308      	movs	r3, #8
 8006478:	77fb      	strb	r3, [r7, #31]
 800647a:	e06c      	b.n	8006556 <UART_SetConfig+0x346>
 800647c:	2310      	movs	r3, #16
 800647e:	77fb      	strb	r3, [r7, #31]
 8006480:	e069      	b.n	8006556 <UART_SetConfig+0x346>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a1c      	ldr	r2, [pc, #112]	; (80064f8 <UART_SetConfig+0x2e8>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d137      	bne.n	80064fc <UART_SetConfig+0x2ec>
 800648c:	4b14      	ldr	r3, [pc, #80]	; (80064e0 <UART_SetConfig+0x2d0>)
 800648e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006492:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006496:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800649a:	d017      	beq.n	80064cc <UART_SetConfig+0x2bc>
 800649c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80064a0:	d817      	bhi.n	80064d2 <UART_SetConfig+0x2c2>
 80064a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064a6:	d00b      	beq.n	80064c0 <UART_SetConfig+0x2b0>
 80064a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064ac:	d811      	bhi.n	80064d2 <UART_SetConfig+0x2c2>
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d003      	beq.n	80064ba <UART_SetConfig+0x2aa>
 80064b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064b6:	d006      	beq.n	80064c6 <UART_SetConfig+0x2b6>
 80064b8:	e00b      	b.n	80064d2 <UART_SetConfig+0x2c2>
 80064ba:	2300      	movs	r3, #0
 80064bc:	77fb      	strb	r3, [r7, #31]
 80064be:	e04a      	b.n	8006556 <UART_SetConfig+0x346>
 80064c0:	2302      	movs	r3, #2
 80064c2:	77fb      	strb	r3, [r7, #31]
 80064c4:	e047      	b.n	8006556 <UART_SetConfig+0x346>
 80064c6:	2304      	movs	r3, #4
 80064c8:	77fb      	strb	r3, [r7, #31]
 80064ca:	e044      	b.n	8006556 <UART_SetConfig+0x346>
 80064cc:	2308      	movs	r3, #8
 80064ce:	77fb      	strb	r3, [r7, #31]
 80064d0:	e041      	b.n	8006556 <UART_SetConfig+0x346>
 80064d2:	2310      	movs	r3, #16
 80064d4:	77fb      	strb	r3, [r7, #31]
 80064d6:	e03e      	b.n	8006556 <UART_SetConfig+0x346>
 80064d8:	efff69f3 	.word	0xefff69f3
 80064dc:	40011000 	.word	0x40011000
 80064e0:	40023800 	.word	0x40023800
 80064e4:	40004400 	.word	0x40004400
 80064e8:	40004800 	.word	0x40004800
 80064ec:	40004c00 	.word	0x40004c00
 80064f0:	40005000 	.word	0x40005000
 80064f4:	40011400 	.word	0x40011400
 80064f8:	40007800 	.word	0x40007800
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a71      	ldr	r2, [pc, #452]	; (80066c8 <UART_SetConfig+0x4b8>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d125      	bne.n	8006552 <UART_SetConfig+0x342>
 8006506:	4b71      	ldr	r3, [pc, #452]	; (80066cc <UART_SetConfig+0x4bc>)
 8006508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800650c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006510:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006514:	d017      	beq.n	8006546 <UART_SetConfig+0x336>
 8006516:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800651a:	d817      	bhi.n	800654c <UART_SetConfig+0x33c>
 800651c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006520:	d00b      	beq.n	800653a <UART_SetConfig+0x32a>
 8006522:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006526:	d811      	bhi.n	800654c <UART_SetConfig+0x33c>
 8006528:	2b00      	cmp	r3, #0
 800652a:	d003      	beq.n	8006534 <UART_SetConfig+0x324>
 800652c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006530:	d006      	beq.n	8006540 <UART_SetConfig+0x330>
 8006532:	e00b      	b.n	800654c <UART_SetConfig+0x33c>
 8006534:	2300      	movs	r3, #0
 8006536:	77fb      	strb	r3, [r7, #31]
 8006538:	e00d      	b.n	8006556 <UART_SetConfig+0x346>
 800653a:	2302      	movs	r3, #2
 800653c:	77fb      	strb	r3, [r7, #31]
 800653e:	e00a      	b.n	8006556 <UART_SetConfig+0x346>
 8006540:	2304      	movs	r3, #4
 8006542:	77fb      	strb	r3, [r7, #31]
 8006544:	e007      	b.n	8006556 <UART_SetConfig+0x346>
 8006546:	2308      	movs	r3, #8
 8006548:	77fb      	strb	r3, [r7, #31]
 800654a:	e004      	b.n	8006556 <UART_SetConfig+0x346>
 800654c:	2310      	movs	r3, #16
 800654e:	77fb      	strb	r3, [r7, #31]
 8006550:	e001      	b.n	8006556 <UART_SetConfig+0x346>
 8006552:	2310      	movs	r3, #16
 8006554:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	69db      	ldr	r3, [r3, #28]
 800655a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800655e:	d15b      	bne.n	8006618 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8006560:	7ffb      	ldrb	r3, [r7, #31]
 8006562:	2b08      	cmp	r3, #8
 8006564:	d827      	bhi.n	80065b6 <UART_SetConfig+0x3a6>
 8006566:	a201      	add	r2, pc, #4	; (adr r2, 800656c <UART_SetConfig+0x35c>)
 8006568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800656c:	08006591 	.word	0x08006591
 8006570:	08006599 	.word	0x08006599
 8006574:	080065a1 	.word	0x080065a1
 8006578:	080065b7 	.word	0x080065b7
 800657c:	080065a7 	.word	0x080065a7
 8006580:	080065b7 	.word	0x080065b7
 8006584:	080065b7 	.word	0x080065b7
 8006588:	080065b7 	.word	0x080065b7
 800658c:	080065af 	.word	0x080065af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006590:	f7fe fe6c 	bl	800526c <HAL_RCC_GetPCLK1Freq>
 8006594:	61b8      	str	r0, [r7, #24]
        break;
 8006596:	e013      	b.n	80065c0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006598:	f7fe fe7c 	bl	8005294 <HAL_RCC_GetPCLK2Freq>
 800659c:	61b8      	str	r0, [r7, #24]
        break;
 800659e:	e00f      	b.n	80065c0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065a0:	4b4b      	ldr	r3, [pc, #300]	; (80066d0 <UART_SetConfig+0x4c0>)
 80065a2:	61bb      	str	r3, [r7, #24]
        break;
 80065a4:	e00c      	b.n	80065c0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065a6:	f7fe fd73 	bl	8005090 <HAL_RCC_GetSysClockFreq>
 80065aa:	61b8      	str	r0, [r7, #24]
        break;
 80065ac:	e008      	b.n	80065c0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065b2:	61bb      	str	r3, [r7, #24]
        break;
 80065b4:	e004      	b.n	80065c0 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80065b6:	2300      	movs	r3, #0
 80065b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	77bb      	strb	r3, [r7, #30]
        break;
 80065be:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d074      	beq.n	80066b0 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80065c6:	69bb      	ldr	r3, [r7, #24]
 80065c8:	005a      	lsls	r2, r3, #1
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	085b      	lsrs	r3, r3, #1
 80065d0:	441a      	add	r2, r3
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80065da:	b29b      	uxth	r3, r3
 80065dc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	2b0f      	cmp	r3, #15
 80065e2:	d916      	bls.n	8006612 <UART_SetConfig+0x402>
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065ea:	d212      	bcs.n	8006612 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	f023 030f 	bic.w	r3, r3, #15
 80065f4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	085b      	lsrs	r3, r3, #1
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	f003 0307 	and.w	r3, r3, #7
 8006600:	b29a      	uxth	r2, r3
 8006602:	89fb      	ldrh	r3, [r7, #14]
 8006604:	4313      	orrs	r3, r2
 8006606:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	89fa      	ldrh	r2, [r7, #14]
 800660e:	60da      	str	r2, [r3, #12]
 8006610:	e04e      	b.n	80066b0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	77bb      	strb	r3, [r7, #30]
 8006616:	e04b      	b.n	80066b0 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006618:	7ffb      	ldrb	r3, [r7, #31]
 800661a:	2b08      	cmp	r3, #8
 800661c:	d827      	bhi.n	800666e <UART_SetConfig+0x45e>
 800661e:	a201      	add	r2, pc, #4	; (adr r2, 8006624 <UART_SetConfig+0x414>)
 8006620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006624:	08006649 	.word	0x08006649
 8006628:	08006651 	.word	0x08006651
 800662c:	08006659 	.word	0x08006659
 8006630:	0800666f 	.word	0x0800666f
 8006634:	0800665f 	.word	0x0800665f
 8006638:	0800666f 	.word	0x0800666f
 800663c:	0800666f 	.word	0x0800666f
 8006640:	0800666f 	.word	0x0800666f
 8006644:	08006667 	.word	0x08006667
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006648:	f7fe fe10 	bl	800526c <HAL_RCC_GetPCLK1Freq>
 800664c:	61b8      	str	r0, [r7, #24]
        break;
 800664e:	e013      	b.n	8006678 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006650:	f7fe fe20 	bl	8005294 <HAL_RCC_GetPCLK2Freq>
 8006654:	61b8      	str	r0, [r7, #24]
        break;
 8006656:	e00f      	b.n	8006678 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006658:	4b1d      	ldr	r3, [pc, #116]	; (80066d0 <UART_SetConfig+0x4c0>)
 800665a:	61bb      	str	r3, [r7, #24]
        break;
 800665c:	e00c      	b.n	8006678 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800665e:	f7fe fd17 	bl	8005090 <HAL_RCC_GetSysClockFreq>
 8006662:	61b8      	str	r0, [r7, #24]
        break;
 8006664:	e008      	b.n	8006678 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006666:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800666a:	61bb      	str	r3, [r7, #24]
        break;
 800666c:	e004      	b.n	8006678 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800666e:	2300      	movs	r3, #0
 8006670:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	77bb      	strb	r3, [r7, #30]
        break;
 8006676:	bf00      	nop
    }

    if (pclk != 0U)
 8006678:	69bb      	ldr	r3, [r7, #24]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d018      	beq.n	80066b0 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	085a      	lsrs	r2, r3, #1
 8006684:	69bb      	ldr	r3, [r7, #24]
 8006686:	441a      	add	r2, r3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006690:	b29b      	uxth	r3, r3
 8006692:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	2b0f      	cmp	r3, #15
 8006698:	d908      	bls.n	80066ac <UART_SetConfig+0x49c>
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066a0:	d204      	bcs.n	80066ac <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	693a      	ldr	r2, [r7, #16]
 80066a8:	60da      	str	r2, [r3, #12]
 80066aa:	e001      	b.n	80066b0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2200      	movs	r2, #0
 80066b4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2200      	movs	r2, #0
 80066ba:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80066bc:	7fbb      	ldrb	r3, [r7, #30]
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3720      	adds	r7, #32
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop
 80066c8:	40007c00 	.word	0x40007c00
 80066cc:	40023800 	.word	0x40023800
 80066d0:	00f42400 	.word	0x00f42400

080066d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e0:	f003 0301 	and.w	r3, r3, #1
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d00a      	beq.n	80066fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	430a      	orrs	r2, r1
 80066fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006702:	f003 0302 	and.w	r3, r3, #2
 8006706:	2b00      	cmp	r3, #0
 8006708:	d00a      	beq.n	8006720 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	430a      	orrs	r2, r1
 800671e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006724:	f003 0304 	and.w	r3, r3, #4
 8006728:	2b00      	cmp	r3, #0
 800672a:	d00a      	beq.n	8006742 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	430a      	orrs	r2, r1
 8006740:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006746:	f003 0308 	and.w	r3, r3, #8
 800674a:	2b00      	cmp	r3, #0
 800674c:	d00a      	beq.n	8006764 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	430a      	orrs	r2, r1
 8006762:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006768:	f003 0310 	and.w	r3, r3, #16
 800676c:	2b00      	cmp	r3, #0
 800676e:	d00a      	beq.n	8006786 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	430a      	orrs	r2, r1
 8006784:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678a:	f003 0320 	and.w	r3, r3, #32
 800678e:	2b00      	cmp	r3, #0
 8006790:	d00a      	beq.n	80067a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	430a      	orrs	r2, r1
 80067a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d01a      	beq.n	80067ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	430a      	orrs	r2, r1
 80067c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067d2:	d10a      	bne.n	80067ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	430a      	orrs	r2, r1
 80067e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d00a      	beq.n	800680c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	430a      	orrs	r2, r1
 800680a:	605a      	str	r2, [r3, #4]
  }
}
 800680c:	bf00      	nop
 800680e:	370c      	adds	r7, #12
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr

08006818 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b086      	sub	sp, #24
 800681c:	af02      	add	r7, sp, #8
 800681e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006828:	f7fc fc26 	bl	8003078 <HAL_GetTick>
 800682c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f003 0308 	and.w	r3, r3, #8
 8006838:	2b08      	cmp	r3, #8
 800683a:	d10e      	bne.n	800685a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800683c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006840:	9300      	str	r3, [sp, #0]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2200      	movs	r2, #0
 8006846:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 f82d 	bl	80068aa <UART_WaitOnFlagUntilTimeout>
 8006850:	4603      	mov	r3, r0
 8006852:	2b00      	cmp	r3, #0
 8006854:	d001      	beq.n	800685a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006856:	2303      	movs	r3, #3
 8006858:	e023      	b.n	80068a2 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f003 0304 	and.w	r3, r3, #4
 8006864:	2b04      	cmp	r3, #4
 8006866:	d10e      	bne.n	8006886 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006868:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800686c:	9300      	str	r3, [sp, #0]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2200      	movs	r2, #0
 8006872:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 f817 	bl	80068aa <UART_WaitOnFlagUntilTimeout>
 800687c:	4603      	mov	r3, r0
 800687e:	2b00      	cmp	r3, #0
 8006880:	d001      	beq.n	8006886 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006882:	2303      	movs	r3, #3
 8006884:	e00d      	b.n	80068a2 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2220      	movs	r2, #32
 800688a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2220      	movs	r2, #32
 8006890:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80068a0:	2300      	movs	r3, #0
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3710      	adds	r7, #16
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}

080068aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80068aa:	b580      	push	{r7, lr}
 80068ac:	b084      	sub	sp, #16
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	60f8      	str	r0, [r7, #12]
 80068b2:	60b9      	str	r1, [r7, #8]
 80068b4:	603b      	str	r3, [r7, #0]
 80068b6:	4613      	mov	r3, r2
 80068b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068ba:	e05e      	b.n	800697a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068bc:	69bb      	ldr	r3, [r7, #24]
 80068be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068c2:	d05a      	beq.n	800697a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068c4:	f7fc fbd8 	bl	8003078 <HAL_GetTick>
 80068c8:	4602      	mov	r2, r0
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	1ad3      	subs	r3, r2, r3
 80068ce:	69ba      	ldr	r2, [r7, #24]
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d302      	bcc.n	80068da <UART_WaitOnFlagUntilTimeout+0x30>
 80068d4:	69bb      	ldr	r3, [r7, #24]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d11b      	bne.n	8006912 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80068e8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	689a      	ldr	r2, [r3, #8]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f022 0201 	bic.w	r2, r2, #1
 80068f8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2220      	movs	r2, #32
 80068fe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2220      	movs	r2, #32
 8006904:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2200      	movs	r2, #0
 800690a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800690e:	2303      	movs	r3, #3
 8006910:	e043      	b.n	800699a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f003 0304 	and.w	r3, r3, #4
 800691c:	2b00      	cmp	r3, #0
 800691e:	d02c      	beq.n	800697a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	69db      	ldr	r3, [r3, #28]
 8006926:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800692a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800692e:	d124      	bne.n	800697a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006938:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006948:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	689a      	ldr	r2, [r3, #8]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f022 0201 	bic.w	r2, r2, #1
 8006958:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2220      	movs	r2, #32
 800695e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2220      	movs	r2, #32
 8006964:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2220      	movs	r2, #32
 800696a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2200      	movs	r2, #0
 8006972:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006976:	2303      	movs	r3, #3
 8006978:	e00f      	b.n	800699a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	69da      	ldr	r2, [r3, #28]
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	4013      	ands	r3, r2
 8006984:	68ba      	ldr	r2, [r7, #8]
 8006986:	429a      	cmp	r2, r3
 8006988:	bf0c      	ite	eq
 800698a:	2301      	moveq	r3, #1
 800698c:	2300      	movne	r3, #0
 800698e:	b2db      	uxtb	r3, r3
 8006990:	461a      	mov	r2, r3
 8006992:	79fb      	ldrb	r3, [r7, #7]
 8006994:	429a      	cmp	r2, r3
 8006996:	d091      	beq.n	80068bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	3710      	adds	r7, #16
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
	...

080069a4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b084      	sub	sp, #16
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	60f8      	str	r0, [r7, #12]
 80069ac:	60b9      	str	r1, [r7, #8]
 80069ae:	4613      	mov	r3, r2
 80069b0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	68ba      	ldr	r2, [r7, #8]
 80069b6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	88fa      	ldrh	r2, [r7, #6]
 80069bc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2222      	movs	r2, #34	; 0x22
 80069cc:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d02b      	beq.n	8006a2e <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069da:	4a25      	ldr	r2, [pc, #148]	; (8006a70 <UART_Start_Receive_DMA+0xcc>)
 80069dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069e2:	4a24      	ldr	r2, [pc, #144]	; (8006a74 <UART_Start_Receive_DMA+0xd0>)
 80069e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ea:	4a23      	ldr	r2, [pc, #140]	; (8006a78 <UART_Start_Receive_DMA+0xd4>)
 80069ec:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069f2:	2200      	movs	r2, #0
 80069f4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	3324      	adds	r3, #36	; 0x24
 8006a00:	4619      	mov	r1, r3
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a06:	461a      	mov	r2, r3
 8006a08:	88fb      	ldrh	r3, [r7, #6]
 8006a0a:	f7fc fd91 	bl	8003530 <HAL_DMA_Start_IT>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d00c      	beq.n	8006a2e <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2210      	movs	r2, #16
 8006a18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2220      	movs	r2, #32
 8006a28:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	e01c      	b.n	8006a68 <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2200      	movs	r2, #0
 8006a32:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a44:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	689a      	ldr	r2, [r3, #8]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f042 0201 	orr.w	r2, r2, #1
 8006a54:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	689a      	ldr	r2, [r3, #8]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a64:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8006a66:	2300      	movs	r3, #0
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3710      	adds	r7, #16
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}
 8006a70:	08006b05 	.word	0x08006b05
 8006a74:	08006b99 	.word	0x08006b99
 8006a78:	08006bd1 	.word	0x08006bd1

08006a7c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b083      	sub	sp, #12
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006a92:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2220      	movs	r2, #32
 8006a98:	679a      	str	r2, [r3, #120]	; 0x78
}
 8006a9a:	bf00      	nop
 8006a9c:	370c      	adds	r7, #12
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr

08006aa6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006aa6:	b480      	push	{r7}
 8006aa8:	b083      	sub	sp, #12
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	681a      	ldr	r2, [r3, #0]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006abc:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	689a      	ldr	r2, [r3, #8]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f022 0201 	bic.w	r2, r2, #1
 8006acc:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d107      	bne.n	8006ae6 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f022 0210 	bic.w	r2, r2, #16
 8006ae4:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2220      	movs	r2, #32
 8006aea:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2200      	movs	r2, #0
 8006af0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2200      	movs	r2, #0
 8006af6:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006af8:	bf00      	nop
 8006afa:	370c      	adds	r7, #12
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr

08006b04 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b084      	sub	sp, #16
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b10:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	69db      	ldr	r3, [r3, #28]
 8006b16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b1a:	d02a      	beq.n	8006b72 <UART_DMAReceiveCplt+0x6e>
  {
    huart->RxXferCount = 0U;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b32:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	689a      	ldr	r2, [r3, #8]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f022 0201 	bic.w	r2, r2, #1
 8006b42:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	689a      	ldr	r2, [r3, #8]
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b52:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2220      	movs	r2, #32
 8006b58:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d107      	bne.n	8006b72 <UART_DMAReceiveCplt+0x6e>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f022 0210 	bic.w	r2, r2, #16
 8006b70:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d107      	bne.n	8006b8a <UART_DMAReceiveCplt+0x86>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006b80:	4619      	mov	r1, r3
 8006b82:	68f8      	ldr	r0, [r7, #12]
 8006b84:	f7ff fb2e 	bl	80061e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006b88:	e002      	b.n	8006b90 <UART_DMAReceiveCplt+0x8c>
    HAL_UART_RxCpltCallback(huart);
 8006b8a:	68f8      	ldr	r0, [r7, #12]
 8006b8c:	f7fb fdf0 	bl	8002770 <HAL_UART_RxCpltCallback>
}
 8006b90:	bf00      	nop
 8006b92:	3710      	adds	r7, #16
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d109      	bne.n	8006bc2 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006bb4:	085b      	lsrs	r3, r3, #1
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	4619      	mov	r1, r3
 8006bba:	68f8      	ldr	r0, [r7, #12]
 8006bbc:	f7ff fb12 	bl	80061e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006bc0:	e002      	b.n	8006bc8 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8006bc2:	68f8      	ldr	r0, [r7, #12]
 8006bc4:	f7ff fb04 	bl	80061d0 <HAL_UART_RxHalfCpltCallback>
}
 8006bc8:	bf00      	nop
 8006bca:	3710      	adds	r7, #16
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}

08006bd0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b086      	sub	sp, #24
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bdc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006be2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006be8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bf4:	2b80      	cmp	r3, #128	; 0x80
 8006bf6:	d109      	bne.n	8006c0c <UART_DMAError+0x3c>
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	2b21      	cmp	r3, #33	; 0x21
 8006bfc:	d106      	bne.n	8006c0c <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	2200      	movs	r2, #0
 8006c02:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8006c06:	6978      	ldr	r0, [r7, #20]
 8006c08:	f7ff ff38 	bl	8006a7c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c16:	2b40      	cmp	r3, #64	; 0x40
 8006c18:	d109      	bne.n	8006c2e <UART_DMAError+0x5e>
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2b22      	cmp	r3, #34	; 0x22
 8006c1e:	d106      	bne.n	8006c2e <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	2200      	movs	r2, #0
 8006c24:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8006c28:	6978      	ldr	r0, [r7, #20]
 8006c2a:	f7ff ff3c 	bl	8006aa6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c34:	f043 0210 	orr.w	r2, r3, #16
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c3e:	6978      	ldr	r0, [r7, #20]
 8006c40:	f7fb fd80 	bl	8002744 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c44:	bf00      	nop
 8006c46:	3718      	adds	r7, #24
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b084      	sub	sp, #16
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c58:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c6a:	68f8      	ldr	r0, [r7, #12]
 8006c6c:	f7fb fd6a 	bl	8002744 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c70:	bf00      	nop
 8006c72:	3710      	adds	r7, #16
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b082      	sub	sp, #8
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c8e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2220      	movs	r2, #32
 8006c94:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f7ff fa8d 	bl	80061bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ca2:	bf00      	nop
 8006ca4:	3708      	adds	r7, #8
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}
	...

08006cac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006cac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006ce4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006cb0:	480d      	ldr	r0, [pc, #52]	; (8006ce8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006cb2:	490e      	ldr	r1, [pc, #56]	; (8006cec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006cb4:	4a0e      	ldr	r2, [pc, #56]	; (8006cf0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006cb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006cb8:	e002      	b.n	8006cc0 <LoopCopyDataInit>

08006cba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006cba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006cbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006cbe:	3304      	adds	r3, #4

08006cc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006cc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006cc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006cc4:	d3f9      	bcc.n	8006cba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006cc6:	4a0b      	ldr	r2, [pc, #44]	; (8006cf4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006cc8:	4c0b      	ldr	r4, [pc, #44]	; (8006cf8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006cca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006ccc:	e001      	b.n	8006cd2 <LoopFillZerobss>

08006cce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006cce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006cd0:	3204      	adds	r2, #4

08006cd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006cd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006cd4:	d3fb      	bcc.n	8006cce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006cd6:	f7f9 feed 	bl	8000ab4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006cda:	f000 f817 	bl	8006d0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006cde:	f7fb fa03 	bl	80020e8 <main>
  bx  lr    
 8006ce2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006ce4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8006ce8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006cec:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8006cf0:	0800a8ec 	.word	0x0800a8ec
  ldr r2, =_sbss
 8006cf4:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8006cf8:	20000938 	.word	0x20000938

08006cfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006cfc:	e7fe      	b.n	8006cfc <ADC_IRQHandler>
	...

08006d00 <__errno>:
 8006d00:	4b01      	ldr	r3, [pc, #4]	; (8006d08 <__errno+0x8>)
 8006d02:	6818      	ldr	r0, [r3, #0]
 8006d04:	4770      	bx	lr
 8006d06:	bf00      	nop
 8006d08:	20000010 	.word	0x20000010

08006d0c <__libc_init_array>:
 8006d0c:	b570      	push	{r4, r5, r6, lr}
 8006d0e:	4d0d      	ldr	r5, [pc, #52]	; (8006d44 <__libc_init_array+0x38>)
 8006d10:	4c0d      	ldr	r4, [pc, #52]	; (8006d48 <__libc_init_array+0x3c>)
 8006d12:	1b64      	subs	r4, r4, r5
 8006d14:	10a4      	asrs	r4, r4, #2
 8006d16:	2600      	movs	r6, #0
 8006d18:	42a6      	cmp	r6, r4
 8006d1a:	d109      	bne.n	8006d30 <__libc_init_array+0x24>
 8006d1c:	4d0b      	ldr	r5, [pc, #44]	; (8006d4c <__libc_init_array+0x40>)
 8006d1e:	4c0c      	ldr	r4, [pc, #48]	; (8006d50 <__libc_init_array+0x44>)
 8006d20:	f003 fa26 	bl	800a170 <_init>
 8006d24:	1b64      	subs	r4, r4, r5
 8006d26:	10a4      	asrs	r4, r4, #2
 8006d28:	2600      	movs	r6, #0
 8006d2a:	42a6      	cmp	r6, r4
 8006d2c:	d105      	bne.n	8006d3a <__libc_init_array+0x2e>
 8006d2e:	bd70      	pop	{r4, r5, r6, pc}
 8006d30:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d34:	4798      	blx	r3
 8006d36:	3601      	adds	r6, #1
 8006d38:	e7ee      	b.n	8006d18 <__libc_init_array+0xc>
 8006d3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d3e:	4798      	blx	r3
 8006d40:	3601      	adds	r6, #1
 8006d42:	e7f2      	b.n	8006d2a <__libc_init_array+0x1e>
 8006d44:	0800a8e4 	.word	0x0800a8e4
 8006d48:	0800a8e4 	.word	0x0800a8e4
 8006d4c:	0800a8e4 	.word	0x0800a8e4
 8006d50:	0800a8e8 	.word	0x0800a8e8

08006d54 <memcpy>:
 8006d54:	440a      	add	r2, r1
 8006d56:	4291      	cmp	r1, r2
 8006d58:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d5c:	d100      	bne.n	8006d60 <memcpy+0xc>
 8006d5e:	4770      	bx	lr
 8006d60:	b510      	push	{r4, lr}
 8006d62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d6a:	4291      	cmp	r1, r2
 8006d6c:	d1f9      	bne.n	8006d62 <memcpy+0xe>
 8006d6e:	bd10      	pop	{r4, pc}

08006d70 <memset>:
 8006d70:	4402      	add	r2, r0
 8006d72:	4603      	mov	r3, r0
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d100      	bne.n	8006d7a <memset+0xa>
 8006d78:	4770      	bx	lr
 8006d7a:	f803 1b01 	strb.w	r1, [r3], #1
 8006d7e:	e7f9      	b.n	8006d74 <memset+0x4>

08006d80 <iprintf>:
 8006d80:	b40f      	push	{r0, r1, r2, r3}
 8006d82:	4b0a      	ldr	r3, [pc, #40]	; (8006dac <iprintf+0x2c>)
 8006d84:	b513      	push	{r0, r1, r4, lr}
 8006d86:	681c      	ldr	r4, [r3, #0]
 8006d88:	b124      	cbz	r4, 8006d94 <iprintf+0x14>
 8006d8a:	69a3      	ldr	r3, [r4, #24]
 8006d8c:	b913      	cbnz	r3, 8006d94 <iprintf+0x14>
 8006d8e:	4620      	mov	r0, r4
 8006d90:	f001 f9a0 	bl	80080d4 <__sinit>
 8006d94:	ab05      	add	r3, sp, #20
 8006d96:	9a04      	ldr	r2, [sp, #16]
 8006d98:	68a1      	ldr	r1, [r4, #8]
 8006d9a:	9301      	str	r3, [sp, #4]
 8006d9c:	4620      	mov	r0, r4
 8006d9e:	f002 fd1b 	bl	80097d8 <_vfiprintf_r>
 8006da2:	b002      	add	sp, #8
 8006da4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006da8:	b004      	add	sp, #16
 8006daa:	4770      	bx	lr
 8006dac:	20000010 	.word	0x20000010

08006db0 <putchar>:
 8006db0:	4b09      	ldr	r3, [pc, #36]	; (8006dd8 <putchar+0x28>)
 8006db2:	b513      	push	{r0, r1, r4, lr}
 8006db4:	681c      	ldr	r4, [r3, #0]
 8006db6:	4601      	mov	r1, r0
 8006db8:	b134      	cbz	r4, 8006dc8 <putchar+0x18>
 8006dba:	69a3      	ldr	r3, [r4, #24]
 8006dbc:	b923      	cbnz	r3, 8006dc8 <putchar+0x18>
 8006dbe:	9001      	str	r0, [sp, #4]
 8006dc0:	4620      	mov	r0, r4
 8006dc2:	f001 f987 	bl	80080d4 <__sinit>
 8006dc6:	9901      	ldr	r1, [sp, #4]
 8006dc8:	68a2      	ldr	r2, [r4, #8]
 8006dca:	4620      	mov	r0, r4
 8006dcc:	b002      	add	sp, #8
 8006dce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dd2:	f002 bfc5 	b.w	8009d60 <_putc_r>
 8006dd6:	bf00      	nop
 8006dd8:	20000010 	.word	0x20000010

08006ddc <_puts_r>:
 8006ddc:	b570      	push	{r4, r5, r6, lr}
 8006dde:	460e      	mov	r6, r1
 8006de0:	4605      	mov	r5, r0
 8006de2:	b118      	cbz	r0, 8006dec <_puts_r+0x10>
 8006de4:	6983      	ldr	r3, [r0, #24]
 8006de6:	b90b      	cbnz	r3, 8006dec <_puts_r+0x10>
 8006de8:	f001 f974 	bl	80080d4 <__sinit>
 8006dec:	69ab      	ldr	r3, [r5, #24]
 8006dee:	68ac      	ldr	r4, [r5, #8]
 8006df0:	b913      	cbnz	r3, 8006df8 <_puts_r+0x1c>
 8006df2:	4628      	mov	r0, r5
 8006df4:	f001 f96e 	bl	80080d4 <__sinit>
 8006df8:	4b2c      	ldr	r3, [pc, #176]	; (8006eac <_puts_r+0xd0>)
 8006dfa:	429c      	cmp	r4, r3
 8006dfc:	d120      	bne.n	8006e40 <_puts_r+0x64>
 8006dfe:	686c      	ldr	r4, [r5, #4]
 8006e00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e02:	07db      	lsls	r3, r3, #31
 8006e04:	d405      	bmi.n	8006e12 <_puts_r+0x36>
 8006e06:	89a3      	ldrh	r3, [r4, #12]
 8006e08:	0598      	lsls	r0, r3, #22
 8006e0a:	d402      	bmi.n	8006e12 <_puts_r+0x36>
 8006e0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e0e:	f001 fd6e 	bl	80088ee <__retarget_lock_acquire_recursive>
 8006e12:	89a3      	ldrh	r3, [r4, #12]
 8006e14:	0719      	lsls	r1, r3, #28
 8006e16:	d51d      	bpl.n	8006e54 <_puts_r+0x78>
 8006e18:	6923      	ldr	r3, [r4, #16]
 8006e1a:	b1db      	cbz	r3, 8006e54 <_puts_r+0x78>
 8006e1c:	3e01      	subs	r6, #1
 8006e1e:	68a3      	ldr	r3, [r4, #8]
 8006e20:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006e24:	3b01      	subs	r3, #1
 8006e26:	60a3      	str	r3, [r4, #8]
 8006e28:	bb39      	cbnz	r1, 8006e7a <_puts_r+0x9e>
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	da38      	bge.n	8006ea0 <_puts_r+0xc4>
 8006e2e:	4622      	mov	r2, r4
 8006e30:	210a      	movs	r1, #10
 8006e32:	4628      	mov	r0, r5
 8006e34:	f000 ff74 	bl	8007d20 <__swbuf_r>
 8006e38:	3001      	adds	r0, #1
 8006e3a:	d011      	beq.n	8006e60 <_puts_r+0x84>
 8006e3c:	250a      	movs	r5, #10
 8006e3e:	e011      	b.n	8006e64 <_puts_r+0x88>
 8006e40:	4b1b      	ldr	r3, [pc, #108]	; (8006eb0 <_puts_r+0xd4>)
 8006e42:	429c      	cmp	r4, r3
 8006e44:	d101      	bne.n	8006e4a <_puts_r+0x6e>
 8006e46:	68ac      	ldr	r4, [r5, #8]
 8006e48:	e7da      	b.n	8006e00 <_puts_r+0x24>
 8006e4a:	4b1a      	ldr	r3, [pc, #104]	; (8006eb4 <_puts_r+0xd8>)
 8006e4c:	429c      	cmp	r4, r3
 8006e4e:	bf08      	it	eq
 8006e50:	68ec      	ldreq	r4, [r5, #12]
 8006e52:	e7d5      	b.n	8006e00 <_puts_r+0x24>
 8006e54:	4621      	mov	r1, r4
 8006e56:	4628      	mov	r0, r5
 8006e58:	f000 ffb4 	bl	8007dc4 <__swsetup_r>
 8006e5c:	2800      	cmp	r0, #0
 8006e5e:	d0dd      	beq.n	8006e1c <_puts_r+0x40>
 8006e60:	f04f 35ff 	mov.w	r5, #4294967295
 8006e64:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e66:	07da      	lsls	r2, r3, #31
 8006e68:	d405      	bmi.n	8006e76 <_puts_r+0x9a>
 8006e6a:	89a3      	ldrh	r3, [r4, #12]
 8006e6c:	059b      	lsls	r3, r3, #22
 8006e6e:	d402      	bmi.n	8006e76 <_puts_r+0x9a>
 8006e70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e72:	f001 fd3d 	bl	80088f0 <__retarget_lock_release_recursive>
 8006e76:	4628      	mov	r0, r5
 8006e78:	bd70      	pop	{r4, r5, r6, pc}
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	da04      	bge.n	8006e88 <_puts_r+0xac>
 8006e7e:	69a2      	ldr	r2, [r4, #24]
 8006e80:	429a      	cmp	r2, r3
 8006e82:	dc06      	bgt.n	8006e92 <_puts_r+0xb6>
 8006e84:	290a      	cmp	r1, #10
 8006e86:	d004      	beq.n	8006e92 <_puts_r+0xb6>
 8006e88:	6823      	ldr	r3, [r4, #0]
 8006e8a:	1c5a      	adds	r2, r3, #1
 8006e8c:	6022      	str	r2, [r4, #0]
 8006e8e:	7019      	strb	r1, [r3, #0]
 8006e90:	e7c5      	b.n	8006e1e <_puts_r+0x42>
 8006e92:	4622      	mov	r2, r4
 8006e94:	4628      	mov	r0, r5
 8006e96:	f000 ff43 	bl	8007d20 <__swbuf_r>
 8006e9a:	3001      	adds	r0, #1
 8006e9c:	d1bf      	bne.n	8006e1e <_puts_r+0x42>
 8006e9e:	e7df      	b.n	8006e60 <_puts_r+0x84>
 8006ea0:	6823      	ldr	r3, [r4, #0]
 8006ea2:	250a      	movs	r5, #10
 8006ea4:	1c5a      	adds	r2, r3, #1
 8006ea6:	6022      	str	r2, [r4, #0]
 8006ea8:	701d      	strb	r5, [r3, #0]
 8006eaa:	e7db      	b.n	8006e64 <_puts_r+0x88>
 8006eac:	0800a624 	.word	0x0800a624
 8006eb0:	0800a644 	.word	0x0800a644
 8006eb4:	0800a604 	.word	0x0800a604

08006eb8 <puts>:
 8006eb8:	4b02      	ldr	r3, [pc, #8]	; (8006ec4 <puts+0xc>)
 8006eba:	4601      	mov	r1, r0
 8006ebc:	6818      	ldr	r0, [r3, #0]
 8006ebe:	f7ff bf8d 	b.w	8006ddc <_puts_r>
 8006ec2:	bf00      	nop
 8006ec4:	20000010 	.word	0x20000010

08006ec8 <strcpy>:
 8006ec8:	4603      	mov	r3, r0
 8006eca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ece:	f803 2b01 	strb.w	r2, [r3], #1
 8006ed2:	2a00      	cmp	r2, #0
 8006ed4:	d1f9      	bne.n	8006eca <strcpy+0x2>
 8006ed6:	4770      	bx	lr

08006ed8 <sulp>:
 8006ed8:	b570      	push	{r4, r5, r6, lr}
 8006eda:	4604      	mov	r4, r0
 8006edc:	460d      	mov	r5, r1
 8006ede:	4616      	mov	r6, r2
 8006ee0:	ec45 4b10 	vmov	d0, r4, r5
 8006ee4:	f002 f8e8 	bl	80090b8 <__ulp>
 8006ee8:	b17e      	cbz	r6, 8006f0a <sulp+0x32>
 8006eea:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006eee:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	dd09      	ble.n	8006f0a <sulp+0x32>
 8006ef6:	051b      	lsls	r3, r3, #20
 8006ef8:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8006efc:	2000      	movs	r0, #0
 8006efe:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8006f02:	ec41 0b17 	vmov	d7, r0, r1
 8006f06:	ee20 0b07 	vmul.f64	d0, d0, d7
 8006f0a:	bd70      	pop	{r4, r5, r6, pc}
 8006f0c:	0000      	movs	r0, r0
	...

08006f10 <_strtod_l>:
 8006f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f14:	ed2d 8b0c 	vpush	{d8-d13}
 8006f18:	b09d      	sub	sp, #116	; 0x74
 8006f1a:	461f      	mov	r7, r3
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	9318      	str	r3, [sp, #96]	; 0x60
 8006f20:	4ba6      	ldr	r3, [pc, #664]	; (80071bc <_strtod_l+0x2ac>)
 8006f22:	9213      	str	r2, [sp, #76]	; 0x4c
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	9308      	str	r3, [sp, #32]
 8006f28:	4604      	mov	r4, r0
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	468a      	mov	sl, r1
 8006f2e:	f7f9 f991 	bl	8000254 <strlen>
 8006f32:	f04f 0800 	mov.w	r8, #0
 8006f36:	4605      	mov	r5, r0
 8006f38:	f04f 0900 	mov.w	r9, #0
 8006f3c:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8006f40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006f42:	781a      	ldrb	r2, [r3, #0]
 8006f44:	2a2b      	cmp	r2, #43	; 0x2b
 8006f46:	d04d      	beq.n	8006fe4 <_strtod_l+0xd4>
 8006f48:	d83a      	bhi.n	8006fc0 <_strtod_l+0xb0>
 8006f4a:	2a0d      	cmp	r2, #13
 8006f4c:	d833      	bhi.n	8006fb6 <_strtod_l+0xa6>
 8006f4e:	2a08      	cmp	r2, #8
 8006f50:	d833      	bhi.n	8006fba <_strtod_l+0xaa>
 8006f52:	2a00      	cmp	r2, #0
 8006f54:	d03d      	beq.n	8006fd2 <_strtod_l+0xc2>
 8006f56:	2300      	movs	r3, #0
 8006f58:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f5a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006f5c:	7833      	ldrb	r3, [r6, #0]
 8006f5e:	2b30      	cmp	r3, #48	; 0x30
 8006f60:	f040 80b6 	bne.w	80070d0 <_strtod_l+0x1c0>
 8006f64:	7873      	ldrb	r3, [r6, #1]
 8006f66:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006f6a:	2b58      	cmp	r3, #88	; 0x58
 8006f6c:	d16d      	bne.n	800704a <_strtod_l+0x13a>
 8006f6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f70:	9301      	str	r3, [sp, #4]
 8006f72:	ab18      	add	r3, sp, #96	; 0x60
 8006f74:	9702      	str	r7, [sp, #8]
 8006f76:	9300      	str	r3, [sp, #0]
 8006f78:	4a91      	ldr	r2, [pc, #580]	; (80071c0 <_strtod_l+0x2b0>)
 8006f7a:	ab19      	add	r3, sp, #100	; 0x64
 8006f7c:	a917      	add	r1, sp, #92	; 0x5c
 8006f7e:	4620      	mov	r0, r4
 8006f80:	f001 f9ac 	bl	80082dc <__gethex>
 8006f84:	f010 0507 	ands.w	r5, r0, #7
 8006f88:	4607      	mov	r7, r0
 8006f8a:	d005      	beq.n	8006f98 <_strtod_l+0x88>
 8006f8c:	2d06      	cmp	r5, #6
 8006f8e:	d12b      	bne.n	8006fe8 <_strtod_l+0xd8>
 8006f90:	3601      	adds	r6, #1
 8006f92:	2300      	movs	r3, #0
 8006f94:	9617      	str	r6, [sp, #92]	; 0x5c
 8006f96:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f98:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	f040 856e 	bne.w	8007a7c <_strtod_l+0xb6c>
 8006fa0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fa2:	b1e3      	cbz	r3, 8006fde <_strtod_l+0xce>
 8006fa4:	ec49 8b17 	vmov	d7, r8, r9
 8006fa8:	eeb1 0b47 	vneg.f64	d0, d7
 8006fac:	b01d      	add	sp, #116	; 0x74
 8006fae:	ecbd 8b0c 	vpop	{d8-d13}
 8006fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fb6:	2a20      	cmp	r2, #32
 8006fb8:	d1cd      	bne.n	8006f56 <_strtod_l+0x46>
 8006fba:	3301      	adds	r3, #1
 8006fbc:	9317      	str	r3, [sp, #92]	; 0x5c
 8006fbe:	e7bf      	b.n	8006f40 <_strtod_l+0x30>
 8006fc0:	2a2d      	cmp	r2, #45	; 0x2d
 8006fc2:	d1c8      	bne.n	8006f56 <_strtod_l+0x46>
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	920b      	str	r2, [sp, #44]	; 0x2c
 8006fc8:	1c5a      	adds	r2, r3, #1
 8006fca:	9217      	str	r2, [sp, #92]	; 0x5c
 8006fcc:	785b      	ldrb	r3, [r3, #1]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d1c3      	bne.n	8006f5a <_strtod_l+0x4a>
 8006fd2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006fd4:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	f040 854d 	bne.w	8007a78 <_strtod_l+0xb68>
 8006fde:	ec49 8b10 	vmov	d0, r8, r9
 8006fe2:	e7e3      	b.n	8006fac <_strtod_l+0x9c>
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	e7ee      	b.n	8006fc6 <_strtod_l+0xb6>
 8006fe8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006fea:	b13a      	cbz	r2, 8006ffc <_strtod_l+0xec>
 8006fec:	2135      	movs	r1, #53	; 0x35
 8006fee:	a81a      	add	r0, sp, #104	; 0x68
 8006ff0:	f002 f96e 	bl	80092d0 <__copybits>
 8006ff4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006ff6:	4620      	mov	r0, r4
 8006ff8:	f001 fd32 	bl	8008a60 <_Bfree>
 8006ffc:	3d01      	subs	r5, #1
 8006ffe:	2d05      	cmp	r5, #5
 8007000:	d807      	bhi.n	8007012 <_strtod_l+0x102>
 8007002:	e8df f005 	tbb	[pc, r5]
 8007006:	0b0e      	.short	0x0b0e
 8007008:	030e1d18 	.word	0x030e1d18
 800700c:	f04f 0900 	mov.w	r9, #0
 8007010:	46c8      	mov	r8, r9
 8007012:	073b      	lsls	r3, r7, #28
 8007014:	d5c0      	bpl.n	8006f98 <_strtod_l+0x88>
 8007016:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800701a:	e7bd      	b.n	8006f98 <_strtod_l+0x88>
 800701c:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 8007020:	e7f7      	b.n	8007012 <_strtod_l+0x102>
 8007022:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 8007026:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007028:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800702c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007030:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007034:	e7ed      	b.n	8007012 <_strtod_l+0x102>
 8007036:	f8df 918c 	ldr.w	r9, [pc, #396]	; 80071c4 <_strtod_l+0x2b4>
 800703a:	f04f 0800 	mov.w	r8, #0
 800703e:	e7e8      	b.n	8007012 <_strtod_l+0x102>
 8007040:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007044:	f04f 38ff 	mov.w	r8, #4294967295
 8007048:	e7e3      	b.n	8007012 <_strtod_l+0x102>
 800704a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800704c:	1c5a      	adds	r2, r3, #1
 800704e:	9217      	str	r2, [sp, #92]	; 0x5c
 8007050:	785b      	ldrb	r3, [r3, #1]
 8007052:	2b30      	cmp	r3, #48	; 0x30
 8007054:	d0f9      	beq.n	800704a <_strtod_l+0x13a>
 8007056:	2b00      	cmp	r3, #0
 8007058:	d09e      	beq.n	8006f98 <_strtod_l+0x88>
 800705a:	2301      	movs	r3, #1
 800705c:	9306      	str	r3, [sp, #24]
 800705e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007060:	930c      	str	r3, [sp, #48]	; 0x30
 8007062:	2300      	movs	r3, #0
 8007064:	9304      	str	r3, [sp, #16]
 8007066:	930a      	str	r3, [sp, #40]	; 0x28
 8007068:	461e      	mov	r6, r3
 800706a:	220a      	movs	r2, #10
 800706c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800706e:	f890 b000 	ldrb.w	fp, [r0]
 8007072:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 8007076:	b2d9      	uxtb	r1, r3
 8007078:	2909      	cmp	r1, #9
 800707a:	d92b      	bls.n	80070d4 <_strtod_l+0x1c4>
 800707c:	9908      	ldr	r1, [sp, #32]
 800707e:	462a      	mov	r2, r5
 8007080:	f002 ff17 	bl	8009eb2 <strncmp>
 8007084:	2800      	cmp	r0, #0
 8007086:	d035      	beq.n	80070f4 <_strtod_l+0x1e4>
 8007088:	2000      	movs	r0, #0
 800708a:	465a      	mov	r2, fp
 800708c:	4633      	mov	r3, r6
 800708e:	4683      	mov	fp, r0
 8007090:	4601      	mov	r1, r0
 8007092:	2a65      	cmp	r2, #101	; 0x65
 8007094:	d001      	beq.n	800709a <_strtod_l+0x18a>
 8007096:	2a45      	cmp	r2, #69	; 0x45
 8007098:	d118      	bne.n	80070cc <_strtod_l+0x1bc>
 800709a:	b91b      	cbnz	r3, 80070a4 <_strtod_l+0x194>
 800709c:	9b06      	ldr	r3, [sp, #24]
 800709e:	4303      	orrs	r3, r0
 80070a0:	d097      	beq.n	8006fd2 <_strtod_l+0xc2>
 80070a2:	2300      	movs	r3, #0
 80070a4:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 80070a8:	f10a 0201 	add.w	r2, sl, #1
 80070ac:	9217      	str	r2, [sp, #92]	; 0x5c
 80070ae:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80070b2:	2a2b      	cmp	r2, #43	; 0x2b
 80070b4:	d077      	beq.n	80071a6 <_strtod_l+0x296>
 80070b6:	2a2d      	cmp	r2, #45	; 0x2d
 80070b8:	d07d      	beq.n	80071b6 <_strtod_l+0x2a6>
 80070ba:	f04f 0e00 	mov.w	lr, #0
 80070be:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80070c2:	2d09      	cmp	r5, #9
 80070c4:	f240 8084 	bls.w	80071d0 <_strtod_l+0x2c0>
 80070c8:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 80070cc:	2500      	movs	r5, #0
 80070ce:	e09f      	b.n	8007210 <_strtod_l+0x300>
 80070d0:	2300      	movs	r3, #0
 80070d2:	e7c3      	b.n	800705c <_strtod_l+0x14c>
 80070d4:	2e08      	cmp	r6, #8
 80070d6:	bfd5      	itete	le
 80070d8:	990a      	ldrle	r1, [sp, #40]	; 0x28
 80070da:	9904      	ldrgt	r1, [sp, #16]
 80070dc:	fb02 3301 	mlale	r3, r2, r1, r3
 80070e0:	fb02 3301 	mlagt	r3, r2, r1, r3
 80070e4:	f100 0001 	add.w	r0, r0, #1
 80070e8:	bfd4      	ite	le
 80070ea:	930a      	strle	r3, [sp, #40]	; 0x28
 80070ec:	9304      	strgt	r3, [sp, #16]
 80070ee:	3601      	adds	r6, #1
 80070f0:	9017      	str	r0, [sp, #92]	; 0x5c
 80070f2:	e7bb      	b.n	800706c <_strtod_l+0x15c>
 80070f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80070f6:	195a      	adds	r2, r3, r5
 80070f8:	9217      	str	r2, [sp, #92]	; 0x5c
 80070fa:	5d5a      	ldrb	r2, [r3, r5]
 80070fc:	b3ae      	cbz	r6, 800716a <_strtod_l+0x25a>
 80070fe:	4683      	mov	fp, r0
 8007100:	4633      	mov	r3, r6
 8007102:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007106:	2909      	cmp	r1, #9
 8007108:	d912      	bls.n	8007130 <_strtod_l+0x220>
 800710a:	2101      	movs	r1, #1
 800710c:	e7c1      	b.n	8007092 <_strtod_l+0x182>
 800710e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007110:	1c5a      	adds	r2, r3, #1
 8007112:	9217      	str	r2, [sp, #92]	; 0x5c
 8007114:	785a      	ldrb	r2, [r3, #1]
 8007116:	3001      	adds	r0, #1
 8007118:	2a30      	cmp	r2, #48	; 0x30
 800711a:	d0f8      	beq.n	800710e <_strtod_l+0x1fe>
 800711c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007120:	2b08      	cmp	r3, #8
 8007122:	f200 84b0 	bhi.w	8007a86 <_strtod_l+0xb76>
 8007126:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007128:	930c      	str	r3, [sp, #48]	; 0x30
 800712a:	4683      	mov	fp, r0
 800712c:	2000      	movs	r0, #0
 800712e:	4603      	mov	r3, r0
 8007130:	3a30      	subs	r2, #48	; 0x30
 8007132:	f100 0101 	add.w	r1, r0, #1
 8007136:	d012      	beq.n	800715e <_strtod_l+0x24e>
 8007138:	448b      	add	fp, r1
 800713a:	eb00 0c03 	add.w	ip, r0, r3
 800713e:	4619      	mov	r1, r3
 8007140:	250a      	movs	r5, #10
 8007142:	4561      	cmp	r1, ip
 8007144:	d113      	bne.n	800716e <_strtod_l+0x25e>
 8007146:	1819      	adds	r1, r3, r0
 8007148:	2908      	cmp	r1, #8
 800714a:	f103 0301 	add.w	r3, r3, #1
 800714e:	4403      	add	r3, r0
 8007150:	dc1d      	bgt.n	800718e <_strtod_l+0x27e>
 8007152:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007154:	210a      	movs	r1, #10
 8007156:	fb01 2200 	mla	r2, r1, r0, r2
 800715a:	920a      	str	r2, [sp, #40]	; 0x28
 800715c:	2100      	movs	r1, #0
 800715e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007160:	1c50      	adds	r0, r2, #1
 8007162:	9017      	str	r0, [sp, #92]	; 0x5c
 8007164:	7852      	ldrb	r2, [r2, #1]
 8007166:	4608      	mov	r0, r1
 8007168:	e7cb      	b.n	8007102 <_strtod_l+0x1f2>
 800716a:	4630      	mov	r0, r6
 800716c:	e7d4      	b.n	8007118 <_strtod_l+0x208>
 800716e:	2908      	cmp	r1, #8
 8007170:	dc04      	bgt.n	800717c <_strtod_l+0x26c>
 8007172:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8007174:	436f      	muls	r7, r5
 8007176:	970a      	str	r7, [sp, #40]	; 0x28
 8007178:	3101      	adds	r1, #1
 800717a:	e7e2      	b.n	8007142 <_strtod_l+0x232>
 800717c:	f101 0e01 	add.w	lr, r1, #1
 8007180:	f1be 0f10 	cmp.w	lr, #16
 8007184:	bfde      	ittt	le
 8007186:	9f04      	ldrle	r7, [sp, #16]
 8007188:	436f      	mulle	r7, r5
 800718a:	9704      	strle	r7, [sp, #16]
 800718c:	e7f4      	b.n	8007178 <_strtod_l+0x268>
 800718e:	2b10      	cmp	r3, #16
 8007190:	bfdf      	itttt	le
 8007192:	9804      	ldrle	r0, [sp, #16]
 8007194:	210a      	movle	r1, #10
 8007196:	fb01 2200 	mlale	r2, r1, r0, r2
 800719a:	9204      	strle	r2, [sp, #16]
 800719c:	e7de      	b.n	800715c <_strtod_l+0x24c>
 800719e:	f04f 0b00 	mov.w	fp, #0
 80071a2:	2101      	movs	r1, #1
 80071a4:	e77a      	b.n	800709c <_strtod_l+0x18c>
 80071a6:	f04f 0e00 	mov.w	lr, #0
 80071aa:	f10a 0202 	add.w	r2, sl, #2
 80071ae:	9217      	str	r2, [sp, #92]	; 0x5c
 80071b0:	f89a 2002 	ldrb.w	r2, [sl, #2]
 80071b4:	e783      	b.n	80070be <_strtod_l+0x1ae>
 80071b6:	f04f 0e01 	mov.w	lr, #1
 80071ba:	e7f6      	b.n	80071aa <_strtod_l+0x29a>
 80071bc:	0800a6e0 	.word	0x0800a6e0
 80071c0:	0800a4ac 	.word	0x0800a4ac
 80071c4:	7ff00000 	.word	0x7ff00000
 80071c8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80071ca:	1c55      	adds	r5, r2, #1
 80071cc:	9517      	str	r5, [sp, #92]	; 0x5c
 80071ce:	7852      	ldrb	r2, [r2, #1]
 80071d0:	2a30      	cmp	r2, #48	; 0x30
 80071d2:	d0f9      	beq.n	80071c8 <_strtod_l+0x2b8>
 80071d4:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 80071d8:	2d08      	cmp	r5, #8
 80071da:	f63f af77 	bhi.w	80070cc <_strtod_l+0x1bc>
 80071de:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80071e2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80071e4:	9208      	str	r2, [sp, #32]
 80071e6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80071e8:	1c55      	adds	r5, r2, #1
 80071ea:	9517      	str	r5, [sp, #92]	; 0x5c
 80071ec:	7852      	ldrb	r2, [r2, #1]
 80071ee:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 80071f2:	2f09      	cmp	r7, #9
 80071f4:	d937      	bls.n	8007266 <_strtod_l+0x356>
 80071f6:	9f08      	ldr	r7, [sp, #32]
 80071f8:	1bed      	subs	r5, r5, r7
 80071fa:	2d08      	cmp	r5, #8
 80071fc:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8007200:	dc02      	bgt.n	8007208 <_strtod_l+0x2f8>
 8007202:	4565      	cmp	r5, ip
 8007204:	bfa8      	it	ge
 8007206:	4665      	movge	r5, ip
 8007208:	f1be 0f00 	cmp.w	lr, #0
 800720c:	d000      	beq.n	8007210 <_strtod_l+0x300>
 800720e:	426d      	negs	r5, r5
 8007210:	2b00      	cmp	r3, #0
 8007212:	d14f      	bne.n	80072b4 <_strtod_l+0x3a4>
 8007214:	9b06      	ldr	r3, [sp, #24]
 8007216:	4303      	orrs	r3, r0
 8007218:	f47f aebe 	bne.w	8006f98 <_strtod_l+0x88>
 800721c:	2900      	cmp	r1, #0
 800721e:	f47f aed8 	bne.w	8006fd2 <_strtod_l+0xc2>
 8007222:	2a69      	cmp	r2, #105	; 0x69
 8007224:	d027      	beq.n	8007276 <_strtod_l+0x366>
 8007226:	dc24      	bgt.n	8007272 <_strtod_l+0x362>
 8007228:	2a49      	cmp	r2, #73	; 0x49
 800722a:	d024      	beq.n	8007276 <_strtod_l+0x366>
 800722c:	2a4e      	cmp	r2, #78	; 0x4e
 800722e:	f47f aed0 	bne.w	8006fd2 <_strtod_l+0xc2>
 8007232:	499b      	ldr	r1, [pc, #620]	; (80074a0 <_strtod_l+0x590>)
 8007234:	a817      	add	r0, sp, #92	; 0x5c
 8007236:	f001 faa9 	bl	800878c <__match>
 800723a:	2800      	cmp	r0, #0
 800723c:	f43f aec9 	beq.w	8006fd2 <_strtod_l+0xc2>
 8007240:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007242:	781b      	ldrb	r3, [r3, #0]
 8007244:	2b28      	cmp	r3, #40	; 0x28
 8007246:	d12d      	bne.n	80072a4 <_strtod_l+0x394>
 8007248:	4996      	ldr	r1, [pc, #600]	; (80074a4 <_strtod_l+0x594>)
 800724a:	aa1a      	add	r2, sp, #104	; 0x68
 800724c:	a817      	add	r0, sp, #92	; 0x5c
 800724e:	f001 fab1 	bl	80087b4 <__hexnan>
 8007252:	2805      	cmp	r0, #5
 8007254:	d126      	bne.n	80072a4 <_strtod_l+0x394>
 8007256:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007258:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800725c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007260:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007264:	e698      	b.n	8006f98 <_strtod_l+0x88>
 8007266:	250a      	movs	r5, #10
 8007268:	fb05 250c 	mla	r5, r5, ip, r2
 800726c:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8007270:	e7b9      	b.n	80071e6 <_strtod_l+0x2d6>
 8007272:	2a6e      	cmp	r2, #110	; 0x6e
 8007274:	e7db      	b.n	800722e <_strtod_l+0x31e>
 8007276:	498c      	ldr	r1, [pc, #560]	; (80074a8 <_strtod_l+0x598>)
 8007278:	a817      	add	r0, sp, #92	; 0x5c
 800727a:	f001 fa87 	bl	800878c <__match>
 800727e:	2800      	cmp	r0, #0
 8007280:	f43f aea7 	beq.w	8006fd2 <_strtod_l+0xc2>
 8007284:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007286:	4989      	ldr	r1, [pc, #548]	; (80074ac <_strtod_l+0x59c>)
 8007288:	3b01      	subs	r3, #1
 800728a:	a817      	add	r0, sp, #92	; 0x5c
 800728c:	9317      	str	r3, [sp, #92]	; 0x5c
 800728e:	f001 fa7d 	bl	800878c <__match>
 8007292:	b910      	cbnz	r0, 800729a <_strtod_l+0x38a>
 8007294:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007296:	3301      	adds	r3, #1
 8007298:	9317      	str	r3, [sp, #92]	; 0x5c
 800729a:	f8df 9224 	ldr.w	r9, [pc, #548]	; 80074c0 <_strtod_l+0x5b0>
 800729e:	f04f 0800 	mov.w	r8, #0
 80072a2:	e679      	b.n	8006f98 <_strtod_l+0x88>
 80072a4:	4882      	ldr	r0, [pc, #520]	; (80074b0 <_strtod_l+0x5a0>)
 80072a6:	f002 fda3 	bl	8009df0 <nan>
 80072aa:	ed8d 0b04 	vstr	d0, [sp, #16]
 80072ae:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80072b2:	e671      	b.n	8006f98 <_strtod_l+0x88>
 80072b4:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 80072b8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80072bc:	eba5 020b 	sub.w	r2, r5, fp
 80072c0:	2e00      	cmp	r6, #0
 80072c2:	bf08      	it	eq
 80072c4:	461e      	moveq	r6, r3
 80072c6:	2b10      	cmp	r3, #16
 80072c8:	ed8d 7b08 	vstr	d7, [sp, #32]
 80072cc:	9206      	str	r2, [sp, #24]
 80072ce:	461a      	mov	r2, r3
 80072d0:	bfa8      	it	ge
 80072d2:	2210      	movge	r2, #16
 80072d4:	2b09      	cmp	r3, #9
 80072d6:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 80072da:	dd0e      	ble.n	80072fa <_strtod_l+0x3ea>
 80072dc:	4975      	ldr	r1, [pc, #468]	; (80074b4 <_strtod_l+0x5a4>)
 80072de:	eddd 7a04 	vldr	s15, [sp, #16]
 80072e2:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80072e6:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 80072ea:	ed9d 5b08 	vldr	d5, [sp, #32]
 80072ee:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80072f2:	eea5 7b06 	vfma.f64	d7, d5, d6
 80072f6:	ec59 8b17 	vmov	r8, r9, d7
 80072fa:	2b0f      	cmp	r3, #15
 80072fc:	dc37      	bgt.n	800736e <_strtod_l+0x45e>
 80072fe:	9906      	ldr	r1, [sp, #24]
 8007300:	2900      	cmp	r1, #0
 8007302:	f43f ae49 	beq.w	8006f98 <_strtod_l+0x88>
 8007306:	dd23      	ble.n	8007350 <_strtod_l+0x440>
 8007308:	2916      	cmp	r1, #22
 800730a:	dc0b      	bgt.n	8007324 <_strtod_l+0x414>
 800730c:	4b69      	ldr	r3, [pc, #420]	; (80074b4 <_strtod_l+0x5a4>)
 800730e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8007312:	ed93 7b00 	vldr	d7, [r3]
 8007316:	ec49 8b16 	vmov	d6, r8, r9
 800731a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800731e:	ec59 8b17 	vmov	r8, r9, d7
 8007322:	e639      	b.n	8006f98 <_strtod_l+0x88>
 8007324:	9806      	ldr	r0, [sp, #24]
 8007326:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800732a:	4281      	cmp	r1, r0
 800732c:	db1f      	blt.n	800736e <_strtod_l+0x45e>
 800732e:	4a61      	ldr	r2, [pc, #388]	; (80074b4 <_strtod_l+0x5a4>)
 8007330:	f1c3 030f 	rsb	r3, r3, #15
 8007334:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8007338:	ed91 7b00 	vldr	d7, [r1]
 800733c:	ec49 8b16 	vmov	d6, r8, r9
 8007340:	1ac3      	subs	r3, r0, r3
 8007342:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8007346:	ee27 7b06 	vmul.f64	d7, d7, d6
 800734a:	ed92 6b00 	vldr	d6, [r2]
 800734e:	e7e4      	b.n	800731a <_strtod_l+0x40a>
 8007350:	9906      	ldr	r1, [sp, #24]
 8007352:	3116      	adds	r1, #22
 8007354:	db0b      	blt.n	800736e <_strtod_l+0x45e>
 8007356:	4b57      	ldr	r3, [pc, #348]	; (80074b4 <_strtod_l+0x5a4>)
 8007358:	ebab 0505 	sub.w	r5, fp, r5
 800735c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007360:	ed95 7b00 	vldr	d7, [r5]
 8007364:	ec49 8b16 	vmov	d6, r8, r9
 8007368:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800736c:	e7d7      	b.n	800731e <_strtod_l+0x40e>
 800736e:	9906      	ldr	r1, [sp, #24]
 8007370:	1a9a      	subs	r2, r3, r2
 8007372:	440a      	add	r2, r1
 8007374:	2a00      	cmp	r2, #0
 8007376:	dd74      	ble.n	8007462 <_strtod_l+0x552>
 8007378:	f012 000f 	ands.w	r0, r2, #15
 800737c:	d00a      	beq.n	8007394 <_strtod_l+0x484>
 800737e:	494d      	ldr	r1, [pc, #308]	; (80074b4 <_strtod_l+0x5a4>)
 8007380:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8007384:	ed91 7b00 	vldr	d7, [r1]
 8007388:	ec49 8b16 	vmov	d6, r8, r9
 800738c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007390:	ec59 8b17 	vmov	r8, r9, d7
 8007394:	f032 020f 	bics.w	r2, r2, #15
 8007398:	d04f      	beq.n	800743a <_strtod_l+0x52a>
 800739a:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800739e:	dd22      	ble.n	80073e6 <_strtod_l+0x4d6>
 80073a0:	2500      	movs	r5, #0
 80073a2:	462e      	mov	r6, r5
 80073a4:	950a      	str	r5, [sp, #40]	; 0x28
 80073a6:	462f      	mov	r7, r5
 80073a8:	2322      	movs	r3, #34	; 0x22
 80073aa:	f8df 9114 	ldr.w	r9, [pc, #276]	; 80074c0 <_strtod_l+0x5b0>
 80073ae:	6023      	str	r3, [r4, #0]
 80073b0:	f04f 0800 	mov.w	r8, #0
 80073b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	f43f adee 	beq.w	8006f98 <_strtod_l+0x88>
 80073bc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80073be:	4620      	mov	r0, r4
 80073c0:	f001 fb4e 	bl	8008a60 <_Bfree>
 80073c4:	4639      	mov	r1, r7
 80073c6:	4620      	mov	r0, r4
 80073c8:	f001 fb4a 	bl	8008a60 <_Bfree>
 80073cc:	4631      	mov	r1, r6
 80073ce:	4620      	mov	r0, r4
 80073d0:	f001 fb46 	bl	8008a60 <_Bfree>
 80073d4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80073d6:	4620      	mov	r0, r4
 80073d8:	f001 fb42 	bl	8008a60 <_Bfree>
 80073dc:	4629      	mov	r1, r5
 80073de:	4620      	mov	r0, r4
 80073e0:	f001 fb3e 	bl	8008a60 <_Bfree>
 80073e4:	e5d8      	b.n	8006f98 <_strtod_l+0x88>
 80073e6:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80073ea:	2000      	movs	r0, #0
 80073ec:	4f32      	ldr	r7, [pc, #200]	; (80074b8 <_strtod_l+0x5a8>)
 80073ee:	1112      	asrs	r2, r2, #4
 80073f0:	4601      	mov	r1, r0
 80073f2:	2a01      	cmp	r2, #1
 80073f4:	dc24      	bgt.n	8007440 <_strtod_l+0x530>
 80073f6:	b108      	cbz	r0, 80073fc <_strtod_l+0x4ec>
 80073f8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80073fc:	4a2e      	ldr	r2, [pc, #184]	; (80074b8 <_strtod_l+0x5a8>)
 80073fe:	482f      	ldr	r0, [pc, #188]	; (80074bc <_strtod_l+0x5ac>)
 8007400:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8007404:	ed91 7b00 	vldr	d7, [r1]
 8007408:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800740c:	ec49 8b16 	vmov	d6, r8, r9
 8007410:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007414:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007418:	9905      	ldr	r1, [sp, #20]
 800741a:	4a29      	ldr	r2, [pc, #164]	; (80074c0 <_strtod_l+0x5b0>)
 800741c:	400a      	ands	r2, r1
 800741e:	4282      	cmp	r2, r0
 8007420:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007424:	d8bc      	bhi.n	80073a0 <_strtod_l+0x490>
 8007426:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800742a:	4282      	cmp	r2, r0
 800742c:	bf86      	itte	hi
 800742e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80074c4 <_strtod_l+0x5b4>
 8007432:	f04f 38ff 	movhi.w	r8, #4294967295
 8007436:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800743a:	2200      	movs	r2, #0
 800743c:	9204      	str	r2, [sp, #16]
 800743e:	e07f      	b.n	8007540 <_strtod_l+0x630>
 8007440:	f012 0f01 	tst.w	r2, #1
 8007444:	d00a      	beq.n	800745c <_strtod_l+0x54c>
 8007446:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 800744a:	ed90 7b00 	vldr	d7, [r0]
 800744e:	ed9d 6b04 	vldr	d6, [sp, #16]
 8007452:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007456:	ed8d 7b04 	vstr	d7, [sp, #16]
 800745a:	2001      	movs	r0, #1
 800745c:	3101      	adds	r1, #1
 800745e:	1052      	asrs	r2, r2, #1
 8007460:	e7c7      	b.n	80073f2 <_strtod_l+0x4e2>
 8007462:	d0ea      	beq.n	800743a <_strtod_l+0x52a>
 8007464:	4252      	negs	r2, r2
 8007466:	f012 000f 	ands.w	r0, r2, #15
 800746a:	d00a      	beq.n	8007482 <_strtod_l+0x572>
 800746c:	4911      	ldr	r1, [pc, #68]	; (80074b4 <_strtod_l+0x5a4>)
 800746e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8007472:	ed91 7b00 	vldr	d7, [r1]
 8007476:	ec49 8b16 	vmov	d6, r8, r9
 800747a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800747e:	ec59 8b17 	vmov	r8, r9, d7
 8007482:	1112      	asrs	r2, r2, #4
 8007484:	d0d9      	beq.n	800743a <_strtod_l+0x52a>
 8007486:	2a1f      	cmp	r2, #31
 8007488:	dd1e      	ble.n	80074c8 <_strtod_l+0x5b8>
 800748a:	2500      	movs	r5, #0
 800748c:	462e      	mov	r6, r5
 800748e:	950a      	str	r5, [sp, #40]	; 0x28
 8007490:	462f      	mov	r7, r5
 8007492:	2322      	movs	r3, #34	; 0x22
 8007494:	f04f 0800 	mov.w	r8, #0
 8007498:	f04f 0900 	mov.w	r9, #0
 800749c:	6023      	str	r3, [r4, #0]
 800749e:	e789      	b.n	80073b4 <_strtod_l+0x4a4>
 80074a0:	0800a4a9 	.word	0x0800a4a9
 80074a4:	0800a4c0 	.word	0x0800a4c0
 80074a8:	0800a4a0 	.word	0x0800a4a0
 80074ac:	0800a4a3 	.word	0x0800a4a3
 80074b0:	0800a8da 	.word	0x0800a8da
 80074b4:	0800a798 	.word	0x0800a798
 80074b8:	0800a770 	.word	0x0800a770
 80074bc:	7ca00000 	.word	0x7ca00000
 80074c0:	7ff00000 	.word	0x7ff00000
 80074c4:	7fefffff 	.word	0x7fefffff
 80074c8:	f012 0110 	ands.w	r1, r2, #16
 80074cc:	bf18      	it	ne
 80074ce:	216a      	movne	r1, #106	; 0x6a
 80074d0:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80074d4:	9104      	str	r1, [sp, #16]
 80074d6:	49c0      	ldr	r1, [pc, #768]	; (80077d8 <_strtod_l+0x8c8>)
 80074d8:	2000      	movs	r0, #0
 80074da:	07d7      	lsls	r7, r2, #31
 80074dc:	d508      	bpl.n	80074f0 <_strtod_l+0x5e0>
 80074de:	ed9d 6b08 	vldr	d6, [sp, #32]
 80074e2:	ed91 7b00 	vldr	d7, [r1]
 80074e6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80074ea:	ed8d 7b08 	vstr	d7, [sp, #32]
 80074ee:	2001      	movs	r0, #1
 80074f0:	1052      	asrs	r2, r2, #1
 80074f2:	f101 0108 	add.w	r1, r1, #8
 80074f6:	d1f0      	bne.n	80074da <_strtod_l+0x5ca>
 80074f8:	b108      	cbz	r0, 80074fe <_strtod_l+0x5ee>
 80074fa:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 80074fe:	9a04      	ldr	r2, [sp, #16]
 8007500:	b1ba      	cbz	r2, 8007532 <_strtod_l+0x622>
 8007502:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007506:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 800750a:	2a00      	cmp	r2, #0
 800750c:	4649      	mov	r1, r9
 800750e:	dd10      	ble.n	8007532 <_strtod_l+0x622>
 8007510:	2a1f      	cmp	r2, #31
 8007512:	f340 8132 	ble.w	800777a <_strtod_l+0x86a>
 8007516:	2a34      	cmp	r2, #52	; 0x34
 8007518:	bfde      	ittt	le
 800751a:	3a20      	suble	r2, #32
 800751c:	f04f 30ff 	movle.w	r0, #4294967295
 8007520:	fa00 f202 	lslle.w	r2, r0, r2
 8007524:	f04f 0800 	mov.w	r8, #0
 8007528:	bfcc      	ite	gt
 800752a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800752e:	ea02 0901 	andle.w	r9, r2, r1
 8007532:	ec49 8b17 	vmov	d7, r8, r9
 8007536:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800753a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800753e:	d0a4      	beq.n	800748a <_strtod_l+0x57a>
 8007540:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007542:	9200      	str	r2, [sp, #0]
 8007544:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007546:	4632      	mov	r2, r6
 8007548:	4620      	mov	r0, r4
 800754a:	f001 faf5 	bl	8008b38 <__s2b>
 800754e:	900a      	str	r0, [sp, #40]	; 0x28
 8007550:	2800      	cmp	r0, #0
 8007552:	f43f af25 	beq.w	80073a0 <_strtod_l+0x490>
 8007556:	9b06      	ldr	r3, [sp, #24]
 8007558:	ebab 0505 	sub.w	r5, fp, r5
 800755c:	2b00      	cmp	r3, #0
 800755e:	bfb4      	ite	lt
 8007560:	462b      	movlt	r3, r5
 8007562:	2300      	movge	r3, #0
 8007564:	930c      	str	r3, [sp, #48]	; 0x30
 8007566:	9b06      	ldr	r3, [sp, #24]
 8007568:	ed9f 9b95 	vldr	d9, [pc, #596]	; 80077c0 <_strtod_l+0x8b0>
 800756c:	ed9f ab96 	vldr	d10, [pc, #600]	; 80077c8 <_strtod_l+0x8b8>
 8007570:	ed9f bb97 	vldr	d11, [pc, #604]	; 80077d0 <_strtod_l+0x8c0>
 8007574:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007578:	2500      	movs	r5, #0
 800757a:	9312      	str	r3, [sp, #72]	; 0x48
 800757c:	462e      	mov	r6, r5
 800757e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007580:	4620      	mov	r0, r4
 8007582:	6859      	ldr	r1, [r3, #4]
 8007584:	f001 fa2c 	bl	80089e0 <_Balloc>
 8007588:	4607      	mov	r7, r0
 800758a:	2800      	cmp	r0, #0
 800758c:	f43f af0c 	beq.w	80073a8 <_strtod_l+0x498>
 8007590:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007592:	691a      	ldr	r2, [r3, #16]
 8007594:	3202      	adds	r2, #2
 8007596:	f103 010c 	add.w	r1, r3, #12
 800759a:	0092      	lsls	r2, r2, #2
 800759c:	300c      	adds	r0, #12
 800759e:	f7ff fbd9 	bl	8006d54 <memcpy>
 80075a2:	ec49 8b10 	vmov	d0, r8, r9
 80075a6:	aa1a      	add	r2, sp, #104	; 0x68
 80075a8:	a919      	add	r1, sp, #100	; 0x64
 80075aa:	4620      	mov	r0, r4
 80075ac:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80075b0:	f001 fdfe 	bl	80091b0 <__d2b>
 80075b4:	9018      	str	r0, [sp, #96]	; 0x60
 80075b6:	2800      	cmp	r0, #0
 80075b8:	f43f aef6 	beq.w	80073a8 <_strtod_l+0x498>
 80075bc:	2101      	movs	r1, #1
 80075be:	4620      	mov	r0, r4
 80075c0:	f001 fb54 	bl	8008c6c <__i2b>
 80075c4:	4606      	mov	r6, r0
 80075c6:	2800      	cmp	r0, #0
 80075c8:	f43f aeee 	beq.w	80073a8 <_strtod_l+0x498>
 80075cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80075ce:	991a      	ldr	r1, [sp, #104]	; 0x68
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	bfab      	itete	ge
 80075d4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80075d6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80075d8:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 80075dc:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 80075e0:	bfac      	ite	ge
 80075e2:	eb03 0b02 	addge.w	fp, r3, r2
 80075e6:	eba2 0a03 	sublt.w	sl, r2, r3
 80075ea:	9a04      	ldr	r2, [sp, #16]
 80075ec:	1a9b      	subs	r3, r3, r2
 80075ee:	440b      	add	r3, r1
 80075f0:	4a7a      	ldr	r2, [pc, #488]	; (80077dc <_strtod_l+0x8cc>)
 80075f2:	3b01      	subs	r3, #1
 80075f4:	4293      	cmp	r3, r2
 80075f6:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 80075fa:	f280 80d1 	bge.w	80077a0 <_strtod_l+0x890>
 80075fe:	1ad2      	subs	r2, r2, r3
 8007600:	2a1f      	cmp	r2, #31
 8007602:	eba1 0102 	sub.w	r1, r1, r2
 8007606:	f04f 0001 	mov.w	r0, #1
 800760a:	f300 80bd 	bgt.w	8007788 <_strtod_l+0x878>
 800760e:	fa00 f302 	lsl.w	r3, r0, r2
 8007612:	930e      	str	r3, [sp, #56]	; 0x38
 8007614:	2300      	movs	r3, #0
 8007616:	930d      	str	r3, [sp, #52]	; 0x34
 8007618:	eb0b 0301 	add.w	r3, fp, r1
 800761c:	9a04      	ldr	r2, [sp, #16]
 800761e:	459b      	cmp	fp, r3
 8007620:	448a      	add	sl, r1
 8007622:	4492      	add	sl, r2
 8007624:	465a      	mov	r2, fp
 8007626:	bfa8      	it	ge
 8007628:	461a      	movge	r2, r3
 800762a:	4552      	cmp	r2, sl
 800762c:	bfa8      	it	ge
 800762e:	4652      	movge	r2, sl
 8007630:	2a00      	cmp	r2, #0
 8007632:	bfc2      	ittt	gt
 8007634:	1a9b      	subgt	r3, r3, r2
 8007636:	ebaa 0a02 	subgt.w	sl, sl, r2
 800763a:	ebab 0b02 	subgt.w	fp, fp, r2
 800763e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007640:	2a00      	cmp	r2, #0
 8007642:	dd18      	ble.n	8007676 <_strtod_l+0x766>
 8007644:	4631      	mov	r1, r6
 8007646:	4620      	mov	r0, r4
 8007648:	9315      	str	r3, [sp, #84]	; 0x54
 800764a:	f001 fbcb 	bl	8008de4 <__pow5mult>
 800764e:	4606      	mov	r6, r0
 8007650:	2800      	cmp	r0, #0
 8007652:	f43f aea9 	beq.w	80073a8 <_strtod_l+0x498>
 8007656:	4601      	mov	r1, r0
 8007658:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800765a:	4620      	mov	r0, r4
 800765c:	f001 fb1c 	bl	8008c98 <__multiply>
 8007660:	9014      	str	r0, [sp, #80]	; 0x50
 8007662:	2800      	cmp	r0, #0
 8007664:	f43f aea0 	beq.w	80073a8 <_strtod_l+0x498>
 8007668:	9918      	ldr	r1, [sp, #96]	; 0x60
 800766a:	4620      	mov	r0, r4
 800766c:	f001 f9f8 	bl	8008a60 <_Bfree>
 8007670:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007672:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007674:	9218      	str	r2, [sp, #96]	; 0x60
 8007676:	2b00      	cmp	r3, #0
 8007678:	f300 8097 	bgt.w	80077aa <_strtod_l+0x89a>
 800767c:	9b06      	ldr	r3, [sp, #24]
 800767e:	2b00      	cmp	r3, #0
 8007680:	dd08      	ble.n	8007694 <_strtod_l+0x784>
 8007682:	4639      	mov	r1, r7
 8007684:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007686:	4620      	mov	r0, r4
 8007688:	f001 fbac 	bl	8008de4 <__pow5mult>
 800768c:	4607      	mov	r7, r0
 800768e:	2800      	cmp	r0, #0
 8007690:	f43f ae8a 	beq.w	80073a8 <_strtod_l+0x498>
 8007694:	f1ba 0f00 	cmp.w	sl, #0
 8007698:	dd08      	ble.n	80076ac <_strtod_l+0x79c>
 800769a:	4639      	mov	r1, r7
 800769c:	4652      	mov	r2, sl
 800769e:	4620      	mov	r0, r4
 80076a0:	f001 fbfa 	bl	8008e98 <__lshift>
 80076a4:	4607      	mov	r7, r0
 80076a6:	2800      	cmp	r0, #0
 80076a8:	f43f ae7e 	beq.w	80073a8 <_strtod_l+0x498>
 80076ac:	f1bb 0f00 	cmp.w	fp, #0
 80076b0:	dd08      	ble.n	80076c4 <_strtod_l+0x7b4>
 80076b2:	4631      	mov	r1, r6
 80076b4:	465a      	mov	r2, fp
 80076b6:	4620      	mov	r0, r4
 80076b8:	f001 fbee 	bl	8008e98 <__lshift>
 80076bc:	4606      	mov	r6, r0
 80076be:	2800      	cmp	r0, #0
 80076c0:	f43f ae72 	beq.w	80073a8 <_strtod_l+0x498>
 80076c4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80076c6:	463a      	mov	r2, r7
 80076c8:	4620      	mov	r0, r4
 80076ca:	f001 fc6d 	bl	8008fa8 <__mdiff>
 80076ce:	4605      	mov	r5, r0
 80076d0:	2800      	cmp	r0, #0
 80076d2:	f43f ae69 	beq.w	80073a8 <_strtod_l+0x498>
 80076d6:	2300      	movs	r3, #0
 80076d8:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 80076dc:	60c3      	str	r3, [r0, #12]
 80076de:	4631      	mov	r1, r6
 80076e0:	f001 fc46 	bl	8008f70 <__mcmp>
 80076e4:	2800      	cmp	r0, #0
 80076e6:	da7f      	bge.n	80077e8 <_strtod_l+0x8d8>
 80076e8:	ea5a 0308 	orrs.w	r3, sl, r8
 80076ec:	f040 80a5 	bne.w	800783a <_strtod_l+0x92a>
 80076f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	f040 80a0 	bne.w	800783a <_strtod_l+0x92a>
 80076fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80076fe:	0d1b      	lsrs	r3, r3, #20
 8007700:	051b      	lsls	r3, r3, #20
 8007702:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007706:	f240 8098 	bls.w	800783a <_strtod_l+0x92a>
 800770a:	696b      	ldr	r3, [r5, #20]
 800770c:	b91b      	cbnz	r3, 8007716 <_strtod_l+0x806>
 800770e:	692b      	ldr	r3, [r5, #16]
 8007710:	2b01      	cmp	r3, #1
 8007712:	f340 8092 	ble.w	800783a <_strtod_l+0x92a>
 8007716:	4629      	mov	r1, r5
 8007718:	2201      	movs	r2, #1
 800771a:	4620      	mov	r0, r4
 800771c:	f001 fbbc 	bl	8008e98 <__lshift>
 8007720:	4631      	mov	r1, r6
 8007722:	4605      	mov	r5, r0
 8007724:	f001 fc24 	bl	8008f70 <__mcmp>
 8007728:	2800      	cmp	r0, #0
 800772a:	f340 8086 	ble.w	800783a <_strtod_l+0x92a>
 800772e:	9904      	ldr	r1, [sp, #16]
 8007730:	4a2b      	ldr	r2, [pc, #172]	; (80077e0 <_strtod_l+0x8d0>)
 8007732:	464b      	mov	r3, r9
 8007734:	2900      	cmp	r1, #0
 8007736:	f000 80a1 	beq.w	800787c <_strtod_l+0x96c>
 800773a:	ea02 0109 	and.w	r1, r2, r9
 800773e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007742:	f300 809b 	bgt.w	800787c <_strtod_l+0x96c>
 8007746:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800774a:	f77f aea2 	ble.w	8007492 <_strtod_l+0x582>
 800774e:	4a25      	ldr	r2, [pc, #148]	; (80077e4 <_strtod_l+0x8d4>)
 8007750:	2300      	movs	r3, #0
 8007752:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 8007756:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 800775a:	ec49 8b17 	vmov	d7, r8, r9
 800775e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007762:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007766:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800776a:	4313      	orrs	r3, r2
 800776c:	bf08      	it	eq
 800776e:	2322      	moveq	r3, #34	; 0x22
 8007770:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007774:	bf08      	it	eq
 8007776:	6023      	streq	r3, [r4, #0]
 8007778:	e620      	b.n	80073bc <_strtod_l+0x4ac>
 800777a:	f04f 31ff 	mov.w	r1, #4294967295
 800777e:	fa01 f202 	lsl.w	r2, r1, r2
 8007782:	ea02 0808 	and.w	r8, r2, r8
 8007786:	e6d4      	b.n	8007532 <_strtod_l+0x622>
 8007788:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800778c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8007790:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8007794:	33e2      	adds	r3, #226	; 0xe2
 8007796:	fa00 f303 	lsl.w	r3, r0, r3
 800779a:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 800779e:	e73b      	b.n	8007618 <_strtod_l+0x708>
 80077a0:	2000      	movs	r0, #0
 80077a2:	2301      	movs	r3, #1
 80077a4:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 80077a8:	e736      	b.n	8007618 <_strtod_l+0x708>
 80077aa:	9918      	ldr	r1, [sp, #96]	; 0x60
 80077ac:	461a      	mov	r2, r3
 80077ae:	4620      	mov	r0, r4
 80077b0:	f001 fb72 	bl	8008e98 <__lshift>
 80077b4:	9018      	str	r0, [sp, #96]	; 0x60
 80077b6:	2800      	cmp	r0, #0
 80077b8:	f47f af60 	bne.w	800767c <_strtod_l+0x76c>
 80077bc:	e5f4      	b.n	80073a8 <_strtod_l+0x498>
 80077be:	bf00      	nop
 80077c0:	94a03595 	.word	0x94a03595
 80077c4:	3fcfffff 	.word	0x3fcfffff
 80077c8:	94a03595 	.word	0x94a03595
 80077cc:	3fdfffff 	.word	0x3fdfffff
 80077d0:	35afe535 	.word	0x35afe535
 80077d4:	3fe00000 	.word	0x3fe00000
 80077d8:	0800a4d8 	.word	0x0800a4d8
 80077dc:	fffffc02 	.word	0xfffffc02
 80077e0:	7ff00000 	.word	0x7ff00000
 80077e4:	39500000 	.word	0x39500000
 80077e8:	46cb      	mov	fp, r9
 80077ea:	d165      	bne.n	80078b8 <_strtod_l+0x9a8>
 80077ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80077f0:	f1ba 0f00 	cmp.w	sl, #0
 80077f4:	d02a      	beq.n	800784c <_strtod_l+0x93c>
 80077f6:	4aaa      	ldr	r2, [pc, #680]	; (8007aa0 <_strtod_l+0xb90>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d12b      	bne.n	8007854 <_strtod_l+0x944>
 80077fc:	9b04      	ldr	r3, [sp, #16]
 80077fe:	4641      	mov	r1, r8
 8007800:	b1fb      	cbz	r3, 8007842 <_strtod_l+0x932>
 8007802:	4aa8      	ldr	r2, [pc, #672]	; (8007aa4 <_strtod_l+0xb94>)
 8007804:	ea09 0202 	and.w	r2, r9, r2
 8007808:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800780c:	f04f 30ff 	mov.w	r0, #4294967295
 8007810:	d81a      	bhi.n	8007848 <_strtod_l+0x938>
 8007812:	0d12      	lsrs	r2, r2, #20
 8007814:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007818:	fa00 f303 	lsl.w	r3, r0, r3
 800781c:	4299      	cmp	r1, r3
 800781e:	d119      	bne.n	8007854 <_strtod_l+0x944>
 8007820:	4ba1      	ldr	r3, [pc, #644]	; (8007aa8 <_strtod_l+0xb98>)
 8007822:	459b      	cmp	fp, r3
 8007824:	d102      	bne.n	800782c <_strtod_l+0x91c>
 8007826:	3101      	adds	r1, #1
 8007828:	f43f adbe 	beq.w	80073a8 <_strtod_l+0x498>
 800782c:	4b9d      	ldr	r3, [pc, #628]	; (8007aa4 <_strtod_l+0xb94>)
 800782e:	ea0b 0303 	and.w	r3, fp, r3
 8007832:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8007836:	f04f 0800 	mov.w	r8, #0
 800783a:	9b04      	ldr	r3, [sp, #16]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d186      	bne.n	800774e <_strtod_l+0x83e>
 8007840:	e5bc      	b.n	80073bc <_strtod_l+0x4ac>
 8007842:	f04f 33ff 	mov.w	r3, #4294967295
 8007846:	e7e9      	b.n	800781c <_strtod_l+0x90c>
 8007848:	4603      	mov	r3, r0
 800784a:	e7e7      	b.n	800781c <_strtod_l+0x90c>
 800784c:	ea53 0308 	orrs.w	r3, r3, r8
 8007850:	f43f af6d 	beq.w	800772e <_strtod_l+0x81e>
 8007854:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007856:	b1db      	cbz	r3, 8007890 <_strtod_l+0x980>
 8007858:	ea13 0f0b 	tst.w	r3, fp
 800785c:	d0ed      	beq.n	800783a <_strtod_l+0x92a>
 800785e:	9a04      	ldr	r2, [sp, #16]
 8007860:	4640      	mov	r0, r8
 8007862:	4649      	mov	r1, r9
 8007864:	f1ba 0f00 	cmp.w	sl, #0
 8007868:	d016      	beq.n	8007898 <_strtod_l+0x988>
 800786a:	f7ff fb35 	bl	8006ed8 <sulp>
 800786e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8007872:	ee37 7b00 	vadd.f64	d7, d7, d0
 8007876:	ec59 8b17 	vmov	r8, r9, d7
 800787a:	e7de      	b.n	800783a <_strtod_l+0x92a>
 800787c:	4013      	ands	r3, r2
 800787e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007882:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007886:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800788a:	f04f 38ff 	mov.w	r8, #4294967295
 800788e:	e7d4      	b.n	800783a <_strtod_l+0x92a>
 8007890:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007892:	ea13 0f08 	tst.w	r3, r8
 8007896:	e7e1      	b.n	800785c <_strtod_l+0x94c>
 8007898:	f7ff fb1e 	bl	8006ed8 <sulp>
 800789c:	ed9d 7b08 	vldr	d7, [sp, #32]
 80078a0:	ee37 7b40 	vsub.f64	d7, d7, d0
 80078a4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80078a8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80078ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078b0:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 80078b4:	d1c1      	bne.n	800783a <_strtod_l+0x92a>
 80078b6:	e5ec      	b.n	8007492 <_strtod_l+0x582>
 80078b8:	4631      	mov	r1, r6
 80078ba:	4628      	mov	r0, r5
 80078bc:	f001 fcd4 	bl	8009268 <__ratio>
 80078c0:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 80078c4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80078c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078cc:	d867      	bhi.n	800799e <_strtod_l+0xa8e>
 80078ce:	f1ba 0f00 	cmp.w	sl, #0
 80078d2:	d044      	beq.n	800795e <_strtod_l+0xa4e>
 80078d4:	4b75      	ldr	r3, [pc, #468]	; (8007aac <_strtod_l+0xb9c>)
 80078d6:	2200      	movs	r2, #0
 80078d8:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 80078dc:	4971      	ldr	r1, [pc, #452]	; (8007aa4 <_strtod_l+0xb94>)
 80078de:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8007ab8 <_strtod_l+0xba8>
 80078e2:	ea0b 0001 	and.w	r0, fp, r1
 80078e6:	4560      	cmp	r0, ip
 80078e8:	900d      	str	r0, [sp, #52]	; 0x34
 80078ea:	f040 808b 	bne.w	8007a04 <_strtod_l+0xaf4>
 80078ee:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80078f2:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 80078f6:	ec49 8b10 	vmov	d0, r8, r9
 80078fa:	ec43 2b1c 	vmov	d12, r2, r3
 80078fe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007902:	f001 fbd9 	bl	80090b8 <__ulp>
 8007906:	ec49 8b1d 	vmov	d13, r8, r9
 800790a:	eeac db00 	vfma.f64	d13, d12, d0
 800790e:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 8007912:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007914:	4963      	ldr	r1, [pc, #396]	; (8007aa4 <_strtod_l+0xb94>)
 8007916:	4a66      	ldr	r2, [pc, #408]	; (8007ab0 <_strtod_l+0xba0>)
 8007918:	4019      	ands	r1, r3
 800791a:	4291      	cmp	r1, r2
 800791c:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 8007920:	d947      	bls.n	80079b2 <_strtod_l+0xaa2>
 8007922:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007924:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007928:	4293      	cmp	r3, r2
 800792a:	d103      	bne.n	8007934 <_strtod_l+0xa24>
 800792c:	9b08      	ldr	r3, [sp, #32]
 800792e:	3301      	adds	r3, #1
 8007930:	f43f ad3a 	beq.w	80073a8 <_strtod_l+0x498>
 8007934:	f8df 9170 	ldr.w	r9, [pc, #368]	; 8007aa8 <_strtod_l+0xb98>
 8007938:	f04f 38ff 	mov.w	r8, #4294967295
 800793c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800793e:	4620      	mov	r0, r4
 8007940:	f001 f88e 	bl	8008a60 <_Bfree>
 8007944:	4639      	mov	r1, r7
 8007946:	4620      	mov	r0, r4
 8007948:	f001 f88a 	bl	8008a60 <_Bfree>
 800794c:	4631      	mov	r1, r6
 800794e:	4620      	mov	r0, r4
 8007950:	f001 f886 	bl	8008a60 <_Bfree>
 8007954:	4629      	mov	r1, r5
 8007956:	4620      	mov	r0, r4
 8007958:	f001 f882 	bl	8008a60 <_Bfree>
 800795c:	e60f      	b.n	800757e <_strtod_l+0x66e>
 800795e:	f1b8 0f00 	cmp.w	r8, #0
 8007962:	d112      	bne.n	800798a <_strtod_l+0xa7a>
 8007964:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007968:	b9b3      	cbnz	r3, 8007998 <_strtod_l+0xa88>
 800796a:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800796e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8007972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007976:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800797a:	d401      	bmi.n	8007980 <_strtod_l+0xa70>
 800797c:	ee20 8b08 	vmul.f64	d8, d0, d8
 8007980:	eeb1 7b48 	vneg.f64	d7, d8
 8007984:	ec53 2b17 	vmov	r2, r3, d7
 8007988:	e7a8      	b.n	80078dc <_strtod_l+0x9cc>
 800798a:	f1b8 0f01 	cmp.w	r8, #1
 800798e:	d103      	bne.n	8007998 <_strtod_l+0xa88>
 8007990:	f1b9 0f00 	cmp.w	r9, #0
 8007994:	f43f ad7d 	beq.w	8007492 <_strtod_l+0x582>
 8007998:	4b46      	ldr	r3, [pc, #280]	; (8007ab4 <_strtod_l+0xba4>)
 800799a:	2200      	movs	r2, #0
 800799c:	e79c      	b.n	80078d8 <_strtod_l+0x9c8>
 800799e:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 80079a2:	ee20 8b08 	vmul.f64	d8, d0, d8
 80079a6:	f1ba 0f00 	cmp.w	sl, #0
 80079aa:	d0e9      	beq.n	8007980 <_strtod_l+0xa70>
 80079ac:	ec53 2b18 	vmov	r2, r3, d8
 80079b0:	e794      	b.n	80078dc <_strtod_l+0x9cc>
 80079b2:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80079b6:	9b04      	ldr	r3, [sp, #16]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d1bf      	bne.n	800793c <_strtod_l+0xa2c>
 80079bc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80079c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80079c2:	0d1b      	lsrs	r3, r3, #20
 80079c4:	051b      	lsls	r3, r3, #20
 80079c6:	429a      	cmp	r2, r3
 80079c8:	d1b8      	bne.n	800793c <_strtod_l+0xa2c>
 80079ca:	ec51 0b18 	vmov	r0, r1, d8
 80079ce:	f7f8 fe73 	bl	80006b8 <__aeabi_d2lz>
 80079d2:	f7f8 fe2b 	bl	800062c <__aeabi_l2d>
 80079d6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80079da:	ec41 0b17 	vmov	d7, r0, r1
 80079de:	ea43 0308 	orr.w	r3, r3, r8
 80079e2:	ea53 030a 	orrs.w	r3, r3, sl
 80079e6:	ee38 8b47 	vsub.f64	d8, d8, d7
 80079ea:	d03e      	beq.n	8007a6a <_strtod_l+0xb5a>
 80079ec:	eeb4 8bca 	vcmpe.f64	d8, d10
 80079f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079f4:	f53f ace2 	bmi.w	80073bc <_strtod_l+0x4ac>
 80079f8:	eeb4 8bcb 	vcmpe.f64	d8, d11
 80079fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a00:	dd9c      	ble.n	800793c <_strtod_l+0xa2c>
 8007a02:	e4db      	b.n	80073bc <_strtod_l+0x4ac>
 8007a04:	9904      	ldr	r1, [sp, #16]
 8007a06:	b301      	cbz	r1, 8007a4a <_strtod_l+0xb3a>
 8007a08:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007a0a:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8007a0e:	d81c      	bhi.n	8007a4a <_strtod_l+0xb3a>
 8007a10:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8007a98 <_strtod_l+0xb88>
 8007a14:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a1c:	d811      	bhi.n	8007a42 <_strtod_l+0xb32>
 8007a1e:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8007a22:	ee18 3a10 	vmov	r3, s16
 8007a26:	2b01      	cmp	r3, #1
 8007a28:	bf38      	it	cc
 8007a2a:	2301      	movcc	r3, #1
 8007a2c:	ee08 3a10 	vmov	s16, r3
 8007a30:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8007a34:	f1ba 0f00 	cmp.w	sl, #0
 8007a38:	d114      	bne.n	8007a64 <_strtod_l+0xb54>
 8007a3a:	eeb1 7b48 	vneg.f64	d7, d8
 8007a3e:	ec53 2b17 	vmov	r2, r3, d7
 8007a42:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007a44:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 8007a48:	1a0b      	subs	r3, r1, r0
 8007a4a:	ed9d 0b08 	vldr	d0, [sp, #32]
 8007a4e:	ec43 2b1c 	vmov	d12, r2, r3
 8007a52:	f001 fb31 	bl	80090b8 <__ulp>
 8007a56:	ed9d 7b08 	vldr	d7, [sp, #32]
 8007a5a:	eeac 7b00 	vfma.f64	d7, d12, d0
 8007a5e:	ec59 8b17 	vmov	r8, r9, d7
 8007a62:	e7a8      	b.n	80079b6 <_strtod_l+0xaa6>
 8007a64:	ec53 2b18 	vmov	r2, r3, d8
 8007a68:	e7eb      	b.n	8007a42 <_strtod_l+0xb32>
 8007a6a:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8007a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a72:	f57f af63 	bpl.w	800793c <_strtod_l+0xa2c>
 8007a76:	e4a1      	b.n	80073bc <_strtod_l+0x4ac>
 8007a78:	2300      	movs	r3, #0
 8007a7a:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a7c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007a7e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007a80:	6013      	str	r3, [r2, #0]
 8007a82:	f7ff ba8d 	b.w	8006fa0 <_strtod_l+0x90>
 8007a86:	2a65      	cmp	r2, #101	; 0x65
 8007a88:	f43f ab89 	beq.w	800719e <_strtod_l+0x28e>
 8007a8c:	2a45      	cmp	r2, #69	; 0x45
 8007a8e:	f43f ab86 	beq.w	800719e <_strtod_l+0x28e>
 8007a92:	2101      	movs	r1, #1
 8007a94:	f7ff bbbe 	b.w	8007214 <_strtod_l+0x304>
 8007a98:	ffc00000 	.word	0xffc00000
 8007a9c:	41dfffff 	.word	0x41dfffff
 8007aa0:	000fffff 	.word	0x000fffff
 8007aa4:	7ff00000 	.word	0x7ff00000
 8007aa8:	7fefffff 	.word	0x7fefffff
 8007aac:	3ff00000 	.word	0x3ff00000
 8007ab0:	7c9fffff 	.word	0x7c9fffff
 8007ab4:	bff00000 	.word	0xbff00000
 8007ab8:	7fe00000 	.word	0x7fe00000
 8007abc:	00000000 	.word	0x00000000

08007ac0 <strtof>:
 8007ac0:	b510      	push	{r4, lr}
 8007ac2:	4c1d      	ldr	r4, [pc, #116]	; (8007b38 <strtof+0x78>)
 8007ac4:	4b1d      	ldr	r3, [pc, #116]	; (8007b3c <strtof+0x7c>)
 8007ac6:	460a      	mov	r2, r1
 8007ac8:	4601      	mov	r1, r0
 8007aca:	6820      	ldr	r0, [r4, #0]
 8007acc:	f7ff fa20 	bl	8006f10 <_strtod_l>
 8007ad0:	eeb4 0b40 	vcmp.f64	d0, d0
 8007ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ad8:	eeb0 7b40 	vmov.f64	d7, d0
 8007adc:	d70d      	bvc.n	8007afa <strtof+0x3a>
 8007ade:	ee17 3a90 	vmov	r3, s15
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	4816      	ldr	r0, [pc, #88]	; (8007b40 <strtof+0x80>)
 8007ae6:	da04      	bge.n	8007af2 <strtof+0x32>
 8007ae8:	f002 f99a 	bl	8009e20 <nanf>
 8007aec:	eeb1 0a40 	vneg.f32	s0, s0
 8007af0:	bd10      	pop	{r4, pc}
 8007af2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007af6:	f002 b993 	b.w	8009e20 <nanf>
 8007afa:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8007afe:	eddf 6a11 	vldr	s13, [pc, #68]	; 8007b44 <strtof+0x84>
 8007b02:	eeb0 6ac0 	vabs.f32	s12, s0
 8007b06:	eeb4 6a66 	vcmp.f32	s12, s13
 8007b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b0e:	ddef      	ble.n	8007af0 <strtof+0x30>
 8007b10:	eeb0 7bc7 	vabs.f64	d7, d7
 8007b14:	ed9f 6b06 	vldr	d6, [pc, #24]	; 8007b30 <strtof+0x70>
 8007b18:	eeb4 7b46 	vcmp.f64	d7, d6
 8007b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b20:	bfde      	ittt	le
 8007b22:	6823      	ldrle	r3, [r4, #0]
 8007b24:	2222      	movle	r2, #34	; 0x22
 8007b26:	601a      	strle	r2, [r3, #0]
 8007b28:	e7e2      	b.n	8007af0 <strtof+0x30>
 8007b2a:	bf00      	nop
 8007b2c:	f3af 8000 	nop.w
 8007b30:	ffffffff 	.word	0xffffffff
 8007b34:	7fefffff 	.word	0x7fefffff
 8007b38:	20000010 	.word	0x20000010
 8007b3c:	20000078 	.word	0x20000078
 8007b40:	0800a8da 	.word	0x0800a8da
 8007b44:	7f7fffff 	.word	0x7f7fffff

08007b48 <__strtok_r>:
 8007b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b4a:	b908      	cbnz	r0, 8007b50 <__strtok_r+0x8>
 8007b4c:	6810      	ldr	r0, [r2, #0]
 8007b4e:	b188      	cbz	r0, 8007b74 <__strtok_r+0x2c>
 8007b50:	4604      	mov	r4, r0
 8007b52:	4620      	mov	r0, r4
 8007b54:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007b58:	460f      	mov	r7, r1
 8007b5a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007b5e:	b91e      	cbnz	r6, 8007b68 <__strtok_r+0x20>
 8007b60:	b965      	cbnz	r5, 8007b7c <__strtok_r+0x34>
 8007b62:	6015      	str	r5, [r2, #0]
 8007b64:	4628      	mov	r0, r5
 8007b66:	e005      	b.n	8007b74 <__strtok_r+0x2c>
 8007b68:	42b5      	cmp	r5, r6
 8007b6a:	d1f6      	bne.n	8007b5a <__strtok_r+0x12>
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d1f0      	bne.n	8007b52 <__strtok_r+0xa>
 8007b70:	6014      	str	r4, [r2, #0]
 8007b72:	7003      	strb	r3, [r0, #0]
 8007b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b76:	461c      	mov	r4, r3
 8007b78:	e00c      	b.n	8007b94 <__strtok_r+0x4c>
 8007b7a:	b915      	cbnz	r5, 8007b82 <__strtok_r+0x3a>
 8007b7c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007b80:	460e      	mov	r6, r1
 8007b82:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007b86:	42ab      	cmp	r3, r5
 8007b88:	d1f7      	bne.n	8007b7a <__strtok_r+0x32>
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d0f3      	beq.n	8007b76 <__strtok_r+0x2e>
 8007b8e:	2300      	movs	r3, #0
 8007b90:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007b94:	6014      	str	r4, [r2, #0]
 8007b96:	e7ed      	b.n	8007b74 <__strtok_r+0x2c>

08007b98 <strtok_r>:
 8007b98:	2301      	movs	r3, #1
 8007b9a:	f7ff bfd5 	b.w	8007b48 <__strtok_r>
	...

08007ba0 <_strtoul_l.isra.0>:
 8007ba0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007ba4:	4e3b      	ldr	r6, [pc, #236]	; (8007c94 <_strtoul_l.isra.0+0xf4>)
 8007ba6:	4686      	mov	lr, r0
 8007ba8:	468c      	mov	ip, r1
 8007baa:	4660      	mov	r0, ip
 8007bac:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8007bb0:	5da5      	ldrb	r5, [r4, r6]
 8007bb2:	f015 0508 	ands.w	r5, r5, #8
 8007bb6:	d1f8      	bne.n	8007baa <_strtoul_l.isra.0+0xa>
 8007bb8:	2c2d      	cmp	r4, #45	; 0x2d
 8007bba:	d134      	bne.n	8007c26 <_strtoul_l.isra.0+0x86>
 8007bbc:	f89c 4000 	ldrb.w	r4, [ip]
 8007bc0:	f04f 0801 	mov.w	r8, #1
 8007bc4:	f100 0c02 	add.w	ip, r0, #2
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d05e      	beq.n	8007c8a <_strtoul_l.isra.0+0xea>
 8007bcc:	2b10      	cmp	r3, #16
 8007bce:	d10c      	bne.n	8007bea <_strtoul_l.isra.0+0x4a>
 8007bd0:	2c30      	cmp	r4, #48	; 0x30
 8007bd2:	d10a      	bne.n	8007bea <_strtoul_l.isra.0+0x4a>
 8007bd4:	f89c 0000 	ldrb.w	r0, [ip]
 8007bd8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8007bdc:	2858      	cmp	r0, #88	; 0x58
 8007bde:	d14f      	bne.n	8007c80 <_strtoul_l.isra.0+0xe0>
 8007be0:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8007be4:	2310      	movs	r3, #16
 8007be6:	f10c 0c02 	add.w	ip, ip, #2
 8007bea:	f04f 37ff 	mov.w	r7, #4294967295
 8007bee:	2500      	movs	r5, #0
 8007bf0:	fbb7 f7f3 	udiv	r7, r7, r3
 8007bf4:	fb03 f907 	mul.w	r9, r3, r7
 8007bf8:	ea6f 0909 	mvn.w	r9, r9
 8007bfc:	4628      	mov	r0, r5
 8007bfe:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8007c02:	2e09      	cmp	r6, #9
 8007c04:	d818      	bhi.n	8007c38 <_strtoul_l.isra.0+0x98>
 8007c06:	4634      	mov	r4, r6
 8007c08:	42a3      	cmp	r3, r4
 8007c0a:	dd24      	ble.n	8007c56 <_strtoul_l.isra.0+0xb6>
 8007c0c:	2d00      	cmp	r5, #0
 8007c0e:	db1f      	blt.n	8007c50 <_strtoul_l.isra.0+0xb0>
 8007c10:	4287      	cmp	r7, r0
 8007c12:	d31d      	bcc.n	8007c50 <_strtoul_l.isra.0+0xb0>
 8007c14:	d101      	bne.n	8007c1a <_strtoul_l.isra.0+0x7a>
 8007c16:	45a1      	cmp	r9, r4
 8007c18:	db1a      	blt.n	8007c50 <_strtoul_l.isra.0+0xb0>
 8007c1a:	fb00 4003 	mla	r0, r0, r3, r4
 8007c1e:	2501      	movs	r5, #1
 8007c20:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8007c24:	e7eb      	b.n	8007bfe <_strtoul_l.isra.0+0x5e>
 8007c26:	2c2b      	cmp	r4, #43	; 0x2b
 8007c28:	bf08      	it	eq
 8007c2a:	f89c 4000 	ldrbeq.w	r4, [ip]
 8007c2e:	46a8      	mov	r8, r5
 8007c30:	bf08      	it	eq
 8007c32:	f100 0c02 	addeq.w	ip, r0, #2
 8007c36:	e7c7      	b.n	8007bc8 <_strtoul_l.isra.0+0x28>
 8007c38:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8007c3c:	2e19      	cmp	r6, #25
 8007c3e:	d801      	bhi.n	8007c44 <_strtoul_l.isra.0+0xa4>
 8007c40:	3c37      	subs	r4, #55	; 0x37
 8007c42:	e7e1      	b.n	8007c08 <_strtoul_l.isra.0+0x68>
 8007c44:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8007c48:	2e19      	cmp	r6, #25
 8007c4a:	d804      	bhi.n	8007c56 <_strtoul_l.isra.0+0xb6>
 8007c4c:	3c57      	subs	r4, #87	; 0x57
 8007c4e:	e7db      	b.n	8007c08 <_strtoul_l.isra.0+0x68>
 8007c50:	f04f 35ff 	mov.w	r5, #4294967295
 8007c54:	e7e4      	b.n	8007c20 <_strtoul_l.isra.0+0x80>
 8007c56:	2d00      	cmp	r5, #0
 8007c58:	da07      	bge.n	8007c6a <_strtoul_l.isra.0+0xca>
 8007c5a:	2322      	movs	r3, #34	; 0x22
 8007c5c:	f8ce 3000 	str.w	r3, [lr]
 8007c60:	f04f 30ff 	mov.w	r0, #4294967295
 8007c64:	b942      	cbnz	r2, 8007c78 <_strtoul_l.isra.0+0xd8>
 8007c66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c6a:	f1b8 0f00 	cmp.w	r8, #0
 8007c6e:	d000      	beq.n	8007c72 <_strtoul_l.isra.0+0xd2>
 8007c70:	4240      	negs	r0, r0
 8007c72:	2a00      	cmp	r2, #0
 8007c74:	d0f7      	beq.n	8007c66 <_strtoul_l.isra.0+0xc6>
 8007c76:	b10d      	cbz	r5, 8007c7c <_strtoul_l.isra.0+0xdc>
 8007c78:	f10c 31ff 	add.w	r1, ip, #4294967295
 8007c7c:	6011      	str	r1, [r2, #0]
 8007c7e:	e7f2      	b.n	8007c66 <_strtoul_l.isra.0+0xc6>
 8007c80:	2430      	movs	r4, #48	; 0x30
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d1b1      	bne.n	8007bea <_strtoul_l.isra.0+0x4a>
 8007c86:	2308      	movs	r3, #8
 8007c88:	e7af      	b.n	8007bea <_strtoul_l.isra.0+0x4a>
 8007c8a:	2c30      	cmp	r4, #48	; 0x30
 8007c8c:	d0a2      	beq.n	8007bd4 <_strtoul_l.isra.0+0x34>
 8007c8e:	230a      	movs	r3, #10
 8007c90:	e7ab      	b.n	8007bea <_strtoul_l.isra.0+0x4a>
 8007c92:	bf00      	nop
 8007c94:	0800a501 	.word	0x0800a501

08007c98 <strtoul>:
 8007c98:	4613      	mov	r3, r2
 8007c9a:	460a      	mov	r2, r1
 8007c9c:	4601      	mov	r1, r0
 8007c9e:	4802      	ldr	r0, [pc, #8]	; (8007ca8 <strtoul+0x10>)
 8007ca0:	6800      	ldr	r0, [r0, #0]
 8007ca2:	f7ff bf7d 	b.w	8007ba0 <_strtoul_l.isra.0>
 8007ca6:	bf00      	nop
 8007ca8:	20000010 	.word	0x20000010

08007cac <_vsniprintf_r>:
 8007cac:	b530      	push	{r4, r5, lr}
 8007cae:	1e14      	subs	r4, r2, #0
 8007cb0:	4605      	mov	r5, r0
 8007cb2:	b09b      	sub	sp, #108	; 0x6c
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	da05      	bge.n	8007cc4 <_vsniprintf_r+0x18>
 8007cb8:	238b      	movs	r3, #139	; 0x8b
 8007cba:	602b      	str	r3, [r5, #0]
 8007cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8007cc0:	b01b      	add	sp, #108	; 0x6c
 8007cc2:	bd30      	pop	{r4, r5, pc}
 8007cc4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007cc8:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007ccc:	bf14      	ite	ne
 8007cce:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007cd2:	4623      	moveq	r3, r4
 8007cd4:	9302      	str	r3, [sp, #8]
 8007cd6:	9305      	str	r3, [sp, #20]
 8007cd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007cdc:	9100      	str	r1, [sp, #0]
 8007cde:	9104      	str	r1, [sp, #16]
 8007ce0:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007ce4:	4602      	mov	r2, r0
 8007ce6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007ce8:	4669      	mov	r1, sp
 8007cea:	4628      	mov	r0, r5
 8007cec:	f001 fc4a 	bl	8009584 <_svfiprintf_r>
 8007cf0:	1c43      	adds	r3, r0, #1
 8007cf2:	bfbc      	itt	lt
 8007cf4:	238b      	movlt	r3, #139	; 0x8b
 8007cf6:	602b      	strlt	r3, [r5, #0]
 8007cf8:	2c00      	cmp	r4, #0
 8007cfa:	d0e1      	beq.n	8007cc0 <_vsniprintf_r+0x14>
 8007cfc:	9b00      	ldr	r3, [sp, #0]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	701a      	strb	r2, [r3, #0]
 8007d02:	e7dd      	b.n	8007cc0 <_vsniprintf_r+0x14>

08007d04 <vsniprintf>:
 8007d04:	b507      	push	{r0, r1, r2, lr}
 8007d06:	9300      	str	r3, [sp, #0]
 8007d08:	4613      	mov	r3, r2
 8007d0a:	460a      	mov	r2, r1
 8007d0c:	4601      	mov	r1, r0
 8007d0e:	4803      	ldr	r0, [pc, #12]	; (8007d1c <vsniprintf+0x18>)
 8007d10:	6800      	ldr	r0, [r0, #0]
 8007d12:	f7ff ffcb 	bl	8007cac <_vsniprintf_r>
 8007d16:	b003      	add	sp, #12
 8007d18:	f85d fb04 	ldr.w	pc, [sp], #4
 8007d1c:	20000010 	.word	0x20000010

08007d20 <__swbuf_r>:
 8007d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d22:	460e      	mov	r6, r1
 8007d24:	4614      	mov	r4, r2
 8007d26:	4605      	mov	r5, r0
 8007d28:	b118      	cbz	r0, 8007d32 <__swbuf_r+0x12>
 8007d2a:	6983      	ldr	r3, [r0, #24]
 8007d2c:	b90b      	cbnz	r3, 8007d32 <__swbuf_r+0x12>
 8007d2e:	f000 f9d1 	bl	80080d4 <__sinit>
 8007d32:	4b21      	ldr	r3, [pc, #132]	; (8007db8 <__swbuf_r+0x98>)
 8007d34:	429c      	cmp	r4, r3
 8007d36:	d12b      	bne.n	8007d90 <__swbuf_r+0x70>
 8007d38:	686c      	ldr	r4, [r5, #4]
 8007d3a:	69a3      	ldr	r3, [r4, #24]
 8007d3c:	60a3      	str	r3, [r4, #8]
 8007d3e:	89a3      	ldrh	r3, [r4, #12]
 8007d40:	071a      	lsls	r2, r3, #28
 8007d42:	d52f      	bpl.n	8007da4 <__swbuf_r+0x84>
 8007d44:	6923      	ldr	r3, [r4, #16]
 8007d46:	b36b      	cbz	r3, 8007da4 <__swbuf_r+0x84>
 8007d48:	6923      	ldr	r3, [r4, #16]
 8007d4a:	6820      	ldr	r0, [r4, #0]
 8007d4c:	1ac0      	subs	r0, r0, r3
 8007d4e:	6963      	ldr	r3, [r4, #20]
 8007d50:	b2f6      	uxtb	r6, r6
 8007d52:	4283      	cmp	r3, r0
 8007d54:	4637      	mov	r7, r6
 8007d56:	dc04      	bgt.n	8007d62 <__swbuf_r+0x42>
 8007d58:	4621      	mov	r1, r4
 8007d5a:	4628      	mov	r0, r5
 8007d5c:	f000 f926 	bl	8007fac <_fflush_r>
 8007d60:	bb30      	cbnz	r0, 8007db0 <__swbuf_r+0x90>
 8007d62:	68a3      	ldr	r3, [r4, #8]
 8007d64:	3b01      	subs	r3, #1
 8007d66:	60a3      	str	r3, [r4, #8]
 8007d68:	6823      	ldr	r3, [r4, #0]
 8007d6a:	1c5a      	adds	r2, r3, #1
 8007d6c:	6022      	str	r2, [r4, #0]
 8007d6e:	701e      	strb	r6, [r3, #0]
 8007d70:	6963      	ldr	r3, [r4, #20]
 8007d72:	3001      	adds	r0, #1
 8007d74:	4283      	cmp	r3, r0
 8007d76:	d004      	beq.n	8007d82 <__swbuf_r+0x62>
 8007d78:	89a3      	ldrh	r3, [r4, #12]
 8007d7a:	07db      	lsls	r3, r3, #31
 8007d7c:	d506      	bpl.n	8007d8c <__swbuf_r+0x6c>
 8007d7e:	2e0a      	cmp	r6, #10
 8007d80:	d104      	bne.n	8007d8c <__swbuf_r+0x6c>
 8007d82:	4621      	mov	r1, r4
 8007d84:	4628      	mov	r0, r5
 8007d86:	f000 f911 	bl	8007fac <_fflush_r>
 8007d8a:	b988      	cbnz	r0, 8007db0 <__swbuf_r+0x90>
 8007d8c:	4638      	mov	r0, r7
 8007d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d90:	4b0a      	ldr	r3, [pc, #40]	; (8007dbc <__swbuf_r+0x9c>)
 8007d92:	429c      	cmp	r4, r3
 8007d94:	d101      	bne.n	8007d9a <__swbuf_r+0x7a>
 8007d96:	68ac      	ldr	r4, [r5, #8]
 8007d98:	e7cf      	b.n	8007d3a <__swbuf_r+0x1a>
 8007d9a:	4b09      	ldr	r3, [pc, #36]	; (8007dc0 <__swbuf_r+0xa0>)
 8007d9c:	429c      	cmp	r4, r3
 8007d9e:	bf08      	it	eq
 8007da0:	68ec      	ldreq	r4, [r5, #12]
 8007da2:	e7ca      	b.n	8007d3a <__swbuf_r+0x1a>
 8007da4:	4621      	mov	r1, r4
 8007da6:	4628      	mov	r0, r5
 8007da8:	f000 f80c 	bl	8007dc4 <__swsetup_r>
 8007dac:	2800      	cmp	r0, #0
 8007dae:	d0cb      	beq.n	8007d48 <__swbuf_r+0x28>
 8007db0:	f04f 37ff 	mov.w	r7, #4294967295
 8007db4:	e7ea      	b.n	8007d8c <__swbuf_r+0x6c>
 8007db6:	bf00      	nop
 8007db8:	0800a624 	.word	0x0800a624
 8007dbc:	0800a644 	.word	0x0800a644
 8007dc0:	0800a604 	.word	0x0800a604

08007dc4 <__swsetup_r>:
 8007dc4:	4b32      	ldr	r3, [pc, #200]	; (8007e90 <__swsetup_r+0xcc>)
 8007dc6:	b570      	push	{r4, r5, r6, lr}
 8007dc8:	681d      	ldr	r5, [r3, #0]
 8007dca:	4606      	mov	r6, r0
 8007dcc:	460c      	mov	r4, r1
 8007dce:	b125      	cbz	r5, 8007dda <__swsetup_r+0x16>
 8007dd0:	69ab      	ldr	r3, [r5, #24]
 8007dd2:	b913      	cbnz	r3, 8007dda <__swsetup_r+0x16>
 8007dd4:	4628      	mov	r0, r5
 8007dd6:	f000 f97d 	bl	80080d4 <__sinit>
 8007dda:	4b2e      	ldr	r3, [pc, #184]	; (8007e94 <__swsetup_r+0xd0>)
 8007ddc:	429c      	cmp	r4, r3
 8007dde:	d10f      	bne.n	8007e00 <__swsetup_r+0x3c>
 8007de0:	686c      	ldr	r4, [r5, #4]
 8007de2:	89a3      	ldrh	r3, [r4, #12]
 8007de4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007de8:	0719      	lsls	r1, r3, #28
 8007dea:	d42c      	bmi.n	8007e46 <__swsetup_r+0x82>
 8007dec:	06dd      	lsls	r5, r3, #27
 8007dee:	d411      	bmi.n	8007e14 <__swsetup_r+0x50>
 8007df0:	2309      	movs	r3, #9
 8007df2:	6033      	str	r3, [r6, #0]
 8007df4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007df8:	81a3      	strh	r3, [r4, #12]
 8007dfa:	f04f 30ff 	mov.w	r0, #4294967295
 8007dfe:	e03e      	b.n	8007e7e <__swsetup_r+0xba>
 8007e00:	4b25      	ldr	r3, [pc, #148]	; (8007e98 <__swsetup_r+0xd4>)
 8007e02:	429c      	cmp	r4, r3
 8007e04:	d101      	bne.n	8007e0a <__swsetup_r+0x46>
 8007e06:	68ac      	ldr	r4, [r5, #8]
 8007e08:	e7eb      	b.n	8007de2 <__swsetup_r+0x1e>
 8007e0a:	4b24      	ldr	r3, [pc, #144]	; (8007e9c <__swsetup_r+0xd8>)
 8007e0c:	429c      	cmp	r4, r3
 8007e0e:	bf08      	it	eq
 8007e10:	68ec      	ldreq	r4, [r5, #12]
 8007e12:	e7e6      	b.n	8007de2 <__swsetup_r+0x1e>
 8007e14:	0758      	lsls	r0, r3, #29
 8007e16:	d512      	bpl.n	8007e3e <__swsetup_r+0x7a>
 8007e18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e1a:	b141      	cbz	r1, 8007e2e <__swsetup_r+0x6a>
 8007e1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e20:	4299      	cmp	r1, r3
 8007e22:	d002      	beq.n	8007e2a <__swsetup_r+0x66>
 8007e24:	4630      	mov	r0, r6
 8007e26:	f001 faa7 	bl	8009378 <_free_r>
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	6363      	str	r3, [r4, #52]	; 0x34
 8007e2e:	89a3      	ldrh	r3, [r4, #12]
 8007e30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007e34:	81a3      	strh	r3, [r4, #12]
 8007e36:	2300      	movs	r3, #0
 8007e38:	6063      	str	r3, [r4, #4]
 8007e3a:	6923      	ldr	r3, [r4, #16]
 8007e3c:	6023      	str	r3, [r4, #0]
 8007e3e:	89a3      	ldrh	r3, [r4, #12]
 8007e40:	f043 0308 	orr.w	r3, r3, #8
 8007e44:	81a3      	strh	r3, [r4, #12]
 8007e46:	6923      	ldr	r3, [r4, #16]
 8007e48:	b94b      	cbnz	r3, 8007e5e <__swsetup_r+0x9a>
 8007e4a:	89a3      	ldrh	r3, [r4, #12]
 8007e4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007e50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e54:	d003      	beq.n	8007e5e <__swsetup_r+0x9a>
 8007e56:	4621      	mov	r1, r4
 8007e58:	4630      	mov	r0, r6
 8007e5a:	f000 fd6f 	bl	800893c <__smakebuf_r>
 8007e5e:	89a0      	ldrh	r0, [r4, #12]
 8007e60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e64:	f010 0301 	ands.w	r3, r0, #1
 8007e68:	d00a      	beq.n	8007e80 <__swsetup_r+0xbc>
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	60a3      	str	r3, [r4, #8]
 8007e6e:	6963      	ldr	r3, [r4, #20]
 8007e70:	425b      	negs	r3, r3
 8007e72:	61a3      	str	r3, [r4, #24]
 8007e74:	6923      	ldr	r3, [r4, #16]
 8007e76:	b943      	cbnz	r3, 8007e8a <__swsetup_r+0xc6>
 8007e78:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007e7c:	d1ba      	bne.n	8007df4 <__swsetup_r+0x30>
 8007e7e:	bd70      	pop	{r4, r5, r6, pc}
 8007e80:	0781      	lsls	r1, r0, #30
 8007e82:	bf58      	it	pl
 8007e84:	6963      	ldrpl	r3, [r4, #20]
 8007e86:	60a3      	str	r3, [r4, #8]
 8007e88:	e7f4      	b.n	8007e74 <__swsetup_r+0xb0>
 8007e8a:	2000      	movs	r0, #0
 8007e8c:	e7f7      	b.n	8007e7e <__swsetup_r+0xba>
 8007e8e:	bf00      	nop
 8007e90:	20000010 	.word	0x20000010
 8007e94:	0800a624 	.word	0x0800a624
 8007e98:	0800a644 	.word	0x0800a644
 8007e9c:	0800a604 	.word	0x0800a604

08007ea0 <__sflush_r>:
 8007ea0:	898a      	ldrh	r2, [r1, #12]
 8007ea2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ea6:	4605      	mov	r5, r0
 8007ea8:	0710      	lsls	r0, r2, #28
 8007eaa:	460c      	mov	r4, r1
 8007eac:	d458      	bmi.n	8007f60 <__sflush_r+0xc0>
 8007eae:	684b      	ldr	r3, [r1, #4]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	dc05      	bgt.n	8007ec0 <__sflush_r+0x20>
 8007eb4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	dc02      	bgt.n	8007ec0 <__sflush_r+0x20>
 8007eba:	2000      	movs	r0, #0
 8007ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ec0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ec2:	2e00      	cmp	r6, #0
 8007ec4:	d0f9      	beq.n	8007eba <__sflush_r+0x1a>
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007ecc:	682f      	ldr	r7, [r5, #0]
 8007ece:	602b      	str	r3, [r5, #0]
 8007ed0:	d032      	beq.n	8007f38 <__sflush_r+0x98>
 8007ed2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007ed4:	89a3      	ldrh	r3, [r4, #12]
 8007ed6:	075a      	lsls	r2, r3, #29
 8007ed8:	d505      	bpl.n	8007ee6 <__sflush_r+0x46>
 8007eda:	6863      	ldr	r3, [r4, #4]
 8007edc:	1ac0      	subs	r0, r0, r3
 8007ede:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007ee0:	b10b      	cbz	r3, 8007ee6 <__sflush_r+0x46>
 8007ee2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007ee4:	1ac0      	subs	r0, r0, r3
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	4602      	mov	r2, r0
 8007eea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007eec:	6a21      	ldr	r1, [r4, #32]
 8007eee:	4628      	mov	r0, r5
 8007ef0:	47b0      	blx	r6
 8007ef2:	1c43      	adds	r3, r0, #1
 8007ef4:	89a3      	ldrh	r3, [r4, #12]
 8007ef6:	d106      	bne.n	8007f06 <__sflush_r+0x66>
 8007ef8:	6829      	ldr	r1, [r5, #0]
 8007efa:	291d      	cmp	r1, #29
 8007efc:	d82c      	bhi.n	8007f58 <__sflush_r+0xb8>
 8007efe:	4a2a      	ldr	r2, [pc, #168]	; (8007fa8 <__sflush_r+0x108>)
 8007f00:	40ca      	lsrs	r2, r1
 8007f02:	07d6      	lsls	r6, r2, #31
 8007f04:	d528      	bpl.n	8007f58 <__sflush_r+0xb8>
 8007f06:	2200      	movs	r2, #0
 8007f08:	6062      	str	r2, [r4, #4]
 8007f0a:	04d9      	lsls	r1, r3, #19
 8007f0c:	6922      	ldr	r2, [r4, #16]
 8007f0e:	6022      	str	r2, [r4, #0]
 8007f10:	d504      	bpl.n	8007f1c <__sflush_r+0x7c>
 8007f12:	1c42      	adds	r2, r0, #1
 8007f14:	d101      	bne.n	8007f1a <__sflush_r+0x7a>
 8007f16:	682b      	ldr	r3, [r5, #0]
 8007f18:	b903      	cbnz	r3, 8007f1c <__sflush_r+0x7c>
 8007f1a:	6560      	str	r0, [r4, #84]	; 0x54
 8007f1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f1e:	602f      	str	r7, [r5, #0]
 8007f20:	2900      	cmp	r1, #0
 8007f22:	d0ca      	beq.n	8007eba <__sflush_r+0x1a>
 8007f24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f28:	4299      	cmp	r1, r3
 8007f2a:	d002      	beq.n	8007f32 <__sflush_r+0x92>
 8007f2c:	4628      	mov	r0, r5
 8007f2e:	f001 fa23 	bl	8009378 <_free_r>
 8007f32:	2000      	movs	r0, #0
 8007f34:	6360      	str	r0, [r4, #52]	; 0x34
 8007f36:	e7c1      	b.n	8007ebc <__sflush_r+0x1c>
 8007f38:	6a21      	ldr	r1, [r4, #32]
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	4628      	mov	r0, r5
 8007f3e:	47b0      	blx	r6
 8007f40:	1c41      	adds	r1, r0, #1
 8007f42:	d1c7      	bne.n	8007ed4 <__sflush_r+0x34>
 8007f44:	682b      	ldr	r3, [r5, #0]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d0c4      	beq.n	8007ed4 <__sflush_r+0x34>
 8007f4a:	2b1d      	cmp	r3, #29
 8007f4c:	d001      	beq.n	8007f52 <__sflush_r+0xb2>
 8007f4e:	2b16      	cmp	r3, #22
 8007f50:	d101      	bne.n	8007f56 <__sflush_r+0xb6>
 8007f52:	602f      	str	r7, [r5, #0]
 8007f54:	e7b1      	b.n	8007eba <__sflush_r+0x1a>
 8007f56:	89a3      	ldrh	r3, [r4, #12]
 8007f58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f5c:	81a3      	strh	r3, [r4, #12]
 8007f5e:	e7ad      	b.n	8007ebc <__sflush_r+0x1c>
 8007f60:	690f      	ldr	r7, [r1, #16]
 8007f62:	2f00      	cmp	r7, #0
 8007f64:	d0a9      	beq.n	8007eba <__sflush_r+0x1a>
 8007f66:	0793      	lsls	r3, r2, #30
 8007f68:	680e      	ldr	r6, [r1, #0]
 8007f6a:	bf08      	it	eq
 8007f6c:	694b      	ldreq	r3, [r1, #20]
 8007f6e:	600f      	str	r7, [r1, #0]
 8007f70:	bf18      	it	ne
 8007f72:	2300      	movne	r3, #0
 8007f74:	eba6 0807 	sub.w	r8, r6, r7
 8007f78:	608b      	str	r3, [r1, #8]
 8007f7a:	f1b8 0f00 	cmp.w	r8, #0
 8007f7e:	dd9c      	ble.n	8007eba <__sflush_r+0x1a>
 8007f80:	6a21      	ldr	r1, [r4, #32]
 8007f82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007f84:	4643      	mov	r3, r8
 8007f86:	463a      	mov	r2, r7
 8007f88:	4628      	mov	r0, r5
 8007f8a:	47b0      	blx	r6
 8007f8c:	2800      	cmp	r0, #0
 8007f8e:	dc06      	bgt.n	8007f9e <__sflush_r+0xfe>
 8007f90:	89a3      	ldrh	r3, [r4, #12]
 8007f92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f96:	81a3      	strh	r3, [r4, #12]
 8007f98:	f04f 30ff 	mov.w	r0, #4294967295
 8007f9c:	e78e      	b.n	8007ebc <__sflush_r+0x1c>
 8007f9e:	4407      	add	r7, r0
 8007fa0:	eba8 0800 	sub.w	r8, r8, r0
 8007fa4:	e7e9      	b.n	8007f7a <__sflush_r+0xda>
 8007fa6:	bf00      	nop
 8007fa8:	20400001 	.word	0x20400001

08007fac <_fflush_r>:
 8007fac:	b538      	push	{r3, r4, r5, lr}
 8007fae:	690b      	ldr	r3, [r1, #16]
 8007fb0:	4605      	mov	r5, r0
 8007fb2:	460c      	mov	r4, r1
 8007fb4:	b913      	cbnz	r3, 8007fbc <_fflush_r+0x10>
 8007fb6:	2500      	movs	r5, #0
 8007fb8:	4628      	mov	r0, r5
 8007fba:	bd38      	pop	{r3, r4, r5, pc}
 8007fbc:	b118      	cbz	r0, 8007fc6 <_fflush_r+0x1a>
 8007fbe:	6983      	ldr	r3, [r0, #24]
 8007fc0:	b90b      	cbnz	r3, 8007fc6 <_fflush_r+0x1a>
 8007fc2:	f000 f887 	bl	80080d4 <__sinit>
 8007fc6:	4b14      	ldr	r3, [pc, #80]	; (8008018 <_fflush_r+0x6c>)
 8007fc8:	429c      	cmp	r4, r3
 8007fca:	d11b      	bne.n	8008004 <_fflush_r+0x58>
 8007fcc:	686c      	ldr	r4, [r5, #4]
 8007fce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d0ef      	beq.n	8007fb6 <_fflush_r+0xa>
 8007fd6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007fd8:	07d0      	lsls	r0, r2, #31
 8007fda:	d404      	bmi.n	8007fe6 <_fflush_r+0x3a>
 8007fdc:	0599      	lsls	r1, r3, #22
 8007fde:	d402      	bmi.n	8007fe6 <_fflush_r+0x3a>
 8007fe0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007fe2:	f000 fc84 	bl	80088ee <__retarget_lock_acquire_recursive>
 8007fe6:	4628      	mov	r0, r5
 8007fe8:	4621      	mov	r1, r4
 8007fea:	f7ff ff59 	bl	8007ea0 <__sflush_r>
 8007fee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ff0:	07da      	lsls	r2, r3, #31
 8007ff2:	4605      	mov	r5, r0
 8007ff4:	d4e0      	bmi.n	8007fb8 <_fflush_r+0xc>
 8007ff6:	89a3      	ldrh	r3, [r4, #12]
 8007ff8:	059b      	lsls	r3, r3, #22
 8007ffa:	d4dd      	bmi.n	8007fb8 <_fflush_r+0xc>
 8007ffc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ffe:	f000 fc77 	bl	80088f0 <__retarget_lock_release_recursive>
 8008002:	e7d9      	b.n	8007fb8 <_fflush_r+0xc>
 8008004:	4b05      	ldr	r3, [pc, #20]	; (800801c <_fflush_r+0x70>)
 8008006:	429c      	cmp	r4, r3
 8008008:	d101      	bne.n	800800e <_fflush_r+0x62>
 800800a:	68ac      	ldr	r4, [r5, #8]
 800800c:	e7df      	b.n	8007fce <_fflush_r+0x22>
 800800e:	4b04      	ldr	r3, [pc, #16]	; (8008020 <_fflush_r+0x74>)
 8008010:	429c      	cmp	r4, r3
 8008012:	bf08      	it	eq
 8008014:	68ec      	ldreq	r4, [r5, #12]
 8008016:	e7da      	b.n	8007fce <_fflush_r+0x22>
 8008018:	0800a624 	.word	0x0800a624
 800801c:	0800a644 	.word	0x0800a644
 8008020:	0800a604 	.word	0x0800a604

08008024 <std>:
 8008024:	2300      	movs	r3, #0
 8008026:	b510      	push	{r4, lr}
 8008028:	4604      	mov	r4, r0
 800802a:	e9c0 3300 	strd	r3, r3, [r0]
 800802e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008032:	6083      	str	r3, [r0, #8]
 8008034:	8181      	strh	r1, [r0, #12]
 8008036:	6643      	str	r3, [r0, #100]	; 0x64
 8008038:	81c2      	strh	r2, [r0, #14]
 800803a:	6183      	str	r3, [r0, #24]
 800803c:	4619      	mov	r1, r3
 800803e:	2208      	movs	r2, #8
 8008040:	305c      	adds	r0, #92	; 0x5c
 8008042:	f7fe fe95 	bl	8006d70 <memset>
 8008046:	4b05      	ldr	r3, [pc, #20]	; (800805c <std+0x38>)
 8008048:	6263      	str	r3, [r4, #36]	; 0x24
 800804a:	4b05      	ldr	r3, [pc, #20]	; (8008060 <std+0x3c>)
 800804c:	62a3      	str	r3, [r4, #40]	; 0x28
 800804e:	4b05      	ldr	r3, [pc, #20]	; (8008064 <std+0x40>)
 8008050:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008052:	4b05      	ldr	r3, [pc, #20]	; (8008068 <std+0x44>)
 8008054:	6224      	str	r4, [r4, #32]
 8008056:	6323      	str	r3, [r4, #48]	; 0x30
 8008058:	bd10      	pop	{r4, pc}
 800805a:	bf00      	nop
 800805c:	08009e2d 	.word	0x08009e2d
 8008060:	08009e4f 	.word	0x08009e4f
 8008064:	08009e87 	.word	0x08009e87
 8008068:	08009eab 	.word	0x08009eab

0800806c <_cleanup_r>:
 800806c:	4901      	ldr	r1, [pc, #4]	; (8008074 <_cleanup_r+0x8>)
 800806e:	f000 b8af 	b.w	80081d0 <_fwalk_reent>
 8008072:	bf00      	nop
 8008074:	08007fad 	.word	0x08007fad

08008078 <__sfmoreglue>:
 8008078:	b570      	push	{r4, r5, r6, lr}
 800807a:	1e4a      	subs	r2, r1, #1
 800807c:	2568      	movs	r5, #104	; 0x68
 800807e:	4355      	muls	r5, r2
 8008080:	460e      	mov	r6, r1
 8008082:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008086:	f001 f9c7 	bl	8009418 <_malloc_r>
 800808a:	4604      	mov	r4, r0
 800808c:	b140      	cbz	r0, 80080a0 <__sfmoreglue+0x28>
 800808e:	2100      	movs	r1, #0
 8008090:	e9c0 1600 	strd	r1, r6, [r0]
 8008094:	300c      	adds	r0, #12
 8008096:	60a0      	str	r0, [r4, #8]
 8008098:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800809c:	f7fe fe68 	bl	8006d70 <memset>
 80080a0:	4620      	mov	r0, r4
 80080a2:	bd70      	pop	{r4, r5, r6, pc}

080080a4 <__sfp_lock_acquire>:
 80080a4:	4801      	ldr	r0, [pc, #4]	; (80080ac <__sfp_lock_acquire+0x8>)
 80080a6:	f000 bc22 	b.w	80088ee <__retarget_lock_acquire_recursive>
 80080aa:	bf00      	nop
 80080ac:	20000930 	.word	0x20000930

080080b0 <__sfp_lock_release>:
 80080b0:	4801      	ldr	r0, [pc, #4]	; (80080b8 <__sfp_lock_release+0x8>)
 80080b2:	f000 bc1d 	b.w	80088f0 <__retarget_lock_release_recursive>
 80080b6:	bf00      	nop
 80080b8:	20000930 	.word	0x20000930

080080bc <__sinit_lock_acquire>:
 80080bc:	4801      	ldr	r0, [pc, #4]	; (80080c4 <__sinit_lock_acquire+0x8>)
 80080be:	f000 bc16 	b.w	80088ee <__retarget_lock_acquire_recursive>
 80080c2:	bf00      	nop
 80080c4:	2000092b 	.word	0x2000092b

080080c8 <__sinit_lock_release>:
 80080c8:	4801      	ldr	r0, [pc, #4]	; (80080d0 <__sinit_lock_release+0x8>)
 80080ca:	f000 bc11 	b.w	80088f0 <__retarget_lock_release_recursive>
 80080ce:	bf00      	nop
 80080d0:	2000092b 	.word	0x2000092b

080080d4 <__sinit>:
 80080d4:	b510      	push	{r4, lr}
 80080d6:	4604      	mov	r4, r0
 80080d8:	f7ff fff0 	bl	80080bc <__sinit_lock_acquire>
 80080dc:	69a3      	ldr	r3, [r4, #24]
 80080de:	b11b      	cbz	r3, 80080e8 <__sinit+0x14>
 80080e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080e4:	f7ff bff0 	b.w	80080c8 <__sinit_lock_release>
 80080e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80080ec:	6523      	str	r3, [r4, #80]	; 0x50
 80080ee:	4b13      	ldr	r3, [pc, #76]	; (800813c <__sinit+0x68>)
 80080f0:	4a13      	ldr	r2, [pc, #76]	; (8008140 <__sinit+0x6c>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80080f6:	42a3      	cmp	r3, r4
 80080f8:	bf04      	itt	eq
 80080fa:	2301      	moveq	r3, #1
 80080fc:	61a3      	streq	r3, [r4, #24]
 80080fe:	4620      	mov	r0, r4
 8008100:	f000 f820 	bl	8008144 <__sfp>
 8008104:	6060      	str	r0, [r4, #4]
 8008106:	4620      	mov	r0, r4
 8008108:	f000 f81c 	bl	8008144 <__sfp>
 800810c:	60a0      	str	r0, [r4, #8]
 800810e:	4620      	mov	r0, r4
 8008110:	f000 f818 	bl	8008144 <__sfp>
 8008114:	2200      	movs	r2, #0
 8008116:	60e0      	str	r0, [r4, #12]
 8008118:	2104      	movs	r1, #4
 800811a:	6860      	ldr	r0, [r4, #4]
 800811c:	f7ff ff82 	bl	8008024 <std>
 8008120:	68a0      	ldr	r0, [r4, #8]
 8008122:	2201      	movs	r2, #1
 8008124:	2109      	movs	r1, #9
 8008126:	f7ff ff7d 	bl	8008024 <std>
 800812a:	68e0      	ldr	r0, [r4, #12]
 800812c:	2202      	movs	r2, #2
 800812e:	2112      	movs	r1, #18
 8008130:	f7ff ff78 	bl	8008024 <std>
 8008134:	2301      	movs	r3, #1
 8008136:	61a3      	str	r3, [r4, #24]
 8008138:	e7d2      	b.n	80080e0 <__sinit+0xc>
 800813a:	bf00      	nop
 800813c:	0800a49c 	.word	0x0800a49c
 8008140:	0800806d 	.word	0x0800806d

08008144 <__sfp>:
 8008144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008146:	4607      	mov	r7, r0
 8008148:	f7ff ffac 	bl	80080a4 <__sfp_lock_acquire>
 800814c:	4b1e      	ldr	r3, [pc, #120]	; (80081c8 <__sfp+0x84>)
 800814e:	681e      	ldr	r6, [r3, #0]
 8008150:	69b3      	ldr	r3, [r6, #24]
 8008152:	b913      	cbnz	r3, 800815a <__sfp+0x16>
 8008154:	4630      	mov	r0, r6
 8008156:	f7ff ffbd 	bl	80080d4 <__sinit>
 800815a:	3648      	adds	r6, #72	; 0x48
 800815c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008160:	3b01      	subs	r3, #1
 8008162:	d503      	bpl.n	800816c <__sfp+0x28>
 8008164:	6833      	ldr	r3, [r6, #0]
 8008166:	b30b      	cbz	r3, 80081ac <__sfp+0x68>
 8008168:	6836      	ldr	r6, [r6, #0]
 800816a:	e7f7      	b.n	800815c <__sfp+0x18>
 800816c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008170:	b9d5      	cbnz	r5, 80081a8 <__sfp+0x64>
 8008172:	4b16      	ldr	r3, [pc, #88]	; (80081cc <__sfp+0x88>)
 8008174:	60e3      	str	r3, [r4, #12]
 8008176:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800817a:	6665      	str	r5, [r4, #100]	; 0x64
 800817c:	f000 fbb6 	bl	80088ec <__retarget_lock_init_recursive>
 8008180:	f7ff ff96 	bl	80080b0 <__sfp_lock_release>
 8008184:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008188:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800818c:	6025      	str	r5, [r4, #0]
 800818e:	61a5      	str	r5, [r4, #24]
 8008190:	2208      	movs	r2, #8
 8008192:	4629      	mov	r1, r5
 8008194:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008198:	f7fe fdea 	bl	8006d70 <memset>
 800819c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80081a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80081a4:	4620      	mov	r0, r4
 80081a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081a8:	3468      	adds	r4, #104	; 0x68
 80081aa:	e7d9      	b.n	8008160 <__sfp+0x1c>
 80081ac:	2104      	movs	r1, #4
 80081ae:	4638      	mov	r0, r7
 80081b0:	f7ff ff62 	bl	8008078 <__sfmoreglue>
 80081b4:	4604      	mov	r4, r0
 80081b6:	6030      	str	r0, [r6, #0]
 80081b8:	2800      	cmp	r0, #0
 80081ba:	d1d5      	bne.n	8008168 <__sfp+0x24>
 80081bc:	f7ff ff78 	bl	80080b0 <__sfp_lock_release>
 80081c0:	230c      	movs	r3, #12
 80081c2:	603b      	str	r3, [r7, #0]
 80081c4:	e7ee      	b.n	80081a4 <__sfp+0x60>
 80081c6:	bf00      	nop
 80081c8:	0800a49c 	.word	0x0800a49c
 80081cc:	ffff0001 	.word	0xffff0001

080081d0 <_fwalk_reent>:
 80081d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081d4:	4606      	mov	r6, r0
 80081d6:	4688      	mov	r8, r1
 80081d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80081dc:	2700      	movs	r7, #0
 80081de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80081e2:	f1b9 0901 	subs.w	r9, r9, #1
 80081e6:	d505      	bpl.n	80081f4 <_fwalk_reent+0x24>
 80081e8:	6824      	ldr	r4, [r4, #0]
 80081ea:	2c00      	cmp	r4, #0
 80081ec:	d1f7      	bne.n	80081de <_fwalk_reent+0xe>
 80081ee:	4638      	mov	r0, r7
 80081f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081f4:	89ab      	ldrh	r3, [r5, #12]
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d907      	bls.n	800820a <_fwalk_reent+0x3a>
 80081fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80081fe:	3301      	adds	r3, #1
 8008200:	d003      	beq.n	800820a <_fwalk_reent+0x3a>
 8008202:	4629      	mov	r1, r5
 8008204:	4630      	mov	r0, r6
 8008206:	47c0      	blx	r8
 8008208:	4307      	orrs	r7, r0
 800820a:	3568      	adds	r5, #104	; 0x68
 800820c:	e7e9      	b.n	80081e2 <_fwalk_reent+0x12>

0800820e <rshift>:
 800820e:	6903      	ldr	r3, [r0, #16]
 8008210:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008214:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008218:	ea4f 1261 	mov.w	r2, r1, asr #5
 800821c:	f100 0414 	add.w	r4, r0, #20
 8008220:	dd45      	ble.n	80082ae <rshift+0xa0>
 8008222:	f011 011f 	ands.w	r1, r1, #31
 8008226:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800822a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800822e:	d10c      	bne.n	800824a <rshift+0x3c>
 8008230:	f100 0710 	add.w	r7, r0, #16
 8008234:	4629      	mov	r1, r5
 8008236:	42b1      	cmp	r1, r6
 8008238:	d334      	bcc.n	80082a4 <rshift+0x96>
 800823a:	1a9b      	subs	r3, r3, r2
 800823c:	009b      	lsls	r3, r3, #2
 800823e:	1eea      	subs	r2, r5, #3
 8008240:	4296      	cmp	r6, r2
 8008242:	bf38      	it	cc
 8008244:	2300      	movcc	r3, #0
 8008246:	4423      	add	r3, r4
 8008248:	e015      	b.n	8008276 <rshift+0x68>
 800824a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800824e:	f1c1 0820 	rsb	r8, r1, #32
 8008252:	40cf      	lsrs	r7, r1
 8008254:	f105 0e04 	add.w	lr, r5, #4
 8008258:	46a1      	mov	r9, r4
 800825a:	4576      	cmp	r6, lr
 800825c:	46f4      	mov	ip, lr
 800825e:	d815      	bhi.n	800828c <rshift+0x7e>
 8008260:	1a9b      	subs	r3, r3, r2
 8008262:	009a      	lsls	r2, r3, #2
 8008264:	3a04      	subs	r2, #4
 8008266:	3501      	adds	r5, #1
 8008268:	42ae      	cmp	r6, r5
 800826a:	bf38      	it	cc
 800826c:	2200      	movcc	r2, #0
 800826e:	18a3      	adds	r3, r4, r2
 8008270:	50a7      	str	r7, [r4, r2]
 8008272:	b107      	cbz	r7, 8008276 <rshift+0x68>
 8008274:	3304      	adds	r3, #4
 8008276:	1b1a      	subs	r2, r3, r4
 8008278:	42a3      	cmp	r3, r4
 800827a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800827e:	bf08      	it	eq
 8008280:	2300      	moveq	r3, #0
 8008282:	6102      	str	r2, [r0, #16]
 8008284:	bf08      	it	eq
 8008286:	6143      	streq	r3, [r0, #20]
 8008288:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800828c:	f8dc c000 	ldr.w	ip, [ip]
 8008290:	fa0c fc08 	lsl.w	ip, ip, r8
 8008294:	ea4c 0707 	orr.w	r7, ip, r7
 8008298:	f849 7b04 	str.w	r7, [r9], #4
 800829c:	f85e 7b04 	ldr.w	r7, [lr], #4
 80082a0:	40cf      	lsrs	r7, r1
 80082a2:	e7da      	b.n	800825a <rshift+0x4c>
 80082a4:	f851 cb04 	ldr.w	ip, [r1], #4
 80082a8:	f847 cf04 	str.w	ip, [r7, #4]!
 80082ac:	e7c3      	b.n	8008236 <rshift+0x28>
 80082ae:	4623      	mov	r3, r4
 80082b0:	e7e1      	b.n	8008276 <rshift+0x68>

080082b2 <__hexdig_fun>:
 80082b2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80082b6:	2b09      	cmp	r3, #9
 80082b8:	d802      	bhi.n	80082c0 <__hexdig_fun+0xe>
 80082ba:	3820      	subs	r0, #32
 80082bc:	b2c0      	uxtb	r0, r0
 80082be:	4770      	bx	lr
 80082c0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80082c4:	2b05      	cmp	r3, #5
 80082c6:	d801      	bhi.n	80082cc <__hexdig_fun+0x1a>
 80082c8:	3847      	subs	r0, #71	; 0x47
 80082ca:	e7f7      	b.n	80082bc <__hexdig_fun+0xa>
 80082cc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80082d0:	2b05      	cmp	r3, #5
 80082d2:	d801      	bhi.n	80082d8 <__hexdig_fun+0x26>
 80082d4:	3827      	subs	r0, #39	; 0x27
 80082d6:	e7f1      	b.n	80082bc <__hexdig_fun+0xa>
 80082d8:	2000      	movs	r0, #0
 80082da:	4770      	bx	lr

080082dc <__gethex>:
 80082dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082e0:	ed2d 8b02 	vpush	{d8}
 80082e4:	b089      	sub	sp, #36	; 0x24
 80082e6:	ee08 0a10 	vmov	s16, r0
 80082ea:	9304      	str	r3, [sp, #16]
 80082ec:	4bbc      	ldr	r3, [pc, #752]	; (80085e0 <__gethex+0x304>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	9301      	str	r3, [sp, #4]
 80082f2:	4618      	mov	r0, r3
 80082f4:	468b      	mov	fp, r1
 80082f6:	4690      	mov	r8, r2
 80082f8:	f7f7 ffac 	bl	8000254 <strlen>
 80082fc:	9b01      	ldr	r3, [sp, #4]
 80082fe:	f8db 2000 	ldr.w	r2, [fp]
 8008302:	4403      	add	r3, r0
 8008304:	4682      	mov	sl, r0
 8008306:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800830a:	9305      	str	r3, [sp, #20]
 800830c:	1c93      	adds	r3, r2, #2
 800830e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008312:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008316:	32fe      	adds	r2, #254	; 0xfe
 8008318:	18d1      	adds	r1, r2, r3
 800831a:	461f      	mov	r7, r3
 800831c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008320:	9100      	str	r1, [sp, #0]
 8008322:	2830      	cmp	r0, #48	; 0x30
 8008324:	d0f8      	beq.n	8008318 <__gethex+0x3c>
 8008326:	f7ff ffc4 	bl	80082b2 <__hexdig_fun>
 800832a:	4604      	mov	r4, r0
 800832c:	2800      	cmp	r0, #0
 800832e:	d13a      	bne.n	80083a6 <__gethex+0xca>
 8008330:	9901      	ldr	r1, [sp, #4]
 8008332:	4652      	mov	r2, sl
 8008334:	4638      	mov	r0, r7
 8008336:	f001 fdbc 	bl	8009eb2 <strncmp>
 800833a:	4605      	mov	r5, r0
 800833c:	2800      	cmp	r0, #0
 800833e:	d168      	bne.n	8008412 <__gethex+0x136>
 8008340:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008344:	eb07 060a 	add.w	r6, r7, sl
 8008348:	f7ff ffb3 	bl	80082b2 <__hexdig_fun>
 800834c:	2800      	cmp	r0, #0
 800834e:	d062      	beq.n	8008416 <__gethex+0x13a>
 8008350:	4633      	mov	r3, r6
 8008352:	7818      	ldrb	r0, [r3, #0]
 8008354:	2830      	cmp	r0, #48	; 0x30
 8008356:	461f      	mov	r7, r3
 8008358:	f103 0301 	add.w	r3, r3, #1
 800835c:	d0f9      	beq.n	8008352 <__gethex+0x76>
 800835e:	f7ff ffa8 	bl	80082b2 <__hexdig_fun>
 8008362:	2301      	movs	r3, #1
 8008364:	fab0 f480 	clz	r4, r0
 8008368:	0964      	lsrs	r4, r4, #5
 800836a:	4635      	mov	r5, r6
 800836c:	9300      	str	r3, [sp, #0]
 800836e:	463a      	mov	r2, r7
 8008370:	4616      	mov	r6, r2
 8008372:	3201      	adds	r2, #1
 8008374:	7830      	ldrb	r0, [r6, #0]
 8008376:	f7ff ff9c 	bl	80082b2 <__hexdig_fun>
 800837a:	2800      	cmp	r0, #0
 800837c:	d1f8      	bne.n	8008370 <__gethex+0x94>
 800837e:	9901      	ldr	r1, [sp, #4]
 8008380:	4652      	mov	r2, sl
 8008382:	4630      	mov	r0, r6
 8008384:	f001 fd95 	bl	8009eb2 <strncmp>
 8008388:	b980      	cbnz	r0, 80083ac <__gethex+0xd0>
 800838a:	b94d      	cbnz	r5, 80083a0 <__gethex+0xc4>
 800838c:	eb06 050a 	add.w	r5, r6, sl
 8008390:	462a      	mov	r2, r5
 8008392:	4616      	mov	r6, r2
 8008394:	3201      	adds	r2, #1
 8008396:	7830      	ldrb	r0, [r6, #0]
 8008398:	f7ff ff8b 	bl	80082b2 <__hexdig_fun>
 800839c:	2800      	cmp	r0, #0
 800839e:	d1f8      	bne.n	8008392 <__gethex+0xb6>
 80083a0:	1bad      	subs	r5, r5, r6
 80083a2:	00ad      	lsls	r5, r5, #2
 80083a4:	e004      	b.n	80083b0 <__gethex+0xd4>
 80083a6:	2400      	movs	r4, #0
 80083a8:	4625      	mov	r5, r4
 80083aa:	e7e0      	b.n	800836e <__gethex+0x92>
 80083ac:	2d00      	cmp	r5, #0
 80083ae:	d1f7      	bne.n	80083a0 <__gethex+0xc4>
 80083b0:	7833      	ldrb	r3, [r6, #0]
 80083b2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80083b6:	2b50      	cmp	r3, #80	; 0x50
 80083b8:	d13b      	bne.n	8008432 <__gethex+0x156>
 80083ba:	7873      	ldrb	r3, [r6, #1]
 80083bc:	2b2b      	cmp	r3, #43	; 0x2b
 80083be:	d02c      	beq.n	800841a <__gethex+0x13e>
 80083c0:	2b2d      	cmp	r3, #45	; 0x2d
 80083c2:	d02e      	beq.n	8008422 <__gethex+0x146>
 80083c4:	1c71      	adds	r1, r6, #1
 80083c6:	f04f 0900 	mov.w	r9, #0
 80083ca:	7808      	ldrb	r0, [r1, #0]
 80083cc:	f7ff ff71 	bl	80082b2 <__hexdig_fun>
 80083d0:	1e43      	subs	r3, r0, #1
 80083d2:	b2db      	uxtb	r3, r3
 80083d4:	2b18      	cmp	r3, #24
 80083d6:	d82c      	bhi.n	8008432 <__gethex+0x156>
 80083d8:	f1a0 0210 	sub.w	r2, r0, #16
 80083dc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80083e0:	f7ff ff67 	bl	80082b2 <__hexdig_fun>
 80083e4:	1e43      	subs	r3, r0, #1
 80083e6:	b2db      	uxtb	r3, r3
 80083e8:	2b18      	cmp	r3, #24
 80083ea:	d91d      	bls.n	8008428 <__gethex+0x14c>
 80083ec:	f1b9 0f00 	cmp.w	r9, #0
 80083f0:	d000      	beq.n	80083f4 <__gethex+0x118>
 80083f2:	4252      	negs	r2, r2
 80083f4:	4415      	add	r5, r2
 80083f6:	f8cb 1000 	str.w	r1, [fp]
 80083fa:	b1e4      	cbz	r4, 8008436 <__gethex+0x15a>
 80083fc:	9b00      	ldr	r3, [sp, #0]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	bf14      	ite	ne
 8008402:	2700      	movne	r7, #0
 8008404:	2706      	moveq	r7, #6
 8008406:	4638      	mov	r0, r7
 8008408:	b009      	add	sp, #36	; 0x24
 800840a:	ecbd 8b02 	vpop	{d8}
 800840e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008412:	463e      	mov	r6, r7
 8008414:	4625      	mov	r5, r4
 8008416:	2401      	movs	r4, #1
 8008418:	e7ca      	b.n	80083b0 <__gethex+0xd4>
 800841a:	f04f 0900 	mov.w	r9, #0
 800841e:	1cb1      	adds	r1, r6, #2
 8008420:	e7d3      	b.n	80083ca <__gethex+0xee>
 8008422:	f04f 0901 	mov.w	r9, #1
 8008426:	e7fa      	b.n	800841e <__gethex+0x142>
 8008428:	230a      	movs	r3, #10
 800842a:	fb03 0202 	mla	r2, r3, r2, r0
 800842e:	3a10      	subs	r2, #16
 8008430:	e7d4      	b.n	80083dc <__gethex+0x100>
 8008432:	4631      	mov	r1, r6
 8008434:	e7df      	b.n	80083f6 <__gethex+0x11a>
 8008436:	1bf3      	subs	r3, r6, r7
 8008438:	3b01      	subs	r3, #1
 800843a:	4621      	mov	r1, r4
 800843c:	2b07      	cmp	r3, #7
 800843e:	dc0b      	bgt.n	8008458 <__gethex+0x17c>
 8008440:	ee18 0a10 	vmov	r0, s16
 8008444:	f000 facc 	bl	80089e0 <_Balloc>
 8008448:	4604      	mov	r4, r0
 800844a:	b940      	cbnz	r0, 800845e <__gethex+0x182>
 800844c:	4b65      	ldr	r3, [pc, #404]	; (80085e4 <__gethex+0x308>)
 800844e:	4602      	mov	r2, r0
 8008450:	21de      	movs	r1, #222	; 0xde
 8008452:	4865      	ldr	r0, [pc, #404]	; (80085e8 <__gethex+0x30c>)
 8008454:	f001 fd5e 	bl	8009f14 <__assert_func>
 8008458:	3101      	adds	r1, #1
 800845a:	105b      	asrs	r3, r3, #1
 800845c:	e7ee      	b.n	800843c <__gethex+0x160>
 800845e:	f100 0914 	add.w	r9, r0, #20
 8008462:	f04f 0b00 	mov.w	fp, #0
 8008466:	f1ca 0301 	rsb	r3, sl, #1
 800846a:	f8cd 9008 	str.w	r9, [sp, #8]
 800846e:	f8cd b000 	str.w	fp, [sp]
 8008472:	9306      	str	r3, [sp, #24]
 8008474:	42b7      	cmp	r7, r6
 8008476:	d340      	bcc.n	80084fa <__gethex+0x21e>
 8008478:	9802      	ldr	r0, [sp, #8]
 800847a:	9b00      	ldr	r3, [sp, #0]
 800847c:	f840 3b04 	str.w	r3, [r0], #4
 8008480:	eba0 0009 	sub.w	r0, r0, r9
 8008484:	1080      	asrs	r0, r0, #2
 8008486:	0146      	lsls	r6, r0, #5
 8008488:	6120      	str	r0, [r4, #16]
 800848a:	4618      	mov	r0, r3
 800848c:	f000 fb9e 	bl	8008bcc <__hi0bits>
 8008490:	1a30      	subs	r0, r6, r0
 8008492:	f8d8 6000 	ldr.w	r6, [r8]
 8008496:	42b0      	cmp	r0, r6
 8008498:	dd63      	ble.n	8008562 <__gethex+0x286>
 800849a:	1b87      	subs	r7, r0, r6
 800849c:	4639      	mov	r1, r7
 800849e:	4620      	mov	r0, r4
 80084a0:	f000 ff39 	bl	8009316 <__any_on>
 80084a4:	4682      	mov	sl, r0
 80084a6:	b1a8      	cbz	r0, 80084d4 <__gethex+0x1f8>
 80084a8:	1e7b      	subs	r3, r7, #1
 80084aa:	1159      	asrs	r1, r3, #5
 80084ac:	f003 021f 	and.w	r2, r3, #31
 80084b0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80084b4:	f04f 0a01 	mov.w	sl, #1
 80084b8:	fa0a f202 	lsl.w	r2, sl, r2
 80084bc:	420a      	tst	r2, r1
 80084be:	d009      	beq.n	80084d4 <__gethex+0x1f8>
 80084c0:	4553      	cmp	r3, sl
 80084c2:	dd05      	ble.n	80084d0 <__gethex+0x1f4>
 80084c4:	1eb9      	subs	r1, r7, #2
 80084c6:	4620      	mov	r0, r4
 80084c8:	f000 ff25 	bl	8009316 <__any_on>
 80084cc:	2800      	cmp	r0, #0
 80084ce:	d145      	bne.n	800855c <__gethex+0x280>
 80084d0:	f04f 0a02 	mov.w	sl, #2
 80084d4:	4639      	mov	r1, r7
 80084d6:	4620      	mov	r0, r4
 80084d8:	f7ff fe99 	bl	800820e <rshift>
 80084dc:	443d      	add	r5, r7
 80084de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80084e2:	42ab      	cmp	r3, r5
 80084e4:	da4c      	bge.n	8008580 <__gethex+0x2a4>
 80084e6:	ee18 0a10 	vmov	r0, s16
 80084ea:	4621      	mov	r1, r4
 80084ec:	f000 fab8 	bl	8008a60 <_Bfree>
 80084f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80084f2:	2300      	movs	r3, #0
 80084f4:	6013      	str	r3, [r2, #0]
 80084f6:	27a3      	movs	r7, #163	; 0xa3
 80084f8:	e785      	b.n	8008406 <__gethex+0x12a>
 80084fa:	1e73      	subs	r3, r6, #1
 80084fc:	9a05      	ldr	r2, [sp, #20]
 80084fe:	9303      	str	r3, [sp, #12]
 8008500:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008504:	4293      	cmp	r3, r2
 8008506:	d019      	beq.n	800853c <__gethex+0x260>
 8008508:	f1bb 0f20 	cmp.w	fp, #32
 800850c:	d107      	bne.n	800851e <__gethex+0x242>
 800850e:	9b02      	ldr	r3, [sp, #8]
 8008510:	9a00      	ldr	r2, [sp, #0]
 8008512:	f843 2b04 	str.w	r2, [r3], #4
 8008516:	9302      	str	r3, [sp, #8]
 8008518:	2300      	movs	r3, #0
 800851a:	9300      	str	r3, [sp, #0]
 800851c:	469b      	mov	fp, r3
 800851e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008522:	f7ff fec6 	bl	80082b2 <__hexdig_fun>
 8008526:	9b00      	ldr	r3, [sp, #0]
 8008528:	f000 000f 	and.w	r0, r0, #15
 800852c:	fa00 f00b 	lsl.w	r0, r0, fp
 8008530:	4303      	orrs	r3, r0
 8008532:	9300      	str	r3, [sp, #0]
 8008534:	f10b 0b04 	add.w	fp, fp, #4
 8008538:	9b03      	ldr	r3, [sp, #12]
 800853a:	e00d      	b.n	8008558 <__gethex+0x27c>
 800853c:	9b03      	ldr	r3, [sp, #12]
 800853e:	9a06      	ldr	r2, [sp, #24]
 8008540:	4413      	add	r3, r2
 8008542:	42bb      	cmp	r3, r7
 8008544:	d3e0      	bcc.n	8008508 <__gethex+0x22c>
 8008546:	4618      	mov	r0, r3
 8008548:	9901      	ldr	r1, [sp, #4]
 800854a:	9307      	str	r3, [sp, #28]
 800854c:	4652      	mov	r2, sl
 800854e:	f001 fcb0 	bl	8009eb2 <strncmp>
 8008552:	9b07      	ldr	r3, [sp, #28]
 8008554:	2800      	cmp	r0, #0
 8008556:	d1d7      	bne.n	8008508 <__gethex+0x22c>
 8008558:	461e      	mov	r6, r3
 800855a:	e78b      	b.n	8008474 <__gethex+0x198>
 800855c:	f04f 0a03 	mov.w	sl, #3
 8008560:	e7b8      	b.n	80084d4 <__gethex+0x1f8>
 8008562:	da0a      	bge.n	800857a <__gethex+0x29e>
 8008564:	1a37      	subs	r7, r6, r0
 8008566:	4621      	mov	r1, r4
 8008568:	ee18 0a10 	vmov	r0, s16
 800856c:	463a      	mov	r2, r7
 800856e:	f000 fc93 	bl	8008e98 <__lshift>
 8008572:	1bed      	subs	r5, r5, r7
 8008574:	4604      	mov	r4, r0
 8008576:	f100 0914 	add.w	r9, r0, #20
 800857a:	f04f 0a00 	mov.w	sl, #0
 800857e:	e7ae      	b.n	80084de <__gethex+0x202>
 8008580:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008584:	42a8      	cmp	r0, r5
 8008586:	dd72      	ble.n	800866e <__gethex+0x392>
 8008588:	1b45      	subs	r5, r0, r5
 800858a:	42ae      	cmp	r6, r5
 800858c:	dc36      	bgt.n	80085fc <__gethex+0x320>
 800858e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008592:	2b02      	cmp	r3, #2
 8008594:	d02a      	beq.n	80085ec <__gethex+0x310>
 8008596:	2b03      	cmp	r3, #3
 8008598:	d02c      	beq.n	80085f4 <__gethex+0x318>
 800859a:	2b01      	cmp	r3, #1
 800859c:	d115      	bne.n	80085ca <__gethex+0x2ee>
 800859e:	42ae      	cmp	r6, r5
 80085a0:	d113      	bne.n	80085ca <__gethex+0x2ee>
 80085a2:	2e01      	cmp	r6, #1
 80085a4:	d10b      	bne.n	80085be <__gethex+0x2e2>
 80085a6:	9a04      	ldr	r2, [sp, #16]
 80085a8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80085ac:	6013      	str	r3, [r2, #0]
 80085ae:	2301      	movs	r3, #1
 80085b0:	6123      	str	r3, [r4, #16]
 80085b2:	f8c9 3000 	str.w	r3, [r9]
 80085b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80085b8:	2762      	movs	r7, #98	; 0x62
 80085ba:	601c      	str	r4, [r3, #0]
 80085bc:	e723      	b.n	8008406 <__gethex+0x12a>
 80085be:	1e71      	subs	r1, r6, #1
 80085c0:	4620      	mov	r0, r4
 80085c2:	f000 fea8 	bl	8009316 <__any_on>
 80085c6:	2800      	cmp	r0, #0
 80085c8:	d1ed      	bne.n	80085a6 <__gethex+0x2ca>
 80085ca:	ee18 0a10 	vmov	r0, s16
 80085ce:	4621      	mov	r1, r4
 80085d0:	f000 fa46 	bl	8008a60 <_Bfree>
 80085d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80085d6:	2300      	movs	r3, #0
 80085d8:	6013      	str	r3, [r2, #0]
 80085da:	2750      	movs	r7, #80	; 0x50
 80085dc:	e713      	b.n	8008406 <__gethex+0x12a>
 80085de:	bf00      	nop
 80085e0:	0800a6e0 	.word	0x0800a6e0
 80085e4:	0800a664 	.word	0x0800a664
 80085e8:	0800a675 	.word	0x0800a675
 80085ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d1eb      	bne.n	80085ca <__gethex+0x2ee>
 80085f2:	e7d8      	b.n	80085a6 <__gethex+0x2ca>
 80085f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d1d5      	bne.n	80085a6 <__gethex+0x2ca>
 80085fa:	e7e6      	b.n	80085ca <__gethex+0x2ee>
 80085fc:	1e6f      	subs	r7, r5, #1
 80085fe:	f1ba 0f00 	cmp.w	sl, #0
 8008602:	d131      	bne.n	8008668 <__gethex+0x38c>
 8008604:	b127      	cbz	r7, 8008610 <__gethex+0x334>
 8008606:	4639      	mov	r1, r7
 8008608:	4620      	mov	r0, r4
 800860a:	f000 fe84 	bl	8009316 <__any_on>
 800860e:	4682      	mov	sl, r0
 8008610:	117b      	asrs	r3, r7, #5
 8008612:	2101      	movs	r1, #1
 8008614:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008618:	f007 071f 	and.w	r7, r7, #31
 800861c:	fa01 f707 	lsl.w	r7, r1, r7
 8008620:	421f      	tst	r7, r3
 8008622:	4629      	mov	r1, r5
 8008624:	4620      	mov	r0, r4
 8008626:	bf18      	it	ne
 8008628:	f04a 0a02 	orrne.w	sl, sl, #2
 800862c:	1b76      	subs	r6, r6, r5
 800862e:	f7ff fdee 	bl	800820e <rshift>
 8008632:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008636:	2702      	movs	r7, #2
 8008638:	f1ba 0f00 	cmp.w	sl, #0
 800863c:	d048      	beq.n	80086d0 <__gethex+0x3f4>
 800863e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008642:	2b02      	cmp	r3, #2
 8008644:	d015      	beq.n	8008672 <__gethex+0x396>
 8008646:	2b03      	cmp	r3, #3
 8008648:	d017      	beq.n	800867a <__gethex+0x39e>
 800864a:	2b01      	cmp	r3, #1
 800864c:	d109      	bne.n	8008662 <__gethex+0x386>
 800864e:	f01a 0f02 	tst.w	sl, #2
 8008652:	d006      	beq.n	8008662 <__gethex+0x386>
 8008654:	f8d9 0000 	ldr.w	r0, [r9]
 8008658:	ea4a 0a00 	orr.w	sl, sl, r0
 800865c:	f01a 0f01 	tst.w	sl, #1
 8008660:	d10e      	bne.n	8008680 <__gethex+0x3a4>
 8008662:	f047 0710 	orr.w	r7, r7, #16
 8008666:	e033      	b.n	80086d0 <__gethex+0x3f4>
 8008668:	f04f 0a01 	mov.w	sl, #1
 800866c:	e7d0      	b.n	8008610 <__gethex+0x334>
 800866e:	2701      	movs	r7, #1
 8008670:	e7e2      	b.n	8008638 <__gethex+0x35c>
 8008672:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008674:	f1c3 0301 	rsb	r3, r3, #1
 8008678:	9315      	str	r3, [sp, #84]	; 0x54
 800867a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800867c:	2b00      	cmp	r3, #0
 800867e:	d0f0      	beq.n	8008662 <__gethex+0x386>
 8008680:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008684:	f104 0314 	add.w	r3, r4, #20
 8008688:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800868c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008690:	f04f 0c00 	mov.w	ip, #0
 8008694:	4618      	mov	r0, r3
 8008696:	f853 2b04 	ldr.w	r2, [r3], #4
 800869a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800869e:	d01c      	beq.n	80086da <__gethex+0x3fe>
 80086a0:	3201      	adds	r2, #1
 80086a2:	6002      	str	r2, [r0, #0]
 80086a4:	2f02      	cmp	r7, #2
 80086a6:	f104 0314 	add.w	r3, r4, #20
 80086aa:	d13f      	bne.n	800872c <__gethex+0x450>
 80086ac:	f8d8 2000 	ldr.w	r2, [r8]
 80086b0:	3a01      	subs	r2, #1
 80086b2:	42b2      	cmp	r2, r6
 80086b4:	d10a      	bne.n	80086cc <__gethex+0x3f0>
 80086b6:	1171      	asrs	r1, r6, #5
 80086b8:	2201      	movs	r2, #1
 80086ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80086be:	f006 061f 	and.w	r6, r6, #31
 80086c2:	fa02 f606 	lsl.w	r6, r2, r6
 80086c6:	421e      	tst	r6, r3
 80086c8:	bf18      	it	ne
 80086ca:	4617      	movne	r7, r2
 80086cc:	f047 0720 	orr.w	r7, r7, #32
 80086d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80086d2:	601c      	str	r4, [r3, #0]
 80086d4:	9b04      	ldr	r3, [sp, #16]
 80086d6:	601d      	str	r5, [r3, #0]
 80086d8:	e695      	b.n	8008406 <__gethex+0x12a>
 80086da:	4299      	cmp	r1, r3
 80086dc:	f843 cc04 	str.w	ip, [r3, #-4]
 80086e0:	d8d8      	bhi.n	8008694 <__gethex+0x3b8>
 80086e2:	68a3      	ldr	r3, [r4, #8]
 80086e4:	459b      	cmp	fp, r3
 80086e6:	db19      	blt.n	800871c <__gethex+0x440>
 80086e8:	6861      	ldr	r1, [r4, #4]
 80086ea:	ee18 0a10 	vmov	r0, s16
 80086ee:	3101      	adds	r1, #1
 80086f0:	f000 f976 	bl	80089e0 <_Balloc>
 80086f4:	4681      	mov	r9, r0
 80086f6:	b918      	cbnz	r0, 8008700 <__gethex+0x424>
 80086f8:	4b1a      	ldr	r3, [pc, #104]	; (8008764 <__gethex+0x488>)
 80086fa:	4602      	mov	r2, r0
 80086fc:	2184      	movs	r1, #132	; 0x84
 80086fe:	e6a8      	b.n	8008452 <__gethex+0x176>
 8008700:	6922      	ldr	r2, [r4, #16]
 8008702:	3202      	adds	r2, #2
 8008704:	f104 010c 	add.w	r1, r4, #12
 8008708:	0092      	lsls	r2, r2, #2
 800870a:	300c      	adds	r0, #12
 800870c:	f7fe fb22 	bl	8006d54 <memcpy>
 8008710:	4621      	mov	r1, r4
 8008712:	ee18 0a10 	vmov	r0, s16
 8008716:	f000 f9a3 	bl	8008a60 <_Bfree>
 800871a:	464c      	mov	r4, r9
 800871c:	6923      	ldr	r3, [r4, #16]
 800871e:	1c5a      	adds	r2, r3, #1
 8008720:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008724:	6122      	str	r2, [r4, #16]
 8008726:	2201      	movs	r2, #1
 8008728:	615a      	str	r2, [r3, #20]
 800872a:	e7bb      	b.n	80086a4 <__gethex+0x3c8>
 800872c:	6922      	ldr	r2, [r4, #16]
 800872e:	455a      	cmp	r2, fp
 8008730:	dd0b      	ble.n	800874a <__gethex+0x46e>
 8008732:	2101      	movs	r1, #1
 8008734:	4620      	mov	r0, r4
 8008736:	f7ff fd6a 	bl	800820e <rshift>
 800873a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800873e:	3501      	adds	r5, #1
 8008740:	42ab      	cmp	r3, r5
 8008742:	f6ff aed0 	blt.w	80084e6 <__gethex+0x20a>
 8008746:	2701      	movs	r7, #1
 8008748:	e7c0      	b.n	80086cc <__gethex+0x3f0>
 800874a:	f016 061f 	ands.w	r6, r6, #31
 800874e:	d0fa      	beq.n	8008746 <__gethex+0x46a>
 8008750:	449a      	add	sl, r3
 8008752:	f1c6 0620 	rsb	r6, r6, #32
 8008756:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800875a:	f000 fa37 	bl	8008bcc <__hi0bits>
 800875e:	42b0      	cmp	r0, r6
 8008760:	dbe7      	blt.n	8008732 <__gethex+0x456>
 8008762:	e7f0      	b.n	8008746 <__gethex+0x46a>
 8008764:	0800a664 	.word	0x0800a664

08008768 <L_shift>:
 8008768:	f1c2 0208 	rsb	r2, r2, #8
 800876c:	0092      	lsls	r2, r2, #2
 800876e:	b570      	push	{r4, r5, r6, lr}
 8008770:	f1c2 0620 	rsb	r6, r2, #32
 8008774:	6843      	ldr	r3, [r0, #4]
 8008776:	6804      	ldr	r4, [r0, #0]
 8008778:	fa03 f506 	lsl.w	r5, r3, r6
 800877c:	432c      	orrs	r4, r5
 800877e:	40d3      	lsrs	r3, r2
 8008780:	6004      	str	r4, [r0, #0]
 8008782:	f840 3f04 	str.w	r3, [r0, #4]!
 8008786:	4288      	cmp	r0, r1
 8008788:	d3f4      	bcc.n	8008774 <L_shift+0xc>
 800878a:	bd70      	pop	{r4, r5, r6, pc}

0800878c <__match>:
 800878c:	b530      	push	{r4, r5, lr}
 800878e:	6803      	ldr	r3, [r0, #0]
 8008790:	3301      	adds	r3, #1
 8008792:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008796:	b914      	cbnz	r4, 800879e <__match+0x12>
 8008798:	6003      	str	r3, [r0, #0]
 800879a:	2001      	movs	r0, #1
 800879c:	bd30      	pop	{r4, r5, pc}
 800879e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087a2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80087a6:	2d19      	cmp	r5, #25
 80087a8:	bf98      	it	ls
 80087aa:	3220      	addls	r2, #32
 80087ac:	42a2      	cmp	r2, r4
 80087ae:	d0f0      	beq.n	8008792 <__match+0x6>
 80087b0:	2000      	movs	r0, #0
 80087b2:	e7f3      	b.n	800879c <__match+0x10>

080087b4 <__hexnan>:
 80087b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087b8:	680b      	ldr	r3, [r1, #0]
 80087ba:	6801      	ldr	r1, [r0, #0]
 80087bc:	115e      	asrs	r6, r3, #5
 80087be:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80087c2:	f013 031f 	ands.w	r3, r3, #31
 80087c6:	b087      	sub	sp, #28
 80087c8:	bf18      	it	ne
 80087ca:	3604      	addne	r6, #4
 80087cc:	2500      	movs	r5, #0
 80087ce:	1f37      	subs	r7, r6, #4
 80087d0:	4682      	mov	sl, r0
 80087d2:	4690      	mov	r8, r2
 80087d4:	9301      	str	r3, [sp, #4]
 80087d6:	f846 5c04 	str.w	r5, [r6, #-4]
 80087da:	46b9      	mov	r9, r7
 80087dc:	463c      	mov	r4, r7
 80087de:	9502      	str	r5, [sp, #8]
 80087e0:	46ab      	mov	fp, r5
 80087e2:	784a      	ldrb	r2, [r1, #1]
 80087e4:	1c4b      	adds	r3, r1, #1
 80087e6:	9303      	str	r3, [sp, #12]
 80087e8:	b342      	cbz	r2, 800883c <__hexnan+0x88>
 80087ea:	4610      	mov	r0, r2
 80087ec:	9105      	str	r1, [sp, #20]
 80087ee:	9204      	str	r2, [sp, #16]
 80087f0:	f7ff fd5f 	bl	80082b2 <__hexdig_fun>
 80087f4:	2800      	cmp	r0, #0
 80087f6:	d14f      	bne.n	8008898 <__hexnan+0xe4>
 80087f8:	9a04      	ldr	r2, [sp, #16]
 80087fa:	9905      	ldr	r1, [sp, #20]
 80087fc:	2a20      	cmp	r2, #32
 80087fe:	d818      	bhi.n	8008832 <__hexnan+0x7e>
 8008800:	9b02      	ldr	r3, [sp, #8]
 8008802:	459b      	cmp	fp, r3
 8008804:	dd13      	ble.n	800882e <__hexnan+0x7a>
 8008806:	454c      	cmp	r4, r9
 8008808:	d206      	bcs.n	8008818 <__hexnan+0x64>
 800880a:	2d07      	cmp	r5, #7
 800880c:	dc04      	bgt.n	8008818 <__hexnan+0x64>
 800880e:	462a      	mov	r2, r5
 8008810:	4649      	mov	r1, r9
 8008812:	4620      	mov	r0, r4
 8008814:	f7ff ffa8 	bl	8008768 <L_shift>
 8008818:	4544      	cmp	r4, r8
 800881a:	d950      	bls.n	80088be <__hexnan+0x10a>
 800881c:	2300      	movs	r3, #0
 800881e:	f1a4 0904 	sub.w	r9, r4, #4
 8008822:	f844 3c04 	str.w	r3, [r4, #-4]
 8008826:	f8cd b008 	str.w	fp, [sp, #8]
 800882a:	464c      	mov	r4, r9
 800882c:	461d      	mov	r5, r3
 800882e:	9903      	ldr	r1, [sp, #12]
 8008830:	e7d7      	b.n	80087e2 <__hexnan+0x2e>
 8008832:	2a29      	cmp	r2, #41	; 0x29
 8008834:	d156      	bne.n	80088e4 <__hexnan+0x130>
 8008836:	3102      	adds	r1, #2
 8008838:	f8ca 1000 	str.w	r1, [sl]
 800883c:	f1bb 0f00 	cmp.w	fp, #0
 8008840:	d050      	beq.n	80088e4 <__hexnan+0x130>
 8008842:	454c      	cmp	r4, r9
 8008844:	d206      	bcs.n	8008854 <__hexnan+0xa0>
 8008846:	2d07      	cmp	r5, #7
 8008848:	dc04      	bgt.n	8008854 <__hexnan+0xa0>
 800884a:	462a      	mov	r2, r5
 800884c:	4649      	mov	r1, r9
 800884e:	4620      	mov	r0, r4
 8008850:	f7ff ff8a 	bl	8008768 <L_shift>
 8008854:	4544      	cmp	r4, r8
 8008856:	d934      	bls.n	80088c2 <__hexnan+0x10e>
 8008858:	f1a8 0204 	sub.w	r2, r8, #4
 800885c:	4623      	mov	r3, r4
 800885e:	f853 1b04 	ldr.w	r1, [r3], #4
 8008862:	f842 1f04 	str.w	r1, [r2, #4]!
 8008866:	429f      	cmp	r7, r3
 8008868:	d2f9      	bcs.n	800885e <__hexnan+0xaa>
 800886a:	1b3b      	subs	r3, r7, r4
 800886c:	f023 0303 	bic.w	r3, r3, #3
 8008870:	3304      	adds	r3, #4
 8008872:	3401      	adds	r4, #1
 8008874:	3e03      	subs	r6, #3
 8008876:	42b4      	cmp	r4, r6
 8008878:	bf88      	it	hi
 800887a:	2304      	movhi	r3, #4
 800887c:	4443      	add	r3, r8
 800887e:	2200      	movs	r2, #0
 8008880:	f843 2b04 	str.w	r2, [r3], #4
 8008884:	429f      	cmp	r7, r3
 8008886:	d2fb      	bcs.n	8008880 <__hexnan+0xcc>
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	b91b      	cbnz	r3, 8008894 <__hexnan+0xe0>
 800888c:	4547      	cmp	r7, r8
 800888e:	d127      	bne.n	80088e0 <__hexnan+0x12c>
 8008890:	2301      	movs	r3, #1
 8008892:	603b      	str	r3, [r7, #0]
 8008894:	2005      	movs	r0, #5
 8008896:	e026      	b.n	80088e6 <__hexnan+0x132>
 8008898:	3501      	adds	r5, #1
 800889a:	2d08      	cmp	r5, #8
 800889c:	f10b 0b01 	add.w	fp, fp, #1
 80088a0:	dd06      	ble.n	80088b0 <__hexnan+0xfc>
 80088a2:	4544      	cmp	r4, r8
 80088a4:	d9c3      	bls.n	800882e <__hexnan+0x7a>
 80088a6:	2300      	movs	r3, #0
 80088a8:	f844 3c04 	str.w	r3, [r4, #-4]
 80088ac:	2501      	movs	r5, #1
 80088ae:	3c04      	subs	r4, #4
 80088b0:	6822      	ldr	r2, [r4, #0]
 80088b2:	f000 000f 	and.w	r0, r0, #15
 80088b6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80088ba:	6022      	str	r2, [r4, #0]
 80088bc:	e7b7      	b.n	800882e <__hexnan+0x7a>
 80088be:	2508      	movs	r5, #8
 80088c0:	e7b5      	b.n	800882e <__hexnan+0x7a>
 80088c2:	9b01      	ldr	r3, [sp, #4]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d0df      	beq.n	8008888 <__hexnan+0xd4>
 80088c8:	f04f 32ff 	mov.w	r2, #4294967295
 80088cc:	f1c3 0320 	rsb	r3, r3, #32
 80088d0:	fa22 f303 	lsr.w	r3, r2, r3
 80088d4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80088d8:	401a      	ands	r2, r3
 80088da:	f846 2c04 	str.w	r2, [r6, #-4]
 80088de:	e7d3      	b.n	8008888 <__hexnan+0xd4>
 80088e0:	3f04      	subs	r7, #4
 80088e2:	e7d1      	b.n	8008888 <__hexnan+0xd4>
 80088e4:	2004      	movs	r0, #4
 80088e6:	b007      	add	sp, #28
 80088e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080088ec <__retarget_lock_init_recursive>:
 80088ec:	4770      	bx	lr

080088ee <__retarget_lock_acquire_recursive>:
 80088ee:	4770      	bx	lr

080088f0 <__retarget_lock_release_recursive>:
 80088f0:	4770      	bx	lr

080088f2 <__swhatbuf_r>:
 80088f2:	b570      	push	{r4, r5, r6, lr}
 80088f4:	460e      	mov	r6, r1
 80088f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088fa:	2900      	cmp	r1, #0
 80088fc:	b096      	sub	sp, #88	; 0x58
 80088fe:	4614      	mov	r4, r2
 8008900:	461d      	mov	r5, r3
 8008902:	da07      	bge.n	8008914 <__swhatbuf_r+0x22>
 8008904:	2300      	movs	r3, #0
 8008906:	602b      	str	r3, [r5, #0]
 8008908:	89b3      	ldrh	r3, [r6, #12]
 800890a:	061a      	lsls	r2, r3, #24
 800890c:	d410      	bmi.n	8008930 <__swhatbuf_r+0x3e>
 800890e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008912:	e00e      	b.n	8008932 <__swhatbuf_r+0x40>
 8008914:	466a      	mov	r2, sp
 8008916:	f001 fb3d 	bl	8009f94 <_fstat_r>
 800891a:	2800      	cmp	r0, #0
 800891c:	dbf2      	blt.n	8008904 <__swhatbuf_r+0x12>
 800891e:	9a01      	ldr	r2, [sp, #4]
 8008920:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008924:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008928:	425a      	negs	r2, r3
 800892a:	415a      	adcs	r2, r3
 800892c:	602a      	str	r2, [r5, #0]
 800892e:	e7ee      	b.n	800890e <__swhatbuf_r+0x1c>
 8008930:	2340      	movs	r3, #64	; 0x40
 8008932:	2000      	movs	r0, #0
 8008934:	6023      	str	r3, [r4, #0]
 8008936:	b016      	add	sp, #88	; 0x58
 8008938:	bd70      	pop	{r4, r5, r6, pc}
	...

0800893c <__smakebuf_r>:
 800893c:	898b      	ldrh	r3, [r1, #12]
 800893e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008940:	079d      	lsls	r5, r3, #30
 8008942:	4606      	mov	r6, r0
 8008944:	460c      	mov	r4, r1
 8008946:	d507      	bpl.n	8008958 <__smakebuf_r+0x1c>
 8008948:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800894c:	6023      	str	r3, [r4, #0]
 800894e:	6123      	str	r3, [r4, #16]
 8008950:	2301      	movs	r3, #1
 8008952:	6163      	str	r3, [r4, #20]
 8008954:	b002      	add	sp, #8
 8008956:	bd70      	pop	{r4, r5, r6, pc}
 8008958:	ab01      	add	r3, sp, #4
 800895a:	466a      	mov	r2, sp
 800895c:	f7ff ffc9 	bl	80088f2 <__swhatbuf_r>
 8008960:	9900      	ldr	r1, [sp, #0]
 8008962:	4605      	mov	r5, r0
 8008964:	4630      	mov	r0, r6
 8008966:	f000 fd57 	bl	8009418 <_malloc_r>
 800896a:	b948      	cbnz	r0, 8008980 <__smakebuf_r+0x44>
 800896c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008970:	059a      	lsls	r2, r3, #22
 8008972:	d4ef      	bmi.n	8008954 <__smakebuf_r+0x18>
 8008974:	f023 0303 	bic.w	r3, r3, #3
 8008978:	f043 0302 	orr.w	r3, r3, #2
 800897c:	81a3      	strh	r3, [r4, #12]
 800897e:	e7e3      	b.n	8008948 <__smakebuf_r+0xc>
 8008980:	4b0d      	ldr	r3, [pc, #52]	; (80089b8 <__smakebuf_r+0x7c>)
 8008982:	62b3      	str	r3, [r6, #40]	; 0x28
 8008984:	89a3      	ldrh	r3, [r4, #12]
 8008986:	6020      	str	r0, [r4, #0]
 8008988:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800898c:	81a3      	strh	r3, [r4, #12]
 800898e:	9b00      	ldr	r3, [sp, #0]
 8008990:	6163      	str	r3, [r4, #20]
 8008992:	9b01      	ldr	r3, [sp, #4]
 8008994:	6120      	str	r0, [r4, #16]
 8008996:	b15b      	cbz	r3, 80089b0 <__smakebuf_r+0x74>
 8008998:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800899c:	4630      	mov	r0, r6
 800899e:	f001 fb0b 	bl	8009fb8 <_isatty_r>
 80089a2:	b128      	cbz	r0, 80089b0 <__smakebuf_r+0x74>
 80089a4:	89a3      	ldrh	r3, [r4, #12]
 80089a6:	f023 0303 	bic.w	r3, r3, #3
 80089aa:	f043 0301 	orr.w	r3, r3, #1
 80089ae:	81a3      	strh	r3, [r4, #12]
 80089b0:	89a0      	ldrh	r0, [r4, #12]
 80089b2:	4305      	orrs	r5, r0
 80089b4:	81a5      	strh	r5, [r4, #12]
 80089b6:	e7cd      	b.n	8008954 <__smakebuf_r+0x18>
 80089b8:	0800806d 	.word	0x0800806d

080089bc <__ascii_mbtowc>:
 80089bc:	b082      	sub	sp, #8
 80089be:	b901      	cbnz	r1, 80089c2 <__ascii_mbtowc+0x6>
 80089c0:	a901      	add	r1, sp, #4
 80089c2:	b142      	cbz	r2, 80089d6 <__ascii_mbtowc+0x1a>
 80089c4:	b14b      	cbz	r3, 80089da <__ascii_mbtowc+0x1e>
 80089c6:	7813      	ldrb	r3, [r2, #0]
 80089c8:	600b      	str	r3, [r1, #0]
 80089ca:	7812      	ldrb	r2, [r2, #0]
 80089cc:	1e10      	subs	r0, r2, #0
 80089ce:	bf18      	it	ne
 80089d0:	2001      	movne	r0, #1
 80089d2:	b002      	add	sp, #8
 80089d4:	4770      	bx	lr
 80089d6:	4610      	mov	r0, r2
 80089d8:	e7fb      	b.n	80089d2 <__ascii_mbtowc+0x16>
 80089da:	f06f 0001 	mvn.w	r0, #1
 80089de:	e7f8      	b.n	80089d2 <__ascii_mbtowc+0x16>

080089e0 <_Balloc>:
 80089e0:	b570      	push	{r4, r5, r6, lr}
 80089e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80089e4:	4604      	mov	r4, r0
 80089e6:	460d      	mov	r5, r1
 80089e8:	b976      	cbnz	r6, 8008a08 <_Balloc+0x28>
 80089ea:	2010      	movs	r0, #16
 80089ec:	f001 fb06 	bl	8009ffc <malloc>
 80089f0:	4602      	mov	r2, r0
 80089f2:	6260      	str	r0, [r4, #36]	; 0x24
 80089f4:	b920      	cbnz	r0, 8008a00 <_Balloc+0x20>
 80089f6:	4b18      	ldr	r3, [pc, #96]	; (8008a58 <_Balloc+0x78>)
 80089f8:	4818      	ldr	r0, [pc, #96]	; (8008a5c <_Balloc+0x7c>)
 80089fa:	2166      	movs	r1, #102	; 0x66
 80089fc:	f001 fa8a 	bl	8009f14 <__assert_func>
 8008a00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008a04:	6006      	str	r6, [r0, #0]
 8008a06:	60c6      	str	r6, [r0, #12]
 8008a08:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008a0a:	68f3      	ldr	r3, [r6, #12]
 8008a0c:	b183      	cbz	r3, 8008a30 <_Balloc+0x50>
 8008a0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a10:	68db      	ldr	r3, [r3, #12]
 8008a12:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008a16:	b9b8      	cbnz	r0, 8008a48 <_Balloc+0x68>
 8008a18:	2101      	movs	r1, #1
 8008a1a:	fa01 f605 	lsl.w	r6, r1, r5
 8008a1e:	1d72      	adds	r2, r6, #5
 8008a20:	0092      	lsls	r2, r2, #2
 8008a22:	4620      	mov	r0, r4
 8008a24:	f000 fc98 	bl	8009358 <_calloc_r>
 8008a28:	b160      	cbz	r0, 8008a44 <_Balloc+0x64>
 8008a2a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008a2e:	e00e      	b.n	8008a4e <_Balloc+0x6e>
 8008a30:	2221      	movs	r2, #33	; 0x21
 8008a32:	2104      	movs	r1, #4
 8008a34:	4620      	mov	r0, r4
 8008a36:	f000 fc8f 	bl	8009358 <_calloc_r>
 8008a3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a3c:	60f0      	str	r0, [r6, #12]
 8008a3e:	68db      	ldr	r3, [r3, #12]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d1e4      	bne.n	8008a0e <_Balloc+0x2e>
 8008a44:	2000      	movs	r0, #0
 8008a46:	bd70      	pop	{r4, r5, r6, pc}
 8008a48:	6802      	ldr	r2, [r0, #0]
 8008a4a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008a4e:	2300      	movs	r3, #0
 8008a50:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008a54:	e7f7      	b.n	8008a46 <_Balloc+0x66>
 8008a56:	bf00      	nop
 8008a58:	0800a6f4 	.word	0x0800a6f4
 8008a5c:	0800a70b 	.word	0x0800a70b

08008a60 <_Bfree>:
 8008a60:	b570      	push	{r4, r5, r6, lr}
 8008a62:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008a64:	4605      	mov	r5, r0
 8008a66:	460c      	mov	r4, r1
 8008a68:	b976      	cbnz	r6, 8008a88 <_Bfree+0x28>
 8008a6a:	2010      	movs	r0, #16
 8008a6c:	f001 fac6 	bl	8009ffc <malloc>
 8008a70:	4602      	mov	r2, r0
 8008a72:	6268      	str	r0, [r5, #36]	; 0x24
 8008a74:	b920      	cbnz	r0, 8008a80 <_Bfree+0x20>
 8008a76:	4b09      	ldr	r3, [pc, #36]	; (8008a9c <_Bfree+0x3c>)
 8008a78:	4809      	ldr	r0, [pc, #36]	; (8008aa0 <_Bfree+0x40>)
 8008a7a:	218a      	movs	r1, #138	; 0x8a
 8008a7c:	f001 fa4a 	bl	8009f14 <__assert_func>
 8008a80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008a84:	6006      	str	r6, [r0, #0]
 8008a86:	60c6      	str	r6, [r0, #12]
 8008a88:	b13c      	cbz	r4, 8008a9a <_Bfree+0x3a>
 8008a8a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008a8c:	6862      	ldr	r2, [r4, #4]
 8008a8e:	68db      	ldr	r3, [r3, #12]
 8008a90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008a94:	6021      	str	r1, [r4, #0]
 8008a96:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008a9a:	bd70      	pop	{r4, r5, r6, pc}
 8008a9c:	0800a6f4 	.word	0x0800a6f4
 8008aa0:	0800a70b 	.word	0x0800a70b

08008aa4 <__multadd>:
 8008aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008aa8:	690e      	ldr	r6, [r1, #16]
 8008aaa:	4607      	mov	r7, r0
 8008aac:	4698      	mov	r8, r3
 8008aae:	460c      	mov	r4, r1
 8008ab0:	f101 0014 	add.w	r0, r1, #20
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	6805      	ldr	r5, [r0, #0]
 8008ab8:	b2a9      	uxth	r1, r5
 8008aba:	fb02 8101 	mla	r1, r2, r1, r8
 8008abe:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008ac2:	0c2d      	lsrs	r5, r5, #16
 8008ac4:	fb02 c505 	mla	r5, r2, r5, ip
 8008ac8:	b289      	uxth	r1, r1
 8008aca:	3301      	adds	r3, #1
 8008acc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008ad0:	429e      	cmp	r6, r3
 8008ad2:	f840 1b04 	str.w	r1, [r0], #4
 8008ad6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008ada:	dcec      	bgt.n	8008ab6 <__multadd+0x12>
 8008adc:	f1b8 0f00 	cmp.w	r8, #0
 8008ae0:	d022      	beq.n	8008b28 <__multadd+0x84>
 8008ae2:	68a3      	ldr	r3, [r4, #8]
 8008ae4:	42b3      	cmp	r3, r6
 8008ae6:	dc19      	bgt.n	8008b1c <__multadd+0x78>
 8008ae8:	6861      	ldr	r1, [r4, #4]
 8008aea:	4638      	mov	r0, r7
 8008aec:	3101      	adds	r1, #1
 8008aee:	f7ff ff77 	bl	80089e0 <_Balloc>
 8008af2:	4605      	mov	r5, r0
 8008af4:	b928      	cbnz	r0, 8008b02 <__multadd+0x5e>
 8008af6:	4602      	mov	r2, r0
 8008af8:	4b0d      	ldr	r3, [pc, #52]	; (8008b30 <__multadd+0x8c>)
 8008afa:	480e      	ldr	r0, [pc, #56]	; (8008b34 <__multadd+0x90>)
 8008afc:	21b5      	movs	r1, #181	; 0xb5
 8008afe:	f001 fa09 	bl	8009f14 <__assert_func>
 8008b02:	6922      	ldr	r2, [r4, #16]
 8008b04:	3202      	adds	r2, #2
 8008b06:	f104 010c 	add.w	r1, r4, #12
 8008b0a:	0092      	lsls	r2, r2, #2
 8008b0c:	300c      	adds	r0, #12
 8008b0e:	f7fe f921 	bl	8006d54 <memcpy>
 8008b12:	4621      	mov	r1, r4
 8008b14:	4638      	mov	r0, r7
 8008b16:	f7ff ffa3 	bl	8008a60 <_Bfree>
 8008b1a:	462c      	mov	r4, r5
 8008b1c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008b20:	3601      	adds	r6, #1
 8008b22:	f8c3 8014 	str.w	r8, [r3, #20]
 8008b26:	6126      	str	r6, [r4, #16]
 8008b28:	4620      	mov	r0, r4
 8008b2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b2e:	bf00      	nop
 8008b30:	0800a664 	.word	0x0800a664
 8008b34:	0800a70b 	.word	0x0800a70b

08008b38 <__s2b>:
 8008b38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b3c:	460c      	mov	r4, r1
 8008b3e:	4615      	mov	r5, r2
 8008b40:	461f      	mov	r7, r3
 8008b42:	2209      	movs	r2, #9
 8008b44:	3308      	adds	r3, #8
 8008b46:	4606      	mov	r6, r0
 8008b48:	fb93 f3f2 	sdiv	r3, r3, r2
 8008b4c:	2100      	movs	r1, #0
 8008b4e:	2201      	movs	r2, #1
 8008b50:	429a      	cmp	r2, r3
 8008b52:	db09      	blt.n	8008b68 <__s2b+0x30>
 8008b54:	4630      	mov	r0, r6
 8008b56:	f7ff ff43 	bl	80089e0 <_Balloc>
 8008b5a:	b940      	cbnz	r0, 8008b6e <__s2b+0x36>
 8008b5c:	4602      	mov	r2, r0
 8008b5e:	4b19      	ldr	r3, [pc, #100]	; (8008bc4 <__s2b+0x8c>)
 8008b60:	4819      	ldr	r0, [pc, #100]	; (8008bc8 <__s2b+0x90>)
 8008b62:	21ce      	movs	r1, #206	; 0xce
 8008b64:	f001 f9d6 	bl	8009f14 <__assert_func>
 8008b68:	0052      	lsls	r2, r2, #1
 8008b6a:	3101      	adds	r1, #1
 8008b6c:	e7f0      	b.n	8008b50 <__s2b+0x18>
 8008b6e:	9b08      	ldr	r3, [sp, #32]
 8008b70:	6143      	str	r3, [r0, #20]
 8008b72:	2d09      	cmp	r5, #9
 8008b74:	f04f 0301 	mov.w	r3, #1
 8008b78:	6103      	str	r3, [r0, #16]
 8008b7a:	dd16      	ble.n	8008baa <__s2b+0x72>
 8008b7c:	f104 0909 	add.w	r9, r4, #9
 8008b80:	46c8      	mov	r8, r9
 8008b82:	442c      	add	r4, r5
 8008b84:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008b88:	4601      	mov	r1, r0
 8008b8a:	3b30      	subs	r3, #48	; 0x30
 8008b8c:	220a      	movs	r2, #10
 8008b8e:	4630      	mov	r0, r6
 8008b90:	f7ff ff88 	bl	8008aa4 <__multadd>
 8008b94:	45a0      	cmp	r8, r4
 8008b96:	d1f5      	bne.n	8008b84 <__s2b+0x4c>
 8008b98:	f1a5 0408 	sub.w	r4, r5, #8
 8008b9c:	444c      	add	r4, r9
 8008b9e:	1b2d      	subs	r5, r5, r4
 8008ba0:	1963      	adds	r3, r4, r5
 8008ba2:	42bb      	cmp	r3, r7
 8008ba4:	db04      	blt.n	8008bb0 <__s2b+0x78>
 8008ba6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008baa:	340a      	adds	r4, #10
 8008bac:	2509      	movs	r5, #9
 8008bae:	e7f6      	b.n	8008b9e <__s2b+0x66>
 8008bb0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008bb4:	4601      	mov	r1, r0
 8008bb6:	3b30      	subs	r3, #48	; 0x30
 8008bb8:	220a      	movs	r2, #10
 8008bba:	4630      	mov	r0, r6
 8008bbc:	f7ff ff72 	bl	8008aa4 <__multadd>
 8008bc0:	e7ee      	b.n	8008ba0 <__s2b+0x68>
 8008bc2:	bf00      	nop
 8008bc4:	0800a664 	.word	0x0800a664
 8008bc8:	0800a70b 	.word	0x0800a70b

08008bcc <__hi0bits>:
 8008bcc:	0c03      	lsrs	r3, r0, #16
 8008bce:	041b      	lsls	r3, r3, #16
 8008bd0:	b9d3      	cbnz	r3, 8008c08 <__hi0bits+0x3c>
 8008bd2:	0400      	lsls	r0, r0, #16
 8008bd4:	2310      	movs	r3, #16
 8008bd6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008bda:	bf04      	itt	eq
 8008bdc:	0200      	lsleq	r0, r0, #8
 8008bde:	3308      	addeq	r3, #8
 8008be0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008be4:	bf04      	itt	eq
 8008be6:	0100      	lsleq	r0, r0, #4
 8008be8:	3304      	addeq	r3, #4
 8008bea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008bee:	bf04      	itt	eq
 8008bf0:	0080      	lsleq	r0, r0, #2
 8008bf2:	3302      	addeq	r3, #2
 8008bf4:	2800      	cmp	r0, #0
 8008bf6:	db05      	blt.n	8008c04 <__hi0bits+0x38>
 8008bf8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008bfc:	f103 0301 	add.w	r3, r3, #1
 8008c00:	bf08      	it	eq
 8008c02:	2320      	moveq	r3, #32
 8008c04:	4618      	mov	r0, r3
 8008c06:	4770      	bx	lr
 8008c08:	2300      	movs	r3, #0
 8008c0a:	e7e4      	b.n	8008bd6 <__hi0bits+0xa>

08008c0c <__lo0bits>:
 8008c0c:	6803      	ldr	r3, [r0, #0]
 8008c0e:	f013 0207 	ands.w	r2, r3, #7
 8008c12:	4601      	mov	r1, r0
 8008c14:	d00b      	beq.n	8008c2e <__lo0bits+0x22>
 8008c16:	07da      	lsls	r2, r3, #31
 8008c18:	d424      	bmi.n	8008c64 <__lo0bits+0x58>
 8008c1a:	0798      	lsls	r0, r3, #30
 8008c1c:	bf49      	itett	mi
 8008c1e:	085b      	lsrmi	r3, r3, #1
 8008c20:	089b      	lsrpl	r3, r3, #2
 8008c22:	2001      	movmi	r0, #1
 8008c24:	600b      	strmi	r3, [r1, #0]
 8008c26:	bf5c      	itt	pl
 8008c28:	600b      	strpl	r3, [r1, #0]
 8008c2a:	2002      	movpl	r0, #2
 8008c2c:	4770      	bx	lr
 8008c2e:	b298      	uxth	r0, r3
 8008c30:	b9b0      	cbnz	r0, 8008c60 <__lo0bits+0x54>
 8008c32:	0c1b      	lsrs	r3, r3, #16
 8008c34:	2010      	movs	r0, #16
 8008c36:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008c3a:	bf04      	itt	eq
 8008c3c:	0a1b      	lsreq	r3, r3, #8
 8008c3e:	3008      	addeq	r0, #8
 8008c40:	071a      	lsls	r2, r3, #28
 8008c42:	bf04      	itt	eq
 8008c44:	091b      	lsreq	r3, r3, #4
 8008c46:	3004      	addeq	r0, #4
 8008c48:	079a      	lsls	r2, r3, #30
 8008c4a:	bf04      	itt	eq
 8008c4c:	089b      	lsreq	r3, r3, #2
 8008c4e:	3002      	addeq	r0, #2
 8008c50:	07da      	lsls	r2, r3, #31
 8008c52:	d403      	bmi.n	8008c5c <__lo0bits+0x50>
 8008c54:	085b      	lsrs	r3, r3, #1
 8008c56:	f100 0001 	add.w	r0, r0, #1
 8008c5a:	d005      	beq.n	8008c68 <__lo0bits+0x5c>
 8008c5c:	600b      	str	r3, [r1, #0]
 8008c5e:	4770      	bx	lr
 8008c60:	4610      	mov	r0, r2
 8008c62:	e7e8      	b.n	8008c36 <__lo0bits+0x2a>
 8008c64:	2000      	movs	r0, #0
 8008c66:	4770      	bx	lr
 8008c68:	2020      	movs	r0, #32
 8008c6a:	4770      	bx	lr

08008c6c <__i2b>:
 8008c6c:	b510      	push	{r4, lr}
 8008c6e:	460c      	mov	r4, r1
 8008c70:	2101      	movs	r1, #1
 8008c72:	f7ff feb5 	bl	80089e0 <_Balloc>
 8008c76:	4602      	mov	r2, r0
 8008c78:	b928      	cbnz	r0, 8008c86 <__i2b+0x1a>
 8008c7a:	4b05      	ldr	r3, [pc, #20]	; (8008c90 <__i2b+0x24>)
 8008c7c:	4805      	ldr	r0, [pc, #20]	; (8008c94 <__i2b+0x28>)
 8008c7e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008c82:	f001 f947 	bl	8009f14 <__assert_func>
 8008c86:	2301      	movs	r3, #1
 8008c88:	6144      	str	r4, [r0, #20]
 8008c8a:	6103      	str	r3, [r0, #16]
 8008c8c:	bd10      	pop	{r4, pc}
 8008c8e:	bf00      	nop
 8008c90:	0800a664 	.word	0x0800a664
 8008c94:	0800a70b 	.word	0x0800a70b

08008c98 <__multiply>:
 8008c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c9c:	4614      	mov	r4, r2
 8008c9e:	690a      	ldr	r2, [r1, #16]
 8008ca0:	6923      	ldr	r3, [r4, #16]
 8008ca2:	429a      	cmp	r2, r3
 8008ca4:	bfb8      	it	lt
 8008ca6:	460b      	movlt	r3, r1
 8008ca8:	460d      	mov	r5, r1
 8008caa:	bfbc      	itt	lt
 8008cac:	4625      	movlt	r5, r4
 8008cae:	461c      	movlt	r4, r3
 8008cb0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008cb4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008cb8:	68ab      	ldr	r3, [r5, #8]
 8008cba:	6869      	ldr	r1, [r5, #4]
 8008cbc:	eb0a 0709 	add.w	r7, sl, r9
 8008cc0:	42bb      	cmp	r3, r7
 8008cc2:	b085      	sub	sp, #20
 8008cc4:	bfb8      	it	lt
 8008cc6:	3101      	addlt	r1, #1
 8008cc8:	f7ff fe8a 	bl	80089e0 <_Balloc>
 8008ccc:	b930      	cbnz	r0, 8008cdc <__multiply+0x44>
 8008cce:	4602      	mov	r2, r0
 8008cd0:	4b42      	ldr	r3, [pc, #264]	; (8008ddc <__multiply+0x144>)
 8008cd2:	4843      	ldr	r0, [pc, #268]	; (8008de0 <__multiply+0x148>)
 8008cd4:	f240 115d 	movw	r1, #349	; 0x15d
 8008cd8:	f001 f91c 	bl	8009f14 <__assert_func>
 8008cdc:	f100 0614 	add.w	r6, r0, #20
 8008ce0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008ce4:	4633      	mov	r3, r6
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	4543      	cmp	r3, r8
 8008cea:	d31e      	bcc.n	8008d2a <__multiply+0x92>
 8008cec:	f105 0c14 	add.w	ip, r5, #20
 8008cf0:	f104 0314 	add.w	r3, r4, #20
 8008cf4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008cf8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008cfc:	9202      	str	r2, [sp, #8]
 8008cfe:	ebac 0205 	sub.w	r2, ip, r5
 8008d02:	3a15      	subs	r2, #21
 8008d04:	f022 0203 	bic.w	r2, r2, #3
 8008d08:	3204      	adds	r2, #4
 8008d0a:	f105 0115 	add.w	r1, r5, #21
 8008d0e:	458c      	cmp	ip, r1
 8008d10:	bf38      	it	cc
 8008d12:	2204      	movcc	r2, #4
 8008d14:	9201      	str	r2, [sp, #4]
 8008d16:	9a02      	ldr	r2, [sp, #8]
 8008d18:	9303      	str	r3, [sp, #12]
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	d808      	bhi.n	8008d30 <__multiply+0x98>
 8008d1e:	2f00      	cmp	r7, #0
 8008d20:	dc55      	bgt.n	8008dce <__multiply+0x136>
 8008d22:	6107      	str	r7, [r0, #16]
 8008d24:	b005      	add	sp, #20
 8008d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d2a:	f843 2b04 	str.w	r2, [r3], #4
 8008d2e:	e7db      	b.n	8008ce8 <__multiply+0x50>
 8008d30:	f8b3 a000 	ldrh.w	sl, [r3]
 8008d34:	f1ba 0f00 	cmp.w	sl, #0
 8008d38:	d020      	beq.n	8008d7c <__multiply+0xe4>
 8008d3a:	f105 0e14 	add.w	lr, r5, #20
 8008d3e:	46b1      	mov	r9, r6
 8008d40:	2200      	movs	r2, #0
 8008d42:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008d46:	f8d9 b000 	ldr.w	fp, [r9]
 8008d4a:	b2a1      	uxth	r1, r4
 8008d4c:	fa1f fb8b 	uxth.w	fp, fp
 8008d50:	fb0a b101 	mla	r1, sl, r1, fp
 8008d54:	4411      	add	r1, r2
 8008d56:	f8d9 2000 	ldr.w	r2, [r9]
 8008d5a:	0c24      	lsrs	r4, r4, #16
 8008d5c:	0c12      	lsrs	r2, r2, #16
 8008d5e:	fb0a 2404 	mla	r4, sl, r4, r2
 8008d62:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008d66:	b289      	uxth	r1, r1
 8008d68:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008d6c:	45f4      	cmp	ip, lr
 8008d6e:	f849 1b04 	str.w	r1, [r9], #4
 8008d72:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008d76:	d8e4      	bhi.n	8008d42 <__multiply+0xaa>
 8008d78:	9901      	ldr	r1, [sp, #4]
 8008d7a:	5072      	str	r2, [r6, r1]
 8008d7c:	9a03      	ldr	r2, [sp, #12]
 8008d7e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008d82:	3304      	adds	r3, #4
 8008d84:	f1b9 0f00 	cmp.w	r9, #0
 8008d88:	d01f      	beq.n	8008dca <__multiply+0x132>
 8008d8a:	6834      	ldr	r4, [r6, #0]
 8008d8c:	f105 0114 	add.w	r1, r5, #20
 8008d90:	46b6      	mov	lr, r6
 8008d92:	f04f 0a00 	mov.w	sl, #0
 8008d96:	880a      	ldrh	r2, [r1, #0]
 8008d98:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008d9c:	fb09 b202 	mla	r2, r9, r2, fp
 8008da0:	4492      	add	sl, r2
 8008da2:	b2a4      	uxth	r4, r4
 8008da4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008da8:	f84e 4b04 	str.w	r4, [lr], #4
 8008dac:	f851 4b04 	ldr.w	r4, [r1], #4
 8008db0:	f8be 2000 	ldrh.w	r2, [lr]
 8008db4:	0c24      	lsrs	r4, r4, #16
 8008db6:	fb09 2404 	mla	r4, r9, r4, r2
 8008dba:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008dbe:	458c      	cmp	ip, r1
 8008dc0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008dc4:	d8e7      	bhi.n	8008d96 <__multiply+0xfe>
 8008dc6:	9a01      	ldr	r2, [sp, #4]
 8008dc8:	50b4      	str	r4, [r6, r2]
 8008dca:	3604      	adds	r6, #4
 8008dcc:	e7a3      	b.n	8008d16 <__multiply+0x7e>
 8008dce:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d1a5      	bne.n	8008d22 <__multiply+0x8a>
 8008dd6:	3f01      	subs	r7, #1
 8008dd8:	e7a1      	b.n	8008d1e <__multiply+0x86>
 8008dda:	bf00      	nop
 8008ddc:	0800a664 	.word	0x0800a664
 8008de0:	0800a70b 	.word	0x0800a70b

08008de4 <__pow5mult>:
 8008de4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008de8:	4615      	mov	r5, r2
 8008dea:	f012 0203 	ands.w	r2, r2, #3
 8008dee:	4606      	mov	r6, r0
 8008df0:	460f      	mov	r7, r1
 8008df2:	d007      	beq.n	8008e04 <__pow5mult+0x20>
 8008df4:	4c25      	ldr	r4, [pc, #148]	; (8008e8c <__pow5mult+0xa8>)
 8008df6:	3a01      	subs	r2, #1
 8008df8:	2300      	movs	r3, #0
 8008dfa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008dfe:	f7ff fe51 	bl	8008aa4 <__multadd>
 8008e02:	4607      	mov	r7, r0
 8008e04:	10ad      	asrs	r5, r5, #2
 8008e06:	d03d      	beq.n	8008e84 <__pow5mult+0xa0>
 8008e08:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008e0a:	b97c      	cbnz	r4, 8008e2c <__pow5mult+0x48>
 8008e0c:	2010      	movs	r0, #16
 8008e0e:	f001 f8f5 	bl	8009ffc <malloc>
 8008e12:	4602      	mov	r2, r0
 8008e14:	6270      	str	r0, [r6, #36]	; 0x24
 8008e16:	b928      	cbnz	r0, 8008e24 <__pow5mult+0x40>
 8008e18:	4b1d      	ldr	r3, [pc, #116]	; (8008e90 <__pow5mult+0xac>)
 8008e1a:	481e      	ldr	r0, [pc, #120]	; (8008e94 <__pow5mult+0xb0>)
 8008e1c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008e20:	f001 f878 	bl	8009f14 <__assert_func>
 8008e24:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008e28:	6004      	str	r4, [r0, #0]
 8008e2a:	60c4      	str	r4, [r0, #12]
 8008e2c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008e30:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008e34:	b94c      	cbnz	r4, 8008e4a <__pow5mult+0x66>
 8008e36:	f240 2171 	movw	r1, #625	; 0x271
 8008e3a:	4630      	mov	r0, r6
 8008e3c:	f7ff ff16 	bl	8008c6c <__i2b>
 8008e40:	2300      	movs	r3, #0
 8008e42:	f8c8 0008 	str.w	r0, [r8, #8]
 8008e46:	4604      	mov	r4, r0
 8008e48:	6003      	str	r3, [r0, #0]
 8008e4a:	f04f 0900 	mov.w	r9, #0
 8008e4e:	07eb      	lsls	r3, r5, #31
 8008e50:	d50a      	bpl.n	8008e68 <__pow5mult+0x84>
 8008e52:	4639      	mov	r1, r7
 8008e54:	4622      	mov	r2, r4
 8008e56:	4630      	mov	r0, r6
 8008e58:	f7ff ff1e 	bl	8008c98 <__multiply>
 8008e5c:	4639      	mov	r1, r7
 8008e5e:	4680      	mov	r8, r0
 8008e60:	4630      	mov	r0, r6
 8008e62:	f7ff fdfd 	bl	8008a60 <_Bfree>
 8008e66:	4647      	mov	r7, r8
 8008e68:	106d      	asrs	r5, r5, #1
 8008e6a:	d00b      	beq.n	8008e84 <__pow5mult+0xa0>
 8008e6c:	6820      	ldr	r0, [r4, #0]
 8008e6e:	b938      	cbnz	r0, 8008e80 <__pow5mult+0x9c>
 8008e70:	4622      	mov	r2, r4
 8008e72:	4621      	mov	r1, r4
 8008e74:	4630      	mov	r0, r6
 8008e76:	f7ff ff0f 	bl	8008c98 <__multiply>
 8008e7a:	6020      	str	r0, [r4, #0]
 8008e7c:	f8c0 9000 	str.w	r9, [r0]
 8008e80:	4604      	mov	r4, r0
 8008e82:	e7e4      	b.n	8008e4e <__pow5mult+0x6a>
 8008e84:	4638      	mov	r0, r7
 8008e86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e8a:	bf00      	nop
 8008e8c:	0800a860 	.word	0x0800a860
 8008e90:	0800a6f4 	.word	0x0800a6f4
 8008e94:	0800a70b 	.word	0x0800a70b

08008e98 <__lshift>:
 8008e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e9c:	460c      	mov	r4, r1
 8008e9e:	6849      	ldr	r1, [r1, #4]
 8008ea0:	6923      	ldr	r3, [r4, #16]
 8008ea2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008ea6:	68a3      	ldr	r3, [r4, #8]
 8008ea8:	4607      	mov	r7, r0
 8008eaa:	4691      	mov	r9, r2
 8008eac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008eb0:	f108 0601 	add.w	r6, r8, #1
 8008eb4:	42b3      	cmp	r3, r6
 8008eb6:	db0b      	blt.n	8008ed0 <__lshift+0x38>
 8008eb8:	4638      	mov	r0, r7
 8008eba:	f7ff fd91 	bl	80089e0 <_Balloc>
 8008ebe:	4605      	mov	r5, r0
 8008ec0:	b948      	cbnz	r0, 8008ed6 <__lshift+0x3e>
 8008ec2:	4602      	mov	r2, r0
 8008ec4:	4b28      	ldr	r3, [pc, #160]	; (8008f68 <__lshift+0xd0>)
 8008ec6:	4829      	ldr	r0, [pc, #164]	; (8008f6c <__lshift+0xd4>)
 8008ec8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008ecc:	f001 f822 	bl	8009f14 <__assert_func>
 8008ed0:	3101      	adds	r1, #1
 8008ed2:	005b      	lsls	r3, r3, #1
 8008ed4:	e7ee      	b.n	8008eb4 <__lshift+0x1c>
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	f100 0114 	add.w	r1, r0, #20
 8008edc:	f100 0210 	add.w	r2, r0, #16
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	4553      	cmp	r3, sl
 8008ee4:	db33      	blt.n	8008f4e <__lshift+0xb6>
 8008ee6:	6920      	ldr	r0, [r4, #16]
 8008ee8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008eec:	f104 0314 	add.w	r3, r4, #20
 8008ef0:	f019 091f 	ands.w	r9, r9, #31
 8008ef4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008ef8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008efc:	d02b      	beq.n	8008f56 <__lshift+0xbe>
 8008efe:	f1c9 0e20 	rsb	lr, r9, #32
 8008f02:	468a      	mov	sl, r1
 8008f04:	2200      	movs	r2, #0
 8008f06:	6818      	ldr	r0, [r3, #0]
 8008f08:	fa00 f009 	lsl.w	r0, r0, r9
 8008f0c:	4302      	orrs	r2, r0
 8008f0e:	f84a 2b04 	str.w	r2, [sl], #4
 8008f12:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f16:	459c      	cmp	ip, r3
 8008f18:	fa22 f20e 	lsr.w	r2, r2, lr
 8008f1c:	d8f3      	bhi.n	8008f06 <__lshift+0x6e>
 8008f1e:	ebac 0304 	sub.w	r3, ip, r4
 8008f22:	3b15      	subs	r3, #21
 8008f24:	f023 0303 	bic.w	r3, r3, #3
 8008f28:	3304      	adds	r3, #4
 8008f2a:	f104 0015 	add.w	r0, r4, #21
 8008f2e:	4584      	cmp	ip, r0
 8008f30:	bf38      	it	cc
 8008f32:	2304      	movcc	r3, #4
 8008f34:	50ca      	str	r2, [r1, r3]
 8008f36:	b10a      	cbz	r2, 8008f3c <__lshift+0xa4>
 8008f38:	f108 0602 	add.w	r6, r8, #2
 8008f3c:	3e01      	subs	r6, #1
 8008f3e:	4638      	mov	r0, r7
 8008f40:	612e      	str	r6, [r5, #16]
 8008f42:	4621      	mov	r1, r4
 8008f44:	f7ff fd8c 	bl	8008a60 <_Bfree>
 8008f48:	4628      	mov	r0, r5
 8008f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f4e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008f52:	3301      	adds	r3, #1
 8008f54:	e7c5      	b.n	8008ee2 <__lshift+0x4a>
 8008f56:	3904      	subs	r1, #4
 8008f58:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f5c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008f60:	459c      	cmp	ip, r3
 8008f62:	d8f9      	bhi.n	8008f58 <__lshift+0xc0>
 8008f64:	e7ea      	b.n	8008f3c <__lshift+0xa4>
 8008f66:	bf00      	nop
 8008f68:	0800a664 	.word	0x0800a664
 8008f6c:	0800a70b 	.word	0x0800a70b

08008f70 <__mcmp>:
 8008f70:	b530      	push	{r4, r5, lr}
 8008f72:	6902      	ldr	r2, [r0, #16]
 8008f74:	690c      	ldr	r4, [r1, #16]
 8008f76:	1b12      	subs	r2, r2, r4
 8008f78:	d10e      	bne.n	8008f98 <__mcmp+0x28>
 8008f7a:	f100 0314 	add.w	r3, r0, #20
 8008f7e:	3114      	adds	r1, #20
 8008f80:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008f84:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008f88:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008f8c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008f90:	42a5      	cmp	r5, r4
 8008f92:	d003      	beq.n	8008f9c <__mcmp+0x2c>
 8008f94:	d305      	bcc.n	8008fa2 <__mcmp+0x32>
 8008f96:	2201      	movs	r2, #1
 8008f98:	4610      	mov	r0, r2
 8008f9a:	bd30      	pop	{r4, r5, pc}
 8008f9c:	4283      	cmp	r3, r0
 8008f9e:	d3f3      	bcc.n	8008f88 <__mcmp+0x18>
 8008fa0:	e7fa      	b.n	8008f98 <__mcmp+0x28>
 8008fa2:	f04f 32ff 	mov.w	r2, #4294967295
 8008fa6:	e7f7      	b.n	8008f98 <__mcmp+0x28>

08008fa8 <__mdiff>:
 8008fa8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fac:	460c      	mov	r4, r1
 8008fae:	4606      	mov	r6, r0
 8008fb0:	4611      	mov	r1, r2
 8008fb2:	4620      	mov	r0, r4
 8008fb4:	4617      	mov	r7, r2
 8008fb6:	f7ff ffdb 	bl	8008f70 <__mcmp>
 8008fba:	1e05      	subs	r5, r0, #0
 8008fbc:	d110      	bne.n	8008fe0 <__mdiff+0x38>
 8008fbe:	4629      	mov	r1, r5
 8008fc0:	4630      	mov	r0, r6
 8008fc2:	f7ff fd0d 	bl	80089e0 <_Balloc>
 8008fc6:	b930      	cbnz	r0, 8008fd6 <__mdiff+0x2e>
 8008fc8:	4b39      	ldr	r3, [pc, #228]	; (80090b0 <__mdiff+0x108>)
 8008fca:	4602      	mov	r2, r0
 8008fcc:	f240 2132 	movw	r1, #562	; 0x232
 8008fd0:	4838      	ldr	r0, [pc, #224]	; (80090b4 <__mdiff+0x10c>)
 8008fd2:	f000 ff9f 	bl	8009f14 <__assert_func>
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008fdc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fe0:	bfa4      	itt	ge
 8008fe2:	463b      	movge	r3, r7
 8008fe4:	4627      	movge	r7, r4
 8008fe6:	4630      	mov	r0, r6
 8008fe8:	6879      	ldr	r1, [r7, #4]
 8008fea:	bfa6      	itte	ge
 8008fec:	461c      	movge	r4, r3
 8008fee:	2500      	movge	r5, #0
 8008ff0:	2501      	movlt	r5, #1
 8008ff2:	f7ff fcf5 	bl	80089e0 <_Balloc>
 8008ff6:	b920      	cbnz	r0, 8009002 <__mdiff+0x5a>
 8008ff8:	4b2d      	ldr	r3, [pc, #180]	; (80090b0 <__mdiff+0x108>)
 8008ffa:	4602      	mov	r2, r0
 8008ffc:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009000:	e7e6      	b.n	8008fd0 <__mdiff+0x28>
 8009002:	693e      	ldr	r6, [r7, #16]
 8009004:	60c5      	str	r5, [r0, #12]
 8009006:	6925      	ldr	r5, [r4, #16]
 8009008:	f107 0114 	add.w	r1, r7, #20
 800900c:	f104 0914 	add.w	r9, r4, #20
 8009010:	f100 0e14 	add.w	lr, r0, #20
 8009014:	f107 0210 	add.w	r2, r7, #16
 8009018:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800901c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009020:	46f2      	mov	sl, lr
 8009022:	2700      	movs	r7, #0
 8009024:	f859 3b04 	ldr.w	r3, [r9], #4
 8009028:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800902c:	fa1f f883 	uxth.w	r8, r3
 8009030:	fa17 f78b 	uxtah	r7, r7, fp
 8009034:	0c1b      	lsrs	r3, r3, #16
 8009036:	eba7 0808 	sub.w	r8, r7, r8
 800903a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800903e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009042:	fa1f f888 	uxth.w	r8, r8
 8009046:	141f      	asrs	r7, r3, #16
 8009048:	454d      	cmp	r5, r9
 800904a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800904e:	f84a 3b04 	str.w	r3, [sl], #4
 8009052:	d8e7      	bhi.n	8009024 <__mdiff+0x7c>
 8009054:	1b2b      	subs	r3, r5, r4
 8009056:	3b15      	subs	r3, #21
 8009058:	f023 0303 	bic.w	r3, r3, #3
 800905c:	3304      	adds	r3, #4
 800905e:	3415      	adds	r4, #21
 8009060:	42a5      	cmp	r5, r4
 8009062:	bf38      	it	cc
 8009064:	2304      	movcc	r3, #4
 8009066:	4419      	add	r1, r3
 8009068:	4473      	add	r3, lr
 800906a:	469e      	mov	lr, r3
 800906c:	460d      	mov	r5, r1
 800906e:	4565      	cmp	r5, ip
 8009070:	d30e      	bcc.n	8009090 <__mdiff+0xe8>
 8009072:	f10c 0203 	add.w	r2, ip, #3
 8009076:	1a52      	subs	r2, r2, r1
 8009078:	f022 0203 	bic.w	r2, r2, #3
 800907c:	3903      	subs	r1, #3
 800907e:	458c      	cmp	ip, r1
 8009080:	bf38      	it	cc
 8009082:	2200      	movcc	r2, #0
 8009084:	441a      	add	r2, r3
 8009086:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800908a:	b17b      	cbz	r3, 80090ac <__mdiff+0x104>
 800908c:	6106      	str	r6, [r0, #16]
 800908e:	e7a5      	b.n	8008fdc <__mdiff+0x34>
 8009090:	f855 8b04 	ldr.w	r8, [r5], #4
 8009094:	fa17 f488 	uxtah	r4, r7, r8
 8009098:	1422      	asrs	r2, r4, #16
 800909a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800909e:	b2a4      	uxth	r4, r4
 80090a0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80090a4:	f84e 4b04 	str.w	r4, [lr], #4
 80090a8:	1417      	asrs	r7, r2, #16
 80090aa:	e7e0      	b.n	800906e <__mdiff+0xc6>
 80090ac:	3e01      	subs	r6, #1
 80090ae:	e7ea      	b.n	8009086 <__mdiff+0xde>
 80090b0:	0800a664 	.word	0x0800a664
 80090b4:	0800a70b 	.word	0x0800a70b

080090b8 <__ulp>:
 80090b8:	b082      	sub	sp, #8
 80090ba:	ed8d 0b00 	vstr	d0, [sp]
 80090be:	9b01      	ldr	r3, [sp, #4]
 80090c0:	4912      	ldr	r1, [pc, #72]	; (800910c <__ulp+0x54>)
 80090c2:	4019      	ands	r1, r3
 80090c4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80090c8:	2900      	cmp	r1, #0
 80090ca:	dd05      	ble.n	80090d8 <__ulp+0x20>
 80090cc:	2200      	movs	r2, #0
 80090ce:	460b      	mov	r3, r1
 80090d0:	ec43 2b10 	vmov	d0, r2, r3
 80090d4:	b002      	add	sp, #8
 80090d6:	4770      	bx	lr
 80090d8:	4249      	negs	r1, r1
 80090da:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80090de:	ea4f 5021 	mov.w	r0, r1, asr #20
 80090e2:	f04f 0200 	mov.w	r2, #0
 80090e6:	f04f 0300 	mov.w	r3, #0
 80090ea:	da04      	bge.n	80090f6 <__ulp+0x3e>
 80090ec:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80090f0:	fa41 f300 	asr.w	r3, r1, r0
 80090f4:	e7ec      	b.n	80090d0 <__ulp+0x18>
 80090f6:	f1a0 0114 	sub.w	r1, r0, #20
 80090fa:	291e      	cmp	r1, #30
 80090fc:	bfda      	itte	le
 80090fe:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009102:	fa20 f101 	lsrle.w	r1, r0, r1
 8009106:	2101      	movgt	r1, #1
 8009108:	460a      	mov	r2, r1
 800910a:	e7e1      	b.n	80090d0 <__ulp+0x18>
 800910c:	7ff00000 	.word	0x7ff00000

08009110 <__b2d>:
 8009110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009112:	6905      	ldr	r5, [r0, #16]
 8009114:	f100 0714 	add.w	r7, r0, #20
 8009118:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800911c:	1f2e      	subs	r6, r5, #4
 800911e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009122:	4620      	mov	r0, r4
 8009124:	f7ff fd52 	bl	8008bcc <__hi0bits>
 8009128:	f1c0 0320 	rsb	r3, r0, #32
 800912c:	280a      	cmp	r0, #10
 800912e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80091ac <__b2d+0x9c>
 8009132:	600b      	str	r3, [r1, #0]
 8009134:	dc14      	bgt.n	8009160 <__b2d+0x50>
 8009136:	f1c0 0e0b 	rsb	lr, r0, #11
 800913a:	fa24 f10e 	lsr.w	r1, r4, lr
 800913e:	42b7      	cmp	r7, r6
 8009140:	ea41 030c 	orr.w	r3, r1, ip
 8009144:	bf34      	ite	cc
 8009146:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800914a:	2100      	movcs	r1, #0
 800914c:	3015      	adds	r0, #21
 800914e:	fa04 f000 	lsl.w	r0, r4, r0
 8009152:	fa21 f10e 	lsr.w	r1, r1, lr
 8009156:	ea40 0201 	orr.w	r2, r0, r1
 800915a:	ec43 2b10 	vmov	d0, r2, r3
 800915e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009160:	42b7      	cmp	r7, r6
 8009162:	bf3a      	itte	cc
 8009164:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009168:	f1a5 0608 	subcc.w	r6, r5, #8
 800916c:	2100      	movcs	r1, #0
 800916e:	380b      	subs	r0, #11
 8009170:	d017      	beq.n	80091a2 <__b2d+0x92>
 8009172:	f1c0 0c20 	rsb	ip, r0, #32
 8009176:	fa04 f500 	lsl.w	r5, r4, r0
 800917a:	42be      	cmp	r6, r7
 800917c:	fa21 f40c 	lsr.w	r4, r1, ip
 8009180:	ea45 0504 	orr.w	r5, r5, r4
 8009184:	bf8c      	ite	hi
 8009186:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800918a:	2400      	movls	r4, #0
 800918c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009190:	fa01 f000 	lsl.w	r0, r1, r0
 8009194:	fa24 f40c 	lsr.w	r4, r4, ip
 8009198:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800919c:	ea40 0204 	orr.w	r2, r0, r4
 80091a0:	e7db      	b.n	800915a <__b2d+0x4a>
 80091a2:	ea44 030c 	orr.w	r3, r4, ip
 80091a6:	460a      	mov	r2, r1
 80091a8:	e7d7      	b.n	800915a <__b2d+0x4a>
 80091aa:	bf00      	nop
 80091ac:	3ff00000 	.word	0x3ff00000

080091b0 <__d2b>:
 80091b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80091b4:	4689      	mov	r9, r1
 80091b6:	2101      	movs	r1, #1
 80091b8:	ec57 6b10 	vmov	r6, r7, d0
 80091bc:	4690      	mov	r8, r2
 80091be:	f7ff fc0f 	bl	80089e0 <_Balloc>
 80091c2:	4604      	mov	r4, r0
 80091c4:	b930      	cbnz	r0, 80091d4 <__d2b+0x24>
 80091c6:	4602      	mov	r2, r0
 80091c8:	4b25      	ldr	r3, [pc, #148]	; (8009260 <__d2b+0xb0>)
 80091ca:	4826      	ldr	r0, [pc, #152]	; (8009264 <__d2b+0xb4>)
 80091cc:	f240 310a 	movw	r1, #778	; 0x30a
 80091d0:	f000 fea0 	bl	8009f14 <__assert_func>
 80091d4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80091d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80091dc:	bb35      	cbnz	r5, 800922c <__d2b+0x7c>
 80091de:	2e00      	cmp	r6, #0
 80091e0:	9301      	str	r3, [sp, #4]
 80091e2:	d028      	beq.n	8009236 <__d2b+0x86>
 80091e4:	4668      	mov	r0, sp
 80091e6:	9600      	str	r6, [sp, #0]
 80091e8:	f7ff fd10 	bl	8008c0c <__lo0bits>
 80091ec:	9900      	ldr	r1, [sp, #0]
 80091ee:	b300      	cbz	r0, 8009232 <__d2b+0x82>
 80091f0:	9a01      	ldr	r2, [sp, #4]
 80091f2:	f1c0 0320 	rsb	r3, r0, #32
 80091f6:	fa02 f303 	lsl.w	r3, r2, r3
 80091fa:	430b      	orrs	r3, r1
 80091fc:	40c2      	lsrs	r2, r0
 80091fe:	6163      	str	r3, [r4, #20]
 8009200:	9201      	str	r2, [sp, #4]
 8009202:	9b01      	ldr	r3, [sp, #4]
 8009204:	61a3      	str	r3, [r4, #24]
 8009206:	2b00      	cmp	r3, #0
 8009208:	bf14      	ite	ne
 800920a:	2202      	movne	r2, #2
 800920c:	2201      	moveq	r2, #1
 800920e:	6122      	str	r2, [r4, #16]
 8009210:	b1d5      	cbz	r5, 8009248 <__d2b+0x98>
 8009212:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009216:	4405      	add	r5, r0
 8009218:	f8c9 5000 	str.w	r5, [r9]
 800921c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009220:	f8c8 0000 	str.w	r0, [r8]
 8009224:	4620      	mov	r0, r4
 8009226:	b003      	add	sp, #12
 8009228:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800922c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009230:	e7d5      	b.n	80091de <__d2b+0x2e>
 8009232:	6161      	str	r1, [r4, #20]
 8009234:	e7e5      	b.n	8009202 <__d2b+0x52>
 8009236:	a801      	add	r0, sp, #4
 8009238:	f7ff fce8 	bl	8008c0c <__lo0bits>
 800923c:	9b01      	ldr	r3, [sp, #4]
 800923e:	6163      	str	r3, [r4, #20]
 8009240:	2201      	movs	r2, #1
 8009242:	6122      	str	r2, [r4, #16]
 8009244:	3020      	adds	r0, #32
 8009246:	e7e3      	b.n	8009210 <__d2b+0x60>
 8009248:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800924c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009250:	f8c9 0000 	str.w	r0, [r9]
 8009254:	6918      	ldr	r0, [r3, #16]
 8009256:	f7ff fcb9 	bl	8008bcc <__hi0bits>
 800925a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800925e:	e7df      	b.n	8009220 <__d2b+0x70>
 8009260:	0800a664 	.word	0x0800a664
 8009264:	0800a70b 	.word	0x0800a70b

08009268 <__ratio>:
 8009268:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800926c:	468a      	mov	sl, r1
 800926e:	4669      	mov	r1, sp
 8009270:	4683      	mov	fp, r0
 8009272:	f7ff ff4d 	bl	8009110 <__b2d>
 8009276:	a901      	add	r1, sp, #4
 8009278:	4650      	mov	r0, sl
 800927a:	ec59 8b10 	vmov	r8, r9, d0
 800927e:	ee10 6a10 	vmov	r6, s0
 8009282:	f7ff ff45 	bl	8009110 <__b2d>
 8009286:	f8db 3010 	ldr.w	r3, [fp, #16]
 800928a:	f8da 2010 	ldr.w	r2, [sl, #16]
 800928e:	eba3 0c02 	sub.w	ip, r3, r2
 8009292:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009296:	1a9b      	subs	r3, r3, r2
 8009298:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800929c:	ec55 4b10 	vmov	r4, r5, d0
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	ee10 0a10 	vmov	r0, s0
 80092a6:	bfce      	itee	gt
 80092a8:	464a      	movgt	r2, r9
 80092aa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80092ae:	462a      	movle	r2, r5
 80092b0:	464f      	mov	r7, r9
 80092b2:	4629      	mov	r1, r5
 80092b4:	bfcc      	ite	gt
 80092b6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80092ba:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80092be:	ec47 6b17 	vmov	d7, r6, r7
 80092c2:	ec41 0b16 	vmov	d6, r0, r1
 80092c6:	ee87 0b06 	vdiv.f64	d0, d7, d6
 80092ca:	b003      	add	sp, #12
 80092cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080092d0 <__copybits>:
 80092d0:	3901      	subs	r1, #1
 80092d2:	b570      	push	{r4, r5, r6, lr}
 80092d4:	1149      	asrs	r1, r1, #5
 80092d6:	6914      	ldr	r4, [r2, #16]
 80092d8:	3101      	adds	r1, #1
 80092da:	f102 0314 	add.w	r3, r2, #20
 80092de:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80092e2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80092e6:	1f05      	subs	r5, r0, #4
 80092e8:	42a3      	cmp	r3, r4
 80092ea:	d30c      	bcc.n	8009306 <__copybits+0x36>
 80092ec:	1aa3      	subs	r3, r4, r2
 80092ee:	3b11      	subs	r3, #17
 80092f0:	f023 0303 	bic.w	r3, r3, #3
 80092f4:	3211      	adds	r2, #17
 80092f6:	42a2      	cmp	r2, r4
 80092f8:	bf88      	it	hi
 80092fa:	2300      	movhi	r3, #0
 80092fc:	4418      	add	r0, r3
 80092fe:	2300      	movs	r3, #0
 8009300:	4288      	cmp	r0, r1
 8009302:	d305      	bcc.n	8009310 <__copybits+0x40>
 8009304:	bd70      	pop	{r4, r5, r6, pc}
 8009306:	f853 6b04 	ldr.w	r6, [r3], #4
 800930a:	f845 6f04 	str.w	r6, [r5, #4]!
 800930e:	e7eb      	b.n	80092e8 <__copybits+0x18>
 8009310:	f840 3b04 	str.w	r3, [r0], #4
 8009314:	e7f4      	b.n	8009300 <__copybits+0x30>

08009316 <__any_on>:
 8009316:	f100 0214 	add.w	r2, r0, #20
 800931a:	6900      	ldr	r0, [r0, #16]
 800931c:	114b      	asrs	r3, r1, #5
 800931e:	4298      	cmp	r0, r3
 8009320:	b510      	push	{r4, lr}
 8009322:	db11      	blt.n	8009348 <__any_on+0x32>
 8009324:	dd0a      	ble.n	800933c <__any_on+0x26>
 8009326:	f011 011f 	ands.w	r1, r1, #31
 800932a:	d007      	beq.n	800933c <__any_on+0x26>
 800932c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009330:	fa24 f001 	lsr.w	r0, r4, r1
 8009334:	fa00 f101 	lsl.w	r1, r0, r1
 8009338:	428c      	cmp	r4, r1
 800933a:	d10b      	bne.n	8009354 <__any_on+0x3e>
 800933c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009340:	4293      	cmp	r3, r2
 8009342:	d803      	bhi.n	800934c <__any_on+0x36>
 8009344:	2000      	movs	r0, #0
 8009346:	bd10      	pop	{r4, pc}
 8009348:	4603      	mov	r3, r0
 800934a:	e7f7      	b.n	800933c <__any_on+0x26>
 800934c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009350:	2900      	cmp	r1, #0
 8009352:	d0f5      	beq.n	8009340 <__any_on+0x2a>
 8009354:	2001      	movs	r0, #1
 8009356:	e7f6      	b.n	8009346 <__any_on+0x30>

08009358 <_calloc_r>:
 8009358:	b513      	push	{r0, r1, r4, lr}
 800935a:	434a      	muls	r2, r1
 800935c:	4611      	mov	r1, r2
 800935e:	9201      	str	r2, [sp, #4]
 8009360:	f000 f85a 	bl	8009418 <_malloc_r>
 8009364:	4604      	mov	r4, r0
 8009366:	b118      	cbz	r0, 8009370 <_calloc_r+0x18>
 8009368:	9a01      	ldr	r2, [sp, #4]
 800936a:	2100      	movs	r1, #0
 800936c:	f7fd fd00 	bl	8006d70 <memset>
 8009370:	4620      	mov	r0, r4
 8009372:	b002      	add	sp, #8
 8009374:	bd10      	pop	{r4, pc}
	...

08009378 <_free_r>:
 8009378:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800937a:	2900      	cmp	r1, #0
 800937c:	d048      	beq.n	8009410 <_free_r+0x98>
 800937e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009382:	9001      	str	r0, [sp, #4]
 8009384:	2b00      	cmp	r3, #0
 8009386:	f1a1 0404 	sub.w	r4, r1, #4
 800938a:	bfb8      	it	lt
 800938c:	18e4      	addlt	r4, r4, r3
 800938e:	f000 fe57 	bl	800a040 <__malloc_lock>
 8009392:	4a20      	ldr	r2, [pc, #128]	; (8009414 <_free_r+0x9c>)
 8009394:	9801      	ldr	r0, [sp, #4]
 8009396:	6813      	ldr	r3, [r2, #0]
 8009398:	4615      	mov	r5, r2
 800939a:	b933      	cbnz	r3, 80093aa <_free_r+0x32>
 800939c:	6063      	str	r3, [r4, #4]
 800939e:	6014      	str	r4, [r2, #0]
 80093a0:	b003      	add	sp, #12
 80093a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80093a6:	f000 be51 	b.w	800a04c <__malloc_unlock>
 80093aa:	42a3      	cmp	r3, r4
 80093ac:	d90b      	bls.n	80093c6 <_free_r+0x4e>
 80093ae:	6821      	ldr	r1, [r4, #0]
 80093b0:	1862      	adds	r2, r4, r1
 80093b2:	4293      	cmp	r3, r2
 80093b4:	bf04      	itt	eq
 80093b6:	681a      	ldreq	r2, [r3, #0]
 80093b8:	685b      	ldreq	r3, [r3, #4]
 80093ba:	6063      	str	r3, [r4, #4]
 80093bc:	bf04      	itt	eq
 80093be:	1852      	addeq	r2, r2, r1
 80093c0:	6022      	streq	r2, [r4, #0]
 80093c2:	602c      	str	r4, [r5, #0]
 80093c4:	e7ec      	b.n	80093a0 <_free_r+0x28>
 80093c6:	461a      	mov	r2, r3
 80093c8:	685b      	ldr	r3, [r3, #4]
 80093ca:	b10b      	cbz	r3, 80093d0 <_free_r+0x58>
 80093cc:	42a3      	cmp	r3, r4
 80093ce:	d9fa      	bls.n	80093c6 <_free_r+0x4e>
 80093d0:	6811      	ldr	r1, [r2, #0]
 80093d2:	1855      	adds	r5, r2, r1
 80093d4:	42a5      	cmp	r5, r4
 80093d6:	d10b      	bne.n	80093f0 <_free_r+0x78>
 80093d8:	6824      	ldr	r4, [r4, #0]
 80093da:	4421      	add	r1, r4
 80093dc:	1854      	adds	r4, r2, r1
 80093de:	42a3      	cmp	r3, r4
 80093e0:	6011      	str	r1, [r2, #0]
 80093e2:	d1dd      	bne.n	80093a0 <_free_r+0x28>
 80093e4:	681c      	ldr	r4, [r3, #0]
 80093e6:	685b      	ldr	r3, [r3, #4]
 80093e8:	6053      	str	r3, [r2, #4]
 80093ea:	4421      	add	r1, r4
 80093ec:	6011      	str	r1, [r2, #0]
 80093ee:	e7d7      	b.n	80093a0 <_free_r+0x28>
 80093f0:	d902      	bls.n	80093f8 <_free_r+0x80>
 80093f2:	230c      	movs	r3, #12
 80093f4:	6003      	str	r3, [r0, #0]
 80093f6:	e7d3      	b.n	80093a0 <_free_r+0x28>
 80093f8:	6825      	ldr	r5, [r4, #0]
 80093fa:	1961      	adds	r1, r4, r5
 80093fc:	428b      	cmp	r3, r1
 80093fe:	bf04      	itt	eq
 8009400:	6819      	ldreq	r1, [r3, #0]
 8009402:	685b      	ldreq	r3, [r3, #4]
 8009404:	6063      	str	r3, [r4, #4]
 8009406:	bf04      	itt	eq
 8009408:	1949      	addeq	r1, r1, r5
 800940a:	6021      	streq	r1, [r4, #0]
 800940c:	6054      	str	r4, [r2, #4]
 800940e:	e7c7      	b.n	80093a0 <_free_r+0x28>
 8009410:	b003      	add	sp, #12
 8009412:	bd30      	pop	{r4, r5, pc}
 8009414:	200003a0 	.word	0x200003a0

08009418 <_malloc_r>:
 8009418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800941a:	1ccd      	adds	r5, r1, #3
 800941c:	f025 0503 	bic.w	r5, r5, #3
 8009420:	3508      	adds	r5, #8
 8009422:	2d0c      	cmp	r5, #12
 8009424:	bf38      	it	cc
 8009426:	250c      	movcc	r5, #12
 8009428:	2d00      	cmp	r5, #0
 800942a:	4606      	mov	r6, r0
 800942c:	db01      	blt.n	8009432 <_malloc_r+0x1a>
 800942e:	42a9      	cmp	r1, r5
 8009430:	d903      	bls.n	800943a <_malloc_r+0x22>
 8009432:	230c      	movs	r3, #12
 8009434:	6033      	str	r3, [r6, #0]
 8009436:	2000      	movs	r0, #0
 8009438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800943a:	f000 fe01 	bl	800a040 <__malloc_lock>
 800943e:	4921      	ldr	r1, [pc, #132]	; (80094c4 <_malloc_r+0xac>)
 8009440:	680a      	ldr	r2, [r1, #0]
 8009442:	4614      	mov	r4, r2
 8009444:	b99c      	cbnz	r4, 800946e <_malloc_r+0x56>
 8009446:	4f20      	ldr	r7, [pc, #128]	; (80094c8 <_malloc_r+0xb0>)
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	b923      	cbnz	r3, 8009456 <_malloc_r+0x3e>
 800944c:	4621      	mov	r1, r4
 800944e:	4630      	mov	r0, r6
 8009450:	f000 fcd6 	bl	8009e00 <_sbrk_r>
 8009454:	6038      	str	r0, [r7, #0]
 8009456:	4629      	mov	r1, r5
 8009458:	4630      	mov	r0, r6
 800945a:	f000 fcd1 	bl	8009e00 <_sbrk_r>
 800945e:	1c43      	adds	r3, r0, #1
 8009460:	d123      	bne.n	80094aa <_malloc_r+0x92>
 8009462:	230c      	movs	r3, #12
 8009464:	6033      	str	r3, [r6, #0]
 8009466:	4630      	mov	r0, r6
 8009468:	f000 fdf0 	bl	800a04c <__malloc_unlock>
 800946c:	e7e3      	b.n	8009436 <_malloc_r+0x1e>
 800946e:	6823      	ldr	r3, [r4, #0]
 8009470:	1b5b      	subs	r3, r3, r5
 8009472:	d417      	bmi.n	80094a4 <_malloc_r+0x8c>
 8009474:	2b0b      	cmp	r3, #11
 8009476:	d903      	bls.n	8009480 <_malloc_r+0x68>
 8009478:	6023      	str	r3, [r4, #0]
 800947a:	441c      	add	r4, r3
 800947c:	6025      	str	r5, [r4, #0]
 800947e:	e004      	b.n	800948a <_malloc_r+0x72>
 8009480:	6863      	ldr	r3, [r4, #4]
 8009482:	42a2      	cmp	r2, r4
 8009484:	bf0c      	ite	eq
 8009486:	600b      	streq	r3, [r1, #0]
 8009488:	6053      	strne	r3, [r2, #4]
 800948a:	4630      	mov	r0, r6
 800948c:	f000 fdde 	bl	800a04c <__malloc_unlock>
 8009490:	f104 000b 	add.w	r0, r4, #11
 8009494:	1d23      	adds	r3, r4, #4
 8009496:	f020 0007 	bic.w	r0, r0, #7
 800949a:	1ac2      	subs	r2, r0, r3
 800949c:	d0cc      	beq.n	8009438 <_malloc_r+0x20>
 800949e:	1a1b      	subs	r3, r3, r0
 80094a0:	50a3      	str	r3, [r4, r2]
 80094a2:	e7c9      	b.n	8009438 <_malloc_r+0x20>
 80094a4:	4622      	mov	r2, r4
 80094a6:	6864      	ldr	r4, [r4, #4]
 80094a8:	e7cc      	b.n	8009444 <_malloc_r+0x2c>
 80094aa:	1cc4      	adds	r4, r0, #3
 80094ac:	f024 0403 	bic.w	r4, r4, #3
 80094b0:	42a0      	cmp	r0, r4
 80094b2:	d0e3      	beq.n	800947c <_malloc_r+0x64>
 80094b4:	1a21      	subs	r1, r4, r0
 80094b6:	4630      	mov	r0, r6
 80094b8:	f000 fca2 	bl	8009e00 <_sbrk_r>
 80094bc:	3001      	adds	r0, #1
 80094be:	d1dd      	bne.n	800947c <_malloc_r+0x64>
 80094c0:	e7cf      	b.n	8009462 <_malloc_r+0x4a>
 80094c2:	bf00      	nop
 80094c4:	200003a0 	.word	0x200003a0
 80094c8:	200003a4 	.word	0x200003a4

080094cc <__ssputs_r>:
 80094cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094d0:	688e      	ldr	r6, [r1, #8]
 80094d2:	429e      	cmp	r6, r3
 80094d4:	4682      	mov	sl, r0
 80094d6:	460c      	mov	r4, r1
 80094d8:	4690      	mov	r8, r2
 80094da:	461f      	mov	r7, r3
 80094dc:	d838      	bhi.n	8009550 <__ssputs_r+0x84>
 80094de:	898a      	ldrh	r2, [r1, #12]
 80094e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80094e4:	d032      	beq.n	800954c <__ssputs_r+0x80>
 80094e6:	6825      	ldr	r5, [r4, #0]
 80094e8:	6909      	ldr	r1, [r1, #16]
 80094ea:	eba5 0901 	sub.w	r9, r5, r1
 80094ee:	6965      	ldr	r5, [r4, #20]
 80094f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80094f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80094f8:	3301      	adds	r3, #1
 80094fa:	444b      	add	r3, r9
 80094fc:	106d      	asrs	r5, r5, #1
 80094fe:	429d      	cmp	r5, r3
 8009500:	bf38      	it	cc
 8009502:	461d      	movcc	r5, r3
 8009504:	0553      	lsls	r3, r2, #21
 8009506:	d531      	bpl.n	800956c <__ssputs_r+0xa0>
 8009508:	4629      	mov	r1, r5
 800950a:	f7ff ff85 	bl	8009418 <_malloc_r>
 800950e:	4606      	mov	r6, r0
 8009510:	b950      	cbnz	r0, 8009528 <__ssputs_r+0x5c>
 8009512:	230c      	movs	r3, #12
 8009514:	f8ca 3000 	str.w	r3, [sl]
 8009518:	89a3      	ldrh	r3, [r4, #12]
 800951a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800951e:	81a3      	strh	r3, [r4, #12]
 8009520:	f04f 30ff 	mov.w	r0, #4294967295
 8009524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009528:	6921      	ldr	r1, [r4, #16]
 800952a:	464a      	mov	r2, r9
 800952c:	f7fd fc12 	bl	8006d54 <memcpy>
 8009530:	89a3      	ldrh	r3, [r4, #12]
 8009532:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009536:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800953a:	81a3      	strh	r3, [r4, #12]
 800953c:	6126      	str	r6, [r4, #16]
 800953e:	6165      	str	r5, [r4, #20]
 8009540:	444e      	add	r6, r9
 8009542:	eba5 0509 	sub.w	r5, r5, r9
 8009546:	6026      	str	r6, [r4, #0]
 8009548:	60a5      	str	r5, [r4, #8]
 800954a:	463e      	mov	r6, r7
 800954c:	42be      	cmp	r6, r7
 800954e:	d900      	bls.n	8009552 <__ssputs_r+0x86>
 8009550:	463e      	mov	r6, r7
 8009552:	4632      	mov	r2, r6
 8009554:	6820      	ldr	r0, [r4, #0]
 8009556:	4641      	mov	r1, r8
 8009558:	f000 fd58 	bl	800a00c <memmove>
 800955c:	68a3      	ldr	r3, [r4, #8]
 800955e:	6822      	ldr	r2, [r4, #0]
 8009560:	1b9b      	subs	r3, r3, r6
 8009562:	4432      	add	r2, r6
 8009564:	60a3      	str	r3, [r4, #8]
 8009566:	6022      	str	r2, [r4, #0]
 8009568:	2000      	movs	r0, #0
 800956a:	e7db      	b.n	8009524 <__ssputs_r+0x58>
 800956c:	462a      	mov	r2, r5
 800956e:	f000 fd73 	bl	800a058 <_realloc_r>
 8009572:	4606      	mov	r6, r0
 8009574:	2800      	cmp	r0, #0
 8009576:	d1e1      	bne.n	800953c <__ssputs_r+0x70>
 8009578:	6921      	ldr	r1, [r4, #16]
 800957a:	4650      	mov	r0, sl
 800957c:	f7ff fefc 	bl	8009378 <_free_r>
 8009580:	e7c7      	b.n	8009512 <__ssputs_r+0x46>
	...

08009584 <_svfiprintf_r>:
 8009584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009588:	4698      	mov	r8, r3
 800958a:	898b      	ldrh	r3, [r1, #12]
 800958c:	061b      	lsls	r3, r3, #24
 800958e:	b09d      	sub	sp, #116	; 0x74
 8009590:	4607      	mov	r7, r0
 8009592:	460d      	mov	r5, r1
 8009594:	4614      	mov	r4, r2
 8009596:	d50e      	bpl.n	80095b6 <_svfiprintf_r+0x32>
 8009598:	690b      	ldr	r3, [r1, #16]
 800959a:	b963      	cbnz	r3, 80095b6 <_svfiprintf_r+0x32>
 800959c:	2140      	movs	r1, #64	; 0x40
 800959e:	f7ff ff3b 	bl	8009418 <_malloc_r>
 80095a2:	6028      	str	r0, [r5, #0]
 80095a4:	6128      	str	r0, [r5, #16]
 80095a6:	b920      	cbnz	r0, 80095b2 <_svfiprintf_r+0x2e>
 80095a8:	230c      	movs	r3, #12
 80095aa:	603b      	str	r3, [r7, #0]
 80095ac:	f04f 30ff 	mov.w	r0, #4294967295
 80095b0:	e0d1      	b.n	8009756 <_svfiprintf_r+0x1d2>
 80095b2:	2340      	movs	r3, #64	; 0x40
 80095b4:	616b      	str	r3, [r5, #20]
 80095b6:	2300      	movs	r3, #0
 80095b8:	9309      	str	r3, [sp, #36]	; 0x24
 80095ba:	2320      	movs	r3, #32
 80095bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80095c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80095c4:	2330      	movs	r3, #48	; 0x30
 80095c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009770 <_svfiprintf_r+0x1ec>
 80095ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80095ce:	f04f 0901 	mov.w	r9, #1
 80095d2:	4623      	mov	r3, r4
 80095d4:	469a      	mov	sl, r3
 80095d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095da:	b10a      	cbz	r2, 80095e0 <_svfiprintf_r+0x5c>
 80095dc:	2a25      	cmp	r2, #37	; 0x25
 80095de:	d1f9      	bne.n	80095d4 <_svfiprintf_r+0x50>
 80095e0:	ebba 0b04 	subs.w	fp, sl, r4
 80095e4:	d00b      	beq.n	80095fe <_svfiprintf_r+0x7a>
 80095e6:	465b      	mov	r3, fp
 80095e8:	4622      	mov	r2, r4
 80095ea:	4629      	mov	r1, r5
 80095ec:	4638      	mov	r0, r7
 80095ee:	f7ff ff6d 	bl	80094cc <__ssputs_r>
 80095f2:	3001      	adds	r0, #1
 80095f4:	f000 80aa 	beq.w	800974c <_svfiprintf_r+0x1c8>
 80095f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095fa:	445a      	add	r2, fp
 80095fc:	9209      	str	r2, [sp, #36]	; 0x24
 80095fe:	f89a 3000 	ldrb.w	r3, [sl]
 8009602:	2b00      	cmp	r3, #0
 8009604:	f000 80a2 	beq.w	800974c <_svfiprintf_r+0x1c8>
 8009608:	2300      	movs	r3, #0
 800960a:	f04f 32ff 	mov.w	r2, #4294967295
 800960e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009612:	f10a 0a01 	add.w	sl, sl, #1
 8009616:	9304      	str	r3, [sp, #16]
 8009618:	9307      	str	r3, [sp, #28]
 800961a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800961e:	931a      	str	r3, [sp, #104]	; 0x68
 8009620:	4654      	mov	r4, sl
 8009622:	2205      	movs	r2, #5
 8009624:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009628:	4851      	ldr	r0, [pc, #324]	; (8009770 <_svfiprintf_r+0x1ec>)
 800962a:	f7f6 fe21 	bl	8000270 <memchr>
 800962e:	9a04      	ldr	r2, [sp, #16]
 8009630:	b9d8      	cbnz	r0, 800966a <_svfiprintf_r+0xe6>
 8009632:	06d0      	lsls	r0, r2, #27
 8009634:	bf44      	itt	mi
 8009636:	2320      	movmi	r3, #32
 8009638:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800963c:	0711      	lsls	r1, r2, #28
 800963e:	bf44      	itt	mi
 8009640:	232b      	movmi	r3, #43	; 0x2b
 8009642:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009646:	f89a 3000 	ldrb.w	r3, [sl]
 800964a:	2b2a      	cmp	r3, #42	; 0x2a
 800964c:	d015      	beq.n	800967a <_svfiprintf_r+0xf6>
 800964e:	9a07      	ldr	r2, [sp, #28]
 8009650:	4654      	mov	r4, sl
 8009652:	2000      	movs	r0, #0
 8009654:	f04f 0c0a 	mov.w	ip, #10
 8009658:	4621      	mov	r1, r4
 800965a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800965e:	3b30      	subs	r3, #48	; 0x30
 8009660:	2b09      	cmp	r3, #9
 8009662:	d94e      	bls.n	8009702 <_svfiprintf_r+0x17e>
 8009664:	b1b0      	cbz	r0, 8009694 <_svfiprintf_r+0x110>
 8009666:	9207      	str	r2, [sp, #28]
 8009668:	e014      	b.n	8009694 <_svfiprintf_r+0x110>
 800966a:	eba0 0308 	sub.w	r3, r0, r8
 800966e:	fa09 f303 	lsl.w	r3, r9, r3
 8009672:	4313      	orrs	r3, r2
 8009674:	9304      	str	r3, [sp, #16]
 8009676:	46a2      	mov	sl, r4
 8009678:	e7d2      	b.n	8009620 <_svfiprintf_r+0x9c>
 800967a:	9b03      	ldr	r3, [sp, #12]
 800967c:	1d19      	adds	r1, r3, #4
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	9103      	str	r1, [sp, #12]
 8009682:	2b00      	cmp	r3, #0
 8009684:	bfbb      	ittet	lt
 8009686:	425b      	neglt	r3, r3
 8009688:	f042 0202 	orrlt.w	r2, r2, #2
 800968c:	9307      	strge	r3, [sp, #28]
 800968e:	9307      	strlt	r3, [sp, #28]
 8009690:	bfb8      	it	lt
 8009692:	9204      	strlt	r2, [sp, #16]
 8009694:	7823      	ldrb	r3, [r4, #0]
 8009696:	2b2e      	cmp	r3, #46	; 0x2e
 8009698:	d10c      	bne.n	80096b4 <_svfiprintf_r+0x130>
 800969a:	7863      	ldrb	r3, [r4, #1]
 800969c:	2b2a      	cmp	r3, #42	; 0x2a
 800969e:	d135      	bne.n	800970c <_svfiprintf_r+0x188>
 80096a0:	9b03      	ldr	r3, [sp, #12]
 80096a2:	1d1a      	adds	r2, r3, #4
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	9203      	str	r2, [sp, #12]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	bfb8      	it	lt
 80096ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80096b0:	3402      	adds	r4, #2
 80096b2:	9305      	str	r3, [sp, #20]
 80096b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009780 <_svfiprintf_r+0x1fc>
 80096b8:	7821      	ldrb	r1, [r4, #0]
 80096ba:	2203      	movs	r2, #3
 80096bc:	4650      	mov	r0, sl
 80096be:	f7f6 fdd7 	bl	8000270 <memchr>
 80096c2:	b140      	cbz	r0, 80096d6 <_svfiprintf_r+0x152>
 80096c4:	2340      	movs	r3, #64	; 0x40
 80096c6:	eba0 000a 	sub.w	r0, r0, sl
 80096ca:	fa03 f000 	lsl.w	r0, r3, r0
 80096ce:	9b04      	ldr	r3, [sp, #16]
 80096d0:	4303      	orrs	r3, r0
 80096d2:	3401      	adds	r4, #1
 80096d4:	9304      	str	r3, [sp, #16]
 80096d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096da:	4826      	ldr	r0, [pc, #152]	; (8009774 <_svfiprintf_r+0x1f0>)
 80096dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80096e0:	2206      	movs	r2, #6
 80096e2:	f7f6 fdc5 	bl	8000270 <memchr>
 80096e6:	2800      	cmp	r0, #0
 80096e8:	d038      	beq.n	800975c <_svfiprintf_r+0x1d8>
 80096ea:	4b23      	ldr	r3, [pc, #140]	; (8009778 <_svfiprintf_r+0x1f4>)
 80096ec:	bb1b      	cbnz	r3, 8009736 <_svfiprintf_r+0x1b2>
 80096ee:	9b03      	ldr	r3, [sp, #12]
 80096f0:	3307      	adds	r3, #7
 80096f2:	f023 0307 	bic.w	r3, r3, #7
 80096f6:	3308      	adds	r3, #8
 80096f8:	9303      	str	r3, [sp, #12]
 80096fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096fc:	4433      	add	r3, r6
 80096fe:	9309      	str	r3, [sp, #36]	; 0x24
 8009700:	e767      	b.n	80095d2 <_svfiprintf_r+0x4e>
 8009702:	fb0c 3202 	mla	r2, ip, r2, r3
 8009706:	460c      	mov	r4, r1
 8009708:	2001      	movs	r0, #1
 800970a:	e7a5      	b.n	8009658 <_svfiprintf_r+0xd4>
 800970c:	2300      	movs	r3, #0
 800970e:	3401      	adds	r4, #1
 8009710:	9305      	str	r3, [sp, #20]
 8009712:	4619      	mov	r1, r3
 8009714:	f04f 0c0a 	mov.w	ip, #10
 8009718:	4620      	mov	r0, r4
 800971a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800971e:	3a30      	subs	r2, #48	; 0x30
 8009720:	2a09      	cmp	r2, #9
 8009722:	d903      	bls.n	800972c <_svfiprintf_r+0x1a8>
 8009724:	2b00      	cmp	r3, #0
 8009726:	d0c5      	beq.n	80096b4 <_svfiprintf_r+0x130>
 8009728:	9105      	str	r1, [sp, #20]
 800972a:	e7c3      	b.n	80096b4 <_svfiprintf_r+0x130>
 800972c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009730:	4604      	mov	r4, r0
 8009732:	2301      	movs	r3, #1
 8009734:	e7f0      	b.n	8009718 <_svfiprintf_r+0x194>
 8009736:	ab03      	add	r3, sp, #12
 8009738:	9300      	str	r3, [sp, #0]
 800973a:	462a      	mov	r2, r5
 800973c:	4b0f      	ldr	r3, [pc, #60]	; (800977c <_svfiprintf_r+0x1f8>)
 800973e:	a904      	add	r1, sp, #16
 8009740:	4638      	mov	r0, r7
 8009742:	f3af 8000 	nop.w
 8009746:	1c42      	adds	r2, r0, #1
 8009748:	4606      	mov	r6, r0
 800974a:	d1d6      	bne.n	80096fa <_svfiprintf_r+0x176>
 800974c:	89ab      	ldrh	r3, [r5, #12]
 800974e:	065b      	lsls	r3, r3, #25
 8009750:	f53f af2c 	bmi.w	80095ac <_svfiprintf_r+0x28>
 8009754:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009756:	b01d      	add	sp, #116	; 0x74
 8009758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800975c:	ab03      	add	r3, sp, #12
 800975e:	9300      	str	r3, [sp, #0]
 8009760:	462a      	mov	r2, r5
 8009762:	4b06      	ldr	r3, [pc, #24]	; (800977c <_svfiprintf_r+0x1f8>)
 8009764:	a904      	add	r1, sp, #16
 8009766:	4638      	mov	r0, r7
 8009768:	f000 f9d4 	bl	8009b14 <_printf_i>
 800976c:	e7eb      	b.n	8009746 <_svfiprintf_r+0x1c2>
 800976e:	bf00      	nop
 8009770:	0800a86c 	.word	0x0800a86c
 8009774:	0800a876 	.word	0x0800a876
 8009778:	00000000 	.word	0x00000000
 800977c:	080094cd 	.word	0x080094cd
 8009780:	0800a872 	.word	0x0800a872

08009784 <__sfputc_r>:
 8009784:	6893      	ldr	r3, [r2, #8]
 8009786:	3b01      	subs	r3, #1
 8009788:	2b00      	cmp	r3, #0
 800978a:	b410      	push	{r4}
 800978c:	6093      	str	r3, [r2, #8]
 800978e:	da08      	bge.n	80097a2 <__sfputc_r+0x1e>
 8009790:	6994      	ldr	r4, [r2, #24]
 8009792:	42a3      	cmp	r3, r4
 8009794:	db01      	blt.n	800979a <__sfputc_r+0x16>
 8009796:	290a      	cmp	r1, #10
 8009798:	d103      	bne.n	80097a2 <__sfputc_r+0x1e>
 800979a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800979e:	f7fe babf 	b.w	8007d20 <__swbuf_r>
 80097a2:	6813      	ldr	r3, [r2, #0]
 80097a4:	1c58      	adds	r0, r3, #1
 80097a6:	6010      	str	r0, [r2, #0]
 80097a8:	7019      	strb	r1, [r3, #0]
 80097aa:	4608      	mov	r0, r1
 80097ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097b0:	4770      	bx	lr

080097b2 <__sfputs_r>:
 80097b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097b4:	4606      	mov	r6, r0
 80097b6:	460f      	mov	r7, r1
 80097b8:	4614      	mov	r4, r2
 80097ba:	18d5      	adds	r5, r2, r3
 80097bc:	42ac      	cmp	r4, r5
 80097be:	d101      	bne.n	80097c4 <__sfputs_r+0x12>
 80097c0:	2000      	movs	r0, #0
 80097c2:	e007      	b.n	80097d4 <__sfputs_r+0x22>
 80097c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097c8:	463a      	mov	r2, r7
 80097ca:	4630      	mov	r0, r6
 80097cc:	f7ff ffda 	bl	8009784 <__sfputc_r>
 80097d0:	1c43      	adds	r3, r0, #1
 80097d2:	d1f3      	bne.n	80097bc <__sfputs_r+0xa>
 80097d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080097d8 <_vfiprintf_r>:
 80097d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097dc:	460d      	mov	r5, r1
 80097de:	b09d      	sub	sp, #116	; 0x74
 80097e0:	4614      	mov	r4, r2
 80097e2:	4698      	mov	r8, r3
 80097e4:	4606      	mov	r6, r0
 80097e6:	b118      	cbz	r0, 80097f0 <_vfiprintf_r+0x18>
 80097e8:	6983      	ldr	r3, [r0, #24]
 80097ea:	b90b      	cbnz	r3, 80097f0 <_vfiprintf_r+0x18>
 80097ec:	f7fe fc72 	bl	80080d4 <__sinit>
 80097f0:	4b89      	ldr	r3, [pc, #548]	; (8009a18 <_vfiprintf_r+0x240>)
 80097f2:	429d      	cmp	r5, r3
 80097f4:	d11b      	bne.n	800982e <_vfiprintf_r+0x56>
 80097f6:	6875      	ldr	r5, [r6, #4]
 80097f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097fa:	07d9      	lsls	r1, r3, #31
 80097fc:	d405      	bmi.n	800980a <_vfiprintf_r+0x32>
 80097fe:	89ab      	ldrh	r3, [r5, #12]
 8009800:	059a      	lsls	r2, r3, #22
 8009802:	d402      	bmi.n	800980a <_vfiprintf_r+0x32>
 8009804:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009806:	f7ff f872 	bl	80088ee <__retarget_lock_acquire_recursive>
 800980a:	89ab      	ldrh	r3, [r5, #12]
 800980c:	071b      	lsls	r3, r3, #28
 800980e:	d501      	bpl.n	8009814 <_vfiprintf_r+0x3c>
 8009810:	692b      	ldr	r3, [r5, #16]
 8009812:	b9eb      	cbnz	r3, 8009850 <_vfiprintf_r+0x78>
 8009814:	4629      	mov	r1, r5
 8009816:	4630      	mov	r0, r6
 8009818:	f7fe fad4 	bl	8007dc4 <__swsetup_r>
 800981c:	b1c0      	cbz	r0, 8009850 <_vfiprintf_r+0x78>
 800981e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009820:	07dc      	lsls	r4, r3, #31
 8009822:	d50e      	bpl.n	8009842 <_vfiprintf_r+0x6a>
 8009824:	f04f 30ff 	mov.w	r0, #4294967295
 8009828:	b01d      	add	sp, #116	; 0x74
 800982a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800982e:	4b7b      	ldr	r3, [pc, #492]	; (8009a1c <_vfiprintf_r+0x244>)
 8009830:	429d      	cmp	r5, r3
 8009832:	d101      	bne.n	8009838 <_vfiprintf_r+0x60>
 8009834:	68b5      	ldr	r5, [r6, #8]
 8009836:	e7df      	b.n	80097f8 <_vfiprintf_r+0x20>
 8009838:	4b79      	ldr	r3, [pc, #484]	; (8009a20 <_vfiprintf_r+0x248>)
 800983a:	429d      	cmp	r5, r3
 800983c:	bf08      	it	eq
 800983e:	68f5      	ldreq	r5, [r6, #12]
 8009840:	e7da      	b.n	80097f8 <_vfiprintf_r+0x20>
 8009842:	89ab      	ldrh	r3, [r5, #12]
 8009844:	0598      	lsls	r0, r3, #22
 8009846:	d4ed      	bmi.n	8009824 <_vfiprintf_r+0x4c>
 8009848:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800984a:	f7ff f851 	bl	80088f0 <__retarget_lock_release_recursive>
 800984e:	e7e9      	b.n	8009824 <_vfiprintf_r+0x4c>
 8009850:	2300      	movs	r3, #0
 8009852:	9309      	str	r3, [sp, #36]	; 0x24
 8009854:	2320      	movs	r3, #32
 8009856:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800985a:	f8cd 800c 	str.w	r8, [sp, #12]
 800985e:	2330      	movs	r3, #48	; 0x30
 8009860:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009a24 <_vfiprintf_r+0x24c>
 8009864:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009868:	f04f 0901 	mov.w	r9, #1
 800986c:	4623      	mov	r3, r4
 800986e:	469a      	mov	sl, r3
 8009870:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009874:	b10a      	cbz	r2, 800987a <_vfiprintf_r+0xa2>
 8009876:	2a25      	cmp	r2, #37	; 0x25
 8009878:	d1f9      	bne.n	800986e <_vfiprintf_r+0x96>
 800987a:	ebba 0b04 	subs.w	fp, sl, r4
 800987e:	d00b      	beq.n	8009898 <_vfiprintf_r+0xc0>
 8009880:	465b      	mov	r3, fp
 8009882:	4622      	mov	r2, r4
 8009884:	4629      	mov	r1, r5
 8009886:	4630      	mov	r0, r6
 8009888:	f7ff ff93 	bl	80097b2 <__sfputs_r>
 800988c:	3001      	adds	r0, #1
 800988e:	f000 80aa 	beq.w	80099e6 <_vfiprintf_r+0x20e>
 8009892:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009894:	445a      	add	r2, fp
 8009896:	9209      	str	r2, [sp, #36]	; 0x24
 8009898:	f89a 3000 	ldrb.w	r3, [sl]
 800989c:	2b00      	cmp	r3, #0
 800989e:	f000 80a2 	beq.w	80099e6 <_vfiprintf_r+0x20e>
 80098a2:	2300      	movs	r3, #0
 80098a4:	f04f 32ff 	mov.w	r2, #4294967295
 80098a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80098ac:	f10a 0a01 	add.w	sl, sl, #1
 80098b0:	9304      	str	r3, [sp, #16]
 80098b2:	9307      	str	r3, [sp, #28]
 80098b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80098b8:	931a      	str	r3, [sp, #104]	; 0x68
 80098ba:	4654      	mov	r4, sl
 80098bc:	2205      	movs	r2, #5
 80098be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098c2:	4858      	ldr	r0, [pc, #352]	; (8009a24 <_vfiprintf_r+0x24c>)
 80098c4:	f7f6 fcd4 	bl	8000270 <memchr>
 80098c8:	9a04      	ldr	r2, [sp, #16]
 80098ca:	b9d8      	cbnz	r0, 8009904 <_vfiprintf_r+0x12c>
 80098cc:	06d1      	lsls	r1, r2, #27
 80098ce:	bf44      	itt	mi
 80098d0:	2320      	movmi	r3, #32
 80098d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098d6:	0713      	lsls	r3, r2, #28
 80098d8:	bf44      	itt	mi
 80098da:	232b      	movmi	r3, #43	; 0x2b
 80098dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098e0:	f89a 3000 	ldrb.w	r3, [sl]
 80098e4:	2b2a      	cmp	r3, #42	; 0x2a
 80098e6:	d015      	beq.n	8009914 <_vfiprintf_r+0x13c>
 80098e8:	9a07      	ldr	r2, [sp, #28]
 80098ea:	4654      	mov	r4, sl
 80098ec:	2000      	movs	r0, #0
 80098ee:	f04f 0c0a 	mov.w	ip, #10
 80098f2:	4621      	mov	r1, r4
 80098f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098f8:	3b30      	subs	r3, #48	; 0x30
 80098fa:	2b09      	cmp	r3, #9
 80098fc:	d94e      	bls.n	800999c <_vfiprintf_r+0x1c4>
 80098fe:	b1b0      	cbz	r0, 800992e <_vfiprintf_r+0x156>
 8009900:	9207      	str	r2, [sp, #28]
 8009902:	e014      	b.n	800992e <_vfiprintf_r+0x156>
 8009904:	eba0 0308 	sub.w	r3, r0, r8
 8009908:	fa09 f303 	lsl.w	r3, r9, r3
 800990c:	4313      	orrs	r3, r2
 800990e:	9304      	str	r3, [sp, #16]
 8009910:	46a2      	mov	sl, r4
 8009912:	e7d2      	b.n	80098ba <_vfiprintf_r+0xe2>
 8009914:	9b03      	ldr	r3, [sp, #12]
 8009916:	1d19      	adds	r1, r3, #4
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	9103      	str	r1, [sp, #12]
 800991c:	2b00      	cmp	r3, #0
 800991e:	bfbb      	ittet	lt
 8009920:	425b      	neglt	r3, r3
 8009922:	f042 0202 	orrlt.w	r2, r2, #2
 8009926:	9307      	strge	r3, [sp, #28]
 8009928:	9307      	strlt	r3, [sp, #28]
 800992a:	bfb8      	it	lt
 800992c:	9204      	strlt	r2, [sp, #16]
 800992e:	7823      	ldrb	r3, [r4, #0]
 8009930:	2b2e      	cmp	r3, #46	; 0x2e
 8009932:	d10c      	bne.n	800994e <_vfiprintf_r+0x176>
 8009934:	7863      	ldrb	r3, [r4, #1]
 8009936:	2b2a      	cmp	r3, #42	; 0x2a
 8009938:	d135      	bne.n	80099a6 <_vfiprintf_r+0x1ce>
 800993a:	9b03      	ldr	r3, [sp, #12]
 800993c:	1d1a      	adds	r2, r3, #4
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	9203      	str	r2, [sp, #12]
 8009942:	2b00      	cmp	r3, #0
 8009944:	bfb8      	it	lt
 8009946:	f04f 33ff 	movlt.w	r3, #4294967295
 800994a:	3402      	adds	r4, #2
 800994c:	9305      	str	r3, [sp, #20]
 800994e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009a34 <_vfiprintf_r+0x25c>
 8009952:	7821      	ldrb	r1, [r4, #0]
 8009954:	2203      	movs	r2, #3
 8009956:	4650      	mov	r0, sl
 8009958:	f7f6 fc8a 	bl	8000270 <memchr>
 800995c:	b140      	cbz	r0, 8009970 <_vfiprintf_r+0x198>
 800995e:	2340      	movs	r3, #64	; 0x40
 8009960:	eba0 000a 	sub.w	r0, r0, sl
 8009964:	fa03 f000 	lsl.w	r0, r3, r0
 8009968:	9b04      	ldr	r3, [sp, #16]
 800996a:	4303      	orrs	r3, r0
 800996c:	3401      	adds	r4, #1
 800996e:	9304      	str	r3, [sp, #16]
 8009970:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009974:	482c      	ldr	r0, [pc, #176]	; (8009a28 <_vfiprintf_r+0x250>)
 8009976:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800997a:	2206      	movs	r2, #6
 800997c:	f7f6 fc78 	bl	8000270 <memchr>
 8009980:	2800      	cmp	r0, #0
 8009982:	d03f      	beq.n	8009a04 <_vfiprintf_r+0x22c>
 8009984:	4b29      	ldr	r3, [pc, #164]	; (8009a2c <_vfiprintf_r+0x254>)
 8009986:	bb1b      	cbnz	r3, 80099d0 <_vfiprintf_r+0x1f8>
 8009988:	9b03      	ldr	r3, [sp, #12]
 800998a:	3307      	adds	r3, #7
 800998c:	f023 0307 	bic.w	r3, r3, #7
 8009990:	3308      	adds	r3, #8
 8009992:	9303      	str	r3, [sp, #12]
 8009994:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009996:	443b      	add	r3, r7
 8009998:	9309      	str	r3, [sp, #36]	; 0x24
 800999a:	e767      	b.n	800986c <_vfiprintf_r+0x94>
 800999c:	fb0c 3202 	mla	r2, ip, r2, r3
 80099a0:	460c      	mov	r4, r1
 80099a2:	2001      	movs	r0, #1
 80099a4:	e7a5      	b.n	80098f2 <_vfiprintf_r+0x11a>
 80099a6:	2300      	movs	r3, #0
 80099a8:	3401      	adds	r4, #1
 80099aa:	9305      	str	r3, [sp, #20]
 80099ac:	4619      	mov	r1, r3
 80099ae:	f04f 0c0a 	mov.w	ip, #10
 80099b2:	4620      	mov	r0, r4
 80099b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099b8:	3a30      	subs	r2, #48	; 0x30
 80099ba:	2a09      	cmp	r2, #9
 80099bc:	d903      	bls.n	80099c6 <_vfiprintf_r+0x1ee>
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d0c5      	beq.n	800994e <_vfiprintf_r+0x176>
 80099c2:	9105      	str	r1, [sp, #20]
 80099c4:	e7c3      	b.n	800994e <_vfiprintf_r+0x176>
 80099c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80099ca:	4604      	mov	r4, r0
 80099cc:	2301      	movs	r3, #1
 80099ce:	e7f0      	b.n	80099b2 <_vfiprintf_r+0x1da>
 80099d0:	ab03      	add	r3, sp, #12
 80099d2:	9300      	str	r3, [sp, #0]
 80099d4:	462a      	mov	r2, r5
 80099d6:	4b16      	ldr	r3, [pc, #88]	; (8009a30 <_vfiprintf_r+0x258>)
 80099d8:	a904      	add	r1, sp, #16
 80099da:	4630      	mov	r0, r6
 80099dc:	f3af 8000 	nop.w
 80099e0:	4607      	mov	r7, r0
 80099e2:	1c78      	adds	r0, r7, #1
 80099e4:	d1d6      	bne.n	8009994 <_vfiprintf_r+0x1bc>
 80099e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80099e8:	07d9      	lsls	r1, r3, #31
 80099ea:	d405      	bmi.n	80099f8 <_vfiprintf_r+0x220>
 80099ec:	89ab      	ldrh	r3, [r5, #12]
 80099ee:	059a      	lsls	r2, r3, #22
 80099f0:	d402      	bmi.n	80099f8 <_vfiprintf_r+0x220>
 80099f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80099f4:	f7fe ff7c 	bl	80088f0 <__retarget_lock_release_recursive>
 80099f8:	89ab      	ldrh	r3, [r5, #12]
 80099fa:	065b      	lsls	r3, r3, #25
 80099fc:	f53f af12 	bmi.w	8009824 <_vfiprintf_r+0x4c>
 8009a00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a02:	e711      	b.n	8009828 <_vfiprintf_r+0x50>
 8009a04:	ab03      	add	r3, sp, #12
 8009a06:	9300      	str	r3, [sp, #0]
 8009a08:	462a      	mov	r2, r5
 8009a0a:	4b09      	ldr	r3, [pc, #36]	; (8009a30 <_vfiprintf_r+0x258>)
 8009a0c:	a904      	add	r1, sp, #16
 8009a0e:	4630      	mov	r0, r6
 8009a10:	f000 f880 	bl	8009b14 <_printf_i>
 8009a14:	e7e4      	b.n	80099e0 <_vfiprintf_r+0x208>
 8009a16:	bf00      	nop
 8009a18:	0800a624 	.word	0x0800a624
 8009a1c:	0800a644 	.word	0x0800a644
 8009a20:	0800a604 	.word	0x0800a604
 8009a24:	0800a86c 	.word	0x0800a86c
 8009a28:	0800a876 	.word	0x0800a876
 8009a2c:	00000000 	.word	0x00000000
 8009a30:	080097b3 	.word	0x080097b3
 8009a34:	0800a872 	.word	0x0800a872

08009a38 <_printf_common>:
 8009a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a3c:	4616      	mov	r6, r2
 8009a3e:	4699      	mov	r9, r3
 8009a40:	688a      	ldr	r2, [r1, #8]
 8009a42:	690b      	ldr	r3, [r1, #16]
 8009a44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	bfb8      	it	lt
 8009a4c:	4613      	movlt	r3, r2
 8009a4e:	6033      	str	r3, [r6, #0]
 8009a50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009a54:	4607      	mov	r7, r0
 8009a56:	460c      	mov	r4, r1
 8009a58:	b10a      	cbz	r2, 8009a5e <_printf_common+0x26>
 8009a5a:	3301      	adds	r3, #1
 8009a5c:	6033      	str	r3, [r6, #0]
 8009a5e:	6823      	ldr	r3, [r4, #0]
 8009a60:	0699      	lsls	r1, r3, #26
 8009a62:	bf42      	ittt	mi
 8009a64:	6833      	ldrmi	r3, [r6, #0]
 8009a66:	3302      	addmi	r3, #2
 8009a68:	6033      	strmi	r3, [r6, #0]
 8009a6a:	6825      	ldr	r5, [r4, #0]
 8009a6c:	f015 0506 	ands.w	r5, r5, #6
 8009a70:	d106      	bne.n	8009a80 <_printf_common+0x48>
 8009a72:	f104 0a19 	add.w	sl, r4, #25
 8009a76:	68e3      	ldr	r3, [r4, #12]
 8009a78:	6832      	ldr	r2, [r6, #0]
 8009a7a:	1a9b      	subs	r3, r3, r2
 8009a7c:	42ab      	cmp	r3, r5
 8009a7e:	dc26      	bgt.n	8009ace <_printf_common+0x96>
 8009a80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009a84:	1e13      	subs	r3, r2, #0
 8009a86:	6822      	ldr	r2, [r4, #0]
 8009a88:	bf18      	it	ne
 8009a8a:	2301      	movne	r3, #1
 8009a8c:	0692      	lsls	r2, r2, #26
 8009a8e:	d42b      	bmi.n	8009ae8 <_printf_common+0xb0>
 8009a90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a94:	4649      	mov	r1, r9
 8009a96:	4638      	mov	r0, r7
 8009a98:	47c0      	blx	r8
 8009a9a:	3001      	adds	r0, #1
 8009a9c:	d01e      	beq.n	8009adc <_printf_common+0xa4>
 8009a9e:	6823      	ldr	r3, [r4, #0]
 8009aa0:	68e5      	ldr	r5, [r4, #12]
 8009aa2:	6832      	ldr	r2, [r6, #0]
 8009aa4:	f003 0306 	and.w	r3, r3, #6
 8009aa8:	2b04      	cmp	r3, #4
 8009aaa:	bf08      	it	eq
 8009aac:	1aad      	subeq	r5, r5, r2
 8009aae:	68a3      	ldr	r3, [r4, #8]
 8009ab0:	6922      	ldr	r2, [r4, #16]
 8009ab2:	bf0c      	ite	eq
 8009ab4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ab8:	2500      	movne	r5, #0
 8009aba:	4293      	cmp	r3, r2
 8009abc:	bfc4      	itt	gt
 8009abe:	1a9b      	subgt	r3, r3, r2
 8009ac0:	18ed      	addgt	r5, r5, r3
 8009ac2:	2600      	movs	r6, #0
 8009ac4:	341a      	adds	r4, #26
 8009ac6:	42b5      	cmp	r5, r6
 8009ac8:	d11a      	bne.n	8009b00 <_printf_common+0xc8>
 8009aca:	2000      	movs	r0, #0
 8009acc:	e008      	b.n	8009ae0 <_printf_common+0xa8>
 8009ace:	2301      	movs	r3, #1
 8009ad0:	4652      	mov	r2, sl
 8009ad2:	4649      	mov	r1, r9
 8009ad4:	4638      	mov	r0, r7
 8009ad6:	47c0      	blx	r8
 8009ad8:	3001      	adds	r0, #1
 8009ada:	d103      	bne.n	8009ae4 <_printf_common+0xac>
 8009adc:	f04f 30ff 	mov.w	r0, #4294967295
 8009ae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ae4:	3501      	adds	r5, #1
 8009ae6:	e7c6      	b.n	8009a76 <_printf_common+0x3e>
 8009ae8:	18e1      	adds	r1, r4, r3
 8009aea:	1c5a      	adds	r2, r3, #1
 8009aec:	2030      	movs	r0, #48	; 0x30
 8009aee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009af2:	4422      	add	r2, r4
 8009af4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009af8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009afc:	3302      	adds	r3, #2
 8009afe:	e7c7      	b.n	8009a90 <_printf_common+0x58>
 8009b00:	2301      	movs	r3, #1
 8009b02:	4622      	mov	r2, r4
 8009b04:	4649      	mov	r1, r9
 8009b06:	4638      	mov	r0, r7
 8009b08:	47c0      	blx	r8
 8009b0a:	3001      	adds	r0, #1
 8009b0c:	d0e6      	beq.n	8009adc <_printf_common+0xa4>
 8009b0e:	3601      	adds	r6, #1
 8009b10:	e7d9      	b.n	8009ac6 <_printf_common+0x8e>
	...

08009b14 <_printf_i>:
 8009b14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b18:	460c      	mov	r4, r1
 8009b1a:	4691      	mov	r9, r2
 8009b1c:	7e27      	ldrb	r7, [r4, #24]
 8009b1e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009b20:	2f78      	cmp	r7, #120	; 0x78
 8009b22:	4680      	mov	r8, r0
 8009b24:	469a      	mov	sl, r3
 8009b26:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b2a:	d807      	bhi.n	8009b3c <_printf_i+0x28>
 8009b2c:	2f62      	cmp	r7, #98	; 0x62
 8009b2e:	d80a      	bhi.n	8009b46 <_printf_i+0x32>
 8009b30:	2f00      	cmp	r7, #0
 8009b32:	f000 80d8 	beq.w	8009ce6 <_printf_i+0x1d2>
 8009b36:	2f58      	cmp	r7, #88	; 0x58
 8009b38:	f000 80a3 	beq.w	8009c82 <_printf_i+0x16e>
 8009b3c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009b40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009b44:	e03a      	b.n	8009bbc <_printf_i+0xa8>
 8009b46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009b4a:	2b15      	cmp	r3, #21
 8009b4c:	d8f6      	bhi.n	8009b3c <_printf_i+0x28>
 8009b4e:	a001      	add	r0, pc, #4	; (adr r0, 8009b54 <_printf_i+0x40>)
 8009b50:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009b54:	08009bad 	.word	0x08009bad
 8009b58:	08009bc1 	.word	0x08009bc1
 8009b5c:	08009b3d 	.word	0x08009b3d
 8009b60:	08009b3d 	.word	0x08009b3d
 8009b64:	08009b3d 	.word	0x08009b3d
 8009b68:	08009b3d 	.word	0x08009b3d
 8009b6c:	08009bc1 	.word	0x08009bc1
 8009b70:	08009b3d 	.word	0x08009b3d
 8009b74:	08009b3d 	.word	0x08009b3d
 8009b78:	08009b3d 	.word	0x08009b3d
 8009b7c:	08009b3d 	.word	0x08009b3d
 8009b80:	08009ccd 	.word	0x08009ccd
 8009b84:	08009bf1 	.word	0x08009bf1
 8009b88:	08009caf 	.word	0x08009caf
 8009b8c:	08009b3d 	.word	0x08009b3d
 8009b90:	08009b3d 	.word	0x08009b3d
 8009b94:	08009cef 	.word	0x08009cef
 8009b98:	08009b3d 	.word	0x08009b3d
 8009b9c:	08009bf1 	.word	0x08009bf1
 8009ba0:	08009b3d 	.word	0x08009b3d
 8009ba4:	08009b3d 	.word	0x08009b3d
 8009ba8:	08009cb7 	.word	0x08009cb7
 8009bac:	680b      	ldr	r3, [r1, #0]
 8009bae:	1d1a      	adds	r2, r3, #4
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	600a      	str	r2, [r1, #0]
 8009bb4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009bb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	e0a3      	b.n	8009d08 <_printf_i+0x1f4>
 8009bc0:	6825      	ldr	r5, [r4, #0]
 8009bc2:	6808      	ldr	r0, [r1, #0]
 8009bc4:	062e      	lsls	r6, r5, #24
 8009bc6:	f100 0304 	add.w	r3, r0, #4
 8009bca:	d50a      	bpl.n	8009be2 <_printf_i+0xce>
 8009bcc:	6805      	ldr	r5, [r0, #0]
 8009bce:	600b      	str	r3, [r1, #0]
 8009bd0:	2d00      	cmp	r5, #0
 8009bd2:	da03      	bge.n	8009bdc <_printf_i+0xc8>
 8009bd4:	232d      	movs	r3, #45	; 0x2d
 8009bd6:	426d      	negs	r5, r5
 8009bd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009bdc:	485e      	ldr	r0, [pc, #376]	; (8009d58 <_printf_i+0x244>)
 8009bde:	230a      	movs	r3, #10
 8009be0:	e019      	b.n	8009c16 <_printf_i+0x102>
 8009be2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009be6:	6805      	ldr	r5, [r0, #0]
 8009be8:	600b      	str	r3, [r1, #0]
 8009bea:	bf18      	it	ne
 8009bec:	b22d      	sxthne	r5, r5
 8009bee:	e7ef      	b.n	8009bd0 <_printf_i+0xbc>
 8009bf0:	680b      	ldr	r3, [r1, #0]
 8009bf2:	6825      	ldr	r5, [r4, #0]
 8009bf4:	1d18      	adds	r0, r3, #4
 8009bf6:	6008      	str	r0, [r1, #0]
 8009bf8:	0628      	lsls	r0, r5, #24
 8009bfa:	d501      	bpl.n	8009c00 <_printf_i+0xec>
 8009bfc:	681d      	ldr	r5, [r3, #0]
 8009bfe:	e002      	b.n	8009c06 <_printf_i+0xf2>
 8009c00:	0669      	lsls	r1, r5, #25
 8009c02:	d5fb      	bpl.n	8009bfc <_printf_i+0xe8>
 8009c04:	881d      	ldrh	r5, [r3, #0]
 8009c06:	4854      	ldr	r0, [pc, #336]	; (8009d58 <_printf_i+0x244>)
 8009c08:	2f6f      	cmp	r7, #111	; 0x6f
 8009c0a:	bf0c      	ite	eq
 8009c0c:	2308      	moveq	r3, #8
 8009c0e:	230a      	movne	r3, #10
 8009c10:	2100      	movs	r1, #0
 8009c12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009c16:	6866      	ldr	r6, [r4, #4]
 8009c18:	60a6      	str	r6, [r4, #8]
 8009c1a:	2e00      	cmp	r6, #0
 8009c1c:	bfa2      	ittt	ge
 8009c1e:	6821      	ldrge	r1, [r4, #0]
 8009c20:	f021 0104 	bicge.w	r1, r1, #4
 8009c24:	6021      	strge	r1, [r4, #0]
 8009c26:	b90d      	cbnz	r5, 8009c2c <_printf_i+0x118>
 8009c28:	2e00      	cmp	r6, #0
 8009c2a:	d04d      	beq.n	8009cc8 <_printf_i+0x1b4>
 8009c2c:	4616      	mov	r6, r2
 8009c2e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009c32:	fb03 5711 	mls	r7, r3, r1, r5
 8009c36:	5dc7      	ldrb	r7, [r0, r7]
 8009c38:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009c3c:	462f      	mov	r7, r5
 8009c3e:	42bb      	cmp	r3, r7
 8009c40:	460d      	mov	r5, r1
 8009c42:	d9f4      	bls.n	8009c2e <_printf_i+0x11a>
 8009c44:	2b08      	cmp	r3, #8
 8009c46:	d10b      	bne.n	8009c60 <_printf_i+0x14c>
 8009c48:	6823      	ldr	r3, [r4, #0]
 8009c4a:	07df      	lsls	r7, r3, #31
 8009c4c:	d508      	bpl.n	8009c60 <_printf_i+0x14c>
 8009c4e:	6923      	ldr	r3, [r4, #16]
 8009c50:	6861      	ldr	r1, [r4, #4]
 8009c52:	4299      	cmp	r1, r3
 8009c54:	bfde      	ittt	le
 8009c56:	2330      	movle	r3, #48	; 0x30
 8009c58:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009c5c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009c60:	1b92      	subs	r2, r2, r6
 8009c62:	6122      	str	r2, [r4, #16]
 8009c64:	f8cd a000 	str.w	sl, [sp]
 8009c68:	464b      	mov	r3, r9
 8009c6a:	aa03      	add	r2, sp, #12
 8009c6c:	4621      	mov	r1, r4
 8009c6e:	4640      	mov	r0, r8
 8009c70:	f7ff fee2 	bl	8009a38 <_printf_common>
 8009c74:	3001      	adds	r0, #1
 8009c76:	d14c      	bne.n	8009d12 <_printf_i+0x1fe>
 8009c78:	f04f 30ff 	mov.w	r0, #4294967295
 8009c7c:	b004      	add	sp, #16
 8009c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c82:	4835      	ldr	r0, [pc, #212]	; (8009d58 <_printf_i+0x244>)
 8009c84:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009c88:	6823      	ldr	r3, [r4, #0]
 8009c8a:	680e      	ldr	r6, [r1, #0]
 8009c8c:	061f      	lsls	r7, r3, #24
 8009c8e:	f856 5b04 	ldr.w	r5, [r6], #4
 8009c92:	600e      	str	r6, [r1, #0]
 8009c94:	d514      	bpl.n	8009cc0 <_printf_i+0x1ac>
 8009c96:	07d9      	lsls	r1, r3, #31
 8009c98:	bf44      	itt	mi
 8009c9a:	f043 0320 	orrmi.w	r3, r3, #32
 8009c9e:	6023      	strmi	r3, [r4, #0]
 8009ca0:	b91d      	cbnz	r5, 8009caa <_printf_i+0x196>
 8009ca2:	6823      	ldr	r3, [r4, #0]
 8009ca4:	f023 0320 	bic.w	r3, r3, #32
 8009ca8:	6023      	str	r3, [r4, #0]
 8009caa:	2310      	movs	r3, #16
 8009cac:	e7b0      	b.n	8009c10 <_printf_i+0xfc>
 8009cae:	6823      	ldr	r3, [r4, #0]
 8009cb0:	f043 0320 	orr.w	r3, r3, #32
 8009cb4:	6023      	str	r3, [r4, #0]
 8009cb6:	2378      	movs	r3, #120	; 0x78
 8009cb8:	4828      	ldr	r0, [pc, #160]	; (8009d5c <_printf_i+0x248>)
 8009cba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009cbe:	e7e3      	b.n	8009c88 <_printf_i+0x174>
 8009cc0:	065e      	lsls	r6, r3, #25
 8009cc2:	bf48      	it	mi
 8009cc4:	b2ad      	uxthmi	r5, r5
 8009cc6:	e7e6      	b.n	8009c96 <_printf_i+0x182>
 8009cc8:	4616      	mov	r6, r2
 8009cca:	e7bb      	b.n	8009c44 <_printf_i+0x130>
 8009ccc:	680b      	ldr	r3, [r1, #0]
 8009cce:	6826      	ldr	r6, [r4, #0]
 8009cd0:	6960      	ldr	r0, [r4, #20]
 8009cd2:	1d1d      	adds	r5, r3, #4
 8009cd4:	600d      	str	r5, [r1, #0]
 8009cd6:	0635      	lsls	r5, r6, #24
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	d501      	bpl.n	8009ce0 <_printf_i+0x1cc>
 8009cdc:	6018      	str	r0, [r3, #0]
 8009cde:	e002      	b.n	8009ce6 <_printf_i+0x1d2>
 8009ce0:	0671      	lsls	r1, r6, #25
 8009ce2:	d5fb      	bpl.n	8009cdc <_printf_i+0x1c8>
 8009ce4:	8018      	strh	r0, [r3, #0]
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	6123      	str	r3, [r4, #16]
 8009cea:	4616      	mov	r6, r2
 8009cec:	e7ba      	b.n	8009c64 <_printf_i+0x150>
 8009cee:	680b      	ldr	r3, [r1, #0]
 8009cf0:	1d1a      	adds	r2, r3, #4
 8009cf2:	600a      	str	r2, [r1, #0]
 8009cf4:	681e      	ldr	r6, [r3, #0]
 8009cf6:	6862      	ldr	r2, [r4, #4]
 8009cf8:	2100      	movs	r1, #0
 8009cfa:	4630      	mov	r0, r6
 8009cfc:	f7f6 fab8 	bl	8000270 <memchr>
 8009d00:	b108      	cbz	r0, 8009d06 <_printf_i+0x1f2>
 8009d02:	1b80      	subs	r0, r0, r6
 8009d04:	6060      	str	r0, [r4, #4]
 8009d06:	6863      	ldr	r3, [r4, #4]
 8009d08:	6123      	str	r3, [r4, #16]
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d10:	e7a8      	b.n	8009c64 <_printf_i+0x150>
 8009d12:	6923      	ldr	r3, [r4, #16]
 8009d14:	4632      	mov	r2, r6
 8009d16:	4649      	mov	r1, r9
 8009d18:	4640      	mov	r0, r8
 8009d1a:	47d0      	blx	sl
 8009d1c:	3001      	adds	r0, #1
 8009d1e:	d0ab      	beq.n	8009c78 <_printf_i+0x164>
 8009d20:	6823      	ldr	r3, [r4, #0]
 8009d22:	079b      	lsls	r3, r3, #30
 8009d24:	d413      	bmi.n	8009d4e <_printf_i+0x23a>
 8009d26:	68e0      	ldr	r0, [r4, #12]
 8009d28:	9b03      	ldr	r3, [sp, #12]
 8009d2a:	4298      	cmp	r0, r3
 8009d2c:	bfb8      	it	lt
 8009d2e:	4618      	movlt	r0, r3
 8009d30:	e7a4      	b.n	8009c7c <_printf_i+0x168>
 8009d32:	2301      	movs	r3, #1
 8009d34:	4632      	mov	r2, r6
 8009d36:	4649      	mov	r1, r9
 8009d38:	4640      	mov	r0, r8
 8009d3a:	47d0      	blx	sl
 8009d3c:	3001      	adds	r0, #1
 8009d3e:	d09b      	beq.n	8009c78 <_printf_i+0x164>
 8009d40:	3501      	adds	r5, #1
 8009d42:	68e3      	ldr	r3, [r4, #12]
 8009d44:	9903      	ldr	r1, [sp, #12]
 8009d46:	1a5b      	subs	r3, r3, r1
 8009d48:	42ab      	cmp	r3, r5
 8009d4a:	dcf2      	bgt.n	8009d32 <_printf_i+0x21e>
 8009d4c:	e7eb      	b.n	8009d26 <_printf_i+0x212>
 8009d4e:	2500      	movs	r5, #0
 8009d50:	f104 0619 	add.w	r6, r4, #25
 8009d54:	e7f5      	b.n	8009d42 <_printf_i+0x22e>
 8009d56:	bf00      	nop
 8009d58:	0800a87d 	.word	0x0800a87d
 8009d5c:	0800a88e 	.word	0x0800a88e

08009d60 <_putc_r>:
 8009d60:	b570      	push	{r4, r5, r6, lr}
 8009d62:	460d      	mov	r5, r1
 8009d64:	4614      	mov	r4, r2
 8009d66:	4606      	mov	r6, r0
 8009d68:	b118      	cbz	r0, 8009d72 <_putc_r+0x12>
 8009d6a:	6983      	ldr	r3, [r0, #24]
 8009d6c:	b90b      	cbnz	r3, 8009d72 <_putc_r+0x12>
 8009d6e:	f7fe f9b1 	bl	80080d4 <__sinit>
 8009d72:	4b1c      	ldr	r3, [pc, #112]	; (8009de4 <_putc_r+0x84>)
 8009d74:	429c      	cmp	r4, r3
 8009d76:	d124      	bne.n	8009dc2 <_putc_r+0x62>
 8009d78:	6874      	ldr	r4, [r6, #4]
 8009d7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d7c:	07d8      	lsls	r0, r3, #31
 8009d7e:	d405      	bmi.n	8009d8c <_putc_r+0x2c>
 8009d80:	89a3      	ldrh	r3, [r4, #12]
 8009d82:	0599      	lsls	r1, r3, #22
 8009d84:	d402      	bmi.n	8009d8c <_putc_r+0x2c>
 8009d86:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d88:	f7fe fdb1 	bl	80088ee <__retarget_lock_acquire_recursive>
 8009d8c:	68a3      	ldr	r3, [r4, #8]
 8009d8e:	3b01      	subs	r3, #1
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	60a3      	str	r3, [r4, #8]
 8009d94:	da05      	bge.n	8009da2 <_putc_r+0x42>
 8009d96:	69a2      	ldr	r2, [r4, #24]
 8009d98:	4293      	cmp	r3, r2
 8009d9a:	db1c      	blt.n	8009dd6 <_putc_r+0x76>
 8009d9c:	b2eb      	uxtb	r3, r5
 8009d9e:	2b0a      	cmp	r3, #10
 8009da0:	d019      	beq.n	8009dd6 <_putc_r+0x76>
 8009da2:	6823      	ldr	r3, [r4, #0]
 8009da4:	1c5a      	adds	r2, r3, #1
 8009da6:	6022      	str	r2, [r4, #0]
 8009da8:	701d      	strb	r5, [r3, #0]
 8009daa:	b2ed      	uxtb	r5, r5
 8009dac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009dae:	07da      	lsls	r2, r3, #31
 8009db0:	d405      	bmi.n	8009dbe <_putc_r+0x5e>
 8009db2:	89a3      	ldrh	r3, [r4, #12]
 8009db4:	059b      	lsls	r3, r3, #22
 8009db6:	d402      	bmi.n	8009dbe <_putc_r+0x5e>
 8009db8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009dba:	f7fe fd99 	bl	80088f0 <__retarget_lock_release_recursive>
 8009dbe:	4628      	mov	r0, r5
 8009dc0:	bd70      	pop	{r4, r5, r6, pc}
 8009dc2:	4b09      	ldr	r3, [pc, #36]	; (8009de8 <_putc_r+0x88>)
 8009dc4:	429c      	cmp	r4, r3
 8009dc6:	d101      	bne.n	8009dcc <_putc_r+0x6c>
 8009dc8:	68b4      	ldr	r4, [r6, #8]
 8009dca:	e7d6      	b.n	8009d7a <_putc_r+0x1a>
 8009dcc:	4b07      	ldr	r3, [pc, #28]	; (8009dec <_putc_r+0x8c>)
 8009dce:	429c      	cmp	r4, r3
 8009dd0:	bf08      	it	eq
 8009dd2:	68f4      	ldreq	r4, [r6, #12]
 8009dd4:	e7d1      	b.n	8009d7a <_putc_r+0x1a>
 8009dd6:	4629      	mov	r1, r5
 8009dd8:	4622      	mov	r2, r4
 8009dda:	4630      	mov	r0, r6
 8009ddc:	f7fd ffa0 	bl	8007d20 <__swbuf_r>
 8009de0:	4605      	mov	r5, r0
 8009de2:	e7e3      	b.n	8009dac <_putc_r+0x4c>
 8009de4:	0800a624 	.word	0x0800a624
 8009de8:	0800a644 	.word	0x0800a644
 8009dec:	0800a604 	.word	0x0800a604

08009df0 <nan>:
 8009df0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009df8 <nan+0x8>
 8009df4:	4770      	bx	lr
 8009df6:	bf00      	nop
 8009df8:	00000000 	.word	0x00000000
 8009dfc:	7ff80000 	.word	0x7ff80000

08009e00 <_sbrk_r>:
 8009e00:	b538      	push	{r3, r4, r5, lr}
 8009e02:	4d06      	ldr	r5, [pc, #24]	; (8009e1c <_sbrk_r+0x1c>)
 8009e04:	2300      	movs	r3, #0
 8009e06:	4604      	mov	r4, r0
 8009e08:	4608      	mov	r0, r1
 8009e0a:	602b      	str	r3, [r5, #0]
 8009e0c:	f7f8 fa9e 	bl	800234c <_sbrk>
 8009e10:	1c43      	adds	r3, r0, #1
 8009e12:	d102      	bne.n	8009e1a <_sbrk_r+0x1a>
 8009e14:	682b      	ldr	r3, [r5, #0]
 8009e16:	b103      	cbz	r3, 8009e1a <_sbrk_r+0x1a>
 8009e18:	6023      	str	r3, [r4, #0]
 8009e1a:	bd38      	pop	{r3, r4, r5, pc}
 8009e1c:	20000934 	.word	0x20000934

08009e20 <nanf>:
 8009e20:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009e28 <nanf+0x8>
 8009e24:	4770      	bx	lr
 8009e26:	bf00      	nop
 8009e28:	7fc00000 	.word	0x7fc00000

08009e2c <__sread>:
 8009e2c:	b510      	push	{r4, lr}
 8009e2e:	460c      	mov	r4, r1
 8009e30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e34:	f000 f936 	bl	800a0a4 <_read_r>
 8009e38:	2800      	cmp	r0, #0
 8009e3a:	bfab      	itete	ge
 8009e3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009e3e:	89a3      	ldrhlt	r3, [r4, #12]
 8009e40:	181b      	addge	r3, r3, r0
 8009e42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009e46:	bfac      	ite	ge
 8009e48:	6563      	strge	r3, [r4, #84]	; 0x54
 8009e4a:	81a3      	strhlt	r3, [r4, #12]
 8009e4c:	bd10      	pop	{r4, pc}

08009e4e <__swrite>:
 8009e4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e52:	461f      	mov	r7, r3
 8009e54:	898b      	ldrh	r3, [r1, #12]
 8009e56:	05db      	lsls	r3, r3, #23
 8009e58:	4605      	mov	r5, r0
 8009e5a:	460c      	mov	r4, r1
 8009e5c:	4616      	mov	r6, r2
 8009e5e:	d505      	bpl.n	8009e6c <__swrite+0x1e>
 8009e60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e64:	2302      	movs	r3, #2
 8009e66:	2200      	movs	r2, #0
 8009e68:	f000 f8b6 	bl	8009fd8 <_lseek_r>
 8009e6c:	89a3      	ldrh	r3, [r4, #12]
 8009e6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e76:	81a3      	strh	r3, [r4, #12]
 8009e78:	4632      	mov	r2, r6
 8009e7a:	463b      	mov	r3, r7
 8009e7c:	4628      	mov	r0, r5
 8009e7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e82:	f000 b835 	b.w	8009ef0 <_write_r>

08009e86 <__sseek>:
 8009e86:	b510      	push	{r4, lr}
 8009e88:	460c      	mov	r4, r1
 8009e8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e8e:	f000 f8a3 	bl	8009fd8 <_lseek_r>
 8009e92:	1c43      	adds	r3, r0, #1
 8009e94:	89a3      	ldrh	r3, [r4, #12]
 8009e96:	bf15      	itete	ne
 8009e98:	6560      	strne	r0, [r4, #84]	; 0x54
 8009e9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009e9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009ea2:	81a3      	strheq	r3, [r4, #12]
 8009ea4:	bf18      	it	ne
 8009ea6:	81a3      	strhne	r3, [r4, #12]
 8009ea8:	bd10      	pop	{r4, pc}

08009eaa <__sclose>:
 8009eaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009eae:	f000 b84f 	b.w	8009f50 <_close_r>

08009eb2 <strncmp>:
 8009eb2:	b510      	push	{r4, lr}
 8009eb4:	b16a      	cbz	r2, 8009ed2 <strncmp+0x20>
 8009eb6:	3901      	subs	r1, #1
 8009eb8:	1884      	adds	r4, r0, r2
 8009eba:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009ebe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d103      	bne.n	8009ece <strncmp+0x1c>
 8009ec6:	42a0      	cmp	r0, r4
 8009ec8:	d001      	beq.n	8009ece <strncmp+0x1c>
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d1f5      	bne.n	8009eba <strncmp+0x8>
 8009ece:	1a98      	subs	r0, r3, r2
 8009ed0:	bd10      	pop	{r4, pc}
 8009ed2:	4610      	mov	r0, r2
 8009ed4:	e7fc      	b.n	8009ed0 <strncmp+0x1e>

08009ed6 <__ascii_wctomb>:
 8009ed6:	b149      	cbz	r1, 8009eec <__ascii_wctomb+0x16>
 8009ed8:	2aff      	cmp	r2, #255	; 0xff
 8009eda:	bf85      	ittet	hi
 8009edc:	238a      	movhi	r3, #138	; 0x8a
 8009ede:	6003      	strhi	r3, [r0, #0]
 8009ee0:	700a      	strbls	r2, [r1, #0]
 8009ee2:	f04f 30ff 	movhi.w	r0, #4294967295
 8009ee6:	bf98      	it	ls
 8009ee8:	2001      	movls	r0, #1
 8009eea:	4770      	bx	lr
 8009eec:	4608      	mov	r0, r1
 8009eee:	4770      	bx	lr

08009ef0 <_write_r>:
 8009ef0:	b538      	push	{r3, r4, r5, lr}
 8009ef2:	4d07      	ldr	r5, [pc, #28]	; (8009f10 <_write_r+0x20>)
 8009ef4:	4604      	mov	r4, r0
 8009ef6:	4608      	mov	r0, r1
 8009ef8:	4611      	mov	r1, r2
 8009efa:	2200      	movs	r2, #0
 8009efc:	602a      	str	r2, [r5, #0]
 8009efe:	461a      	mov	r2, r3
 8009f00:	f7f8 f9d3 	bl	80022aa <_write>
 8009f04:	1c43      	adds	r3, r0, #1
 8009f06:	d102      	bne.n	8009f0e <_write_r+0x1e>
 8009f08:	682b      	ldr	r3, [r5, #0]
 8009f0a:	b103      	cbz	r3, 8009f0e <_write_r+0x1e>
 8009f0c:	6023      	str	r3, [r4, #0]
 8009f0e:	bd38      	pop	{r3, r4, r5, pc}
 8009f10:	20000934 	.word	0x20000934

08009f14 <__assert_func>:
 8009f14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009f16:	4614      	mov	r4, r2
 8009f18:	461a      	mov	r2, r3
 8009f1a:	4b09      	ldr	r3, [pc, #36]	; (8009f40 <__assert_func+0x2c>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	4605      	mov	r5, r0
 8009f20:	68d8      	ldr	r0, [r3, #12]
 8009f22:	b14c      	cbz	r4, 8009f38 <__assert_func+0x24>
 8009f24:	4b07      	ldr	r3, [pc, #28]	; (8009f44 <__assert_func+0x30>)
 8009f26:	9100      	str	r1, [sp, #0]
 8009f28:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009f2c:	4906      	ldr	r1, [pc, #24]	; (8009f48 <__assert_func+0x34>)
 8009f2e:	462b      	mov	r3, r5
 8009f30:	f000 f81e 	bl	8009f70 <fiprintf>
 8009f34:	f000 f8c8 	bl	800a0c8 <abort>
 8009f38:	4b04      	ldr	r3, [pc, #16]	; (8009f4c <__assert_func+0x38>)
 8009f3a:	461c      	mov	r4, r3
 8009f3c:	e7f3      	b.n	8009f26 <__assert_func+0x12>
 8009f3e:	bf00      	nop
 8009f40:	20000010 	.word	0x20000010
 8009f44:	0800a89f 	.word	0x0800a89f
 8009f48:	0800a8ac 	.word	0x0800a8ac
 8009f4c:	0800a8da 	.word	0x0800a8da

08009f50 <_close_r>:
 8009f50:	b538      	push	{r3, r4, r5, lr}
 8009f52:	4d06      	ldr	r5, [pc, #24]	; (8009f6c <_close_r+0x1c>)
 8009f54:	2300      	movs	r3, #0
 8009f56:	4604      	mov	r4, r0
 8009f58:	4608      	mov	r0, r1
 8009f5a:	602b      	str	r3, [r5, #0]
 8009f5c:	f7f8 f9c1 	bl	80022e2 <_close>
 8009f60:	1c43      	adds	r3, r0, #1
 8009f62:	d102      	bne.n	8009f6a <_close_r+0x1a>
 8009f64:	682b      	ldr	r3, [r5, #0]
 8009f66:	b103      	cbz	r3, 8009f6a <_close_r+0x1a>
 8009f68:	6023      	str	r3, [r4, #0]
 8009f6a:	bd38      	pop	{r3, r4, r5, pc}
 8009f6c:	20000934 	.word	0x20000934

08009f70 <fiprintf>:
 8009f70:	b40e      	push	{r1, r2, r3}
 8009f72:	b503      	push	{r0, r1, lr}
 8009f74:	4601      	mov	r1, r0
 8009f76:	ab03      	add	r3, sp, #12
 8009f78:	4805      	ldr	r0, [pc, #20]	; (8009f90 <fiprintf+0x20>)
 8009f7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f7e:	6800      	ldr	r0, [r0, #0]
 8009f80:	9301      	str	r3, [sp, #4]
 8009f82:	f7ff fc29 	bl	80097d8 <_vfiprintf_r>
 8009f86:	b002      	add	sp, #8
 8009f88:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f8c:	b003      	add	sp, #12
 8009f8e:	4770      	bx	lr
 8009f90:	20000010 	.word	0x20000010

08009f94 <_fstat_r>:
 8009f94:	b538      	push	{r3, r4, r5, lr}
 8009f96:	4d07      	ldr	r5, [pc, #28]	; (8009fb4 <_fstat_r+0x20>)
 8009f98:	2300      	movs	r3, #0
 8009f9a:	4604      	mov	r4, r0
 8009f9c:	4608      	mov	r0, r1
 8009f9e:	4611      	mov	r1, r2
 8009fa0:	602b      	str	r3, [r5, #0]
 8009fa2:	f7f8 f9aa 	bl	80022fa <_fstat>
 8009fa6:	1c43      	adds	r3, r0, #1
 8009fa8:	d102      	bne.n	8009fb0 <_fstat_r+0x1c>
 8009faa:	682b      	ldr	r3, [r5, #0]
 8009fac:	b103      	cbz	r3, 8009fb0 <_fstat_r+0x1c>
 8009fae:	6023      	str	r3, [r4, #0]
 8009fb0:	bd38      	pop	{r3, r4, r5, pc}
 8009fb2:	bf00      	nop
 8009fb4:	20000934 	.word	0x20000934

08009fb8 <_isatty_r>:
 8009fb8:	b538      	push	{r3, r4, r5, lr}
 8009fba:	4d06      	ldr	r5, [pc, #24]	; (8009fd4 <_isatty_r+0x1c>)
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	4604      	mov	r4, r0
 8009fc0:	4608      	mov	r0, r1
 8009fc2:	602b      	str	r3, [r5, #0]
 8009fc4:	f7f8 f9a9 	bl	800231a <_isatty>
 8009fc8:	1c43      	adds	r3, r0, #1
 8009fca:	d102      	bne.n	8009fd2 <_isatty_r+0x1a>
 8009fcc:	682b      	ldr	r3, [r5, #0]
 8009fce:	b103      	cbz	r3, 8009fd2 <_isatty_r+0x1a>
 8009fd0:	6023      	str	r3, [r4, #0]
 8009fd2:	bd38      	pop	{r3, r4, r5, pc}
 8009fd4:	20000934 	.word	0x20000934

08009fd8 <_lseek_r>:
 8009fd8:	b538      	push	{r3, r4, r5, lr}
 8009fda:	4d07      	ldr	r5, [pc, #28]	; (8009ff8 <_lseek_r+0x20>)
 8009fdc:	4604      	mov	r4, r0
 8009fde:	4608      	mov	r0, r1
 8009fe0:	4611      	mov	r1, r2
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	602a      	str	r2, [r5, #0]
 8009fe6:	461a      	mov	r2, r3
 8009fe8:	f7f8 f9a2 	bl	8002330 <_lseek>
 8009fec:	1c43      	adds	r3, r0, #1
 8009fee:	d102      	bne.n	8009ff6 <_lseek_r+0x1e>
 8009ff0:	682b      	ldr	r3, [r5, #0]
 8009ff2:	b103      	cbz	r3, 8009ff6 <_lseek_r+0x1e>
 8009ff4:	6023      	str	r3, [r4, #0]
 8009ff6:	bd38      	pop	{r3, r4, r5, pc}
 8009ff8:	20000934 	.word	0x20000934

08009ffc <malloc>:
 8009ffc:	4b02      	ldr	r3, [pc, #8]	; (800a008 <malloc+0xc>)
 8009ffe:	4601      	mov	r1, r0
 800a000:	6818      	ldr	r0, [r3, #0]
 800a002:	f7ff ba09 	b.w	8009418 <_malloc_r>
 800a006:	bf00      	nop
 800a008:	20000010 	.word	0x20000010

0800a00c <memmove>:
 800a00c:	4288      	cmp	r0, r1
 800a00e:	b510      	push	{r4, lr}
 800a010:	eb01 0402 	add.w	r4, r1, r2
 800a014:	d902      	bls.n	800a01c <memmove+0x10>
 800a016:	4284      	cmp	r4, r0
 800a018:	4623      	mov	r3, r4
 800a01a:	d807      	bhi.n	800a02c <memmove+0x20>
 800a01c:	1e43      	subs	r3, r0, #1
 800a01e:	42a1      	cmp	r1, r4
 800a020:	d008      	beq.n	800a034 <memmove+0x28>
 800a022:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a026:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a02a:	e7f8      	b.n	800a01e <memmove+0x12>
 800a02c:	4402      	add	r2, r0
 800a02e:	4601      	mov	r1, r0
 800a030:	428a      	cmp	r2, r1
 800a032:	d100      	bne.n	800a036 <memmove+0x2a>
 800a034:	bd10      	pop	{r4, pc}
 800a036:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a03a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a03e:	e7f7      	b.n	800a030 <memmove+0x24>

0800a040 <__malloc_lock>:
 800a040:	4801      	ldr	r0, [pc, #4]	; (800a048 <__malloc_lock+0x8>)
 800a042:	f7fe bc54 	b.w	80088ee <__retarget_lock_acquire_recursive>
 800a046:	bf00      	nop
 800a048:	2000092c 	.word	0x2000092c

0800a04c <__malloc_unlock>:
 800a04c:	4801      	ldr	r0, [pc, #4]	; (800a054 <__malloc_unlock+0x8>)
 800a04e:	f7fe bc4f 	b.w	80088f0 <__retarget_lock_release_recursive>
 800a052:	bf00      	nop
 800a054:	2000092c 	.word	0x2000092c

0800a058 <_realloc_r>:
 800a058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a05a:	4607      	mov	r7, r0
 800a05c:	4614      	mov	r4, r2
 800a05e:	460e      	mov	r6, r1
 800a060:	b921      	cbnz	r1, 800a06c <_realloc_r+0x14>
 800a062:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a066:	4611      	mov	r1, r2
 800a068:	f7ff b9d6 	b.w	8009418 <_malloc_r>
 800a06c:	b922      	cbnz	r2, 800a078 <_realloc_r+0x20>
 800a06e:	f7ff f983 	bl	8009378 <_free_r>
 800a072:	4625      	mov	r5, r4
 800a074:	4628      	mov	r0, r5
 800a076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a078:	f000 f82d 	bl	800a0d6 <_malloc_usable_size_r>
 800a07c:	42a0      	cmp	r0, r4
 800a07e:	d20f      	bcs.n	800a0a0 <_realloc_r+0x48>
 800a080:	4621      	mov	r1, r4
 800a082:	4638      	mov	r0, r7
 800a084:	f7ff f9c8 	bl	8009418 <_malloc_r>
 800a088:	4605      	mov	r5, r0
 800a08a:	2800      	cmp	r0, #0
 800a08c:	d0f2      	beq.n	800a074 <_realloc_r+0x1c>
 800a08e:	4631      	mov	r1, r6
 800a090:	4622      	mov	r2, r4
 800a092:	f7fc fe5f 	bl	8006d54 <memcpy>
 800a096:	4631      	mov	r1, r6
 800a098:	4638      	mov	r0, r7
 800a09a:	f7ff f96d 	bl	8009378 <_free_r>
 800a09e:	e7e9      	b.n	800a074 <_realloc_r+0x1c>
 800a0a0:	4635      	mov	r5, r6
 800a0a2:	e7e7      	b.n	800a074 <_realloc_r+0x1c>

0800a0a4 <_read_r>:
 800a0a4:	b538      	push	{r3, r4, r5, lr}
 800a0a6:	4d07      	ldr	r5, [pc, #28]	; (800a0c4 <_read_r+0x20>)
 800a0a8:	4604      	mov	r4, r0
 800a0aa:	4608      	mov	r0, r1
 800a0ac:	4611      	mov	r1, r2
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	602a      	str	r2, [r5, #0]
 800a0b2:	461a      	mov	r2, r3
 800a0b4:	f7f8 f8dc 	bl	8002270 <_read>
 800a0b8:	1c43      	adds	r3, r0, #1
 800a0ba:	d102      	bne.n	800a0c2 <_read_r+0x1e>
 800a0bc:	682b      	ldr	r3, [r5, #0]
 800a0be:	b103      	cbz	r3, 800a0c2 <_read_r+0x1e>
 800a0c0:	6023      	str	r3, [r4, #0]
 800a0c2:	bd38      	pop	{r3, r4, r5, pc}
 800a0c4:	20000934 	.word	0x20000934

0800a0c8 <abort>:
 800a0c8:	b508      	push	{r3, lr}
 800a0ca:	2006      	movs	r0, #6
 800a0cc:	f000 f834 	bl	800a138 <raise>
 800a0d0:	2001      	movs	r0, #1
 800a0d2:	f7f8 f8c3 	bl	800225c <_exit>

0800a0d6 <_malloc_usable_size_r>:
 800a0d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0da:	1f18      	subs	r0, r3, #4
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	bfbc      	itt	lt
 800a0e0:	580b      	ldrlt	r3, [r1, r0]
 800a0e2:	18c0      	addlt	r0, r0, r3
 800a0e4:	4770      	bx	lr

0800a0e6 <_raise_r>:
 800a0e6:	291f      	cmp	r1, #31
 800a0e8:	b538      	push	{r3, r4, r5, lr}
 800a0ea:	4604      	mov	r4, r0
 800a0ec:	460d      	mov	r5, r1
 800a0ee:	d904      	bls.n	800a0fa <_raise_r+0x14>
 800a0f0:	2316      	movs	r3, #22
 800a0f2:	6003      	str	r3, [r0, #0]
 800a0f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a0f8:	bd38      	pop	{r3, r4, r5, pc}
 800a0fa:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a0fc:	b112      	cbz	r2, 800a104 <_raise_r+0x1e>
 800a0fe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a102:	b94b      	cbnz	r3, 800a118 <_raise_r+0x32>
 800a104:	4620      	mov	r0, r4
 800a106:	f000 f831 	bl	800a16c <_getpid_r>
 800a10a:	462a      	mov	r2, r5
 800a10c:	4601      	mov	r1, r0
 800a10e:	4620      	mov	r0, r4
 800a110:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a114:	f000 b818 	b.w	800a148 <_kill_r>
 800a118:	2b01      	cmp	r3, #1
 800a11a:	d00a      	beq.n	800a132 <_raise_r+0x4c>
 800a11c:	1c59      	adds	r1, r3, #1
 800a11e:	d103      	bne.n	800a128 <_raise_r+0x42>
 800a120:	2316      	movs	r3, #22
 800a122:	6003      	str	r3, [r0, #0]
 800a124:	2001      	movs	r0, #1
 800a126:	e7e7      	b.n	800a0f8 <_raise_r+0x12>
 800a128:	2400      	movs	r4, #0
 800a12a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a12e:	4628      	mov	r0, r5
 800a130:	4798      	blx	r3
 800a132:	2000      	movs	r0, #0
 800a134:	e7e0      	b.n	800a0f8 <_raise_r+0x12>
	...

0800a138 <raise>:
 800a138:	4b02      	ldr	r3, [pc, #8]	; (800a144 <raise+0xc>)
 800a13a:	4601      	mov	r1, r0
 800a13c:	6818      	ldr	r0, [r3, #0]
 800a13e:	f7ff bfd2 	b.w	800a0e6 <_raise_r>
 800a142:	bf00      	nop
 800a144:	20000010 	.word	0x20000010

0800a148 <_kill_r>:
 800a148:	b538      	push	{r3, r4, r5, lr}
 800a14a:	4d07      	ldr	r5, [pc, #28]	; (800a168 <_kill_r+0x20>)
 800a14c:	2300      	movs	r3, #0
 800a14e:	4604      	mov	r4, r0
 800a150:	4608      	mov	r0, r1
 800a152:	4611      	mov	r1, r2
 800a154:	602b      	str	r3, [r5, #0]
 800a156:	f7f8 f871 	bl	800223c <_kill>
 800a15a:	1c43      	adds	r3, r0, #1
 800a15c:	d102      	bne.n	800a164 <_kill_r+0x1c>
 800a15e:	682b      	ldr	r3, [r5, #0]
 800a160:	b103      	cbz	r3, 800a164 <_kill_r+0x1c>
 800a162:	6023      	str	r3, [r4, #0]
 800a164:	bd38      	pop	{r3, r4, r5, pc}
 800a166:	bf00      	nop
 800a168:	20000934 	.word	0x20000934

0800a16c <_getpid_r>:
 800a16c:	f7f8 b85e 	b.w	800222c <_getpid>

0800a170 <_init>:
 800a170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a172:	bf00      	nop
 800a174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a176:	bc08      	pop	{r3}
 800a178:	469e      	mov	lr, r3
 800a17a:	4770      	bx	lr

0800a17c <_fini>:
 800a17c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a17e:	bf00      	nop
 800a180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a182:	bc08      	pop	{r3}
 800a184:	469e      	mov	lr, r3
 800a186:	4770      	bx	lr
