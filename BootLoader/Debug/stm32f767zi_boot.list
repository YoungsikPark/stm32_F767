
stm32f767zi_boot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009980  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000844  08009b80  08009b80  00019b80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3c4  0800a3c4  00020370  2**0
                  CONTENTS
  4 .ARM          00000008  0800a3c4  0800a3c4  0001a3c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a3cc  0800a3cc  00020370  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3cc  0800a3cc  0001a3cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a3d0  0800a3d0  0001a3d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000370  20000000  0800a3d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015dc  20000370  0800a744  00020370  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000194c  0800a744  0002194c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020370  2**0
                  CONTENTS, READONLY
 12 .debug_info   000292ef  00000000  00000000  0002039e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000068ca  00000000  00000000  0004968d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001210  00000000  00000000  0004ff58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ae0  00000000  00000000  00051168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dbef  00000000  00000000  00052c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000216eb  00000000  00000000  00080837  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001013a8  00000000  00000000  000a1f22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a32ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004298  00000000  00000000  001a3320  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0000dfaf  00000000  00000000  001a75b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000370 	.word	0x20000370
 800021c:	00000000 	.word	0x00000000
 8000220:	08009b68 	.word	0x08009b68

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000374 	.word	0x20000374
 800023c:	08009b68 	.word	0x08009b68

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_drsub>:
 8000310:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000314:	e002      	b.n	800031c <__adddf3>
 8000316:	bf00      	nop

08000318 <__aeabi_dsub>:
 8000318:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800031c <__adddf3>:
 800031c:	b530      	push	{r4, r5, lr}
 800031e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000322:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000326:	ea94 0f05 	teq	r4, r5
 800032a:	bf08      	it	eq
 800032c:	ea90 0f02 	teqeq	r0, r2
 8000330:	bf1f      	itttt	ne
 8000332:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000336:	ea55 0c02 	orrsne.w	ip, r5, r2
 800033a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800033e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000342:	f000 80e2 	beq.w	800050a <__adddf3+0x1ee>
 8000346:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800034a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800034e:	bfb8      	it	lt
 8000350:	426d      	neglt	r5, r5
 8000352:	dd0c      	ble.n	800036e <__adddf3+0x52>
 8000354:	442c      	add	r4, r5
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	ea82 0000 	eor.w	r0, r2, r0
 8000362:	ea83 0101 	eor.w	r1, r3, r1
 8000366:	ea80 0202 	eor.w	r2, r0, r2
 800036a:	ea81 0303 	eor.w	r3, r1, r3
 800036e:	2d36      	cmp	r5, #54	; 0x36
 8000370:	bf88      	it	hi
 8000372:	bd30      	pophi	{r4, r5, pc}
 8000374:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000378:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800037c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000380:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000384:	d002      	beq.n	800038c <__adddf3+0x70>
 8000386:	4240      	negs	r0, r0
 8000388:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800038c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000390:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000394:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000398:	d002      	beq.n	80003a0 <__adddf3+0x84>
 800039a:	4252      	negs	r2, r2
 800039c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003a0:	ea94 0f05 	teq	r4, r5
 80003a4:	f000 80a7 	beq.w	80004f6 <__adddf3+0x1da>
 80003a8:	f1a4 0401 	sub.w	r4, r4, #1
 80003ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80003b0:	db0d      	blt.n	80003ce <__adddf3+0xb2>
 80003b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003b6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ba:	1880      	adds	r0, r0, r2
 80003bc:	f141 0100 	adc.w	r1, r1, #0
 80003c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003c4:	1880      	adds	r0, r0, r2
 80003c6:	fa43 f305 	asr.w	r3, r3, r5
 80003ca:	4159      	adcs	r1, r3
 80003cc:	e00e      	b.n	80003ec <__adddf3+0xd0>
 80003ce:	f1a5 0520 	sub.w	r5, r5, #32
 80003d2:	f10e 0e20 	add.w	lr, lr, #32
 80003d6:	2a01      	cmp	r2, #1
 80003d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003dc:	bf28      	it	cs
 80003de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003e2:	fa43 f305 	asr.w	r3, r3, r5
 80003e6:	18c0      	adds	r0, r0, r3
 80003e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003f0:	d507      	bpl.n	8000402 <__adddf3+0xe6>
 80003f2:	f04f 0e00 	mov.w	lr, #0
 80003f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000402:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000406:	d31b      	bcc.n	8000440 <__adddf3+0x124>
 8000408:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800040c:	d30c      	bcc.n	8000428 <__adddf3+0x10c>
 800040e:	0849      	lsrs	r1, r1, #1
 8000410:	ea5f 0030 	movs.w	r0, r0, rrx
 8000414:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000418:	f104 0401 	add.w	r4, r4, #1
 800041c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000420:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000424:	f080 809a 	bcs.w	800055c <__adddf3+0x240>
 8000428:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800042c:	bf08      	it	eq
 800042e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000432:	f150 0000 	adcs.w	r0, r0, #0
 8000436:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800043a:	ea41 0105 	orr.w	r1, r1, r5
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000444:	4140      	adcs	r0, r0
 8000446:	eb41 0101 	adc.w	r1, r1, r1
 800044a:	3c01      	subs	r4, #1
 800044c:	bf28      	it	cs
 800044e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000452:	d2e9      	bcs.n	8000428 <__adddf3+0x10c>
 8000454:	f091 0f00 	teq	r1, #0
 8000458:	bf04      	itt	eq
 800045a:	4601      	moveq	r1, r0
 800045c:	2000      	moveq	r0, #0
 800045e:	fab1 f381 	clz	r3, r1
 8000462:	bf08      	it	eq
 8000464:	3320      	addeq	r3, #32
 8000466:	f1a3 030b 	sub.w	r3, r3, #11
 800046a:	f1b3 0220 	subs.w	r2, r3, #32
 800046e:	da0c      	bge.n	800048a <__adddf3+0x16e>
 8000470:	320c      	adds	r2, #12
 8000472:	dd08      	ble.n	8000486 <__adddf3+0x16a>
 8000474:	f102 0c14 	add.w	ip, r2, #20
 8000478:	f1c2 020c 	rsb	r2, r2, #12
 800047c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000480:	fa21 f102 	lsr.w	r1, r1, r2
 8000484:	e00c      	b.n	80004a0 <__adddf3+0x184>
 8000486:	f102 0214 	add.w	r2, r2, #20
 800048a:	bfd8      	it	le
 800048c:	f1c2 0c20 	rsble	ip, r2, #32
 8000490:	fa01 f102 	lsl.w	r1, r1, r2
 8000494:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000498:	bfdc      	itt	le
 800049a:	ea41 010c 	orrle.w	r1, r1, ip
 800049e:	4090      	lslle	r0, r2
 80004a0:	1ae4      	subs	r4, r4, r3
 80004a2:	bfa2      	ittt	ge
 80004a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004a8:	4329      	orrge	r1, r5
 80004aa:	bd30      	popge	{r4, r5, pc}
 80004ac:	ea6f 0404 	mvn.w	r4, r4
 80004b0:	3c1f      	subs	r4, #31
 80004b2:	da1c      	bge.n	80004ee <__adddf3+0x1d2>
 80004b4:	340c      	adds	r4, #12
 80004b6:	dc0e      	bgt.n	80004d6 <__adddf3+0x1ba>
 80004b8:	f104 0414 	add.w	r4, r4, #20
 80004bc:	f1c4 0220 	rsb	r2, r4, #32
 80004c0:	fa20 f004 	lsr.w	r0, r0, r4
 80004c4:	fa01 f302 	lsl.w	r3, r1, r2
 80004c8:	ea40 0003 	orr.w	r0, r0, r3
 80004cc:	fa21 f304 	lsr.w	r3, r1, r4
 80004d0:	ea45 0103 	orr.w	r1, r5, r3
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f1c4 040c 	rsb	r4, r4, #12
 80004da:	f1c4 0220 	rsb	r2, r4, #32
 80004de:	fa20 f002 	lsr.w	r0, r0, r2
 80004e2:	fa01 f304 	lsl.w	r3, r1, r4
 80004e6:	ea40 0003 	orr.w	r0, r0, r3
 80004ea:	4629      	mov	r1, r5
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	fa21 f004 	lsr.w	r0, r1, r4
 80004f2:	4629      	mov	r1, r5
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f094 0f00 	teq	r4, #0
 80004fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004fe:	bf06      	itte	eq
 8000500:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000504:	3401      	addeq	r4, #1
 8000506:	3d01      	subne	r5, #1
 8000508:	e74e      	b.n	80003a8 <__adddf3+0x8c>
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf18      	it	ne
 8000510:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000514:	d029      	beq.n	800056a <__adddf3+0x24e>
 8000516:	ea94 0f05 	teq	r4, r5
 800051a:	bf08      	it	eq
 800051c:	ea90 0f02 	teqeq	r0, r2
 8000520:	d005      	beq.n	800052e <__adddf3+0x212>
 8000522:	ea54 0c00 	orrs.w	ip, r4, r0
 8000526:	bf04      	itt	eq
 8000528:	4619      	moveq	r1, r3
 800052a:	4610      	moveq	r0, r2
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	ea91 0f03 	teq	r1, r3
 8000532:	bf1e      	ittt	ne
 8000534:	2100      	movne	r1, #0
 8000536:	2000      	movne	r0, #0
 8000538:	bd30      	popne	{r4, r5, pc}
 800053a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800053e:	d105      	bne.n	800054c <__adddf3+0x230>
 8000540:	0040      	lsls	r0, r0, #1
 8000542:	4149      	adcs	r1, r1
 8000544:	bf28      	it	cs
 8000546:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000550:	bf3c      	itt	cc
 8000552:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000556:	bd30      	popcc	{r4, r5, pc}
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800055c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000560:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000564:	f04f 0000 	mov.w	r0, #0
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf1a      	itte	ne
 8000570:	4619      	movne	r1, r3
 8000572:	4610      	movne	r0, r2
 8000574:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000578:	bf1c      	itt	ne
 800057a:	460b      	movne	r3, r1
 800057c:	4602      	movne	r2, r0
 800057e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000582:	bf06      	itte	eq
 8000584:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000588:	ea91 0f03 	teqeq	r1, r3
 800058c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	bf00      	nop

08000594 <__aeabi_ui2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f04f 0500 	mov.w	r5, #0
 80005ac:	f04f 0100 	mov.w	r1, #0
 80005b0:	e750      	b.n	8000454 <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_i2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005cc:	bf48      	it	mi
 80005ce:	4240      	negmi	r0, r0
 80005d0:	f04f 0100 	mov.w	r1, #0
 80005d4:	e73e      	b.n	8000454 <__adddf3+0x138>
 80005d6:	bf00      	nop

080005d8 <__aeabi_f2d>:
 80005d8:	0042      	lsls	r2, r0, #1
 80005da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005de:	ea4f 0131 	mov.w	r1, r1, rrx
 80005e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005e6:	bf1f      	itttt	ne
 80005e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005f4:	4770      	bxne	lr
 80005f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005fa:	bf08      	it	eq
 80005fc:	4770      	bxeq	lr
 80005fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000602:	bf04      	itt	eq
 8000604:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000608:	4770      	bxeq	lr
 800060a:	b530      	push	{r4, r5, lr}
 800060c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000610:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000614:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000618:	e71c      	b.n	8000454 <__adddf3+0x138>
 800061a:	bf00      	nop

0800061c <__aeabi_ul2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f04f 0500 	mov.w	r5, #0
 800062a:	e00a      	b.n	8000642 <__aeabi_l2d+0x16>

0800062c <__aeabi_l2d>:
 800062c:	ea50 0201 	orrs.w	r2, r0, r1
 8000630:	bf08      	it	eq
 8000632:	4770      	bxeq	lr
 8000634:	b530      	push	{r4, r5, lr}
 8000636:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800063a:	d502      	bpl.n	8000642 <__aeabi_l2d+0x16>
 800063c:	4240      	negs	r0, r0
 800063e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000642:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000646:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800064e:	f43f aed8 	beq.w	8000402 <__adddf3+0xe6>
 8000652:	f04f 0203 	mov.w	r2, #3
 8000656:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800065a:	bf18      	it	ne
 800065c:	3203      	addne	r2, #3
 800065e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000662:	bf18      	it	ne
 8000664:	3203      	addne	r2, #3
 8000666:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800066a:	f1c2 0320 	rsb	r3, r2, #32
 800066e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000672:	fa20 f002 	lsr.w	r0, r0, r2
 8000676:	fa01 fe03 	lsl.w	lr, r1, r3
 800067a:	ea40 000e 	orr.w	r0, r0, lr
 800067e:	fa21 f102 	lsr.w	r1, r1, r2
 8000682:	4414      	add	r4, r2
 8000684:	e6bd      	b.n	8000402 <__adddf3+0xe6>
 8000686:	bf00      	nop

08000688 <__aeabi_uldivmod>:
 8000688:	b953      	cbnz	r3, 80006a0 <__aeabi_uldivmod+0x18>
 800068a:	b94a      	cbnz	r2, 80006a0 <__aeabi_uldivmod+0x18>
 800068c:	2900      	cmp	r1, #0
 800068e:	bf08      	it	eq
 8000690:	2800      	cmpeq	r0, #0
 8000692:	bf1c      	itt	ne
 8000694:	f04f 31ff 	movne.w	r1, #4294967295
 8000698:	f04f 30ff 	movne.w	r0, #4294967295
 800069c:	f000 b9a6 	b.w	80009ec <__aeabi_idiv0>
 80006a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006a8:	f000 f83e 	bl	8000728 <__udivmoddi4>
 80006ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006b4:	b004      	add	sp, #16
 80006b6:	4770      	bx	lr

080006b8 <__aeabi_d2lz>:
 80006b8:	b508      	push	{r3, lr}
 80006ba:	4602      	mov	r2, r0
 80006bc:	460b      	mov	r3, r1
 80006be:	ec43 2b17 	vmov	d7, r2, r3
 80006c2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006ca:	d403      	bmi.n	80006d4 <__aeabi_d2lz+0x1c>
 80006cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006d0:	f000 b80a 	b.w	80006e8 <__aeabi_d2ulz>
 80006d4:	eeb1 7b47 	vneg.f64	d7, d7
 80006d8:	ec51 0b17 	vmov	r0, r1, d7
 80006dc:	f000 f804 	bl	80006e8 <__aeabi_d2ulz>
 80006e0:	4240      	negs	r0, r0
 80006e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e6:	bd08      	pop	{r3, pc}

080006e8 <__aeabi_d2ulz>:
 80006e8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000718 <__aeabi_d2ulz+0x30>
 80006ec:	ec41 0b17 	vmov	d7, r0, r1
 80006f0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000720 <__aeabi_d2ulz+0x38>
 80006f4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006f8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006fc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000700:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000704:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000708:	ee16 1a10 	vmov	r1, s12
 800070c:	ee17 0a90 	vmov	r0, s15
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	f3af 8000 	nop.w
 8000718:	00000000 	.word	0x00000000
 800071c:	3df00000 	.word	0x3df00000
 8000720:	00000000 	.word	0x00000000
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800072c:	9d08      	ldr	r5, [sp, #32]
 800072e:	4604      	mov	r4, r0
 8000730:	468c      	mov	ip, r1
 8000732:	2b00      	cmp	r3, #0
 8000734:	f040 8083 	bne.w	800083e <__udivmoddi4+0x116>
 8000738:	428a      	cmp	r2, r1
 800073a:	4617      	mov	r7, r2
 800073c:	d947      	bls.n	80007ce <__udivmoddi4+0xa6>
 800073e:	fab2 f282 	clz	r2, r2
 8000742:	b142      	cbz	r2, 8000756 <__udivmoddi4+0x2e>
 8000744:	f1c2 0020 	rsb	r0, r2, #32
 8000748:	fa24 f000 	lsr.w	r0, r4, r0
 800074c:	4091      	lsls	r1, r2
 800074e:	4097      	lsls	r7, r2
 8000750:	ea40 0c01 	orr.w	ip, r0, r1
 8000754:	4094      	lsls	r4, r2
 8000756:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800075a:	0c23      	lsrs	r3, r4, #16
 800075c:	fbbc f6f8 	udiv	r6, ip, r8
 8000760:	fa1f fe87 	uxth.w	lr, r7
 8000764:	fb08 c116 	mls	r1, r8, r6, ip
 8000768:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800076c:	fb06 f10e 	mul.w	r1, r6, lr
 8000770:	4299      	cmp	r1, r3
 8000772:	d909      	bls.n	8000788 <__udivmoddi4+0x60>
 8000774:	18fb      	adds	r3, r7, r3
 8000776:	f106 30ff 	add.w	r0, r6, #4294967295
 800077a:	f080 8119 	bcs.w	80009b0 <__udivmoddi4+0x288>
 800077e:	4299      	cmp	r1, r3
 8000780:	f240 8116 	bls.w	80009b0 <__udivmoddi4+0x288>
 8000784:	3e02      	subs	r6, #2
 8000786:	443b      	add	r3, r7
 8000788:	1a5b      	subs	r3, r3, r1
 800078a:	b2a4      	uxth	r4, r4
 800078c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000790:	fb08 3310 	mls	r3, r8, r0, r3
 8000794:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000798:	fb00 fe0e 	mul.w	lr, r0, lr
 800079c:	45a6      	cmp	lr, r4
 800079e:	d909      	bls.n	80007b4 <__udivmoddi4+0x8c>
 80007a0:	193c      	adds	r4, r7, r4
 80007a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80007a6:	f080 8105 	bcs.w	80009b4 <__udivmoddi4+0x28c>
 80007aa:	45a6      	cmp	lr, r4
 80007ac:	f240 8102 	bls.w	80009b4 <__udivmoddi4+0x28c>
 80007b0:	3802      	subs	r0, #2
 80007b2:	443c      	add	r4, r7
 80007b4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007b8:	eba4 040e 	sub.w	r4, r4, lr
 80007bc:	2600      	movs	r6, #0
 80007be:	b11d      	cbz	r5, 80007c8 <__udivmoddi4+0xa0>
 80007c0:	40d4      	lsrs	r4, r2
 80007c2:	2300      	movs	r3, #0
 80007c4:	e9c5 4300 	strd	r4, r3, [r5]
 80007c8:	4631      	mov	r1, r6
 80007ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ce:	b902      	cbnz	r2, 80007d2 <__udivmoddi4+0xaa>
 80007d0:	deff      	udf	#255	; 0xff
 80007d2:	fab2 f282 	clz	r2, r2
 80007d6:	2a00      	cmp	r2, #0
 80007d8:	d150      	bne.n	800087c <__udivmoddi4+0x154>
 80007da:	1bcb      	subs	r3, r1, r7
 80007dc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007e0:	fa1f f887 	uxth.w	r8, r7
 80007e4:	2601      	movs	r6, #1
 80007e6:	fbb3 fcfe 	udiv	ip, r3, lr
 80007ea:	0c21      	lsrs	r1, r4, #16
 80007ec:	fb0e 331c 	mls	r3, lr, ip, r3
 80007f0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007f4:	fb08 f30c 	mul.w	r3, r8, ip
 80007f8:	428b      	cmp	r3, r1
 80007fa:	d907      	bls.n	800080c <__udivmoddi4+0xe4>
 80007fc:	1879      	adds	r1, r7, r1
 80007fe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000802:	d202      	bcs.n	800080a <__udivmoddi4+0xe2>
 8000804:	428b      	cmp	r3, r1
 8000806:	f200 80e9 	bhi.w	80009dc <__udivmoddi4+0x2b4>
 800080a:	4684      	mov	ip, r0
 800080c:	1ac9      	subs	r1, r1, r3
 800080e:	b2a3      	uxth	r3, r4
 8000810:	fbb1 f0fe 	udiv	r0, r1, lr
 8000814:	fb0e 1110 	mls	r1, lr, r0, r1
 8000818:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800081c:	fb08 f800 	mul.w	r8, r8, r0
 8000820:	45a0      	cmp	r8, r4
 8000822:	d907      	bls.n	8000834 <__udivmoddi4+0x10c>
 8000824:	193c      	adds	r4, r7, r4
 8000826:	f100 33ff 	add.w	r3, r0, #4294967295
 800082a:	d202      	bcs.n	8000832 <__udivmoddi4+0x10a>
 800082c:	45a0      	cmp	r8, r4
 800082e:	f200 80d9 	bhi.w	80009e4 <__udivmoddi4+0x2bc>
 8000832:	4618      	mov	r0, r3
 8000834:	eba4 0408 	sub.w	r4, r4, r8
 8000838:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800083c:	e7bf      	b.n	80007be <__udivmoddi4+0x96>
 800083e:	428b      	cmp	r3, r1
 8000840:	d909      	bls.n	8000856 <__udivmoddi4+0x12e>
 8000842:	2d00      	cmp	r5, #0
 8000844:	f000 80b1 	beq.w	80009aa <__udivmoddi4+0x282>
 8000848:	2600      	movs	r6, #0
 800084a:	e9c5 0100 	strd	r0, r1, [r5]
 800084e:	4630      	mov	r0, r6
 8000850:	4631      	mov	r1, r6
 8000852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000856:	fab3 f683 	clz	r6, r3
 800085a:	2e00      	cmp	r6, #0
 800085c:	d14a      	bne.n	80008f4 <__udivmoddi4+0x1cc>
 800085e:	428b      	cmp	r3, r1
 8000860:	d302      	bcc.n	8000868 <__udivmoddi4+0x140>
 8000862:	4282      	cmp	r2, r0
 8000864:	f200 80b8 	bhi.w	80009d8 <__udivmoddi4+0x2b0>
 8000868:	1a84      	subs	r4, r0, r2
 800086a:	eb61 0103 	sbc.w	r1, r1, r3
 800086e:	2001      	movs	r0, #1
 8000870:	468c      	mov	ip, r1
 8000872:	2d00      	cmp	r5, #0
 8000874:	d0a8      	beq.n	80007c8 <__udivmoddi4+0xa0>
 8000876:	e9c5 4c00 	strd	r4, ip, [r5]
 800087a:	e7a5      	b.n	80007c8 <__udivmoddi4+0xa0>
 800087c:	f1c2 0320 	rsb	r3, r2, #32
 8000880:	fa20 f603 	lsr.w	r6, r0, r3
 8000884:	4097      	lsls	r7, r2
 8000886:	fa01 f002 	lsl.w	r0, r1, r2
 800088a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800088e:	40d9      	lsrs	r1, r3
 8000890:	4330      	orrs	r0, r6
 8000892:	0c03      	lsrs	r3, r0, #16
 8000894:	fbb1 f6fe 	udiv	r6, r1, lr
 8000898:	fa1f f887 	uxth.w	r8, r7
 800089c:	fb0e 1116 	mls	r1, lr, r6, r1
 80008a0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008a4:	fb06 f108 	mul.w	r1, r6, r8
 80008a8:	4299      	cmp	r1, r3
 80008aa:	fa04 f402 	lsl.w	r4, r4, r2
 80008ae:	d909      	bls.n	80008c4 <__udivmoddi4+0x19c>
 80008b0:	18fb      	adds	r3, r7, r3
 80008b2:	f106 3cff 	add.w	ip, r6, #4294967295
 80008b6:	f080 808d 	bcs.w	80009d4 <__udivmoddi4+0x2ac>
 80008ba:	4299      	cmp	r1, r3
 80008bc:	f240 808a 	bls.w	80009d4 <__udivmoddi4+0x2ac>
 80008c0:	3e02      	subs	r6, #2
 80008c2:	443b      	add	r3, r7
 80008c4:	1a5b      	subs	r3, r3, r1
 80008c6:	b281      	uxth	r1, r0
 80008c8:	fbb3 f0fe 	udiv	r0, r3, lr
 80008cc:	fb0e 3310 	mls	r3, lr, r0, r3
 80008d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008d4:	fb00 f308 	mul.w	r3, r0, r8
 80008d8:	428b      	cmp	r3, r1
 80008da:	d907      	bls.n	80008ec <__udivmoddi4+0x1c4>
 80008dc:	1879      	adds	r1, r7, r1
 80008de:	f100 3cff 	add.w	ip, r0, #4294967295
 80008e2:	d273      	bcs.n	80009cc <__udivmoddi4+0x2a4>
 80008e4:	428b      	cmp	r3, r1
 80008e6:	d971      	bls.n	80009cc <__udivmoddi4+0x2a4>
 80008e8:	3802      	subs	r0, #2
 80008ea:	4439      	add	r1, r7
 80008ec:	1acb      	subs	r3, r1, r3
 80008ee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80008f2:	e778      	b.n	80007e6 <__udivmoddi4+0xbe>
 80008f4:	f1c6 0c20 	rsb	ip, r6, #32
 80008f8:	fa03 f406 	lsl.w	r4, r3, r6
 80008fc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000900:	431c      	orrs	r4, r3
 8000902:	fa20 f70c 	lsr.w	r7, r0, ip
 8000906:	fa01 f306 	lsl.w	r3, r1, r6
 800090a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800090e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000912:	431f      	orrs	r7, r3
 8000914:	0c3b      	lsrs	r3, r7, #16
 8000916:	fbb1 f9fe 	udiv	r9, r1, lr
 800091a:	fa1f f884 	uxth.w	r8, r4
 800091e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000922:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000926:	fb09 fa08 	mul.w	sl, r9, r8
 800092a:	458a      	cmp	sl, r1
 800092c:	fa02 f206 	lsl.w	r2, r2, r6
 8000930:	fa00 f306 	lsl.w	r3, r0, r6
 8000934:	d908      	bls.n	8000948 <__udivmoddi4+0x220>
 8000936:	1861      	adds	r1, r4, r1
 8000938:	f109 30ff 	add.w	r0, r9, #4294967295
 800093c:	d248      	bcs.n	80009d0 <__udivmoddi4+0x2a8>
 800093e:	458a      	cmp	sl, r1
 8000940:	d946      	bls.n	80009d0 <__udivmoddi4+0x2a8>
 8000942:	f1a9 0902 	sub.w	r9, r9, #2
 8000946:	4421      	add	r1, r4
 8000948:	eba1 010a 	sub.w	r1, r1, sl
 800094c:	b2bf      	uxth	r7, r7
 800094e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000952:	fb0e 1110 	mls	r1, lr, r0, r1
 8000956:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800095a:	fb00 f808 	mul.w	r8, r0, r8
 800095e:	45b8      	cmp	r8, r7
 8000960:	d907      	bls.n	8000972 <__udivmoddi4+0x24a>
 8000962:	19e7      	adds	r7, r4, r7
 8000964:	f100 31ff 	add.w	r1, r0, #4294967295
 8000968:	d22e      	bcs.n	80009c8 <__udivmoddi4+0x2a0>
 800096a:	45b8      	cmp	r8, r7
 800096c:	d92c      	bls.n	80009c8 <__udivmoddi4+0x2a0>
 800096e:	3802      	subs	r0, #2
 8000970:	4427      	add	r7, r4
 8000972:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000976:	eba7 0708 	sub.w	r7, r7, r8
 800097a:	fba0 8902 	umull	r8, r9, r0, r2
 800097e:	454f      	cmp	r7, r9
 8000980:	46c6      	mov	lr, r8
 8000982:	4649      	mov	r1, r9
 8000984:	d31a      	bcc.n	80009bc <__udivmoddi4+0x294>
 8000986:	d017      	beq.n	80009b8 <__udivmoddi4+0x290>
 8000988:	b15d      	cbz	r5, 80009a2 <__udivmoddi4+0x27a>
 800098a:	ebb3 020e 	subs.w	r2, r3, lr
 800098e:	eb67 0701 	sbc.w	r7, r7, r1
 8000992:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000996:	40f2      	lsrs	r2, r6
 8000998:	ea4c 0202 	orr.w	r2, ip, r2
 800099c:	40f7      	lsrs	r7, r6
 800099e:	e9c5 2700 	strd	r2, r7, [r5]
 80009a2:	2600      	movs	r6, #0
 80009a4:	4631      	mov	r1, r6
 80009a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009aa:	462e      	mov	r6, r5
 80009ac:	4628      	mov	r0, r5
 80009ae:	e70b      	b.n	80007c8 <__udivmoddi4+0xa0>
 80009b0:	4606      	mov	r6, r0
 80009b2:	e6e9      	b.n	8000788 <__udivmoddi4+0x60>
 80009b4:	4618      	mov	r0, r3
 80009b6:	e6fd      	b.n	80007b4 <__udivmoddi4+0x8c>
 80009b8:	4543      	cmp	r3, r8
 80009ba:	d2e5      	bcs.n	8000988 <__udivmoddi4+0x260>
 80009bc:	ebb8 0e02 	subs.w	lr, r8, r2
 80009c0:	eb69 0104 	sbc.w	r1, r9, r4
 80009c4:	3801      	subs	r0, #1
 80009c6:	e7df      	b.n	8000988 <__udivmoddi4+0x260>
 80009c8:	4608      	mov	r0, r1
 80009ca:	e7d2      	b.n	8000972 <__udivmoddi4+0x24a>
 80009cc:	4660      	mov	r0, ip
 80009ce:	e78d      	b.n	80008ec <__udivmoddi4+0x1c4>
 80009d0:	4681      	mov	r9, r0
 80009d2:	e7b9      	b.n	8000948 <__udivmoddi4+0x220>
 80009d4:	4666      	mov	r6, ip
 80009d6:	e775      	b.n	80008c4 <__udivmoddi4+0x19c>
 80009d8:	4630      	mov	r0, r6
 80009da:	e74a      	b.n	8000872 <__udivmoddi4+0x14a>
 80009dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80009e0:	4439      	add	r1, r7
 80009e2:	e713      	b.n	800080c <__udivmoddi4+0xe4>
 80009e4:	3802      	subs	r0, #2
 80009e6:	443c      	add	r4, r7
 80009e8:	e724      	b.n	8000834 <__udivmoddi4+0x10c>
 80009ea:	bf00      	nop

080009ec <__aeabi_idiv0>:
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009f0:	4b0a      	ldr	r3, [pc, #40]	; (8000a1c <HAL_MspInit+0x2c>)
{
 80009f2:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009f6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80009fa:	641a      	str	r2, [r3, #64]	; 0x40
 80009fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009fe:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000a02:	9200      	str	r2, [sp, #0]
 8000a04:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000a08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000a0c:	645a      	str	r2, [r3, #68]	; 0x44
 8000a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a14:	9301      	str	r3, [sp, #4]
 8000a16:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a18:	b002      	add	sp, #8
 8000a1a:	4770      	bx	lr
 8000a1c:	40023800 	.word	0x40023800

08000a20 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <NMI_Handler>

08000a22 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a22:	e7fe      	b.n	8000a22 <HardFault_Handler>

08000a24 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <MemManage_Handler>

08000a26 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a26:	e7fe      	b.n	8000a26 <BusFault_Handler>

08000a28 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <UsageFault_Handler>

08000a2a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a2a:	4770      	bx	lr

08000a2c <DebugMon_Handler>:
 8000a2c:	4770      	bx	lr

08000a2e <PendSV_Handler>:
 8000a2e:	4770      	bx	lr

08000a30 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a30:	f001 bb06 	b.w	8002040 <HAL_IncTick>

08000a34 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000a34:	4801      	ldr	r0, [pc, #4]	; (8000a3c <DMA1_Stream1_IRQHandler+0x8>)
 8000a36:	f001 bcf7 	b.w	8002428 <HAL_DMA_IRQHandler>
 8000a3a:	bf00      	nop
 8000a3c:	200009e8 	.word	0x200009e8

08000a40 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000a40:	4801      	ldr	r0, [pc, #4]	; (8000a48 <USART3_IRQHandler+0x8>)
 8000a42:	f003 bc9f 	b.w	8004384 <HAL_UART_IRQHandler>
 8000a46:	bf00      	nop
 8000a48:	20000964 	.word	0x20000964

08000a4c <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000a4c:	4801      	ldr	r0, [pc, #4]	; (8000a54 <OTG_FS_IRQHandler+0x8>)
 8000a4e:	f002 b97f 	b.w	8002d50 <HAL_PCD_IRQHandler>
 8000a52:	bf00      	nop
 8000a54:	20001538 	.word	0x20001538

08000a58 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8000a58:	2001      	movs	r0, #1
 8000a5a:	4770      	bx	lr

08000a5c <_kill>:

int _kill(int pid, int sig)
{
 8000a5c:	b508      	push	{r3, lr}
	errno = EINVAL;
 8000a5e:	f005 fe45 	bl	80066ec <__errno>
 8000a62:	2316      	movs	r3, #22
 8000a64:	6003      	str	r3, [r0, #0]
	return -1;
}
 8000a66:	f04f 30ff 	mov.w	r0, #4294967295
 8000a6a:	bd08      	pop	{r3, pc}

08000a6c <_exit>:

void _exit (int status)
{
 8000a6c:	b508      	push	{r3, lr}
	errno = EINVAL;
 8000a6e:	f005 fe3d 	bl	80066ec <__errno>
 8000a72:	2316      	movs	r3, #22
 8000a74:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8000a76:	e7fe      	b.n	8000a76 <_exit+0xa>

08000a78 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a78:	b570      	push	{r4, r5, r6, lr}
 8000a7a:	460e      	mov	r6, r1
 8000a7c:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a7e:	2500      	movs	r5, #0
 8000a80:	42a5      	cmp	r5, r4
 8000a82:	db01      	blt.n	8000a88 <_read+0x10>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8000a84:	4620      	mov	r0, r4
 8000a86:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8000a88:	f3af 8000 	nop.w
 8000a8c:	5570      	strb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a8e:	3501      	adds	r5, #1
 8000a90:	e7f6      	b.n	8000a80 <_read+0x8>

08000a92 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a92:	b570      	push	{r4, r5, r6, lr}
 8000a94:	460e      	mov	r6, r1
 8000a96:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a98:	2500      	movs	r5, #0
 8000a9a:	42a5      	cmp	r5, r4
 8000a9c:	db01      	blt.n	8000aa2 <_write+0x10>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8000a9e:	4620      	mov	r0, r4
 8000aa0:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8000aa2:	5d70      	ldrb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa4:	3501      	adds	r5, #1
		__io_putchar(*ptr++);
 8000aa6:	f000 fd6d 	bl	8001584 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aaa:	e7f6      	b.n	8000a9a <_write+0x8>

08000aac <_close>:

int _close(int file)
{
	return -1;
}
 8000aac:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab0:	4770      	bx	lr

08000ab2 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8000ab2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8000ab6:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8000ab8:	604b      	str	r3, [r1, #4]
}
 8000aba:	4770      	bx	lr

08000abc <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8000abc:	2001      	movs	r0, #1
 8000abe:	4770      	bx	lr

08000ac0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	4770      	bx	lr

08000ac4 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ac4:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <_sbrk+0x30>)
{
 8000ac6:	4602      	mov	r2, r0
  if (NULL == __sbrk_heap_end)
 8000ac8:	6819      	ldr	r1, [r3, #0]
{
 8000aca:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8000acc:	b909      	cbnz	r1, 8000ad2 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8000ace:	490a      	ldr	r1, [pc, #40]	; (8000af8 <_sbrk+0x34>)
 8000ad0:	6019      	str	r1, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ad2:	6818      	ldr	r0, [r3, #0]
 8000ad4:	4909      	ldr	r1, [pc, #36]	; (8000afc <_sbrk+0x38>)
 8000ad6:	4c0a      	ldr	r4, [pc, #40]	; (8000b00 <_sbrk+0x3c>)
 8000ad8:	4402      	add	r2, r0
 8000ada:	1b09      	subs	r1, r1, r4
 8000adc:	428a      	cmp	r2, r1
 8000ade:	d906      	bls.n	8000aee <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8000ae0:	f005 fe04 	bl	80066ec <__errno>
 8000ae4:	230c      	movs	r3, #12
 8000ae6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000ae8:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8000aec:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8000aee:	601a      	str	r2, [r3, #0]
  return (void *)prev_heap_end;
 8000af0:	e7fc      	b.n	8000aec <_sbrk+0x28>
 8000af2:	bf00      	nop
 8000af4:	2000038c 	.word	0x2000038c
 8000af8:	20001950 	.word	0x20001950
 8000afc:	20080000 	.word	0x20080000
 8000b00:	00000400 	.word	0x00000400

08000b04 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b04:	4a03      	ldr	r2, [pc, #12]	; (8000b14 <SystemInit+0x10>)
 8000b06:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000b0a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b0e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b12:	4770      	bx	lr
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <cdcInit>:
bool cdcInit(void)
{
  bool ret = true;


  is_init = true;
 8000b18:	2001      	movs	r0, #1
 8000b1a:	4b01      	ldr	r3, [pc, #4]	; (8000b20 <cdcInit+0x8>)
 8000b1c:	7018      	strb	r0, [r3, #0]

  return ret;
}
 8000b1e:	4770      	bx	lr
 8000b20:	20000390 	.word	0x20000390

08000b24 <cdcIsInit>:

bool cdcIsInit(void)
{
  return is_init;
}
 8000b24:	4b01      	ldr	r3, [pc, #4]	; (8000b2c <cdcIsInit+0x8>)
 8000b26:	7818      	ldrb	r0, [r3, #0]
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	20000390 	.word	0x20000390

08000b30 <cliToUpper>:
void cliToUpper(char *str)
{
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8000b30:	1e42      	subs	r2, r0, #1
 8000b32:	f100 010f 	add.w	r1, r0, #15
{
 8000b36:	b510      	push	{r4, lr}
  {
    str_ch = str[i];
 8000b38:	f812 3f01 	ldrb.w	r3, [r2, #1]!

    if (str_ch == 0)
 8000b3c:	b153      	cbz	r3, 8000b54 <cliToUpper+0x24>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 8000b3e:	f1a3 0461 	sub.w	r4, r3, #97	; 0x61
 8000b42:	2c19      	cmp	r4, #25
    {
      str_ch = str_ch - 'a' + 'A';
 8000b44:	bf9c      	itt	ls
 8000b46:	3b20      	subls	r3, #32
 8000b48:	b2db      	uxtbls	r3, r3
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8000b4a:	428a      	cmp	r2, r1
    }
    str[i] = str_ch;
 8000b4c:	7013      	strb	r3, [r2, #0]
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8000b4e:	d1f3      	bne.n	8000b38 <cliToUpper+0x8>
  }

  if (i == CLI_CMD_NAME_MAX)
  {
    str[i-1] = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	73c3      	strb	r3, [r0, #15]
  }
}
 8000b54:	bd10      	pop	{r4, pc}
	...

08000b58 <cliArgsGetStr>:
{
  char *ret = NULL;
  cli_t *p_cli = &cli_node;


  if (index >= p_cli->cmd_args.argc)
 8000b58:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <cliArgsGetStr+0x18>)
 8000b5a:	f8b3 242c 	ldrh.w	r2, [r3, #1068]	; 0x42c
 8000b5e:	4282      	cmp	r2, r0
  {
    return 0;
  }

  ret = p_cli->cmd_args.argv[index];
 8000b60:	bf86      	itte	hi
 8000b62:	f8d3 3430 	ldrhi.w	r3, [r3, #1072]	; 0x430
 8000b66:	f853 0020 	ldrhi.w	r0, [r3, r0, lsl #2]
    return 0;
 8000b6a:	2000      	movls	r0, #0

  return ret;
}
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	200004e8 	.word	0x200004e8

08000b74 <cliShowList>:

  return ret;
}

void cliShowList(cli_args_t *args)
{
 8000b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  cli_t *p_cli = &cli_node;


  printf("\r\n");
 8000b76:	480f      	ldr	r0, [pc, #60]	; (8000bb4 <cliShowList+0x40>)
  printf("---------- cmd list ---------\r\n");

  for (int i=0; i<p_cli->cmd_count; i++)
 8000b78:	2400      	movs	r4, #0
  printf("\r\n");
 8000b7a:	f005 ff4d 	bl	8006a18 <puts>
  printf("---------- cmd list ---------\r\n");
 8000b7e:	480e      	ldr	r0, [pc, #56]	; (8000bb8 <cliShowList+0x44>)
 8000b80:	f005 ff4a 	bl	8006a18 <puts>
  for (int i=0; i<p_cli->cmd_count; i++)
 8000b84:	480d      	ldr	r0, [pc, #52]	; (8000bbc <cliShowList+0x48>)
  {
    printf(p_cli->cmd_list[i].cmd_str);
    printf("\r\n");
 8000b86:	4f0b      	ldr	r7, [pc, #44]	; (8000bb4 <cliShowList+0x40>)
 8000b88:	4605      	mov	r5, r0
  for (int i=0; i<p_cli->cmd_count; i++)
 8000b8a:	f8b5 32e8 	ldrh.w	r3, [r5, #744]	; 0x2e8
 8000b8e:	f100 0614 	add.w	r6, r0, #20
 8000b92:	42a3      	cmp	r3, r4
 8000b94:	dc04      	bgt.n	8000ba0 <cliShowList+0x2c>
  }

  printf("-----------------------------\r\n");
 8000b96:	480a      	ldr	r0, [pc, #40]	; (8000bc0 <cliShowList+0x4c>)
}
 8000b98:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  printf("-----------------------------\r\n");
 8000b9c:	f005 bf3c 	b.w	8006a18 <puts>
    printf(p_cli->cmd_list[i].cmd_str);
 8000ba0:	f500 703b 	add.w	r0, r0, #748	; 0x2ec
  for (int i=0; i<p_cli->cmd_count; i++)
 8000ba4:	3401      	adds	r4, #1
    printf(p_cli->cmd_list[i].cmd_str);
 8000ba6:	f005 fe9b 	bl	80068e0 <iprintf>
    printf("\r\n");
 8000baa:	4638      	mov	r0, r7
 8000bac:	f005 ff34 	bl	8006a18 <puts>
  for (int i=0; i<p_cli->cmd_count; i++)
 8000bb0:	4630      	mov	r0, r6
 8000bb2:	e7ea      	b.n	8000b8a <cliShowList+0x16>
 8000bb4:	08009c2b 	.word	0x08009c2b
 8000bb8:	08009b98 	.word	0x08009b98
 8000bbc:	200004e8 	.word	0x200004e8
 8000bc0:	08009bb7 	.word	0x08009bb7

08000bc4 <cliMemoryWrite>:
*	Description :
*		-
*/

void cliMemoryWrite(cli_args_t *args)
{
 8000bc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000bc6:	2600      	movs	r6, #0
 8000bc8:	4605      	mov	r5, r0
//	unsigned int *ascptr;

	uint8_t ret;
	int    argc = args->argc;

    addr    = (uint32_t)args->getData(0);
 8000bca:	6883      	ldr	r3, [r0, #8]
	int    argc = args->argc;
 8000bcc:	8807      	ldrh	r7, [r0, #0]
    addr    = (uint32_t)args->getData(0);
 8000bce:	4630      	mov	r0, r6
 8000bd0:	4798      	blx	r3
    data    = (uint32_t)args->getData(1);
 8000bd2:	68ab      	ldr	r3, [r5, #8]
    addr    = (uint32_t)args->getData(0);
 8000bd4:	4604      	mov	r4, r0
    data    = (uint32_t)args->getData(1);
 8000bd6:	2001      	movs	r0, #1
 8000bd8:	4798      	blx	r3
    size    = (uint32_t)args->getData(2);
 8000bda:	68ab      	ldr	r3, [r5, #8]
 8000bdc:	2002      	movs	r0, #2
 8000bde:	4798      	blx	r3
 8000be0:	4605      	mov	r5, r0

	if(argc < 1){
 8000be2:	b917      	cbnz	r7, 8000bea <cliMemoryWrite+0x26>
		printf("mw8 addr data [size]\r\n");
 8000be4:	480a      	ldr	r0, [pc, #40]	; (8000c10 <cliMemoryWrite+0x4c>)
 8000be6:	f005 ff17 	bl	8006a18 <puts>
	}

	end_addr = addr + size;
 8000bea:	4425      	add	r5, r4

	for( ; addr < end_addr; addr++)
 8000bec:	42a5      	cmp	r5, r4
 8000bee:	d805      	bhi.n	8000bfc <cliMemoryWrite+0x38>
	{
		ret = flashWrite(addr, (uint8_t *)&pattern, 2);
	}

	if(ret == 0)
 8000bf0:	b966      	cbnz	r6, 8000c0c <cliMemoryWrite+0x48>
	{
		printf("Write Success\r\n");
 8000bf2:	4808      	ldr	r0, [pc, #32]	; (8000c14 <cliMemoryWrite+0x50>)
	}
	else
	{
		printf("Write Fail\r\n");
 8000bf4:	f005 ff10 	bl	8006a18 <puts>
	}

	return(ret);
}
 8000bf8:	b003      	add	sp, #12
 8000bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = flashWrite(addr, (uint8_t *)&pattern, 2);
 8000bfc:	4620      	mov	r0, r4
 8000bfe:	2202      	movs	r2, #2
 8000c00:	a901      	add	r1, sp, #4
	for( ; addr < end_addr; addr++)
 8000c02:	3401      	adds	r4, #1
		ret = flashWrite(addr, (uint8_t *)&pattern, 2);
 8000c04:	f000 fc04 	bl	8001410 <flashWrite>
 8000c08:	b2c6      	uxtb	r6, r0
	for( ; addr < end_addr; addr++)
 8000c0a:	e7ef      	b.n	8000bec <cliMemoryWrite+0x28>
		printf("Write Fail\r\n");
 8000c0c:	4802      	ldr	r0, [pc, #8]	; (8000c18 <cliMemoryWrite+0x54>)
 8000c0e:	e7f1      	b.n	8000bf4 <cliMemoryWrite+0x30>
 8000c10:	08009bd6 	.word	0x08009bd6
 8000c14:	08009bec 	.word	0x08009bec
 8000c18:	08009bfb 	.word	0x08009bfb

08000c1c <cliReset>:
}



void cliReset(cli_args_t *args)
{
 8000c1c:	b508      	push	{r3, lr}
	HAL_Delay(500);
 8000c1e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c22:	f001 fa1f 	bl	8002064 <HAL_Delay>
	printf("MCU reset by software wait......\r\n\r\n\r\n");
 8000c26:	480a      	ldr	r0, [pc, #40]	; (8000c50 <cliReset+0x34>)
 8000c28:	f005 fef6 	bl	8006a18 <puts>
//깜빡깜빡 구현하기
	HAL_Delay(500);
 8000c2c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c30:	f001 fa18 	bl	8002064 <HAL_Delay>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c34:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000c38:	4906      	ldr	r1, [pc, #24]	; (8000c54 <cliReset+0x38>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000c3a:	4b07      	ldr	r3, [pc, #28]	; (8000c58 <cliReset+0x3c>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000c3c:	68ca      	ldr	r2, [r1, #12]
 8000c3e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000c42:	4313      	orrs	r3, r2
 8000c44:	60cb      	str	r3, [r1, #12]
 8000c46:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000c4a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8000c4c:	e7fd      	b.n	8000c4a <cliReset+0x2e>
 8000c4e:	bf00      	nop
 8000c50:	08009c07 	.word	0x08009c07
 8000c54:	e000ed00 	.word	0xe000ed00
 8000c58:	05fa0004 	.word	0x05fa0004

08000c5c <cliArgsIsStr>:
  if (index >= p_cli->cmd_args.argc)
 8000c5c:	4a09      	ldr	r2, [pc, #36]	; (8000c84 <cliArgsIsStr+0x28>)
{
 8000c5e:	b508      	push	{r3, lr}
 8000c60:	4603      	mov	r3, r0
 8000c62:	4608      	mov	r0, r1
  if (index >= p_cli->cmd_args.argc)
 8000c64:	f8b2 142c 	ldrh.w	r1, [r2, #1068]	; 0x42c
 8000c68:	4299      	cmp	r1, r3
 8000c6a:	d909      	bls.n	8000c80 <cliArgsIsStr+0x24>
  if(strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 8000c6c:	f8d2 2430 	ldr.w	r2, [r2, #1072]	; 0x430
 8000c70:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000c74:	f7ff fae4 	bl	8000240 <strcmp>
 8000c78:	fab0 f080 	clz	r0, r0
 8000c7c:	0940      	lsrs	r0, r0, #5
}
 8000c7e:	bd08      	pop	{r3, pc}
    return 0;
 8000c80:	2000      	movs	r0, #0
 8000c82:	e7fc      	b.n	8000c7e <cliArgsIsStr+0x22>
 8000c84:	200004e8 	.word	0x200004e8

08000c88 <cliArgsGetFloat>:
  if (index >= p_cli->cmd_args.argc)
 8000c88:	4b07      	ldr	r3, [pc, #28]	; (8000ca8 <cliArgsGetFloat+0x20>)
 8000c8a:	f8b3 242c 	ldrh.w	r2, [r3, #1068]	; 0x42c
 8000c8e:	4282      	cmp	r2, r0
 8000c90:	d906      	bls.n	8000ca0 <cliArgsGetFloat+0x18>
  ret = (float)strtof((const char * ) p_cli->cmd_args.argv[index], (char **)NULL);
 8000c92:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8000c96:	2100      	movs	r1, #0
 8000c98:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8000c9c:	f006 bcd0 	b.w	8007640 <strtof>
}
 8000ca0:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8000cac <cliArgsGetFloat+0x24>
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	200004e8 	.word	0x200004e8
 8000cac:	00000000 	.word	0x00000000

08000cb0 <cliArgsGetData>:
  if (index >= p_cli->cmd_args.argc)
 8000cb0:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <cliArgsGetData+0x20>)
 8000cb2:	f8b3 242c 	ldrh.w	r2, [r3, #1068]	; 0x42c
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	d907      	bls.n	8000cca <cliArgsGetData+0x1a>
  ret = (int32_t)strtoul((const char * ) p_cli->cmd_args.argv[index], (char **)NULL, (int) 0);
 8000cba:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8000cc4:	4611      	mov	r1, r2
 8000cc6:	f006 bda7 	b.w	8007818 <strtoul>
}
 8000cca:	2000      	movs	r0, #0
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	200004e8 	.word	0x200004e8

08000cd4 <cliLineChange.constprop.0>:
void cliLineChange(cli_t *p_cli, int8_t key_up)
 8000cd4:	b538      	push	{r3, r4, r5, lr}
  if (p_cli->hist_line_count == 0)
 8000cd6:	4c1e      	ldr	r4, [pc, #120]	; (8000d50 <cliLineChange.constprop.0+0x7c>)
void cliLineChange(cli_t *p_cli, int8_t key_up)
 8000cd8:	4605      	mov	r5, r0
  if (p_cli->hist_line_count == 0)
 8000cda:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
 8000cde:	b393      	cbz	r3, 8000d46 <cliLineChange.constprop.0+0x72>
  if (p_cli->line.cursor > 0)
 8000ce0:	f894 22e5 	ldrb.w	r2, [r4, #741]	; 0x2e5
 8000ce4:	b11a      	cbz	r2, 8000cee <cliLineChange.constprop.0+0x1a>
    uartPrintf(p_cli->ch, "\x1B[%dD", p_cli->line.cursor);
 8000ce6:	491b      	ldr	r1, [pc, #108]	; (8000d54 <cliLineChange.constprop.0+0x80>)
 8000ce8:	7820      	ldrb	r0, [r4, #0]
 8000cea:	f000 fe2d 	bl	8001948 <uartPrintf>
  if (p_cli->line.count > 0)
 8000cee:	f894 22e6 	ldrb.w	r2, [r4, #742]	; 0x2e6
 8000cf2:	b11a      	cbz	r2, 8000cfc <cliLineChange.constprop.0+0x28>
    uartPrintf(p_cli->ch, "\x1B[%dP", p_cli->line.count);
 8000cf4:	4918      	ldr	r1, [pc, #96]	; (8000d58 <cliLineChange.constprop.0+0x84>)
 8000cf6:	7820      	ldrb	r0, [r4, #0]
 8000cf8:	f000 fe26 	bl	8001948 <uartPrintf>
  if (key_up == true)
 8000cfc:	2d01      	cmp	r5, #1
 8000cfe:	f894 2197 	ldrb.w	r2, [r4, #407]	; 0x197
 8000d02:	d121      	bne.n	8000d48 <cliLineChange.constprop.0+0x74>
    if (p_cli->hist_line_new == true)
 8000d04:	f894 3194 	ldrb.w	r3, [r4, #404]	; 0x194
 8000d08:	b11b      	cbz	r3, 8000d12 <cliLineChange.constprop.0+0x3e>
      p_cli->hist_line_i = p_cli->hist_line_last;
 8000d0a:	f894 3196 	ldrb.w	r3, [r4, #406]	; 0x196
 8000d0e:	f884 3195 	strb.w	r3, [r4, #405]	; 0x195
    p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) % p_cli->hist_line_count;
 8000d12:	f994 3195 	ldrsb.w	r3, [r4, #405]	; 0x195
 8000d16:	4413      	add	r3, r2
 8000d18:	3b01      	subs	r3, #1
  p_cli->line = p_cli->line_buf[change_i];
 8000d1a:	4810      	ldr	r0, [pc, #64]	; (8000d5c <cliLineChange.constprop.0+0x88>)
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 8000d1c:	fb93 f1f2 	sdiv	r1, r3, r2
 8000d20:	fb02 3111 	mls	r1, r2, r1, r3
  p_cli->line = p_cli->line_buf[change_i];
 8000d24:	2243      	movs	r2, #67	; 0x43
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 8000d26:	f884 1195 	strb.w	r1, [r4, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 8000d2a:	b2c9      	uxtb	r1, r1
  p_cli->line = p_cli->line_buf[change_i];
 8000d2c:	fb02 4101 	mla	r1, r2, r1, r4
 8000d30:	f501 71cc 	add.w	r1, r1, #408	; 0x198
 8000d34:	f005 fd14 	bl	8006760 <memcpy>
  p_cli->line.cursor = p_cli->line.count;
 8000d38:	f894 32e6 	ldrb.w	r3, [r4, #742]	; 0x2e6
 8000d3c:	f884 32e5 	strb.w	r3, [r4, #741]	; 0x2e5
  p_cli->hist_line_new = false;
 8000d40:	2300      	movs	r3, #0
 8000d42:	f884 3194 	strb.w	r3, [r4, #404]	; 0x194
}
 8000d46:	bd38      	pop	{r3, r4, r5, pc}
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 8000d48:	f994 1195 	ldrsb.w	r1, [r4, #405]	; 0x195
 8000d4c:	1c4b      	adds	r3, r1, #1
 8000d4e:	e7e4      	b.n	8000d1a <cliLineChange.constprop.0+0x46>
 8000d50:	200004e8 	.word	0x200004e8
 8000d54:	08009c2d 	.word	0x08009c2d
 8000d58:	08009c33 	.word	0x08009c33
 8000d5c:	2000078c 	.word	0x2000078c

08000d60 <cliPrintf>:
{
 8000d60:	b40f      	push	{r0, r1, r2, r3}
 8000d62:	b513      	push	{r0, r1, r4, lr}
 8000d64:	ab04      	add	r3, sp, #16
  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 8000d66:	4c0a      	ldr	r4, [pc, #40]	; (8000d90 <cliPrintf+0x30>)
 8000d68:	f44f 7180 	mov.w	r1, #256	; 0x100
{
 8000d6c:	f853 2b04 	ldr.w	r2, [r3], #4
  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 8000d70:	4620      	mov	r0, r4
  va_start (arg, fmt);
 8000d72:	9301      	str	r3, [sp, #4]
  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 8000d74:	f006 fd86 	bl	8007884 <vsniprintf>
  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 8000d78:	4621      	mov	r1, r4
  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 8000d7a:	4602      	mov	r2, r0
  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 8000d7c:	f814 0c11 	ldrb.w	r0, [r4, #-17]
 8000d80:	f000 fdc6 	bl	8001910 <uartWrite>
}
 8000d84:	b002      	add	sp, #8
 8000d86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d8a:	b004      	add	sp, #16
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	200004f9 	.word	0x200004f9

08000d94 <cliMemoryDump>:
  int    argc = args->argc;
 8000d94:	8803      	ldrh	r3, [r0, #0]
{
 8000d96:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(args->argc < 1)
 8000d9a:	b92b      	cbnz	r3, 8000da8 <cliMemoryDump+0x14>
    cliPrintf(">> md addr [size] \n");
 8000d9c:	482b      	ldr	r0, [pc, #172]	; (8000e4c <cliMemoryDump+0xb8>)
}
 8000d9e:	b003      	add	sp, #12
 8000da0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cliPrintf(">> md addr [size] \n");
 8000da4:	f7ff bfdc 	b.w	8000d60 <cliPrintf>
  if(argc > 1)
 8000da8:	2b01      	cmp	r3, #1
  char **argv = args->argv;
 8000daa:	6844      	ldr	r4, [r0, #4]
  if(argc > 1)
 8000dac:	d914      	bls.n	8000dd8 <cliMemoryDump+0x44>
    size = (int)strtoul((const char * ) argv[1], (char **)NULL, (int) 0);
 8000dae:	2200      	movs	r2, #0
 8000db0:	6860      	ldr	r0, [r4, #4]
 8000db2:	4611      	mov	r1, r2
 8000db4:	f006 fd30 	bl	8007818 <strtoul>
 8000db8:	4606      	mov	r6, r0
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	6820      	ldr	r0, [r4, #0]
  for (idx = 0; idx<size; idx++)
 8000dbe:	2500      	movs	r5, #0
	       printf("  |");
 8000dc0:	f8df b098 	ldr.w	fp, [pc, #152]	; 8000e5c <cliMemoryDump+0xc8>
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 8000dc4:	4611      	mov	r1, r2
 8000dc6:	f006 fd27 	bl	8007818 <strtoul>
 8000dca:	4604      	mov	r4, r0
 8000dcc:	4607      	mov	r7, r0
  for (idx = 0; idx<size; idx++)
 8000dce:	42b5      	cmp	r5, r6
 8000dd0:	db04      	blt.n	8000ddc <cliMemoryDump+0x48>
}
 8000dd2:	b003      	add	sp, #12
 8000dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  int idx, size = 16;
 8000dd8:	2610      	movs	r6, #16
 8000dda:	e7ee      	b.n	8000dba <cliMemoryDump+0x26>
    if((idx%4) == 0)
 8000ddc:	f015 0803 	ands.w	r8, r5, #3
 8000de0:	d103      	bne.n	8000dea <cliMemoryDump+0x56>
      printf("   0x%08X: ", (unsigned int)addr);
 8000de2:	4639      	mov	r1, r7
 8000de4:	481a      	ldr	r0, [pc, #104]	; (8000e50 <cliMemoryDump+0xbc>)
 8000de6:	f005 fd7b 	bl	80068e0 <iprintf>
    printf(" 0x%08X", *(addr));
 8000dea:	6839      	ldr	r1, [r7, #0]
 8000dec:	4819      	ldr	r0, [pc, #100]	; (8000e54 <cliMemoryDump+0xc0>)
 8000dee:	f005 fd77 	bl	80068e0 <iprintf>
    if ((idx%4) == 3)
 8000df2:	f1b8 0f03 	cmp.w	r8, #3
 8000df6:	d125      	bne.n	8000e44 <cliMemoryDump+0xb0>
      for (idx1= 0; idx1< 4; idx1++)
 8000df8:	f04f 0900 	mov.w	r9, #0
        memcpy((char *)asc, (char *)ascptr, 4);
 8000dfc:	f854 2029 	ldr.w	r2, [r4, r9, lsl #2]
 8000e00:	9201      	str	r2, [sp, #4]
		if(idx1 == 0)
 8000e02:	f1b9 0f00 	cmp.w	r9, #0
 8000e06:	d102      	bne.n	8000e0e <cliMemoryDump+0x7a>
	       printf("  |");
 8000e08:	4658      	mov	r0, fp
 8000e0a:	f005 fd69 	bl	80068e0 <iprintf>
 8000e0e:	f10d 0804 	add.w	r8, sp, #4
      for (idx1= 0; idx1< 4; idx1++)
 8000e12:	f04f 0a00 	mov.w	sl, #0
           if (asc[i] > 0x1f && asc[i] < 0x7f)
 8000e16:	f818 0b01 	ldrb.w	r0, [r8], #1
        for (i=0;i<4;i++)
 8000e1a:	f10a 0a01 	add.w	sl, sl, #1
           if (asc[i] > 0x1f && asc[i] < 0x7f)
 8000e1e:	f1a0 0120 	sub.w	r1, r0, #32
 8000e22:	295e      	cmp	r1, #94	; 0x5e
            printf(".");
 8000e24:	bf88      	it	hi
 8000e26:	202e      	movhi	r0, #46	; 0x2e
 8000e28:	f005 fd72 	bl	8006910 <putchar>
        for (i=0;i<4;i++)
 8000e2c:	f1ba 0f04 	cmp.w	sl, #4
 8000e30:	d1f1      	bne.n	8000e16 <cliMemoryDump+0x82>
      for (idx1= 0; idx1< 4; idx1++)
 8000e32:	f109 0901 	add.w	r9, r9, #1
 8000e36:	f1b9 0f04 	cmp.w	r9, #4
 8000e3a:	d1df      	bne.n	8000dfc <cliMemoryDump+0x68>
      printf("|\r\n");
 8000e3c:	4806      	ldr	r0, [pc, #24]	; (8000e58 <cliMemoryDump+0xc4>)
 8000e3e:	3410      	adds	r4, #16
 8000e40:	f005 fdea 	bl	8006a18 <puts>
    addr++;
 8000e44:	3704      	adds	r7, #4
  for (idx = 0; idx<size; idx++)
 8000e46:	3501      	adds	r5, #1
 8000e48:	e7c1      	b.n	8000dce <cliMemoryDump+0x3a>
 8000e4a:	bf00      	nop
 8000e4c:	08009c39 	.word	0x08009c39
 8000e50:	08009c4d 	.word	0x08009c4d
 8000e54:	08009c59 	.word	0x08009c59
 8000e58:	08009c65 	.word	0x08009c65
 8000e5c:	08009c61 	.word	0x08009c61

08000e60 <cliMain>:
{
 8000e60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (cli_node.is_open != true)
 8000e64:	4ca4      	ldr	r4, [pc, #656]	; (80010f8 <cliMain+0x298>)
{
 8000e66:	b085      	sub	sp, #20
  if (cli_node.is_open != true)
 8000e68:	7a26      	ldrb	r6, [r4, #8]
 8000e6a:	b936      	cbnz	r6, 8000e7a <cliMain+0x1a>
	printf("cli node is not open\r\n");
 8000e6c:	48a3      	ldr	r0, [pc, #652]	; (80010fc <cliMain+0x29c>)
 8000e6e:	f005 fdd3 	bl	8006a18 <puts>
}
 8000e72:	4630      	mov	r0, r6
 8000e74:	b005      	add	sp, #20
 8000e76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (uartAvailable(cli_node.ch) > 0)
 8000e7a:	7820      	ldrb	r0, [r4, #0]
 8000e7c:	f000 fd16 	bl	80018ac <uartAvailable>
 8000e80:	2800      	cmp	r0, #0
 8000e82:	d0f6      	beq.n	8000e72 <cliMain+0x12>
    cliUpdate(&cli_node, uartRead(cli_node.ch));
 8000e84:	7820      	ldrb	r0, [r4, #0]
 8000e86:	f000 fd27 	bl	80018d8 <uartRead>
  if (p_cli->state == CLI_RX_IDLE)
 8000e8a:	7c21      	ldrb	r1, [r4, #16]
 8000e8c:	f88d 0007 	strb.w	r0, [sp, #7]
 8000e90:	2900      	cmp	r1, #0
 8000e92:	f040 80df 	bne.w	8001054 <cliMain+0x1f4>
    switch(rx_data)
 8000e96:	281b      	cmp	r0, #27
 8000e98:	f000 8129 	beq.w	80010ee <cliMain+0x28e>
 8000e9c:	d852      	bhi.n	8000f44 <cliMain+0xe4>
 8000e9e:	2808      	cmp	r0, #8
 8000ea0:	f000 80f3 	beq.w	800108a <cliMain+0x22a>
 8000ea4:	280d      	cmp	r0, #13
 8000ea6:	d068      	beq.n	8000f7a <cliMain+0x11a>
        if ((line->count + 1) < line->buf_len)
 8000ea8:	f894 32e6 	ldrb.w	r3, [r4, #742]	; 0x2e6
 8000eac:	f894 22e4 	ldrb.w	r2, [r4, #740]	; 0x2e4
 8000eb0:	1c59      	adds	r1, r3, #1
 8000eb2:	4291      	cmp	r1, r2
 8000eb4:	dadd      	bge.n	8000e72 <cliMain+0x12>
          if (line->cursor == line->count)
 8000eb6:	f894 22e5 	ldrb.w	r2, [r4, #741]	; 0x2e5
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	d119      	bne.n	8000ef2 <cliMain+0x92>
            uartWrite(p_cli->ch, &rx_data, 1);
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	f10d 0107 	add.w	r1, sp, #7
 8000ec4:	7820      	ldrb	r0, [r4, #0]
 8000ec6:	f000 fd23 	bl	8001910 <uartWrite>
            line->buf[line->cursor] = rx_data;
 8000eca:	f894 22e5 	ldrb.w	r2, [r4, #741]	; 0x2e5
 8000ece:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8000ed2:	18a3      	adds	r3, r4, r2
            line->cursor++;
 8000ed4:	3201      	adds	r2, #1
            line->buf[line->cursor] = rx_data;
 8000ed6:	f883 12a4 	strb.w	r1, [r3, #676]	; 0x2a4
            line->count++;
 8000eda:	f894 32e6 	ldrb.w	r3, [r4, #742]	; 0x2e6
            line->cursor++;
 8000ede:	f884 22e5 	strb.w	r2, [r4, #741]	; 0x2e5
            line->buf[line->count] = 0;
 8000ee2:	2200      	movs	r2, #0
            line->count++;
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	f884 32e6 	strb.w	r3, [r4, #742]	; 0x2e6
            line->buf[line->count] = 0;
 8000eec:	4423      	add	r3, r4
 8000eee:	f883 22a4 	strb.w	r2, [r3, #676]	; 0x2a4
          if (line->cursor < line->count)
 8000ef2:	f894 12e5 	ldrb.w	r1, [r4, #741]	; 0x2e5
 8000ef6:	f894 32e6 	ldrb.w	r3, [r4, #742]	; 0x2e6
 8000efa:	4299      	cmp	r1, r3
 8000efc:	f080 80aa 	bcs.w	8001054 <cliMain+0x1f4>
            mov_len = line->count - line->cursor;
 8000f00:	1a58      	subs	r0, r3, r1
 8000f02:	f503 7229 	add.w	r2, r3, #676	; 0x2a4
            for (int i=0; i<mov_len; i++)
 8000f06:	2500      	movs	r5, #0
            mov_len = line->count - line->cursor;
 8000f08:	b2c0      	uxtb	r0, r0
            for (int i=0; i<mov_len; i++)
 8000f0a:	4422      	add	r2, r4
 8000f0c:	3501      	adds	r5, #1
              line->buf[line->count - i] = line->buf[line->count - i - 1];
 8000f0e:	f812 7c01 	ldrb.w	r7, [r2, #-1]
            for (int i=0; i<mov_len; i++)
 8000f12:	4285      	cmp	r5, r0
              line->buf[line->count - i] = line->buf[line->count - i - 1];
 8000f14:	f802 7901 	strb.w	r7, [r2], #-1
            for (int i=0; i<mov_len; i++)
 8000f18:	dbf8      	blt.n	8000f0c <cliMain+0xac>
            line->count++;
 8000f1a:	3301      	adds	r3, #1
            line->buf[line->cursor] = rx_data;
 8000f1c:	1860      	adds	r0, r4, r1
            line->cursor++;
 8000f1e:	3101      	adds	r1, #1
            line->buf[line->cursor] = rx_data;
 8000f20:	f89d 2007 	ldrb.w	r2, [sp, #7]
            line->count++;
 8000f24:	b2db      	uxtb	r3, r3
            line->cursor++;
 8000f26:	f884 12e5 	strb.w	r1, [r4, #741]	; 0x2e5
            line->buf[line->count] = 0;
 8000f2a:	2100      	movs	r1, #0
            line->count++;
 8000f2c:	f884 32e6 	strb.w	r3, [r4, #742]	; 0x2e6
            line->buf[line->count] = 0;
 8000f30:	4423      	add	r3, r4
            line->buf[line->cursor] = rx_data;
 8000f32:	f880 22a4 	strb.w	r2, [r0, #676]	; 0x2a4
            line->buf[line->count] = 0;
 8000f36:	f883 12a4 	strb.w	r1, [r3, #676]	; 0x2a4
            uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 8000f3a:	7820      	ldrb	r0, [r4, #0]
 8000f3c:	4970      	ldr	r1, [pc, #448]	; (8001100 <cliMain+0x2a0>)
 8000f3e:	f000 fd03 	bl	8001948 <uartPrintf>
 8000f42:	e087      	b.n	8001054 <cliMain+0x1f4>
    switch(rx_data)
 8000f44:	287f      	cmp	r0, #127	; 0x7f
 8000f46:	d1af      	bne.n	8000ea8 <cliMain+0x48>
        if (line->cursor < line->count)
 8000f48:	f894 22e5 	ldrb.w	r2, [r4, #741]	; 0x2e5
 8000f4c:	f894 32e6 	ldrb.w	r3, [r4, #742]	; 0x2e6
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d28e      	bcs.n	8000e72 <cliMain+0x12>
          mov_len = line->count - line->cursor;
 8000f54:	1a99      	subs	r1, r3, r2
 8000f56:	f502 7229 	add.w	r2, r2, #676	; 0x2a4
          for (int i=1; i<mov_len; i++)
 8000f5a:	2001      	movs	r0, #1
          mov_len = line->count - line->cursor;
 8000f5c:	b2c9      	uxtb	r1, r1
          for (int i=1; i<mov_len; i++)
 8000f5e:	4422      	add	r2, r4
 8000f60:	4288      	cmp	r0, r1
 8000f62:	f2c0 808d 	blt.w	8001080 <cliMain+0x220>
          line->count--;
 8000f66:	3b01      	subs	r3, #1
          line->buf[line->count] = 0;
 8000f68:	2200      	movs	r2, #0
          uartPrintf(p_cli->ch, "\x1B[1P");
 8000f6a:	4966      	ldr	r1, [pc, #408]	; (8001104 <cliMain+0x2a4>)
          line->count--;
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	f884 32e6 	strb.w	r3, [r4, #742]	; 0x2e6
          line->buf[line->count] = 0;
 8000f72:	4423      	add	r3, r4
 8000f74:	f883 22a4 	strb.w	r2, [r3, #676]	; 0x2a4
          uartPrintf(p_cli->ch, "\x1B[1P");
 8000f78:	e069      	b.n	800104e <cliMain+0x1ee>
        if (line->count > 0)
 8000f7a:	f894 32e6 	ldrb.w	r3, [r4, #742]	; 0x2e6
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d059      	beq.n	8001036 <cliMain+0x1d6>
  p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 8000f82:	f894 5196 	ldrb.w	r5, [r4, #406]	; 0x196
 8000f86:	2243      	movs	r2, #67	; 0x43
 8000f88:	f504 7129 	add.w	r1, r4, #676	; 0x2a4
  p_cli->argc = 0;
 8000f8c:	2700      	movs	r7, #0
  p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 8000f8e:	fb02 4005 	mla	r0, r2, r5, r4
    argv[argc++] = tok;
 8000f92:	f8df 8190 	ldr.w	r8, [pc, #400]	; 8001124 <cliMain+0x2c4>
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8000f96:	f8df 9170 	ldr.w	r9, [pc, #368]	; 8001108 <cliMain+0x2a8>
  p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 8000f9a:	f500 70cc 	add.w	r0, r0, #408	; 0x198
 8000f9e:	f005 fbdf 	bl	8006760 <memcpy>
  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 8000fa2:	f894 3197 	ldrb.w	r3, [r4, #407]	; 0x197
  p_cli->hist_line_i    = p_cli->hist_line_last;
 8000fa6:	f884 5195 	strb.w	r5, [r4, #405]	; 0x195
  p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 8000faa:	3501      	adds	r5, #1
  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 8000fac:	2b03      	cmp	r3, #3
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8000fae:	aa02      	add	r2, sp, #8
  p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 8000fb0:	f005 0503 	and.w	r5, r5, #3
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8000fb4:	4954      	ldr	r1, [pc, #336]	; (8001108 <cliMain+0x2a8>)
    p_cli->hist_line_count++;
 8000fb6:	bf98      	it	ls
 8000fb8:	3301      	addls	r3, #1
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8000fba:	4854      	ldr	r0, [pc, #336]	; (800110c <cliMain+0x2ac>)
  p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 8000fbc:	f884 5196 	strb.w	r5, [r4, #406]	; 0x196
    p_cli->hist_line_count++;
 8000fc0:	bf98      	it	ls
 8000fc2:	f884 3197 	strbls.w	r3, [r4, #407]	; 0x197
  p_cli->hist_line_new  = true;
 8000fc6:	2301      	movs	r3, #1
  p_cli->argc = 0;
 8000fc8:	f8a4 7112 	strh.w	r7, [r4, #274]	; 0x112
  p_cli->hist_line_new  = true;
 8000fcc:	f884 3194 	strb.w	r3, [r4, #404]	; 0x194
  argv[argc] = NULL;
 8000fd0:	f8c4 7114 	str.w	r7, [r4, #276]	; 0x114
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8000fd4:	f006 fba0 	bl	8007718 <strtok_r>
 8000fd8:	463b      	mov	r3, r7
 8000fda:	4605      	mov	r5, r0
 8000fdc:	b29a      	uxth	r2, r3
 8000fde:	1c5f      	adds	r7, r3, #1
 8000fe0:	2d00      	cmp	r5, #0
 8000fe2:	d140      	bne.n	8001066 <cliMain+0x206>
  p_cli->argc = argc;
 8000fe4:	f8a4 2112 	strh.w	r2, [r4, #274]	; 0x112
  if (argc > 0)
 8000fe8:	b32a      	cbz	r2, 8001036 <cliMain+0x1d6>
    cliPrintf("\r\n");
 8000fea:	4849      	ldr	r0, [pc, #292]	; (8001110 <cliMain+0x2b0>)
 8000fec:	f7ff feb8 	bl	8000d60 <cliPrintf>
    cliToUpper(p_cli->argv[0]);
 8000ff0:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
 8000ff4:	f7ff fd9c 	bl	8000b30 <cliToUpper>
    for (int i=0; i<p_cli->cmd_count; i++)
 8000ff8:	4f3f      	ldr	r7, [pc, #252]	; (80010f8 <cliMain+0x298>)
 8000ffa:	f8b4 82e8 	ldrh.w	r8, [r4, #744]	; 0x2e8
      if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 8000ffe:	f8d4 9114 	ldr.w	r9, [r4, #276]	; 0x114
    for (int i=0; i<p_cli->cmd_count; i++)
 8001002:	4545      	cmp	r5, r8
 8001004:	da17      	bge.n	8001036 <cliMain+0x1d6>
      if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 8001006:	f507 713b 	add.w	r1, r7, #748	; 0x2ec
 800100a:	4648      	mov	r0, r9
 800100c:	3714      	adds	r7, #20
 800100e:	f7ff f917 	bl	8000240 <strcmp>
 8001012:	2800      	cmp	r0, #0
 8001014:	d132      	bne.n	800107c <cliMain+0x21c>
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 8001016:	f8b4 3112 	ldrh.w	r3, [r4, #274]	; 0x112
        p_cli->cmd_args.argv = &p_cli->argv[1];
 800101a:	483e      	ldr	r0, [pc, #248]	; (8001114 <cliMain+0x2b4>)
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 800101c:	3b01      	subs	r3, #1
        p_cli->cmd_args.argv = &p_cli->argv[1];
 800101e:	f8c4 0430 	str.w	r0, [r4, #1072]	; 0x430
        p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 8001022:	f500 7045 	add.w	r0, r0, #788	; 0x314
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 8001026:	f8a4 342c 	strh.w	r3, [r4, #1068]	; 0x42c
        p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 800102a:	2314      	movs	r3, #20
 800102c:	fb03 4505 	mla	r5, r3, r5, r4
 8001030:	f8d5 32fc 	ldr.w	r3, [r5, #764]	; 0x2fc
 8001034:	4798      	blx	r3
        line->count = 0;
 8001036:	2300      	movs	r3, #0
  uartPrintf(p_cli->ch, "\n\r");
 8001038:	4937      	ldr	r1, [pc, #220]	; (8001118 <cliMain+0x2b8>)
 800103a:	7820      	ldrb	r0, [r4, #0]
        line->count = 0;
 800103c:	f884 32e6 	strb.w	r3, [r4, #742]	; 0x2e6
        line->cursor = 0;
 8001040:	f884 32e5 	strb.w	r3, [r4, #741]	; 0x2e5
        line->buf[0] = 0;
 8001044:	f884 32a4 	strb.w	r3, [r4, #676]	; 0x2a4
  uartPrintf(p_cli->ch, "\n\r");
 8001048:	f000 fc7e 	bl	8001948 <uartPrintf>
  uartPrintf(p_cli->ch, CLI_PROMPT_STR);
 800104c:	4933      	ldr	r1, [pc, #204]	; (800111c <cliMain+0x2bc>)
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 800104e:	7820      	ldrb	r0, [r4, #0]
 8001050:	f000 fc7a 	bl	8001948 <uartPrintf>
  switch(p_cli->state)
 8001054:	7c23      	ldrb	r3, [r4, #16]
 8001056:	3b01      	subs	r3, #1
 8001058:	2b03      	cmp	r3, #3
 800105a:	f63f af0a 	bhi.w	8000e72 <cliMain+0x12>
 800105e:	e8df f003 	tbb	[pc, r3]
 8001062:	4946      	.short	0x4946
 8001064:	da63      	.short	0xda63
    argv[argc++] = tok;
 8001066:	b29b      	uxth	r3, r3
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8001068:	aa02      	add	r2, sp, #8
 800106a:	4649      	mov	r1, r9
 800106c:	2000      	movs	r0, #0
    argv[argc++] = tok;
 800106e:	f848 5023 	str.w	r5, [r8, r3, lsl #2]
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8001072:	f006 fb51 	bl	8007718 <strtok_r>
 8001076:	463b      	mov	r3, r7
 8001078:	4605      	mov	r5, r0
 800107a:	e7af      	b.n	8000fdc <cliMain+0x17c>
    for (int i=0; i<p_cli->cmd_count; i++)
 800107c:	3501      	adds	r5, #1
 800107e:	e7c0      	b.n	8001002 <cliMain+0x1a2>
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8001080:	7855      	ldrb	r5, [r2, #1]
          for (int i=1; i<mov_len; i++)
 8001082:	3001      	adds	r0, #1
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8001084:	f802 5b01 	strb.w	r5, [r2], #1
          for (int i=1; i<mov_len; i++)
 8001088:	e76a      	b.n	8000f60 <cliMain+0x100>
        if (line->count > 0 && line->cursor > 0)
 800108a:	f894 22e6 	ldrb.w	r2, [r4, #742]	; 0x2e6
 800108e:	f894 32e5 	ldrb.w	r3, [r4, #741]	; 0x2e5
 8001092:	b93a      	cbnz	r2, 80010a4 <cliMain+0x244>
        if (line->cursor > 0)
 8001094:	2b00      	cmp	r3, #0
 8001096:	f43f aeec 	beq.w	8000e72 <cliMain+0x12>
          line->cursor--;
 800109a:	3b01      	subs	r3, #1
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 800109c:	4920      	ldr	r1, [pc, #128]	; (8001120 <cliMain+0x2c0>)
          line->cursor--;
 800109e:	f884 32e5 	strb.w	r3, [r4, #741]	; 0x2e5
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 80010a2:	e7d4      	b.n	800104e <cliMain+0x1ee>
        if (line->count > 0 && line->cursor > 0)
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	f43f aee4 	beq.w	8000e72 <cliMain+0x12>
          if (line->cursor == line->count)
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d106      	bne.n	80010bc <cliMain+0x25c>
            line->count--;
 80010ae:	1e5a      	subs	r2, r3, #1
 80010b0:	b2d2      	uxtb	r2, r2
 80010b2:	f884 22e6 	strb.w	r2, [r4, #742]	; 0x2e6
            line->buf[line->count] = 0;
 80010b6:	4422      	add	r2, r4
 80010b8:	f882 12a4 	strb.w	r1, [r2, #676]	; 0x2a4
          if (line->cursor < line->count)
 80010bc:	f894 22e6 	ldrb.w	r2, [r4, #742]	; 0x2e6
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d9ea      	bls.n	800109a <cliMain+0x23a>
            mov_len = line->count - line->cursor;
 80010c4:	1ad0      	subs	r0, r2, r3
 80010c6:	f203 21a3 	addw	r1, r3, #675	; 0x2a3
            for (int i=0; i<mov_len; i++)
 80010ca:	2500      	movs	r5, #0
            mov_len = line->count - line->cursor;
 80010cc:	b2c0      	uxtb	r0, r0
            for (int i=0; i<mov_len; i++)
 80010ce:	4421      	add	r1, r4
 80010d0:	3501      	adds	r5, #1
              line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 80010d2:	784f      	ldrb	r7, [r1, #1]
            for (int i=0; i<mov_len; i++)
 80010d4:	4285      	cmp	r5, r0
              line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 80010d6:	f801 7b01 	strb.w	r7, [r1], #1
            for (int i=0; i<mov_len; i++)
 80010da:	dbf9      	blt.n	80010d0 <cliMain+0x270>
            line->count--;
 80010dc:	3a01      	subs	r2, #1
            line->buf[line->count] = 0;
 80010de:	2100      	movs	r1, #0
            line->count--;
 80010e0:	b2d2      	uxtb	r2, r2
 80010e2:	f884 22e6 	strb.w	r2, [r4, #742]	; 0x2e6
            line->buf[line->count] = 0;
 80010e6:	4422      	add	r2, r4
 80010e8:	f882 12a4 	strb.w	r1, [r2, #676]	; 0x2a4
        if (line->cursor > 0)
 80010ec:	e7d5      	b.n	800109a <cliMain+0x23a>
      p_cli->state = CLI_RX_SP2;
 80010ee:	2302      	movs	r3, #2
      p_cli->state = CLI_RX_IDLE;
 80010f0:	7423      	strb	r3, [r4, #16]
      break;
 80010f2:	e6be      	b.n	8000e72 <cliMain+0x12>
      p_cli->state = CLI_RX_SP3;
 80010f4:	2303      	movs	r3, #3
 80010f6:	e7fb      	b.n	80010f0 <cliMain+0x290>
 80010f8:	200004e8 	.word	0x200004e8
 80010fc:	08009c68 	.word	0x08009c68
 8001100:	08009c94 	.word	0x08009c94
 8001104:	08009c8f 	.word	0x08009c8f
 8001108:	08009c7e 	.word	0x08009c7e
 800110c:	2000078c 	.word	0x2000078c
 8001110:	08009df8 	.word	0x08009df8
 8001114:	20000600 	.word	0x20000600
 8001118:	08009c2a 	.word	0x08009c2a
 800111c:	08009c85 	.word	0x08009c85
 8001120:	08009c8c 	.word	0x08009c8c
 8001124:	200005fc 	.word	0x200005fc
      if (rx_data == CLI_KEY_LEFT)
 8001128:	f89d 2007 	ldrb.w	r2, [sp, #7]
      p_cli->state = CLI_RX_IDLE;
 800112c:	2300      	movs	r3, #0
      if (rx_data == CLI_KEY_LEFT)
 800112e:	2a44      	cmp	r2, #68	; 0x44
      p_cli->state = CLI_RX_IDLE;
 8001130:	7423      	strb	r3, [r4, #16]
      if (rx_data == CLI_KEY_LEFT)
 8001132:	d110      	bne.n	8001156 <cliMain+0x2f6>
        if (line->cursor > 0)
 8001134:	f894 32e5 	ldrb.w	r3, [r4, #741]	; 0x2e5
 8001138:	b383      	cbz	r3, 800119c <cliMain+0x33c>
          line->cursor--;
 800113a:	3b01      	subs	r3, #1
          tx_buf[2] = rx_data;
 800113c:	f88d 200a 	strb.w	r2, [sp, #10]
          uartWrite(p_cli->ch, tx_buf, 3);
 8001140:	a902      	add	r1, sp, #8
 8001142:	2203      	movs	r2, #3
          line->cursor--;
 8001144:	f884 32e5 	strb.w	r3, [r4, #741]	; 0x2e5
          tx_buf[0] = 0x1B;
 8001148:	f645 331b 	movw	r3, #23323	; 0x5b1b
          uartWrite(p_cli->ch, tx_buf, 3);
 800114c:	7820      	ldrb	r0, [r4, #0]
          tx_buf[0] = 0x1B;
 800114e:	f8ad 3008 	strh.w	r3, [sp, #8]
          uartWrite(p_cli->ch, tx_buf, 3);
 8001152:	f000 fbdd 	bl	8001910 <uartWrite>
      if (rx_data == CLI_KEY_RIGHT)
 8001156:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800115a:	2a43      	cmp	r2, #67	; 0x43
 800115c:	d113      	bne.n	8001186 <cliMain+0x326>
        if (line->cursor < line->count)
 800115e:	f894 32e5 	ldrb.w	r3, [r4, #741]	; 0x2e5
 8001162:	f894 12e6 	ldrb.w	r1, [r4, #742]	; 0x2e6
 8001166:	4299      	cmp	r1, r3
 8001168:	d923      	bls.n	80011b2 <cliMain+0x352>
          line->cursor++;
 800116a:	3301      	adds	r3, #1
          tx_buf[2] = rx_data;
 800116c:	f88d 200a 	strb.w	r2, [sp, #10]
          uartWrite(p_cli->ch, tx_buf, 3);
 8001170:	a902      	add	r1, sp, #8
 8001172:	2203      	movs	r2, #3
          line->cursor++;
 8001174:	f884 32e5 	strb.w	r3, [r4, #741]	; 0x2e5
          tx_buf[0] = 0x1B;
 8001178:	f645 331b 	movw	r3, #23323	; 0x5b1b
          uartWrite(p_cli->ch, tx_buf, 3);
 800117c:	7820      	ldrb	r0, [r4, #0]
          tx_buf[0] = 0x1B;
 800117e:	f8ad 3008 	strh.w	r3, [sp, #8]
          uartWrite(p_cli->ch, tx_buf, 3);
 8001182:	f000 fbc5 	bl	8001910 <uartWrite>
      if (rx_data == CLI_KEY_UP)
 8001186:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800118a:	2b41      	cmp	r3, #65	; 0x41
 800118c:	d106      	bne.n	800119c <cliMain+0x33c>
        cliLineChange(p_cli, true);
 800118e:	2001      	movs	r0, #1
 8001190:	f7ff fda0 	bl	8000cd4 <cliLineChange.constprop.0>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8001194:	4921      	ldr	r1, [pc, #132]	; (800121c <cliMain+0x3bc>)
 8001196:	7820      	ldrb	r0, [r4, #0]
 8001198:	f000 fbd6 	bl	8001948 <uartPrintf>
      if (rx_data == CLI_KEY_DOWN)
 800119c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80011a0:	2b42      	cmp	r3, #66	; 0x42
 80011a2:	d106      	bne.n	80011b2 <cliMain+0x352>
        cliLineChange(p_cli, false);
 80011a4:	2000      	movs	r0, #0
 80011a6:	f7ff fd95 	bl	8000cd4 <cliLineChange.constprop.0>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 80011aa:	491c      	ldr	r1, [pc, #112]	; (800121c <cliMain+0x3bc>)
 80011ac:	7820      	ldrb	r0, [r4, #0]
 80011ae:	f000 fbcb 	bl	8001948 <uartPrintf>
      if (rx_data == CLI_KEY_HOME)
 80011b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80011b6:	2b31      	cmp	r3, #49	; 0x31
 80011b8:	d10a      	bne.n	80011d0 <cliMain+0x370>
        uartPrintf(p_cli->ch, "\x1B[%dD", line->cursor);
 80011ba:	f894 22e5 	ldrb.w	r2, [r4, #741]	; 0x2e5
 80011be:	4918      	ldr	r1, [pc, #96]	; (8001220 <cliMain+0x3c0>)
 80011c0:	7820      	ldrb	r0, [r4, #0]
 80011c2:	f000 fbc1 	bl	8001948 <uartPrintf>
        line->cursor = 0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	f884 32e5 	strb.w	r3, [r4, #741]	; 0x2e5
        p_cli->state = CLI_RX_SP4;
 80011cc:	2304      	movs	r3, #4
 80011ce:	7423      	strb	r3, [r4, #16]
      if (rx_data == CLI_KEY_END)
 80011d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80011d4:	2b34      	cmp	r3, #52	; 0x34
 80011d6:	f47f ae4c 	bne.w	8000e72 <cliMain+0x12>
        if (line->cursor < line->count)
 80011da:	f894 32e5 	ldrb.w	r3, [r4, #741]	; 0x2e5
 80011de:	f894 22e6 	ldrb.w	r2, [r4, #742]	; 0x2e6
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d205      	bcs.n	80011f2 <cliMain+0x392>
          mov_len = line->count - line->cursor;
 80011e6:	1ad2      	subs	r2, r2, r3
          uartPrintf(p_cli->ch, "\x1B[%dC", mov_len);
 80011e8:	490e      	ldr	r1, [pc, #56]	; (8001224 <cliMain+0x3c4>)
 80011ea:	7820      	ldrb	r0, [r4, #0]
 80011ec:	b292      	uxth	r2, r2
 80011ee:	f000 fbab 	bl	8001948 <uartPrintf>
        if (line->cursor > line->count)
 80011f2:	f894 22e5 	ldrb.w	r2, [r4, #741]	; 0x2e5
 80011f6:	f894 32e6 	ldrb.w	r3, [r4, #742]	; 0x2e6
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d905      	bls.n	800120a <cliMain+0x3aa>
          mov_len = line->cursor - line->count;
 80011fe:	1ad2      	subs	r2, r2, r3
          uartPrintf(p_cli->ch, "\x1B[%dD", mov_len);
 8001200:	4907      	ldr	r1, [pc, #28]	; (8001220 <cliMain+0x3c0>)
 8001202:	7820      	ldrb	r0, [r4, #0]
 8001204:	b292      	uxth	r2, r2
 8001206:	f000 fb9f 	bl	8001948 <uartPrintf>
        line->cursor = line->count;
 800120a:	f894 32e6 	ldrb.w	r3, [r4, #742]	; 0x2e6
 800120e:	f884 32e5 	strb.w	r3, [r4, #741]	; 0x2e5
        p_cli->state = CLI_RX_SP4;
 8001212:	2304      	movs	r3, #4
 8001214:	e76c      	b.n	80010f0 <cliMain+0x290>
      p_cli->state = CLI_RX_IDLE;
 8001216:	2300      	movs	r3, #0
 8001218:	e76a      	b.n	80010f0 <cliMain+0x290>
 800121a:	bf00      	nop
 800121c:	2000078c 	.word	0x2000078c
 8001220:	08009c2d 	.word	0x08009c2d
 8001224:	08009c9f 	.word	0x08009c9f

08001228 <cliAdd>:
{
 8001228:	b570      	push	{r4, r5, r6, lr}
  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 800122a:	4d0e      	ldr	r5, [pc, #56]	; (8001264 <cliAdd+0x3c>)
{
 800122c:	460e      	mov	r6, r1
  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 800122e:	f8b5 32e8 	ldrh.w	r3, [r5, #744]	; 0x2e8
 8001232:	2b0f      	cmp	r3, #15
 8001234:	d814      	bhi.n	8001260 <cliAdd+0x38>
  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 8001236:	2414      	movs	r4, #20
 8001238:	4601      	mov	r1, r0
 800123a:	435c      	muls	r4, r3
 800123c:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  p_cli->cmd_list[index].cmd_func = p_func;
 8001240:	442c      	add	r4, r5
  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 8001242:	442b      	add	r3, r5
 8001244:	4618      	mov	r0, r3
 8001246:	f005 fbff 	bl	8006a48 <strcpy>
  p_cli->cmd_list[index].cmd_func = p_func;
 800124a:	f8c4 62fc 	str.w	r6, [r4, #764]	; 0x2fc
  cliToUpper(p_cli->cmd_list[index].cmd_str);
 800124e:	f7ff fc6f 	bl	8000b30 <cliToUpper>
  p_cli->cmd_count++;
 8001252:	f8b5 32e8 	ldrh.w	r3, [r5, #744]	; 0x2e8
  return ret;
 8001256:	2001      	movs	r0, #1
  p_cli->cmd_count++;
 8001258:	3301      	adds	r3, #1
 800125a:	f8a5 32e8 	strh.w	r3, [r5, #744]	; 0x2e8
}
 800125e:	bd70      	pop	{r4, r5, r6, pc}
    return false;
 8001260:	2000      	movs	r0, #0
 8001262:	e7fc      	b.n	800125e <cliAdd+0x36>
 8001264:	200004e8 	.word	0x200004e8

08001268 <cliInit>:
{
 8001268:	b510      	push	{r4, lr}
  cli_node.cmd_args.getData  = cliArgsGetData;
 800126a:	4a1a      	ldr	r2, [pc, #104]	; (80012d4 <cliInit+0x6c>)
  cli_node.is_open = false;
 800126c:	2300      	movs	r3, #0
 800126e:	4c1a      	ldr	r4, [pc, #104]	; (80012d8 <cliInit+0x70>)
  cliAdd("help", cliShowList);
 8001270:	491a      	ldr	r1, [pc, #104]	; (80012dc <cliInit+0x74>)
  cli_node.cmd_args.getData  = cliArgsGetData;
 8001272:	f8c4 2434 	str.w	r2, [r4, #1076]	; 0x434
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 8001276:	4a1a      	ldr	r2, [pc, #104]	; (80012e0 <cliInit+0x78>)
  cliAdd("help", cliShowList);
 8001278:	481a      	ldr	r0, [pc, #104]	; (80012e4 <cliInit+0x7c>)
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 800127a:	f8c4 2438 	str.w	r2, [r4, #1080]	; 0x438
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 800127e:	4a1a      	ldr	r2, [pc, #104]	; (80012e8 <cliInit+0x80>)
  cli_node.is_open = false;
 8001280:	8123      	strh	r3, [r4, #8]
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 8001282:	f8c4 243c 	str.w	r2, [r4, #1084]	; 0x43c
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 8001286:	4a19      	ldr	r2, [pc, #100]	; (80012ec <cliInit+0x84>)
  cli_node.state   = CLI_RX_IDLE;
 8001288:	7423      	strb	r3, [r4, #16]
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 800128a:	f8c4 2440 	str.w	r2, [r4, #1088]	; 0x440
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 800128e:	223f      	movs	r2, #63	; 0x3f
  cli_node.hist_line_new   = false;
 8001290:	f8c4 3194 	str.w	r3, [r4, #404]	; 0x194
  p_cli->line.count   = 0;
 8001294:	f884 32e6 	strb.w	r3, [r4, #742]	; 0x2e6
  p_cli->line.buf[0]  = 0;
 8001298:	f884 32a4 	strb.w	r3, [r4, #676]	; 0x2a4
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 800129c:	f8a4 22e4 	strh.w	r2, [r4, #740]	; 0x2e4
  cliAdd("help", cliShowList);
 80012a0:	f7ff ffc2 	bl	8001228 <cliAdd>
  cliAdd("md8"  , cliMemoryDump);
 80012a4:	4912      	ldr	r1, [pc, #72]	; (80012f0 <cliInit+0x88>)
 80012a6:	4813      	ldr	r0, [pc, #76]	; (80012f4 <cliInit+0x8c>)
 80012a8:	f7ff ffbe 	bl	8001228 <cliAdd>
  cliAdd("mw8", cliMemoryWrite);
 80012ac:	4912      	ldr	r1, [pc, #72]	; (80012f8 <cliInit+0x90>)
 80012ae:	4813      	ldr	r0, [pc, #76]	; (80012fc <cliInit+0x94>)
 80012b0:	f7ff ffba 	bl	8001228 <cliAdd>
  cliAdd("reset",cliReset);
 80012b4:	4912      	ldr	r1, [pc, #72]	; (8001300 <cliInit+0x98>)
 80012b6:	4813      	ldr	r0, [pc, #76]	; (8001304 <cliInit+0x9c>)
 80012b8:	f7ff ffb6 	bl	8001228 <cliAdd>
  cliAdd("boot",BootApplication);
 80012bc:	4912      	ldr	r1, [pc, #72]	; (8001308 <cliInit+0xa0>)
 80012be:	4813      	ldr	r0, [pc, #76]	; (800130c <cliInit+0xa4>)
 80012c0:	f7ff ffb2 	bl	8001228 <cliAdd>
  cli_node.ch = ch;
 80012c4:	2302      	movs	r3, #2
  cli_node.is_open = 1;
 80012c6:	2001      	movs	r0, #1
  cli_node.ch = ch;
 80012c8:	7023      	strb	r3, [r4, #0]
  cli_node.baud = baud;
 80012ca:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  cli_node.is_open = 1;
 80012ce:	7220      	strb	r0, [r4, #8]
  cli_node.baud = baud;
 80012d0:	6063      	str	r3, [r4, #4]
}
 80012d2:	bd10      	pop	{r4, pc}
 80012d4:	08000cb1 	.word	0x08000cb1
 80012d8:	200004e8 	.word	0x200004e8
 80012dc:	08000b75 	.word	0x08000b75
 80012e0:	08000c89 	.word	0x08000c89
 80012e4:	08009ca5 	.word	0x08009ca5
 80012e8:	08000b59 	.word	0x08000b59
 80012ec:	08000c5d 	.word	0x08000c5d
 80012f0:	08000d95 	.word	0x08000d95
 80012f4:	08009caa 	.word	0x08009caa
 80012f8:	08000bc5 	.word	0x08000bc5
 80012fc:	08009cae 	.word	0x08009cae
 8001300:	08000c1d 	.word	0x08000c1d
 8001304:	08009cb2 	.word	0x08009cb2
 8001308:	0800177d 	.word	0x0800177d
 800130c:	08009cb8 	.word	0x08009cb8

08001310 <flashInit>:
  {
    flash_tbl[i].addr   = 0x8000000 + i*1024;
    flash_tbl[i].length = 1024;
  }*/

  cliAdd("flash", cliFlash);
 8001310:	4903      	ldr	r1, [pc, #12]	; (8001320 <flashInit+0x10>)
 8001312:	4804      	ldr	r0, [pc, #16]	; (8001324 <flashInit+0x14>)
{
 8001314:	b508      	push	{r3, lr}
  cliAdd("flash", cliFlash);
 8001316:	f7ff ff87 	bl	8001228 <cliAdd>

  return true;
}
 800131a:	2001      	movs	r0, #1
 800131c:	bd08      	pop	{r3, pc}
 800131e:	bf00      	nop
 8001320:	08001449 	.word	0x08001449
 8001324:	08009cbd 	.word	0x08009cbd

08001328 <flashErase>:

bool flashErase(uint32_t addr, uint32_t length)
{
 8001328:	b573      	push	{r0, r1, r4, r5, r6, lr}
  bool ret = false;
  uint32_t page_error=0;
 800132a:	2400      	movs	r4, #0
{
 800132c:	4605      	mov	r5, r0
  uint32_t page_error=0;
 800132e:	9401      	str	r4, [sp, #4]
  int16_t  start_sector_num = -1;
  uint32_t sector_count = 0;

  uint32_t FirstSector = 0, NbOfSectors = 0;

    ret = HAL_FLASH_Unlock();
 8001330:	f001 f9bc 	bl	80026ac <HAL_FLASH_Unlock>
//    ret = HAL_FLASH_OB_Unlock();
    /* Get the Dual bank configuration status */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |
 8001334:	22f3      	movs	r2, #243	; 0xf3
 8001336:	4b33      	ldr	r3, [pc, #204]	; (8001404 <flashErase+0xdc>)
    ret = HAL_FLASH_Unlock();
 8001338:	4606      	mov	r6, r0
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |
 800133a:	60da      	str	r2, [r3, #12]

static uint32_t GetSector(uint32_t Address)
{
  uint32_t sector = 0;

  if((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0))
 800133c:	f105 4278 	add.w	r2, r5, #4160749568	; 0xf8000000
 8001340:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001344:	d335      	bcc.n	80013b2 <flashErase+0x8a>
  {
    sector = FLASH_SECTOR_0;
  }
  else if((Address < ADDR_FLASH_SECTOR_2) && (Address >= ADDR_FLASH_SECTOR_1))
 8001346:	f5a2 4300 	sub.w	r3, r2, #32768	; 0x8000
 800134a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800134e:	d346      	bcc.n	80013de <flashErase+0xb6>
  {
    sector = FLASH_SECTOR_1;
  }
  else if((Address < ADDR_FLASH_SECTOR_3) && (Address >= ADDR_FLASH_SECTOR_2))
 8001350:	f105 4377 	add.w	r3, r5, #4143972352	; 0xf7000000
 8001354:	f503 017f 	add.w	r1, r3, #16711680	; 0xff0000
 8001358:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800135c:	d341      	bcc.n	80013e2 <flashErase+0xba>
  {
    sector = FLASH_SECTOR_2;
  }
  else if((Address < ADDR_FLASH_SECTOR_4) && (Address >= ADDR_FLASH_SECTOR_3))
 800135e:	f5a2 32c0 	sub.w	r2, r2, #98304	; 0x18000
 8001362:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001366:	d33e      	bcc.n	80013e6 <flashErase+0xbe>
  {
    sector = FLASH_SECTOR_3;
  }
  else if((Address < ADDR_FLASH_SECTOR_5) && (Address >= ADDR_FLASH_SECTOR_4))
 8001368:	f503 027e 	add.w	r2, r3, #16646144	; 0xfe0000
 800136c:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8001370:	d33b      	bcc.n	80013ea <flashErase+0xc2>
  {
    sector = FLASH_SECTOR_4;
  }
  else if((Address < ADDR_FLASH_SECTOR_6) && (Address >= ADDR_FLASH_SECTOR_5))
 8001372:	f503 027c 	add.w	r2, r3, #16515072	; 0xfc0000
 8001376:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 800137a:	d338      	bcc.n	80013ee <flashErase+0xc6>
  {
    sector = FLASH_SECTOR_5;
  }
  else if((Address < ADDR_FLASH_SECTOR_7) && (Address >= ADDR_FLASH_SECTOR_6))
 800137c:	f503 0278 	add.w	r2, r3, #16252928	; 0xf80000
 8001380:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8001384:	d335      	bcc.n	80013f2 <flashErase+0xca>
  {
    sector = FLASH_SECTOR_6;
  }
  else if((Address < ADDR_FLASH_SECTOR_8) && (Address >= ADDR_FLASH_SECTOR_7))
 8001386:	f503 0274 	add.w	r2, r3, #15990784	; 0xf40000
 800138a:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 800138e:	d332      	bcc.n	80013f6 <flashErase+0xce>
  {
    sector = FLASH_SECTOR_7;
  }
  else if((Address < ADDR_FLASH_SECTOR_9) && (Address >= ADDR_FLASH_SECTOR_8))
 8001390:	f1a5 6501 	sub.w	r5, r5, #135266304	; 0x8100000
 8001394:	f5b5 2f80 	cmp.w	r5, #262144	; 0x40000
 8001398:	d32f      	bcc.n	80013fa <flashErase+0xd2>
  {
    sector = FLASH_SECTOR_8;
  }
  else if((Address < ADDR_FLASH_SECTOR_10) && (Address >= ADDR_FLASH_SECTOR_9))
 800139a:	f503 026c 	add.w	r2, r3, #15466496	; 0xec0000
 800139e:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 80013a2:	d32c      	bcc.n	80013fe <flashErase+0xd6>
  {
    sector = FLASH_SECTOR_9;
  }
  else if((Address < ADDR_FLASH_SECTOR_11) && (Address >= ADDR_FLASH_SECTOR_10))
 80013a4:	f503 0368 	add.w	r3, r3, #15204352	; 0xe80000
    sector = FLASH_SECTOR_23;
  }
#else
  else /* (Address < FLASH_END_ADDR) && (Address >= ADDR_FLASH_SECTOR_11) */
  {
    sector = FLASH_SECTOR_11;
 80013a8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80013ac:	bf34      	ite	cc
 80013ae:	240a      	movcc	r4, #10
 80013b0:	240b      	movcs	r4, #11
    init.TypeErase      = FLASH_TYPEERASE_SECTORS;
 80013b2:	4815      	ldr	r0, [pc, #84]	; (8001408 <flashErase+0xe0>)
 80013b4:	2200      	movs	r2, #0
    status = HAL_FLASHEx_Erase(&init, &page_error);
 80013b6:	a901      	add	r1, sp, #4
    init.TypeErase      = FLASH_TYPEERASE_SECTORS;
 80013b8:	6002      	str	r2, [r0, #0]
    init.VoltageRange   = FLASH_VOLTAGE_RANGE_3; // FLASH_BANK_1;
 80013ba:	2202      	movs	r2, #2
    init.Sector 		= FirstSector; // 지우기 시작할 페이지
 80013bc:	6084      	str	r4, [r0, #8]
    init.NbSectors      = NbOfSectors; // 지울 페이지 수
 80013be:	2401      	movs	r4, #1
    init.VoltageRange   = FLASH_VOLTAGE_RANGE_3; // FLASH_BANK_1;
 80013c0:	6102      	str	r2, [r0, #16]
    init.NbSectors      = NbOfSectors; // 지울 페이지 수
 80013c2:	60c4      	str	r4, [r0, #12]
    status = HAL_FLASHEx_Erase(&init, &page_error);
 80013c4:	f001 fa40 	bl	8002848 <HAL_FLASHEx_Erase>
 80013c8:	4b10      	ldr	r3, [pc, #64]	; (800140c <flashErase+0xe4>)
 80013ca:	7018      	strb	r0, [r3, #0]
    if (status == HAL_OK)
 80013cc:	b110      	cbz	r0, 80013d4 <flashErase+0xac>
    ret = HAL_FLASH_Unlock();
 80013ce:	1e34      	subs	r4, r6, #0
 80013d0:	bf18      	it	ne
 80013d2:	2401      	movne	r4, #1
    HAL_FLASH_Lock();
 80013d4:	f001 f97c 	bl	80026d0 <HAL_FLASH_Lock>
}
 80013d8:	4620      	mov	r0, r4
 80013da:	b002      	add	sp, #8
 80013dc:	bd70      	pop	{r4, r5, r6, pc}
    sector = FLASH_SECTOR_1;
 80013de:	2401      	movs	r4, #1
 80013e0:	e7e7      	b.n	80013b2 <flashErase+0x8a>
    sector = FLASH_SECTOR_2;
 80013e2:	2402      	movs	r4, #2
 80013e4:	e7e5      	b.n	80013b2 <flashErase+0x8a>
    sector = FLASH_SECTOR_3;
 80013e6:	2403      	movs	r4, #3
 80013e8:	e7e3      	b.n	80013b2 <flashErase+0x8a>
    sector = FLASH_SECTOR_4;
 80013ea:	2404      	movs	r4, #4
 80013ec:	e7e1      	b.n	80013b2 <flashErase+0x8a>
    sector = FLASH_SECTOR_5;
 80013ee:	2405      	movs	r4, #5
 80013f0:	e7df      	b.n	80013b2 <flashErase+0x8a>
    sector = FLASH_SECTOR_6;
 80013f2:	2406      	movs	r4, #6
 80013f4:	e7dd      	b.n	80013b2 <flashErase+0x8a>
    sector = FLASH_SECTOR_7;
 80013f6:	2407      	movs	r4, #7
 80013f8:	e7db      	b.n	80013b2 <flashErase+0x8a>
    sector = FLASH_SECTOR_8;
 80013fa:	2408      	movs	r4, #8
 80013fc:	e7d9      	b.n	80013b2 <flashErase+0x8a>
    sector = FLASH_SECTOR_9;
 80013fe:	2409      	movs	r4, #9
 8001400:	e7d7      	b.n	80013b2 <flashErase+0x8a>
 8001402:	bf00      	nop
 8001404:	40023c00 	.word	0x40023c00
 8001408:	2000092c 	.word	0x2000092c
 800140c:	20000960 	.word	0x20000960

08001410 <flashWrite>:
{
 8001410:	b570      	push	{r4, r5, r6, lr}
 8001412:	4604      	mov	r4, r0
 8001414:	460d      	mov	r5, r1
 8001416:	4616      	mov	r6, r2
  HAL_FLASH_Unlock();
 8001418:	f001 f948 	bl	80026ac <HAL_FLASH_Unlock>
  for (int i=0; i<length; i+=1) //i+2
 800141c:	3d01      	subs	r5, #1
 800141e:	4426      	add	r6, r4
 8001420:	42b4      	cmp	r4, r6
 8001422:	d104      	bne.n	800142e <flashWrite+0x1e>
  bool ret = true;
 8001424:	2401      	movs	r4, #1
  HAL_FLASH_Lock();
 8001426:	f001 f953 	bl	80026d0 <HAL_FLASH_Lock>
}
 800142a:	4620      	mov	r0, r4
 800142c:	bd70      	pop	{r4, r5, r6, pc}
    status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, addr + i, (uint64_t)data);
 800142e:	4621      	mov	r1, r4
 8001430:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8001434:	2300      	movs	r3, #0
 8001436:	2000      	movs	r0, #0
 8001438:	3401      	adds	r4, #1
 800143a:	f001 f97f 	bl	800273c <HAL_FLASH_Program>
    if (status != HAL_OK)
 800143e:	2800      	cmp	r0, #0
 8001440:	d0ee      	beq.n	8001420 <flashWrite+0x10>
      ret = false;
 8001442:	2400      	movs	r4, #0
 8001444:	e7ef      	b.n	8001426 <flashWrite+0x16>
	...

08001448 <cliFlash>:
{
  bool ret = false;



  if (args->argc == 1 && args->isStr(0, "info") == true)
 8001448:	8803      	ldrh	r3, [r0, #0]
 800144a:	2b01      	cmp	r3, #1
{
 800144c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001450:	4604      	mov	r4, r0
  if (args->argc == 1 && args->isStr(0, "info") == true)
 8001452:	d15e      	bne.n	8001512 <cliFlash+0xca>
 8001454:	6943      	ldr	r3, [r0, #20]
 8001456:	2000      	movs	r0, #0
 8001458:	493b      	ldr	r1, [pc, #236]	; (8001548 <cliFlash+0x100>)
 800145a:	4798      	blx	r3
 800145c:	4605      	mov	r5, r0
 800145e:	2800      	cmp	r0, #0
 8001460:	d057      	beq.n	8001512 <cliFlash+0xca>
 8001462:	4f3a      	ldr	r7, [pc, #232]	; (800154c <cliFlash+0x104>)
  {
    for (int i=0; i<FLASH_SECTOR_MAX; i++)
 8001464:	2600      	movs	r6, #0
    {
      cliPrintf("0x%X : %dKB\r\n", flash_tbl[i].addr, flash_tbl[i].length/1024);
 8001466:	f8df 8114 	ldr.w	r8, [pc, #276]	; 800157c <cliFlash+0x134>
 800146a:	687a      	ldr	r2, [r7, #4]
    for (int i=0; i<FLASH_SECTOR_MAX; i++)
 800146c:	3601      	adds	r6, #1
      cliPrintf("0x%X : %dKB\r\n", flash_tbl[i].addr, flash_tbl[i].length/1024);
 800146e:	f857 1b08 	ldr.w	r1, [r7], #8
 8001472:	4640      	mov	r0, r8
 8001474:	0a92      	lsrs	r2, r2, #10
 8001476:	f7ff fc73 	bl	8000d60 <cliPrintf>
    for (int i=0; i<FLASH_SECTOR_MAX; i++)
 800147a:	2e0c      	cmp	r6, #12
 800147c:	d1f5      	bne.n	800146a <cliFlash+0x22>
    }

    ret = true;
  }

  if (args->argc == 3 && args->isStr(0, "read") == true)
 800147e:	8823      	ldrh	r3, [r4, #0]
 8001480:	2b03      	cmp	r3, #3
 8001482:	d112      	bne.n	80014aa <cliFlash+0x62>
 8001484:	6963      	ldr	r3, [r4, #20]
 8001486:	2000      	movs	r0, #0
 8001488:	4931      	ldr	r1, [pc, #196]	; (8001550 <cliFlash+0x108>)
 800148a:	4798      	blx	r3
 800148c:	4606      	mov	r6, r0
 800148e:	b160      	cbz	r0, 80014aa <cliFlash+0x62>
  {
    uint32_t addr;
    uint32_t length;

    addr   = (uint32_t)args->getData(1);
 8001490:	68a3      	ldr	r3, [r4, #8]
 8001492:	2001      	movs	r0, #1
 8001494:	4798      	blx	r3
 8001496:	4605      	mov	r5, r0
    length = (uint32_t)args->getData(2);
 8001498:	68a3      	ldr	r3, [r4, #8]
 800149a:	2002      	movs	r0, #2
 800149c:	4798      	blx	r3

    for (int i=0; i<length; i++)
    {
      cliPrintf("0x%X : 0x%X\r\n", addr+i, *((uint8_t *)(addr+i)));
 800149e:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8001580 <cliFlash+0x138>
 80014a2:	1947      	adds	r7, r0, r5
    for (int i=0; i<length; i++)
 80014a4:	42bd      	cmp	r5, r7
 80014a6:	d136      	bne.n	8001516 <cliFlash+0xce>
    }

    ret = true;
 80014a8:	4635      	mov	r5, r6
  }

  if (args->argc == 3 && args->isStr(0, "erase") == true)
 80014aa:	8823      	ldrh	r3, [r4, #0]
 80014ac:	2b03      	cmp	r3, #3
 80014ae:	d13d      	bne.n	800152c <cliFlash+0xe4>
 80014b0:	6963      	ldr	r3, [r4, #20]
 80014b2:	2000      	movs	r0, #0
 80014b4:	4927      	ldr	r1, [pc, #156]	; (8001554 <cliFlash+0x10c>)
 80014b6:	4798      	blx	r3
 80014b8:	b170      	cbz	r0, 80014d8 <cliFlash+0x90>
  {
    uint32_t addr;
    uint32_t length;

    addr   = (uint32_t)args->getData(1);
 80014ba:	68a3      	ldr	r3, [r4, #8]
 80014bc:	2001      	movs	r0, #1
 80014be:	4798      	blx	r3
 80014c0:	4606      	mov	r6, r0
    length = (uint32_t)args->getData(2);
 80014c2:	68a3      	ldr	r3, [r4, #8]
 80014c4:	2002      	movs	r0, #2
 80014c6:	4798      	blx	r3
 80014c8:	4601      	mov	r1, r0

    if (flashErase(addr, length) == true)
 80014ca:	4630      	mov	r0, r6
 80014cc:	f7ff ff2c 	bl	8001328 <flashErase>
 80014d0:	b340      	cbz	r0, 8001524 <cliFlash+0xdc>
    {
      cliPrintf("Erase OK\r\n");
 80014d2:	4821      	ldr	r0, [pc, #132]	; (8001558 <cliFlash+0x110>)
    }
    else
    {
      cliPrintf("Erase Fail\r\n");
 80014d4:	f7ff fc44 	bl	8000d60 <cliPrintf>
    }
  }

  if (args->argc == 3 && args->isStr(0, "write") == true)
 80014d8:	8823      	ldrh	r3, [r4, #0]
 80014da:	2b03      	cmp	r3, #3
 80014dc:	d126      	bne.n	800152c <cliFlash+0xe4>
 80014de:	6963      	ldr	r3, [r4, #20]
 80014e0:	2000      	movs	r0, #0
 80014e2:	491e      	ldr	r1, [pc, #120]	; (800155c <cliFlash+0x114>)
 80014e4:	4798      	blx	r3
 80014e6:	b308      	cbz	r0, 800152c <cliFlash+0xe4>
  {
    uint32_t addr;
    uint32_t data;

    addr   = (uint32_t)args->getData(1);
 80014e8:	68a3      	ldr	r3, [r4, #8]
 80014ea:	2001      	movs	r0, #1
 80014ec:	4798      	blx	r3
    data   = (uint32_t)args->getData(2);
 80014ee:	68a3      	ldr	r3, [r4, #8]
    addr   = (uint32_t)args->getData(1);
 80014f0:	4605      	mov	r5, r0
    data   = (uint32_t)args->getData(2);
 80014f2:	2002      	movs	r0, #2
 80014f4:	4798      	blx	r3

    if (flashWrite(addr, (uint8_t *)&data, 4) == true)
 80014f6:	2204      	movs	r2, #4
    data   = (uint32_t)args->getData(2);
 80014f8:	9001      	str	r0, [sp, #4]
    if (flashWrite(addr, (uint8_t *)&data, 4) == true)
 80014fa:	4628      	mov	r0, r5
 80014fc:	eb0d 0102 	add.w	r1, sp, r2
 8001500:	f7ff ff86 	bl	8001410 <flashWrite>
 8001504:	b180      	cbz	r0, 8001528 <cliFlash+0xe0>
    {
      cliPrintf("Write OK\r\n");
 8001506:	4816      	ldr	r0, [pc, #88]	; (8001560 <cliFlash+0x118>)
  if (ret != true)
  {
    cliPrintf("flash info\r\n");
    cliPrintf("flash read  addr length\r\n");
    cliPrintf("flash erase addr length\r\n");
    cliPrintf("flash write addr data\r\n");
 8001508:	f7ff fc2a 	bl	8000d60 <cliPrintf>
  }
}
 800150c:	b002      	add	sp, #8
 800150e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  bool ret = false;
 8001512:	2500      	movs	r5, #0
 8001514:	e7b3      	b.n	800147e <cliFlash+0x36>
      cliPrintf("0x%X : 0x%X\r\n", addr+i, *((uint8_t *)(addr+i)));
 8001516:	782a      	ldrb	r2, [r5, #0]
 8001518:	4629      	mov	r1, r5
 800151a:	4640      	mov	r0, r8
 800151c:	3501      	adds	r5, #1
 800151e:	f7ff fc1f 	bl	8000d60 <cliPrintf>
    for (int i=0; i<length; i++)
 8001522:	e7bf      	b.n	80014a4 <cliFlash+0x5c>
      cliPrintf("Erase Fail\r\n");
 8001524:	480f      	ldr	r0, [pc, #60]	; (8001564 <cliFlash+0x11c>)
 8001526:	e7d5      	b.n	80014d4 <cliFlash+0x8c>
      cliPrintf("Write Fail\r\n");
 8001528:	480f      	ldr	r0, [pc, #60]	; (8001568 <cliFlash+0x120>)
 800152a:	e7ed      	b.n	8001508 <cliFlash+0xc0>
  if (ret != true)
 800152c:	2d00      	cmp	r5, #0
 800152e:	d1ed      	bne.n	800150c <cliFlash+0xc4>
    cliPrintf("flash info\r\n");
 8001530:	480e      	ldr	r0, [pc, #56]	; (800156c <cliFlash+0x124>)
 8001532:	f7ff fc15 	bl	8000d60 <cliPrintf>
    cliPrintf("flash read  addr length\r\n");
 8001536:	480e      	ldr	r0, [pc, #56]	; (8001570 <cliFlash+0x128>)
 8001538:	f7ff fc12 	bl	8000d60 <cliPrintf>
    cliPrintf("flash erase addr length\r\n");
 800153c:	480d      	ldr	r0, [pc, #52]	; (8001574 <cliFlash+0x12c>)
 800153e:	f7ff fc0f 	bl	8000d60 <cliPrintf>
    cliPrintf("flash write addr data\r\n");
 8001542:	480d      	ldr	r0, [pc, #52]	; (8001578 <cliFlash+0x130>)
 8001544:	e7e0      	b.n	8001508 <cliFlash+0xc0>
 8001546:	bf00      	nop
 8001548:	08009cc3 	.word	0x08009cc3
 800154c:	08009d80 	.word	0x08009d80
 8001550:	08009cd6 	.word	0x08009cd6
 8001554:	08009ce9 	.word	0x08009ce9
 8001558:	08009cef 	.word	0x08009cef
 800155c:	08009d07 	.word	0x08009d07
 8001560:	08009d0d 	.word	0x08009d0d
 8001564:	08009cfa 	.word	0x08009cfa
 8001568:	08009d18 	.word	0x08009d18
 800156c:	08009d25 	.word	0x08009d25
 8001570:	08009d32 	.word	0x08009d32
 8001574:	08009d4c 	.word	0x08009d4c
 8001578:	08009d66 	.word	0x08009d66
 800157c:	08009cc8 	.word	0x08009cc8
 8001580:	08009cdb 	.word	0x08009cdb

08001584 <__io_putchar>:
static void CPU_CACHE_Enable(void);
void SystemClock_config(void);


int __io_putchar(int ch)
{
 8001584:	b507      	push	{r0, r1, r2, lr}
  uartWrite(2, (uint8_t *)&ch, 1);
 8001586:	2201      	movs	r2, #1
{
 8001588:	9001      	str	r0, [sp, #4]
  uartWrite(2, (uint8_t *)&ch, 1);
 800158a:	a901      	add	r1, sp, #4
 800158c:	2002      	movs	r0, #2
 800158e:	f000 f9bf 	bl	8001910 <uartWrite>
  return 1;
}
 8001592:	2001      	movs	r0, #1
 8001594:	b003      	add	sp, #12
 8001596:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800159c <MX_GPIO_Init>:
}
*/


void MX_GPIO_Init(void)
{
 800159c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800159e:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a0:	2214      	movs	r2, #20
 80015a2:	2100      	movs	r1, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80015a4:	4f3e      	ldr	r7, [pc, #248]	; (80016a0 <MX_GPIO_Init+0x104>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a6:	a807      	add	r0, sp, #28

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80015a8:	4d3e      	ldr	r5, [pc, #248]	; (80016a4 <MX_GPIO_Init+0x108>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015aa:	f005 f8e7 	bl	800677c <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ae:	4b3e      	ldr	r3, [pc, #248]	; (80016a8 <MX_GPIO_Init+0x10c>)
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80015b0:	4638      	mov	r0, r7
 80015b2:	f244 0181 	movw	r1, #16513	; 0x4081
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2400      	movs	r4, #0
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ba:	2601      	movs	r6, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015bc:	f042 0204 	orr.w	r2, r2, #4
 80015c0:	631a      	str	r2, [r3, #48]	; 0x30
 80015c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015c4:	f002 0204 	and.w	r2, r2, #4
 80015c8:	9201      	str	r2, [sp, #4]
 80015ca:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015d2:	631a      	str	r2, [r3, #48]	; 0x30
 80015d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015d6:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80015da:	9202      	str	r2, [sp, #8]
 80015dc:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015e0:	f042 0201 	orr.w	r2, r2, #1
 80015e4:	631a      	str	r2, [r3, #48]	; 0x30
 80015e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015e8:	f002 0201 	and.w	r2, r2, #1
 80015ec:	9203      	str	r2, [sp, #12]
 80015ee:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015f2:	f042 0202 	orr.w	r2, r2, #2
 80015f6:	631a      	str	r2, [r3, #48]	; 0x30
 80015f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015fa:	f002 0202 	and.w	r2, r2, #2
 80015fe:	9204      	str	r2, [sp, #16]
 8001600:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001602:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001604:	f042 0208 	orr.w	r2, r2, #8
 8001608:	631a      	str	r2, [r3, #48]	; 0x30
 800160a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800160c:	f002 0208 	and.w	r2, r2, #8
 8001610:	9205      	str	r2, [sp, #20]
 8001612:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001614:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001616:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800161a:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800161c:	2200      	movs	r2, #0
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800161e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001624:	9306      	str	r3, [sp, #24]
 8001626:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001628:	f001 fae6 	bl	8002bf8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800162c:	4628      	mov	r0, r5
 800162e:	2200      	movs	r2, #0
 8001630:	2140      	movs	r1, #64	; 0x40
 8001632:	f001 fae1 	bl	8002bf8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001636:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800163a:	4b1c      	ldr	r3, [pc, #112]	; (80016ac <MX_GPIO_Init+0x110>)
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800163c:	a907      	add	r1, sp, #28
 800163e:	481c      	ldr	r0, [pc, #112]	; (80016b0 <MX_GPIO_Init+0x114>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001642:	e9cd 2307 	strd	r2, r3, [sp, #28]
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001646:	f001 f94f 	bl	80028e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164a:	f244 0381 	movw	r3, #16513	; 0x4081
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800164e:	a907      	add	r1, sp, #28
 8001650:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001652:	e9cd 3607 	strd	r3, r6, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001656:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800165a:	f001 f945 	bl	80028e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800165e:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001660:	a907      	add	r1, sp, #28
 8001662:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001664:	e9cd 3607 	strd	r3, r6, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001668:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800166c:	f001 f93c 	bl	80028e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001670:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001672:	a907      	add	r1, sp, #28
 8001674:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001678:	e9cd 3407 	strd	r3, r4, [sp, #28]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800167c:	f001 f934 	bl	80028e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001680:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001684:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001686:	2003      	movs	r0, #3
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168a:	e9cd 1307 	strd	r1, r3, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800168e:	2308      	movs	r3, #8
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001690:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001692:	e9cd 030a 	strd	r0, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001696:	4628      	mov	r0, r5
 8001698:	f001 f926 	bl	80028e8 <HAL_GPIO_Init>

}
 800169c:	b00d      	add	sp, #52	; 0x34
 800169e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016a0:	40020400 	.word	0x40020400
 80016a4:	40021800 	.word	0x40021800
 80016a8:	40023800 	.word	0x40023800
 80016ac:	10110000 	.word	0x10110000
 80016b0:	40020800 	.word	0x40020800

080016b4 <SystemClock_Config>:

void SystemClock_Config(void)
{
 80016b4:	b510      	push	{r4, lr}
 80016b6:	b0b8      	sub	sp, #224	; 0xe0
   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016b8:	2234      	movs	r2, #52	; 0x34
 80016ba:	2100      	movs	r1, #0
 80016bc:	a807      	add	r0, sp, #28
 80016be:	f005 f85d 	bl	800677c <memset>
   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016c2:	2214      	movs	r2, #20
 80016c4:	2100      	movs	r1, #0
 80016c6:	a802      	add	r0, sp, #8
 80016c8:	f005 f858 	bl	800677c <memset>
   RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016cc:	2290      	movs	r2, #144	; 0x90
 80016ce:	2100      	movs	r1, #0
 80016d0:	a814      	add	r0, sp, #80	; 0x50
 80016d2:	f005 f853 	bl	800677c <memset>

   /** Configure LSE Drive Capability
   */
   HAL_PWR_EnableBkUpAccess();
 80016d6:	f001 ff77 	bl	80035c8 <HAL_PWR_EnableBkUpAccess>
   /** Configure the main internal regulator output voltage
   */
   __HAL_RCC_PWR_CLK_ENABLE();
 80016da:	4b25      	ldr	r3, [pc, #148]	; (8001770 <SystemClock_Config+0xbc>)
   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
   /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
   RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80016dc:	2101      	movs	r1, #1
   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
   RCC_OscInitStruct.PLL.PLLM = 4;
   RCC_OscInitStruct.PLL.PLLN = 216;
 80016de:	2004      	movs	r0, #4
   __HAL_RCC_PWR_CLK_ENABLE();
 80016e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016e2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80016e6:	641a      	str	r2, [r3, #64]	; 0x40
 80016e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ee:	9300      	str	r3, [sp, #0]
 80016f0:	9b00      	ldr	r3, [sp, #0]
   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016f2:	4b20      	ldr	r3, [pc, #128]	; (8001774 <SystemClock_Config+0xc0>)
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80016fa:	601a      	str	r2, [r3, #0]
   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016fc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001706:	9301      	str	r3, [sp, #4]
 8001708:	9b01      	ldr	r3, [sp, #4]
   RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800170a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800170e:	e9cd 1307 	strd	r1, r3, [sp, #28]
   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001712:	2302      	movs	r3, #2
 8001714:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
   RCC_OscInitStruct.PLL.PLLN = 216;
 8001718:	22d8      	movs	r2, #216	; 0xd8
   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800171a:	9311      	str	r3, [sp, #68]	; 0x44
   RCC_OscInitStruct.PLL.PLLQ = 9;
 800171c:	2309      	movs	r3, #9
   RCC_OscInitStruct.PLL.PLLN = 216;
 800171e:	e9cd 020f 	strd	r0, r2, [sp, #60]	; 0x3c
   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001722:	a807      	add	r0, sp, #28
   RCC_OscInitStruct.PLL.PLLQ = 9;
 8001724:	9312      	str	r3, [sp, #72]	; 0x48
   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001726:	f002 f829 	bl	800377c <HAL_RCC_OscConfig>
 800172a:	b100      	cbz	r0, 800172e <SystemClock_Config+0x7a>
  __ASM volatile ("cpsid i" : : : "memory");
 800172c:	b672      	cpsid	i
   {
	 Error_Handler();
   }
   /** Activate the Over-Drive mode
   */
   if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800172e:	f001 ff53 	bl	80035d8 <HAL_PWREx_EnableOverDrive>
 8001732:	b100      	cbz	r0, 8001736 <SystemClock_Config+0x82>
 8001734:	b672      	cpsid	i
   }
   /** Initializes the CPU, AHB and APB buses clocks
   */
   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
							   |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001736:	2302      	movs	r3, #2
 8001738:	220f      	movs	r2, #15
   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800173a:	2400      	movs	r4, #0
   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800173c:	2107      	movs	r1, #7
 800173e:	a802      	add	r0, sp, #8
   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001740:	e9cd 2302 	strd	r2, r3, [sp, #8]
   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001744:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001748:	e9cd 4304 	strd	r4, r3, [sp, #16]
   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800174c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001750:	9306      	str	r3, [sp, #24]
   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001752:	f002 fa07 	bl	8003b64 <HAL_RCC_ClockConfig>
 8001756:	b100      	cbz	r0, 800175a <SystemClock_Config+0xa6>
 8001758:	b672      	cpsid	i
   {
	 Error_Handler();
   }
   PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 800175a:	4b07      	ldr	r3, [pc, #28]	; (8001778 <SystemClock_Config+0xc4>)
   PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
   PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800175c:	a814      	add	r0, sp, #80	; 0x50
   PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800175e:	9427      	str	r4, [sp, #156]	; 0x9c
   PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8001760:	9314      	str	r3, [sp, #80]	; 0x50
   PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001762:	9433      	str	r4, [sp, #204]	; 0xcc
   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001764:	f002 fac4 	bl	8003cf0 <HAL_RCCEx_PeriphCLKConfig>
 8001768:	b100      	cbz	r0, 800176c <SystemClock_Config+0xb8>
 800176a:	b672      	cpsid	i
   {
	 Error_Handler();
   }
}
 800176c:	b038      	add	sp, #224	; 0xe0
 800176e:	bd10      	pop	{r4, pc}
 8001770:	40023800 	.word	0x40023800
 8001774:	40007000 	.word	0x40007000
 8001778:	00200100 	.word	0x00200100

0800177c <BootApplication>:
//Serial_PutString((uint8_t *)"\r\n=    STM32F7xx In-Application Programming Application    =");
//Serial_PutString((uint8_t *)"\r\n==========================================================\r\n");


int32_t BootApplication(void)
{
 800177c:	b538      	push	{r3, r4, r5, lr}
	//if(DiagFlash_CheckImage(0x8010000) == 0)
	//{
	uint32_t JumpAddress;

	 	JumpAddress = *(__IO uint32_t*) (0x8010000+4);
 800177e:	4c0e      	ldr	r4, [pc, #56]	; (80017b8 <BootApplication+0x3c>)
		printf("\r\nBooting at 0x%08X...\r\n\r\n", (void*)JumpAddress);
 8001780:	480e      	ldr	r0, [pc, #56]	; (80017bc <BootApplication+0x40>)
	 	JumpAddress = *(__IO uint32_t*) (0x8010000+4);
 8001782:	6821      	ldr	r1, [r4, #0]
		printf("\r\nBooting at 0x%08X...\r\n\r\n", (void*)JumpAddress);
 8001784:	f005 f8ac 	bl	80068e0 <iprintf>

//		  USBD_DeInit();
		  HAL_RCC_DeInit();
 8001788:	f001 ff5e 	bl	8003648 <HAL_RCC_DeInit>

		  // Disable Interrupts
		  //
		  for (int i=0; i<8; i++)
 800178c:	2300      	movs	r3, #0
		  {
			NVIC->ICER[i] = 0xFFFFFFFF;
 800178e:	4a0c      	ldr	r2, [pc, #48]	; (80017c0 <BootApplication+0x44>)
 8001790:	f04f 30ff 	mov.w	r0, #4294967295
 8001794:	f103 0120 	add.w	r1, r3, #32
 8001798:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800179c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80017a0:	f3bf 8f6f 	isb	sy
		  for (int i=0; i<8; i++)
 80017a4:	3301      	adds	r3, #1
 80017a6:	2b08      	cmp	r3, #8
 80017a8:	d1f4      	bne.n	8001794 <BootApplication+0x18>
			__DSB();
			__ISB();
		  }
		  SysTick->CTRL = 0;
 80017aa:	2500      	movs	r5, #0
 80017ac:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <BootApplication+0x48>)
 80017ae:	601d      	str	r5, [r3, #0]

		void (**jump_func)(void) = (void (**)(void))(0x8010000 + 4);

		(*jump_func)();
 80017b0:	6823      	ldr	r3, [r4, #0]
 80017b2:	4798      	blx	r3
	else
	{
		printf("\r\nCannot boot at 0x%08X, image has been corrupted\r\n\r\n", (void*)JumpAddress);
		return(-1);
	}*/
}
 80017b4:	4628      	mov	r0, r5
 80017b6:	bd38      	pop	{r3, r4, r5, pc}
 80017b8:	08010004 	.word	0x08010004
 80017bc:	08009de0 	.word	0x08009de0
 80017c0:	e000e100 	.word	0xe000e100
 80017c4:	e000e010 	.word	0xe000e010

080017c8 <millis>:
{
	HAL_Delay(ms);
}
uint32_t millis(void)
{
	return HAL_GetTick();
 80017c8:	f000 bc46 	b.w	8002058 <HAL_GetTick>

080017cc <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 80017cc:	b672      	cpsid	i

void Error_Handler(void)
{
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
}
 80017ce:	4770      	bx	lr

080017d0 <main>:

int main(void)
{
 80017d0:	b538      	push	{r3, r4, r5, lr}
	uint32_t k=16;

//	CPU_CACHE_Enable();


	HAL_Init();
 80017d2:	f000 fc29 	bl	8002028 <HAL_Init>
	  while(1)
	  {
		  if(millis()-pre_time >= 500)
		  {
			  pre_time = millis();
			  HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 80017d6:	4d1b      	ldr	r5, [pc, #108]	; (8001844 <main+0x74>)
	SystemClock_Config();
 80017d8:	f7ff ff6c 	bl	80016b4 <SystemClock_Config>
	MX_GPIO_Init();
 80017dc:	f7ff fede 	bl	800159c <MX_GPIO_Init>
	cdcInit();
 80017e0:	f7ff f99a 	bl	8000b18 <cdcInit>
	cliInit();
 80017e4:	f7ff fd40 	bl	8001268 <cliInit>
	MX_USB_DEVICE_Init();
 80017e8:	f004 fc24 	bl	8006034 <MX_USB_DEVICE_Init>
	uartOpen(1,51200);
 80017ec:	f44f 4148 	mov.w	r1, #51200	; 0xc800
 80017f0:	2001      	movs	r0, #1
 80017f2:	f000 f8c1 	bl	8001978 <uartOpen>
	uartOpen(2,115200);
 80017f6:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80017fa:	2002      	movs	r0, #2
 80017fc:	f000 f8bc 	bl	8001978 <uartOpen>
	flashInit();
 8001800:	f7ff fd86 	bl	8001310 <flashInit>
	ymodemInit();
 8001804:	f000 f9a4 	bl	8001b50 <ymodemInit>
	cliFlash();
 8001808:	f7ff fe1e 	bl	8001448 <cliFlash>
	 printf("start MCU\r\n");
 800180c:	480e      	ldr	r0, [pc, #56]	; (8001848 <main+0x78>)
 800180e:	f005 f903 	bl	8006a18 <puts>
	return HAL_GetTick();
 8001812:	f000 fc21 	bl	8002058 <HAL_GetTick>
	 printf("\r\n\r\n-- # booting (Compiled: %s %s) --\r\n", __DATE__, __TIME__);
 8001816:	4a0d      	ldr	r2, [pc, #52]	; (800184c <main+0x7c>)
	return HAL_GetTick();
 8001818:	4604      	mov	r4, r0
	 printf("\r\n\r\n-- # booting (Compiled: %s %s) --\r\n", __DATE__, __TIME__);
 800181a:	490d      	ldr	r1, [pc, #52]	; (8001850 <main+0x80>)
 800181c:	480d      	ldr	r0, [pc, #52]	; (8001854 <main+0x84>)
 800181e:	f005 f85f 	bl	80068e0 <iprintf>
	return HAL_GetTick();
 8001822:	f000 fc19 	bl	8002058 <HAL_GetTick>
		  if(millis()-pre_time >= 500)
 8001826:	1b00      	subs	r0, r0, r4
 8001828:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 800182c:	d306      	bcc.n	800183c <main+0x6c>
	return HAL_GetTick();
 800182e:	f000 fc13 	bl	8002058 <HAL_GetTick>
			  HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 8001832:	2101      	movs	r1, #1
	return HAL_GetTick();
 8001834:	4604      	mov	r4, r0
			  HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 8001836:	4628      	mov	r0, r5
 8001838:	f001 f9e3 	bl	8002c02 <HAL_GPIO_TogglePin>
		  }
//		  BootApplication();
		  cliMain();
 800183c:	f7ff fb10 	bl	8000e60 <cliMain>
	  {
 8001840:	e7ef      	b.n	8001822 <main+0x52>
 8001842:	bf00      	nop
 8001844:	40020400 	.word	0x40020400
 8001848:	08009dfb 	.word	0x08009dfb
 800184c:	08009e06 	.word	0x08009e06
 8001850:	08009e0f 	.word	0x08009e0f
 8001854:	08009e1b 	.word	0x08009e1b

08001858 <qbufferCreate>:

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
  bool ret = true;

  p_node->in    = 0;
 8001858:	2300      	movs	r3, #0
  p_node->out   = 0;
  p_node->len   = length;
  p_node->p_buf = p_buf;
 800185a:	e9c0 2102 	strd	r2, r1, [r0, #8]
  p_node->out   = 0;
 800185e:	e9c0 3300 	strd	r3, r3, [r0]

  return ret;
}
 8001862:	2001      	movs	r0, #1
 8001864:	4770      	bx	lr

08001866 <qbufferRead>:

  return ret;
}

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8001866:	b570      	push	{r4, r5, r6, lr}
  bool ret = true;

  for (int i=0; i<length; i++)
 8001868:	2400      	movs	r4, #0
 800186a:	42a2      	cmp	r2, r4
 800186c:	d101      	bne.n	8001872 <qbufferRead+0xc>
  bool ret = true;
 800186e:	2001      	movs	r0, #1
      ret = false;
      break;
    }
  }
  return ret;
}
 8001870:	bd70      	pop	{r4, r5, r6, pc}
    if (p_node->p_buf != NULL)
 8001872:	68c3      	ldr	r3, [r0, #12]
 8001874:	b113      	cbz	r3, 800187c <qbufferRead+0x16>
      p_data[i] = p_node->p_buf[p_node->out];
 8001876:	6845      	ldr	r5, [r0, #4]
 8001878:	5d5b      	ldrb	r3, [r3, r5]
 800187a:	550b      	strb	r3, [r1, r4]
    if (p_node->out != p_node->in)
 800187c:	e9d0 5300 	ldrd	r5, r3, [r0]
 8001880:	42ab      	cmp	r3, r5
 8001882:	d008      	beq.n	8001896 <qbufferRead+0x30>
      p_node->out = (p_node->out + 1) % p_node->len;
 8001884:	3301      	adds	r3, #1
 8001886:	6886      	ldr	r6, [r0, #8]
  for (int i=0; i<length; i++)
 8001888:	3401      	adds	r4, #1
      p_node->out = (p_node->out + 1) % p_node->len;
 800188a:	fbb3 f5f6 	udiv	r5, r3, r6
 800188e:	fb06 3315 	mls	r3, r6, r5, r3
 8001892:	6043      	str	r3, [r0, #4]
  for (int i=0; i<length; i++)
 8001894:	e7e9      	b.n	800186a <qbufferRead+0x4>
      ret = false;
 8001896:	2000      	movs	r0, #0
 8001898:	e7ea      	b.n	8001870 <qbufferRead+0xa>

0800189a <qbufferAvailable>:

uint32_t qbufferAvailable(qbuffer_t *p_node)
{
  uint32_t ret;

  ret = (p_node->in - p_node->out) % p_node->len;
 800189a:	e9d0 3200 	ldrd	r3, r2, [r0]
 800189e:	1a9b      	subs	r3, r3, r2
 80018a0:	6882      	ldr	r2, [r0, #8]
 80018a2:	fbb3 f0f2 	udiv	r0, r3, r2

  return ret;
}
 80018a6:	fb02 3010 	mls	r0, r2, r0, r3
 80018aa:	4770      	bx	lr

080018ac <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
  uint32_t ret = 0;

  switch(ch)
 80018ac:	2801      	cmp	r0, #1
 80018ae:	d003      	beq.n	80018b8 <uartAvailable+0xc>
 80018b0:	2802      	cmp	r0, #2
 80018b2:	d003      	beq.n	80018bc <uartAvailable+0x10>
     ret = qbufferAvailable(&qbuffer[ch]); //인터럽트 사용시
       break;
  }

  return ret;
}
 80018b4:	2000      	movs	r0, #0
 80018b6:	4770      	bx	lr
      ret = cdcAvailable();
 80018b8:	f004 bc2c 	b.w	8006114 <cdcAvailable>
     qbuffer[ch].in = (qbuffer[ch].len - hdma_usart3_rx.Instance->NDTR);
 80018bc:	4b04      	ldr	r3, [pc, #16]	; (80018d0 <uartAvailable+0x24>)
 80018be:	4805      	ldr	r0, [pc, #20]	; (80018d4 <uartAvailable+0x28>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	685a      	ldr	r2, [r3, #4]
 80018c4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80018c6:	1a9b      	subs	r3, r3, r2
 80018c8:	f840 3f20 	str.w	r3, [r0, #32]!
     ret = qbufferAvailable(&qbuffer[ch]); //인터럽트 사용시
 80018cc:	f7ff bfe5 	b.w	800189a <qbufferAvailable>
 80018d0:	200009e8 	.word	0x200009e8
 80018d4:	20000394 	.word	0x20000394

080018d8 <uartRead>:

uint8_t uartRead(uint8_t ch)
{
  uint8_t ret = 0;
 80018d8:	2300      	movs	r3, #0

  switch(ch)
 80018da:	2801      	cmp	r0, #1
{
 80018dc:	b507      	push	{r0, r1, r2, lr}
  uint8_t ret = 0;
 80018de:	f88d 3007 	strb.w	r3, [sp, #7]
  switch(ch)
 80018e2:	d006      	beq.n	80018f2 <uartRead+0x1a>
 80018e4:	2802      	cmp	r0, #2
 80018e6:	d009      	beq.n	80018fc <uartRead+0x24>
    case 2:
      qbufferRead(&qbuffer[ch], &ret, 1);
      break;
  }
  return ret;
}
 80018e8:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80018ec:	b003      	add	sp, #12
 80018ee:	f85d fb04 	ldr.w	pc, [sp], #4
      ret = cdcRead();
 80018f2:	f004 fc21 	bl	8006138 <cdcRead>
 80018f6:	f88d 0007 	strb.w	r0, [sp, #7]
      break;
 80018fa:	e7f5      	b.n	80018e8 <uartRead+0x10>
      qbufferRead(&qbuffer[ch], &ret, 1);
 80018fc:	2201      	movs	r2, #1
 80018fe:	f10d 0107 	add.w	r1, sp, #7
 8001902:	4802      	ldr	r0, [pc, #8]	; (800190c <uartRead+0x34>)
 8001904:	f7ff ffaf 	bl	8001866 <qbufferRead>
      break;
 8001908:	e7ee      	b.n	80018e8 <uartRead+0x10>
 800190a:	bf00      	nop
 800190c:	200003b4 	.word	0x200003b4

08001910 <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 8001910:	4603      	mov	r3, r0
 8001912:	4608      	mov	r0, r1
  uint32_t ret = 0;
  HAL_StatusTypeDef status;

  switch(ch)
 8001914:	2b01      	cmp	r3, #1
{
 8001916:	b510      	push	{r4, lr}
 8001918:	4614      	mov	r4, r2
  switch(ch)
 800191a:	d004      	beq.n	8001926 <uartWrite+0x16>
 800191c:	2b02      	cmp	r3, #2
 800191e:	d007      	beq.n	8001930 <uartWrite+0x20>
 8001920:	2400      	movs	r4, #0

      break;
  }

  return ret;
}
 8001922:	4620      	mov	r0, r4
 8001924:	bd10      	pop	{r4, pc}
      ret = cdcWrite(p_data, length);
 8001926:	4611      	mov	r1, r2
}
 8001928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      ret = cdcWrite(p_data, length);
 800192c:	f004 bc8e 	b.w	800624c <cdcWrite>
      status = HAL_UART_Transmit(&huart3, p_data, length, 100);
 8001930:	2364      	movs	r3, #100	; 0x64
 8001932:	b292      	uxth	r2, r2
 8001934:	4803      	ldr	r0, [pc, #12]	; (8001944 <uartWrite+0x34>)
 8001936:	f003 f816 	bl	8004966 <HAL_UART_Transmit>
      if (status == HAL_OK)
 800193a:	2800      	cmp	r0, #0
  uint32_t ret = 0;
 800193c:	bf18      	it	ne
 800193e:	2400      	movne	r4, #0
 8001940:	e7ef      	b.n	8001922 <uartWrite+0x12>
 8001942:	bf00      	nop
 8001944:	20000964 	.word	0x20000964

08001948 <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 8001948:	b40e      	push	{r1, r2, r3}
 800194a:	b510      	push	{r4, lr}
 800194c:	b0c3      	sub	sp, #268	; 0x10c
 800194e:	4604      	mov	r4, r0
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
  len = vsnprintf(buf, 256, fmt, args);
 8001950:	f44f 7180 	mov.w	r1, #256	; 0x100
{
 8001954:	ab45      	add	r3, sp, #276	; 0x114
  len = vsnprintf(buf, 256, fmt, args);
 8001956:	a802      	add	r0, sp, #8
{
 8001958:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(args, fmt);
 800195c:	9301      	str	r3, [sp, #4]
  len = vsnprintf(buf, 256, fmt, args);
 800195e:	f005 ff91 	bl	8007884 <vsniprintf>

  ret = uartWrite(ch, (uint8_t *)buf, len);
 8001962:	a902      	add	r1, sp, #8
  len = vsnprintf(buf, 256, fmt, args);
 8001964:	4602      	mov	r2, r0
  ret = uartWrite(ch, (uint8_t *)buf, len);
 8001966:	4620      	mov	r0, r4
 8001968:	f7ff ffd2 	bl	8001910 <uartWrite>

  va_end(args);


  return ret;
}
 800196c:	b043      	add	sp, #268	; 0x10c
 800196e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001972:	b003      	add	sp, #12
 8001974:	4770      	bx	lr
	...

08001978 <uartOpen>:
bool uartOpen(uint8_t ch, uint32_t baud)
{
  bool ret = false;


  switch(ch)
 8001978:	2801      	cmp	r0, #1
{
 800197a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  switch(ch)
 800197c:	d048      	beq.n	8001a10 <uartOpen+0x98>
 800197e:	2802      	cmp	r0, #2
 8001980:	d131      	bne.n	80019e6 <uartOpen+0x6e>
		  is_open[ch] = true;
		  ret = true;
		  break;

	  case 2:
		  huart3.Instance = USART3;
 8001982:	4d25      	ldr	r5, [pc, #148]	; (8001a18 <uartOpen+0xa0>)
		  huart3.Init.BaudRate = 115200;
		  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001984:	2600      	movs	r6, #0
		  huart3.Init.BaudRate = 115200;
 8001986:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
		  huart3.Init.StopBits = UART_STOPBITS_1;
		  huart3.Init.Parity = UART_PARITY_NONE;
		  huart3.Init.Mode = UART_MODE_TX_RX;
 800198a:	240c      	movs	r4, #12
		  huart3.Init.BaudRate = 115200;
 800198c:	4a23      	ldr	r2, [pc, #140]	; (8001a1c <uartOpen+0xa4>)
		  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
		  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
		  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
		  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;

		  HAL_UART_DeInit(&huart3);
 800198e:	4628      	mov	r0, r5
		  huart3.Init.Parity = UART_PARITY_NONE;
 8001990:	612e      	str	r6, [r5, #16]
		  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001992:	626e      	str	r6, [r5, #36]	; 0x24
		  huart3.Init.BaudRate = 115200;
 8001994:	e9c5 2300 	strd	r2, r3, [r5]
		  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001998:	e9c5 4605 	strd	r4, r6, [r5, #20]
		  huart3.Init.StopBits = UART_STOPBITS_1;
 800199c:	e9c5 6602 	strd	r6, r6, [r5, #8]
		  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019a0:	e9c5 6607 	strd	r6, r6, [r5, #28]
		  HAL_UART_DeInit(&huart3);
 80019a4:	f002 fc66 	bl	8004274 <HAL_UART_DeInit>

		  qbufferCreate(&qbuffer[2], &rx_buf[0], 256);
 80019a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019ac:	491c      	ldr	r1, [pc, #112]	; (8001a20 <uartOpen+0xa8>)
 80019ae:	481d      	ldr	r0, [pc, #116]	; (8001a24 <uartOpen+0xac>)
 80019b0:	f7ff ff52 	bl	8001858 <qbufferCreate>

		   __HAL_RCC_DMA1_CLK_ENABLE();
 80019b4:	4b1c      	ldr	r3, [pc, #112]	; (8001a28 <uartOpen+0xb0>)
		   HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80019b6:	4631      	mov	r1, r6
 80019b8:	4620      	mov	r0, r4
		   __HAL_RCC_DMA1_CLK_ENABLE();
 80019ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019bc:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80019c0:	631a      	str	r2, [r3, #48]	; 0x30
		   HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80019c2:	4632      	mov	r2, r6
		   __HAL_RCC_DMA1_CLK_ENABLE();
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019ca:	9301      	str	r3, [sp, #4]
 80019cc:	9b01      	ldr	r3, [sp, #4]
		   HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80019ce:	f000 fb6d 	bl	80020ac <HAL_NVIC_SetPriority>
		   HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80019d2:	4620      	mov	r0, r4
 80019d4:	f000 fb9c 	bl	8002110 <HAL_NVIC_EnableIRQ>

		  if (HAL_UART_Init(&huart3) != HAL_OK)
 80019d8:	4628      	mov	r0, r5
 80019da:	f003 f851 	bl	8004a80 <HAL_UART_Init>
 80019de:	4604      	mov	r4, r0
 80019e0:	b118      	cbz	r0, 80019ea <uartOpen+0x72>
		  {
			Error_Handler();
 80019e2:	f7ff fef3 	bl	80017cc <Error_Handler>
  bool ret = false;
 80019e6:	2000      	movs	r0, #0
 80019e8:	e012      	b.n	8001a10 <uartOpen+0x98>
		  else
		  {
			  ret = true;
			  is_open[ch]=true;
			//if(HAL_UART_Receive_IT(&huart3, (uint8_t *)&rx_data, 1) != HAL_OK)
			   if(HAL_UART_Receive_DMA(&huart3, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 80019ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019ee:	490c      	ldr	r1, [pc, #48]	; (8001a20 <uartOpen+0xa8>)
 80019f0:	4628      	mov	r0, r5
 80019f2:	f003 f8af 	bl	8004b54 <HAL_UART_Receive_DMA>
 80019f6:	b168      	cbz	r0, 8001a14 <uartOpen+0x9c>
			  {
				  printf("HAL_ERROR\r\n");
 80019f8:	480c      	ldr	r0, [pc, #48]	; (8001a2c <uartOpen+0xb4>)
 80019fa:	f005 f80d 	bl	8006a18 <puts>
				  ret = false;
 80019fe:	4620      	mov	r0, r4
			  }
				qbuffer[ch].in  = qbuffer[2].len - hdma_usart3_rx.Instance->NDTR;
 8001a00:	4b0b      	ldr	r3, [pc, #44]	; (8001a30 <uartOpen+0xb8>)
 8001a02:	4a0c      	ldr	r2, [pc, #48]	; (8001a34 <uartOpen+0xbc>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	6859      	ldr	r1, [r3, #4]
 8001a08:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8001a0a:	1a5b      	subs	r3, r3, r1
				qbuffer[ch].out = qbuffer[2].in;
 8001a0c:	e9c2 3308 	strd	r3, r3, [r2, #32]
		  }

	break;
	 }
    return ret;
}
 8001a10:	b002      	add	sp, #8
 8001a12:	bd70      	pop	{r4, r5, r6, pc}
			  ret = true;
 8001a14:	2001      	movs	r0, #1
 8001a16:	e7f3      	b.n	8001a00 <uartOpen+0x88>
 8001a18:	20000964 	.word	0x20000964
 8001a1c:	40004800 	.word	0x40004800
 8001a20:	200003d4 	.word	0x200003d4
 8001a24:	200003b4 	.word	0x200003b4
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	08009e43 	.word	0x08009e43
 8001a30:	200009e8 	.word	0x200009e8
 8001a34:	20000394 	.word	0x20000394

08001a38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a38:	b570      	push	{r4, r5, r6, lr}
 8001a3a:	b088      	sub	sp, #32
 8001a3c:	4606      	mov	r6, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3e:	2214      	movs	r2, #20
 8001a40:	2100      	movs	r1, #0
 8001a42:	a803      	add	r0, sp, #12
 8001a44:	f004 fe9a 	bl	800677c <memset>
  if(uartHandle->Instance==USART3)
 8001a48:	6832      	ldr	r2, [r6, #0]
 8001a4a:	4b25      	ldr	r3, [pc, #148]	; (8001ae0 <HAL_UART_MspInit+0xa8>)
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d144      	bne.n	8001ada <HAL_UART_MspInit+0xa2>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a50:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a54:	2500      	movs	r5, #0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a56:	a903      	add	r1, sp, #12
 8001a58:	4822      	ldr	r0, [pc, #136]	; (8001ae4 <HAL_UART_MspInit+0xac>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001a5c:	4c22      	ldr	r4, [pc, #136]	; (8001ae8 <HAL_UART_MspInit+0xb0>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a5e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001a62:	641a      	str	r2, [r3, #64]	; 0x40
 8001a64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a66:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8001a6a:	9201      	str	r2, [sp, #4]
 8001a6c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a70:	f042 0208 	orr.w	r2, r2, #8
 8001a74:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a76:	f44f 7240 	mov.w	r2, #768	; 0x300
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7c:	f003 0308 	and.w	r3, r3, #8
 8001a80:	9302      	str	r3, [sp, #8]
 8001a82:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a84:	2302      	movs	r3, #2
 8001a86:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e9cd 5305 	strd	r5, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a90:	2307      	movs	r3, #7
 8001a92:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a94:	f000 ff28 	bl	80028e8 <HAL_GPIO_Init>
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001a98:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001a9c:	4913      	ldr	r1, [pc, #76]	; (8001aec <HAL_UART_MspInit+0xb4>)
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001a9e:	4620      	mov	r0, r4
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001aa0:	61a5      	str	r5, [r4, #24]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001aa2:	6265      	str	r5, [r4, #36]	; 0x24
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001aa4:	e9c4 1300 	strd	r1, r3, [r4]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001aa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001aac:	e9c4 3504 	strd	r3, r5, [r4, #16]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001ab0:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ab4:	e9c4 5502 	strd	r5, r5, [r4, #8]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ab8:	e9c4 3507 	strd	r3, r5, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001abc:	f000 fb76 	bl	80021ac <HAL_DMA_Init>
 8001ac0:	b108      	cbz	r0, 8001ac6 <HAL_UART_MspInit+0x8e>
    {
      Error_Handler();
 8001ac2:	f7ff fe83 	bl	80017cc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2027      	movs	r0, #39	; 0x27
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8001aca:	6734      	str	r4, [r6, #112]	; 0x70
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001acc:	4611      	mov	r1, r2
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8001ace:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001ad0:	f000 faec 	bl	80020ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001ad4:	2027      	movs	r0, #39	; 0x27
 8001ad6:	f000 fb1b 	bl	8002110 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001ada:	b008      	add	sp, #32
 8001adc:	bd70      	pop	{r4, r5, r6, pc}
 8001ade:	bf00      	nop
 8001ae0:	40004800 	.word	0x40004800
 8001ae4:	40020c00 	.word	0x40020c00
 8001ae8:	200009e8 	.word	0x200009e8
 8001aec:	40026028 	.word	0x40026028

08001af0 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{

  if(uartHandle->Instance==USART3)
 8001af0:	6802      	ldr	r2, [r0, #0]
 8001af2:	4b0c      	ldr	r3, [pc, #48]	; (8001b24 <HAL_UART_MspDeInit+0x34>)
 8001af4:	429a      	cmp	r2, r3
{
 8001af6:	b510      	push	{r4, lr}
 8001af8:	4604      	mov	r4, r0
  if(uartHandle->Instance==USART3)
 8001afa:	d111      	bne.n	8001b20 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART3_MspDeInit 0 */

  /* USER CODE END USART3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART3_CLK_DISABLE();
 8001afc:	4a0a      	ldr	r2, [pc, #40]	; (8001b28 <HAL_UART_MspDeInit+0x38>)

    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    HAL_GPIO_DeInit(GPIOD, STLK_RX_Pin|STLK_TX_Pin);
 8001afe:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001b02:	480a      	ldr	r0, [pc, #40]	; (8001b2c <HAL_UART_MspDeInit+0x3c>)
    __HAL_RCC_USART3_CLK_DISABLE();
 8001b04:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001b06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b0a:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOD, STLK_RX_Pin|STLK_TX_Pin);
 8001b0c:	f000 ffd2 	bl	8002ab4 <HAL_GPIO_DeInit>

    /* USART3 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8001b10:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8001b12:	f000 fbcb 	bl	80022ac <HAL_DMA_DeInit>

    /* USART3 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 8001b16:	2027      	movs	r0, #39	; 0x27
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }
}
 8001b18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 8001b1c:	f000 bb06 	b.w	800212c <HAL_NVIC_DisableIRQ>
}
 8001b20:	bd10      	pop	{r4, pc}
 8001b22:	bf00      	nop
 8001b24:	40004800 	.word	0x40004800
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	40020c00 	.word	0x40020c00

08001b30 <HAL_UART_ErrorCallback>:


void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
  if (huart->Instance == USART3)
 8001b30:	6802      	ldr	r2, [r0, #0]
 8001b32:	4b04      	ldr	r3, [pc, #16]	; (8001b44 <HAL_UART_ErrorCallback+0x14>)
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d104      	bne.n	8001b42 <HAL_UART_ErrorCallback+0x12>
  {
	  HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8001b38:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b3c:	4802      	ldr	r0, [pc, #8]	; (8001b48 <HAL_UART_ErrorCallback+0x18>)
 8001b3e:	f001 b860 	b.w	8002c02 <HAL_GPIO_TogglePin>
  }
}
 8001b42:	4770      	bx	lr
 8001b44:	40004800 	.word	0x40004800
 8001b48:	40020400 	.word	0x40020400

08001b4c <HAL_UART_RxCpltCallback>:
	HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
    HAL_UART_Receive_IT(&huart3, (uint8_t *)&rx_data, 1);
    qbufferWrite(&qbuffer, &rx_data, 1);
  }
#endif
}
 8001b4c:	4770      	bx	lr
	...

08001b50 <ymodemInit>:


bool ymodemInit(void)
{
#ifdef _USE_HW_CLI
  cliAdd("ymodem", cliYmodem);
 8001b50:	4903      	ldr	r1, [pc, #12]	; (8001b60 <ymodemInit+0x10>)
 8001b52:	4804      	ldr	r0, [pc, #16]	; (8001b64 <ymodemInit+0x14>)
{
 8001b54:	b508      	push	{r3, lr}
  cliAdd("ymodem", cliYmodem);
 8001b56:	f7ff fb67 	bl	8001228 <cliAdd>
#endif

  return true;
}
 8001b5a:	2001      	movs	r0, #1
 8001b5c:	bd08      	pop	{r3, pc}
 8001b5e:	bf00      	nop
 8001b60:	08001e8d 	.word	0x08001e8d
 8001b64:	08009e4e 	.word	0x08009e4e

08001b68 <ymodemOpen>:

bool ymodemOpen(ymodem_t *p_modem, uint8_t ch)
{
 8001b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  bool ret = true;

  p_modem->ch = ch;
  p_modem->is_init = true;

  p_modem->state           = YMODEM_STATE_WAIT_HEAD;
 8001b6a:	2500      	movs	r5, #0
  p_modem->rx_packet.state = YMODEM_PACKET_WAIT_FIRST;
  p_modem->file_buf        = &p_modem->rx_packet.buffer[3];
 8001b6c:	f100 07c5 	add.w	r7, r0, #197	; 0xc5
  p_modem->is_init = true;
 8001b70:	2601      	movs	r6, #1
  p_modem->ch = ch;
 8001b72:	7001      	strb	r1, [r0, #0]
  p_modem->state           = YMODEM_STATE_WAIT_HEAD;
 8001b74:	7285      	strb	r5, [r0, #10]
{
 8001b76:	4604      	mov	r4, r0
  p_modem->is_init = true;
 8001b78:	7046      	strb	r6, [r0, #1]
  p_modem->rx_packet.state = YMODEM_PACKET_WAIT_FIRST;
 8001b7a:	f880 50b0 	strb.w	r5, [r0, #176]	; 0xb0
  p_modem->file_buf        = &p_modem->rx_packet.buffer[3];
 8001b7e:	f8c0 70a8 	str.w	r7, [r0, #168]	; 0xa8
  p_modem->file_buf_length = 0;
 8001b82:	f8a0 50ac 	strh.w	r5, [r0, #172]	; 0xac
  p_modem->pre_time        = millis();
 8001b86:	f7ff fe1f 	bl	80017c8 <millis>
  p_modem->start_time      = 3000;
 8001b8a:	f640 33b8 	movw	r3, #3000	; 0xbb8
  p_modem->pre_time        = millis();
 8001b8e:	60e0      	str	r0, [r4, #12]
  p_modem->ack_mode        = 0;

  p_modem->rx_packet.data = &p_modem->rx_packet.buffer[3];

  return ret;
}
 8001b90:	4630      	mov	r0, r6
  p_modem->start_time      = 3000;
 8001b92:	6123      	str	r3, [r4, #16]
  p_modem->ack_mode        = 0;
 8001b94:	7665      	strb	r5, [r4, #25]
  p_modem->rx_packet.data = &p_modem->rx_packet.buffer[3];
 8001b96:	f8c4 70b8 	str.w	r7, [r4, #184]	; 0xb8
}
 8001b9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001b9c <ymodemPutch>:

bool ymodemPutch(ymodem_t *p_modem, uint8_t data)
{
 8001b9c:	b507      	push	{r0, r1, r2, lr}
  bool ret = true;

  ret = uartWrite(p_modem->ch, &data, 1);
 8001b9e:	2201      	movs	r2, #1
{
 8001ba0:	f88d 1007 	strb.w	r1, [sp, #7]
  ret = uartWrite(p_modem->ch, &data, 1);
 8001ba4:	7800      	ldrb	r0, [r0, #0]
 8001ba6:	f10d 0107 	add.w	r1, sp, #7
 8001baa:	f7ff feb1 	bl	8001910 <uartWrite>

  return ret;
}
 8001bae:	3800      	subs	r0, #0
 8001bb0:	bf18      	it	ne
 8001bb2:	2001      	movne	r0, #1
 8001bb4:	b003      	add	sp, #12
 8001bb6:	f85d fb04 	ldr.w	pc, [sp], #4

08001bba <ymodemGetFileInfo>:

bool ymodemGetFileInfo(ymodem_t *p_modem)
{
 8001bba:	b538      	push	{r3, r4, r5, lr}
  uint16_t size_i;

  valid = false;
  for (int i=0; i<128; i++)
  {
    p_modem->file_name[i] = p_modem->rx_packet.data[i];
 8001bbc:	f8d0 10b8 	ldr.w	r1, [r0, #184]	; 0xb8
{
 8001bc0:	4604      	mov	r4, r0
 8001bc2:	f100 021a 	add.w	r2, r0, #26
  for (int i=0; i<128; i++)
 8001bc6:	2300      	movs	r3, #0
    p_modem->file_name[i] = p_modem->rx_packet.data[i];
 8001bc8:	5cc8      	ldrb	r0, [r1, r3]
 8001bca:	3301      	adds	r3, #1
 8001bcc:	f802 0b01 	strb.w	r0, [r2], #1
    if (p_modem->file_name[i] == 0x00)
 8001bd0:	b998      	cbnz	r0, 8001bfa <ymodemGetFileInfo+0x40>
    {
      size_i = i + 1;
 8001bd2:	b29b      	uxth	r3, r3
    }
  }

  if (valid == true)
  {
    for (int i=size_i; i<128; i++)
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	2a7f      	cmp	r2, #127	; 0x7f
 8001bd8:	dc05      	bgt.n	8001be6 <ymodemGetFileInfo+0x2c>
    {
      if (p_modem->rx_packet.data[i] == 0x20)
 8001bda:	5c8d      	ldrb	r5, [r1, r2]
 8001bdc:	1888      	adds	r0, r1, r2
 8001bde:	2d20      	cmp	r5, #32
 8001be0:	d10f      	bne.n	8001c02 <ymodemGetFileInfo+0x48>
      {
        p_modem->rx_packet.data[i] = 0x00;
 8001be2:	2200      	movs	r2, #0
 8001be4:	7002      	strb	r2, [r0, #0]
        break;
      }
    }

    p_modem->file_length = (uint32_t)strtoul((const char * )&p_modem->rx_packet.data[size_i], (char **)NULL, (int) 0);
 8001be6:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 8001bea:	2200      	movs	r2, #0
 8001bec:	4418      	add	r0, r3
 8001bee:	4611      	mov	r1, r2
 8001bf0:	f005 fe12 	bl	8007818 <strtoul>
 8001bf4:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
 8001bf8:	e001      	b.n	8001bfe <ymodemGetFileInfo+0x44>
  for (int i=0; i<128; i++)
 8001bfa:	2b80      	cmp	r3, #128	; 0x80
 8001bfc:	d1e4      	bne.n	8001bc8 <ymodemGetFileInfo+0xe>
  }

  return ret;
}
 8001bfe:	2001      	movs	r0, #1
 8001c00:	bd38      	pop	{r3, r4, r5, pc}
    for (int i=size_i; i<128; i++)
 8001c02:	3201      	adds	r2, #1
 8001c04:	e7e7      	b.n	8001bd6 <ymodemGetFileInfo+0x1c>

08001c06 <ymodemAck>:

bool ymodemAck(ymodem_t *p_modem)
{
 8001c06:	b510      	push	{r4, lr}
  if (p_modem->ack_mode == YMODEM_RESP_ACK_C)
 8001c08:	7e43      	ldrb	r3, [r0, #25]
{
 8001c0a:	4604      	mov	r4, r0
  if (p_modem->ack_mode == YMODEM_RESP_ACK_C)
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d106      	bne.n	8001c1e <ymodemAck+0x18>
  {
    ymodemPutch(p_modem, YMODEM_ACK);
 8001c10:	2106      	movs	r1, #6
 8001c12:	f7ff ffc3 	bl	8001b9c <ymodemPutch>
    ymodemPutch(p_modem, YMODEM_C);
 8001c16:	2143      	movs	r1, #67	; 0x43
 8001c18:	4620      	mov	r0, r4
 8001c1a:	f7ff ffbf 	bl	8001b9c <ymodemPutch>
  }

  if (p_modem->ack_mode == YMODEM_RESP_ACK)
 8001c1e:	7e63      	ldrb	r3, [r4, #25]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d103      	bne.n	8001c2c <ymodemAck+0x26>
  {
    ymodemPutch(p_modem, YMODEM_ACK);
 8001c24:	2106      	movs	r1, #6
 8001c26:	4620      	mov	r0, r4
 8001c28:	f7ff ffb8 	bl	8001b9c <ymodemPutch>
  }

  p_modem->ack_mode = YMODEM_RESP_NONE;
 8001c2c:	2300      	movs	r3, #0

  return true;
}
 8001c2e:	2001      	movs	r0, #1
  p_modem->ack_mode = YMODEM_RESP_NONE;
 8001c30:	7663      	strb	r3, [r4, #25]
}
 8001c32:	bd10      	pop	{r4, pc}

08001c34 <crc_update>:

#define CRC_POLY 0x1021

uint16_t crc_update(uint16_t crc_in, int incr)
{
  uint16_t xor = crc_in >> 15;
 8001c34:	0bc3      	lsrs	r3, r0, #15
  uint16_t out = crc_in << 1;
 8001c36:	0040      	lsls	r0, r0, #1
 8001c38:	b280      	uxth	r0, r0

  if (incr)
 8001c3a:	b109      	cbz	r1, 8001c40 <crc_update+0xc>
  {
    out++;
 8001c3c:	3001      	adds	r0, #1
 8001c3e:	b280      	uxth	r0, r0
  }

  if (xor)
 8001c40:	b11b      	cbz	r3, 8001c4a <crc_update+0x16>
  {
    out ^= CRC_POLY;
 8001c42:	f480 5081 	eor.w	r0, r0, #4128	; 0x1020
 8001c46:	f080 0001 	eor.w	r0, r0, #1
  }

  return out;
}
 8001c4a:	4770      	bx	lr

08001c4c <ymodemReceive>:
{
 8001c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (p_modem->is_init != true)
 8001c50:	7845      	ldrb	r5, [r0, #1]
{
 8001c52:	4604      	mov	r4, r0
  if (p_modem->is_init != true)
 8001c54:	b92d      	cbnz	r5, 8001c62 <ymodemReceive+0x16>
    p_modem->type = YMODEM_TYPE_ERROR;
 8001c56:	2304      	movs	r3, #4
    return true;
 8001c58:	2501      	movs	r5, #1
    p_modem->type = YMODEM_TYPE_ERROR;
 8001c5a:	7203      	strb	r3, [r0, #8]
}
 8001c5c:	4628      	mov	r0, r5
 8001c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (uartAvailable(p_modem->ch) > 0)
 8001c62:	7800      	ldrb	r0, [r0, #0]
 8001c64:	f7ff fe22 	bl	80018ac <uartAvailable>
 8001c68:	b1a8      	cbz	r0, 8001c96 <ymodemReceive+0x4a>
    p_modem->rx_data = uartRead(p_modem->ch);
 8001c6a:	7820      	ldrb	r0, [r4, #0]
 8001c6c:	f7ff fe34 	bl	80018d8 <uartRead>
 8001c70:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
 8001c74:	7260      	strb	r0, [r4, #9]
  switch(p_packet->state)
 8001c76:	2b05      	cmp	r3, #5
 8001c78:	d80d      	bhi.n	8001c96 <ymodemReceive+0x4a>
 8001c7a:	e8df f003 	tbb	[pc, r3]
 8001c7e:	4403      	.short	0x4403
 8001c80:	6c675648 	.word	0x6c675648
      if (data_in == YMODEM_SOH)
 8001c84:	2801      	cmp	r0, #1
 8001c86:	d11b      	bne.n	8001cc0 <ymodemReceive+0x74>
        p_packet->length = 128;
 8001c88:	2380      	movs	r3, #128	; 0x80
        p_packet->stx = data_in;
 8001c8a:	f884 00b4 	strb.w	r0, [r4, #180]	; 0xb4
        p_packet->state = YMODEM_PACKET_WAIT_SEQ1;
 8001c8e:	f884 00b0 	strb.w	r0, [r4, #176]	; 0xb0
        p_packet->length = 128;
 8001c92:	f8a4 30bc 	strh.w	r3, [r4, #188]	; 0xbc
    if (p_modem->rx_packet.state == YMODEM_PACKET_WAIT_FIRST)
 8001c96:	f894 50b0 	ldrb.w	r5, [r4, #176]	; 0xb0
 8001c9a:	2d00      	cmp	r5, #0
 8001c9c:	f040 80a4 	bne.w	8001de8 <ymodemReceive+0x19c>
      if (millis()-p_modem->pre_time >= p_modem->start_time)
 8001ca0:	f7ff fd92 	bl	80017c8 <millis>
 8001ca4:	68e3      	ldr	r3, [r4, #12]
 8001ca6:	1ac0      	subs	r0, r0, r3
 8001ca8:	6923      	ldr	r3, [r4, #16]
 8001caa:	4298      	cmp	r0, r3
 8001cac:	f0c0 809c 	bcc.w	8001de8 <ymodemReceive+0x19c>
        p_modem->pre_time = millis();
 8001cb0:	f7ff fd8a 	bl	80017c8 <millis>
        ymodemPutch(p_modem, YMODEM_C);
 8001cb4:	2143      	movs	r1, #67	; 0x43
        p_modem->pre_time = millis();
 8001cb6:	60e0      	str	r0, [r4, #12]
        ymodemPutch(p_modem, YMODEM_C);
 8001cb8:	4620      	mov	r0, r4
 8001cba:	f7ff ff6f 	bl	8001b9c <ymodemPutch>
 8001cbe:	e7cd      	b.n	8001c5c <ymodemReceive+0x10>
      if (data_in == YMODEM_STX)
 8001cc0:	2802      	cmp	r0, #2
 8001cc2:	d016      	beq.n	8001cf2 <ymodemReceive+0xa6>
      if (data_in == YMODEM_EOT)
 8001cc4:	2804      	cmp	r0, #4
 8001cc6:	d001      	beq.n	8001ccc <ymodemReceive+0x80>
      if (data_in == YMODEM_CAN)
 8001cc8:	2818      	cmp	r0, #24
 8001cca:	d1e4      	bne.n	8001c96 <ymodemReceive+0x4a>
        p_packet->stx = data_in;
 8001ccc:	f884 00b4 	strb.w	r0, [r4, #180]	; 0xb4
    if (p_modem->state != YMODEM_STATE_WAIT_HEAD)
 8001cd0:	7aa3      	ldrb	r3, [r4, #10]
 8001cd2:	f894 20b4 	ldrb.w	r2, [r4, #180]	; 0xb4
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d07a      	beq.n	8001dd0 <ymodemReceive+0x184>
      if (p_modem->rx_packet.stx == YMODEM_CAN)
 8001cda:	2a18      	cmp	r2, #24
 8001cdc:	d168      	bne.n	8001db0 <ymodemReceive+0x164>
        p_modem->state = YMODEM_STATE_WAIT_CANCEL;
 8001cde:	2305      	movs	r3, #5
 8001ce0:	72a3      	strb	r3, [r4, #10]
        ymodemPutch(p_modem, YMODEM_ACK);
 8001ce2:	2106      	movs	r1, #6
 8001ce4:	4620      	mov	r0, r4
 8001ce6:	f7ff ff59 	bl	8001b9c <ymodemPutch>
        p_modem->state = YMODEM_STATE_WAIT_HEAD;
 8001cea:	2300      	movs	r3, #0
 8001cec:	72a3      	strb	r3, [r4, #10]
        p_modem->type = YMODEM_TYPE_CANCEL;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e0b7      	b.n	8001e62 <ymodemReceive+0x216>
        p_packet->length = 1024;
 8001cf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
        p_packet->stx = data_in;
 8001cf6:	f884 00b4 	strb.w	r0, [r4, #180]	; 0xb4
        p_packet->length = 1024;
 8001cfa:	f8a4 30bc 	strh.w	r3, [r4, #188]	; 0xbc
        p_packet->state = YMODEM_PACKET_WAIT_SEQ1;
 8001cfe:	2301      	movs	r3, #1
        p_packet->state = YMODEM_PACKET_WAIT_CRCH;
 8001d00:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
  return ret;
 8001d04:	e7c7      	b.n	8001c96 <ymodemReceive+0x4a>
      p_packet->state = YMODEM_PACKET_WAIT_SEQ2;
 8001d06:	2302      	movs	r3, #2
      p_packet->seq[0] = data_in;
 8001d08:	f884 00b5 	strb.w	r0, [r4, #181]	; 0xb5
      p_packet->state = YMODEM_PACKET_WAIT_SEQ2;
 8001d0c:	e7f8      	b.n	8001d00 <ymodemReceive+0xb4>
      p_packet->seq[1] = data_in;
 8001d0e:	f884 00b6 	strb.w	r0, [r4, #182]	; 0xb6
      if (p_packet->seq[0] == (uint8_t)(~data_in))
 8001d12:	43c0      	mvns	r0, r0
 8001d14:	f894 30b5 	ldrb.w	r3, [r4, #181]	; 0xb5
 8001d18:	b2c0      	uxtb	r0, r0
 8001d1a:	4283      	cmp	r3, r0
 8001d1c:	f04f 0300 	mov.w	r3, #0
 8001d20:	d1ee      	bne.n	8001d00 <ymodemReceive+0xb4>
        p_packet->index = 0;
 8001d22:	f8a4 30b2 	strh.w	r3, [r4, #178]	; 0xb2
        p_packet->state = YMODEM_PACKET_WAIT_DATA;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e7ea      	b.n	8001d00 <ymodemReceive+0xb4>
      p_packet->data[p_packet->index] = data_in;
 8001d2a:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 8001d2e:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
 8001d32:	54d0      	strb	r0, [r2, r3]
      p_packet->index++;
 8001d34:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
      if (p_packet->index >= p_packet->length)
 8001d38:	f8b4 20bc 	ldrh.w	r2, [r4, #188]	; 0xbc
      p_packet->index++;
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	b29b      	uxth	r3, r3
      if (p_packet->index >= p_packet->length)
 8001d40:	429a      	cmp	r2, r3
      p_packet->index++;
 8001d42:	f8a4 30b2 	strh.w	r3, [r4, #178]	; 0xb2
      if (p_packet->index >= p_packet->length)
 8001d46:	d8a6      	bhi.n	8001c96 <ymodemReceive+0x4a>
        p_packet->state = YMODEM_PACKET_WAIT_CRCH;
 8001d48:	2304      	movs	r3, #4
 8001d4a:	e7d9      	b.n	8001d00 <ymodemReceive+0xb4>
      p_packet->crc_recv = (data_in<<8);
 8001d4c:	0200      	lsls	r0, r0, #8
      p_packet->state = YMODEM_PACKET_WAIT_CRCL;
 8001d4e:	2305      	movs	r3, #5
      p_packet->crc_recv = (data_in<<8);
 8001d50:	f8a4 00c0 	strh.w	r0, [r4, #192]	; 0xc0
      p_packet->state = YMODEM_PACKET_WAIT_CRCL;
 8001d54:	e7d4      	b.n	8001d00 <ymodemReceive+0xb4>
      p_packet->crc_recv |= (data_in<<0);
 8001d56:	f8b4 20c0 	ldrh.w	r2, [r4, #192]	; 0xc0
 8001d5a:	f8d4 70b8 	ldr.w	r7, [r4, #184]	; 0xb8
 8001d5e:	4302      	orrs	r2, r0
      p_packet->crc = crc16(p_packet->data, p_packet->length);
 8001d60:	f8b4 60bc 	ldrh.w	r6, [r4, #188]	; 0xbc
      p_packet->state = YMODEM_PACKET_WAIT_FIRST;
 8001d64:	2000      	movs	r0, #0
 8001d66:	3f01      	subs	r7, #1
      p_packet->crc_recv |= (data_in<<0);
 8001d68:	f8a4 20c0 	strh.w	r2, [r4, #192]	; 0xc0
      p_packet->state = YMODEM_PACKET_WAIT_FIRST;
 8001d6c:	f884 00b0 	strb.w	r0, [r4, #176]	; 0xb0

uint16_t crc16(uint8_t *data, uint16_t size)
{
  uint16_t crc, i;

  for (crc = 0; size > 0; size--, data++)
 8001d70:	b966      	cbnz	r6, 8001d8c <ymodemReceive+0x140>
 8001d72:	2610      	movs	r6, #16
    }
  }

  for (i = 0; i < 16; i++)
  {
    crc = crc_update(crc, 0);
 8001d74:	3e01      	subs	r6, #1
 8001d76:	2100      	movs	r1, #0
 8001d78:	f7ff ff5c 	bl	8001c34 <crc_update>
  for (i = 0; i < 16; i++)
 8001d7c:	b2b6      	uxth	r6, r6
 8001d7e:	2e00      	cmp	r6, #0
 8001d80:	d1f8      	bne.n	8001d74 <ymodemReceive+0x128>
      if (p_packet->crc == p_packet->crc_recv)
 8001d82:	4282      	cmp	r2, r0
      p_packet->crc = crc16(p_packet->data, p_packet->length);
 8001d84:	f8a4 00be 	strh.w	r0, [r4, #190]	; 0xbe
      if (p_packet->crc == p_packet->crc_recv)
 8001d88:	d185      	bne.n	8001c96 <ymodemReceive+0x4a>
 8001d8a:	e7a1      	b.n	8001cd0 <ymodemReceive+0x84>
      crc = crc_update(crc, *data & i);
 8001d8c:	f817 af01 	ldrb.w	sl, [r7, #1]!
 8001d90:	f04f 0808 	mov.w	r8, #8
    for (i = 0x80; i; i >>= 1)
 8001d94:	f04f 0980 	mov.w	r9, #128	; 0x80
      crc = crc_update(crc, *data & i);
 8001d98:	ea09 010a 	and.w	r1, r9, sl
    for (i = 0x80; i; i >>= 1)
 8001d9c:	ea4f 0959 	mov.w	r9, r9, lsr #1
      crc = crc_update(crc, *data & i);
 8001da0:	f7ff ff48 	bl	8001c34 <crc_update>
    for (i = 0x80; i; i >>= 1)
 8001da4:	f1b8 0801 	subs.w	r8, r8, #1
 8001da8:	d1f6      	bne.n	8001d98 <ymodemReceive+0x14c>
  for (crc = 0; size > 0; size--, data++)
 8001daa:	3e01      	subs	r6, #1
 8001dac:	b2b6      	uxth	r6, r6
 8001dae:	e7df      	b.n	8001d70 <ymodemReceive+0x124>
    switch(p_modem->state)
 8001db0:	3b01      	subs	r3, #1
 8001db2:	2b04      	cmp	r3, #4
 8001db4:	d818      	bhi.n	8001de8 <ymodemReceive+0x19c>
 8001db6:	a101      	add	r1, pc, #4	; (adr r1, 8001dbc <ymodemReceive+0x170>)
 8001db8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001dbc:	08001e03 	.word	0x08001e03
 8001dc0:	08001e37 	.word	0x08001e37
 8001dc4:	08001e67 	.word	0x08001e67
 8001dc8:	08001e7b 	.word	0x08001e7b
 8001dcc:	08001ce3 	.word	0x08001ce3
        if (p_modem->rx_packet.stx == YMODEM_EOT)
 8001dd0:	2a04      	cmp	r2, #4
 8001dd2:	d106      	bne.n	8001de2 <ymodemReceive+0x196>
          ymodemPutch(p_modem, YMODEM_NACK);
 8001dd4:	2115      	movs	r1, #21
 8001dd6:	4620      	mov	r0, r4
 8001dd8:	f7ff fee0 	bl	8001b9c <ymodemPutch>
          p_modem->state = YMODEM_STATE_WAIT_LAST;
 8001ddc:	2303      	movs	r3, #3
        p_modem->state = YMODEM_STATE_WAIT_END;
 8001dde:	72a3      	strb	r3, [r4, #10]
        break;
 8001de0:	e002      	b.n	8001de8 <ymodemReceive+0x19c>
        else if (p_modem->rx_packet.seq[0] == 0x00)
 8001de2:	f894 60b5 	ldrb.w	r6, [r4, #181]	; 0xb5
 8001de6:	b10e      	cbz	r6, 8001dec <ymodemReceive+0x1a0>
      if (p_modem->rx_packet.stx == YMODEM_CAN)
 8001de8:	2500      	movs	r5, #0
 8001dea:	e737      	b.n	8001c5c <ymodemReceive+0x10>
          ymodemGetFileInfo(p_modem);
 8001dec:	4620      	mov	r0, r4
          p_modem->file_addr = 0;
 8001dee:	f8c4 609c 	str.w	r6, [r4, #156]	; 0x9c
          ymodemGetFileInfo(p_modem);
 8001df2:	f7ff fee2 	bl	8001bba <ymodemGetFileInfo>
          p_modem->ack_mode = YMODEM_RESP_ACK_C;
 8001df6:	2302      	movs	r3, #2
 8001df8:	7663      	strb	r3, [r4, #25]
          p_modem->state = YMODEM_STATE_WAIT_FIRST;
 8001dfa:	2301      	movs	r3, #1
          p_modem->state = YMODEM_STATE_WAIT_DATA;
 8001dfc:	72a3      	strb	r3, [r4, #10]
          p_modem->type = YMODEM_TYPE_DATA;
 8001dfe:	7226      	strb	r6, [r4, #8]
          ret = true;
 8001e00:	e72c      	b.n	8001c5c <ymodemReceive+0x10>
        if (p_modem->rx_packet.stx == YMODEM_EOT)
 8001e02:	2a04      	cmp	r2, #4
 8001e04:	d0e6      	beq.n	8001dd4 <ymodemReceive+0x188>
        else if (p_modem->rx_packet.seq[0] == 0x01)
 8001e06:	f894 60b5 	ldrb.w	r6, [r4, #181]	; 0xb5
 8001e0a:	2e01      	cmp	r6, #1
 8001e0c:	d1ec      	bne.n	8001de8 <ymodemReceive+0x19c>
          p_modem->file_addr = 0;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
          ymodemPutch(p_modem, YMODEM_ACK);
 8001e14:	2106      	movs	r1, #6
 8001e16:	4620      	mov	r0, r4
          p_modem->file_addr = 0;
 8001e18:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
          if (buf_length > p_modem->rx_packet.length)
 8001e1c:	f8b4 30bc 	ldrh.w	r3, [r4, #188]	; 0xbc
 8001e20:	4293      	cmp	r3, r2
 8001e22:	bf28      	it	cs
 8001e24:	4613      	movcs	r3, r2
          p_modem->file_buf_length = buf_length;
 8001e26:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
          p_modem->file_received += buf_length;
 8001e2a:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
          ymodemPutch(p_modem, YMODEM_ACK);
 8001e2e:	f7ff feb5 	bl	8001b9c <ymodemPutch>
          p_modem->state = YMODEM_STATE_WAIT_DATA;
 8001e32:	2302      	movs	r3, #2
 8001e34:	e7e2      	b.n	8001dfc <ymodemReceive+0x1b0>
        if (p_modem->rx_packet.stx == YMODEM_EOT)
 8001e36:	2a04      	cmp	r2, #4
 8001e38:	d0cc      	beq.n	8001dd4 <ymodemReceive+0x188>
          buf_length = (p_modem->file_length - p_modem->file_addr);
 8001e3a:	e9d4 2327 	ldrd	r2, r3, [r4, #156]	; 0x9c
 8001e3e:	1a99      	subs	r1, r3, r2
          if (buf_length > p_modem->rx_packet.length)
 8001e40:	f8b4 30bc 	ldrh.w	r3, [r4, #188]	; 0xbc
 8001e44:	428b      	cmp	r3, r1
 8001e46:	bf28      	it	cs
 8001e48:	460b      	movcs	r3, r1
          p_modem->file_addr += buf_length;
 8001e4a:	441a      	add	r2, r3
          p_modem->file_buf_length = buf_length;
 8001e4c:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
          p_modem->file_addr += buf_length;
 8001e50:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
          p_modem->file_received += buf_length;
 8001e54:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 8001e58:	4413      	add	r3, r2
 8001e5a:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
          p_modem->ack_mode = YMODEM_RESP_ACK;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	7663      	strb	r3, [r4, #25]
        p_modem->type = YMODEM_TYPE_CANCEL;
 8001e62:	7223      	strb	r3, [r4, #8]
        break;
 8001e64:	e6fa      	b.n	8001c5c <ymodemReceive+0x10>
        ymodemPutch(p_modem, YMODEM_ACK);
 8001e66:	2106      	movs	r1, #6
 8001e68:	4620      	mov	r0, r4
 8001e6a:	f7ff fe97 	bl	8001b9c <ymodemPutch>
        ymodemPutch(p_modem, YMODEM_C);
 8001e6e:	2143      	movs	r1, #67	; 0x43
 8001e70:	4620      	mov	r0, r4
 8001e72:	f7ff fe93 	bl	8001b9c <ymodemPutch>
        p_modem->state = YMODEM_STATE_WAIT_END;
 8001e76:	2304      	movs	r3, #4
 8001e78:	e7b1      	b.n	8001dde <ymodemReceive+0x192>
        ymodemPutch(p_modem, YMODEM_ACK);
 8001e7a:	2106      	movs	r1, #6
 8001e7c:	4620      	mov	r0, r4
 8001e7e:	f7ff fe8d 	bl	8001b9c <ymodemPutch>
        p_modem->state = YMODEM_STATE_WAIT_HEAD;
 8001e82:	2300      	movs	r3, #0
 8001e84:	72a3      	strb	r3, [r4, #10]
        p_modem->type = YMODEM_TYPE_END;
 8001e86:	2302      	movs	r3, #2
 8001e88:	e7eb      	b.n	8001e62 <ymodemReceive+0x216>
 8001e8a:	bf00      	nop

08001e8c <cliYmodem>:

  return crc;
}

  void cliYmodem(cli_args_t *args)
  {
 8001e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e90:	f5ad 6d9a 	sub.w	sp, sp, #1232	; 0x4d0
 8001e94:	4604      	mov	r4, r0
    uint32_t size = 0;
    COM_StatusTypeDef result;

    uint8_t log_ch = 1;

    memset(&ymodem,0,sizeof(ymodem_t));
 8001e96:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	a802      	add	r0, sp, #8
 8001e9e:	f004 fc6d 	bl	800677c <memset>

    ymodemOpen(&ymodem, 2);
 8001ea2:	2102      	movs	r1, #2
 8001ea4:	a802      	add	r0, sp, #8
 8001ea6:	f7ff fe5f 	bl	8001b68 <ymodemOpen>
    //cliPrintf("ymodem down [addr] \r\n");


    if (args->argc == 1 && args->isStr(0, "down"))
 8001eaa:	8823      	ldrh	r3, [r4, #0]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d010      	beq.n	8001ed2 <cliYmodem+0x46>
    uint8_t err_code = 0;
 8001eb0:	2500      	movs	r5, #0
    bool ret = false;
 8001eb2:	462f      	mov	r7, r5

        }
      }
    }

      if( (ymodem.type == YMODEM_TYPE_END) || ((err_code != false)&&(ret == true)) )
 8001eb4:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d003      	beq.n	8001ec4 <cliYmodem+0x38>
 8001ebc:	2d00      	cmp	r5, #0
 8001ebe:	d073      	beq.n	8001fa8 <cliYmodem+0x11c>
 8001ec0:	2f00      	cmp	r7, #0
 8001ec2:	d071      	beq.n	8001fa8 <cliYmodem+0x11c>
      {
       cliPrintf("\r\nDown OK\r\n");
 8001ec4:	483b      	ldr	r0, [pc, #236]	; (8001fb4 <cliYmodem+0x128>)
 8001ec6:	f7fe ff4b 	bl	8000d60 <cliPrintf>
      else
  	{
  	 cliPrintf("\r\nDown Fail ErrCode :%d \r\n",err_code);
  	}
      return ret;
  }
 8001eca:	f50d 6d9a 	add.w	sp, sp, #1232	; 0x4d0
 8001ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (args->argc == 1 && args->isStr(0, "down"))
 8001ed2:	6963      	ldr	r3, [r4, #20]
 8001ed4:	2000      	movs	r0, #0
 8001ed6:	4938      	ldr	r1, [pc, #224]	; (8001fb8 <cliYmodem+0x12c>)
 8001ed8:	4798      	blx	r3
 8001eda:	2800      	cmp	r0, #0
 8001edc:	d0e8      	beq.n	8001eb0 <cliYmodem+0x24>
    uint8_t err_code = 0;
 8001ede:	2500      	movs	r5, #0
              uartPrintf(log_ch, "YMODEM_TYPE_ERROR \n");
 8001ee0:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8001fd4 <cliYmodem+0x148>
              uartPrintf(log_ch, "YMODEM_TYPE_CANCEL \n");
 8001ee4:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 8001fd8 <cliYmodem+0x14c>
    bool ret = false;
 8001ee8:	462f      	mov	r7, r5
              uartPrintf(log_ch, "YMODEM_TYPE_END \n");
 8001eea:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 8001fdc <cliYmodem+0x150>
      cliPrintf("download ... 0x%x",addr_offset);
 8001eee:	4933      	ldr	r1, [pc, #204]	; (8001fbc <cliYmodem+0x130>)
 8001ef0:	4833      	ldr	r0, [pc, #204]	; (8001fc0 <cliYmodem+0x134>)
 8001ef2:	f7fe ff35 	bl	8000d60 <cliPrintf>
        if (ymodemReceive(&ymodem) == true)
 8001ef6:	a802      	add	r0, sp, #8
 8001ef8:	f7ff fea8 	bl	8001c4c <ymodemReceive>
 8001efc:	4604      	mov	r4, r0
 8001efe:	2800      	cmp	r0, #0
 8001f00:	d0f9      	beq.n	8001ef6 <cliYmodem+0x6a>
          switch(ymodem.type)
 8001f02:	f89d 6010 	ldrb.w	r6, [sp, #16]
 8001f06:	2e04      	cmp	r6, #4
 8001f08:	d839      	bhi.n	8001f7e <cliYmodem+0xf2>
 8001f0a:	e8df f006 	tbb	[pc, r6]
 8001f0e:	1103      	.short	0x1103
 8001f10:	453e      	.short	0x453e
 8001f12:	4b          	.byte	0x4b
 8001f13:	00          	.byte	0x00
          	 uartPrintf(log_ch, "\r\nYMODEM_TYPE_START \r\n name : %s length : %d\r\n", ymodem.file_name, ymodem.file_length);
 8001f14:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8001f16:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8001f1a:	492a      	ldr	r1, [pc, #168]	; (8001fc4 <cliYmodem+0x138>)
 8001f1c:	2001      	movs	r0, #1
 8001f1e:	f7ff fd13 	bl	8001948 <uartPrintf>
          	 if (flashErase(addr_offset, ymodem.file_length) != true)
 8001f22:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8001f24:	4825      	ldr	r0, [pc, #148]	; (8001fbc <cliYmodem+0x130>)
 8001f26:	f7ff f9ff 	bl	8001328 <flashErase>
  			   err_code = 1;
 8001f2a:	1e04      	subs	r4, r0, #0
 8001f2c:	bf08      	it	eq
 8001f2e:	2501      	moveq	r5, #1
              uartPrintf(log_ch, "YMODEM_TYPE_DATA %d %d %%\r\n", ymodem.rx_packet.seq[0], ymodem.file_received*100 / ymodem.file_length);
 8001f30:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8001f32:	2364      	movs	r3, #100	; 0x64
 8001f34:	4924      	ldr	r1, [pc, #144]	; (8001fc8 <cliYmodem+0x13c>)
 8001f36:	2001      	movs	r0, #1
 8001f38:	4353      	muls	r3, r2
 8001f3a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8001f3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001f40:	f89d 20bd 	ldrb.w	r2, [sp, #189]	; 0xbd
 8001f44:	f7ff fd00 	bl	8001948 <uartPrintf>
              uartPrintf(log_ch,"%x, %x ,%x\r\n",addr_offset + ymodem.file_addr,ymodem.file_buf, ymodem.file_buf_length);
 8001f48:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8001f4a:	f8bd 30b4 	ldrh.w	r3, [sp, #180]	; 0xb4
 8001f4e:	2001      	movs	r0, #1
 8001f50:	f102 6200 	add.w	r2, r2, #134217728	; 0x8000000
 8001f54:	491d      	ldr	r1, [pc, #116]	; (8001fcc <cliYmodem+0x140>)
 8001f56:	9300      	str	r3, [sp, #0]
 8001f58:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8001f5c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8001f5e:	f7ff fcf3 	bl	8001948 <uartPrintf>
  		     if (flashWrite(addr_offset + ymodem.file_addr, ymodem.file_buf, ymodem.file_buf_length) != true)
 8001f62:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8001f64:	f8bd 20b4 	ldrh.w	r2, [sp, #180]	; 0xb4
 8001f68:	f100 6000 	add.w	r0, r0, #134217728	; 0x8000000
 8001f6c:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8001f6e:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 8001f72:	f7ff fa4d 	bl	8001410 <flashWrite>
  			   keep_loop = false;
 8001f76:	2800      	cmp	r0, #0
 8001f78:	bf04      	itt	eq
 8001f7a:	2400      	moveq	r4, #0
 8001f7c:	2502      	moveq	r5, #2
           ymodemAck(&ymodem);
 8001f7e:	a802      	add	r0, sp, #8
 8001f80:	f7ff fe41 	bl	8001c06 <ymodemAck>
      while(keep_loop)
 8001f84:	2c00      	cmp	r4, #0
 8001f86:	d1b6      	bne.n	8001ef6 <cliYmodem+0x6a>
 8001f88:	e794      	b.n	8001eb4 <cliYmodem+0x28>
              ret = true;
 8001f8a:	4627      	mov	r7, r4
              uartPrintf(log_ch, "YMODEM_TYPE_END \n");
 8001f8c:	4651      	mov	r1, sl
 8001f8e:	2001      	movs	r0, #1
 8001f90:	f7ff fcda 	bl	8001948 <uartPrintf>
              keep_loop = false;
 8001f94:	2400      	movs	r4, #0
              break;
 8001f96:	e7f2      	b.n	8001f7e <cliYmodem+0xf2>
              uartPrintf(log_ch, "YMODEM_TYPE_CANCEL \n");
 8001f98:	4649      	mov	r1, r9
              uartPrintf(log_ch, "YMODEM_TYPE_ERROR \n");
 8001f9a:	2001      	movs	r0, #1
              err_code = 4;
 8001f9c:	4635      	mov	r5, r6
              uartPrintf(log_ch, "YMODEM_TYPE_ERROR \n");
 8001f9e:	f7ff fcd3 	bl	8001948 <uartPrintf>
              break;
 8001fa2:	e7f7      	b.n	8001f94 <cliYmodem+0x108>
              uartPrintf(log_ch, "YMODEM_TYPE_ERROR \n");
 8001fa4:	4641      	mov	r1, r8
 8001fa6:	e7f8      	b.n	8001f9a <cliYmodem+0x10e>
  	 cliPrintf("\r\nDown Fail ErrCode :%d \r\n",err_code);
 8001fa8:	4629      	mov	r1, r5
 8001faa:	4809      	ldr	r0, [pc, #36]	; (8001fd0 <cliYmodem+0x144>)
 8001fac:	f7fe fed8 	bl	8000d60 <cliPrintf>
      return ret;
 8001fb0:	e78b      	b.n	8001eca <cliYmodem+0x3e>
 8001fb2:	bf00      	nop
 8001fb4:	08009eff 	.word	0x08009eff
 8001fb8:	08009e55 	.word	0x08009e55
 8001fbc:	08010000 	.word	0x08010000
 8001fc0:	08009e5a 	.word	0x08009e5a
 8001fc4:	08009e6c 	.word	0x08009e6c
 8001fc8:	08009e9b 	.word	0x08009e9b
 8001fcc:	08009eb7 	.word	0x08009eb7
 8001fd0:	08009f0b 	.word	0x08009f0b
 8001fd4:	08009eeb 	.word	0x08009eeb
 8001fd8:	08009ed6 	.word	0x08009ed6
 8001fdc:	08009ec4 	.word	0x08009ec4

08001fe0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fe0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fe2:	4b0e      	ldr	r3, [pc, #56]	; (800201c <HAL_InitTick+0x3c>)
{
 8001fe4:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fe6:	4a0e      	ldr	r2, [pc, #56]	; (8002020 <HAL_InitTick+0x40>)
 8001fe8:	7818      	ldrb	r0, [r3, #0]
 8001fea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fee:	fbb3 f3f0 	udiv	r3, r3, r0
 8001ff2:	6810      	ldr	r0, [r2, #0]
 8001ff4:	fbb0 f0f3 	udiv	r0, r0, r3
 8001ff8:	f000 f8ac 	bl	8002154 <HAL_SYSTICK_Config>
 8001ffc:	4604      	mov	r4, r0
 8001ffe:	b958      	cbnz	r0, 8002018 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002000:	2d0f      	cmp	r5, #15
 8002002:	d809      	bhi.n	8002018 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002004:	4602      	mov	r2, r0
 8002006:	4629      	mov	r1, r5
 8002008:	f04f 30ff 	mov.w	r0, #4294967295
 800200c:	f000 f84e 	bl	80020ac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002010:	4b04      	ldr	r3, [pc, #16]	; (8002024 <HAL_InitTick+0x44>)
 8002012:	4620      	mov	r0, r4
 8002014:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002016:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002018:	2001      	movs	r0, #1
 800201a:	e7fc      	b.n	8002016 <HAL_InitTick+0x36>
 800201c:	20000004 	.word	0x20000004
 8002020:	20000000 	.word	0x20000000
 8002024:	20000008 	.word	0x20000008

08002028 <HAL_Init>:
{
 8002028:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800202a:	2003      	movs	r0, #3
 800202c:	f000 f82c 	bl	8002088 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002030:	2000      	movs	r0, #0
 8002032:	f7ff ffd5 	bl	8001fe0 <HAL_InitTick>
  HAL_MspInit();
 8002036:	f7fe fcdb 	bl	80009f0 <HAL_MspInit>
}
 800203a:	2000      	movs	r0, #0
 800203c:	bd08      	pop	{r3, pc}
	...

08002040 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002040:	4a03      	ldr	r2, [pc, #12]	; (8002050 <HAL_IncTick+0x10>)
 8002042:	4b04      	ldr	r3, [pc, #16]	; (8002054 <HAL_IncTick+0x14>)
 8002044:	6811      	ldr	r1, [r2, #0]
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	440b      	add	r3, r1
 800204a:	6013      	str	r3, [r2, #0]
}
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	20000a48 	.word	0x20000a48
 8002054:	20000004 	.word	0x20000004

08002058 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002058:	4b01      	ldr	r3, [pc, #4]	; (8002060 <HAL_GetTick+0x8>)
 800205a:	6818      	ldr	r0, [r3, #0]
}
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	20000a48 	.word	0x20000a48

08002064 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002064:	b538      	push	{r3, r4, r5, lr}
 8002066:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002068:	f7ff fff6 	bl	8002058 <HAL_GetTick>
 800206c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800206e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8002070:	bf1e      	ittt	ne
 8002072:	4b04      	ldrne	r3, [pc, #16]	; (8002084 <HAL_Delay+0x20>)
 8002074:	781b      	ldrbne	r3, [r3, #0]
 8002076:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002078:	f7ff ffee 	bl	8002058 <HAL_GetTick>
 800207c:	1b43      	subs	r3, r0, r5
 800207e:	42a3      	cmp	r3, r4
 8002080:	d3fa      	bcc.n	8002078 <HAL_Delay+0x14>
  {
  }
}
 8002082:	bd38      	pop	{r3, r4, r5, pc}
 8002084:	20000004 	.word	0x20000004

08002088 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002088:	4907      	ldr	r1, [pc, #28]	; (80020a8 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800208a:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800208c:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800208e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002092:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002096:	0412      	lsls	r2, r2, #16
 8002098:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800209a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800209c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80020a4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80020a6:	4770      	bx	lr
 80020a8:	e000ed00 	.word	0xe000ed00

080020ac <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020ac:	4b16      	ldr	r3, [pc, #88]	; (8002108 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020ae:	b530      	push	{r4, r5, lr}
 80020b0:	68dc      	ldr	r4, [r3, #12]
 80020b2:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020b6:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ba:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020bc:	2d04      	cmp	r5, #4
 80020be:	bf28      	it	cs
 80020c0:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020c2:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c4:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020c8:	bf8c      	ite	hi
 80020ca:	3c03      	subhi	r4, #3
 80020cc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020ce:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 80020d2:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020d4:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d8:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020dc:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e0:	fa01 f104 	lsl.w	r1, r1, r4
 80020e4:	ea41 0302 	orr.w	r3, r1, r2
 80020e8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80020ec:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80020ee:	db06      	blt.n	80020fe <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80020f4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80020f8:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80020fc:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020fe:	f000 000f 	and.w	r0, r0, #15
 8002102:	4a02      	ldr	r2, [pc, #8]	; (800210c <HAL_NVIC_SetPriority+0x60>)
 8002104:	5413      	strb	r3, [r2, r0]
 8002106:	e7f9      	b.n	80020fc <HAL_NVIC_SetPriority+0x50>
 8002108:	e000ed00 	.word	0xe000ed00
 800210c:	e000ed14 	.word	0xe000ed14

08002110 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002110:	2800      	cmp	r0, #0
 8002112:	db08      	blt.n	8002126 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002114:	0942      	lsrs	r2, r0, #5
 8002116:	2301      	movs	r3, #1
 8002118:	f000 001f 	and.w	r0, r0, #31
 800211c:	fa03 f000 	lsl.w	r0, r3, r0
 8002120:	4b01      	ldr	r3, [pc, #4]	; (8002128 <HAL_NVIC_EnableIRQ+0x18>)
 8002122:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002126:	4770      	bx	lr
 8002128:	e000e100 	.word	0xe000e100

0800212c <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800212c:	2800      	cmp	r0, #0
 800212e:	db0d      	blt.n	800214c <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002130:	0943      	lsrs	r3, r0, #5
 8002132:	2201      	movs	r2, #1
 8002134:	f000 001f 	and.w	r0, r0, #31
 8002138:	3320      	adds	r3, #32
 800213a:	fa02 f000 	lsl.w	r0, r2, r0
 800213e:	4a04      	ldr	r2, [pc, #16]	; (8002150 <HAL_NVIC_DisableIRQ+0x24>)
 8002140:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002144:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002148:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	e000e100 	.word	0xe000e100

08002154 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002154:	3801      	subs	r0, #1
 8002156:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800215a:	d20a      	bcs.n	8002172 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800215c:	4b06      	ldr	r3, [pc, #24]	; (8002178 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800215e:	21f0      	movs	r1, #240	; 0xf0
 8002160:	4a06      	ldr	r2, [pc, #24]	; (800217c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002162:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002164:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002166:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800216a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800216c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800216e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002170:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002172:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	e000e010 	.word	0xe000e010
 800217c:	e000ed00 	.word	0xe000ed00

08002180 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002180:	6803      	ldr	r3, [r0, #0]
{
 8002182:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002184:	2018      	movs	r0, #24
 8002186:	b2d9      	uxtb	r1, r3
 8002188:	3910      	subs	r1, #16
 800218a:	fbb1 f0f0 	udiv	r0, r1, r0
{
 800218e:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002190:	4c05      	ldr	r4, [pc, #20]	; (80021a8 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8002192:	295f      	cmp	r1, #95	; 0x5f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002194:	5c20      	ldrb	r0, [r4, r0]
 8002196:	65d0      	str	r0, [r2, #92]	; 0x5c
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002198:	f423 707f 	bic.w	r0, r3, #1020	; 0x3fc
 800219c:	f020 0003 	bic.w	r0, r0, #3
 80021a0:	bf88      	it	hi
 80021a2:	3004      	addhi	r0, #4
 80021a4:	6590      	str	r0, [r2, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 80021a6:	bd10      	pop	{r4, pc}
 80021a8:	08009f26 	.word	0x08009f26

080021ac <HAL_DMA_Init>:
{
 80021ac:	b570      	push	{r4, r5, r6, lr}
 80021ae:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80021b0:	f7ff ff52 	bl	8002058 <HAL_GetTick>
 80021b4:	4605      	mov	r5, r0
  if(hdma == NULL)
 80021b6:	2c00      	cmp	r4, #0
 80021b8:	d073      	beq.n	80022a2 <HAL_DMA_Init+0xf6>
  __HAL_UNLOCK(hdma);
 80021ba:	2300      	movs	r3, #0
  __HAL_DMA_DISABLE(hdma);
 80021bc:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 80021be:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 80021c2:	2302      	movs	r3, #2
 80021c4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80021c8:	6813      	ldr	r3, [r2, #0]
 80021ca:	f023 0301 	bic.w	r3, r3, #1
 80021ce:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021d0:	6821      	ldr	r1, [r4, #0]
 80021d2:	680b      	ldr	r3, [r1, #0]
 80021d4:	07d8      	lsls	r0, r3, #31
 80021d6:	d42f      	bmi.n	8002238 <HAL_DMA_Init+0x8c>
  tmp = hdma->Instance->CR;
 80021d8:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021da:	4d33      	ldr	r5, [pc, #204]	; (80022a8 <HAL_DMA_Init+0xfc>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021dc:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021de:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021e0:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	68e2      	ldr	r2, [r4, #12]
 80021e8:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021ea:	6922      	ldr	r2, [r4, #16]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	6962      	ldr	r2, [r4, #20]
 80021f0:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021f2:	69e2      	ldr	r2, [r4, #28]
 80021f4:	4303      	orrs	r3, r0
 80021f6:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 80021f8:	6a22      	ldr	r2, [r4, #32]
 80021fa:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021fc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80021fe:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002200:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002204:	bf02      	ittt	eq
 8002206:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 800220a:	4335      	orreq	r5, r6
 800220c:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800220e:	2a04      	cmp	r2, #4
  hdma->Instance->CR = tmp;  
 8002210:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8002212:	694b      	ldr	r3, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002214:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8002218:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800221c:	d133      	bne.n	8002286 <HAL_DMA_Init+0xda>
    tmp |= hdma->Init.FIFOThreshold;
 800221e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002220:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8002222:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002224:	b37d      	cbz	r5, 8002286 <HAL_DMA_Init+0xda>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002226:	b990      	cbnz	r0, 800224e <HAL_DMA_Init+0xa2>
  {
    switch (tmp)
 8002228:	2a01      	cmp	r2, #1
 800222a:	d021      	beq.n	8002270 <HAL_DMA_Init+0xc4>
 800222c:	f032 0202 	bics.w	r2, r2, #2
 8002230:	d129      	bne.n	8002286 <HAL_DMA_Init+0xda>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002232:	01ea      	lsls	r2, r5, #7
 8002234:	d527      	bpl.n	8002286 <HAL_DMA_Init+0xda>
 8002236:	e01e      	b.n	8002276 <HAL_DMA_Init+0xca>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002238:	f7ff ff0e 	bl	8002058 <HAL_GetTick>
 800223c:	1b40      	subs	r0, r0, r5
 800223e:	2805      	cmp	r0, #5
 8002240:	d9c6      	bls.n	80021d0 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002242:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002244:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002246:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8002248:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800224c:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800224e:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8002252:	d114      	bne.n	800227e <HAL_DMA_Init+0xd2>
    switch (tmp)
 8002254:	2a03      	cmp	r2, #3
 8002256:	d816      	bhi.n	8002286 <HAL_DMA_Init+0xda>
 8002258:	a001      	add	r0, pc, #4	; (adr r0, 8002260 <HAL_DMA_Init+0xb4>)
 800225a:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 800225e:	bf00      	nop
 8002260:	08002277 	.word	0x08002277
 8002264:	08002233 	.word	0x08002233
 8002268:	08002277 	.word	0x08002277
 800226c:	08002271 	.word	0x08002271
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002270:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8002274:	d107      	bne.n	8002286 <HAL_DMA_Init+0xda>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002276:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
 8002278:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800227a:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800227c:	e7e4      	b.n	8002248 <HAL_DMA_Init+0x9c>
    switch (tmp)
 800227e:	2a02      	cmp	r2, #2
 8002280:	d9f9      	bls.n	8002276 <HAL_DMA_Init+0xca>
 8002282:	2a03      	cmp	r2, #3
 8002284:	d0d5      	beq.n	8002232 <HAL_DMA_Init+0x86>
  hdma->Instance->FCR = tmp;
 8002286:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002288:	4620      	mov	r0, r4
 800228a:	f7ff ff79 	bl	8002180 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800228e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002290:	233f      	movs	r3, #63	; 0x3f
 8002292:	4093      	lsls	r3, r2
 8002294:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002296:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8002298:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800229a:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800229c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80022a0:	e7d4      	b.n	800224c <HAL_DMA_Init+0xa0>
    return HAL_ERROR;
 80022a2:	2001      	movs	r0, #1
 80022a4:	e7d2      	b.n	800224c <HAL_DMA_Init+0xa0>
 80022a6:	bf00      	nop
 80022a8:	e010803f 	.word	0xe010803f

080022ac <HAL_DMA_DeInit>:
{
 80022ac:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 80022ae:	4605      	mov	r5, r0
 80022b0:	b320      	cbz	r0, 80022fc <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80022b2:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	b2dc      	uxtb	r4, r3
 80022ba:	d01d      	beq.n	80022f8 <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 80022bc:	6803      	ldr	r3, [r0, #0]
  hdma->Instance->CR   = 0U;
 80022be:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	f022 0201 	bic.w	r2, r2, #1
 80022c6:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80022c8:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
 80022ca:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 80022cc:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 80022ce:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 80022d0:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 80022d2:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80022d4:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80022d6:	f7ff ff53 	bl	8002180 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022da:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80022dc:	233f      	movs	r3, #63	; 0x3f
 80022de:	4093      	lsls	r3, r2
 80022e0:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022e2:	656c      	str	r4, [r5, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 80022e4:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 80022e8:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
  hdma->XferHalfCpltCallback = NULL;
 80022ec:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 80022f0:	e9c5 4411 	strd	r4, r4, [r5, #68]	; 0x44
  hdma->XferAbortCallback = NULL;  
 80022f4:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
}
 80022f8:	4620      	mov	r0, r4
 80022fa:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80022fc:	2401      	movs	r4, #1
 80022fe:	e7fb      	b.n	80022f8 <HAL_DMA_DeInit+0x4c>

08002300 <HAL_DMA_Start_IT>:
{
 8002300:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8002302:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002306:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8002308:	2c01      	cmp	r4, #1
 800230a:	d034      	beq.n	8002376 <HAL_DMA_Start_IT+0x76>
 800230c:	2401      	movs	r4, #1
 800230e:	2500      	movs	r5, #0
 8002310:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8002314:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8002318:	2c01      	cmp	r4, #1
 800231a:	f04f 0402 	mov.w	r4, #2
 800231e:	d128      	bne.n	8002372 <HAL_DMA_Start_IT+0x72>
    hdma->State = HAL_DMA_STATE_BUSY;
 8002320:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002324:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002326:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002328:	6825      	ldr	r5, [r4, #0]
 800232a:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 800232e:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8002330:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002332:	6883      	ldr	r3, [r0, #8]
 8002334:	2b40      	cmp	r3, #64	; 0x40
 8002336:	d119      	bne.n	800236c <HAL_DMA_Start_IT+0x6c>
    hdma->Instance->PAR = DstAddress;
 8002338:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 800233a:	60e1      	str	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800233c:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800233e:	233f      	movs	r3, #63	; 0x3f
 8002340:	4093      	lsls	r3, r2
 8002342:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002344:	6823      	ldr	r3, [r4, #0]
 8002346:	f043 0316 	orr.w	r3, r3, #22
 800234a:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800234c:	6963      	ldr	r3, [r4, #20]
 800234e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002352:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8002354:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002356:	b11b      	cbz	r3, 8002360 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 8002358:	6823      	ldr	r3, [r4, #0]
 800235a:	f043 0308 	orr.w	r3, r3, #8
 800235e:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8002360:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002362:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8002364:	f043 0301 	orr.w	r3, r3, #1
 8002368:	6023      	str	r3, [r4, #0]
}
 800236a:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->PAR = SrcAddress;
 800236c:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 800236e:	60e2      	str	r2, [r4, #12]
 8002370:	e7e4      	b.n	800233c <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 8002372:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8002376:	2002      	movs	r0, #2
 8002378:	e7f7      	b.n	800236a <HAL_DMA_Start_IT+0x6a>

0800237a <HAL_DMA_Abort>:
{
 800237a:	b570      	push	{r4, r5, r6, lr}
 800237c:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800237e:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 8002380:	f7ff fe6a 	bl	8002058 <HAL_GetTick>
 8002384:	4605      	mov	r5, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002386:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800238a:	2b02      	cmp	r3, #2
 800238c:	d006      	beq.n	800239c <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800238e:	2380      	movs	r3, #128	; 0x80
    return HAL_ERROR;
 8002390:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002392:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8002394:	2300      	movs	r3, #0
 8002396:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800239a:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800239c:	6823      	ldr	r3, [r4, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	f022 0216 	bic.w	r2, r2, #22
 80023a4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023a6:	695a      	ldr	r2, [r3, #20]
 80023a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023ac:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023ae:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80023b0:	b90a      	cbnz	r2, 80023b6 <HAL_DMA_Abort+0x3c>
 80023b2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80023b4:	b11a      	cbz	r2, 80023be <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	f022 0208 	bic.w	r2, r2, #8
 80023bc:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	f022 0201 	bic.w	r2, r2, #1
 80023c4:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023c6:	6823      	ldr	r3, [r4, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f013 0301 	ands.w	r3, r3, #1
 80023ce:	d10a      	bne.n	80023e6 <HAL_DMA_Abort+0x6c>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023d0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80023d2:	223f      	movs	r2, #63	; 0x3f
  return HAL_OK;
 80023d4:	4618      	mov	r0, r3
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023d6:	408a      	lsls	r2, r1
 80023d8:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 80023da:	2201      	movs	r2, #1
    __HAL_UNLOCK(hdma);
 80023dc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 80023e0:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  return HAL_OK;
 80023e4:	e7d9      	b.n	800239a <HAL_DMA_Abort+0x20>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023e6:	f7ff fe37 	bl	8002058 <HAL_GetTick>
 80023ea:	1b40      	subs	r0, r0, r5
 80023ec:	2805      	cmp	r0, #5
 80023ee:	d9ea      	bls.n	80023c6 <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023f0:	2320      	movs	r3, #32
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023f2:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023f4:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 80023f6:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023f8:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 80023fc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 8002400:	e7cb      	b.n	800239a <HAL_DMA_Abort+0x20>

08002402 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002402:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8002406:	2b02      	cmp	r3, #2
 8002408:	d003      	beq.n	8002412 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800240a:	2380      	movs	r3, #128	; 0x80
 800240c:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 800240e:	2001      	movs	r0, #1
 8002410:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8002412:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8002414:	2305      	movs	r3, #5
 8002416:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  return HAL_OK;
 800241a:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 800241c:	6813      	ldr	r3, [r2, #0]
 800241e:	f023 0301 	bic.w	r3, r3, #1
 8002422:	6013      	str	r3, [r2, #0]
}
 8002424:	4770      	bx	lr
	...

08002428 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0;
 8002428:	2300      	movs	r3, #0
{
 800242a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
 800242c:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800242e:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 8002430:	4b5b      	ldr	r3, [pc, #364]	; (80025a0 <HAL_DMA_IRQHandler+0x178>)
{
 8002432:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002434:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600;
 8002436:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002438:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 800243a:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800243c:	409a      	lsls	r2, r3
 800243e:	4232      	tst	r2, r6
 8002440:	d00c      	beq.n	800245c <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002442:	6801      	ldr	r1, [r0, #0]
 8002444:	6808      	ldr	r0, [r1, #0]
 8002446:	0740      	lsls	r0, r0, #29
 8002448:	d508      	bpl.n	800245c <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800244a:	6808      	ldr	r0, [r1, #0]
 800244c:	f020 0004 	bic.w	r0, r0, #4
 8002450:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002452:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002454:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002456:	f042 0201 	orr.w	r2, r2, #1
 800245a:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800245c:	2201      	movs	r2, #1
 800245e:	409a      	lsls	r2, r3
 8002460:	4232      	tst	r2, r6
 8002462:	d008      	beq.n	8002476 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002464:	6821      	ldr	r1, [r4, #0]
 8002466:	6949      	ldr	r1, [r1, #20]
 8002468:	0609      	lsls	r1, r1, #24
 800246a:	d504      	bpl.n	8002476 <HAL_DMA_IRQHandler+0x4e>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800246c:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800246e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002470:	f042 0202 	orr.w	r2, r2, #2
 8002474:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002476:	2204      	movs	r2, #4
 8002478:	409a      	lsls	r2, r3
 800247a:	4232      	tst	r2, r6
 800247c:	d008      	beq.n	8002490 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800247e:	6821      	ldr	r1, [r4, #0]
 8002480:	6809      	ldr	r1, [r1, #0]
 8002482:	0788      	lsls	r0, r1, #30
 8002484:	d504      	bpl.n	8002490 <HAL_DMA_IRQHandler+0x68>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002486:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002488:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800248a:	f042 0204 	orr.w	r2, r2, #4
 800248e:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002490:	2210      	movs	r2, #16
 8002492:	409a      	lsls	r2, r3
 8002494:	4232      	tst	r2, r6
 8002496:	d010      	beq.n	80024ba <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002498:	6823      	ldr	r3, [r4, #0]
 800249a:	6819      	ldr	r1, [r3, #0]
 800249c:	0709      	lsls	r1, r1, #28
 800249e:	d50c      	bpl.n	80024ba <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80024a0:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	0350      	lsls	r0, r2, #13
 80024a6:	d537      	bpl.n	8002518 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	0319      	lsls	r1, r3, #12
 80024ac:	d401      	bmi.n	80024b2 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 80024ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80024b0:	e000      	b.n	80024b4 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80024b2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 80024b4:	b10b      	cbz	r3, 80024ba <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 80024b6:	4620      	mov	r0, r4
 80024b8:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80024ba:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80024bc:	2220      	movs	r2, #32
 80024be:	408a      	lsls	r2, r1
 80024c0:	4232      	tst	r2, r6
 80024c2:	d03a      	beq.n	800253a <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80024c4:	6823      	ldr	r3, [r4, #0]
 80024c6:	6818      	ldr	r0, [r3, #0]
 80024c8:	06c6      	lsls	r6, r0, #27
 80024ca:	d536      	bpl.n	800253a <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80024cc:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80024ce:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 80024d2:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024d4:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80024d6:	d127      	bne.n	8002528 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024d8:	f022 0216 	bic.w	r2, r2, #22
 80024dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024de:	695a      	ldr	r2, [r3, #20]
 80024e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024e4:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024e6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80024e8:	b90a      	cbnz	r2, 80024ee <HAL_DMA_IRQHandler+0xc6>
 80024ea:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80024ec:	b11a      	cbz	r2, 80024f6 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	f022 0208 	bic.w	r2, r2, #8
 80024f4:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024f6:	233f      	movs	r3, #63	; 0x3f
 80024f8:	408b      	lsls	r3, r1
 80024fa:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 80024fc:	2300      	movs	r3, #0
 80024fe:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8002502:	2301      	movs	r3, #1
 8002504:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8002508:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 800250a:	2b00      	cmp	r3, #0
 800250c:	d045      	beq.n	800259a <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 800250e:	4620      	mov	r0, r4
}
 8002510:	b003      	add	sp, #12
 8002512:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8002516:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	05d2      	lsls	r2, r2, #23
 800251c:	d4c7      	bmi.n	80024ae <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	f022 0208 	bic.w	r2, r2, #8
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	e7c2      	b.n	80024ae <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002528:	0350      	lsls	r0, r2, #13
 800252a:	d527      	bpl.n	800257c <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	0319      	lsls	r1, r3, #12
 8002530:	d431      	bmi.n	8002596 <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 8002532:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8002534:	b10b      	cbz	r3, 800253a <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 8002536:	4620      	mov	r0, r4
 8002538:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800253a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800253c:	b36b      	cbz	r3, 800259a <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800253e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002540:	07da      	lsls	r2, r3, #31
 8002542:	d519      	bpl.n	8002578 <HAL_DMA_IRQHandler+0x150>
  uint32_t timeout = SystemCoreClock / 9600;
 8002544:	f44f 5316 	mov.w	r3, #9600	; 0x2580
      __HAL_DMA_DISABLE(hdma);
 8002548:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 800254a:	fbb7 f7f3 	udiv	r7, r7, r3
      hdma->State = HAL_DMA_STATE_ABORT;
 800254e:	2305      	movs	r3, #5
 8002550:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8002554:	6813      	ldr	r3, [r2, #0]
 8002556:	f023 0301 	bic.w	r3, r3, #1
 800255a:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 800255c:	9b01      	ldr	r3, [sp, #4]
 800255e:	3301      	adds	r3, #1
 8002560:	42bb      	cmp	r3, r7
 8002562:	9301      	str	r3, [sp, #4]
 8002564:	d802      	bhi.n	800256c <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002566:	6813      	ldr	r3, [r2, #0]
 8002568:	07db      	lsls	r3, r3, #31
 800256a:	d4f7      	bmi.n	800255c <HAL_DMA_IRQHandler+0x134>
      __HAL_UNLOCK(hdma);
 800256c:	2300      	movs	r3, #0
 800256e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8002572:	2301      	movs	r3, #1
 8002574:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8002578:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800257a:	e7c6      	b.n	800250a <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8002582:	d108      	bne.n	8002596 <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002584:	6819      	ldr	r1, [r3, #0]
 8002586:	f021 0110 	bic.w	r1, r1, #16
 800258a:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800258c:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 800258e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8002592:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8002596:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002598:	e7cc      	b.n	8002534 <HAL_DMA_IRQHandler+0x10c>
}
 800259a:	b003      	add	sp, #12
 800259c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800259e:	bf00      	nop
 80025a0:	20000000 	.word	0x20000000

080025a4 <FLASH_Program_DoubleWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80025a4:	490a      	ldr	r1, [pc, #40]	; (80025d0 <FLASH_Program_DoubleWord+0x2c>)
{
 80025a6:	b510      	push	{r4, lr}
  FLASH->CR &= CR_PSIZE_MASK;
 80025a8:	690c      	ldr	r4, [r1, #16]
 80025aa:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 80025ae:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80025b0:	690c      	ldr	r4, [r1, #16]
 80025b2:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 80025b6:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 80025b8:	690c      	ldr	r4, [r1, #16]
 80025ba:	f044 0401 	orr.w	r4, r4, #1
 80025be:	610c      	str	r4, [r1, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80025c0:	6002      	str	r2, [r0, #0]
 80025c2:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80025c6:	6043      	str	r3, [r0, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 80025c8:	f3bf 8f4f 	dsb	sy

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80025cc:	bd10      	pop	{r4, pc}
 80025ce:	bf00      	nop
 80025d0:	40023c00 	.word	0x40023c00

080025d4 <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80025d4:	4b08      	ldr	r3, [pc, #32]	; (80025f8 <FLASH_Program_Word+0x24>)
 80025d6:	691a      	ldr	r2, [r3, #16]
 80025d8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80025dc:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80025de:	691a      	ldr	r2, [r3, #16]
 80025e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025e4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 80025e6:	691a      	ldr	r2, [r3, #16]
 80025e8:	f042 0201 	orr.w	r2, r2, #1
 80025ec:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 80025ee:	6001      	str	r1, [r0, #0]
 80025f0:	f3bf 8f4f 	dsb	sy
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	40023c00 	.word	0x40023c00

080025fc <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80025fc:	4b08      	ldr	r3, [pc, #32]	; (8002620 <FLASH_Program_HalfWord+0x24>)
 80025fe:	691a      	ldr	r2, [r3, #16]
 8002600:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002604:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002606:	691a      	ldr	r2, [r3, #16]
 8002608:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800260c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800260e:	691a      	ldr	r2, [r3, #16]
 8002610:	f042 0201 	orr.w	r2, r2, #1
 8002614:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 8002616:	8001      	strh	r1, [r0, #0]
 8002618:	f3bf 8f4f 	dsb	sy

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
  
}
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	40023c00 	.word	0x40023c00

08002624 <FLASH_Program_Byte>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8002624:	4b07      	ldr	r3, [pc, #28]	; (8002644 <FLASH_Program_Byte+0x20>)
 8002626:	691a      	ldr	r2, [r3, #16]
 8002628:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800262c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800262e:	691a      	ldr	r2, [r3, #16]
 8002630:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002632:	691a      	ldr	r2, [r3, #16]
 8002634:	f042 0201 	orr.w	r2, r2, #1
 8002638:	611a      	str	r2, [r3, #16]

  *(__IO uint8_t*)Address = Data;
 800263a:	7001      	strb	r1, [r0, #0]
 800263c:	f3bf 8f4f 	dsb	sy

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	40023c00 	.word	0x40023c00

08002648 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002648:	4b16      	ldr	r3, [pc, #88]	; (80026a4 <FLASH_SetErrorCode+0x5c>)
 800264a:	68da      	ldr	r2, [r3, #12]
 800264c:	0792      	lsls	r2, r2, #30
 800264e:	d504      	bpl.n	800265a <FLASH_SetErrorCode+0x12>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002650:	4915      	ldr	r1, [pc, #84]	; (80026a8 <FLASH_SetErrorCode+0x60>)
 8002652:	698a      	ldr	r2, [r1, #24]
 8002654:	f042 0220 	orr.w	r2, r2, #32
 8002658:	618a      	str	r2, [r1, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	06db      	lsls	r3, r3, #27
 800265e:	d504      	bpl.n	800266a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002660:	4a11      	ldr	r2, [pc, #68]	; (80026a8 <FLASH_SetErrorCode+0x60>)
 8002662:	6993      	ldr	r3, [r2, #24]
 8002664:	f043 0310 	orr.w	r3, r3, #16
 8002668:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800266a:	4b0e      	ldr	r3, [pc, #56]	; (80026a4 <FLASH_SetErrorCode+0x5c>)
 800266c:	68da      	ldr	r2, [r3, #12]
 800266e:	0690      	lsls	r0, r2, #26
 8002670:	d504      	bpl.n	800267c <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002672:	490d      	ldr	r1, [pc, #52]	; (80026a8 <FLASH_SetErrorCode+0x60>)
 8002674:	698a      	ldr	r2, [r1, #24]
 8002676:	f042 0208 	orr.w	r2, r2, #8
 800267a:	618a      	str	r2, [r1, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	0659      	lsls	r1, r3, #25
 8002680:	d504      	bpl.n	800268c <FLASH_SetErrorCode+0x44>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002682:	4a09      	ldr	r2, [pc, #36]	; (80026a8 <FLASH_SetErrorCode+0x60>)
 8002684:	6993      	ldr	r3, [r2, #24]
 8002686:	f043 0304 	orr.w	r3, r3, #4
 800268a:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 800268c:	4b05      	ldr	r3, [pc, #20]	; (80026a4 <FLASH_SetErrorCode+0x5c>)
 800268e:	68da      	ldr	r2, [r3, #12]
 8002690:	0612      	lsls	r2, r2, #24
 8002692:	d504      	bpl.n	800269e <FLASH_SetErrorCode+0x56>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 8002694:	4904      	ldr	r1, [pc, #16]	; (80026a8 <FLASH_SetErrorCode+0x60>)
 8002696:	698a      	ldr	r2, [r1, #24]
 8002698:	f042 0202 	orr.w	r2, r2, #2
 800269c:	618a      	str	r2, [r1, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 800269e:	22f2      	movs	r2, #242	; 0xf2
 80026a0:	60da      	str	r2, [r3, #12]
}
 80026a2:	4770      	bx	lr
 80026a4:	40023c00 	.word	0x40023c00
 80026a8:	20000a4c 	.word	0x20000a4c

080026ac <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80026ac:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <HAL_FLASH_Unlock+0x1c>)
 80026ae:	691a      	ldr	r2, [r3, #16]
 80026b0:	2a00      	cmp	r2, #0
 80026b2:	da07      	bge.n	80026c4 <HAL_FLASH_Unlock+0x18>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80026b4:	4a05      	ldr	r2, [pc, #20]	; (80026cc <HAL_FLASH_Unlock+0x20>)
 80026b6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80026b8:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 80026bc:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80026be:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 80026c0:	0fc0      	lsrs	r0, r0, #31
 80026c2:	4770      	bx	lr
 80026c4:	2000      	movs	r0, #0
}
 80026c6:	4770      	bx	lr
 80026c8:	40023c00 	.word	0x40023c00
 80026cc:	45670123 	.word	0x45670123

080026d0 <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 80026d0:	4a03      	ldr	r2, [pc, #12]	; (80026e0 <HAL_FLASH_Lock+0x10>)
}
 80026d2:	2000      	movs	r0, #0
  FLASH->CR |= FLASH_CR_LOCK;
 80026d4:	6913      	ldr	r3, [r2, #16]
 80026d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80026da:	6113      	str	r3, [r2, #16]
}
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	40023c00 	.word	0x40023c00

080026e4 <FLASH_WaitForLastOperation>:
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80026e4:	4b13      	ldr	r3, [pc, #76]	; (8002734 <FLASH_WaitForLastOperation+0x50>)
 80026e6:	2200      	movs	r2, #0
{ 
 80026e8:	b570      	push	{r4, r5, r6, lr}
 80026ea:	4604      	mov	r4, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80026ec:	619a      	str	r2, [r3, #24]
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80026ee:	4d12      	ldr	r5, [pc, #72]	; (8002738 <FLASH_WaitForLastOperation+0x54>)
  tickstart = HAL_GetTick();
 80026f0:	f7ff fcb2 	bl	8002058 <HAL_GetTick>
 80026f4:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80026f6:	68eb      	ldr	r3, [r5, #12]
 80026f8:	03db      	lsls	r3, r3, #15
 80026fa:	d407      	bmi.n	800270c <FLASH_WaitForLastOperation+0x28>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 80026fc:	68ea      	ldr	r2, [r5, #12]
 80026fe:	f012 02f2 	ands.w	r2, r2, #242	; 0xf2
 8002702:	d00e      	beq.n	8002722 <FLASH_WaitForLastOperation+0x3e>
    FLASH_SetErrorCode();
 8002704:	f7ff ffa0 	bl	8002648 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002708:	2001      	movs	r0, #1
 800270a:	e003      	b.n	8002714 <FLASH_WaitForLastOperation+0x30>
    if(Timeout != HAL_MAX_DELAY)
 800270c:	1c62      	adds	r2, r4, #1
 800270e:	d0f2      	beq.n	80026f6 <FLASH_WaitForLastOperation+0x12>
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8002710:	b90c      	cbnz	r4, 8002716 <FLASH_WaitForLastOperation+0x32>
        return HAL_TIMEOUT;
 8002712:	2003      	movs	r0, #3
}  
 8002714:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8002716:	f7ff fc9f 	bl	8002058 <HAL_GetTick>
 800271a:	1b80      	subs	r0, r0, r6
 800271c:	42a0      	cmp	r0, r4
 800271e:	d9ea      	bls.n	80026f6 <FLASH_WaitForLastOperation+0x12>
 8002720:	e7f7      	b.n	8002712 <FLASH_WaitForLastOperation+0x2e>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002722:	68e8      	ldr	r0, [r5, #12]
 8002724:	f010 0001 	ands.w	r0, r0, #1
 8002728:	d0f4      	beq.n	8002714 <FLASH_WaitForLastOperation+0x30>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800272a:	2301      	movs	r3, #1
  return HAL_OK;
 800272c:	4610      	mov	r0, r2
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800272e:	60eb      	str	r3, [r5, #12]
 8002730:	e7f0      	b.n	8002714 <FLASH_WaitForLastOperation+0x30>
 8002732:	bf00      	nop
 8002734:	20000a4c 	.word	0x20000a4c
 8002738:	40023c00 	.word	0x40023c00

0800273c <HAL_FLASH_Program>:
{
 800273c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 800273e:	4e1c      	ldr	r6, [pc, #112]	; (80027b0 <HAL_FLASH_Program+0x74>)
{
 8002740:	4615      	mov	r5, r2
 8002742:	4607      	mov	r7, r0
 8002744:	460c      	mov	r4, r1
  __HAL_LOCK(&pFlash);
 8002746:	7d32      	ldrb	r2, [r6, #20]
{
 8002748:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(&pFlash);
 800274a:	2a01      	cmp	r2, #1
 800274c:	d02d      	beq.n	80027aa <HAL_FLASH_Program+0x6e>
 800274e:	2201      	movs	r2, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002750:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8002754:	7532      	strb	r2, [r6, #20]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002756:	f7ff ffc5 	bl	80026e4 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800275a:	b998      	cbnz	r0, 8002784 <HAL_FLASH_Program+0x48>
    switch(TypeProgram)
 800275c:	9b01      	ldr	r3, [sp, #4]
 800275e:	2f03      	cmp	r7, #3
 8002760:	d807      	bhi.n	8002772 <HAL_FLASH_Program+0x36>
 8002762:	e8df f007 	tbb	[pc, r7]
 8002766:	1302      	.short	0x1302
 8002768:	1d18      	.short	0x1d18
        FLASH_Program_Byte(Address, (uint8_t) Data);
 800276a:	b2e9      	uxtb	r1, r5
 800276c:	4620      	mov	r0, r4
 800276e:	f7ff ff59 	bl	8002624 <FLASH_Program_Byte>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002772:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002776:	f7ff ffb5 	bl	80026e4 <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);
 800277a:	4a0e      	ldr	r2, [pc, #56]	; (80027b4 <HAL_FLASH_Program+0x78>)
 800277c:	6913      	ldr	r3, [r2, #16]
 800277e:	f023 0301 	bic.w	r3, r3, #1
 8002782:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 8002784:	2300      	movs	r3, #0
 8002786:	7533      	strb	r3, [r6, #20]
}
 8002788:	b003      	add	sp, #12
 800278a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800278c:	b2a9      	uxth	r1, r5
 800278e:	4620      	mov	r0, r4
 8002790:	f7ff ff34 	bl	80025fc <FLASH_Program_HalfWord>
        break;
 8002794:	e7ed      	b.n	8002772 <HAL_FLASH_Program+0x36>
        FLASH_Program_Word(Address, (uint32_t) Data);
 8002796:	4629      	mov	r1, r5
 8002798:	4620      	mov	r0, r4
 800279a:	f7ff ff1b 	bl	80025d4 <FLASH_Program_Word>
        break;
 800279e:	e7e8      	b.n	8002772 <HAL_FLASH_Program+0x36>
        FLASH_Program_DoubleWord(Address, Data);
 80027a0:	462a      	mov	r2, r5
 80027a2:	4620      	mov	r0, r4
 80027a4:	f7ff fefe 	bl	80025a4 <FLASH_Program_DoubleWord>
        break;
 80027a8:	e7e3      	b.n	8002772 <HAL_FLASH_Program+0x36>
  __HAL_LOCK(&pFlash);
 80027aa:	2002      	movs	r0, #2
 80027ac:	e7ec      	b.n	8002788 <HAL_FLASH_Program+0x4c>
 80027ae:	bf00      	nop
 80027b0:	20000a4c 	.word	0x20000a4c
 80027b4:	40023c00 	.word	0x40023c00

080027b8 <FLASH_MassErase>:
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
 80027b8:	4b0d      	ldr	r3, [pc, #52]	; (80027f0 <FLASH_MassErase+0x38>)
  if(Banks == FLASH_BANK_BOTH)
 80027ba:	2903      	cmp	r1, #3
  FLASH->CR &= CR_PSIZE_MASK;
 80027bc:	691a      	ldr	r2, [r3, #16]
 80027be:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80027c2:	611a      	str	r2, [r3, #16]
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 80027c4:	691a      	ldr	r2, [r3, #16]
  if(Banks == FLASH_BANK_BOTH)
 80027c6:	d104      	bne.n	80027d2 <FLASH_MassErase+0x1a>
    FLASH->CR |= FLASH_MER_BIT;
 80027c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    FLASH->CR |= FLASH_CR_MER2;
  }
  else
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;    
 80027cc:	f042 0204 	orr.w	r2, r2, #4
 80027d0:	e003      	b.n	80027da <FLASH_MassErase+0x22>
  else if(Banks == FLASH_BANK_2)
 80027d2:	2902      	cmp	r1, #2
 80027d4:	d1fa      	bne.n	80027cc <FLASH_MassErase+0x14>
    FLASH->CR |= FLASH_CR_MER2;
 80027d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    FLASH->CR |= FLASH_CR_MER1;    
 80027da:	611a      	str	r2, [r3, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 80027dc:	691a      	ldr	r2, [r3, #16]
 80027de:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 80027e2:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 80027e6:	6118      	str	r0, [r3, #16]
 80027e8:	f3bf 8f4f 	dsb	sy
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	40023c00 	.word	0x40023c00

080027f4 <FLASH_Erase_Sector>:

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80027f4:	b139      	cbz	r1, 8002806 <FLASH_Erase_Sector+0x12>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80027f6:	2901      	cmp	r1, #1
 80027f8:	d021      	beq.n	800283e <FLASH_Erase_Sector+0x4a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80027fa:	2902      	cmp	r1, #2
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80027fc:	bf0c      	ite	eq
 80027fe:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8002802:	f44f 7140 	movne.w	r1, #768	; 0x300
  {
    Sector += 4;
  }  

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 8002806:	4b0f      	ldr	r3, [pc, #60]	; (8002844 <FLASH_Erase_Sector+0x50>)
  if(Sector > FLASH_SECTOR_11) 
 8002808:	280b      	cmp	r0, #11
  FLASH->CR &= CR_PSIZE_MASK;
 800280a:	691a      	ldr	r2, [r3, #16]
    Sector += 4;
 800280c:	bf88      	it	hi
 800280e:	3004      	addhi	r0, #4
  FLASH->CR &= CR_PSIZE_MASK;
 8002810:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002814:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 8002816:	691a      	ldr	r2, [r3, #16]
 8002818:	4311      	orrs	r1, r2
 800281a:	6119      	str	r1, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800281c:	691a      	ldr	r2, [r3, #16]
 800281e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002822:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002824:	691a      	ldr	r2, [r3, #16]
 8002826:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 800282a:	f040 0002 	orr.w	r0, r0, #2
 800282e:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002830:	691a      	ldr	r2, [r3, #16]
 8002832:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002836:	611a      	str	r2, [r3, #16]
 8002838:	f3bf 8f4f 	dsb	sy
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800283c:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800283e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002842:	e7e0      	b.n	8002806 <FLASH_Erase_Sector+0x12>
 8002844:	40023c00 	.word	0x40023c00

08002848 <HAL_FLASHEx_Erase>:
{
 8002848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 800284c:	4e24      	ldr	r6, [pc, #144]	; (80028e0 <HAL_FLASHEx_Erase+0x98>)
{
 800284e:	4605      	mov	r5, r0
 8002850:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8002852:	7d33      	ldrb	r3, [r6, #20]
 8002854:	2b01      	cmp	r3, #1
 8002856:	d040      	beq.n	80028da <HAL_FLASHEx_Erase+0x92>
 8002858:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800285a:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 800285e:	7533      	strb	r3, [r6, #20]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002860:	f7ff ff40 	bl	80026e4 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8002864:	4604      	mov	r4, r0
 8002866:	b9b0      	cbnz	r0, 8002896 <HAL_FLASHEx_Erase+0x4e>
    *SectorError = 0xFFFFFFFFU;
 8002868:	f04f 33ff 	mov.w	r3, #4294967295
 800286c:	f8c8 3000 	str.w	r3, [r8]
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002870:	682b      	ldr	r3, [r5, #0]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d114      	bne.n	80028a0 <HAL_FLASHEx_Erase+0x58>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8002876:	6869      	ldr	r1, [r5, #4]
 8002878:	7c28      	ldrb	r0, [r5, #16]
 800287a:	f7ff ff9d 	bl	80027b8 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800287e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002882:	f7ff ff2f 	bl	80026e4 <FLASH_WaitForLastOperation>
      FLASH->CR &= (~FLASH_MER_BIT);
 8002886:	4a17      	ldr	r2, [pc, #92]	; (80028e4 <HAL_FLASHEx_Erase+0x9c>)
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002888:	4604      	mov	r4, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 800288a:	6913      	ldr	r3, [r2, #16]
 800288c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002890:	f023 0304 	bic.w	r3, r3, #4
 8002894:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 8002896:	2300      	movs	r3, #0
 8002898:	7533      	strb	r3, [r6, #20]
}
 800289a:	4620      	mov	r0, r4
 800289c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80028a0:	68af      	ldr	r7, [r5, #8]
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 80028a2:	f8df 9040 	ldr.w	r9, [pc, #64]	; 80028e4 <HAL_FLASHEx_Erase+0x9c>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80028a6:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 80028aa:	4413      	add	r3, r2
 80028ac:	42bb      	cmp	r3, r7
 80028ae:	d9f2      	bls.n	8002896 <HAL_FLASHEx_Erase+0x4e>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80028b0:	7c29      	ldrb	r1, [r5, #16]
 80028b2:	4638      	mov	r0, r7
 80028b4:	f7ff ff9e 	bl	80027f4 <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80028b8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80028bc:	f7ff ff12 	bl	80026e4 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 80028c0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80028c4:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80028c8:	f8c9 3010 	str.w	r3, [r9, #16]
        if(status != HAL_OK) 
 80028cc:	b118      	cbz	r0, 80028d6 <HAL_FLASHEx_Erase+0x8e>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80028ce:	4604      	mov	r4, r0
          *SectorError = index;
 80028d0:	f8c8 7000 	str.w	r7, [r8]
          break;
 80028d4:	e7df      	b.n	8002896 <HAL_FLASHEx_Erase+0x4e>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80028d6:	3701      	adds	r7, #1
 80028d8:	e7e5      	b.n	80028a6 <HAL_FLASHEx_Erase+0x5e>
  __HAL_LOCK(&pFlash);
 80028da:	2402      	movs	r4, #2
 80028dc:	e7dd      	b.n	800289a <HAL_FLASHEx_Erase+0x52>
 80028de:	bf00      	nop
 80028e0:	20000a4c 	.word	0x20000a4c
 80028e4:	40023c00 	.word	0x40023c00

080028e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80028ec:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ee:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002aac <HAL_GPIO_Init+0x1c4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028f2:	4a6c      	ldr	r2, [pc, #432]	; (8002aa4 <HAL_GPIO_Init+0x1bc>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80028f4:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 8002ab0 <HAL_GPIO_Init+0x1c8>
    ioposition = ((uint32_t)0x01) << position;
 80028f8:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028fa:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 80028fc:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028fe:	ea04 0605 	and.w	r6, r4, r5
    if(iocurrent == ioposition)
 8002902:	43ac      	bics	r4, r5
 8002904:	f040 80b4 	bne.w	8002a70 <HAL_GPIO_Init+0x188>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002908:	684c      	ldr	r4, [r1, #4]
 800290a:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800290e:	2503      	movs	r5, #3
 8002910:	f024 0c10 	bic.w	ip, r4, #16
 8002914:	fa05 f50e 	lsl.w	r5, r5, lr
 8002918:	f10c 37ff 	add.w	r7, ip, #4294967295
 800291c:	43ed      	mvns	r5, r5
 800291e:	2f01      	cmp	r7, #1
 8002920:	d811      	bhi.n	8002946 <HAL_GPIO_Init+0x5e>
        temp = GPIOx->OSPEEDR; 
 8002922:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002924:	ea07 0a05 	and.w	sl, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8002928:	68cf      	ldr	r7, [r1, #12]
 800292a:	fa07 f70e 	lsl.w	r7, r7, lr
 800292e:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8002932:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002934:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002936:	ea27 0a06 	bic.w	sl, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800293a:	f3c4 1700 	ubfx	r7, r4, #4, #1
 800293e:	409f      	lsls	r7, r3
 8002940:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 8002944:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8002946:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002948:	f1bc 0f02 	cmp.w	ip, #2
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800294c:	ea07 0a05 	and.w	sl, r7, r5
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002950:	688f      	ldr	r7, [r1, #8]
 8002952:	fa07 f70e 	lsl.w	r7, r7, lr
 8002956:	ea47 070a 	orr.w	r7, r7, sl
      GPIOx->PUPDR = temp;
 800295a:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800295c:	d116      	bne.n	800298c <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3];
 800295e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002962:	f003 0b07 	and.w	fp, r3, #7
 8002966:	f04f 0c0f 	mov.w	ip, #15
 800296a:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 800296e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8002972:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002976:	fa0c fc0b 	lsl.w	ip, ip, fp
 800297a:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800297e:	690f      	ldr	r7, [r1, #16]
 8002980:	fa07 f70b 	lsl.w	r7, r7, fp
 8002984:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3] = temp;
 8002988:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 800298c:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800298e:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002990:	f004 0703 	and.w	r7, r4, #3
 8002994:	fa07 fe0e 	lsl.w	lr, r7, lr
 8002998:	ea4e 0505 	orr.w	r5, lr, r5
      GPIOx->MODER = temp;
 800299c:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800299e:	00e5      	lsls	r5, r4, #3
 80029a0:	d566      	bpl.n	8002a70 <HAL_GPIO_Init+0x188>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029a2:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 80029a6:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80029aa:	f003 0c03 	and.w	ip, r3, #3
 80029ae:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029b2:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 80029b6:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80029ba:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029be:	f8c8 5044 	str.w	r5, [r8, #68]	; 0x44
 80029c2:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 80029c6:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 80029ca:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 80029ce:	9501      	str	r5, [sp, #4]
 80029d0:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80029d2:	fa0e f50c 	lsl.w	r5, lr, ip
        temp = SYSCFG->EXTICR[position >> 2];
 80029d6:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80029da:	ea2a 0e05 	bic.w	lr, sl, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80029de:	4d32      	ldr	r5, [pc, #200]	; (8002aa8 <HAL_GPIO_Init+0x1c0>)
 80029e0:	42a8      	cmp	r0, r5
 80029e2:	d04c      	beq.n	8002a7e <HAL_GPIO_Init+0x196>
 80029e4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80029e8:	42a8      	cmp	r0, r5
 80029ea:	d04a      	beq.n	8002a82 <HAL_GPIO_Init+0x19a>
 80029ec:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80029f0:	42a8      	cmp	r0, r5
 80029f2:	d048      	beq.n	8002a86 <HAL_GPIO_Init+0x19e>
 80029f4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80029f8:	42a8      	cmp	r0, r5
 80029fa:	d046      	beq.n	8002a8a <HAL_GPIO_Init+0x1a2>
 80029fc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002a00:	42a8      	cmp	r0, r5
 8002a02:	d044      	beq.n	8002a8e <HAL_GPIO_Init+0x1a6>
 8002a04:	4548      	cmp	r0, r9
 8002a06:	d044      	beq.n	8002a92 <HAL_GPIO_Init+0x1aa>
 8002a08:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002a0c:	42a8      	cmp	r0, r5
 8002a0e:	d042      	beq.n	8002a96 <HAL_GPIO_Init+0x1ae>
 8002a10:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002a14:	42a8      	cmp	r0, r5
 8002a16:	d040      	beq.n	8002a9a <HAL_GPIO_Init+0x1b2>
 8002a18:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002a1c:	42a8      	cmp	r0, r5
 8002a1e:	d03e      	beq.n	8002a9e <HAL_GPIO_Init+0x1b6>
 8002a20:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002a24:	42a8      	cmp	r0, r5
 8002a26:	bf0c      	ite	eq
 8002a28:	2509      	moveq	r5, #9
 8002a2a:	250a      	movne	r5, #10
 8002a2c:	fa05 f50c 	lsl.w	r5, r5, ip
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a30:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002a34:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8002a38:	60bd      	str	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 8002a3a:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->IMR;
 8002a3e:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8002a40:	bf0c      	ite	eq
 8002a42:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8002a44:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a46:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 8002a4a:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8002a4c:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8002a4e:	bf0c      	ite	eq
 8002a50:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8002a52:	4335      	orrne	r5, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a54:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 8002a58:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8002a5a:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8002a5c:	bf0c      	ite	eq
 8002a5e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8002a60:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a62:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8002a64:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8002a66:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8002a68:	bf54      	ite	pl
 8002a6a:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8002a6c:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8002a6e:	60d5      	str	r5, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a70:	3301      	adds	r3, #1
 8002a72:	2b10      	cmp	r3, #16
 8002a74:	f47f af40 	bne.w	80028f8 <HAL_GPIO_Init+0x10>
      }
    }
  }
}
 8002a78:	b003      	add	sp, #12
 8002a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002a7e:	2500      	movs	r5, #0
 8002a80:	e7d4      	b.n	8002a2c <HAL_GPIO_Init+0x144>
 8002a82:	2501      	movs	r5, #1
 8002a84:	e7d2      	b.n	8002a2c <HAL_GPIO_Init+0x144>
 8002a86:	2502      	movs	r5, #2
 8002a88:	e7d0      	b.n	8002a2c <HAL_GPIO_Init+0x144>
 8002a8a:	2503      	movs	r5, #3
 8002a8c:	e7ce      	b.n	8002a2c <HAL_GPIO_Init+0x144>
 8002a8e:	2504      	movs	r5, #4
 8002a90:	e7cc      	b.n	8002a2c <HAL_GPIO_Init+0x144>
 8002a92:	2505      	movs	r5, #5
 8002a94:	e7ca      	b.n	8002a2c <HAL_GPIO_Init+0x144>
 8002a96:	2506      	movs	r5, #6
 8002a98:	e7c8      	b.n	8002a2c <HAL_GPIO_Init+0x144>
 8002a9a:	2507      	movs	r5, #7
 8002a9c:	e7c6      	b.n	8002a2c <HAL_GPIO_Init+0x144>
 8002a9e:	2508      	movs	r5, #8
 8002aa0:	e7c4      	b.n	8002a2c <HAL_GPIO_Init+0x144>
 8002aa2:	bf00      	nop
 8002aa4:	40013c00 	.word	0x40013c00
 8002aa8:	40020000 	.word	0x40020000
 8002aac:	40023800 	.word	0x40023800
 8002ab0:	40021400 	.word	0x40021400

08002ab4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ab8:	2200      	movs	r2, #0
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002aba:	4c4a      	ldr	r4, [pc, #296]	; (8002be4 <HAL_GPIO_DeInit+0x130>)
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8002abc:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8002bec <HAL_GPIO_DeInit+0x138>
 8002ac0:	f8df a12c 	ldr.w	sl, [pc, #300]	; 8002bf0 <HAL_GPIO_DeInit+0x13c>
 8002ac4:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8002bf4 <HAL_GPIO_DeInit+0x140>
    ioposition = ((uint32_t)0x01) << position;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	fa03 fe02 	lsl.w	lr, r3, r2
    if(iocurrent == ioposition)
 8002ace:	ea3e 0301 	bics.w	r3, lr, r1
    iocurrent = (GPIO_Pin) & ioposition;
 8002ad2:	ea0e 0701 	and.w	r7, lr, r1
    if(iocurrent == ioposition)
 8002ad6:	d16e      	bne.n	8002bb6 <HAL_GPIO_DeInit+0x102>
      tmp = SYSCFG->EXTICR[position >> 2];
 8002ad8:	f022 0503 	bic.w	r5, r2, #3
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002adc:	f002 0c03 	and.w	ip, r2, #3
 8002ae0:	260f      	movs	r6, #15
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8002ae2:	4b41      	ldr	r3, [pc, #260]	; (8002be8 <HAL_GPIO_DeInit+0x134>)
 8002ae4:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002ae8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8002aec:	4298      	cmp	r0, r3
 8002aee:	f505 359c 	add.w	r5, r5, #79872	; 0x13800
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002af2:	fa06 f60c 	lsl.w	r6, r6, ip
      tmp = SYSCFG->EXTICR[position >> 2];
 8002af6:	f8d5 8008 	ldr.w	r8, [r5, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002afa:	ea06 0808 	and.w	r8, r6, r8
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8002afe:	d05f      	beq.n	8002bc0 <HAL_GPIO_DeInit+0x10c>
 8002b00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b04:	4298      	cmp	r0, r3
 8002b06:	d05d      	beq.n	8002bc4 <HAL_GPIO_DeInit+0x110>
 8002b08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b0c:	4298      	cmp	r0, r3
 8002b0e:	d05b      	beq.n	8002bc8 <HAL_GPIO_DeInit+0x114>
 8002b10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b14:	4298      	cmp	r0, r3
 8002b16:	d059      	beq.n	8002bcc <HAL_GPIO_DeInit+0x118>
 8002b18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b1c:	4298      	cmp	r0, r3
 8002b1e:	d057      	beq.n	8002bd0 <HAL_GPIO_DeInit+0x11c>
 8002b20:	4548      	cmp	r0, r9
 8002b22:	d057      	beq.n	8002bd4 <HAL_GPIO_DeInit+0x120>
 8002b24:	4550      	cmp	r0, sl
 8002b26:	d057      	beq.n	8002bd8 <HAL_GPIO_DeInit+0x124>
 8002b28:	4558      	cmp	r0, fp
 8002b2a:	d057      	beq.n	8002bdc <HAL_GPIO_DeInit+0x128>
 8002b2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b30:	4298      	cmp	r0, r3
 8002b32:	d055      	beq.n	8002be0 <HAL_GPIO_DeInit+0x12c>
 8002b34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b38:	4298      	cmp	r0, r3
 8002b3a:	bf0c      	ite	eq
 8002b3c:	2309      	moveq	r3, #9
 8002b3e:	230a      	movne	r3, #10
 8002b40:	fa03 f30c 	lsl.w	r3, r3, ip
 8002b44:	4543      	cmp	r3, r8
 8002b46:	d113      	bne.n	8002b70 <HAL_GPIO_DeInit+0xbc>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002b48:	6823      	ldr	r3, [r4, #0]
 8002b4a:	ea23 0307 	bic.w	r3, r3, r7
 8002b4e:	6023      	str	r3, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002b50:	6863      	ldr	r3, [r4, #4]
 8002b52:	ea23 0307 	bic.w	r3, r3, r7
 8002b56:	6063      	str	r3, [r4, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002b58:	68a3      	ldr	r3, [r4, #8]
 8002b5a:	ea23 0307 	bic.w	r3, r3, r7
 8002b5e:	60a3      	str	r3, [r4, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002b60:	68e3      	ldr	r3, [r4, #12]
 8002b62:	ea23 0707 	bic.w	r7, r3, r7
 8002b66:	60e7      	str	r7, [r4, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8002b68:	68ab      	ldr	r3, [r5, #8]
 8002b6a:	ea23 0606 	bic.w	r6, r3, r6
 8002b6e:	60ae      	str	r6, [r5, #8]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002b70:	2603      	movs	r6, #3
 8002b72:	0053      	lsls	r3, r2, #1
 8002b74:	6805      	ldr	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002b76:	f002 0c07 	and.w	ip, r2, #7
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002b7a:	fa06 f303 	lsl.w	r3, r6, r3
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002b7e:	270f      	movs	r7, #15
 8002b80:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002b84:	ea25 0503 	bic.w	r5, r5, r3
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002b88:	fa07 f70c 	lsl.w	r7, r7, ip
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002b8c:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002b8e:	fa22 f506 	lsr.w	r5, r2, r6
 8002b92:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8002b96:	6a2e      	ldr	r6, [r5, #32]
 8002b98:	ea26 0707 	bic.w	r7, r6, r7
 8002b9c:	622f      	str	r7, [r5, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002b9e:	68c5      	ldr	r5, [r0, #12]
 8002ba0:	ea25 0503 	bic.w	r5, r5, r3
 8002ba4:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ba6:	6845      	ldr	r5, [r0, #4]
 8002ba8:	ea25 050e 	bic.w	r5, r5, lr
 8002bac:	6045      	str	r5, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002bae:	6885      	ldr	r5, [r0, #8]
 8002bb0:	ea25 0303 	bic.w	r3, r5, r3
 8002bb4:	6083      	str	r3, [r0, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002bb6:	3201      	adds	r2, #1
 8002bb8:	2a10      	cmp	r2, #16
 8002bba:	d185      	bne.n	8002ac8 <HAL_GPIO_DeInit+0x14>
    }
  }
}
 8002bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	e7bd      	b.n	8002b40 <HAL_GPIO_DeInit+0x8c>
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e7bb      	b.n	8002b40 <HAL_GPIO_DeInit+0x8c>
 8002bc8:	2302      	movs	r3, #2
 8002bca:	e7b9      	b.n	8002b40 <HAL_GPIO_DeInit+0x8c>
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e7b7      	b.n	8002b40 <HAL_GPIO_DeInit+0x8c>
 8002bd0:	2304      	movs	r3, #4
 8002bd2:	e7b5      	b.n	8002b40 <HAL_GPIO_DeInit+0x8c>
 8002bd4:	2305      	movs	r3, #5
 8002bd6:	e7b3      	b.n	8002b40 <HAL_GPIO_DeInit+0x8c>
 8002bd8:	2306      	movs	r3, #6
 8002bda:	e7b1      	b.n	8002b40 <HAL_GPIO_DeInit+0x8c>
 8002bdc:	2307      	movs	r3, #7
 8002bde:	e7af      	b.n	8002b40 <HAL_GPIO_DeInit+0x8c>
 8002be0:	2308      	movs	r3, #8
 8002be2:	e7ad      	b.n	8002b40 <HAL_GPIO_DeInit+0x8c>
 8002be4:	40013c00 	.word	0x40013c00
 8002be8:	40020000 	.word	0x40020000
 8002bec:	40021400 	.word	0x40021400
 8002bf0:	40021800 	.word	0x40021800
 8002bf4:	40021c00 	.word	0x40021c00

08002bf8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bf8:	b10a      	cbz	r2, 8002bfe <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002bfa:	6181      	str	r1, [r0, #24]
  }
}
 8002bfc:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002bfe:	0409      	lsls	r1, r1, #16
 8002c00:	e7fb      	b.n	8002bfa <HAL_GPIO_WritePin+0x2>

08002c02 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c02:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c04:	ea01 0203 	and.w	r2, r1, r3
 8002c08:	ea21 0103 	bic.w	r1, r1, r3
 8002c0c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002c10:	6181      	str	r1, [r0, #24]
}
 8002c12:	4770      	bx	lr

08002c14 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002c14:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002c16:	4604      	mov	r4, r0
{
 8002c18:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 8002c1a:	b360      	cbz	r0, 8002c76 <HAL_PCD_Init+0x62>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c1c:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
  USBx = hpcd->Instance;
 8002c20:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c22:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002c26:	b91b      	cbnz	r3, 8002c30 <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c28:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c2c:	f003 fba8 	bl	8006380 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c30:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c32:	466e      	mov	r6, sp
 8002c34:	1d27      	adds	r7, r4, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c36:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002c3a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  __HAL_PCD_DISABLE(hpcd);
 8002c3c:	4625      	mov	r5, r4
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002c3e:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_PCD_DISABLE(hpcd);
 8002c42:	f855 0b10 	ldr.w	r0, [r5], #16
    hpcd->Init.dma_enable = 0U;
 8002c46:	bf08      	it	eq
 8002c48:	6123      	streq	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 8002c4a:	f002 f86f 	bl	8004d2c <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c50:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002c52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c54:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002c56:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002c5a:	4625      	mov	r5, r4
 8002c5c:	e886 0003 	stmia.w	r6, {r0, r1}
 8002c60:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8002c64:	f855 0b10 	ldr.w	r0, [r5], #16
 8002c68:	f001 ffae 	bl	8004bc8 <USB_CoreInit>
 8002c6c:	4606      	mov	r6, r0
 8002c6e:	b120      	cbz	r0, 8002c7a <HAL_PCD_Init+0x66>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c70:	2302      	movs	r3, #2
 8002c72:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8002c76:	2501      	movs	r5, #1
 8002c78:	e052      	b.n	8002d20 <HAL_PCD_Init+0x10c>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002c7a:	4601      	mov	r1, r0
 8002c7c:	6820      	ldr	r0, [r4, #0]
 8002c7e:	f002 f85b 	bl	8004d38 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c82:	4630      	mov	r0, r6
 8002c84:	f8d4 c004 	ldr.w	ip, [r4, #4]
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c88:	261c      	movs	r6, #28
 8002c8a:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c8e:	4601      	mov	r1, r0
 8002c90:	b2c2      	uxtb	r2, r0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c92:	3001      	adds	r0, #1
 8002c94:	4594      	cmp	ip, r2
 8002c96:	d81b      	bhi.n	8002cd0 <HAL_PCD_Init+0xbc>
 8002c98:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c9a:	261c      	movs	r6, #28
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	4584      	cmp	ip, r0
 8002ca4:	d822      	bhi.n	8002cec <HAL_PCD_Init+0xd8>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ca6:	466e      	mov	r6, sp
 8002ca8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002caa:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002cac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cae:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002cb0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002cb4:	e886 0003 	stmia.w	r6, {r0, r1}
 8002cb8:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8002cbc:	6820      	ldr	r0, [r4, #0]
 8002cbe:	f002 f87d 	bl	8004dbc <USB_DevInit>
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	4605      	mov	r5, r0
 8002cc6:	b1f0      	cbz	r0, 8002d06 <HAL_PCD_Init+0xf2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cc8:	2202      	movs	r2, #2
 8002cca:	f884 23bd 	strb.w	r2, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8002cce:	e7d2      	b.n	8002c76 <HAL_PCD_Init+0x62>
    hpcd->IN_ep[i].is_in = 1U;
 8002cd0:	fb06 4302 	mla	r3, r6, r2, r4
 8002cd4:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8002cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002cdc:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ce0:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ce4:	6519      	str	r1, [r3, #80]	; 0x50
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ce6:	e9c3 1111 	strd	r1, r1, [r3, #68]	; 0x44
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cea:	e7d1      	b.n	8002c90 <HAL_PCD_Init+0x7c>
    hpcd->OUT_ep[i].is_in = 0U;
 8002cec:	fb06 4200 	mla	r2, r6, r0, r4
 8002cf0:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 8002cf4:	f882 01fc 	strb.w	r0, [r2, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002cf8:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002cfc:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d00:	e9c2 1181 	strd	r1, r1, [r2, #516]	; 0x204
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d04:	e7cb      	b.n	8002c9e <HAL_PCD_Init+0x8a>
  }

  hpcd->USB_Address = 0U;
 8002d06:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002d0a:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002d0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d102      	bne.n	8002d1a <HAL_PCD_Init+0x106>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002d14:	4620      	mov	r0, r4
 8002d16:	f000 fc44 	bl	80035a2 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002d1a:	6820      	ldr	r0, [r4, #0]
 8002d1c:	f002 fba0 	bl	8005460 <USB_DevDisconnect>

  return HAL_OK;
}
 8002d20:	4628      	mov	r0, r5
 8002d22:	b00b      	add	sp, #44	; 0x2c
 8002d24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d26 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002d26:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8002d28:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
{
 8002d2c:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d00c      	beq.n	8002d4c <HAL_PCD_Start+0x26>
 8002d32:	2301      	movs	r3, #1
 8002d34:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 8002d38:	6800      	ldr	r0, [r0, #0]
 8002d3a:	f001 fff1 	bl	8004d20 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002d3e:	6820      	ldr	r0, [r4, #0]
 8002d40:	f002 fb80 	bl	8005444 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002d44:	2000      	movs	r0, #0
 8002d46:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc

  return HAL_OK;
}
 8002d4a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8002d4c:	2002      	movs	r0, #2
 8002d4e:	e7fc      	b.n	8002d4a <HAL_PCD_Start+0x24>

08002d50 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d54:	6806      	ldr	r6, [r0, #0]
{
 8002d56:	b087      	sub	sp, #28
 8002d58:	4604      	mov	r4, r0
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002d5a:	4630      	mov	r0, r6
 8002d5c:	f002 fbbd 	bl	80054da <USB_GetMode>
 8002d60:	9002      	str	r0, [sp, #8]
 8002d62:	2800      	cmp	r0, #0
 8002d64:	f040 813c 	bne.w	8002fe0 <HAL_PCD_IRQHandler+0x290>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002d68:	6820      	ldr	r0, [r4, #0]
 8002d6a:	f002 fb87 	bl	800547c <USB_ReadInterrupts>
 8002d6e:	2800      	cmp	r0, #0
 8002d70:	f000 8136 	beq.w	8002fe0 <HAL_PCD_IRQHandler+0x290>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002d74:	6820      	ldr	r0, [r4, #0]
 8002d76:	f002 fb81 	bl	800547c <USB_ReadInterrupts>
 8002d7a:	0782      	lsls	r2, r0, #30
 8002d7c:	d504      	bpl.n	8002d88 <HAL_PCD_IRQHandler+0x38>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002d7e:	6822      	ldr	r2, [r4, #0]
 8002d80:	6953      	ldr	r3, [r2, #20]
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	6153      	str	r3, [r2, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002d88:	6820      	ldr	r0, [r4, #0]
 8002d8a:	f002 fb77 	bl	800547c <USB_ReadInterrupts>
 8002d8e:	06c3      	lsls	r3, r0, #27
 8002d90:	d52a      	bpl.n	8002de8 <HAL_PCD_IRQHandler+0x98>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d92:	6822      	ldr	r2, [r4, #0]
 8002d94:	6993      	ldr	r3, [r2, #24]
 8002d96:	f023 0310 	bic.w	r3, r3, #16
 8002d9a:	6193      	str	r3, [r2, #24]

      temp = USBx->GRXSTSP;
 8002d9c:	6a37      	ldr	r7, [r6, #32]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002d9e:	f3c7 4343 	ubfx	r3, r7, #17, #4
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002da2:	f007 050f 	and.w	r5, r7, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	f040 811d 	bne.w	8002fe6 <HAL_PCD_IRQHandler+0x296>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002dac:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002db0:	421f      	tst	r7, r3
 8002db2:	d014      	beq.n	8002dde <HAL_PCD_IRQHandler+0x8e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002db4:	231c      	movs	r3, #28
 8002db6:	f3c7 180a 	ubfx	r8, r7, #4, #11
 8002dba:	4630      	mov	r0, r6
 8002dbc:	fb03 4505 	mla	r5, r3, r5, r4
 8002dc0:	4642      	mov	r2, r8
 8002dc2:	f8d5 1208 	ldr.w	r1, [r5, #520]	; 0x208
 8002dc6:	f002 facb 	bl	8005360 <USB_ReadPacket>
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002dca:	f8d5 2208 	ldr.w	r2, [r5, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002dce:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002dd2:	4442      	add	r2, r8
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002dd4:	4443      	add	r3, r8
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002dd6:	f8c5 2208 	str.w	r2, [r5, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002dda:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002dde:	6822      	ldr	r2, [r4, #0]
 8002de0:	6993      	ldr	r3, [r2, #24]
 8002de2:	f043 0310 	orr.w	r3, r3, #16
 8002de6:	6193      	str	r3, [r2, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002de8:	6820      	ldr	r0, [r4, #0]
 8002dea:	f002 fb47 	bl	800547c <USB_ReadInterrupts>
 8002dee:	0307      	lsls	r7, r0, #12
 8002df0:	f100 810d 	bmi.w	800300e <HAL_PCD_IRQHandler+0x2be>
        epnum++;
        ep_intr >>= 1U;
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002df4:	6820      	ldr	r0, [r4, #0]
 8002df6:	f002 fb41 	bl	800547c <USB_ReadInterrupts>
 8002dfa:	0345      	lsls	r5, r0, #13
 8002dfc:	d50c      	bpl.n	8002e18 <HAL_PCD_IRQHandler+0xc8>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002dfe:	4625      	mov	r5, r4
 8002e00:	f506 6910 	add.w	r9, r6, #2304	; 0x900

      epnum = 0U;
 8002e04:	f04f 0800 	mov.w	r8, #0
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002e08:	6820      	ldr	r0, [r4, #0]
 8002e0a:	f002 fb43 	bl	8005494 <USB_ReadDevAllInEpInterrupt>
 8002e0e:	9003      	str	r0, [sp, #12]

      while (ep_intr != 0U)
 8002e10:	9b03      	ldr	r3, [sp, #12]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f040 81a4 	bne.w	8003160 <HAL_PCD_IRQHandler+0x410>
        ep_intr >>= 1U;
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002e18:	6820      	ldr	r0, [r4, #0]
 8002e1a:	f002 fb2f 	bl	800547c <USB_ReadInterrupts>
 8002e1e:	2800      	cmp	r0, #0
 8002e20:	da15      	bge.n	8002e4e <HAL_PCD_IRQHandler+0xfe>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002e22:	f8d6 3804 	ldr.w	r3, [r6, #2052]	; 0x804
 8002e26:	f023 0301 	bic.w	r3, r3, #1
 8002e2a:	f8c6 3804 	str.w	r3, [r6, #2052]	; 0x804

      if (hpcd->LPM_State == LPM_L1)
 8002e2e:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	f040 8225 	bne.w	8003282 <HAL_PCD_IRQHandler+0x532>
      {
        hpcd->LPM_State = LPM_L0;
 8002e38:	2100      	movs	r1, #0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002e3a:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L0;
 8002e3c:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002e40:	f003 fbf8 	bl	8006634 <HAL_PCDEx_LPM_Callback>
#else
        HAL_PCD_ResumeCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002e44:	6822      	ldr	r2, [r4, #0]
 8002e46:	6953      	ldr	r3, [r2, #20]
 8002e48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e4c:	6153      	str	r3, [r2, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002e4e:	6820      	ldr	r0, [r4, #0]
 8002e50:	f002 fb14 	bl	800547c <USB_ReadInterrupts>
 8002e54:	0500      	lsls	r0, r0, #20
 8002e56:	d50b      	bpl.n	8002e70 <HAL_PCD_IRQHandler+0x120>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002e58:	f8d6 3808 	ldr.w	r3, [r6, #2056]	; 0x808
 8002e5c:	07d9      	lsls	r1, r3, #31
 8002e5e:	d502      	bpl.n	8002e66 <HAL_PCD_IRQHandler+0x116>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002e60:	4620      	mov	r0, r4
 8002e62:	f003 fb01 	bl	8006468 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002e66:	6822      	ldr	r2, [r4, #0]
 8002e68:	6953      	ldr	r3, [r2, #20]
 8002e6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e6e:	6153      	str	r3, [r2, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002e70:	6820      	ldr	r0, [r4, #0]
 8002e72:	f002 fb03 	bl	800547c <USB_ReadInterrupts>
 8002e76:	0102      	lsls	r2, r0, #4
 8002e78:	d514      	bpl.n	8002ea4 <HAL_PCD_IRQHandler+0x154>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002e7a:	6823      	ldr	r3, [r4, #0]
 8002e7c:	695a      	ldr	r2, [r3, #20]
 8002e7e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002e82:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002e84:	f894 23f4 	ldrb.w	r2, [r4, #1012]	; 0x3f4
 8002e88:	2a00      	cmp	r2, #0
 8002e8a:	f040 81fe 	bne.w	800328a <HAL_PCD_IRQHandler+0x53a>
      {
        hpcd->LPM_State = LPM_L1;
 8002e8e:	2101      	movs	r1, #1
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002e90:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L1;
 8002e92:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e98:	f3c3 0383 	ubfx	r3, r3, #2, #4
 8002e9c:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002ea0:	f003 fbc8 	bl	8006634 <HAL_PCDEx_LPM_Callback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002ea4:	6820      	ldr	r0, [r4, #0]
 8002ea6:	f002 fae9 	bl	800547c <USB_ReadInterrupts>
 8002eaa:	04c3      	lsls	r3, r0, #19
 8002eac:	d536      	bpl.n	8002f1c <HAL_PCD_IRQHandler+0x1cc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002eae:	f8d6 3804 	ldr.w	r3, [r6, #2052]	; 0x804
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002eb2:	2110      	movs	r1, #16
 8002eb4:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002eb6:	f506 6500 	add.w	r5, r6, #2048	; 0x800
 8002eba:	f023 0301 	bic.w	r3, r3, #1
 8002ebe:	606b      	str	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002ec0:	f001 ff52 	bl	8004d68 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ec4:	f506 6310 	add.w	r3, r6, #2304	; 0x900
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002ec8:	f64f 317f 	movw	r1, #64383	; 0xfb7f
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ecc:	6862      	ldr	r2, [r4, #4]
 8002ece:	9802      	ldr	r0, [sp, #8]
 8002ed0:	4282      	cmp	r2, r0
 8002ed2:	f200 81de 	bhi.w	8003292 <HAL_PCD_IRQHandler+0x542>
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002ed6:	69eb      	ldr	r3, [r5, #28]
 8002ed8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002edc:	61eb      	str	r3, [r5, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002ede:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f000 81f6 	beq.w	80032d2 <HAL_PCD_IRQHandler+0x582>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002ee6:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 8002eea:	f043 030b 	orr.w	r3, r3, #11
 8002eee:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002ef2:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8002ef4:	f043 030b 	orr.w	r3, r3, #11
 8002ef8:	646b      	str	r3, [r5, #68]	; 0x44
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002efa:	f8d6 3800 	ldr.w	r3, [r6, #2048]	; 0x800

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002efe:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8002f02:	7c21      	ldrb	r1, [r4, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002f04:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f08:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002f0a:	f8c6 3800 	str.w	r3, [r6, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f0e:	f002 faf9 	bl	8005504 <USB_EP0_OutStart>
                             (uint8_t *)hpcd->Setup);

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002f12:	6822      	ldr	r2, [r4, #0]
 8002f14:	6953      	ldr	r3, [r2, #20]
 8002f16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f1a:	6153      	str	r3, [r2, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002f1c:	6820      	ldr	r0, [r4, #0]
 8002f1e:	f002 faad 	bl	800547c <USB_ReadInterrupts>
 8002f22:	0487      	lsls	r7, r0, #18
 8002f24:	d516      	bpl.n	8002f54 <HAL_PCD_IRQHandler+0x204>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002f26:	6820      	ldr	r0, [r4, #0]
 8002f28:	f002 fadb 	bl	80054e2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002f2c:	6820      	ldr	r0, [r4, #0]
 8002f2e:	f001 fffd 	bl	8004f2c <USB_GetDevSpeed>

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f32:	6825      	ldr	r5, [r4, #0]
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002f34:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f36:	f000 feb5 	bl	8003ca4 <HAL_RCC_GetHCLKFreq>
 8002f3a:	7b22      	ldrb	r2, [r4, #12]
 8002f3c:	4601      	mov	r1, r0
 8002f3e:	4628      	mov	r0, r5
 8002f40:	f001 fe7e 	bl	8004c40 <USB_SetTurnaroundTime>
                                  (uint8_t)hpcd->Init.speed);

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002f44:	4620      	mov	r0, r4
 8002f46:	f003 fa7c 	bl	8006442 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002f4a:	6822      	ldr	r2, [r4, #0]
 8002f4c:	6953      	ldr	r3, [r2, #20]
 8002f4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f52:	6153      	str	r3, [r2, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002f54:	6820      	ldr	r0, [r4, #0]
 8002f56:	f002 fa91 	bl	800547c <USB_ReadInterrupts>
 8002f5a:	0706      	lsls	r6, r0, #28
 8002f5c:	d507      	bpl.n	8002f6e <HAL_PCD_IRQHandler+0x21e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002f5e:	4620      	mov	r0, r4
 8002f60:	f003 fa6b 	bl	800643a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002f64:	6822      	ldr	r2, [r4, #0]
 8002f66:	6953      	ldr	r3, [r2, #20]
 8002f68:	f003 0308 	and.w	r3, r3, #8
 8002f6c:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002f6e:	6820      	ldr	r0, [r4, #0]
 8002f70:	f002 fa84 	bl	800547c <USB_ReadInterrupts>
 8002f74:	02c5      	lsls	r5, r0, #11
 8002f76:	d508      	bpl.n	8002f8a <HAL_PCD_IRQHandler+0x23a>
      epnum = 0U;

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002f78:	2100      	movs	r1, #0
 8002f7a:	4620      	mov	r0, r4
 8002f7c:	f003 fa94 	bl	80064a8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002f80:	6822      	ldr	r2, [r4, #0]
 8002f82:	6953      	ldr	r3, [r2, #20]
 8002f84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f88:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002f8a:	6820      	ldr	r0, [r4, #0]
 8002f8c:	f002 fa76 	bl	800547c <USB_ReadInterrupts>
 8002f90:	0280      	lsls	r0, r0, #10
 8002f92:	d508      	bpl.n	8002fa6 <HAL_PCD_IRQHandler+0x256>
      epnum = 0U;

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002f94:	2100      	movs	r1, #0
 8002f96:	4620      	mov	r0, r4
 8002f98:	f003 fa82 	bl	80064a0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002f9c:	6822      	ldr	r2, [r4, #0]
 8002f9e:	6953      	ldr	r3, [r2, #20]
 8002fa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fa4:	6153      	str	r3, [r2, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002fa6:	6820      	ldr	r0, [r4, #0]
 8002fa8:	f002 fa68 	bl	800547c <USB_ReadInterrupts>
 8002fac:	0041      	lsls	r1, r0, #1
 8002fae:	d507      	bpl.n	8002fc0 <HAL_PCD_IRQHandler+0x270>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002fb0:	4620      	mov	r0, r4
 8002fb2:	f003 fa7d 	bl	80064b0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002fb6:	6822      	ldr	r2, [r4, #0]
 8002fb8:	6953      	ldr	r3, [r2, #20]
 8002fba:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002fbe:	6153      	str	r3, [r2, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002fc0:	6820      	ldr	r0, [r4, #0]
 8002fc2:	f002 fa5b 	bl	800547c <USB_ReadInterrupts>
 8002fc6:	0742      	lsls	r2, r0, #29
 8002fc8:	d50a      	bpl.n	8002fe0 <HAL_PCD_IRQHandler+0x290>
    {
      temp = hpcd->Instance->GOTGINT;
 8002fca:	6823      	ldr	r3, [r4, #0]
 8002fcc:	685d      	ldr	r5, [r3, #4]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002fce:	076b      	lsls	r3, r5, #29
 8002fd0:	d502      	bpl.n	8002fd8 <HAL_PCD_IRQHandler+0x288>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002fd2:	4620      	mov	r0, r4
 8002fd4:	f003 fa70 	bl	80064b8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002fd8:	6822      	ldr	r2, [r4, #0]
 8002fda:	6853      	ldr	r3, [r2, #4]
 8002fdc:	432b      	orrs	r3, r5
 8002fde:	6053      	str	r3, [r2, #4]
    }
  }
}
 8002fe0:	b007      	add	sp, #28
 8002fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002fe6:	2b06      	cmp	r3, #6
 8002fe8:	f47f aef9 	bne.w	8002dde <HAL_PCD_IRQHandler+0x8e>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002fec:	2208      	movs	r2, #8
 8002fee:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8002ff2:	4630      	mov	r0, r6
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ff4:	f3c7 170a 	ubfx	r7, r7, #4, #11
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002ff8:	f002 f9b2 	bl	8005360 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ffc:	231c      	movs	r3, #28
 8002ffe:	fb03 4505 	mla	r5, r3, r5, r4
 8003002:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 8003006:	441f      	add	r7, r3
 8003008:	f8c5 7214 	str.w	r7, [r5, #532]	; 0x214
 800300c:	e6e7      	b.n	8002dde <HAL_PCD_IRQHandler+0x8e>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800300e:	f506 6730 	add.w	r7, r6, #2816	; 0xb00
 8003012:	f504 7a01 	add.w	sl, r4, #516	; 0x204
      epnum = 0U;
 8003016:	2500      	movs	r5, #0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003018:	f8df b2d0 	ldr.w	fp, [pc, #720]	; 80032ec <HAL_PCD_IRQHandler+0x59c>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800301c:	6820      	ldr	r0, [r4, #0]
 800301e:	f002 fa31 	bl	8005484 <USB_ReadDevAllOutEpInterrupt>
 8003022:	9003      	str	r0, [sp, #12]
      while (ep_intr != 0U)
 8003024:	9b03      	ldr	r3, [sp, #12]
 8003026:	2b00      	cmp	r3, #0
 8003028:	f43f aee4 	beq.w	8002df4 <HAL_PCD_IRQHandler+0xa4>
        if ((ep_intr & 0x1U) != 0U)
 800302c:	9b03      	ldr	r3, [sp, #12]
 800302e:	07d8      	lsls	r0, r3, #31
 8003030:	d556      	bpl.n	80030e0 <HAL_PCD_IRQHandler+0x390>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003032:	fa5f f985 	uxtb.w	r9, r5
 8003036:	6820      	ldr	r0, [r4, #0]
 8003038:	4649      	mov	r1, r9
 800303a:	f002 fa33 	bl	80054a4 <USB_ReadDevOutEPInterrupt>
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800303e:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003042:	4680      	mov	r8, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003044:	d01a      	beq.n	800307c <HAL_PCD_IRQHandler+0x32c>
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003046:	6820      	ldr	r0, [r4, #0]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003048:	2201      	movs	r2, #1
  if (hpcd->Init.dma_enable == 1U)
 800304a:	6921      	ldr	r1, [r4, #16]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800304c:	f500 6c30 	add.w	ip, r0, #2816	; 0xb00
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003050:	60ba      	str	r2, [r7, #8]
  if (hpcd->Init.dma_enable == 1U)
 8003052:	2901      	cmp	r1, #1
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003054:	6c03      	ldr	r3, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003056:	eb0c 1c45 	add.w	ip, ip, r5, lsl #5
 800305a:	f8dc 2008 	ldr.w	r2, [ip, #8]
  if (hpcd->Init.dma_enable == 1U)
 800305e:	d166      	bne.n	800312e <HAL_PCD_IRQHandler+0x3de>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003060:	0711      	lsls	r1, r2, #28
 8003062:	d506      	bpl.n	8003072 <HAL_PCD_IRQHandler+0x322>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003064:	455b      	cmp	r3, fp
 8003066:	d909      	bls.n	800307c <HAL_PCD_IRQHandler+0x32c>
 8003068:	0410      	lsls	r0, r2, #16
 800306a:	d507      	bpl.n	800307c <HAL_PCD_IRQHandler+0x32c>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800306c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003070:	e002      	b.n	8003078 <HAL_PCD_IRQHandler+0x328>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003072:	0691      	lsls	r1, r2, #26
 8003074:	d53c      	bpl.n	80030f0 <HAL_PCD_IRQHandler+0x3a0>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003076:	2320      	movs	r3, #32
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003078:	f8cc 3008 	str.w	r3, [ip, #8]
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800307c:	f018 0f08 	tst.w	r8, #8
 8003080:	d01e      	beq.n	80030c0 <HAL_PCD_IRQHandler+0x370>
 8003082:	6823      	ldr	r3, [r4, #0]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003084:	2208      	movs	r2, #8
 8003086:	60ba      	str	r2, [r7, #8]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003088:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800308a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800308e:	455a      	cmp	r2, fp
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003090:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 8003094:	6899      	ldr	r1, [r3, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003096:	d904      	bls.n	80030a2 <HAL_PCD_IRQHandler+0x352>
 8003098:	0409      	lsls	r1, r1, #16
 800309a:	d502      	bpl.n	80030a2 <HAL_PCD_IRQHandler+0x352>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800309c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030a0:	6099      	str	r1, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80030a2:	4620      	mov	r0, r4
 80030a4:	9204      	str	r2, [sp, #16]
 80030a6:	f003 f9b1 	bl	800640c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80030aa:	9a04      	ldr	r2, [sp, #16]
 80030ac:	455a      	cmp	r2, fp
 80030ae:	d907      	bls.n	80030c0 <HAL_PCD_IRQHandler+0x370>
 80030b0:	6921      	ldr	r1, [r4, #16]
 80030b2:	2901      	cmp	r1, #1
 80030b4:	d104      	bne.n	80030c0 <HAL_PCD_IRQHandler+0x370>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80030b6:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80030ba:	6820      	ldr	r0, [r4, #0]
 80030bc:	f002 fa22 	bl	8005504 <USB_EP0_OutStart>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80030c0:	f018 0f10 	tst.w	r8, #16
 80030c4:	d001      	beq.n	80030ca <HAL_PCD_IRQHandler+0x37a>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80030c6:	2310      	movs	r3, #16
 80030c8:	60bb      	str	r3, [r7, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80030ca:	f018 0f20 	tst.w	r8, #32
 80030ce:	d001      	beq.n	80030d4 <HAL_PCD_IRQHandler+0x384>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80030d0:	2320      	movs	r3, #32
 80030d2:	60bb      	str	r3, [r7, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80030d4:	f418 5f00 	tst.w	r8, #8192	; 0x2000
 80030d8:	d002      	beq.n	80030e0 <HAL_PCD_IRQHandler+0x390>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80030da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030de:	60bb      	str	r3, [r7, #8]
        ep_intr >>= 1U;
 80030e0:	9b03      	ldr	r3, [sp, #12]
        epnum++;
 80030e2:	3501      	adds	r5, #1
        ep_intr >>= 1U;
 80030e4:	3720      	adds	r7, #32
 80030e6:	f10a 0a1c 	add.w	sl, sl, #28
 80030ea:	085b      	lsrs	r3, r3, #1
 80030ec:	9303      	str	r3, [sp, #12]
 80030ee:	e799      	b.n	8003024 <HAL_PCD_IRQHandler+0x2d4>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80030f0:	f012 0f28 	tst.w	r2, #40	; 0x28
 80030f4:	d1c2      	bne.n	800307c <HAL_PCD_IRQHandler+0x32c>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030f6:	455b      	cmp	r3, fp
 80030f8:	d901      	bls.n	80030fe <HAL_PCD_IRQHandler+0x3ae>
 80030fa:	0412      	lsls	r2, r2, #16
 80030fc:	d4b6      	bmi.n	800306c <HAL_PCD_IRQHandler+0x31c>
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80030fe:	f8dc 2010 	ldr.w	r2, [ip, #16]
          hpcd->OUT_ep[epnum].maxpacket -
 8003102:	f8da 1000 	ldr.w	r1, [sl]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003106:	f3c2 0212 	ubfx	r2, r2, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800310a:	1a8a      	subs	r2, r1, r2
        hpcd->OUT_ep[epnum].xfer_count =
 800310c:	f8ca 2010 	str.w	r2, [sl, #16]
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003110:	f8da 2004 	ldr.w	r2, [sl, #4]
 8003114:	4411      	add	r1, r2
 8003116:	f8ca 1004 	str.w	r1, [sl, #4]
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800311a:	b995      	cbnz	r5, 8003142 <HAL_PCD_IRQHandler+0x3f2>
 800311c:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 8003120:	b97a      	cbnz	r2, 8003142 <HAL_PCD_IRQHandler+0x3f2>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003122:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8003126:	2101      	movs	r1, #1
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003128:	f002 f9ec 	bl	8005504 <USB_EP0_OutStart>
 800312c:	e009      	b.n	8003142 <HAL_PCD_IRQHandler+0x3f2>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800312e:	496e      	ldr	r1, [pc, #440]	; (80032e8 <HAL_PCD_IRQHandler+0x598>)
 8003130:	428b      	cmp	r3, r1
 8003132:	d10b      	bne.n	800314c <HAL_PCD_IRQHandler+0x3fc>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003134:	0413      	lsls	r3, r2, #16
 8003136:	d499      	bmi.n	800306c <HAL_PCD_IRQHandler+0x31c>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003138:	0690      	lsls	r0, r2, #26
 800313a:	d502      	bpl.n	8003142 <HAL_PCD_IRQHandler+0x3f2>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800313c:	2220      	movs	r2, #32
 800313e:	f8cc 2008 	str.w	r2, [ip, #8]
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003142:	4649      	mov	r1, r9
 8003144:	4620      	mov	r0, r4
 8003146:	f003 f967 	bl	8006418 <HAL_PCD_DataOutStageCallback>
 800314a:	e797      	b.n	800307c <HAL_PCD_IRQHandler+0x32c>
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800314c:	2d00      	cmp	r5, #0
 800314e:	d1f8      	bne.n	8003142 <HAL_PCD_IRQHandler+0x3f2>
 8003150:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 8003154:	2a00      	cmp	r2, #0
 8003156:	d1f4      	bne.n	8003142 <HAL_PCD_IRQHandler+0x3f2>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003158:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800315c:	4629      	mov	r1, r5
 800315e:	e7e3      	b.n	8003128 <HAL_PCD_IRQHandler+0x3d8>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003160:	9b03      	ldr	r3, [sp, #12]
 8003162:	07da      	lsls	r2, r3, #31
 8003164:	f140 8084 	bpl.w	8003270 <HAL_PCD_IRQHandler+0x520>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003168:	fa5f fb88 	uxtb.w	fp, r8
 800316c:	6820      	ldr	r0, [r4, #0]
 800316e:	4659      	mov	r1, fp
 8003170:	f002 f9a1 	bl	80054b6 <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003174:	07c3      	lsls	r3, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003176:	4607      	mov	r7, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003178:	d521      	bpl.n	80031be <HAL_PCD_IRQHandler+0x46e>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800317a:	2001      	movs	r0, #1
 800317c:	f008 020f 	and.w	r2, r8, #15
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003180:	f8d6 3834 	ldr.w	r3, [r6, #2100]	; 0x834
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003184:	fa00 f202 	lsl.w	r2, r0, r2
            if (hpcd->Init.dma_enable == 1U)
 8003188:	6921      	ldr	r1, [r4, #16]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800318a:	ea23 0302 	bic.w	r3, r3, r2
            if (hpcd->Init.dma_enable == 1U)
 800318e:	4281      	cmp	r1, r0
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003190:	f8c6 3834 	str.w	r3, [r6, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003194:	f8c9 0008 	str.w	r0, [r9, #8]
            if (hpcd->Init.dma_enable == 1U)
 8003198:	d10d      	bne.n	80031b6 <HAL_PCD_IRQHandler+0x466>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800319a:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
 800319e:	4413      	add	r3, r2
 80031a0:	64ab      	str	r3, [r5, #72]	; 0x48
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80031a2:	f1b8 0f00 	cmp.w	r8, #0
 80031a6:	d106      	bne.n	80031b6 <HAL_PCD_IRQHandler+0x466>
 80031a8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80031aa:	b923      	cbnz	r3, 80031b6 <HAL_PCD_IRQHandler+0x466>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80031ac:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80031b0:	6820      	ldr	r0, [r4, #0]
 80031b2:	f002 f9a7 	bl	8005504 <USB_EP0_OutStart>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80031b6:	4659      	mov	r1, fp
 80031b8:	4620      	mov	r0, r4
 80031ba:	f003 f936 	bl	800642a <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80031be:	0738      	lsls	r0, r7, #28
 80031c0:	d502      	bpl.n	80031c8 <HAL_PCD_IRQHandler+0x478>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80031c2:	2308      	movs	r3, #8
 80031c4:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80031c8:	06f9      	lsls	r1, r7, #27
 80031ca:	d502      	bpl.n	80031d2 <HAL_PCD_IRQHandler+0x482>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80031cc:	2310      	movs	r3, #16
 80031ce:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80031d2:	067a      	lsls	r2, r7, #25
 80031d4:	d502      	bpl.n	80031dc <HAL_PCD_IRQHandler+0x48c>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80031d6:	2340      	movs	r3, #64	; 0x40
 80031d8:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80031dc:	07bb      	lsls	r3, r7, #30
 80031de:	d502      	bpl.n	80031e6 <HAL_PCD_IRQHandler+0x496>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80031e0:	2302      	movs	r3, #2
 80031e2:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80031e6:	063f      	lsls	r7, r7, #24
 80031e8:	d542      	bpl.n	8003270 <HAL_PCD_IRQHandler+0x520>
  if (ep->xfer_count > ep->xfer_len)
 80031ea:	e9d5 3214 	ldrd	r3, r2, [r5, #80]	; 0x50
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d83e      	bhi.n	8003270 <HAL_PCD_IRQHandler+0x520>
  len = ep->xfer_len - ep->xfer_count;
 80031f2:	1a9b      	subs	r3, r3, r2
  len32b = (len + 3U) / 4U;
 80031f4:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 80031f6:	f8d4 a000 	ldr.w	sl, [r4]
 80031fa:	4293      	cmp	r3, r2
 80031fc:	bf28      	it	cs
 80031fe:	4613      	movcs	r3, r2
 8003200:	3303      	adds	r3, #3
 8003202:	089b      	lsrs	r3, r3, #2
 8003204:	9304      	str	r3, [sp, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003206:	f50a 6310 	add.w	r3, sl, #2304	; 0x900
 800320a:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 800320e:	9305      	str	r3, [sp, #20]
 8003210:	9b05      	ldr	r3, [sp, #20]
 8003212:	9904      	ldr	r1, [sp, #16]
 8003214:	699a      	ldr	r2, [r3, #24]
 8003216:	b292      	uxth	r2, r2
 8003218:	428a      	cmp	r2, r1
 800321a:	e9d5 7314 	ldrd	r7, r3, [r5, #80]	; 0x50
 800321e:	d325      	bcc.n	800326c <HAL_PCD_IRQHandler+0x51c>
 8003220:	429f      	cmp	r7, r3
 8003222:	d900      	bls.n	8003226 <HAL_PCD_IRQHandler+0x4d6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003224:	b95f      	cbnz	r7, 800323e <HAL_PCD_IRQHandler+0x4ee>
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003226:	f008 020f 	and.w	r2, r8, #15
 800322a:	2101      	movs	r1, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800322c:	f8da 3834 	ldr.w	r3, [sl, #2100]	; 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003230:	fa01 f202 	lsl.w	r2, r1, r2
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003234:	ea23 0302 	bic.w	r3, r3, r2
 8003238:	f8ca 3834 	str.w	r3, [sl, #2100]	; 0x834
 800323c:	e018      	b.n	8003270 <HAL_PCD_IRQHandler+0x520>
    len = ep->xfer_len - ep->xfer_count;
 800323e:	1aff      	subs	r7, r7, r3
    if (len > ep->maxpacket)
 8003240:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003242:	465a      	mov	r2, fp
 8003244:	4650      	mov	r0, sl
 8003246:	429f      	cmp	r7, r3
 8003248:	bf28      	it	cs
 800324a:	461f      	movcs	r7, r3
    len32b = (len + 3U) / 4U;
 800324c:	1cfb      	adds	r3, r7, #3
 800324e:	089b      	lsrs	r3, r3, #2
 8003250:	9304      	str	r3, [sp, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003252:	7c23      	ldrb	r3, [r4, #16]
 8003254:	9300      	str	r3, [sp, #0]
 8003256:	b2bb      	uxth	r3, r7
 8003258:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 800325a:	f001 ff81 	bl	8005160 <USB_WritePacket>
    ep->xfer_buff  += len;
 800325e:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8003260:	443b      	add	r3, r7
 8003262:	64ab      	str	r3, [r5, #72]	; 0x48
    ep->xfer_count += len;
 8003264:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8003266:	441f      	add	r7, r3
 8003268:	656f      	str	r7, [r5, #84]	; 0x54
 800326a:	e7d1      	b.n	8003210 <HAL_PCD_IRQHandler+0x4c0>
  if (ep->xfer_len <= ep->xfer_count)
 800326c:	429f      	cmp	r7, r3
 800326e:	d9da      	bls.n	8003226 <HAL_PCD_IRQHandler+0x4d6>
        ep_intr >>= 1U;
 8003270:	9b03      	ldr	r3, [sp, #12]
        epnum++;
 8003272:	f108 0801 	add.w	r8, r8, #1
        ep_intr >>= 1U;
 8003276:	351c      	adds	r5, #28
 8003278:	f109 0920 	add.w	r9, r9, #32
 800327c:	085b      	lsrs	r3, r3, #1
 800327e:	9303      	str	r3, [sp, #12]
 8003280:	e5c6      	b.n	8002e10 <HAL_PCD_IRQHandler+0xc0>
        HAL_PCD_ResumeCallback(hpcd);
 8003282:	4620      	mov	r0, r4
 8003284:	f003 f908 	bl	8006498 <HAL_PCD_ResumeCallback>
 8003288:	e5dc      	b.n	8002e44 <HAL_PCD_IRQHandler+0xf4>
        HAL_PCD_SuspendCallback(hpcd);
 800328a:	4620      	mov	r0, r4
 800328c:	f003 f8ec 	bl	8006468 <HAL_PCD_SuspendCallback>
 8003290:	e608      	b.n	8002ea4 <HAL_PCD_IRQHandler+0x154>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003292:	6099      	str	r1, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003294:	3320      	adds	r3, #32
 8003296:	f853 2c20 	ldr.w	r2, [r3, #-32]
 800329a:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800329e:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80032a2:	f853 2c20 	ldr.w	r2, [r3, #-32]
 80032a6:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80032aa:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80032ae:	f8c3 11e8 	str.w	r1, [r3, #488]	; 0x1e8
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80032b2:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 80032b6:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80032ba:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80032be:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 80032c2:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80032c6:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032ca:	9a02      	ldr	r2, [sp, #8]
 80032cc:	3201      	adds	r2, #1
 80032ce:	9202      	str	r2, [sp, #8]
 80032d0:	e5fc      	b.n	8002ecc <HAL_PCD_IRQHandler+0x17c>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80032d2:	696b      	ldr	r3, [r5, #20]
 80032d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80032d8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80032dc:	616b      	str	r3, [r5, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80032de:	692b      	ldr	r3, [r5, #16]
 80032e0:	f043 030b 	orr.w	r3, r3, #11
 80032e4:	612b      	str	r3, [r5, #16]
 80032e6:	e608      	b.n	8002efa <HAL_PCD_IRQHandler+0x1aa>
 80032e8:	4f54310a 	.word	0x4f54310a
 80032ec:	4f54300a 	.word	0x4f54300a

080032f0 <HAL_PCD_SetAddress>:
{
 80032f0:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 80032f2:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
{
 80032f6:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80032f8:	2a01      	cmp	r2, #1
 80032fa:	d00b      	beq.n	8003314 <HAL_PCD_SetAddress+0x24>
 80032fc:	2201      	movs	r2, #1
  hpcd->USB_Address = address;
 80032fe:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
  __HAL_LOCK(hpcd);
 8003302:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003306:	6800      	ldr	r0, [r0, #0]
 8003308:	f002 f88c 	bl	8005424 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800330c:	2000      	movs	r0, #0
 800330e:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8003312:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8003314:	2002      	movs	r0, #2
 8003316:	e7fc      	b.n	8003312 <HAL_PCD_SetAddress+0x22>

08003318 <HAL_PCD_EP_Open>:
{
 8003318:	b570      	push	{r4, r5, r6, lr}
 800331a:	f001 060f 	and.w	r6, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 800331e:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 8003322:	4605      	mov	r5, r0
 8003324:	f04f 001c 	mov.w	r0, #28
 8003328:	ebc6 04c6 	rsb	r4, r6, r6, lsl #3
 800332c:	ea4f 0484 	mov.w	r4, r4, lsl #2
  if ((ep_addr & 0x80U) == 0x80U)
 8003330:	d01f      	beq.n	8003372 <HAL_PCD_EP_Open+0x5a>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003332:	f104 013c 	add.w	r1, r4, #60	; 0x3c
    ep->is_in = 1U;
 8003336:	fb00 5006 	mla	r0, r0, r6, r5
 800333a:	2401      	movs	r4, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800333c:	4429      	add	r1, r5
    ep->is_in = 1U;
 800333e:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
  ep->maxpacket = ep_mps;
 8003342:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 8003344:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003346:	700e      	strb	r6, [r1, #0]
  ep->type = ep_type;
 8003348:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 800334a:	b102      	cbz	r2, 800334e <HAL_PCD_EP_Open+0x36>
    ep->tx_fifo_num = ep->num;
 800334c:	80ce      	strh	r6, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 800334e:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 8003350:	bf04      	itt	eq
 8003352:	2300      	moveq	r3, #0
 8003354:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8003356:	f895 33bc 	ldrb.w	r3, [r5, #956]	; 0x3bc
 800335a:	2b01      	cmp	r3, #1
 800335c:	d012      	beq.n	8003384 <HAL_PCD_EP_Open+0x6c>
 800335e:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003360:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd);
 8003362:	f885 33bc 	strb.w	r3, [r5, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003366:	f001 fdec 	bl	8004f42 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800336a:	2000      	movs	r0, #0
 800336c:	f885 03bc 	strb.w	r0, [r5, #956]	; 0x3bc
}
 8003370:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003372:	f504 71fe 	add.w	r1, r4, #508	; 0x1fc
    ep->is_in = 0U;
 8003376:	fb00 5006 	mla	r0, r0, r6, r5
 800337a:	2400      	movs	r4, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800337c:	4429      	add	r1, r5
    ep->is_in = 0U;
 800337e:	f880 41fd 	strb.w	r4, [r0, #509]	; 0x1fd
 8003382:	e7de      	b.n	8003342 <HAL_PCD_EP_Open+0x2a>
  __HAL_LOCK(hpcd);
 8003384:	2002      	movs	r0, #2
 8003386:	e7f3      	b.n	8003370 <HAL_PCD_EP_Open+0x58>

08003388 <HAL_PCD_EP_Close>:
{
 8003388:	b510      	push	{r4, lr}
 800338a:	4604      	mov	r4, r0
 800338c:	f001 000f 	and.w	r0, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 8003390:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003394:	f04f 021c 	mov.w	r2, #28
 8003398:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 800339c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80033a0:	d016      	beq.n	80033d0 <HAL_PCD_EP_Close+0x48>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033a2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
    ep->is_in = 1U;
 80033a6:	fb02 4200 	mla	r2, r2, r0, r4
 80033aa:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033ac:	4421      	add	r1, r4
    ep->is_in = 1U;
 80033ae:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  ep->num   = ep_addr & EP_ADDR_MSK;
 80033b2:	7008      	strb	r0, [r1, #0]
  __HAL_LOCK(hpcd);
 80033b4:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d012      	beq.n	80033e2 <HAL_PCD_EP_Close+0x5a>
 80033bc:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80033be:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80033c0:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80033c4:	f001 fdfc 	bl	8004fc0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80033c8:	2000      	movs	r0, #0
 80033ca:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 80033ce:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033d0:	f503 71fe 	add.w	r1, r3, #508	; 0x1fc
    ep->is_in = 0U;
 80033d4:	fb02 4200 	mla	r2, r2, r0, r4
 80033d8:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033da:	4421      	add	r1, r4
    ep->is_in = 0U;
 80033dc:	f882 31fd 	strb.w	r3, [r2, #509]	; 0x1fd
 80033e0:	e7e7      	b.n	80033b2 <HAL_PCD_EP_Close+0x2a>
  __HAL_LOCK(hpcd);
 80033e2:	2002      	movs	r0, #2
 80033e4:	e7f3      	b.n	80033ce <HAL_PCD_EP_Close+0x46>

080033e6 <HAL_PCD_EP_Receive>:
{
 80033e6:	b538      	push	{r3, r4, r5, lr}
 80033e8:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033ec:	241c      	movs	r4, #28
 80033ee:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 80033f2:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033f6:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_len = len;
 80033fa:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->xfer_count = 0U;
 80033fe:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 8003400:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_count = 0U;
 8003404:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
  ep->is_in = 0U;
 8003408:	f884 31fd 	strb.w	r3, [r4, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 800340c:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
  if (hpcd->Init.dma_enable == 1U)
 8003410:	6903      	ldr	r3, [r0, #16]
 8003412:	6800      	ldr	r0, [r0, #0]
 8003414:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 8003416:	bf08      	it	eq
 8003418:	f8c4 220c 	streq.w	r2, [r4, #524]	; 0x20c
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800341c:	b2da      	uxtb	r2, r3
 800341e:	b91d      	cbnz	r5, 8003428 <HAL_PCD_EP_Receive+0x42>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003420:	f001 fe24 	bl	800506c <USB_EP0StartXfer>
}
 8003424:	2000      	movs	r0, #0
 8003426:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003428:	f001 feae 	bl	8005188 <USB_EPStartXfer>
 800342c:	e7fa      	b.n	8003424 <HAL_PCD_EP_Receive+0x3e>

0800342e <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800342e:	f001 010f 	and.w	r1, r1, #15
 8003432:	231c      	movs	r3, #28
 8003434:	fb03 0001 	mla	r0, r3, r1, r0
}
 8003438:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
 800343c:	4770      	bx	lr

0800343e <HAL_PCD_EP_Transmit>:
{
 800343e:	b538      	push	{r3, r4, r5, lr}
 8003440:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003444:	241c      	movs	r4, #28
 8003446:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 800344a:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800344e:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_len = len;
 8003450:	6523      	str	r3, [r4, #80]	; 0x50
  ep->xfer_count = 0U;
 8003452:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 8003454:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->xfer_count = 0U;
 8003456:	6563      	str	r3, [r4, #84]	; 0x54
  ep->is_in = 1U;
 8003458:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800345a:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  ep->is_in = 1U;
 800345e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (hpcd->Init.dma_enable == 1U)
 8003462:	6903      	ldr	r3, [r0, #16]
 8003464:	6800      	ldr	r0, [r0, #0]
 8003466:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 8003468:	bf08      	it	eq
 800346a:	64e2      	streq	r2, [r4, #76]	; 0x4c
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800346c:	b2da      	uxtb	r2, r3
 800346e:	b91d      	cbnz	r5, 8003478 <HAL_PCD_EP_Transmit+0x3a>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003470:	f001 fdfc 	bl	800506c <USB_EP0StartXfer>
}
 8003474:	2000      	movs	r0, #0
 8003476:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003478:	f001 fe86 	bl	8005188 <USB_EPStartXfer>
 800347c:	e7fa      	b.n	8003474 <HAL_PCD_EP_Transmit+0x36>

0800347e <HAL_PCD_EP_SetStall>:
{
 800347e:	b538      	push	{r3, r4, r5, lr}
 8003480:	f001 050f 	and.w	r5, r1, #15
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003484:	6843      	ldr	r3, [r0, #4]
{
 8003486:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003488:	429d      	cmp	r5, r3
 800348a:	d82c      	bhi.n	80034e6 <HAL_PCD_EP_SetStall+0x68>
  if ((0x80U & ep_addr) == 0x80U)
 800348c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003490:	f04f 001c 	mov.w	r0, #28
 8003494:	d01e      	beq.n	80034d4 <HAL_PCD_EP_SetStall+0x56>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003496:	fb00 4105 	mla	r1, r0, r5, r4
    ep->is_in = 1U;
 800349a:	2301      	movs	r3, #1
 800349c:	fb00 4205 	mla	r2, r0, r5, r4
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034a0:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 80034a2:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  ep->is_stall = 1U;
 80034a6:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 80034a8:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 80034aa:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 80034ac:	f894 23bc 	ldrb.w	r2, [r4, #956]	; 0x3bc
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d01a      	beq.n	80034ea <HAL_PCD_EP_SetStall+0x6c>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80034b4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80034b6:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80034ba:	f001 ff5f 	bl	800537c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80034be:	b92d      	cbnz	r5, 80034cc <HAL_PCD_EP_SetStall+0x4e>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80034c0:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80034c4:	7c21      	ldrb	r1, [r4, #16]
 80034c6:	6820      	ldr	r0, [r4, #0]
 80034c8:	f002 f81c 	bl	8005504 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 80034cc:	2000      	movs	r0, #0
 80034ce:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 80034d2:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 80034d4:	fb00 4301 	mla	r3, r0, r1, r4
    ep->is_in = 0U;
 80034d8:	461a      	mov	r2, r3
    ep = &hpcd->OUT_ep[ep_addr];
 80034da:	f503 71fe 	add.w	r1, r3, #508	; 0x1fc
    ep->is_in = 0U;
 80034de:	2300      	movs	r3, #0
 80034e0:	f882 31fd 	strb.w	r3, [r2, #509]	; 0x1fd
 80034e4:	e7df      	b.n	80034a6 <HAL_PCD_EP_SetStall+0x28>
    return HAL_ERROR;
 80034e6:	2001      	movs	r0, #1
 80034e8:	e7f3      	b.n	80034d2 <HAL_PCD_EP_SetStall+0x54>
  __HAL_LOCK(hpcd);
 80034ea:	2002      	movs	r0, #2
 80034ec:	e7f1      	b.n	80034d2 <HAL_PCD_EP_SetStall+0x54>

080034ee <HAL_PCD_EP_ClrStall>:
{
 80034ee:	b538      	push	{r3, r4, r5, lr}
 80034f0:	f001 020f 	and.w	r2, r1, #15
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80034f4:	6843      	ldr	r3, [r0, #4]
{
 80034f6:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d82a      	bhi.n	8003552 <HAL_PCD_EP_ClrStall+0x64>
  if ((0x80U & ep_addr) == 0x80U)
 80034fc:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 8003500:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003504:	f04f 001c 	mov.w	r0, #28
 8003508:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800350c:	d018      	beq.n	8003540 <HAL_PCD_EP_ClrStall+0x52>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800350e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
    ep->is_in = 1U;
 8003512:	fb00 4002 	mla	r0, r0, r2, r4
 8003516:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003518:	4421      	add	r1, r4
    ep->is_in = 1U;
 800351a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  ep->is_stall = 0U;
 800351e:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8003520:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 8003522:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8003524:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8003528:	2b01      	cmp	r3, #1
 800352a:	d014      	beq.n	8003556 <HAL_PCD_EP_ClrStall+0x68>
 800352c:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800352e:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8003530:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003534:	f001 ff4d 	bl	80053d2 <USB_EPClearStall>
  return HAL_OK;
 8003538:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 800353a:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
}
 800353e:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003540:	f503 71fe 	add.w	r1, r3, #508	; 0x1fc
    ep->is_in = 0U;
 8003544:	fb00 4002 	mla	r0, r0, r2, r4
 8003548:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800354a:	4421      	add	r1, r4
    ep->is_in = 0U;
 800354c:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
 8003550:	e7e5      	b.n	800351e <HAL_PCD_EP_ClrStall+0x30>
    return HAL_ERROR;
 8003552:	2001      	movs	r0, #1
 8003554:	e7f3      	b.n	800353e <HAL_PCD_EP_ClrStall+0x50>
  __HAL_LOCK(hpcd);
 8003556:	2002      	movs	r0, #2
 8003558:	e7f1      	b.n	800353e <HAL_PCD_EP_ClrStall+0x50>

0800355a <HAL_PCDEx_SetTxFiFo>:
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800355a:	6800      	ldr	r0, [r0, #0]
 800355c:	0412      	lsls	r2, r2, #16
{
 800355e:	b570      	push	{r4, r5, r6, lr}
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003560:	6a44      	ldr	r4, [r0, #36]	; 0x24

  if (fifo == 0U)
 8003562:	b919      	cbnz	r1, 800356c <HAL_PCDEx_SetTxFiFo+0x12>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003564:	4322      	orrs	r2, r4
 8003566:	6282      	str	r2, [r0, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 8003568:	2000      	movs	r0, #0
 800356a:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800356c:	6a83      	ldr	r3, [r0, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 800356e:	1e4d      	subs	r5, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003570:	eb04 4413 	add.w	r4, r4, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8003574:	2300      	movs	r3, #0
 8003576:	1c5e      	adds	r6, r3, #1
 8003578:	b2db      	uxtb	r3, r3
 800357a:	429d      	cmp	r5, r3
 800357c:	d805      	bhi.n	800358a <HAL_PCDEx_SetTxFiFo+0x30>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800357e:	313f      	adds	r1, #63	; 0x3f
 8003580:	4322      	orrs	r2, r4
 8003582:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8003586:	6042      	str	r2, [r0, #4]
 8003588:	e7ee      	b.n	8003568 <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800358a:	3340      	adds	r3, #64	; 0x40
 800358c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8003596:	4633      	mov	r3, r6
 8003598:	e7ed      	b.n	8003576 <HAL_PCDEx_SetTxFiFo+0x1c>

0800359a <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 800359a:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 800359c:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 800359e:	6259      	str	r1, [r3, #36]	; 0x24
}
 80035a0:	4770      	bx	lr

080035a2 <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035a2:	6802      	ldr	r2, [r0, #0]

  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 80035a4:	2100      	movs	r1, #0
  hpcd->lpm_active = 1U;
 80035a6:	2301      	movs	r3, #1
  hpcd->LPM_State = LPM_L0;
 80035a8:	f880 13f4 	strb.w	r1, [r0, #1012]	; 0x3f4
  hpcd->lpm_active = 1U;
 80035ac:	f8c0 33fc 	str.w	r3, [r0, #1020]	; 0x3fc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);

  return HAL_OK;
}
 80035b0:	4608      	mov	r0, r1
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80035b2:	6993      	ldr	r3, [r2, #24]
 80035b4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80035b8:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80035ba:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80035bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035c0:	f043 0303 	orr.w	r3, r3, #3
 80035c4:	6553      	str	r3, [r2, #84]	; 0x54
}
 80035c6:	4770      	bx	lr

080035c8 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035c8:	4a02      	ldr	r2, [pc, #8]	; (80035d4 <HAL_PWR_EnableBkUpAccess+0xc>)
 80035ca:	6813      	ldr	r3, [r2, #0]
 80035cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035d0:	6013      	str	r3, [r2, #0]
}
 80035d2:	4770      	bx	lr
 80035d4:	40007000 	.word	0x40007000

080035d8 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 80035d8:	4b19      	ldr	r3, [pc, #100]	; (8003640 <HAL_PWREx_EnableOverDrive+0x68>)
{
 80035da:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 80035dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80035de:	4c19      	ldr	r4, [pc, #100]	; (8003644 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80035e0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80035e4:	641a      	str	r2, [r3, #64]	; 0x40
 80035e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ec:	9301      	str	r3, [sp, #4]
 80035ee:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 80035f0:	6823      	ldr	r3, [r4, #0]
 80035f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035f6:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035f8:	f7fe fd2e 	bl	8002058 <HAL_GetTick>
 80035fc:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80035fe:	6863      	ldr	r3, [r4, #4]
 8003600:	03da      	lsls	r2, r3, #15
 8003602:	d50c      	bpl.n	800361e <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003604:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003606:	4d0f      	ldr	r5, [pc, #60]	; (8003644 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800360c:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800360e:	f7fe fd23 	bl	8002058 <HAL_GetTick>
 8003612:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003614:	686b      	ldr	r3, [r5, #4]
 8003616:	039b      	lsls	r3, r3, #14
 8003618:	d50a      	bpl.n	8003630 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800361a:	2000      	movs	r0, #0
 800361c:	e006      	b.n	800362c <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800361e:	f7fe fd1b 	bl	8002058 <HAL_GetTick>
 8003622:	1b40      	subs	r0, r0, r5
 8003624:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003628:	d9e9      	bls.n	80035fe <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 800362a:	2003      	movs	r0, #3
}
 800362c:	b003      	add	sp, #12
 800362e:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003630:	f7fe fd12 	bl	8002058 <HAL_GetTick>
 8003634:	1b00      	subs	r0, r0, r4
 8003636:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800363a:	d9eb      	bls.n	8003614 <HAL_PWREx_EnableOverDrive+0x3c>
 800363c:	e7f5      	b.n	800362a <HAL_PWREx_EnableOverDrive+0x52>
 800363e:	bf00      	nop
 8003640:	40023800 	.word	0x40023800
 8003644:	40007000 	.word	0x40007000

08003648 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8003648:	b570      	push	{r4, r5, r6, lr}

  /* Get Start Tick */
  tickstart = HAL_GetTick();

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800364a:	4c47      	ldr	r4, [pc, #284]	; (8003768 <HAL_RCC_DeInit+0x120>)
  tickstart = HAL_GetTick();
 800364c:	f7fe fd04 	bl	8002058 <HAL_GetTick>
 8003650:	4605      	mov	r5, r0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003652:	6823      	ldr	r3, [r4, #0]
 8003654:	f043 0301 	orr.w	r3, r3, #1
 8003658:	6023      	str	r3, [r4, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800365a:	6823      	ldr	r3, [r4, #0]
 800365c:	079e      	lsls	r6, r3, #30
 800365e:	d55d      	bpl.n	800371c <HAL_RCC_DeInit+0xd4>
      return HAL_TIMEOUT;
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8003660:	6823      	ldr	r3, [r4, #0]
  CLEAR_REG(RCC->CFGR);

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003662:	f241 3688 	movw	r6, #5000	; 0x1388
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8003666:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800366a:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800366c:	f7fe fcf4 	bl	8002058 <HAL_GetTick>
  CLEAR_REG(RCC->CFGR);
 8003670:	2300      	movs	r3, #0
  tickstart = HAL_GetTick();
 8003672:	4605      	mov	r5, r0
  CLEAR_REG(RCC->CFGR);
 8003674:	60a3      	str	r3, [r4, #8]
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8003676:	4c3c      	ldr	r4, [pc, #240]	; (8003768 <HAL_RCC_DeInit+0x120>)
 8003678:	68a3      	ldr	r3, [r4, #8]
 800367a:	f013 0f0c 	tst.w	r3, #12
 800367e:	d154      	bne.n	800372a <HAL_RCC_DeInit+0xe2>
      return HAL_TIMEOUT;
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003680:	f7fe fcea 	bl	8002058 <HAL_GetTick>

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8003684:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8003686:	4605      	mov	r5, r0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8003688:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 800368c:	6023      	str	r3, [r4, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800368e:	4c36      	ldr	r4, [pc, #216]	; (8003768 <HAL_RCC_DeInit+0x120>)
 8003690:	6823      	ldr	r3, [r4, #0]
 8003692:	0398      	lsls	r0, r3, #14
 8003694:	d44f      	bmi.n	8003736 <HAL_RCC_DeInit+0xee>
      return HAL_TIMEOUT;
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003696:	f7fe fcdf 	bl	8002058 <HAL_GetTick>

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800369a:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800369c:	4605      	mov	r5, r0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800369e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036a2:	6023      	str	r3, [r4, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80036a4:	4c30      	ldr	r4, [pc, #192]	; (8003768 <HAL_RCC_DeInit+0x120>)
 80036a6:	6823      	ldr	r3, [r4, #0]
 80036a8:	0199      	lsls	r1, r3, #6
 80036aa:	d44a      	bmi.n	8003742 <HAL_RCC_DeInit+0xfa>
      return HAL_TIMEOUT;
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80036ac:	f7fe fcd4 	bl	8002058 <HAL_GetTick>

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 80036b0:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80036b2:	4605      	mov	r5, r0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 80036b4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80036b8:	6023      	str	r3, [r4, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80036ba:	4c2b      	ldr	r4, [pc, #172]	; (8003768 <HAL_RCC_DeInit+0x120>)
 80036bc:	6823      	ldr	r3, [r4, #0]
 80036be:	011a      	lsls	r2, r3, #4
 80036c0:	d445      	bmi.n	800374e <HAL_RCC_DeInit+0x106>
      return HAL_TIMEOUT;
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80036c2:	f7fe fcc9 	bl	8002058 <HAL_GetTick>

  /* Reset PLLSAI bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 80036c6:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80036c8:	4605      	mov	r5, r0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 80036ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036ce:	6023      	str	r3, [r4, #0]

  /* Wait till PLLSAI is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 80036d0:	4c25      	ldr	r4, [pc, #148]	; (8003768 <HAL_RCC_DeInit+0x120>)
 80036d2:	6823      	ldr	r3, [r4, #0]
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	d440      	bmi.n	800375a <HAL_RCC_DeInit+0x112>
      return HAL_TIMEOUT;
    }
  }

  /* Once PLL, PLLI2S and PLLSAI are OFF, reset PLLCFGR register to default value */
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | 0x20000000U;
 80036d8:	4b24      	ldr	r3, [pc, #144]	; (800376c <HAL_RCC_DeInit+0x124>)

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 80036da:	4a25      	ldr	r2, [pc, #148]	; (8003770 <HAL_RCC_DeInit+0x128>)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | 0x20000000U;
 80036dc:	6063      	str	r3, [r4, #4]
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 80036de:	3b10      	subs	r3, #16
 80036e0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | 0x20000000U;
 80036e4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE | RCC_CIR_PLLI2SRDYIE | RCC_CIR_PLLSAIRDYIE);
 80036e8:	68e3      	ldr	r3, [r4, #12]
 80036ea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80036ee:	60e3      	str	r3, [r4, #12]
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_PLLI2SRDYC | RCC_CIR_PLLSAIRDYC | RCC_CIR_CSSC);
 80036f0:	68e3      	ldr	r3, [r4, #12]
 80036f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036f6:	60e3      	str	r3, [r4, #12]
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80036f8:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80036fa:	f023 0301 	bic.w	r3, r3, #1
 80036fe:	6763      	str	r3, [r4, #116]	; 0x74
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8003700:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8003702:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003706:	6763      	str	r3, [r4, #116]	; 0x74
  SystemCoreClock = HSI_VALUE;
 8003708:	4b1a      	ldr	r3, [pc, #104]	; (8003774 <HAL_RCC_DeInit+0x12c>)
 800370a:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800370c:	4b1a      	ldr	r3, [pc, #104]	; (8003778 <HAL_RCC_DeInit+0x130>)
 800370e:	6818      	ldr	r0, [r3, #0]
 8003710:	f7fe fc66 	bl	8001fe0 <HAL_InitTick>
      return HAL_TIMEOUT;
 8003714:	3800      	subs	r0, #0
 8003716:	bf18      	it	ne
 8003718:	2001      	movne	r0, #1
 800371a:	e005      	b.n	8003728 <HAL_RCC_DeInit+0xe0>
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800371c:	f7fe fc9c 	bl	8002058 <HAL_GetTick>
 8003720:	1b40      	subs	r0, r0, r5
 8003722:	2802      	cmp	r0, #2
 8003724:	d999      	bls.n	800365a <HAL_RCC_DeInit+0x12>
      return HAL_TIMEOUT;
 8003726:	2003      	movs	r0, #3
  }
  else
  {
    return HAL_OK;
  }
}
 8003728:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800372a:	f7fe fc95 	bl	8002058 <HAL_GetTick>
 800372e:	1b40      	subs	r0, r0, r5
 8003730:	42b0      	cmp	r0, r6
 8003732:	d9a1      	bls.n	8003678 <HAL_RCC_DeInit+0x30>
 8003734:	e7f7      	b.n	8003726 <HAL_RCC_DeInit+0xde>
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003736:	f7fe fc8f 	bl	8002058 <HAL_GetTick>
 800373a:	1b40      	subs	r0, r0, r5
 800373c:	2864      	cmp	r0, #100	; 0x64
 800373e:	d9a7      	bls.n	8003690 <HAL_RCC_DeInit+0x48>
 8003740:	e7f1      	b.n	8003726 <HAL_RCC_DeInit+0xde>
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003742:	f7fe fc89 	bl	8002058 <HAL_GetTick>
 8003746:	1b40      	subs	r0, r0, r5
 8003748:	2802      	cmp	r0, #2
 800374a:	d9ac      	bls.n	80036a6 <HAL_RCC_DeInit+0x5e>
 800374c:	e7eb      	b.n	8003726 <HAL_RCC_DeInit+0xde>
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800374e:	f7fe fc83 	bl	8002058 <HAL_GetTick>
 8003752:	1b40      	subs	r0, r0, r5
 8003754:	2864      	cmp	r0, #100	; 0x64
 8003756:	d9b1      	bls.n	80036bc <HAL_RCC_DeInit+0x74>
 8003758:	e7e5      	b.n	8003726 <HAL_RCC_DeInit+0xde>
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800375a:	f7fe fc7d 	bl	8002058 <HAL_GetTick>
 800375e:	1b40      	subs	r0, r0, r5
 8003760:	2864      	cmp	r0, #100	; 0x64
 8003762:	d9b6      	bls.n	80036d2 <HAL_RCC_DeInit+0x8a>
 8003764:	e7df      	b.n	8003726 <HAL_RCC_DeInit+0xde>
 8003766:	bf00      	nop
 8003768:	40023800 	.word	0x40023800
 800376c:	24003010 	.word	0x24003010
 8003770:	00f42400 	.word	0x00f42400
 8003774:	20000000 	.word	0x20000000
 8003778:	20000008 	.word	0x20000008

0800377c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800377c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003780:	4604      	mov	r4, r0
 8003782:	b340      	cbz	r0, 80037d6 <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003784:	6803      	ldr	r3, [r0, #0]
 8003786:	07d8      	lsls	r0, r3, #31
 8003788:	d410      	bmi.n	80037ac <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800378a:	6823      	ldr	r3, [r4, #0]
 800378c:	0799      	lsls	r1, r3, #30
 800378e:	d464      	bmi.n	800385a <HAL_RCC_OscConfig+0xde>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003790:	6823      	ldr	r3, [r4, #0]
 8003792:	0719      	lsls	r1, r3, #28
 8003794:	f100 80aa 	bmi.w	80038ec <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003798:	6823      	ldr	r3, [r4, #0]
 800379a:	075a      	lsls	r2, r3, #29
 800379c:	f100 80cb 	bmi.w	8003936 <HAL_RCC_OscConfig+0x1ba>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037a0:	69a2      	ldr	r2, [r4, #24]
 80037a2:	2a00      	cmp	r2, #0
 80037a4:	f040 8134 	bne.w	8003a10 <HAL_RCC_OscConfig+0x294>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80037a8:	2000      	movs	r0, #0
 80037aa:	e02b      	b.n	8003804 <HAL_RCC_OscConfig+0x88>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037ac:	4b96      	ldr	r3, [pc, #600]	; (8003a08 <HAL_RCC_OscConfig+0x28c>)
 80037ae:	689a      	ldr	r2, [r3, #8]
 80037b0:	f002 020c 	and.w	r2, r2, #12
 80037b4:	2a04      	cmp	r2, #4
 80037b6:	d007      	beq.n	80037c8 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037b8:	689a      	ldr	r2, [r3, #8]
 80037ba:	f002 020c 	and.w	r2, r2, #12
 80037be:	2a08      	cmp	r2, #8
 80037c0:	d10b      	bne.n	80037da <HAL_RCC_OscConfig+0x5e>
 80037c2:	685a      	ldr	r2, [r3, #4]
 80037c4:	0252      	lsls	r2, r2, #9
 80037c6:	d508      	bpl.n	80037da <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037c8:	4b8f      	ldr	r3, [pc, #572]	; (8003a08 <HAL_RCC_OscConfig+0x28c>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	039b      	lsls	r3, r3, #14
 80037ce:	d5dc      	bpl.n	800378a <HAL_RCC_OscConfig+0xe>
 80037d0:	6863      	ldr	r3, [r4, #4]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1d9      	bne.n	800378a <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
 80037d6:	2001      	movs	r0, #1
 80037d8:	e014      	b.n	8003804 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037da:	6862      	ldr	r2, [r4, #4]
 80037dc:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80037e0:	d113      	bne.n	800380a <HAL_RCC_OscConfig+0x8e>
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80037e8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80037ea:	f7fe fc35 	bl	8002058 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ee:	4e86      	ldr	r6, [pc, #536]	; (8003a08 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 80037f0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037f2:	6833      	ldr	r3, [r6, #0]
 80037f4:	039f      	lsls	r7, r3, #14
 80037f6:	d4c8      	bmi.n	800378a <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037f8:	f7fe fc2e 	bl	8002058 <HAL_GetTick>
 80037fc:	1b40      	subs	r0, r0, r5
 80037fe:	2864      	cmp	r0, #100	; 0x64
 8003800:	d9f7      	bls.n	80037f2 <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 8003802:	2003      	movs	r0, #3
}
 8003804:	b002      	add	sp, #8
 8003806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800380a:	4d7f      	ldr	r5, [pc, #508]	; (8003a08 <HAL_RCC_OscConfig+0x28c>)
 800380c:	682b      	ldr	r3, [r5, #0]
 800380e:	b992      	cbnz	r2, 8003836 <HAL_RCC_OscConfig+0xba>
 8003810:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003814:	602b      	str	r3, [r5, #0]
 8003816:	682b      	ldr	r3, [r5, #0]
 8003818:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800381c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800381e:	f7fe fc1b 	bl	8002058 <HAL_GetTick>
 8003822:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003824:	682b      	ldr	r3, [r5, #0]
 8003826:	0398      	lsls	r0, r3, #14
 8003828:	d5af      	bpl.n	800378a <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800382a:	f7fe fc15 	bl	8002058 <HAL_GetTick>
 800382e:	1b80      	subs	r0, r0, r6
 8003830:	2864      	cmp	r0, #100	; 0x64
 8003832:	d9f7      	bls.n	8003824 <HAL_RCC_OscConfig+0xa8>
 8003834:	e7e5      	b.n	8003802 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003836:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 800383a:	d107      	bne.n	800384c <HAL_RCC_OscConfig+0xd0>
 800383c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003840:	602b      	str	r3, [r5, #0]
 8003842:	682b      	ldr	r3, [r5, #0]
 8003844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003848:	602b      	str	r3, [r5, #0]
 800384a:	e7ce      	b.n	80037ea <HAL_RCC_OscConfig+0x6e>
 800384c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003850:	602b      	str	r3, [r5, #0]
 8003852:	682b      	ldr	r3, [r5, #0]
 8003854:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003858:	e7f6      	b.n	8003848 <HAL_RCC_OscConfig+0xcc>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800385a:	4b6b      	ldr	r3, [pc, #428]	; (8003a08 <HAL_RCC_OscConfig+0x28c>)
 800385c:	689a      	ldr	r2, [r3, #8]
 800385e:	f012 0f0c 	tst.w	r2, #12
 8003862:	d007      	beq.n	8003874 <HAL_RCC_OscConfig+0xf8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003864:	689a      	ldr	r2, [r3, #8]
 8003866:	f002 020c 	and.w	r2, r2, #12
 800386a:	2a08      	cmp	r2, #8
 800386c:	d111      	bne.n	8003892 <HAL_RCC_OscConfig+0x116>
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	0251      	lsls	r1, r2, #9
 8003872:	d40e      	bmi.n	8003892 <HAL_RCC_OscConfig+0x116>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003874:	4b64      	ldr	r3, [pc, #400]	; (8003a08 <HAL_RCC_OscConfig+0x28c>)
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	0792      	lsls	r2, r2, #30
 800387a:	d502      	bpl.n	8003882 <HAL_RCC_OscConfig+0x106>
 800387c:	68e2      	ldr	r2, [r4, #12]
 800387e:	2a01      	cmp	r2, #1
 8003880:	d1a9      	bne.n	80037d6 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	6921      	ldr	r1, [r4, #16]
 8003886:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800388a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800388e:	601a      	str	r2, [r3, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003890:	e77e      	b.n	8003790 <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003892:	68e2      	ldr	r2, [r4, #12]
 8003894:	b1c2      	cbz	r2, 80038c8 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_ENABLE();
 8003896:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003898:	4d5b      	ldr	r5, [pc, #364]	; (8003a08 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
 800389a:	f042 0201 	orr.w	r2, r2, #1
 800389e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80038a0:	f7fe fbda 	bl	8002058 <HAL_GetTick>
 80038a4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a6:	682b      	ldr	r3, [r5, #0]
 80038a8:	079f      	lsls	r7, r3, #30
 80038aa:	d507      	bpl.n	80038bc <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038ac:	682b      	ldr	r3, [r5, #0]
 80038ae:	6922      	ldr	r2, [r4, #16]
 80038b0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80038b4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80038b8:	602b      	str	r3, [r5, #0]
 80038ba:	e769      	b.n	8003790 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038bc:	f7fe fbcc 	bl	8002058 <HAL_GetTick>
 80038c0:	1b80      	subs	r0, r0, r6
 80038c2:	2802      	cmp	r0, #2
 80038c4:	d9ef      	bls.n	80038a6 <HAL_RCC_OscConfig+0x12a>
 80038c6:	e79c      	b.n	8003802 <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 80038c8:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ca:	4e4f      	ldr	r6, [pc, #316]	; (8003a08 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_DISABLE();
 80038cc:	f022 0201 	bic.w	r2, r2, #1
 80038d0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80038d2:	f7fe fbc1 	bl	8002058 <HAL_GetTick>
 80038d6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038d8:	6833      	ldr	r3, [r6, #0]
 80038da:	0798      	lsls	r0, r3, #30
 80038dc:	f57f af58 	bpl.w	8003790 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038e0:	f7fe fbba 	bl	8002058 <HAL_GetTick>
 80038e4:	1b40      	subs	r0, r0, r5
 80038e6:	2802      	cmp	r0, #2
 80038e8:	d9f6      	bls.n	80038d8 <HAL_RCC_OscConfig+0x15c>
 80038ea:	e78a      	b.n	8003802 <HAL_RCC_OscConfig+0x86>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80038ec:	6963      	ldr	r3, [r4, #20]
 80038ee:	4d46      	ldr	r5, [pc, #280]	; (8003a08 <HAL_RCC_OscConfig+0x28c>)
 80038f0:	b183      	cbz	r3, 8003914 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_LSI_ENABLE();
 80038f2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80038f4:	f043 0301 	orr.w	r3, r3, #1
 80038f8:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80038fa:	f7fe fbad 	bl	8002058 <HAL_GetTick>
 80038fe:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003900:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003902:	079b      	lsls	r3, r3, #30
 8003904:	f53f af48 	bmi.w	8003798 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003908:	f7fe fba6 	bl	8002058 <HAL_GetTick>
 800390c:	1b80      	subs	r0, r0, r6
 800390e:	2802      	cmp	r0, #2
 8003910:	d9f6      	bls.n	8003900 <HAL_RCC_OscConfig+0x184>
 8003912:	e776      	b.n	8003802 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 8003914:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003916:	f023 0301 	bic.w	r3, r3, #1
 800391a:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800391c:	f7fe fb9c 	bl	8002058 <HAL_GetTick>
 8003920:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003922:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003924:	079f      	lsls	r7, r3, #30
 8003926:	f57f af37 	bpl.w	8003798 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800392a:	f7fe fb95 	bl	8002058 <HAL_GetTick>
 800392e:	1b80      	subs	r0, r0, r6
 8003930:	2802      	cmp	r0, #2
 8003932:	d9f6      	bls.n	8003922 <HAL_RCC_OscConfig+0x1a6>
 8003934:	e765      	b.n	8003802 <HAL_RCC_OscConfig+0x86>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003936:	4b34      	ldr	r3, [pc, #208]	; (8003a08 <HAL_RCC_OscConfig+0x28c>)
 8003938:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800393a:	00d0      	lsls	r0, r2, #3
 800393c:	d427      	bmi.n	800398e <HAL_RCC_OscConfig+0x212>
      __HAL_RCC_PWR_CLK_ENABLE();
 800393e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8003940:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003942:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003946:	641a      	str	r2, [r3, #64]	; 0x40
 8003948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800394e:	9301      	str	r3, [sp, #4]
 8003950:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003952:	4d2e      	ldr	r5, [pc, #184]	; (8003a0c <HAL_RCC_OscConfig+0x290>)
 8003954:	682b      	ldr	r3, [r5, #0]
 8003956:	05d9      	lsls	r1, r3, #23
 8003958:	d51b      	bpl.n	8003992 <HAL_RCC_OscConfig+0x216>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800395a:	68a3      	ldr	r3, [r4, #8]
 800395c:	4d2a      	ldr	r5, [pc, #168]	; (8003a08 <HAL_RCC_OscConfig+0x28c>)
 800395e:	2b01      	cmp	r3, #1
 8003960:	d127      	bne.n	80039b2 <HAL_RCC_OscConfig+0x236>
 8003962:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003964:	f043 0301 	orr.w	r3, r3, #1
 8003968:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800396a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800396e:	f7fe fb73 	bl	8002058 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003972:	4e25      	ldr	r6, [pc, #148]	; (8003a08 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8003974:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003976:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8003978:	079b      	lsls	r3, r3, #30
 800397a:	d53f      	bpl.n	80039fc <HAL_RCC_OscConfig+0x280>
    if (pwrclkchanged == SET)
 800397c:	2f00      	cmp	r7, #0
 800397e:	f43f af0f 	beq.w	80037a0 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003982:	4a21      	ldr	r2, [pc, #132]	; (8003a08 <HAL_RCC_OscConfig+0x28c>)
 8003984:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003986:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800398a:	6413      	str	r3, [r2, #64]	; 0x40
 800398c:	e708      	b.n	80037a0 <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
 800398e:	2700      	movs	r7, #0
 8003990:	e7df      	b.n	8003952 <HAL_RCC_OscConfig+0x1d6>
      PWR->CR1 |= PWR_CR1_DBP;
 8003992:	682b      	ldr	r3, [r5, #0]
 8003994:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003998:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800399a:	f7fe fb5d 	bl	8002058 <HAL_GetTick>
 800399e:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039a0:	682b      	ldr	r3, [r5, #0]
 80039a2:	05da      	lsls	r2, r3, #23
 80039a4:	d4d9      	bmi.n	800395a <HAL_RCC_OscConfig+0x1de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039a6:	f7fe fb57 	bl	8002058 <HAL_GetTick>
 80039aa:	1b80      	subs	r0, r0, r6
 80039ac:	2864      	cmp	r0, #100	; 0x64
 80039ae:	d9f7      	bls.n	80039a0 <HAL_RCC_OscConfig+0x224>
 80039b0:	e727      	b.n	8003802 <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039b2:	b9ab      	cbnz	r3, 80039e0 <HAL_RCC_OscConfig+0x264>
 80039b4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039b6:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039ba:	f023 0301 	bic.w	r3, r3, #1
 80039be:	672b      	str	r3, [r5, #112]	; 0x70
 80039c0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80039c2:	f023 0304 	bic.w	r3, r3, #4
 80039c6:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80039c8:	f7fe fb46 	bl	8002058 <HAL_GetTick>
 80039cc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039ce:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80039d0:	0798      	lsls	r0, r3, #30
 80039d2:	d5d3      	bpl.n	800397c <HAL_RCC_OscConfig+0x200>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039d4:	f7fe fb40 	bl	8002058 <HAL_GetTick>
 80039d8:	1b80      	subs	r0, r0, r6
 80039da:	4540      	cmp	r0, r8
 80039dc:	d9f7      	bls.n	80039ce <HAL_RCC_OscConfig+0x252>
 80039de:	e710      	b.n	8003802 <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039e0:	2b05      	cmp	r3, #5
 80039e2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80039e4:	d103      	bne.n	80039ee <HAL_RCC_OscConfig+0x272>
 80039e6:	f043 0304 	orr.w	r3, r3, #4
 80039ea:	672b      	str	r3, [r5, #112]	; 0x70
 80039ec:	e7b9      	b.n	8003962 <HAL_RCC_OscConfig+0x1e6>
 80039ee:	f023 0301 	bic.w	r3, r3, #1
 80039f2:	672b      	str	r3, [r5, #112]	; 0x70
 80039f4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80039f6:	f023 0304 	bic.w	r3, r3, #4
 80039fa:	e7b5      	b.n	8003968 <HAL_RCC_OscConfig+0x1ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039fc:	f7fe fb2c 	bl	8002058 <HAL_GetTick>
 8003a00:	1b40      	subs	r0, r0, r5
 8003a02:	4540      	cmp	r0, r8
 8003a04:	d9b7      	bls.n	8003976 <HAL_RCC_OscConfig+0x1fa>
 8003a06:	e6fc      	b.n	8003802 <HAL_RCC_OscConfig+0x86>
 8003a08:	40023800 	.word	0x40023800
 8003a0c:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a10:	4d3c      	ldr	r5, [pc, #240]	; (8003b04 <HAL_RCC_OscConfig+0x388>)
 8003a12:	68ab      	ldr	r3, [r5, #8]
 8003a14:	f003 030c 	and.w	r3, r3, #12
 8003a18:	2b08      	cmp	r3, #8
 8003a1a:	d042      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x326>
        __HAL_RCC_PLL_DISABLE();
 8003a1c:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a1e:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8003a20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a24:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a26:	d12f      	bne.n	8003a88 <HAL_RCC_OscConfig+0x30c>
        tickstart = HAL_GetTick();
 8003a28:	f7fe fb16 	bl	8002058 <HAL_GetTick>
 8003a2c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a2e:	682b      	ldr	r3, [r5, #0]
 8003a30:	0199      	lsls	r1, r3, #6
 8003a32:	d423      	bmi.n	8003a7c <HAL_RCC_OscConfig+0x300>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a34:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003a3c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003a40:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003a42:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003a46:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003a48:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8003a4c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003a4e:	0852      	lsrs	r2, r2, #1
 8003a50:	3a01      	subs	r2, #1
 8003a52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003a56:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003a58:	682b      	ldr	r3, [r5, #0]
 8003a5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a5e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003a60:	f7fe fafa 	bl	8002058 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a64:	4d27      	ldr	r5, [pc, #156]	; (8003b04 <HAL_RCC_OscConfig+0x388>)
        tickstart = HAL_GetTick();
 8003a66:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a68:	682b      	ldr	r3, [r5, #0]
 8003a6a:	019a      	lsls	r2, r3, #6
 8003a6c:	f53f ae9c 	bmi.w	80037a8 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a70:	f7fe faf2 	bl	8002058 <HAL_GetTick>
 8003a74:	1b00      	subs	r0, r0, r4
 8003a76:	2802      	cmp	r0, #2
 8003a78:	d9f6      	bls.n	8003a68 <HAL_RCC_OscConfig+0x2ec>
 8003a7a:	e6c2      	b.n	8003802 <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a7c:	f7fe faec 	bl	8002058 <HAL_GetTick>
 8003a80:	1b80      	subs	r0, r0, r6
 8003a82:	2802      	cmp	r0, #2
 8003a84:	d9d3      	bls.n	8003a2e <HAL_RCC_OscConfig+0x2b2>
 8003a86:	e6bc      	b.n	8003802 <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8003a88:	f7fe fae6 	bl	8002058 <HAL_GetTick>
 8003a8c:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a8e:	682b      	ldr	r3, [r5, #0]
 8003a90:	019b      	lsls	r3, r3, #6
 8003a92:	f57f ae89 	bpl.w	80037a8 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a96:	f7fe fadf 	bl	8002058 <HAL_GetTick>
 8003a9a:	1b00      	subs	r0, r0, r4
 8003a9c:	2802      	cmp	r0, #2
 8003a9e:	d9f6      	bls.n	8003a8e <HAL_RCC_OscConfig+0x312>
 8003aa0:	e6af      	b.n	8003802 <HAL_RCC_OscConfig+0x86>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003aa2:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 8003aa4:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003aa6:	f43f ae96 	beq.w	80037d6 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aaa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003aae:	69e1      	ldr	r1, [r4, #28]
 8003ab0:	428a      	cmp	r2, r1
 8003ab2:	f47f ae90 	bne.w	80037d6 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ab6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aba:	6a21      	ldr	r1, [r4, #32]
 8003abc:	428a      	cmp	r2, r1
 8003abe:	f47f ae8a 	bne.w	80037d6 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ac2:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ac6:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ac8:	401a      	ands	r2, r3
 8003aca:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8003ace:	f47f ae82 	bne.w	80037d6 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003ad2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003ad4:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8003ad8:	0852      	lsrs	r2, r2, #1
 8003ada:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003adc:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8003ae0:	f47f ae79 	bne.w	80037d6 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ae4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ae8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003aea:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 8003aee:	f47f ae72 	bne.w	80037d6 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003af2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8003af6:	6b22      	ldr	r2, [r4, #48]	; 0x30
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003af8:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 8003afc:	f43f ae54 	beq.w	80037a8 <HAL_RCC_OscConfig+0x2c>
 8003b00:	e669      	b.n	80037d6 <HAL_RCC_OscConfig+0x5a>
 8003b02:	bf00      	nop
 8003b04:	40023800 	.word	0x40023800

08003b08 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b08:	4913      	ldr	r1, [pc, #76]	; (8003b58 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8003b0a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b0c:	688b      	ldr	r3, [r1, #8]
 8003b0e:	f003 030c 	and.w	r3, r3, #12
 8003b12:	2b04      	cmp	r3, #4
 8003b14:	d01b      	beq.n	8003b4e <HAL_RCC_GetSysClockFreq+0x46>
 8003b16:	2b08      	cmp	r3, #8
 8003b18:	d11b      	bne.n	8003b52 <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b1a:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003b1c:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b1e:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b20:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003b24:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b28:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003b2c:	bf1a      	itte	ne
 8003b2e:	480b      	ldrne	r0, [pc, #44]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x54>)
 8003b30:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b32:	480b      	ldreq	r0, [pc, #44]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x58>)
 8003b34:	fba1 0100 	umull	r0, r1, r1, r0
 8003b38:	f7fc fda6 	bl	8000688 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003b3c:	4b06      	ldr	r3, [pc, #24]	; (8003b58 <HAL_RCC_GetSysClockFreq+0x50>)
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003b44:	3301      	adds	r3, #1
 8003b46:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8003b48:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003b4c:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b4e:	4803      	ldr	r0, [pc, #12]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x54>)
 8003b50:	e7fc      	b.n	8003b4c <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 8003b52:	4803      	ldr	r0, [pc, #12]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8003b54:	e7fa      	b.n	8003b4c <HAL_RCC_GetSysClockFreq+0x44>
 8003b56:	bf00      	nop
 8003b58:	40023800 	.word	0x40023800
 8003b5c:	007a1200 	.word	0x007a1200
 8003b60:	00f42400 	.word	0x00f42400

08003b64 <HAL_RCC_ClockConfig>:
{
 8003b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b68:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8003b6a:	4604      	mov	r4, r0
 8003b6c:	b910      	cbnz	r0, 8003b74 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8003b6e:	2001      	movs	r0, #1
}
 8003b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b74:	4a46      	ldr	r2, [pc, #280]	; (8003c90 <HAL_RCC_ClockConfig+0x12c>)
 8003b76:	6813      	ldr	r3, [r2, #0]
 8003b78:	f003 030f 	and.w	r3, r3, #15
 8003b7c:	428b      	cmp	r3, r1
 8003b7e:	d328      	bcc.n	8003bd2 <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b80:	6822      	ldr	r2, [r4, #0]
 8003b82:	0797      	lsls	r7, r2, #30
 8003b84:	d430      	bmi.n	8003be8 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b86:	07d0      	lsls	r0, r2, #31
 8003b88:	d444      	bmi.n	8003c14 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b8a:	4a41      	ldr	r2, [pc, #260]	; (8003c90 <HAL_RCC_ClockConfig+0x12c>)
 8003b8c:	6813      	ldr	r3, [r2, #0]
 8003b8e:	f003 030f 	and.w	r3, r3, #15
 8003b92:	42ab      	cmp	r3, r5
 8003b94:	d867      	bhi.n	8003c66 <HAL_RCC_ClockConfig+0x102>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b96:	6822      	ldr	r2, [r4, #0]
 8003b98:	0751      	lsls	r1, r2, #29
 8003b9a:	d470      	bmi.n	8003c7e <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b9c:	0713      	lsls	r3, r2, #28
 8003b9e:	d507      	bpl.n	8003bb0 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ba0:	4a3c      	ldr	r2, [pc, #240]	; (8003c94 <HAL_RCC_ClockConfig+0x130>)
 8003ba2:	6921      	ldr	r1, [r4, #16]
 8003ba4:	6893      	ldr	r3, [r2, #8]
 8003ba6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003baa:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003bae:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003bb0:	f7ff ffaa 	bl	8003b08 <HAL_RCC_GetSysClockFreq>
 8003bb4:	4b37      	ldr	r3, [pc, #220]	; (8003c94 <HAL_RCC_ClockConfig+0x130>)
 8003bb6:	4a38      	ldr	r2, [pc, #224]	; (8003c98 <HAL_RCC_ClockConfig+0x134>)
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003bbe:	5cd3      	ldrb	r3, [r2, r3]
 8003bc0:	40d8      	lsrs	r0, r3
 8003bc2:	4b36      	ldr	r3, [pc, #216]	; (8003c9c <HAL_RCC_ClockConfig+0x138>)
 8003bc4:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8003bc6:	4b36      	ldr	r3, [pc, #216]	; (8003ca0 <HAL_RCC_ClockConfig+0x13c>)
 8003bc8:	6818      	ldr	r0, [r3, #0]
 8003bca:	f7fe fa09 	bl	8001fe0 <HAL_InitTick>
  return HAL_OK;
 8003bce:	2000      	movs	r0, #0
 8003bd0:	e7ce      	b.n	8003b70 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bd2:	6813      	ldr	r3, [r2, #0]
 8003bd4:	f023 030f 	bic.w	r3, r3, #15
 8003bd8:	430b      	orrs	r3, r1
 8003bda:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bdc:	6813      	ldr	r3, [r2, #0]
 8003bde:	f003 030f 	and.w	r3, r3, #15
 8003be2:	428b      	cmp	r3, r1
 8003be4:	d1c3      	bne.n	8003b6e <HAL_RCC_ClockConfig+0xa>
 8003be6:	e7cb      	b.n	8003b80 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003be8:	f012 0f04 	tst.w	r2, #4
 8003bec:	4b29      	ldr	r3, [pc, #164]	; (8003c94 <HAL_RCC_ClockConfig+0x130>)
 8003bee:	d003      	beq.n	8003bf8 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bf0:	6899      	ldr	r1, [r3, #8]
 8003bf2:	f441 51e0 	orr.w	r1, r1, #7168	; 0x1c00
 8003bf6:	6099      	str	r1, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bf8:	0716      	lsls	r6, r2, #28
 8003bfa:	d503      	bpl.n	8003c04 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bfc:	6899      	ldr	r1, [r3, #8]
 8003bfe:	f441 4160 	orr.w	r1, r1, #57344	; 0xe000
 8003c02:	6099      	str	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c04:	4923      	ldr	r1, [pc, #140]	; (8003c94 <HAL_RCC_ClockConfig+0x130>)
 8003c06:	68a0      	ldr	r0, [r4, #8]
 8003c08:	688b      	ldr	r3, [r1, #8]
 8003c0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c0e:	4303      	orrs	r3, r0
 8003c10:	608b      	str	r3, [r1, #8]
 8003c12:	e7b8      	b.n	8003b86 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c14:	6861      	ldr	r1, [r4, #4]
 8003c16:	4b1f      	ldr	r3, [pc, #124]	; (8003c94 <HAL_RCC_ClockConfig+0x130>)
 8003c18:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c1a:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c1c:	d11b      	bne.n	8003c56 <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c1e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c22:	d0a4      	beq.n	8003b6e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c24:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c26:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c2a:	4f1a      	ldr	r7, [pc, #104]	; (8003c94 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c2c:	f022 0203 	bic.w	r2, r2, #3
 8003c30:	430a      	orrs	r2, r1
 8003c32:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8003c34:	f7fe fa10 	bl	8002058 <HAL_GetTick>
 8003c38:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	6862      	ldr	r2, [r4, #4]
 8003c3e:	f003 030c 	and.w	r3, r3, #12
 8003c42:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003c46:	d0a0      	beq.n	8003b8a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c48:	f7fe fa06 	bl	8002058 <HAL_GetTick>
 8003c4c:	1b80      	subs	r0, r0, r6
 8003c4e:	4540      	cmp	r0, r8
 8003c50:	d9f3      	bls.n	8003c3a <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 8003c52:	2003      	movs	r0, #3
 8003c54:	e78c      	b.n	8003b70 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c56:	2902      	cmp	r1, #2
 8003c58:	d102      	bne.n	8003c60 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c5a:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8003c5e:	e7e0      	b.n	8003c22 <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c60:	f012 0f02 	tst.w	r2, #2
 8003c64:	e7dd      	b.n	8003c22 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c66:	6813      	ldr	r3, [r2, #0]
 8003c68:	f023 030f 	bic.w	r3, r3, #15
 8003c6c:	432b      	orrs	r3, r5
 8003c6e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c70:	6813      	ldr	r3, [r2, #0]
 8003c72:	f003 030f 	and.w	r3, r3, #15
 8003c76:	42ab      	cmp	r3, r5
 8003c78:	f47f af79 	bne.w	8003b6e <HAL_RCC_ClockConfig+0xa>
 8003c7c:	e78b      	b.n	8003b96 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c7e:	4905      	ldr	r1, [pc, #20]	; (8003c94 <HAL_RCC_ClockConfig+0x130>)
 8003c80:	68e0      	ldr	r0, [r4, #12]
 8003c82:	688b      	ldr	r3, [r1, #8]
 8003c84:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8003c88:	4303      	orrs	r3, r0
 8003c8a:	608b      	str	r3, [r1, #8]
 8003c8c:	e786      	b.n	8003b9c <HAL_RCC_ClockConfig+0x38>
 8003c8e:	bf00      	nop
 8003c90:	40023c00 	.word	0x40023c00
 8003c94:	40023800 	.word	0x40023800
 8003c98:	08009b80 	.word	0x08009b80
 8003c9c:	20000000 	.word	0x20000000
 8003ca0:	20000008 	.word	0x20000008

08003ca4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8003ca4:	4b01      	ldr	r3, [pc, #4]	; (8003cac <HAL_RCC_GetHCLKFreq+0x8>)
 8003ca6:	6818      	ldr	r0, [r3, #0]
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	20000000 	.word	0x20000000

08003cb0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003cb0:	4b04      	ldr	r3, [pc, #16]	; (8003cc4 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003cb2:	4a05      	ldr	r2, [pc, #20]	; (8003cc8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003cba:	5cd3      	ldrb	r3, [r2, r3]
 8003cbc:	4a03      	ldr	r2, [pc, #12]	; (8003ccc <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003cbe:	6810      	ldr	r0, [r2, #0]
}
 8003cc0:	40d8      	lsrs	r0, r3
 8003cc2:	4770      	bx	lr
 8003cc4:	40023800 	.word	0x40023800
 8003cc8:	08009b90 	.word	0x08009b90
 8003ccc:	20000000 	.word	0x20000000

08003cd0 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003cd0:	4b04      	ldr	r3, [pc, #16]	; (8003ce4 <HAL_RCC_GetPCLK2Freq+0x14>)
 8003cd2:	4a05      	ldr	r2, [pc, #20]	; (8003ce8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8003cda:	5cd3      	ldrb	r3, [r2, r3]
 8003cdc:	4a03      	ldr	r2, [pc, #12]	; (8003cec <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003cde:	6810      	ldr	r0, [r2, #0]
}
 8003ce0:	40d8      	lsrs	r0, r3
 8003ce2:	4770      	bx	lr
 8003ce4:	40023800 	.word	0x40023800
 8003ce8:	08009b90 	.word	0x08009b90
 8003cec:	20000000 	.word	0x20000000

08003cf0 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003cf0:	6803      	ldr	r3, [r0, #0]
{
 8003cf2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003cf6:	f013 0601 	ands.w	r6, r3, #1
{
 8003cfa:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003cfc:	d00b      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003cfe:	4aba      	ldr	r2, [pc, #744]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003d00:	6891      	ldr	r1, [r2, #8]
 8003d02:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8003d06:	6091      	str	r1, [r2, #8]
 8003d08:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8003d0a:	6891      	ldr	r1, [r2, #8]
 8003d0c:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003d0e:	fab6 f686 	clz	r6, r6
 8003d12:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d14:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003d16:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 8003d1a:	d012      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d1c:	49b2      	ldr	r1, [pc, #712]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003d1e:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8003d20:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003d24:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d28:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    {
      plli2sused = 1;
 8003d2c:	bf08      	it	eq
 8003d2e:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d30:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003d34:	bf16      	itet	ne
 8003d36:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8003d3a:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003d3c:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d3e:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003d42:	02d8      	lsls	r0, r3, #11
 8003d44:	d510      	bpl.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d46:	48a8      	ldr	r0, [pc, #672]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003d48:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003d4a:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003d4e:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d52:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8003d56:	ea42 0201 	orr.w	r2, r2, r1
 8003d5a:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003d5e:	f000 81a8 	beq.w	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8003d62:	2900      	cmp	r1, #0
 8003d64:	bf08      	it	eq
 8003d66:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8003d68:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003d6c:	bf18      	it	ne
 8003d6e:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d70:	0699      	lsls	r1, r3, #26
 8003d72:	d531      	bpl.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d74:	4b9c      	ldr	r3, [pc, #624]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003d76:	4f9d      	ldr	r7, [pc, #628]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d7a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003d7e:	641a      	str	r2, [r3, #64]	; 0x40
 8003d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d86:	9301      	str	r3, [sp, #4]
 8003d88:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d90:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d92:	f7fe f961 	bl	8002058 <HAL_GetTick>
 8003d96:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	05da      	lsls	r2, r3, #23
 8003d9c:	f140 818b 	bpl.w	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003da0:	4f91      	ldr	r7, [pc, #580]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003da2:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003da4:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003da8:	f040 8190 	bne.w	80040cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003dae:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003db2:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8003db6:	4a8c      	ldr	r2, [pc, #560]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003db8:	f040 81ae 	bne.w	8004118 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8003dbc:	6891      	ldr	r1, [r2, #8]
 8003dbe:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8003dc2:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8003dc6:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8003dca:	4301      	orrs	r1, r0
 8003dcc:	6091      	str	r1, [r2, #8]
 8003dce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dd2:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8003dd4:	430b      	orrs	r3, r1
 8003dd6:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003dd8:	6823      	ldr	r3, [r4, #0]
 8003dda:	06d9      	lsls	r1, r3, #27
 8003ddc:	d50c      	bpl.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003dde:	4a82      	ldr	r2, [pc, #520]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003de0:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8003de4:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8003de8:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8003dec:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8003df0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003df2:	4301      	orrs	r1, r0
 8003df4:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003df8:	045a      	lsls	r2, r3, #17
 8003dfa:	d508      	bpl.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003dfc:	497a      	ldr	r1, [pc, #488]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003dfe:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8003e00:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003e04:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8003e08:	4302      	orrs	r2, r0
 8003e0a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e0e:	041f      	lsls	r7, r3, #16
 8003e10:	d508      	bpl.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e12:	4975      	ldr	r1, [pc, #468]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003e14:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8003e16:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003e1a:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8003e1e:	4302      	orrs	r2, r0
 8003e20:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e24:	03d8      	lsls	r0, r3, #15
 8003e26:	d508      	bpl.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e28:	496f      	ldr	r1, [pc, #444]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003e2a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8003e2c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003e30:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8003e34:	4302      	orrs	r2, r0
 8003e36:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e3a:	0399      	lsls	r1, r3, #14
 8003e3c:	d508      	bpl.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003e3e:	496a      	ldr	r1, [pc, #424]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003e40:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8003e42:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003e46:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8003e4a:	4302      	orrs	r2, r0
 8003e4c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e50:	065a      	lsls	r2, r3, #25
 8003e52:	d508      	bpl.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e54:	4964      	ldr	r1, [pc, #400]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003e56:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8003e58:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003e5c:	f022 0203 	bic.w	r2, r2, #3
 8003e60:	4302      	orrs	r2, r0
 8003e62:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e66:	061f      	lsls	r7, r3, #24
 8003e68:	d508      	bpl.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e6a:	495f      	ldr	r1, [pc, #380]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003e6c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8003e6e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003e72:	f022 020c 	bic.w	r2, r2, #12
 8003e76:	4302      	orrs	r2, r0
 8003e78:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e7c:	05d8      	lsls	r0, r3, #23
 8003e7e:	d508      	bpl.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e80:	4959      	ldr	r1, [pc, #356]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003e82:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8003e84:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003e88:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8003e8c:	4302      	orrs	r2, r0
 8003e8e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e92:	0599      	lsls	r1, r3, #22
 8003e94:	d508      	bpl.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e96:	4954      	ldr	r1, [pc, #336]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003e98:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8003e9a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003e9e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003ea2:	4302      	orrs	r2, r0
 8003ea4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ea8:	055a      	lsls	r2, r3, #21
 8003eaa:	d508      	bpl.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003eac:	494e      	ldr	r1, [pc, #312]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003eae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003eb0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003eb4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003eb8:	4302      	orrs	r2, r0
 8003eba:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003ebe:	051f      	lsls	r7, r3, #20
 8003ec0:	d508      	bpl.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003ec2:	4949      	ldr	r1, [pc, #292]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003ec4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ec6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003eca:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003ece:	4302      	orrs	r2, r0
 8003ed0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003ed4:	04d8      	lsls	r0, r3, #19
 8003ed6:	d508      	bpl.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003ed8:	4943      	ldr	r1, [pc, #268]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003eda:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8003edc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003ee0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003ee4:	4302      	orrs	r2, r0
 8003ee6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003eea:	0499      	lsls	r1, r3, #18
 8003eec:	d508      	bpl.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003eee:	493e      	ldr	r1, [pc, #248]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003ef0:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8003ef2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003ef6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003efa:	4302      	orrs	r2, r0
 8003efc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003f00:	025a      	lsls	r2, r3, #9
 8003f02:	d508      	bpl.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003f04:	4938      	ldr	r1, [pc, #224]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003f06:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8003f08:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003f0c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8003f10:	4302      	orrs	r2, r0
 8003f12:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003f16:	029f      	lsls	r7, r3, #10
 8003f18:	d50c      	bpl.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003f1a:	4833      	ldr	r0, [pc, #204]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003f1c:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8003f1e:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8003f22:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003f26:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8003f2a:	bf08      	it	eq
 8003f2c:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8003f34:	f013 0f08 	tst.w	r3, #8
 8003f38:	bf18      	it	ne
 8003f3a:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f3c:	0358      	lsls	r0, r3, #13
 8003f3e:	d508      	bpl.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f40:	4929      	ldr	r1, [pc, #164]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003f42:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8003f44:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003f48:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003f4c:	4302      	orrs	r2, r0
 8003f4e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003f52:	0219      	lsls	r1, r3, #8
 8003f54:	d509      	bpl.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f56:	4924      	ldr	r1, [pc, #144]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003f58:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8003f5c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003f60:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003f64:	4302      	orrs	r2, r0
 8003f66:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003f6a:	015a      	lsls	r2, r3, #5
 8003f6c:	d509      	bpl.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003f6e:	491e      	ldr	r1, [pc, #120]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003f70:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8003f74:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003f78:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8003f7c:	4302      	orrs	r2, r0
 8003f7e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f82:	011f      	lsls	r7, r3, #4
 8003f84:	d509      	bpl.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f86:	4918      	ldr	r1, [pc, #96]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003f88:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8003f8c:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8003f90:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8003f94:	4302      	orrs	r2, r0
 8003f96:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003f9a:	00d8      	lsls	r0, r3, #3
 8003f9c:	d509      	bpl.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003f9e:	4912      	ldr	r1, [pc, #72]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003fa0:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8003fa4:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8003fa8:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8003fac:	4302      	orrs	r2, r0
 8003fae:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003fb2:	2e01      	cmp	r6, #1
 8003fb4:	f000 80b4 	beq.w	8004120 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8003fb8:	0199      	lsls	r1, r3, #6
 8003fba:	f100 80b1 	bmi.w	8004120 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003fbe:	2d01      	cmp	r5, #1
 8003fc0:	d175      	bne.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x3be>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003fc2:	4d09      	ldr	r5, [pc, #36]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003fc4:	682b      	ldr	r3, [r5, #0]
 8003fc6:	462e      	mov	r6, r5
 8003fc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fcc:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fce:	f7fe f843 	bl	8002058 <HAL_GetTick>
 8003fd2:	4607      	mov	r7, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003fd4:	682b      	ldr	r3, [r5, #0]
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	f100 8126 	bmi.w	8004228 <HAL_RCCEx_PeriphCLKConfig+0x538>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003fdc:	6822      	ldr	r2, [r4, #0]
 8003fde:	0315      	lsls	r5, r2, #12
 8003fe0:	d506      	bpl.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8003fe2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003fe4:	b143      	cbz	r3, 8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8003fe6:	e003      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8003fe8:	40023800 	.word	0x40023800
 8003fec:	40007000 	.word	0x40007000
 8003ff0:	02d0      	lsls	r0, r2, #11
 8003ff2:	d51c      	bpl.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x33e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003ff4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003ff6:	b9d3      	cbnz	r3, 800402e <HAL_RCCEx_PeriphCLKConfig+0x33e>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003ff8:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003ffc:	f8d6 1088 	ldr.w	r1, [r6, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004000:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004004:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8004008:	430b      	orrs	r3, r1
 800400a:	6961      	ldr	r1, [r4, #20]
 800400c:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8004010:	69a1      	ldr	r1, [r4, #24]
 8004012:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004016:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800401a:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 800401e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004020:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8004024:	3901      	subs	r1, #1
 8004026:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800402a:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800402e:	0291      	lsls	r1, r2, #10
 8004030:	d515      	bpl.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004032:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8004034:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004038:	d111      	bne.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800403a:	4982      	ldr	r1, [pc, #520]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 800403c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004040:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004044:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8004048:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800404c:	4303      	orrs	r3, r0
 800404e:	6960      	ldr	r0, [r4, #20]
 8004050:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004054:	6a20      	ldr	r0, [r4, #32]
 8004056:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800405a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800405e:	0712      	lsls	r2, r2, #28
 8004060:	d519      	bpl.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004062:	4a78      	ldr	r2, [pc, #480]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 8004064:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004068:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800406c:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8004070:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004074:	430b      	orrs	r3, r1
 8004076:	6961      	ldr	r1, [r4, #20]
 8004078:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800407c:	69e1      	ldr	r1, [r4, #28]
 800407e:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8004082:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004086:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800408a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800408c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004090:	430b      	orrs	r3, r1
 8004092:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004096:	4c6b      	ldr	r4, [pc, #428]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 8004098:	6823      	ldr	r3, [r4, #0]
 800409a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800409e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040a0:	f7fd ffda 	bl	8002058 <HAL_GetTick>
 80040a4:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80040a6:	6823      	ldr	r3, [r4, #0]
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	f140 80c4 	bpl.w	8004236 <HAL_RCCEx_PeriphCLKConfig+0x546>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80040ae:	2000      	movs	r0, #0
 80040b0:	e009      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      plli2sused = 1;
 80040b2:	2601      	movs	r6, #1
 80040b4:	e658      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040b6:	f7fd ffcf 	bl	8002058 <HAL_GetTick>
 80040ba:	eba0 0008 	sub.w	r0, r0, r8
 80040be:	2864      	cmp	r0, #100	; 0x64
 80040c0:	f67f ae6a 	bls.w	8003d98 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 80040c4:	2003      	movs	r0, #3
}
 80040c6:	b003      	add	sp, #12
 80040c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040cc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80040ce:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80040d2:	4293      	cmp	r3, r2
 80040d4:	f43f ae6a 	beq.w	8003dac <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80040da:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80040e0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80040e4:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040e6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80040e8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80040ec:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 80040ee:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80040f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040f2:	07db      	lsls	r3, r3, #31
 80040f4:	f57f ae5a 	bpl.w	8003dac <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 80040f8:	f7fd ffae 	bl	8002058 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040fc:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8004100:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004102:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004104:	0798      	lsls	r0, r3, #30
 8004106:	f53f ae51 	bmi.w	8003dac <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800410a:	f7fd ffa5 	bl	8002058 <HAL_GetTick>
 800410e:	eba0 0008 	sub.w	r0, r0, r8
 8004112:	4548      	cmp	r0, r9
 8004114:	d9f5      	bls.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x412>
 8004116:	e7d5      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004118:	6891      	ldr	r1, [r2, #8]
 800411a:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800411e:	e655      	b.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 8004120:	4e48      	ldr	r6, [pc, #288]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 8004122:	6833      	ldr	r3, [r6, #0]
 8004124:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004128:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800412a:	f7fd ff95 	bl	8002058 <HAL_GetTick>
 800412e:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004130:	6833      	ldr	r3, [r6, #0]
 8004132:	011a      	lsls	r2, r3, #4
 8004134:	d472      	bmi.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004136:	6822      	ldr	r2, [r4, #0]
 8004138:	07d3      	lsls	r3, r2, #31
 800413a:	d512      	bpl.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x472>
 800413c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800413e:	b983      	cbnz	r3, 8004162 <HAL_RCCEx_PeriphCLKConfig+0x472>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004140:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004144:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004148:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800414c:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8004150:	430b      	orrs	r3, r1
 8004152:	6861      	ldr	r1, [r4, #4]
 8004154:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8004158:	68a1      	ldr	r1, [r4, #8]
 800415a:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800415e:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004162:	0317      	lsls	r7, r2, #12
 8004164:	d503      	bpl.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8004166:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004168:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800416c:	d005      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800416e:	02d6      	lsls	r6, r2, #11
 8004170:	d51e      	bpl.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004172:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004174:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004178:	d11a      	bne.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800417a:	4932      	ldr	r1, [pc, #200]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 800417c:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004180:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004184:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004188:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800418c:	4303      	orrs	r3, r0
 800418e:	6860      	ldr	r0, [r4, #4]
 8004190:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004194:	68e0      	ldr	r0, [r4, #12]
 8004196:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800419a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800419e:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 80041a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80041a4:	f020 001f 	bic.w	r0, r0, #31
 80041a8:	3b01      	subs	r3, #1
 80041aa:	4303      	orrs	r3, r0
 80041ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80041b0:	01d0      	lsls	r0, r2, #7
 80041b2:	d511      	bpl.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80041b4:	4923      	ldr	r1, [pc, #140]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 80041b6:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80041ba:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80041be:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80041c2:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80041c6:	4303      	orrs	r3, r0
 80041c8:	6860      	ldr	r0, [r4, #4]
 80041ca:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80041ce:	6920      	ldr	r0, [r4, #16]
 80041d0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80041d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80041d8:	0191      	lsls	r1, r2, #6
 80041da:	d50d      	bpl.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x508>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80041dc:	6923      	ldr	r3, [r4, #16]
 80041de:	6862      	ldr	r2, [r4, #4]
 80041e0:	041b      	lsls	r3, r3, #16
 80041e2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80041e6:	68e2      	ldr	r2, [r4, #12]
 80041e8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80041ec:	68a2      	ldr	r2, [r4, #8]
 80041ee:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80041f2:	4a14      	ldr	r2, [pc, #80]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 80041f4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80041f8:	4e12      	ldr	r6, [pc, #72]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 80041fa:	6833      	ldr	r3, [r6, #0]
 80041fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004200:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8004202:	f7fd ff29 	bl	8002058 <HAL_GetTick>
 8004206:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004208:	6833      	ldr	r3, [r6, #0]
 800420a:	011a      	lsls	r2, r3, #4
 800420c:	f53f aed7 	bmi.w	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x2ce>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004210:	f7fd ff22 	bl	8002058 <HAL_GetTick>
 8004214:	1bc0      	subs	r0, r0, r7
 8004216:	2864      	cmp	r0, #100	; 0x64
 8004218:	d9f6      	bls.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800421a:	e753      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800421c:	f7fd ff1c 	bl	8002058 <HAL_GetTick>
 8004220:	1bc0      	subs	r0, r0, r7
 8004222:	2864      	cmp	r0, #100	; 0x64
 8004224:	d984      	bls.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8004226:	e74d      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004228:	f7fd ff16 	bl	8002058 <HAL_GetTick>
 800422c:	1bc0      	subs	r0, r0, r7
 800422e:	2864      	cmp	r0, #100	; 0x64
 8004230:	f67f aed0 	bls.w	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8004234:	e746      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004236:	f7fd ff0f 	bl	8002058 <HAL_GetTick>
 800423a:	1b40      	subs	r0, r0, r5
 800423c:	2864      	cmp	r0, #100	; 0x64
 800423e:	f67f af32 	bls.w	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8004242:	e73f      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
 8004244:	40023800 	.word	0x40023800

08004248 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004248:	6803      	ldr	r3, [r0, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004250:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004252:	689a      	ldr	r2, [r3, #8]
 8004254:	f022 0201 	bic.w	r2, r2, #1
 8004258:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800425a:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800425c:	2a01      	cmp	r2, #1
 800425e:	d103      	bne.n	8004268 <UART_EndRxTransfer+0x20>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	f022 0210 	bic.w	r2, r2, #16
 8004266:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004268:	2320      	movs	r3, #32
 800426a:	67c3      	str	r3, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800426c:	2300      	movs	r3, #0
 800426e:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004270:	6643      	str	r3, [r0, #100]	; 0x64
}
 8004272:	4770      	bx	lr

08004274 <HAL_UART_DeInit>:
{
 8004274:	b538      	push	{r3, r4, r5, lr}
  if (huart == NULL)
 8004276:	4605      	mov	r5, r0
 8004278:	b1a8      	cbz	r0, 80042a6 <HAL_UART_DeInit+0x32>
  huart->gState = HAL_UART_STATE_BUSY;
 800427a:	2324      	movs	r3, #36	; 0x24
  huart->Instance->CR1 = 0x0U;
 800427c:	2400      	movs	r4, #0
  huart->gState = HAL_UART_STATE_BUSY;
 800427e:	6783      	str	r3, [r0, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8004280:	6803      	ldr	r3, [r0, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	f022 0201 	bic.w	r2, r2, #1
 8004288:	601a      	str	r2, [r3, #0]
  huart->Instance->CR1 = 0x0U;
 800428a:	601c      	str	r4, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800428c:	605c      	str	r4, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800428e:	609c      	str	r4, [r3, #8]
  HAL_UART_MspDeInit(huart);
 8004290:	f7fd fc2e 	bl	8001af0 <HAL_UART_MspDeInit>
  return HAL_OK;
 8004294:	4620      	mov	r0, r4
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004296:	f8c5 4080 	str.w	r4, [r5, #128]	; 0x80
  __HAL_UNLOCK(huart);
 800429a:	f885 4074 	strb.w	r4, [r5, #116]	; 0x74
  huart->gState = HAL_UART_STATE_RESET;
 800429e:	67ac      	str	r4, [r5, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 80042a0:	67ec      	str	r4, [r5, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042a2:	662c      	str	r4, [r5, #96]	; 0x60
}
 80042a4:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80042a6:	2001      	movs	r0, #1
 80042a8:	e7fc      	b.n	80042a4 <HAL_UART_DeInit+0x30>

080042aa <HAL_UART_TxCpltCallback>:
 80042aa:	4770      	bx	lr

080042ac <HAL_UART_RxHalfCpltCallback>:
 80042ac:	4770      	bx	lr

080042ae <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80042ae:	6b80      	ldr	r0, [r0, #56]	; 0x38

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80042b0:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 80042b2:	6f82      	ldr	r2, [r0, #120]	; 0x78
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80042b4:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
{
 80042b6:	b510      	push	{r4, lr}
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80042b8:	689c      	ldr	r4, [r3, #8]
 80042ba:	0624      	lsls	r4, r4, #24
 80042bc:	d50a      	bpl.n	80042d4 <UART_DMAError+0x26>
 80042be:	2a21      	cmp	r2, #33	; 0x21
 80042c0:	d108      	bne.n	80042d4 <UART_DMAError+0x26>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80042c2:	2200      	movs	r2, #0
 80042c4:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80042ce:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80042d0:	2220      	movs	r2, #32
 80042d2:	6782      	str	r2, [r0, #120]	; 0x78
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	065b      	lsls	r3, r3, #25
 80042d8:	d506      	bpl.n	80042e8 <UART_DMAError+0x3a>
 80042da:	2922      	cmp	r1, #34	; 0x22
 80042dc:	d104      	bne.n	80042e8 <UART_DMAError+0x3a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80042de:	2300      	movs	r3, #0
 80042e0:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80042e4:	f7ff ffb0 	bl	8004248 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80042e8:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 80042ec:	f043 0310 	orr.w	r3, r3, #16
 80042f0:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042f4:	f7fd fc1c 	bl	8001b30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042f8:	bd10      	pop	{r4, pc}

080042fa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80042fa:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80042fc:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 80042fe:	2300      	movs	r3, #0
 8004300:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004304:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004308:	f7fd fc12 	bl	8001b30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800430c:	bd08      	pop	{r3, pc}

0800430e <HAL_UARTEx_RxEventCallback>:
}
 800430e:	4770      	bx	lr

08004310 <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004310:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8004312:	b508      	push	{r3, lr}
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004314:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8004316:	2b01      	cmp	r3, #1
 8004318:	d105      	bne.n	8004326 <UART_DMARxHalfCplt+0x16>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800431a:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 800431e:	0849      	lsrs	r1, r1, #1
 8004320:	f7ff fff5 	bl	800430e <HAL_UARTEx_RxEventCallback>
}
 8004324:	bd08      	pop	{r3, pc}
    HAL_UART_RxHalfCpltCallback(huart);
 8004326:	f7ff ffc1 	bl	80042ac <HAL_UART_RxHalfCpltCallback>
}
 800432a:	e7fb      	b.n	8004324 <UART_DMARxHalfCplt+0x14>

0800432c <UART_DMAReceiveCplt>:
{
 800432c:	b508      	push	{r3, lr}
 800432e:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004330:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004332:	69db      	ldr	r3, [r3, #28]
 8004334:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004338:	d018      	beq.n	800436c <UART_DMAReceiveCplt+0x40>
    huart->RxXferCount = 0U;
 800433a:	2300      	movs	r3, #0
 800433c:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004340:	6803      	ldr	r3, [r0, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004348:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800434a:	689a      	ldr	r2, [r3, #8]
 800434c:	f022 0201 	bic.w	r2, r2, #1
 8004350:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004352:	689a      	ldr	r2, [r3, #8]
 8004354:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004358:	609a      	str	r2, [r3, #8]
    huart->RxState = HAL_UART_STATE_READY;
 800435a:	2220      	movs	r2, #32
 800435c:	67c2      	str	r2, [r0, #124]	; 0x7c
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800435e:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8004360:	2a01      	cmp	r2, #1
 8004362:	d103      	bne.n	800436c <UART_DMAReceiveCplt+0x40>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	f022 0210 	bic.w	r2, r2, #16
 800436a:	601a      	str	r2, [r3, #0]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800436c:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800436e:	2b01      	cmp	r3, #1
 8004370:	d104      	bne.n	800437c <UART_DMAReceiveCplt+0x50>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004372:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 8004376:	f7ff ffca 	bl	800430e <HAL_UARTEx_RxEventCallback>
}
 800437a:	bd08      	pop	{r3, pc}
    HAL_UART_RxCpltCallback(huart);
 800437c:	f7fd fbe6 	bl	8001b4c <HAL_UART_RxCpltCallback>
}
 8004380:	e7fb      	b.n	800437a <UART_DMAReceiveCplt+0x4e>

08004382 <HAL_UARTEx_WakeupCallback>:
}
 8004382:	4770      	bx	lr

08004384 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004384:	6803      	ldr	r3, [r0, #0]
{
 8004386:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004388:	69da      	ldr	r2, [r3, #28]
  if (errorflags == 0U)
 800438a:	f640 060f 	movw	r6, #2063	; 0x80f
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800438e:	6819      	ldr	r1, [r3, #0]
{
 8004390:	4604      	mov	r4, r0
  if (errorflags == 0U)
 8004392:	4232      	tst	r2, r6
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004394:	689d      	ldr	r5, [r3, #8]
  if (errorflags == 0U)
 8004396:	d109      	bne.n	80043ac <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004398:	0696      	lsls	r6, r2, #26
 800439a:	d57d      	bpl.n	8004498 <HAL_UART_IRQHandler+0x114>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800439c:	068e      	lsls	r6, r1, #26
 800439e:	d57b      	bpl.n	8004498 <HAL_UART_IRQHandler+0x114>
      if (huart->RxISR != NULL)
 80043a0:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d072      	beq.n	800448c <HAL_UART_IRQHandler+0x108>
}
 80043a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 80043aa:	4718      	bx	r3
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80043ac:	4e7a      	ldr	r6, [pc, #488]	; (8004598 <HAL_UART_IRQHandler+0x214>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 80043ae:	f005 0001 	and.w	r0, r5, #1
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80043b2:	400e      	ands	r6, r1
 80043b4:	4306      	orrs	r6, r0
 80043b6:	d06f      	beq.n	8004498 <HAL_UART_IRQHandler+0x114>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80043b8:	07d5      	lsls	r5, r2, #31
 80043ba:	d509      	bpl.n	80043d0 <HAL_UART_IRQHandler+0x4c>
 80043bc:	05ce      	lsls	r6, r1, #23
 80043be:	d507      	bpl.n	80043d0 <HAL_UART_IRQHandler+0x4c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80043c0:	2501      	movs	r5, #1
 80043c2:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80043c4:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 80043c8:	f045 0501 	orr.w	r5, r5, #1
 80043cc:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80043d0:	0795      	lsls	r5, r2, #30
 80043d2:	d508      	bpl.n	80043e6 <HAL_UART_IRQHandler+0x62>
 80043d4:	b138      	cbz	r0, 80043e6 <HAL_UART_IRQHandler+0x62>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80043d6:	2502      	movs	r5, #2
 80043d8:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043da:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 80043de:	f045 0504 	orr.w	r5, r5, #4
 80043e2:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80043e6:	0756      	lsls	r6, r2, #29
 80043e8:	d508      	bpl.n	80043fc <HAL_UART_IRQHandler+0x78>
 80043ea:	b138      	cbz	r0, 80043fc <HAL_UART_IRQHandler+0x78>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80043ec:	2504      	movs	r5, #4
 80043ee:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80043f0:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 80043f4:	f045 0502 	orr.w	r5, r5, #2
 80043f8:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_ORE) != 0U)
 80043fc:	0715      	lsls	r5, r2, #28
 80043fe:	d50b      	bpl.n	8004418 <HAL_UART_IRQHandler+0x94>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004400:	f001 0520 	and.w	r5, r1, #32
 8004404:	4328      	orrs	r0, r5
 8004406:	d007      	beq.n	8004418 <HAL_UART_IRQHandler+0x94>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004408:	2008      	movs	r0, #8
 800440a:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800440c:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8004410:	f040 0008 	orr.w	r0, r0, #8
 8004414:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004418:	0516      	lsls	r6, r2, #20
 800441a:	d50a      	bpl.n	8004432 <HAL_UART_IRQHandler+0xae>
 800441c:	014d      	lsls	r5, r1, #5
 800441e:	d508      	bpl.n	8004432 <HAL_UART_IRQHandler+0xae>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004420:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004424:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004426:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800442a:	f043 0320 	orr.w	r3, r3, #32
 800442e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004432:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8004436:	b34b      	cbz	r3, 800448c <HAL_UART_IRQHandler+0x108>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004438:	0690      	lsls	r0, r2, #26
 800443a:	d505      	bpl.n	8004448 <HAL_UART_IRQHandler+0xc4>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800443c:	0689      	lsls	r1, r1, #26
 800443e:	d503      	bpl.n	8004448 <HAL_UART_IRQHandler+0xc4>
        if (huart->RxISR != NULL)
 8004440:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004442:	b10b      	cbz	r3, 8004448 <HAL_UART_IRQHandler+0xc4>
          huart->RxISR(huart);
 8004444:	4620      	mov	r0, r4
 8004446:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004448:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 800444a:	4620      	mov	r0, r4
      errorcode = huart->ErrorCode;
 800444c:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004450:	689b      	ldr	r3, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004452:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800445a:	431d      	orrs	r5, r3
 800445c:	d017      	beq.n	800448e <HAL_UART_IRQHandler+0x10a>
        UART_EndRxTransfer(huart);
 800445e:	f7ff fef3 	bl	8004248 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004462:	6823      	ldr	r3, [r4, #0]
 8004464:	689a      	ldr	r2, [r3, #8]
 8004466:	0652      	lsls	r2, r2, #25
 8004468:	d50d      	bpl.n	8004486 <HAL_UART_IRQHandler+0x102>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800446a:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 800446c:	6f20      	ldr	r0, [r4, #112]	; 0x70
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800446e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004472:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8004474:	b138      	cbz	r0, 8004486 <HAL_UART_IRQHandler+0x102>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004476:	4b49      	ldr	r3, [pc, #292]	; (800459c <HAL_UART_IRQHandler+0x218>)
 8004478:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800447a:	f7fd ffc2 	bl	8002402 <HAL_DMA_Abort_IT>
 800447e:	b128      	cbz	r0, 800448c <HAL_UART_IRQHandler+0x108>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004480:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8004482:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004484:	e78f      	b.n	80043a6 <HAL_UART_IRQHandler+0x22>
            HAL_UART_ErrorCallback(huart);
 8004486:	4620      	mov	r0, r4
 8004488:	f7fd fb52 	bl	8001b30 <HAL_UART_ErrorCallback>
}
 800448c:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800448e:	f7fd fb4f 	bl	8001b30 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004492:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 8004496:	e7f9      	b.n	800448c <HAL_UART_IRQHandler+0x108>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004498:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800449a:	2801      	cmp	r0, #1
 800449c:	d158      	bne.n	8004550 <HAL_UART_IRQHandler+0x1cc>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800449e:	06d6      	lsls	r6, r2, #27
 80044a0:	d556      	bpl.n	8004550 <HAL_UART_IRQHandler+0x1cc>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80044a2:	06c8      	lsls	r0, r1, #27
 80044a4:	d554      	bpl.n	8004550 <HAL_UART_IRQHandler+0x1cc>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80044a6:	2210      	movs	r2, #16
 80044a8:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044aa:	689a      	ldr	r2, [r3, #8]
 80044ac:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 80044b0:	d02f      	beq.n	8004512 <HAL_UART_IRQHandler+0x18e>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80044b2:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80044b4:	6802      	ldr	r2, [r0, #0]
 80044b6:	6852      	ldr	r2, [r2, #4]
 80044b8:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 80044ba:	2a00      	cmp	r2, #0
 80044bc:	d0e6      	beq.n	800448c <HAL_UART_IRQHandler+0x108>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80044be:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 80044c2:	4291      	cmp	r1, r2
 80044c4:	d9e2      	bls.n	800448c <HAL_UART_IRQHandler+0x108>
        huart->RxXferCount = nb_remaining_rx_data;
 80044c6:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80044ca:	69c2      	ldr	r2, [r0, #28]
 80044cc:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80044d0:	d015      	beq.n	80044fe <HAL_UART_IRQHandler+0x17a>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044d8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044da:	689a      	ldr	r2, [r3, #8]
 80044dc:	f022 0201 	bic.w	r2, r2, #1
 80044e0:	609a      	str	r2, [r3, #8]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044e2:	689a      	ldr	r2, [r3, #8]
 80044e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044e8:	609a      	str	r2, [r3, #8]
          huart->RxState = HAL_UART_STATE_READY;
 80044ea:	2220      	movs	r2, #32
 80044ec:	67e2      	str	r2, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044ee:	2200      	movs	r2, #0
 80044f0:	6622      	str	r2, [r4, #96]	; 0x60
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	f022 0210 	bic.w	r2, r2, #16
 80044f8:	601a      	str	r2, [r3, #0]
          (void)HAL_DMA_Abort(huart->hdmarx);
 80044fa:	f7fd ff3e 	bl	800237a <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80044fe:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8004502:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 8004506:	1ac9      	subs	r1, r1, r3
 8004508:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800450a:	4620      	mov	r0, r4
 800450c:	f7ff feff 	bl	800430e <HAL_UARTEx_RxEventCallback>
 8004510:	e7bc      	b.n	800448c <HAL_UART_IRQHandler+0x108>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004512:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
 8004516:	b288      	uxth	r0, r1
      if ((huart->RxXferCount > 0U)
 8004518:	f8b4 105a 	ldrh.w	r1, [r4, #90]	; 0x5a
 800451c:	b289      	uxth	r1, r1
 800451e:	2900      	cmp	r1, #0
 8004520:	d0b4      	beq.n	800448c <HAL_UART_IRQHandler+0x108>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004522:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 8004526:	1a09      	subs	r1, r1, r0
 8004528:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800452a:	2900      	cmp	r1, #0
 800452c:	d0ae      	beq.n	800448c <HAL_UART_IRQHandler+0x108>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800452e:	6818      	ldr	r0, [r3, #0]
 8004530:	f420 7090 	bic.w	r0, r0, #288	; 0x120
 8004534:	6018      	str	r0, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004536:	6898      	ldr	r0, [r3, #8]
 8004538:	f020 0001 	bic.w	r0, r0, #1
 800453c:	6098      	str	r0, [r3, #8]
        huart->RxState = HAL_UART_STATE_READY;
 800453e:	2020      	movs	r0, #32
        huart->RxISR = NULL;
 8004540:	6662      	str	r2, [r4, #100]	; 0x64
        huart->RxState = HAL_UART_STATE_READY;
 8004542:	67e0      	str	r0, [r4, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004544:	6622      	str	r2, [r4, #96]	; 0x60
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	f022 0210 	bic.w	r2, r2, #16
 800454c:	601a      	str	r2, [r3, #0]
 800454e:	e7dc      	b.n	800450a <HAL_UART_IRQHandler+0x186>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004550:	02d6      	lsls	r6, r2, #11
 8004552:	d508      	bpl.n	8004566 <HAL_UART_IRQHandler+0x1e2>
 8004554:	0268      	lsls	r0, r5, #9
 8004556:	d506      	bpl.n	8004566 <HAL_UART_IRQHandler+0x1e2>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004558:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 800455c:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800455e:	621a      	str	r2, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8004560:	f7ff ff0f 	bl	8004382 <HAL_UARTEx_WakeupCallback>
    return;
 8004564:	e792      	b.n	800448c <HAL_UART_IRQHandler+0x108>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004566:	0616      	lsls	r6, r2, #24
 8004568:	d506      	bpl.n	8004578 <HAL_UART_IRQHandler+0x1f4>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800456a:	060d      	lsls	r5, r1, #24
 800456c:	d504      	bpl.n	8004578 <HAL_UART_IRQHandler+0x1f4>
    if (huart->TxISR != NULL)
 800456e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8004570:	2b00      	cmp	r3, #0
 8004572:	d08b      	beq.n	800448c <HAL_UART_IRQHandler+0x108>
      huart->TxISR(huart);
 8004574:	4620      	mov	r0, r4
 8004576:	e716      	b.n	80043a6 <HAL_UART_IRQHandler+0x22>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004578:	0650      	lsls	r0, r2, #25
 800457a:	d587      	bpl.n	800448c <HAL_UART_IRQHandler+0x108>
 800457c:	064a      	lsls	r2, r1, #25
 800457e:	d585      	bpl.n	800448c <HAL_UART_IRQHandler+0x108>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004580:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004582:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004584:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004588:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800458a:	2320      	movs	r3, #32
 800458c:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->TxISR = NULL;
 800458e:	2300      	movs	r3, #0
 8004590:	66a3      	str	r3, [r4, #104]	; 0x68
  HAL_UART_TxCpltCallback(huart);
 8004592:	f7ff fe8a 	bl	80042aa <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004596:	e779      	b.n	800448c <HAL_UART_IRQHandler+0x108>
 8004598:	04000120 	.word	0x04000120
 800459c:	080042fb 	.word	0x080042fb

080045a0 <UART_SetConfig>:
{
 80045a0:	b538      	push	{r3, r4, r5, lr}
 80045a2:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045a4:	69c0      	ldr	r0, [r0, #28]
 80045a6:	6921      	ldr	r1, [r4, #16]
 80045a8:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045aa:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045ac:	430a      	orrs	r2, r1
 80045ae:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045b0:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045b2:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045b4:	4991      	ldr	r1, [pc, #580]	; (80047fc <UART_SetConfig+0x25c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045b6:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045b8:	4029      	ands	r1, r5
  tmpreg |= huart->Init.OneBitSampling;
 80045ba:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045bc:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045be:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045c0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045c2:	685a      	ldr	r2, [r3, #4]
 80045c4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80045c8:	430a      	orrs	r2, r1
 80045ca:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80045cc:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045ce:	6899      	ldr	r1, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 80045d0:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045d2:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 80045d6:	430a      	orrs	r2, r1
 80045d8:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045da:	4a89      	ldr	r2, [pc, #548]	; (8004800 <UART_SetConfig+0x260>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d11b      	bne.n	8004618 <UART_SetConfig+0x78>
 80045e0:	4b88      	ldr	r3, [pc, #544]	; (8004804 <UART_SetConfig+0x264>)
 80045e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045e6:	f003 0303 	and.w	r3, r3, #3
 80045ea:	3b01      	subs	r3, #1
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	f200 80f3 	bhi.w	80047d8 <UART_SetConfig+0x238>
 80045f2:	4a85      	ldr	r2, [pc, #532]	; (8004808 <UART_SetConfig+0x268>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045f4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80045f8:	5cd3      	ldrb	r3, [r2, r3]
 80045fa:	f040 80b0 	bne.w	800475e <UART_SetConfig+0x1be>
    switch (clocksource)
 80045fe:	2b08      	cmp	r3, #8
 8004600:	d826      	bhi.n	8004650 <UART_SetConfig+0xb0>
 8004602:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004606:	00f2      	.short	0x00f2
 8004608:	009500ec 	.word	0x009500ec
 800460c:	00e60025 	.word	0x00e60025
 8004610:	00250025 	.word	0x00250025
 8004614:	00960025 	.word	0x00960025
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004618:	4a7c      	ldr	r2, [pc, #496]	; (800480c <UART_SetConfig+0x26c>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d106      	bne.n	800462c <UART_SetConfig+0x8c>
 800461e:	4b79      	ldr	r3, [pc, #484]	; (8004804 <UART_SetConfig+0x264>)
 8004620:	4a7b      	ldr	r2, [pc, #492]	; (8004810 <UART_SetConfig+0x270>)
 8004622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004626:	f003 030c 	and.w	r3, r3, #12
 800462a:	e7e3      	b.n	80045f4 <UART_SetConfig+0x54>
 800462c:	4a79      	ldr	r2, [pc, #484]	; (8004814 <UART_SetConfig+0x274>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d118      	bne.n	8004664 <UART_SetConfig+0xc4>
 8004632:	4b74      	ldr	r3, [pc, #464]	; (8004804 <UART_SetConfig+0x264>)
 8004634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004638:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800463c:	2b20      	cmp	r3, #32
 800463e:	f000 80c0 	beq.w	80047c2 <UART_SetConfig+0x222>
 8004642:	d807      	bhi.n	8004654 <UART_SetConfig+0xb4>
 8004644:	2b00      	cmp	r3, #0
 8004646:	f000 80cd 	beq.w	80047e4 <UART_SetConfig+0x244>
 800464a:	2b10      	cmp	r3, #16
 800464c:	f000 80be 	beq.w	80047cc <UART_SetConfig+0x22c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004650:	2001      	movs	r0, #1
 8004652:	e0cf      	b.n	80047f4 <UART_SetConfig+0x254>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004654:	2b30      	cmp	r3, #48	; 0x30
 8004656:	d1fb      	bne.n	8004650 <UART_SetConfig+0xb0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004658:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800465c:	d069      	beq.n	8004732 <UART_SetConfig+0x192>
        pclk = (uint32_t) LSE_VALUE;
 800465e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004662:	e098      	b.n	8004796 <UART_SetConfig+0x1f6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004664:	4a6c      	ldr	r2, [pc, #432]	; (8004818 <UART_SetConfig+0x278>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d10f      	bne.n	800468a <UART_SetConfig+0xea>
 800466a:	4b66      	ldr	r3, [pc, #408]	; (8004804 <UART_SetConfig+0x264>)
 800466c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004670:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004674:	2b80      	cmp	r3, #128	; 0x80
 8004676:	f000 80a4 	beq.w	80047c2 <UART_SetConfig+0x222>
 800467a:	d804      	bhi.n	8004686 <UART_SetConfig+0xe6>
 800467c:	2b00      	cmp	r3, #0
 800467e:	f000 80b1 	beq.w	80047e4 <UART_SetConfig+0x244>
 8004682:	2b40      	cmp	r3, #64	; 0x40
 8004684:	e7e2      	b.n	800464c <UART_SetConfig+0xac>
 8004686:	2bc0      	cmp	r3, #192	; 0xc0
 8004688:	e7e5      	b.n	8004656 <UART_SetConfig+0xb6>
 800468a:	4a64      	ldr	r2, [pc, #400]	; (800481c <UART_SetConfig+0x27c>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d112      	bne.n	80046b6 <UART_SetConfig+0x116>
 8004690:	4b5c      	ldr	r3, [pc, #368]	; (8004804 <UART_SetConfig+0x264>)
 8004692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004696:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800469a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800469e:	f000 8090 	beq.w	80047c2 <UART_SetConfig+0x222>
 80046a2:	d805      	bhi.n	80046b0 <UART_SetConfig+0x110>
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	f000 809d 	beq.w	80047e4 <UART_SetConfig+0x244>
 80046aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046ae:	e7cd      	b.n	800464c <UART_SetConfig+0xac>
 80046b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046b4:	e7cf      	b.n	8004656 <UART_SetConfig+0xb6>
 80046b6:	4a5a      	ldr	r2, [pc, #360]	; (8004820 <UART_SetConfig+0x280>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d111      	bne.n	80046e0 <UART_SetConfig+0x140>
 80046bc:	4b51      	ldr	r3, [pc, #324]	; (8004804 <UART_SetConfig+0x264>)
 80046be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046c2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80046c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046ca:	d07a      	beq.n	80047c2 <UART_SetConfig+0x222>
 80046cc:	d805      	bhi.n	80046da <UART_SetConfig+0x13a>
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	f000 8082 	beq.w	80047d8 <UART_SetConfig+0x238>
 80046d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046d8:	e7b8      	b.n	800464c <UART_SetConfig+0xac>
 80046da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046de:	e7ba      	b.n	8004656 <UART_SetConfig+0xb6>
 80046e0:	4a50      	ldr	r2, [pc, #320]	; (8004824 <UART_SetConfig+0x284>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d110      	bne.n	8004708 <UART_SetConfig+0x168>
 80046e6:	4b47      	ldr	r3, [pc, #284]	; (8004804 <UART_SetConfig+0x264>)
 80046e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ec:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80046f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046f4:	d065      	beq.n	80047c2 <UART_SetConfig+0x222>
 80046f6:	d804      	bhi.n	8004702 <UART_SetConfig+0x162>
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d073      	beq.n	80047e4 <UART_SetConfig+0x244>
 80046fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004700:	e7a4      	b.n	800464c <UART_SetConfig+0xac>
 8004702:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004706:	e7a6      	b.n	8004656 <UART_SetConfig+0xb6>
 8004708:	4a47      	ldr	r2, [pc, #284]	; (8004828 <UART_SetConfig+0x288>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d1a0      	bne.n	8004650 <UART_SetConfig+0xb0>
 800470e:	4b3d      	ldr	r3, [pc, #244]	; (8004804 <UART_SetConfig+0x264>)
 8004710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004714:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004718:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800471c:	d051      	beq.n	80047c2 <UART_SetConfig+0x222>
 800471e:	d804      	bhi.n	800472a <UART_SetConfig+0x18a>
 8004720:	2b00      	cmp	r3, #0
 8004722:	d05f      	beq.n	80047e4 <UART_SetConfig+0x244>
 8004724:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004728:	e790      	b.n	800464c <UART_SetConfig+0xac>
 800472a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800472e:	e792      	b.n	8004656 <UART_SetConfig+0xb6>
        pclk = (uint32_t) HSI_VALUE;
 8004730:	483e      	ldr	r0, [pc, #248]	; (800482c <UART_SetConfig+0x28c>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004732:	6862      	ldr	r2, [r4, #4]
 8004734:	0853      	lsrs	r3, r2, #1
 8004736:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800473a:	fbb0 f0f2 	udiv	r0, r0, r2
 800473e:	b283      	uxth	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004740:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8004744:	f1a3 0110 	sub.w	r1, r3, #16
 8004748:	4291      	cmp	r1, r2
 800474a:	d881      	bhi.n	8004650 <UART_SetConfig+0xb0>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800474c:	f020 000f 	bic.w	r0, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004750:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8004754:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004756:	b280      	uxth	r0, r0
        huart->Instance->BRR = brrtemp;
 8004758:	4318      	orrs	r0, r3
 800475a:	60d0      	str	r0, [r2, #12]
 800475c:	e049      	b.n	80047f2 <UART_SetConfig+0x252>
    switch (clocksource)
 800475e:	2b08      	cmp	r3, #8
 8004760:	f63f af76 	bhi.w	8004650 <UART_SetConfig+0xb0>
 8004764:	a201      	add	r2, pc, #4	; (adr r2, 800476c <UART_SetConfig+0x1cc>)
 8004766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800476a:	bf00      	nop
 800476c:	08004791 	.word	0x08004791
 8004770:	080047b7 	.word	0x080047b7
 8004774:	080047c9 	.word	0x080047c9
 8004778:	08004651 	.word	0x08004651
 800477c:	080047bd 	.word	0x080047bd
 8004780:	08004651 	.word	0x08004651
 8004784:	08004651 	.word	0x08004651
 8004788:	08004651 	.word	0x08004651
 800478c:	0800465f 	.word	0x0800465f
        pclk = HAL_RCC_GetPCLK1Freq();
 8004790:	f7ff fa8e 	bl	8003cb0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004794:	b368      	cbz	r0, 80047f2 <UART_SetConfig+0x252>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004796:	6862      	ldr	r2, [r4, #4]
 8004798:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800479c:	fbb3 f3f2 	udiv	r3, r3, r2
 80047a0:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047a2:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80047a6:	f1a3 0110 	sub.w	r1, r3, #16
 80047aa:	4291      	cmp	r1, r2
 80047ac:	f63f af50 	bhi.w	8004650 <UART_SetConfig+0xb0>
        huart->Instance->BRR = usartdiv;
 80047b0:	6822      	ldr	r2, [r4, #0]
 80047b2:	60d3      	str	r3, [r2, #12]
 80047b4:	e01d      	b.n	80047f2 <UART_SetConfig+0x252>
        pclk = HAL_RCC_GetPCLK2Freq();
 80047b6:	f7ff fa8b 	bl	8003cd0 <HAL_RCC_GetPCLK2Freq>
        break;
 80047ba:	e7eb      	b.n	8004794 <UART_SetConfig+0x1f4>
        pclk = HAL_RCC_GetSysClockFreq();
 80047bc:	f7ff f9a4 	bl	8003b08 <HAL_RCC_GetSysClockFreq>
        break;
 80047c0:	e7e8      	b.n	8004794 <UART_SetConfig+0x1f4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047c2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80047c6:	d0b3      	beq.n	8004730 <UART_SetConfig+0x190>
        pclk = (uint32_t) HSI_VALUE;
 80047c8:	4818      	ldr	r0, [pc, #96]	; (800482c <UART_SetConfig+0x28c>)
 80047ca:	e7e4      	b.n	8004796 <UART_SetConfig+0x1f6>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047cc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80047d0:	d1f4      	bne.n	80047bc <UART_SetConfig+0x21c>
        pclk = HAL_RCC_GetSysClockFreq();
 80047d2:	f7ff f999 	bl	8003b08 <HAL_RCC_GetSysClockFreq>
        break;
 80047d6:	e00a      	b.n	80047ee <UART_SetConfig+0x24e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047d8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80047dc:	d1eb      	bne.n	80047b6 <UART_SetConfig+0x216>
        pclk = HAL_RCC_GetPCLK2Freq();
 80047de:	f7ff fa77 	bl	8003cd0 <HAL_RCC_GetPCLK2Freq>
        break;
 80047e2:	e004      	b.n	80047ee <UART_SetConfig+0x24e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047e4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80047e8:	d1d2      	bne.n	8004790 <UART_SetConfig+0x1f0>
        pclk = HAL_RCC_GetPCLK1Freq();
 80047ea:	f7ff fa61 	bl	8003cb0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80047ee:	2800      	cmp	r0, #0
 80047f0:	d19f      	bne.n	8004732 <UART_SetConfig+0x192>
 80047f2:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 80047f4:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 80047f6:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
}
 80047fa:	bd38      	pop	{r3, r4, r5, pc}
 80047fc:	efff69f3 	.word	0xefff69f3
 8004800:	40011000 	.word	0x40011000
 8004804:	40023800 	.word	0x40023800
 8004808:	08009f2e 	.word	0x08009f2e
 800480c:	40004400 	.word	0x40004400
 8004810:	08009f31 	.word	0x08009f31
 8004814:	40004800 	.word	0x40004800
 8004818:	40004c00 	.word	0x40004c00
 800481c:	40005000 	.word	0x40005000
 8004820:	40011400 	.word	0x40011400
 8004824:	40007800 	.word	0x40007800
 8004828:	40007c00 	.word	0x40007c00
 800482c:	00f42400 	.word	0x00f42400

08004830 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004830:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004832:	07da      	lsls	r2, r3, #31
{
 8004834:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004836:	d506      	bpl.n	8004846 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004838:	6801      	ldr	r1, [r0, #0]
 800483a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800483c:	684a      	ldr	r2, [r1, #4]
 800483e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8004842:	4322      	orrs	r2, r4
 8004844:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004846:	079c      	lsls	r4, r3, #30
 8004848:	d506      	bpl.n	8004858 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800484a:	6801      	ldr	r1, [r0, #0]
 800484c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800484e:	684a      	ldr	r2, [r1, #4]
 8004850:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004854:	4322      	orrs	r2, r4
 8004856:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004858:	0759      	lsls	r1, r3, #29
 800485a:	d506      	bpl.n	800486a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800485c:	6801      	ldr	r1, [r0, #0]
 800485e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8004860:	684a      	ldr	r2, [r1, #4]
 8004862:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004866:	4322      	orrs	r2, r4
 8004868:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800486a:	071a      	lsls	r2, r3, #28
 800486c:	d506      	bpl.n	800487c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800486e:	6801      	ldr	r1, [r0, #0]
 8004870:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8004872:	684a      	ldr	r2, [r1, #4]
 8004874:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004878:	4322      	orrs	r2, r4
 800487a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800487c:	06dc      	lsls	r4, r3, #27
 800487e:	d506      	bpl.n	800488e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004880:	6801      	ldr	r1, [r0, #0]
 8004882:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8004884:	688a      	ldr	r2, [r1, #8]
 8004886:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800488a:	4322      	orrs	r2, r4
 800488c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800488e:	0699      	lsls	r1, r3, #26
 8004890:	d506      	bpl.n	80048a0 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004892:	6801      	ldr	r1, [r0, #0]
 8004894:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8004896:	688a      	ldr	r2, [r1, #8]
 8004898:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800489c:	4322      	orrs	r2, r4
 800489e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80048a0:	065a      	lsls	r2, r3, #25
 80048a2:	d510      	bpl.n	80048c6 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80048a4:	6801      	ldr	r1, [r0, #0]
 80048a6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80048a8:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80048aa:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80048ae:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80048b2:	ea42 0204 	orr.w	r2, r2, r4
 80048b6:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80048b8:	d105      	bne.n	80048c6 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80048ba:	684a      	ldr	r2, [r1, #4]
 80048bc:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80048be:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80048c2:	4322      	orrs	r2, r4
 80048c4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80048c6:	061b      	lsls	r3, r3, #24
 80048c8:	d506      	bpl.n	80048d8 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80048ca:	6802      	ldr	r2, [r0, #0]
 80048cc:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80048ce:	6853      	ldr	r3, [r2, #4]
 80048d0:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80048d4:	430b      	orrs	r3, r1
 80048d6:	6053      	str	r3, [r2, #4]
}
 80048d8:	bd10      	pop	{r4, pc}

080048da <UART_WaitOnFlagUntilTimeout>:
{
 80048da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048de:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80048e2:	4604      	mov	r4, r0
 80048e4:	460e      	mov	r6, r1
 80048e6:	4615      	mov	r5, r2
 80048e8:	461f      	mov	r7, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048ea:	6822      	ldr	r2, [r4, #0]
 80048ec:	69d3      	ldr	r3, [r2, #28]
 80048ee:	ea36 0303 	bics.w	r3, r6, r3
 80048f2:	bf0c      	ite	eq
 80048f4:	2301      	moveq	r3, #1
 80048f6:	2300      	movne	r3, #0
 80048f8:	42ab      	cmp	r3, r5
 80048fa:	d001      	beq.n	8004900 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 80048fc:	2000      	movs	r0, #0
 80048fe:	e01a      	b.n	8004936 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8004900:	f1b8 3fff 	cmp.w	r8, #4294967295
 8004904:	d0f2      	beq.n	80048ec <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004906:	f7fd fba7 	bl	8002058 <HAL_GetTick>
 800490a:	1bc0      	subs	r0, r0, r7
 800490c:	4540      	cmp	r0, r8
 800490e:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004910:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004912:	d802      	bhi.n	800491a <UART_WaitOnFlagUntilTimeout+0x40>
 8004914:	f1b8 0f00 	cmp.w	r8, #0
 8004918:	d10f      	bne.n	800493a <UART_WaitOnFlagUntilTimeout+0x60>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800491a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800491e:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004920:	6883      	ldr	r3, [r0, #8]
 8004922:	f023 0301 	bic.w	r3, r3, #1
 8004926:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 8004928:	2320      	movs	r3, #32
 800492a:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800492c:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 800492e:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 8004930:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8004932:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
}
 8004936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800493a:	075a      	lsls	r2, r3, #29
 800493c:	d5d5      	bpl.n	80048ea <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800493e:	69c3      	ldr	r3, [r0, #28]
 8004940:	051b      	lsls	r3, r3, #20
 8004942:	d5d2      	bpl.n	80048ea <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004944:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004948:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800494a:	6803      	ldr	r3, [r0, #0]
 800494c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004950:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004952:	6883      	ldr	r3, [r0, #8]
 8004954:	f023 0301 	bic.w	r3, r3, #1
 8004958:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 800495a:	2320      	movs	r3, #32
 800495c:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800495e:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004960:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 8004964:	e7e3      	b.n	800492e <UART_WaitOnFlagUntilTimeout+0x54>

08004966 <HAL_UART_Transmit>:
{
 8004966:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800496a:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800496c:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 800496e:	4604      	mov	r4, r0
 8004970:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8004972:	2b20      	cmp	r3, #32
{
 8004974:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8004976:	d14e      	bne.n	8004a16 <HAL_UART_Transmit+0xb0>
    if ((pData == NULL) || (Size == 0U))
 8004978:	2900      	cmp	r1, #0
 800497a:	d04a      	beq.n	8004a12 <HAL_UART_Transmit+0xac>
 800497c:	2a00      	cmp	r2, #0
 800497e:	d048      	beq.n	8004a12 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8004980:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8004984:	2b01      	cmp	r3, #1
 8004986:	d046      	beq.n	8004a16 <HAL_UART_Transmit+0xb0>
 8004988:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800498a:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 800498c:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004990:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004992:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004996:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 8004998:	f7fd fb5e 	bl	8002058 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800499c:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 800499e:	4603      	mov	r3, r0
    huart->TxXferSize  = Size;
 80049a0:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049a4:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    huart->TxXferCount = Size;
 80049a8:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049ac:	d103      	bne.n	80049b6 <HAL_UART_Transmit+0x50>
 80049ae:	6922      	ldr	r2, [r4, #16]
 80049b0:	b90a      	cbnz	r2, 80049b6 <HAL_UART_Transmit+0x50>
 80049b2:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 80049b4:	4616      	mov	r6, r2
    __HAL_UNLOCK(huart);
 80049b6:	2200      	movs	r2, #0
 80049b8:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 80049bc:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049c0:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 80049c4:	b292      	uxth	r2, r2
 80049c6:	b93a      	cbnz	r2, 80049d8 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049c8:	2140      	movs	r1, #64	; 0x40
 80049ca:	4620      	mov	r0, r4
 80049cc:	f7ff ff85 	bl	80048da <UART_WaitOnFlagUntilTimeout>
 80049d0:	b950      	cbnz	r0, 80049e8 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 80049d2:	2320      	movs	r3, #32
 80049d4:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 80049d6:	e008      	b.n	80049ea <HAL_UART_Transmit+0x84>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049d8:	2200      	movs	r2, #0
 80049da:	2180      	movs	r1, #128	; 0x80
 80049dc:	4620      	mov	r0, r4
 80049de:	9303      	str	r3, [sp, #12]
 80049e0:	f7ff ff7b 	bl	80048da <UART_WaitOnFlagUntilTimeout>
 80049e4:	9b03      	ldr	r3, [sp, #12]
 80049e6:	b118      	cbz	r0, 80049f0 <HAL_UART_Transmit+0x8a>
        return HAL_TIMEOUT;
 80049e8:	2003      	movs	r0, #3
}
 80049ea:	b004      	add	sp, #16
 80049ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (pdata8bits == NULL)
 80049f0:	6821      	ldr	r1, [r4, #0]
 80049f2:	b95e      	cbnz	r6, 8004a0c <HAL_UART_Transmit+0xa6>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049f4:	f835 2b02 	ldrh.w	r2, [r5], #2
 80049f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80049fc:	628a      	str	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 80049fe:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8004a02:	3a01      	subs	r2, #1
 8004a04:	b292      	uxth	r2, r2
 8004a06:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8004a0a:	e7d7      	b.n	80049bc <HAL_UART_Transmit+0x56>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a0c:	f816 2b01 	ldrb.w	r2, [r6], #1
 8004a10:	e7f4      	b.n	80049fc <HAL_UART_Transmit+0x96>
      return  HAL_ERROR;
 8004a12:	2001      	movs	r0, #1
 8004a14:	e7e9      	b.n	80049ea <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 8004a16:	2002      	movs	r0, #2
 8004a18:	e7e7      	b.n	80049ea <HAL_UART_Transmit+0x84>

08004a1a <UART_CheckIdleState>:
{
 8004a1a:	b530      	push	{r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a1c:	2500      	movs	r5, #0
{
 8004a1e:	4604      	mov	r4, r0
 8004a20:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a22:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 8004a26:	f7fd fb17 	bl	8002058 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a2a:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8004a2c:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a2e:	6812      	ldr	r2, [r2, #0]
 8004a30:	0711      	lsls	r1, r2, #28
 8004a32:	d415      	bmi.n	8004a60 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a34:	6822      	ldr	r2, [r4, #0]
 8004a36:	6812      	ldr	r2, [r2, #0]
 8004a38:	0752      	lsls	r2, r2, #29
 8004a3a:	d509      	bpl.n	8004a50 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a3c:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8004a40:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004a44:	4620      	mov	r0, r4
 8004a46:	9200      	str	r2, [sp, #0]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f7ff ff46 	bl	80048da <UART_WaitOnFlagUntilTimeout>
 8004a4e:	b9a0      	cbnz	r0, 8004a7a <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 8004a50:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a52:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8004a54:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8004a56:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004a5a:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a5c:	6620      	str	r0, [r4, #96]	; 0x60
  return HAL_OK;
 8004a5e:	e00d      	b.n	8004a7c <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a60:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8004a64:	9003      	str	r0, [sp, #12]
 8004a66:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a6a:	4620      	mov	r0, r4
 8004a6c:	9200      	str	r2, [sp, #0]
 8004a6e:	462a      	mov	r2, r5
 8004a70:	f7ff ff33 	bl	80048da <UART_WaitOnFlagUntilTimeout>
 8004a74:	9b03      	ldr	r3, [sp, #12]
 8004a76:	2800      	cmp	r0, #0
 8004a78:	d0dc      	beq.n	8004a34 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8004a7a:	2003      	movs	r0, #3
}
 8004a7c:	b005      	add	sp, #20
 8004a7e:	bd30      	pop	{r4, r5, pc}

08004a80 <HAL_UART_Init>:
{
 8004a80:	b510      	push	{r4, lr}
  if (huart == NULL)
 8004a82:	4604      	mov	r4, r0
 8004a84:	b340      	cbz	r0, 8004ad8 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8004a86:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8004a88:	b91b      	cbnz	r3, 8004a92 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8004a8a:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8004a8e:	f7fc ffd3 	bl	8001a38 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8004a92:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004a94:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a96:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8004a98:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8004a9a:	6813      	ldr	r3, [r2, #0]
 8004a9c:	f023 0301 	bic.w	r3, r3, #1
 8004aa0:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004aa2:	f7ff fd7d 	bl	80045a0 <UART_SetConfig>
 8004aa6:	2801      	cmp	r0, #1
 8004aa8:	d016      	beq.n	8004ad8 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004aaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004aac:	b113      	cbz	r3, 8004ab4 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8004aae:	4620      	mov	r0, r4
 8004ab0:	f7ff febe 	bl	8004830 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ab4:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8004ab6:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ab8:	685a      	ldr	r2, [r3, #4]
 8004aba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004abe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ac0:	689a      	ldr	r2, [r3, #8]
 8004ac2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ac6:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	f042 0201 	orr.w	r2, r2, #1
}
 8004ace:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8004ad2:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8004ad4:	f7ff bfa1 	b.w	8004a1a <UART_CheckIdleState>
}
 8004ad8:	2001      	movs	r0, #1
 8004ada:	bd10      	pop	{r4, pc}

08004adc <UART_Start_Receive_DMA>:
{
 8004adc:	b570      	push	{r4, r5, r6, lr}
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ade:	2322      	movs	r3, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ae0:	2500      	movs	r5, #0
{
 8004ae2:	4604      	mov	r4, r0
  huart->pRxBuffPtr = pData;
 8004ae4:	6541      	str	r1, [r0, #84]	; 0x54
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ae6:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
  huart->RxXferSize = Size;
 8004aea:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004aee:	67c3      	str	r3, [r0, #124]	; 0x7c
  if (huart->hdmarx != NULL)
 8004af0:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8004af2:	b1b8      	cbz	r0, 8004b24 <UART_Start_Receive_DMA+0x48>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004af4:	4b14      	ldr	r3, [pc, #80]	; (8004b48 <UART_Start_Receive_DMA+0x6c>)
 8004af6:	6826      	ldr	r6, [r4, #0]
 8004af8:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004afa:	4b14      	ldr	r3, [pc, #80]	; (8004b4c <UART_Start_Receive_DMA+0x70>)
 8004afc:	6403      	str	r3, [r0, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004afe:	4b14      	ldr	r3, [pc, #80]	; (8004b50 <UART_Start_Receive_DMA+0x74>)
    huart->hdmarx->XferAbortCallback = NULL;
 8004b00:	e9c0 3513 	strd	r3, r5, [r0, #76]	; 0x4c
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004b04:	4613      	mov	r3, r2
 8004b06:	460a      	mov	r2, r1
 8004b08:	f106 0124 	add.w	r1, r6, #36	; 0x24
 8004b0c:	f7fd fbf8 	bl	8002300 <HAL_DMA_Start_IT>
 8004b10:	b140      	cbz	r0, 8004b24 <UART_Start_Receive_DMA+0x48>
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004b12:	2310      	movs	r3, #16
      return HAL_ERROR;
 8004b14:	2001      	movs	r0, #1
      __HAL_UNLOCK(huart);
 8004b16:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004b1a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
      huart->gState = HAL_UART_STATE_READY;
 8004b1e:	2320      	movs	r3, #32
 8004b20:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8004b22:	bd70      	pop	{r4, r5, r6, pc}
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b24:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(huart);
 8004b26:	2000      	movs	r0, #0
 8004b28:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b32:	601a      	str	r2, [r3, #0]
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b34:	689a      	ldr	r2, [r3, #8]
 8004b36:	f042 0201 	orr.w	r2, r2, #1
 8004b3a:	609a      	str	r2, [r3, #8]
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b3c:	689a      	ldr	r2, [r3, #8]
 8004b3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b42:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b44:	e7ed      	b.n	8004b22 <UART_Start_Receive_DMA+0x46>
 8004b46:	bf00      	nop
 8004b48:	0800432d 	.word	0x0800432d
 8004b4c:	08004311 	.word	0x08004311
 8004b50:	080042af 	.word	0x080042af

08004b54 <HAL_UART_Receive_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b54:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8004b56:	2b20      	cmp	r3, #32
{
 8004b58:	b410      	push	{r4}
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b5a:	d11a      	bne.n	8004b92 <HAL_UART_Receive_DMA+0x3e>
    if ((pData == NULL) || (Size == 0U))
 8004b5c:	b1a9      	cbz	r1, 8004b8a <HAL_UART_Receive_DMA+0x36>
 8004b5e:	b1a2      	cbz	r2, 8004b8a <HAL_UART_Receive_DMA+0x36>
    __HAL_LOCK(huart);
 8004b60:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d014      	beq.n	8004b92 <HAL_UART_Receive_DMA+0x3e>
 8004b68:	2301      	movs	r3, #1
 8004b6a:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	6603      	str	r3, [r0, #96]	; 0x60
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004b72:	6803      	ldr	r3, [r0, #0]
 8004b74:	685c      	ldr	r4, [r3, #4]
 8004b76:	0224      	lsls	r4, r4, #8
 8004b78:	d503      	bpl.n	8004b82 <HAL_UART_Receive_DMA+0x2e>
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004b7a:	681c      	ldr	r4, [r3, #0]
 8004b7c:	f044 6480 	orr.w	r4, r4, #67108864	; 0x4000000
 8004b80:	601c      	str	r4, [r3, #0]
}
 8004b82:	f85d 4b04 	ldr.w	r4, [sp], #4
    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004b86:	f7ff bfa9 	b.w	8004adc <UART_Start_Receive_DMA>
      return HAL_ERROR;
 8004b8a:	2001      	movs	r0, #1
}
 8004b8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b90:	4770      	bx	lr
    return HAL_BUSY;
 8004b92:	2002      	movs	r0, #2
 8004b94:	e7fa      	b.n	8004b8c <HAL_UART_Receive_DMA+0x38>
	...

08004b98 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004b98:	4b0a      	ldr	r3, [pc, #40]	; (8004bc4 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	d00f      	beq.n	8004bbe <USB_CoreReset+0x26>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b9e:	6902      	ldr	r2, [r0, #16]
 8004ba0:	2a00      	cmp	r2, #0
 8004ba2:	dafa      	bge.n	8004b9a <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004ba4:	6903      	ldr	r3, [r0, #16]
 8004ba6:	4a07      	ldr	r2, [pc, #28]	; (8004bc4 <USB_CoreReset+0x2c>)
 8004ba8:	f043 0301 	orr.w	r3, r3, #1
 8004bac:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8004bae:	3a01      	subs	r2, #1
 8004bb0:	d005      	beq.n	8004bbe <USB_CoreReset+0x26>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004bb2:	6903      	ldr	r3, [r0, #16]
 8004bb4:	f013 0301 	ands.w	r3, r3, #1
 8004bb8:	d1f9      	bne.n	8004bae <USB_CoreReset+0x16>

  return HAL_OK;
 8004bba:	4618      	mov	r0, r3
 8004bbc:	4770      	bx	lr
      return HAL_TIMEOUT;
 8004bbe:	2003      	movs	r0, #3
}
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	00030d41 	.word	0x00030d41

08004bc8 <USB_CoreInit>:
{
 8004bc8:	b084      	sub	sp, #16
 8004bca:	b538      	push	{r3, r4, r5, lr}
 8004bcc:	ad05      	add	r5, sp, #20
 8004bce:	4604      	mov	r4, r0
 8004bd0:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004bd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d126      	bne.n	8004c28 <USB_CoreInit+0x60>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004bda:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004bdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004be0:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004be2:	68c3      	ldr	r3, [r0, #12]
 8004be4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004be8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bec:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004bee:	68c3      	ldr	r3, [r0, #12]
 8004bf0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004bf4:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8004bf6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d103      	bne.n	8004c04 <USB_CoreInit+0x3c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004bfc:	68c3      	ldr	r3, [r0, #12]
 8004bfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c02:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8004c04:	4620      	mov	r0, r4
 8004c06:	f7ff ffc7 	bl	8004b98 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8004c0a:	9b08      	ldr	r3, [sp, #32]
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d107      	bne.n	8004c20 <USB_CoreInit+0x58>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004c10:	68a3      	ldr	r3, [r4, #8]
 8004c12:	f043 0306 	orr.w	r3, r3, #6
 8004c16:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004c18:	68a3      	ldr	r3, [r4, #8]
 8004c1a:	f043 0320 	orr.w	r3, r3, #32
 8004c1e:	60a3      	str	r3, [r4, #8]
}
 8004c20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c24:	b004      	add	sp, #16
 8004c26:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004c28:	68c3      	ldr	r3, [r0, #12]
 8004c2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c2e:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8004c30:	f7ff ffb2 	bl	8004b98 <USB_CoreReset>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004c34:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004c36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c3a:	63a3      	str	r3, [r4, #56]	; 0x38
 8004c3c:	e7e5      	b.n	8004c0a <USB_CoreInit+0x42>
	...

08004c40 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 8004c40:	2a02      	cmp	r2, #2
 8004c42:	d14a      	bne.n	8004cda <USB_SetTurnaroundTime+0x9a>
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004c44:	4b27      	ldr	r3, [pc, #156]	; (8004ce4 <USB_SetTurnaroundTime+0xa4>)
 8004c46:	4a28      	ldr	r2, [pc, #160]	; (8004ce8 <USB_SetTurnaroundTime+0xa8>)
 8004c48:	440b      	add	r3, r1
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d939      	bls.n	8004cc2 <USB_SetTurnaroundTime+0x82>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004c4e:	4b27      	ldr	r3, [pc, #156]	; (8004cec <USB_SetTurnaroundTime+0xac>)
 8004c50:	4a27      	ldr	r2, [pc, #156]	; (8004cf0 <USB_SetTurnaroundTime+0xb0>)
 8004c52:	440b      	add	r3, r1
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d936      	bls.n	8004cc6 <USB_SetTurnaroundTime+0x86>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004c58:	f5a1 0374 	sub.w	r3, r1, #15990784	; 0xf40000
 8004c5c:	4a25      	ldr	r2, [pc, #148]	; (8004cf4 <USB_SetTurnaroundTime+0xb4>)
 8004c5e:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d931      	bls.n	8004cca <USB_SetTurnaroundTime+0x8a>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004c66:	f1a1 7383 	sub.w	r3, r1, #17170432	; 0x1060000
 8004c6a:	4a23      	ldr	r2, [pc, #140]	; (8004cf8 <USB_SetTurnaroundTime+0xb8>)
 8004c6c:	f5a3 43e7 	sub.w	r3, r3, #29568	; 0x7380
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d32c      	bcc.n	8004cce <USB_SetTurnaroundTime+0x8e>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004c74:	4b21      	ldr	r3, [pc, #132]	; (8004cfc <USB_SetTurnaroundTime+0xbc>)
 8004c76:	4a22      	ldr	r2, [pc, #136]	; (8004d00 <USB_SetTurnaroundTime+0xc0>)
 8004c78:	440b      	add	r3, r1
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d929      	bls.n	8004cd2 <USB_SetTurnaroundTime+0x92>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004c7e:	4b21      	ldr	r3, [pc, #132]	; (8004d04 <USB_SetTurnaroundTime+0xc4>)
 8004c80:	4a21      	ldr	r2, [pc, #132]	; (8004d08 <USB_SetTurnaroundTime+0xc8>)
 8004c82:	440b      	add	r3, r1
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d326      	bcc.n	8004cd6 <USB_SetTurnaroundTime+0x96>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004c88:	4b20      	ldr	r3, [pc, #128]	; (8004d0c <USB_SetTurnaroundTime+0xcc>)
 8004c8a:	4a21      	ldr	r2, [pc, #132]	; (8004d10 <USB_SetTurnaroundTime+0xd0>)
 8004c8c:	440b      	add	r3, r1
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d323      	bcc.n	8004cda <USB_SetTurnaroundTime+0x9a>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004c92:	f1a1 73b7 	sub.w	r3, r1, #23986176	; 0x16e0000
 8004c96:	4a1f      	ldr	r2, [pc, #124]	; (8004d14 <USB_SetTurnaroundTime+0xd4>)
 8004c98:	f5a3 5358 	sub.w	r3, r3, #13824	; 0x3600
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d31e      	bcc.n	8004cde <USB_SetTurnaroundTime+0x9e>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004ca0:	4b1d      	ldr	r3, [pc, #116]	; (8004d18 <USB_SetTurnaroundTime+0xd8>)
      UsbTrd = 0x6U;
 8004ca2:	4a1e      	ldr	r2, [pc, #120]	; (8004d1c <USB_SetTurnaroundTime+0xdc>)
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004ca4:	440b      	add	r3, r1
      UsbTrd = 0x6U;
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	bf34      	ite	cc
 8004caa:	2307      	movcc	r3, #7
 8004cac:	2306      	movcs	r3, #6
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004cae:	68c2      	ldr	r2, [r0, #12]
 8004cb0:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 8004cb4:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004cb6:	68c2      	ldr	r2, [r0, #12]
 8004cb8:	ea42 2383 	orr.w	r3, r2, r3, lsl #10
 8004cbc:	60c3      	str	r3, [r0, #12]
}
 8004cbe:	2000      	movs	r0, #0
 8004cc0:	4770      	bx	lr
      UsbTrd = 0xFU;
 8004cc2:	230f      	movs	r3, #15
 8004cc4:	e7f3      	b.n	8004cae <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xEU;
 8004cc6:	230e      	movs	r3, #14
 8004cc8:	e7f1      	b.n	8004cae <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xDU;
 8004cca:	230d      	movs	r3, #13
 8004ccc:	e7ef      	b.n	8004cae <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xCU;
 8004cce:	230c      	movs	r3, #12
 8004cd0:	e7ed      	b.n	8004cae <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xBU;
 8004cd2:	230b      	movs	r3, #11
 8004cd4:	e7eb      	b.n	8004cae <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xAU;
 8004cd6:	230a      	movs	r3, #10
 8004cd8:	e7e9      	b.n	8004cae <USB_SetTurnaroundTime+0x6e>
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004cda:	2309      	movs	r3, #9
 8004cdc:	e7e7      	b.n	8004cae <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0x8U;
 8004cde:	2308      	movs	r3, #8
 8004ce0:	e7e5      	b.n	8004cae <USB_SetTurnaroundTime+0x6e>
 8004ce2:	bf00      	nop
 8004ce4:	ff275340 	.word	0xff275340
 8004ce8:	000c34ff 	.word	0x000c34ff
 8004cec:	ff1b1e40 	.word	0xff1b1e40
 8004cf0:	000f423f 	.word	0x000f423f
 8004cf4:	00124f7f 	.word	0x00124f7f
 8004cf8:	0013d620 	.word	0x0013d620
 8004cfc:	fee5b660 	.word	0xfee5b660
 8004d00:	0016e35f 	.word	0x0016e35f
 8004d04:	feced300 	.word	0xfeced300
 8004d08:	001b7740 	.word	0x001b7740
 8004d0c:	feb35bc0 	.word	0xfeb35bc0
 8004d10:	002191c0 	.word	0x002191c0
 8004d14:	00387520 	.word	0x00387520
 8004d18:	fe5954e0 	.word	0xfe5954e0
 8004d1c:	00419ce0 	.word	0x00419ce0

08004d20 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004d20:	6883      	ldr	r3, [r0, #8]
 8004d22:	f043 0301 	orr.w	r3, r3, #1
 8004d26:	6083      	str	r3, [r0, #8]
}
 8004d28:	2000      	movs	r0, #0
 8004d2a:	4770      	bx	lr

08004d2c <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004d2c:	6883      	ldr	r3, [r0, #8]
 8004d2e:	f023 0301 	bic.w	r3, r3, #1
 8004d32:	6083      	str	r3, [r0, #8]
}
 8004d34:	2000      	movs	r0, #0
 8004d36:	4770      	bx	lr

08004d38 <USB_SetCurrentMode>:
{
 8004d38:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004d3a:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8004d3c:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004d3e:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004d42:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8004d44:	d108      	bne.n	8004d58 <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004d46:	68c3      	ldr	r3, [r0, #12]
 8004d48:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004d4c:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8004d4e:	2032      	movs	r0, #50	; 0x32
 8004d50:	f7fd f988 	bl	8002064 <HAL_Delay>
  return HAL_OK;
 8004d54:	2000      	movs	r0, #0
}
 8004d56:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 8004d58:	b919      	cbnz	r1, 8004d62 <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004d5a:	68c3      	ldr	r3, [r0, #12]
 8004d5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d60:	e7f4      	b.n	8004d4c <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 8004d62:	2001      	movs	r0, #1
 8004d64:	e7f7      	b.n	8004d56 <USB_SetCurrentMode+0x1e>
	...

08004d68 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004d68:	0189      	lsls	r1, r1, #6
 8004d6a:	4a07      	ldr	r2, [pc, #28]	; (8004d88 <USB_FlushTxFifo+0x20>)
 8004d6c:	f041 0120 	orr.w	r1, r1, #32
 8004d70:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 8004d72:	3a01      	subs	r2, #1
 8004d74:	d005      	beq.n	8004d82 <USB_FlushTxFifo+0x1a>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004d76:	6903      	ldr	r3, [r0, #16]
 8004d78:	f013 0320 	ands.w	r3, r3, #32
 8004d7c:	d1f9      	bne.n	8004d72 <USB_FlushTxFifo+0xa>
  return HAL_OK;
 8004d7e:	4618      	mov	r0, r3
 8004d80:	4770      	bx	lr
      return HAL_TIMEOUT;
 8004d82:	2003      	movs	r0, #3
}
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop
 8004d88:	00030d41 	.word	0x00030d41

08004d8c <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004d8c:	2310      	movs	r3, #16
 8004d8e:	4a06      	ldr	r2, [pc, #24]	; (8004da8 <USB_FlushRxFifo+0x1c>)
 8004d90:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 8004d92:	3a01      	subs	r2, #1
 8004d94:	d005      	beq.n	8004da2 <USB_FlushRxFifo+0x16>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004d96:	6903      	ldr	r3, [r0, #16]
 8004d98:	f013 0310 	ands.w	r3, r3, #16
 8004d9c:	d1f9      	bne.n	8004d92 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 8004d9e:	4618      	mov	r0, r3
 8004da0:	4770      	bx	lr
      return HAL_TIMEOUT;
 8004da2:	2003      	movs	r0, #3
}
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	00030d41 	.word	0x00030d41

08004dac <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8004dac:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8004db0:	4319      	orrs	r1, r3
 8004db2:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8004db6:	2000      	movs	r0, #0
 8004db8:	4770      	bx	lr
	...

08004dbc <USB_DevInit>:
{
 8004dbc:	b084      	sub	sp, #16
 8004dbe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004dc2:	4604      	mov	r4, r0
 8004dc4:	a809      	add	r0, sp, #36	; 0x24
 8004dc6:	460e      	mov	r6, r1
 8004dc8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8004dcc:	2300      	movs	r3, #0
 8004dce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004dd0:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004dd2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    USBx->DIEPTXF[i] = 0U;
 8004dd4:	461f      	mov	r7, r3
 8004dd6:	f103 0040 	add.w	r0, r3, #64	; 0x40
  for (i = 0U; i < 15U; i++)
 8004dda:	3301      	adds	r3, #1
    USBx->DIEPTXF[i] = 0U;
 8004ddc:	eb04 0080 	add.w	r0, r4, r0, lsl #2
  for (i = 0U; i < 15U; i++)
 8004de0:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 8004de2:	6047      	str	r7, [r0, #4]
  for (i = 0U; i < 15U; i++)
 8004de4:	d1f7      	bne.n	8004dd6 <USB_DevInit+0x1a>
  if (cfg.vbus_sensing_enable == 0U)
 8004de6:	f504 6700 	add.w	r7, r4, #2048	; 0x800
 8004dea:	2d00      	cmp	r5, #0
 8004dec:	d16b      	bne.n	8004ec6 <USB_DevInit+0x10a>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f043 0302 	orr.w	r3, r3, #2
 8004df4:	607b      	str	r3, [r7, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004df6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004df8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004dfc:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004dfe:	6823      	ldr	r3, [r4, #0]
 8004e00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e04:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004e06:	6823      	ldr	r3, [r4, #0]
 8004e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e0c:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 8004e0e:	2300      	movs	r3, #0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e10:	2901      	cmp	r1, #1
  USBx_PCGCCTL = 0U;
 8004e12:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004e16:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8004e1a:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e1e:	d159      	bne.n	8004ed4 <USB_DevInit+0x118>
    if (cfg.speed == USBD_HS_SPEED)
 8004e20:	2a00      	cmp	r2, #0
 8004e22:	d155      	bne.n	8004ed0 <USB_DevInit+0x114>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004e24:	2100      	movs	r1, #0
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004e26:	4620      	mov	r0, r4
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004e28:	f64f 387f 	movw	r8, #64383	; 0xfb7f
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004e2c:	f7ff ffbe 	bl	8004dac <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004e30:	2110      	movs	r1, #16
 8004e32:	4620      	mov	r0, r4
 8004e34:	f7ff ff98 	bl	8004d68 <USB_FlushTxFifo>
 8004e38:	4601      	mov	r1, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004e3a:	4620      	mov	r0, r4
 8004e3c:	f7ff ffa6 	bl	8004d8c <USB_FlushRxFifo>
 8004e40:	4308      	orrs	r0, r1
  USBx_DEVICE->DIEPMSK = 0U;
 8004e42:	2300      	movs	r3, #0
 8004e44:	f504 6210 	add.w	r2, r4, #2304	; 0x900
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004e48:	b2c0      	uxtb	r0, r0
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004e4a:	f04f 4c90 	mov.w	ip, #1207959552	; 0x48000000
      USBx_INEP(i)->DIEPCTL = 0U;
 8004e4e:	4619      	mov	r1, r3
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004e50:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
    ret = HAL_ERROR;
 8004e54:	3800      	subs	r0, #0
  USBx_DEVICE->DIEPMSK = 0U;
 8004e56:	613b      	str	r3, [r7, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004e58:	617b      	str	r3, [r7, #20]
    ret = HAL_ERROR;
 8004e5a:	bf18      	it	ne
 8004e5c:	2001      	movne	r0, #1
  USBx_DEVICE->DAINTMSK = 0U;
 8004e5e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e60:	42b3      	cmp	r3, r6
 8004e62:	d13b      	bne.n	8004edc <USB_DevInit+0x120>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e64:	2200      	movs	r2, #0
 8004e66:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004e6a:	f04f 4c90 	mov.w	ip, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004e6e:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004e72:	4611      	mov	r1, r2
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004e74:	f64f 387f 	movw	r8, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e78:	42b2      	cmp	r2, r6
 8004e7a:	d142      	bne.n	8004f02 <USB_DevInit+0x146>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e82:	613b      	str	r3, [r7, #16]
  USBx->GINTMSK = 0U;
 8004e84:	2300      	movs	r3, #0
 8004e86:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004e88:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8004e8c:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 8004e8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e90:	b91b      	cbnz	r3, 8004e9a <USB_DevInit+0xde>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004e92:	69a3      	ldr	r3, [r4, #24]
 8004e94:	f043 0310 	orr.w	r3, r3, #16
 8004e98:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004e9a:	69a2      	ldr	r2, [r4, #24]
 8004e9c:	4b22      	ldr	r3, [pc, #136]	; (8004f28 <USB_DevInit+0x16c>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8004ea2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004ea4:	b11b      	cbz	r3, 8004eae <USB_DevInit+0xf2>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004ea6:	69a3      	ldr	r3, [r4, #24]
 8004ea8:	f043 0308 	orr.w	r3, r3, #8
 8004eac:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8004eae:	2d01      	cmp	r5, #1
 8004eb0:	d105      	bne.n	8004ebe <USB_DevInit+0x102>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004eb2:	69a3      	ldr	r3, [r4, #24]
 8004eb4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004eb8:	f043 0304 	orr.w	r3, r3, #4
 8004ebc:	61a3      	str	r3, [r4, #24]
}
 8004ebe:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ec2:	b004      	add	sp, #16
 8004ec4:	4770      	bx	lr
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004ec6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004ec8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ecc:	63a3      	str	r3, [r4, #56]	; 0x38
 8004ece:	e79e      	b.n	8004e0e <USB_DevInit+0x52>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004ed0:	2101      	movs	r1, #1
 8004ed2:	e7a8      	b.n	8004e26 <USB_DevInit+0x6a>
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8004ed4:	2903      	cmp	r1, #3
 8004ed6:	d0a3      	beq.n	8004e20 <USB_DevInit+0x64>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004ed8:	2103      	movs	r1, #3
 8004eda:	e7a4      	b.n	8004e26 <USB_DevInit+0x6a>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004edc:	f8d2 9000 	ldr.w	r9, [r2]
 8004ee0:	f1b9 0f00 	cmp.w	r9, #0
 8004ee4:	da0b      	bge.n	8004efe <USB_DevInit+0x142>
      if (i == 0U)
 8004ee6:	b93b      	cbnz	r3, 8004ef8 <USB_DevInit+0x13c>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004ee8:	f8c2 e000 	str.w	lr, [r2]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004eec:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004eee:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004ef0:	f8c2 8008 	str.w	r8, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ef4:	3220      	adds	r2, #32
 8004ef6:	e7b3      	b.n	8004e60 <USB_DevInit+0xa4>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004ef8:	f8c2 c000 	str.w	ip, [r2]
 8004efc:	e7f6      	b.n	8004eec <USB_DevInit+0x130>
      USBx_INEP(i)->DIEPCTL = 0U;
 8004efe:	6011      	str	r1, [r2, #0]
 8004f00:	e7f4      	b.n	8004eec <USB_DevInit+0x130>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f02:	f8d3 9000 	ldr.w	r9, [r3]
 8004f06:	f1b9 0f00 	cmp.w	r9, #0
 8004f0a:	da0b      	bge.n	8004f24 <USB_DevInit+0x168>
      if (i == 0U)
 8004f0c:	b93a      	cbnz	r2, 8004f1e <USB_DevInit+0x162>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004f0e:	f8c3 e000 	str.w	lr, [r3]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004f12:	6119      	str	r1, [r3, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f14:	3201      	adds	r2, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004f16:	f8c3 8008 	str.w	r8, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f1a:	3320      	adds	r3, #32
 8004f1c:	e7ac      	b.n	8004e78 <USB_DevInit+0xbc>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004f1e:	f8c3 c000 	str.w	ip, [r3]
 8004f22:	e7f6      	b.n	8004f12 <USB_DevInit+0x156>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004f24:	6019      	str	r1, [r3, #0]
 8004f26:	e7f4      	b.n	8004f12 <USB_DevInit+0x156>
 8004f28:	803c3800 	.word	0x803c3800

08004f2c <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004f2c:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004f30:	f013 0006 	ands.w	r0, r3, #6
 8004f34:	d004      	beq.n	8004f40 <USB_GetDevSpeed+0x14>
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004f36:	f013 0f02 	tst.w	r3, #2
    speed = 0xFU;
 8004f3a:	bf14      	ite	ne
 8004f3c:	2002      	movne	r0, #2
 8004f3e:	200f      	moveq	r0, #15
}
 8004f40:	4770      	bx	lr

08004f42 <USB_ActivateEndpoint>:
{
 8004f42:	b530      	push	{r4, r5, lr}
  uint32_t epnum = (uint32_t)ep->num;
 8004f44:	780d      	ldrb	r5, [r1, #0]
  if (ep->is_in == 1U)
 8004f46:	2401      	movs	r4, #1
 8004f48:	f500 6200 	add.w	r2, r0, #2048	; 0x800
 8004f4c:	f005 030f 	and.w	r3, r5, #15
 8004f50:	eb00 1045 	add.w	r0, r0, r5, lsl #5
 8004f54:	409c      	lsls	r4, r3
 8004f56:	784b      	ldrb	r3, [r1, #1]
 8004f58:	2b01      	cmp	r3, #1
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004f5a:	69d3      	ldr	r3, [r2, #28]
  if (ep->is_in == 1U)
 8004f5c:	d118      	bne.n	8004f90 <USB_ActivateEndpoint+0x4e>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004f5e:	431c      	orrs	r4, r3
 8004f60:	61d4      	str	r4, [r2, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004f62:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8004f66:	041a      	lsls	r2, r3, #16
 8004f68:	d410      	bmi.n	8004f8c <USB_ActivateEndpoint+0x4a>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004f6a:	688a      	ldr	r2, [r1, #8]
 8004f6c:	f8d0 4900 	ldr.w	r4, [r0, #2304]	; 0x900
 8004f70:	f3c2 030a 	ubfx	r3, r2, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004f74:	78ca      	ldrb	r2, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004f76:	4323      	orrs	r3, r4
 8004f78:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 8004f7c:	ea43 5385 	orr.w	r3, r3, r5, lsl #22
 8004f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f88:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8004f8c:	2000      	movs	r0, #0
 8004f8e:	bd30      	pop	{r4, r5, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004f90:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8004f94:	61d4      	str	r4, [r2, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004f96:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8004f9a:	041b      	lsls	r3, r3, #16
 8004f9c:	d4f6      	bmi.n	8004f8c <USB_ActivateEndpoint+0x4a>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004f9e:	688b      	ldr	r3, [r1, #8]
 8004fa0:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8004fa4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004fa8:	4313      	orrs	r3, r2
                                    ((uint32_t)ep->type << 18) |
 8004faa:	78ca      	ldrb	r2, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004fac:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 8004fb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fb8:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8004fbc:	e7e6      	b.n	8004f8c <USB_ActivateEndpoint+0x4a>
	...

08004fc0 <USB_DeactivateEndpoint>:
{
 8004fc0:	b510      	push	{r4, lr}
  uint32_t epnum = (uint32_t)ep->num;
 8004fc2:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 8004fc4:	7849      	ldrb	r1, [r1, #1]
 8004fc6:	eb00 1342 	add.w	r3, r0, r2, lsl #5
 8004fca:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8004fce:	2901      	cmp	r1, #1
 8004fd0:	f002 020f 	and.w	r2, r2, #15
 8004fd4:	d122      	bne.n	800501c <USB_DeactivateEndpoint+0x5c>
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004fd6:	f8d3 1900 	ldr.w	r1, [r3, #2304]	; 0x900
 8004fda:	2900      	cmp	r1, #0
 8004fdc:	da0b      	bge.n	8004ff6 <USB_DeactivateEndpoint+0x36>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004fde:	f8d3 1900 	ldr.w	r1, [r3, #2304]	; 0x900
 8004fe2:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 8004fe6:	f8c3 1900 	str.w	r1, [r3, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004fea:	f8d3 1900 	ldr.w	r1, [r3, #2304]	; 0x900
 8004fee:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8004ff2:	f8c3 1900 	str.w	r1, [r3, #2304]	; 0x900
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004ff6:	2101      	movs	r1, #1
 8004ff8:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8004ffa:	fa01 f202 	lsl.w	r2, r1, r2
 8004ffe:	ea24 0402 	bic.w	r4, r4, r2
 8005002:	63c4      	str	r4, [r0, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005004:	69c1      	ldr	r1, [r0, #28]
 8005006:	ea21 0202 	bic.w	r2, r1, r2
 800500a:	61c2      	str	r2, [r0, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800500c:	4a15      	ldr	r2, [pc, #84]	; (8005064 <USB_DeactivateEndpoint+0xa4>)
 800500e:	f8d3 1900 	ldr.w	r1, [r3, #2304]	; 0x900
 8005012:	400a      	ands	r2, r1
 8005014:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
}
 8005018:	2000      	movs	r0, #0
 800501a:	bd10      	pop	{r4, pc}
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800501c:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	; 0xb00
 8005020:	2900      	cmp	r1, #0
 8005022:	da0b      	bge.n	800503c <USB_DeactivateEndpoint+0x7c>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005024:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	; 0xb00
 8005028:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 800502c:	f8c3 1b00 	str.w	r1, [r3, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005030:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	; 0xb00
 8005034:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8005038:	f8c3 1b00 	str.w	r1, [r3, #2816]	; 0xb00
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800503c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8005040:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8005042:	fa01 f202 	lsl.w	r2, r1, r2
 8005046:	ea24 0402 	bic.w	r4, r4, r2
 800504a:	63c4      	str	r4, [r0, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800504c:	69c1      	ldr	r1, [r0, #28]
 800504e:	ea21 0202 	bic.w	r2, r1, r2
 8005052:	61c2      	str	r2, [r0, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005054:	4a04      	ldr	r2, [pc, #16]	; (8005068 <USB_DeactivateEndpoint+0xa8>)
 8005056:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	; 0xb00
 800505a:	400a      	ands	r2, r1
 800505c:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8005060:	e7da      	b.n	8005018 <USB_DeactivateEndpoint+0x58>
 8005062:	bf00      	nop
 8005064:	ec337800 	.word	0xec337800
 8005068:	eff37800 	.word	0xeff37800

0800506c <USB_EP0StartXfer>:
  if (ep->is_in == 1U)
 800506c:	784b      	ldrb	r3, [r1, #1]
 800506e:	f8df c0ec 	ldr.w	ip, [pc, #236]	; 800515c <USB_EP0StartXfer+0xf0>
 8005072:	2b01      	cmp	r3, #1
{
 8005074:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t epnum = (uint32_t)ep->num;
 8005076:	780e      	ldrb	r6, [r1, #0]
  if (ep->is_in == 1U)
 8005078:	694d      	ldr	r5, [r1, #20]
 800507a:	eb00 1446 	add.w	r4, r0, r6, lsl #5
 800507e:	4f36      	ldr	r7, [pc, #216]	; (8005158 <USB_EP0StartXfer+0xec>)
 8005080:	d146      	bne.n	8005110 <USB_EP0StartXfer+0xa4>
    if (ep->xfer_len == 0U)
 8005082:	f504 6310 	add.w	r3, r4, #2304	; 0x900
 8005086:	b9bd      	cbnz	r5, 80050b8 <USB_EP0StartXfer+0x4c>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005088:	691d      	ldr	r5, [r3, #16]
 800508a:	402f      	ands	r7, r5
 800508c:	611f      	str	r7, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800508e:	691d      	ldr	r5, [r3, #16]
 8005090:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8005094:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005096:	691d      	ldr	r5, [r3, #16]
 8005098:	ea05 050c 	and.w	r5, r5, ip
    if (dma == 1U)
 800509c:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800509e:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 80050a0:	d123      	bne.n	80050ea <USB_EP0StartXfer+0x7e>
      if ((uint32_t)ep->dma_addr != 0U)
 80050a2:	690a      	ldr	r2, [r1, #16]
 80050a4:	b102      	cbz	r2, 80050a8 <USB_EP0StartXfer+0x3c>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80050a6:	615a      	str	r2, [r3, #20]
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80050a8:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 80050ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80050b0:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
}
 80050b4:	2000      	movs	r0, #0
 80050b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80050b8:	f8d3 e010 	ldr.w	lr, [r3, #16]
 80050bc:	ea0e 0c0c 	and.w	ip, lr, ip
 80050c0:	f8c3 c010 	str.w	ip, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80050c4:	f8d3 c010 	ldr.w	ip, [r3, #16]
 80050c8:	ea0c 0707 	and.w	r7, ip, r7
 80050cc:	611f      	str	r7, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 80050ce:	688f      	ldr	r7, [r1, #8]
 80050d0:	42af      	cmp	r7, r5
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80050d2:	691d      	ldr	r5, [r3, #16]
 80050d4:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
        ep->xfer_len = ep->maxpacket;
 80050d8:	bf38      	it	cc
 80050da:	614f      	strcc	r7, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80050dc:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80050de:	694d      	ldr	r5, [r1, #20]
 80050e0:	691f      	ldr	r7, [r3, #16]
 80050e2:	f3c5 0512 	ubfx	r5, r5, #0, #19
 80050e6:	433d      	orrs	r5, r7
 80050e8:	e7d8      	b.n	800509c <USB_EP0StartXfer+0x30>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80050ea:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 80050ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80050f2:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 80050f6:	694b      	ldr	r3, [r1, #20]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d0db      	beq.n	80050b4 <USB_EP0StartXfer+0x48>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80050fc:	f006 060f 	and.w	r6, r6, #15
 8005100:	2301      	movs	r3, #1
 8005102:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8005106:	40b3      	lsls	r3, r6
 8005108:	4313      	orrs	r3, r2
 800510a:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 800510e:	e7d1      	b.n	80050b4 <USB_EP0StartXfer+0x48>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005110:	f8d4 0b10 	ldr.w	r0, [r4, #2832]	; 0xb10
 8005114:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
 8005118:	ea00 000c 	and.w	r0, r0, ip
 800511c:	6118      	str	r0, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800511e:	6918      	ldr	r0, [r3, #16]
 8005120:	4038      	ands	r0, r7
 8005122:	6118      	str	r0, [r3, #16]
    if (ep->xfer_len > 0U)
 8005124:	6888      	ldr	r0, [r1, #8]
 8005126:	b105      	cbz	r5, 800512a <USB_EP0StartXfer+0xbe>
      ep->xfer_len = ep->maxpacket;
 8005128:	6148      	str	r0, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800512a:	691d      	ldr	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800512c:	f3c0 0012 	ubfx	r0, r0, #0, #19
    if (dma == 1U)
 8005130:	2a01      	cmp	r2, #1
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005132:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8005136:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005138:	691d      	ldr	r5, [r3, #16]
 800513a:	ea40 0005 	orr.w	r0, r0, r5
 800513e:	6118      	str	r0, [r3, #16]
    if (dma == 1U)
 8005140:	d102      	bne.n	8005148 <USB_EP0StartXfer+0xdc>
      if ((uint32_t)ep->xfer_buff != 0U)
 8005142:	68ca      	ldr	r2, [r1, #12]
 8005144:	b102      	cbz	r2, 8005148 <USB_EP0StartXfer+0xdc>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005146:	615a      	str	r2, [r3, #20]
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005148:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 800514c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005150:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
 8005154:	e7ae      	b.n	80050b4 <USB_EP0StartXfer+0x48>
 8005156:	bf00      	nop
 8005158:	e007ffff 	.word	0xe007ffff
 800515c:	fff80000 	.word	0xfff80000

08005160 <USB_WritePacket>:
{
 8005160:	b510      	push	{r4, lr}
 8005162:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 8005166:	b944      	cbnz	r4, 800517a <USB_WritePacket+0x1a>
    count32b = ((uint32_t)len + 3U) / 4U;
 8005168:	3303      	adds	r3, #3
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800516a:	3201      	adds	r2, #1
    count32b = ((uint32_t)len + 3U) / 4U;
 800516c:	089b      	lsrs	r3, r3, #2
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800516e:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 8005172:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    for (i = 0U; i < count32b; i++)
 8005176:	428b      	cmp	r3, r1
 8005178:	d101      	bne.n	800517e <USB_WritePacket+0x1e>
}
 800517a:	2000      	movs	r0, #0
 800517c:	bd10      	pop	{r4, pc}
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800517e:	f851 2b04 	ldr.w	r2, [r1], #4
 8005182:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 8005184:	e7f7      	b.n	8005176 <USB_WritePacket+0x16>
	...

08005188 <USB_EPStartXfer>:
{
 8005188:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (ep->is_in == 1U)
 800518c:	784d      	ldrb	r5, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800518e:	780f      	ldrb	r7, [r1, #0]
  if (ep->is_in == 1U)
 8005190:	2d01      	cmp	r5, #1
 8005192:	694b      	ldr	r3, [r1, #20]
 8005194:	eb00 1447 	add.w	r4, r0, r7, lsl #5
 8005198:	78ce      	ldrb	r6, [r1, #3]
 800519a:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 8005354 <USB_EPStartXfer+0x1cc>
 800519e:	f8df e1b8 	ldr.w	lr, [pc, #440]	; 8005358 <USB_EPStartXfer+0x1d0>
 80051a2:	f040 808e 	bne.w	80052c2 <USB_EPStartXfer+0x13a>
    if (ep->xfer_len == 0U)
 80051a6:	f504 6510 	add.w	r5, r4, #2304	; 0x900
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80051aa:	f8d5 8010 	ldr.w	r8, [r5, #16]
    if (ep->xfer_len == 0U)
 80051ae:	bb6b      	cbnz	r3, 800520c <USB_EPStartXfer+0x84>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80051b0:	ea08 0c0c 	and.w	ip, r8, ip
 80051b4:	f8c5 c010 	str.w	ip, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80051b8:	f8d5 c010 	ldr.w	ip, [r5, #16]
 80051bc:	f44c 2c00 	orr.w	ip, ip, #524288	; 0x80000
 80051c0:	f8c5 c010 	str.w	ip, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80051c4:	f8d5 c010 	ldr.w	ip, [r5, #16]
 80051c8:	ea0c 0e0e 	and.w	lr, ip, lr
 80051cc:	f8c5 e010 	str.w	lr, [r5, #16]
    if (dma == 1U)
 80051d0:	2a01      	cmp	r2, #1
 80051d2:	d14e      	bne.n	8005272 <USB_EPStartXfer+0xea>
      if ((uint32_t)ep->dma_addr != 0U)
 80051d4:	690b      	ldr	r3, [r1, #16]
 80051d6:	b103      	cbz	r3, 80051da <USB_EPStartXfer+0x52>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80051d8:	616b      	str	r3, [r5, #20]
      if (ep->type == EP_TYPE_ISOC)
 80051da:	2e01      	cmp	r6, #1
 80051dc:	d10c      	bne.n	80051f8 <USB_EPStartXfer+0x70>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80051de:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 80051e2:	f413 7f80 	tst.w	r3, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80051e6:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 80051ea:	bf0c      	ite	eq
 80051ec:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80051f0:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 80051f4:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80051f8:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 80051fc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005200:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
}
 8005204:	2000      	movs	r0, #0
 8005206:	b002      	add	sp, #8
 8005208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800520c:	ea08 0e0e 	and.w	lr, r8, lr
      if (ep->type == EP_TYPE_ISOC)
 8005210:	2e01      	cmp	r6, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005212:	f8c5 e010 	str.w	lr, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005216:	f8d5 e010 	ldr.w	lr, [r5, #16]
 800521a:	ea0e 0c0c 	and.w	ip, lr, ip
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800521e:	f8d1 e008 	ldr.w	lr, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005222:	f8c5 c010 	str.w	ip, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005226:	eb0e 0c03 	add.w	ip, lr, r3
 800522a:	f8d5 8010 	ldr.w	r8, [r5, #16]
 800522e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005232:	fbbc fefe 	udiv	lr, ip, lr
 8005236:	f8df c124 	ldr.w	ip, [pc, #292]	; 800535c <USB_EPStartXfer+0x1d4>
 800523a:	ea0c 4cce 	and.w	ip, ip, lr, lsl #19
 800523e:	ea4c 0c08 	orr.w	ip, ip, r8
 8005242:	f8c5 c010 	str.w	ip, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005246:	f3c3 0c12 	ubfx	ip, r3, #0, #19
 800524a:	f8d5 e010 	ldr.w	lr, [r5, #16]
 800524e:	ea4c 0c0e 	orr.w	ip, ip, lr
 8005252:	f8c5 c010 	str.w	ip, [r5, #16]
      if (ep->type == EP_TYPE_ISOC)
 8005256:	d1bb      	bne.n	80051d0 <USB_EPStartXfer+0x48>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005258:	f8d5 c010 	ldr.w	ip, [r5, #16]
 800525c:	f02c 4cc0 	bic.w	ip, ip, #1610612736	; 0x60000000
 8005260:	f8c5 c010 	str.w	ip, [r5, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005264:	f8d5 c010 	ldr.w	ip, [r5, #16]
 8005268:	f04c 5c00 	orr.w	ip, ip, #536870912	; 0x20000000
 800526c:	f8c5 c010 	str.w	ip, [r5, #16]
 8005270:	e7ae      	b.n	80051d0 <USB_EPStartXfer+0x48>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005272:	f8d4 5900 	ldr.w	r5, [r4, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8005276:	2e01      	cmp	r6, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005278:	f045 4504 	orr.w	r5, r5, #2214592512	; 0x84000000
 800527c:	f8c4 5900 	str.w	r5, [r4, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8005280:	d00b      	beq.n	800529a <USB_EPStartXfer+0x112>
        if (ep->xfer_len > 0U)
 8005282:	2b00      	cmp	r3, #0
 8005284:	d0be      	beq.n	8005204 <USB_EPStartXfer+0x7c>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005286:	f007 020f 	and.w	r2, r7, #15
 800528a:	2701      	movs	r7, #1
 800528c:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 8005290:	4097      	lsls	r7, r2
 8005292:	431f      	orrs	r7, r3
 8005294:	f8c0 7834 	str.w	r7, [r0, #2100]	; 0x834
 8005298:	e7b4      	b.n	8005204 <USB_EPStartXfer+0x7c>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800529a:	f8d0 5808 	ldr.w	r5, [r0, #2056]	; 0x808
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800529e:	b29b      	uxth	r3, r3
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80052a0:	f415 7f80 	tst.w	r5, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80052a4:	f8d4 5900 	ldr.w	r5, [r4, #2304]	; 0x900
 80052a8:	bf0c      	ite	eq
 80052aa:	f045 5500 	orreq.w	r5, r5, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80052ae:	f045 5580 	orrne.w	r5, r5, #268435456	; 0x10000000
 80052b2:	f8c4 5900 	str.w	r5, [r4, #2304]	; 0x900
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80052b6:	9200      	str	r2, [sp, #0]
 80052b8:	463a      	mov	r2, r7
 80052ba:	68c9      	ldr	r1, [r1, #12]
 80052bc:	f7ff ff50 	bl	8005160 <USB_WritePacket>
 80052c0:	e7a0      	b.n	8005204 <USB_EPStartXfer+0x7c>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80052c2:	f8d4 5b10 	ldr.w	r5, [r4, #2832]	; 0xb10
 80052c6:	f504 6730 	add.w	r7, r4, #2816	; 0xb00
 80052ca:	ea05 050e 	and.w	r5, r5, lr
 80052ce:	613d      	str	r5, [r7, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80052d0:	693d      	ldr	r5, [r7, #16]
 80052d2:	ea05 050c 	and.w	r5, r5, ip
 80052d6:	613d      	str	r5, [r7, #16]
    if (ep->xfer_len == 0U)
 80052d8:	688d      	ldr	r5, [r1, #8]
 80052da:	bb1b      	cbnz	r3, 8005324 <USB_EPStartXfer+0x19c>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	f3c5 0512 	ubfx	r5, r5, #0, #19
 80052e2:	431d      	orrs	r5, r3
 80052e4:	613d      	str	r5, [r7, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    if (dma == 1U)
 80052ec:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80052ee:	613b      	str	r3, [r7, #16]
    if (dma == 1U)
 80052f0:	d102      	bne.n	80052f8 <USB_EPStartXfer+0x170>
      if ((uint32_t)ep->xfer_buff != 0U)
 80052f2:	68cb      	ldr	r3, [r1, #12]
 80052f4:	b103      	cbz	r3, 80052f8 <USB_EPStartXfer+0x170>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80052f6:	617b      	str	r3, [r7, #20]
    if (ep->type == EP_TYPE_ISOC)
 80052f8:	2e01      	cmp	r6, #1
 80052fa:	d10c      	bne.n	8005316 <USB_EPStartXfer+0x18e>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80052fc:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8005300:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005304:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 8005308:	bf0c      	ite	eq
 800530a:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800530e:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8005312:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005316:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 800531a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800531e:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
 8005322:	e76f      	b.n	8005204 <USB_EPStartXfer+0x7c>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005324:	442b      	add	r3, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005326:	f8df c034 	ldr.w	ip, [pc, #52]	; 800535c <USB_EPStartXfer+0x1d4>
 800532a:	f8d7 e010 	ldr.w	lr, [r7, #16]
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800532e:	3b01      	subs	r3, #1
 8005330:	fbb3 f3f5 	udiv	r3, r3, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005334:	ea0c 4cc3 	and.w	ip, ip, r3, lsl #19
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005338:	b29b      	uxth	r3, r3
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800533a:	ea4c 0c0e 	orr.w	ip, ip, lr
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800533e:	436b      	muls	r3, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005340:	f8c7 c010 	str.w	ip, [r7, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005344:	f8d7 c010 	ldr.w	ip, [r7, #16]
 8005348:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800534c:	ea43 030c 	orr.w	r3, r3, ip
 8005350:	e7cc      	b.n	80052ec <USB_EPStartXfer+0x164>
 8005352:	bf00      	nop
 8005354:	e007ffff 	.word	0xe007ffff
 8005358:	fff80000 	.word	0xfff80000
 800535c:	1ff80000 	.word	0x1ff80000

08005360 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005360:	3203      	adds	r2, #3
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005362:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005366:	0892      	lsrs	r2, r2, #2
 8005368:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  for (i = 0U; i < count32b; i++)
 800536c:	4291      	cmp	r1, r2
 800536e:	d101      	bne.n	8005374 <USB_ReadPacket+0x14>
}
 8005370:	4608      	mov	r0, r1
 8005372:	4770      	bx	lr
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005374:	6803      	ldr	r3, [r0, #0]
 8005376:	f841 3b04 	str.w	r3, [r1], #4
  for (i = 0U; i < count32b; i++)
 800537a:	e7f7      	b.n	800536c <USB_ReadPacket+0xc>

0800537c <USB_EPSetStall>:
  if (ep->is_in == 1U)
 800537c:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800537e:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8005380:	2a01      	cmp	r2, #1
 8005382:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8005386:	d112      	bne.n	80053ae <USB_EPSetStall+0x32>
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005388:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800538c:	2a00      	cmp	r2, #0
 800538e:	db06      	blt.n	800539e <USB_EPSetStall+0x22>
 8005390:	b12b      	cbz	r3, 800539e <USB_EPSetStall+0x22>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005392:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8005396:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800539a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800539e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80053a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80053a6:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 80053aa:	2000      	movs	r0, #0
 80053ac:	4770      	bx	lr
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80053ae:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 80053b2:	2a00      	cmp	r2, #0
 80053b4:	db06      	blt.n	80053c4 <USB_EPSetStall+0x48>
 80053b6:	b12b      	cbz	r3, 80053c4 <USB_EPSetStall+0x48>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80053b8:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80053bc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80053c0:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80053c4:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80053c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80053cc:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 80053d0:	e7eb      	b.n	80053aa <USB_EPSetStall+0x2e>

080053d2 <USB_EPClearStall>:
  if (ep->is_in == 1U)
 80053d2:	780b      	ldrb	r3, [r1, #0]
 80053d4:	784a      	ldrb	r2, [r1, #1]
 80053d6:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80053da:	78cb      	ldrb	r3, [r1, #3]
 80053dc:	2a01      	cmp	r2, #1
 80053de:	f1a3 0302 	sub.w	r3, r3, #2
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	d10f      	bne.n	8005406 <USB_EPClearStall+0x34>
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80053e6:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80053ea:	2b01      	cmp	r3, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80053ec:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80053f0:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80053f4:	d805      	bhi.n	8005402 <USB_EPClearStall+0x30>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80053f6:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80053fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053fe:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8005402:	2000      	movs	r0, #0
 8005404:	4770      	bx	lr
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005406:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800540a:	2b01      	cmp	r3, #1
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800540c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8005410:	f8c0 2b00 	str.w	r2, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005414:	d8f5      	bhi.n	8005402 <USB_EPClearStall+0x30>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005416:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800541a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800541e:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8005422:	e7ee      	b.n	8005402 <USB_EPClearStall+0x30>

08005424 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005424:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005428:	0109      	lsls	r1, r1, #4
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800542a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800542e:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005432:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005436:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800543a:	4319      	orrs	r1, r3
 800543c:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8005440:	2000      	movs	r0, #0
 8005442:	4770      	bx	lr

08005444 <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005444:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 8005448:	f023 0303 	bic.w	r3, r3, #3
 800544c:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005450:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8005454:	f023 0302 	bic.w	r3, r3, #2
 8005458:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 800545c:	2000      	movs	r0, #0
 800545e:	4770      	bx	lr

08005460 <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005460:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 8005464:	f023 0303 	bic.w	r3, r3, #3
 8005468:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800546c:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8005470:	f043 0302 	orr.w	r3, r3, #2
 8005474:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8005478:	2000      	movs	r0, #0
 800547a:	4770      	bx	lr

0800547c <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 800547c:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800547e:	6980      	ldr	r0, [r0, #24]
}
 8005480:	4010      	ands	r0, r2
 8005482:	4770      	bx	lr

08005484 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8005484:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8005488:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800548c:	69c0      	ldr	r0, [r0, #28]
 800548e:	4018      	ands	r0, r3
}
 8005490:	0c00      	lsrs	r0, r0, #16
 8005492:	4770      	bx	lr

08005494 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8005494:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8005498:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800549c:	69c0      	ldr	r0, [r0, #28]
 800549e:	4018      	ands	r0, r3
}
 80054a0:	b280      	uxth	r0, r0
 80054a2:	4770      	bx	lr

080054a4 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80054a4:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80054a8:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80054ac:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80054b0:	6940      	ldr	r0, [r0, #20]
}
 80054b2:	4010      	ands	r0, r2
 80054b4:	4770      	bx	lr

080054b6 <USB_ReadDevInEPInterrupt>:
{
 80054b6:	b510      	push	{r4, lr}
  msk = USBx_DEVICE->DIEPMSK;
 80054b8:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 80054bc:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80054c0:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80054c4:	f001 010f 	and.w	r1, r1, #15
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80054c8:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80054cc:	40cb      	lsrs	r3, r1
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80054ce:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80054d0:	01db      	lsls	r3, r3, #7
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	4323      	orrs	r3, r4
}
 80054d6:	4018      	ands	r0, r3
 80054d8:	bd10      	pop	{r4, pc}

080054da <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 80054da:	6940      	ldr	r0, [r0, #20]
}
 80054dc:	f000 0001 	and.w	r0, r0, #1
 80054e0:	4770      	bx	lr

080054e2 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80054e2:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80054e6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80054ea:	f023 0307 	bic.w	r3, r3, #7
 80054ee:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80054f2:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80054f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054fa:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 80054fe:	2000      	movs	r0, #0
 8005500:	4770      	bx	lr
	...

08005504 <USB_EP0_OutStart>:
{
 8005504:	b530      	push	{r4, r5, lr}
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005506:	6c05      	ldr	r5, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005508:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 800550c:	4c0f      	ldr	r4, [pc, #60]	; (800554c <USB_EP0_OutStart+0x48>)
 800550e:	42a5      	cmp	r5, r4
 8005510:	d903      	bls.n	800551a <USB_EP0_OutStart+0x16>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005512:	f8d0 4b00 	ldr.w	r4, [r0, #2816]	; 0xb00
 8005516:	2c00      	cmp	r4, #0
 8005518:	db16      	blt.n	8005548 <USB_EP0_OutStart+0x44>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800551a:	2400      	movs	r4, #0
  if (dma == 1U)
 800551c:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800551e:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005520:	691c      	ldr	r4, [r3, #16]
 8005522:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8005526:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005528:	691c      	ldr	r4, [r3, #16]
 800552a:	f044 0418 	orr.w	r4, r4, #24
 800552e:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005530:	691c      	ldr	r4, [r3, #16]
 8005532:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 8005536:	611c      	str	r4, [r3, #16]
  if (dma == 1U)
 8005538:	d106      	bne.n	8005548 <USB_EP0_OutStart+0x44>
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800553a:	615a      	str	r2, [r3, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800553c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8005540:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005544:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8005548:	2000      	movs	r0, #0
 800554a:	bd30      	pop	{r4, r5, pc}
 800554c:	4f54300a 	.word	0x4f54300a

08005550 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005550:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
{
 8005554:	b510      	push	{r4, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005556:	b16b      	cbz	r3, 8005574 <USBD_CDC_EP0_RxReady+0x24>
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005558:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800555c:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8005560:	28ff      	cmp	r0, #255	; 0xff
 8005562:	d007      	beq.n	8005574 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	4621      	mov	r1, r4
 8005568:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800556c:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800556e:	23ff      	movs	r3, #255	; 0xff
 8005570:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
}
 8005574:	2000      	movs	r0, #0
 8005576:	bd10      	pop	{r4, pc}

08005578 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005578:	2343      	movs	r3, #67	; 0x43
 800557a:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
}
 800557c:	4800      	ldr	r0, [pc, #0]	; (8005580 <USBD_CDC_GetFSCfgDesc+0x8>)
 800557e:	4770      	bx	lr
 8005580:	20000044 	.word	0x20000044

08005584 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005584:	2343      	movs	r3, #67	; 0x43
 8005586:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
}
 8005588:	4800      	ldr	r0, [pc, #0]	; (800558c <USBD_CDC_GetHSCfgDesc+0x8>)
 800558a:	4770      	bx	lr
 800558c:	20000088 	.word	0x20000088

08005590 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005590:	2343      	movs	r3, #67	; 0x43
 8005592:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
}
 8005594:	4800      	ldr	r0, [pc, #0]	; (8005598 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8005596:	4770      	bx	lr
 8005598:	200000d8 	.word	0x200000d8

0800559c <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800559c:	230a      	movs	r3, #10
 800559e:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 80055a0:	4800      	ldr	r0, [pc, #0]	; (80055a4 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 80055a2:	4770      	bx	lr
 80055a4:	200000cc 	.word	0x200000cc

080055a8 <USBD_CDC_DataOut>:
{
 80055a8:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80055aa:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc
{
 80055ae:	4605      	mov	r5, r0
  if (pdev->pClassData == NULL)
 80055b0:	b16c      	cbz	r4, 80055ce <USBD_CDC_DataOut+0x26>
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80055b2:	f001 f83b 	bl	800662c <USBD_LL_GetRxDataSize>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80055b6:	f8d5 32c0 	ldr.w	r3, [r5, #704]	; 0x2c0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80055ba:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80055be:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 80055c8:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 80055ca:	2000      	movs	r0, #0
}
 80055cc:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 80055ce:	2003      	movs	r0, #3
 80055d0:	e7fc      	b.n	80055cc <USBD_CDC_DataOut+0x24>

080055d2 <USBD_CDC_DataIn>:
{
 80055d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pdev->pClassData == NULL)
 80055d4:	f8d0 62bc 	ldr.w	r6, [r0, #700]	; 0x2bc
{
 80055d8:	4605      	mov	r5, r0
 80055da:	460a      	mov	r2, r1
  if (pdev->pClassData == NULL)
 80055dc:	b326      	cbz	r6, 8005628 <USBD_CDC_DataIn+0x56>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80055de:	2714      	movs	r7, #20
 80055e0:	fb07 0701 	mla	r7, r7, r1, r0
 80055e4:	69bb      	ldr	r3, [r7, #24]
 80055e6:	b19b      	cbz	r3, 8005610 <USBD_CDC_DataIn+0x3e>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80055e8:	f04f 0c1c 	mov.w	ip, #28
 80055ec:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
 80055f0:	fb0c 4401 	mla	r4, ip, r1, r4
 80055f4:	f8d4 c044 	ldr.w	ip, [r4, #68]	; 0x44
 80055f8:	fbb3 f4fc 	udiv	r4, r3, ip
 80055fc:	fb0c 3414 	mls	r4, ip, r4, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005600:	b934      	cbnz	r4, 8005610 <USBD_CDC_DataIn+0x3e>
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005602:	4623      	mov	r3, r4
 8005604:	4622      	mov	r2, r4
    pdev->ep_in[epnum].total_length = 0U;
 8005606:	61bc      	str	r4, [r7, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005608:	f000 fff4 	bl	80065f4 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 800560c:	4620      	mov	r0, r4
}
 800560e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hcdc->TxState = 0U;
 8005610:	2400      	movs	r4, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005612:	f8d5 32c0 	ldr.w	r3, [r5, #704]	; 0x2c0
 8005616:	f506 7104 	add.w	r1, r6, #528	; 0x210
 800561a:	f8d6 0208 	ldr.w	r0, [r6, #520]	; 0x208
 800561e:	691b      	ldr	r3, [r3, #16]
    hcdc->TxState = 0U;
 8005620:	f8c6 4214 	str.w	r4, [r6, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005624:	4798      	blx	r3
 8005626:	e7f1      	b.n	800560c <USBD_CDC_DataIn+0x3a>
    return (uint8_t)USBD_FAIL;
 8005628:	2003      	movs	r0, #3
 800562a:	e7f0      	b.n	800560e <USBD_CDC_DataIn+0x3c>

0800562c <USBD_CDC_Setup>:
{
 800562c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005630:	780a      	ldrb	r2, [r1, #0]
  uint8_t ifalt = 0U;
 8005632:	f04f 0800 	mov.w	r8, #0
{
 8005636:	4605      	mov	r5, r0
 8005638:	460e      	mov	r6, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800563a:	f012 0460 	ands.w	r4, r2, #96	; 0x60
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800563e:	f8d0 72bc 	ldr.w	r7, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 8005642:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 8005646:	f8ad 8006 	strh.w	r8, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800564a:	d028      	beq.n	800569e <USBD_CDC_Setup+0x72>
 800564c:	2c20      	cmp	r4, #32
 800564e:	d15e      	bne.n	800570e <USBD_CDC_Setup+0xe2>
    if (req->wLength != 0U)
 8005650:	88cc      	ldrh	r4, [r1, #6]
 8005652:	784b      	ldrb	r3, [r1, #1]
 8005654:	b1e4      	cbz	r4, 8005690 <USBD_CDC_Setup+0x64>
      if ((req->bmRequest & 0x80U) != 0U)
 8005656:	0612      	lsls	r2, r2, #24
 8005658:	d511      	bpl.n	800567e <USBD_CDC_Setup+0x52>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800565a:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
 800565e:	4639      	mov	r1, r7
 8005660:	4618      	mov	r0, r3
 8005662:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8005666:	4622      	mov	r2, r4
 8005668:	47c8      	blx	r9
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800566a:	88f2      	ldrh	r2, [r6, #6]
 800566c:	4639      	mov	r1, r7
 800566e:	4628      	mov	r0, r5
 8005670:	f000 fca0 	bl	8005fb4 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8005674:	4644      	mov	r4, r8
}
 8005676:	4620      	mov	r0, r4
 8005678:	b003      	add	sp, #12
 800567a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800567e:	4622      	mov	r2, r4
 8005680:	4639      	mov	r1, r7
        hcdc->CmdOpCode = req->bRequest;
 8005682:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8005686:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800568a:	f000 fca8 	bl	8005fde <USBD_CtlPrepareRx>
 800568e:	e7f1      	b.n	8005674 <USBD_CDC_Setup+0x48>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005690:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
 8005694:	4618      	mov	r0, r3
 8005696:	6895      	ldr	r5, [r2, #8]
 8005698:	4622      	mov	r2, r4
 800569a:	47a8      	blx	r5
 800569c:	e7eb      	b.n	8005676 <USBD_CDC_Setup+0x4a>
    switch (req->bRequest)
 800569e:	784f      	ldrb	r7, [r1, #1]
 80056a0:	2f0b      	cmp	r7, #11
 80056a2:	d834      	bhi.n	800570e <USBD_CDC_Setup+0xe2>
 80056a4:	a301      	add	r3, pc, #4	; (adr r3, 80056ac <USBD_CDC_Setup+0x80>)
 80056a6:	f853 f027 	ldr.w	pc, [r3, r7, lsl #2]
 80056aa:	bf00      	nop
 80056ac:	080056dd 	.word	0x080056dd
 80056b0:	08005677 	.word	0x08005677
 80056b4:	0800570f 	.word	0x0800570f
 80056b8:	0800570f 	.word	0x0800570f
 80056bc:	0800570f 	.word	0x0800570f
 80056c0:	0800570f 	.word	0x0800570f
 80056c4:	0800570f 	.word	0x0800570f
 80056c8:	0800570f 	.word	0x0800570f
 80056cc:	0800570f 	.word	0x0800570f
 80056d0:	0800570f 	.word	0x0800570f
 80056d4:	080056f3 	.word	0x080056f3
 80056d8:	08005707 	.word	0x08005707
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056dc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80056e0:	2b03      	cmp	r3, #3
 80056e2:	d114      	bne.n	800570e <USBD_CDC_Setup+0xe2>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80056e4:	2202      	movs	r2, #2
 80056e6:	f10d 0106 	add.w	r1, sp, #6
  USBD_StatusTypeDef ret = USBD_OK;
 80056ea:	463c      	mov	r4, r7
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80056ec:	f000 fc62 	bl	8005fb4 <USBD_CtlSendData>
 80056f0:	e7c1      	b.n	8005676 <USBD_CDC_Setup+0x4a>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056f2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80056f6:	2b03      	cmp	r3, #3
 80056f8:	d109      	bne.n	800570e <USBD_CDC_Setup+0xe2>
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80056fa:	2201      	movs	r2, #1
 80056fc:	f10d 0105 	add.w	r1, sp, #5
 8005700:	f000 fc58 	bl	8005fb4 <USBD_CtlSendData>
 8005704:	e7b7      	b.n	8005676 <USBD_CDC_Setup+0x4a>
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005706:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800570a:	2b03      	cmp	r3, #3
 800570c:	d0b3      	beq.n	8005676 <USBD_CDC_Setup+0x4a>
      USBD_CtlError(pdev, req);
 800570e:	4631      	mov	r1, r6
 8005710:	4628      	mov	r0, r5
      ret = USBD_FAIL;
 8005712:	2403      	movs	r4, #3
      USBD_CtlError(pdev, req);
 8005714:	f000 fc27 	bl	8005f66 <USBD_CtlError>
      break;
 8005718:	e7ad      	b.n	8005676 <USBD_CDC_Setup+0x4a>
 800571a:	bf00      	nop

0800571c <USBD_CDC_DeInit>:
{
 800571c:	b538      	push	{r3, r4, r5, lr}
 800571e:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005720:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005722:	2181      	movs	r1, #129	; 0x81
 8005724:	f000 ff1a 	bl	800655c <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005728:	2101      	movs	r1, #1
 800572a:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800572c:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800572e:	f000 ff15 	bl	800655c <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005732:	2182      	movs	r1, #130	; 0x82
 8005734:	4620      	mov	r0, r4
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005736:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800573a:	f000 ff0f 	bl	800655c <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 800573e:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005742:	64e5      	str	r5, [r4, #76]	; 0x4c
  if (pdev->pClassData != NULL)
 8005744:	b14b      	cbz	r3, 800575a <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005746:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800574e:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 8005752:	f000 fffd 	bl	8006750 <free>
    pdev->pClassData = NULL;
 8005756:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 800575a:	2000      	movs	r0, #0
 800575c:	bd38      	pop	{r3, r4, r5, pc}

0800575e <USBD_CDC_Init>:
{
 800575e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005760:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005762:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005766:	f000 ffeb 	bl	8006740 <malloc>
  if (hcdc == NULL)
 800576a:	4605      	mov	r5, r0
    pdev->pClassData = NULL;
 800576c:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (hcdc == NULL)
 8005770:	b910      	cbnz	r0, 8005778 <USBD_CDC_Init+0x1a>
    return (uint8_t)USBD_EMEM;
 8005772:	2602      	movs	r6, #2
}
 8005774:	4630      	mov	r0, r6
 8005776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005778:	7c23      	ldrb	r3, [r4, #16]
 800577a:	bb8b      	cbnz	r3, 80057e0 <USBD_CDC_Init+0x82>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800577c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005780:	2202      	movs	r2, #2
 8005782:	2181      	movs	r1, #129	; 0x81
 8005784:	4620      	mov	r0, r4
 8005786:	f000 fed9 	bl	800653c <USBD_LL_OpenEP>
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800578a:	2601      	movs	r6, #1
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800578c:	f44f 7300 	mov.w	r3, #512	; 0x200
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005790:	8726      	strh	r6, [r4, #56]	; 0x38
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005792:	4631      	mov	r1, r6
 8005794:	2202      	movs	r2, #2
 8005796:	4620      	mov	r0, r4
  hcdc->TxState = 0U;
 8005798:	2700      	movs	r7, #0
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800579a:	f000 fecf 	bl	800653c <USBD_LL_OpenEP>
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800579e:	2310      	movs	r3, #16
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80057a0:	2203      	movs	r2, #3
 80057a2:	2182      	movs	r1, #130	; 0x82
      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80057a4:	f8a4 6178 	strh.w	r6, [r4, #376]	; 0x178
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80057a8:	4620      	mov	r0, r4
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80057aa:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80057ae:	2308      	movs	r3, #8
 80057b0:	f000 fec4 	bl	800653c <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80057b4:	2101      	movs	r1, #1
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80057b6:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80057ba:	f8a4 104c 	strh.w	r1, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4798      	blx	r3
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80057c2:	7c26      	ldrb	r6, [r4, #16]
  hcdc->TxState = 0U;
 80057c4:	f8c5 7214 	str.w	r7, [r5, #532]	; 0x214
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80057c8:	2101      	movs	r1, #1
  hcdc->RxState = 0U;
 80057ca:	f8c5 7218 	str.w	r7, [r5, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80057ce:	b98e      	cbnz	r6, 80057f4 <USBD_CDC_Init+0x96>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80057d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057d4:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 80057d8:	4620      	mov	r0, r4
 80057da:	f000 ff19 	bl	8006610 <USBD_LL_PrepareReceive>
 80057de:	e7c9      	b.n	8005774 <USBD_CDC_Init+0x16>
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80057e0:	2601      	movs	r6, #1
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80057e2:	2340      	movs	r3, #64	; 0x40
 80057e4:	2202      	movs	r2, #2
 80057e6:	2181      	movs	r1, #129	; 0x81
 80057e8:	4620      	mov	r0, r4
 80057ea:	f000 fea7 	bl	800653c <USBD_LL_OpenEP>
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80057ee:	2340      	movs	r3, #64	; 0x40
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80057f0:	8726      	strh	r6, [r4, #56]	; 0x38
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80057f2:	e7ce      	b.n	8005792 <USBD_CDC_Init+0x34>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80057f4:	2340      	movs	r3, #64	; 0x40
 80057f6:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 80057fa:	4620      	mov	r0, r4
  return (uint8_t)USBD_OK;
 80057fc:	463e      	mov	r6, r7
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80057fe:	f000 ff07 	bl	8006610 <USBD_LL_PrepareReceive>
 8005802:	e7b7      	b.n	8005774 <USBD_CDC_Init+0x16>

08005804 <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 8005804:	b119      	cbz	r1, 800580e <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 8005806:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800580a:	2000      	movs	r0, #0
 800580c:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800580e:	2003      	movs	r0, #3
}
 8005810:	4770      	bx	lr

08005812 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005812:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return (uint8_t)USBD_OK;
}
 8005816:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8005818:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800581c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8005820:	4770      	bx	lr

08005822 <USBD_CDC_SetRxBuffer>:
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8005822:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  return (uint8_t)USBD_OK;
}
 8005826:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8005828:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 800582c:	4770      	bx	lr

0800582e <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800582e:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
{
 8005832:	b510      	push	{r4, lr}
  USBD_StatusTypeDef ret = USBD_BUSY;

  if (pdev->pClassData == NULL)
 8005834:	b17a      	cbz	r2, 8005856 <USBD_CDC_TransmitPacket+0x28>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 8005836:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 800583a:	2301      	movs	r3, #1
 800583c:	b96c      	cbnz	r4, 800585a <USBD_CDC_TransmitPacket+0x2c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800583e:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8005842:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005844:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8005848:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800584c:	62c3      	str	r3, [r0, #44]	; 0x2c
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800584e:	f000 fed1 	bl	80065f4 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005852:	4620      	mov	r0, r4
  }

  return (uint8_t)ret;
}
 8005854:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 8005856:	2003      	movs	r0, #3
 8005858:	e7fc      	b.n	8005854 <USBD_CDC_TransmitPacket+0x26>
  USBD_StatusTypeDef ret = USBD_BUSY;
 800585a:	4618      	mov	r0, r3
 800585c:	e7fa      	b.n	8005854 <USBD_CDC_TransmitPacket+0x26>

0800585e <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800585e:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
{
 8005862:	b510      	push	{r4, lr}

  if (pdev->pClassData == NULL)
 8005864:	b182      	cbz	r2, 8005888 <USBD_CDC_ReceivePacket+0x2a>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005866:	7c04      	ldrb	r4, [r0, #16]
 8005868:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800586c:	b934      	cbnz	r4, 800587c <USBD_CDC_ReceivePacket+0x1e>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800586e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005872:	2101      	movs	r1, #1
 8005874:	f000 fecc 	bl	8006610 <USBD_LL_PrepareReceive>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
}
 8005878:	4620      	mov	r0, r4
 800587a:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800587c:	2340      	movs	r3, #64	; 0x40
 800587e:	2101      	movs	r1, #1
  return (uint8_t)USBD_OK;
 8005880:	2400      	movs	r4, #0
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005882:	f000 fec5 	bl	8006610 <USBD_LL_PrepareReceive>
 8005886:	e7f7      	b.n	8005878 <USBD_CDC_ReceivePacket+0x1a>
    return (uint8_t)USBD_FAIL;
 8005888:	2403      	movs	r4, #3
 800588a:	e7f5      	b.n	8005878 <USBD_CDC_ReceivePacket+0x1a>

0800588c <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800588c:	b1a0      	cbz	r0, 80058b8 <USBD_Init+0x2c>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800588e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8005892:	b113      	cbz	r3, 800589a <USBD_Init+0xe>
  {
    pdev->pClass = NULL;
 8005894:	2300      	movs	r3, #0
 8005896:	f8c0 32b8 	str.w	r3, [r0, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800589a:	f8d0 32cc 	ldr.w	r3, [r0, #716]	; 0x2cc
 800589e:	b113      	cbz	r3, 80058a6 <USBD_Init+0x1a>
  {
    pdev->pConfDesc = NULL;
 80058a0:	2300      	movs	r3, #0
 80058a2:	f8c0 32cc 	str.w	r3, [r0, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80058a6:	b109      	cbz	r1, 80058ac <USBD_Init+0x20>
  {
    pdev->pDesc = pdesc;
 80058a8:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80058ac:	2301      	movs	r3, #1
  pdev->id = id;
 80058ae:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 80058b0:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80058b4:	f000 be04 	b.w	80064c0 <USBD_LL_Init>

  return ret;
}
 80058b8:	2003      	movs	r0, #3
 80058ba:	4770      	bx	lr

080058bc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80058bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint16_t len = 0U;
 80058be:	2400      	movs	r4, #0
{
 80058c0:	4605      	mov	r5, r0
  uint16_t len = 0U;
 80058c2:	f8ad 4006 	strh.w	r4, [sp, #6]

  if (pclass == NULL)
 80058c6:	b151      	cbz	r1, 80058de <USBD_RegisterClass+0x22>
#endif
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80058c8:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80058cc:	f10d 0006 	add.w	r0, sp, #6
 80058d0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80058d2:	4798      	blx	r3
 80058d4:	f8c5 02cc 	str.w	r0, [r5, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80058d8:	4620      	mov	r0, r4
}
 80058da:	b003      	add	sp, #12
 80058dc:	bd30      	pop	{r4, r5, pc}
    return USBD_FAIL;
 80058de:	2003      	movs	r0, #3
 80058e0:	e7fb      	b.n	80058da <USBD_RegisterClass+0x1e>

080058e2 <USBD_Start>:
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80058e2:	f000 be1d 	b.w	8006520 <USBD_LL_Start>

080058e6 <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 80058e6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80058ea:	b10b      	cbz	r3, 80058f0 <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4718      	bx	r3
  }

  return ret;
}
 80058f0:	2003      	movs	r0, #3
 80058f2:	4770      	bx	lr

080058f4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80058f4:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80058f6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80058fa:	b10b      	cbz	r3, 8005900 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	4798      	blx	r3
  }

  return USBD_OK;
}
 8005900:	2000      	movs	r0, #0
 8005902:	bd08      	pop	{r3, pc}

08005904 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005904:	b538      	push	{r3, r4, r5, lr}
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005906:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
{
 800590a:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800590c:	4628      	mov	r0, r5
 800590e:	f000 fb16 	bl	8005f3e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005912:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8005914:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
  pdev->ep0_state = USBD_EP0_SETUP;
 8005918:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 800591c:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 8005920:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 8005924:	f001 031f 	and.w	r3, r1, #31
 8005928:	2b01      	cmp	r3, #1
 800592a:	d008      	beq.n	800593e <USBD_LL_SetupStage+0x3a>
 800592c:	2b02      	cmp	r3, #2
 800592e:	d00c      	beq.n	800594a <USBD_LL_SetupStage+0x46>
 8005930:	b98b      	cbnz	r3, 8005956 <USBD_LL_SetupStage+0x52>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005932:	4629      	mov	r1, r5
 8005934:	4620      	mov	r0, r4
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return ret;
}
 8005936:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800593a:	f000 b8fb 	b.w	8005b34 <USBD_StdDevReq>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800593e:	4629      	mov	r1, r5
 8005940:	4620      	mov	r0, r4
}
 8005942:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005946:	f000 ba3f 	b.w	8005dc8 <USBD_StdItfReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800594a:	4629      	mov	r1, r5
 800594c:	4620      	mov	r0, r4
}
 800594e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005952:	f000 ba5f 	b.w	8005e14 <USBD_StdEPReq>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005956:	4620      	mov	r0, r4
 8005958:	f001 0180 	and.w	r1, r1, #128	; 0x80
}
 800595c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005960:	f000 be0a 	b.w	8006578 <USBD_LL_StallEP>

08005964 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005964:	b570      	push	{r4, r5, r6, lr}
 8005966:	4604      	mov	r4, r0
 8005968:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800596a:	460d      	mov	r5, r1
 800596c:	b9f9      	cbnz	r1, 80059ae <USBD_LL_DataOutStage+0x4a>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800596e:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8005972:	2b03      	cmp	r3, #3
 8005974:	d10c      	bne.n	8005990 <USBD_LL_DataOutStage+0x2c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005976:	e9d0 3257 	ldrd	r3, r2, [r0, #348]	; 0x15c
 800597a:	4293      	cmp	r3, r2
 800597c:	d90a      	bls.n	8005994 <USBD_LL_DataOutStage+0x30>
      {
        pep->rem_length -= pep->maxpacket;
 800597e:	1a9b      	subs	r3, r3, r2

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005980:	4631      	mov	r1, r6
 8005982:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 8005984:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005988:	bf28      	it	cs
 800598a:	461a      	movcs	r2, r3
 800598c:	f000 fb34 	bl	8005ff8 <USBD_CtlContinueRx>
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 8005990:	4628      	mov	r0, r5
 8005992:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005994:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	b123      	cbz	r3, 80059a6 <USBD_LL_DataOutStage+0x42>
 800599c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80059a0:	2a03      	cmp	r2, #3
 80059a2:	d100      	bne.n	80059a6 <USBD_LL_DataOutStage+0x42>
          pdev->pClass->EP0_RxReady(pdev);
 80059a4:	4798      	blx	r3
        (void)USBD_CtlSendStatus(pdev);
 80059a6:	4620      	mov	r0, r4
 80059a8:	f000 fb2e 	bl	8006008 <USBD_CtlSendStatus>
 80059ac:	e7f0      	b.n	8005990 <USBD_LL_DataOutStage+0x2c>
  else if ((pdev->pClass->DataOut != NULL) &&
 80059ae:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80059b2:	699b      	ldr	r3, [r3, #24]
 80059b4:	b133      	cbz	r3, 80059c4 <USBD_LL_DataOutStage+0x60>
 80059b6:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80059ba:	2a03      	cmp	r2, #3
 80059bc:	d102      	bne.n	80059c4 <USBD_LL_DataOutStage+0x60>
}
 80059be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80059c2:	4718      	bx	r3
    return USBD_FAIL;
 80059c4:	2503      	movs	r5, #3
 80059c6:	e7e3      	b.n	8005990 <USBD_LL_DataOutStage+0x2c>

080059c8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80059c8:	b570      	push	{r4, r5, r6, lr}
 80059ca:	4604      	mov	r4, r0
 80059cc:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80059ce:	460d      	mov	r5, r1
 80059d0:	bbd9      	cbnz	r1, 8005a4a <USBD_LL_DataInStage+0x82>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80059d2:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d10e      	bne.n	80059f8 <USBD_LL_DataInStage+0x30>
    {
      if (pep->rem_length > pep->maxpacket)
 80059da:	e9d0 3207 	ldrd	r3, r2, [r0, #28]
 80059de:	4293      	cmp	r3, r2
 80059e0:	d913      	bls.n	8005a0a <USBD_LL_DataInStage+0x42>
      {
        pep->rem_length -= pep->maxpacket;
 80059e2:	1a9a      	subs	r2, r3, r2

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80059e4:	4631      	mov	r1, r6
        pep->rem_length -= pep->maxpacket;
 80059e6:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80059e8:	f000 faf1 	bl	8005fce <USBD_CtlContinueSendData>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80059ec:	462b      	mov	r3, r5
 80059ee:	462a      	mov	r2, r5
 80059f0:	4629      	mov	r1, r5
 80059f2:	4620      	mov	r0, r4
 80059f4:	f000 fe0c 	bl	8006610 <USBD_LL_PrepareReceive>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80059f8:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d102      	bne.n	8005a06 <USBD_LL_DataInStage+0x3e>
    {
      (void)USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8005a00:	2300      	movs	r3, #0
 8005a02:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 8005a06:	4628      	mov	r0, r5
 8005a08:	bd70      	pop	{r4, r5, r6, pc}
        if ((pep->maxpacket == pep->rem_length) &&
 8005a0a:	d10c      	bne.n	8005a26 <USBD_LL_DataInStage+0x5e>
            (pep->total_length >= pep->maxpacket) &&
 8005a0c:	6982      	ldr	r2, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d809      	bhi.n	8005a26 <USBD_LL_DataInStage+0x5e>
            (pep->total_length >= pep->maxpacket) &&
 8005a12:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d205      	bcs.n	8005a26 <USBD_LL_DataInStage+0x5e>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005a1a:	460a      	mov	r2, r1
 8005a1c:	f000 fad7 	bl	8005fce <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005a20:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
 8005a24:	e7e2      	b.n	80059ec <USBD_LL_DataInStage+0x24>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005a26:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	b12b      	cbz	r3, 8005a3a <USBD_LL_DataInStage+0x72>
 8005a2e:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 8005a32:	2a03      	cmp	r2, #3
 8005a34:	d101      	bne.n	8005a3a <USBD_LL_DataInStage+0x72>
            pdev->pClass->EP0_TxSent(pdev);
 8005a36:	4620      	mov	r0, r4
 8005a38:	4798      	blx	r3
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005a3a:	2180      	movs	r1, #128	; 0x80
 8005a3c:	4620      	mov	r0, r4
 8005a3e:	f000 fd9b 	bl	8006578 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005a42:	4620      	mov	r0, r4
 8005a44:	f000 faeb 	bl	800601e <USBD_CtlReceiveStatus>
 8005a48:	e7d6      	b.n	80059f8 <USBD_LL_DataInStage+0x30>
  else if ((pdev->pClass->DataIn != NULL) &&
 8005a4a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8005a4e:	695b      	ldr	r3, [r3, #20]
 8005a50:	b133      	cbz	r3, 8005a60 <USBD_LL_DataInStage+0x98>
 8005a52:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8005a56:	2a03      	cmp	r2, #3
 8005a58:	d102      	bne.n	8005a60 <USBD_LL_DataInStage+0x98>
}
 8005a5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005a5e:	4718      	bx	r3
    return USBD_FAIL;
 8005a60:	2503      	movs	r5, #3
 8005a62:	e7d0      	b.n	8005a06 <USBD_LL_DataInStage+0x3e>

08005a64 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005a64:	2301      	movs	r3, #1
  pdev->ep0_state = USBD_EP0_IDLE;
 8005a66:	2100      	movs	r1, #0
{
 8005a68:	b570      	push	{r4, r5, r6, lr}
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005a6a:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
{
 8005a6e:	4604      	mov	r4, r0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData != NULL)
 8005a70:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
  pdev->ep0_state = USBD_EP0_IDLE;
 8005a74:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 8005a78:	6041      	str	r1, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 8005a7a:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  if (pdev->pClassData != NULL)
 8005a7e:	b11b      	cbz	r3, 8005a88 <USBD_LL_Reset+0x24>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005a80:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005a88:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005a8a:	2540      	movs	r5, #64	; 0x40
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005a8c:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005a8e:	2340      	movs	r3, #64	; 0x40
 8005a90:	4611      	mov	r1, r2
 8005a92:	4620      	mov	r0, r4
 8005a94:	f000 fd52 	bl	800653c <USBD_LL_OpenEP>

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005a98:	462b      	mov	r3, r5
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	2180      	movs	r1, #128	; 0x80
 8005a9e:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005aa0:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005aa4:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005aa8:	f000 fd48 	bl	800653c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  return USBD_OK;
}
 8005aac:	2000      	movs	r0, #0
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005aae:	84a6      	strh	r6, [r4, #36]	; 0x24
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005ab0:	6225      	str	r5, [r4, #32]
}
 8005ab2:	bd70      	pop	{r4, r5, r6, pc}

08005ab4 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8005ab4:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8005ab6:	2000      	movs	r0, #0
 8005ab8:	4770      	bx	lr

08005aba <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 8005aba:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005abe:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005ac2:	2304      	movs	r3, #4
 8005ac4:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8005ac8:	2000      	movs	r0, #0
 8005aca:	4770      	bx	lr

08005acc <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005acc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005ad0:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 8005ad2:	bf04      	itt	eq
 8005ad4:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 8005ad8:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8005adc:	2000      	movs	r0, #0
 8005ade:	4770      	bx	lr

08005ae0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005ae0:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ae2:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8005ae6:	2a03      	cmp	r2, #3
 8005ae8:	d104      	bne.n	8005af4 <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 8005aea:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8005aee:	69db      	ldr	r3, [r3, #28]
 8005af0:	b103      	cbz	r3, 8005af4 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8005af2:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 8005af4:	2000      	movs	r0, #0
 8005af6:	bd08      	pop	{r3, pc}

08005af8 <USBD_LL_IsoINIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 8005af8:	2000      	movs	r0, #0
 8005afa:	4770      	bx	lr

08005afc <USBD_LL_IsoOUTIncomplete>:
 8005afc:	2000      	movs	r0, #0
 8005afe:	4770      	bx	lr

08005b00 <USBD_LL_DevConnected>:
 8005b00:	2000      	movs	r0, #0
 8005b02:	4770      	bx	lr

08005b04 <USBD_LL_DevDisconnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005b04:	2201      	movs	r2, #1
{
 8005b06:	b508      	push	{r3, lr}
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005b08:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8005b0c:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 8005b10:	b112      	cbz	r2, 8005b18 <USBD_LL_DevDisconnected+0x14>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005b12:	6852      	ldr	r2, [r2, #4]
 8005b14:	7901      	ldrb	r1, [r0, #4]
 8005b16:	4790      	blx	r2
  }

  return USBD_OK;
}
 8005b18:	2000      	movs	r0, #0
 8005b1a:	bd08      	pop	{r3, pc}

08005b1c <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
 8005b1c:	b510      	push	{r4, lr}
 8005b1e:	4604      	mov	r4, r0
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005b20:	2180      	movs	r1, #128	; 0x80
 8005b22:	f000 fd29 	bl	8006578 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005b26:	2100      	movs	r1, #0
 8005b28:	4620      	mov	r0, r4
}
 8005b2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 8005b2e:	f000 bd23 	b.w	8006578 <USBD_LL_StallEP>
	...

08005b34 <USBD_StdDevReq>:
{
 8005b34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b36:	780d      	ldrb	r5, [r1, #0]
 8005b38:	4604      	mov	r4, r0
 8005b3a:	460e      	mov	r6, r1
 8005b3c:	f005 0560 	and.w	r5, r5, #96	; 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b40:	2d20      	cmp	r5, #32
 8005b42:	d014      	beq.n	8005b6e <USBD_StdDevReq+0x3a>
 8005b44:	2d40      	cmp	r5, #64	; 0x40
 8005b46:	d012      	beq.n	8005b6e <USBD_StdDevReq+0x3a>
 8005b48:	2d00      	cmp	r5, #0
 8005b4a:	f040 8106 	bne.w	8005d5a <USBD_StdDevReq+0x226>
    switch (req->bRequest)
 8005b4e:	784f      	ldrb	r7, [r1, #1]
 8005b50:	2f09      	cmp	r7, #9
 8005b52:	f200 8102 	bhi.w	8005d5a <USBD_StdDevReq+0x226>
 8005b56:	e8df f017 	tbh	[pc, r7, lsl #1]
 8005b5a:	0107      	.short	0x0107
 8005b5c:	01000129 	.word	0x01000129
 8005b60:	0100011f 	.word	0x0100011f
 8005b64:	00140089 	.word	0x00140089
 8005b68:	00f00100 	.word	0x00f00100
 8005b6c:	00a5      	.short	0x00a5
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005b6e:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8005b72:	4631      	mov	r1, r6
 8005b74:	4620      	mov	r0, r4
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	4798      	blx	r3
 8005b7a:	4605      	mov	r5, r0
}
 8005b7c:	4628      	mov	r0, r5
 8005b7e:	b003      	add	sp, #12
 8005b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint16_t len = 0U;
 8005b82:	2300      	movs	r3, #0
 8005b84:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8005b88:	884b      	ldrh	r3, [r1, #2]
 8005b8a:	0a1a      	lsrs	r2, r3, #8
 8005b8c:	3a01      	subs	r2, #1
 8005b8e:	2a0e      	cmp	r2, #14
 8005b90:	d80d      	bhi.n	8005bae <USBD_StdDevReq+0x7a>
 8005b92:	e8df f002 	tbb	[pc, r2]
 8005b96:	2910      	.short	0x2910
 8005b98:	560c0c36 	.word	0x560c0c36
 8005b9c:	0c0c0c60 	.word	0x0c0c0c60
 8005ba0:	0c0c0c0c 	.word	0x0c0c0c0c
 8005ba4:	08          	.byte	0x08
 8005ba5:	00          	.byte	0x00
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8005ba6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005baa:	69db      	ldr	r3, [r3, #28]
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005bac:	b933      	cbnz	r3, 8005bbc <USBD_StdDevReq+0x88>
      USBD_CtlError(pdev, req);
 8005bae:	4620      	mov	r0, r4
        USBD_CtlError(pdev, req);
 8005bb0:	f7ff ffb4 	bl	8005b1c <USBD_CtlError.constprop.0>
 8005bb4:	e7e2      	b.n	8005b7c <USBD_StdDevReq+0x48>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005bb6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f10d 0106 	add.w	r1, sp, #6
 8005bc0:	7c20      	ldrb	r0, [r4, #16]
 8005bc2:	4798      	blx	r3
    if (req->wLength != 0U)
 8005bc4:	88f2      	ldrh	r2, [r6, #6]
 8005bc6:	2a00      	cmp	r2, #0
 8005bc8:	f000 80ec 	beq.w	8005da4 <USBD_StdDevReq+0x270>
      if (len != 0U)
 8005bcc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d0ec      	beq.n	8005bae <USBD_StdDevReq+0x7a>
        len = MIN(len, req->wLength);
 8005bd4:	429a      	cmp	r2, r3
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8005bd6:	4601      	mov	r1, r0
        len = MIN(len, req->wLength);
 8005bd8:	bf28      	it	cs
 8005bda:	461a      	movcs	r2, r3
 8005bdc:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005be0:	4620      	mov	r0, r4
 8005be2:	f000 f9e7 	bl	8005fb4 <USBD_CtlSendData>
      break;
 8005be6:	e7c9      	b.n	8005b7c <USBD_StdDevReq+0x48>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005be8:	7c02      	ldrb	r2, [r0, #16]
 8005bea:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8005bee:	b932      	cbnz	r2, 8005bfe <USBD_StdDevReq+0xca>
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005bf2:	f10d 0006 	add.w	r0, sp, #6
 8005bf6:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005bf8:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005bfa:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8005bfc:	e7e2      	b.n	8005bc4 <USBD_StdDevReq+0x90>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c00:	e7f7      	b.n	8005bf2 <USBD_StdDevReq+0xbe>
    switch ((uint8_t)(req->wValue))
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	2b05      	cmp	r3, #5
 8005c06:	d8d2      	bhi.n	8005bae <USBD_StdDevReq+0x7a>
 8005c08:	e8df f003 	tbb	[pc, r3]
 8005c0c:	0f0b0703 	.word	0x0f0b0703
 8005c10:	1713      	.short	0x1713
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005c12:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	e7c8      	b.n	8005bac <USBD_StdDevReq+0x78>
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005c1a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	e7c4      	b.n	8005bac <USBD_StdDevReq+0x78>
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005c22:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	e7c0      	b.n	8005bac <USBD_StdDevReq+0x78>
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005c2a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	e7bc      	b.n	8005bac <USBD_StdDevReq+0x78>
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005c32:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005c36:	695b      	ldr	r3, [r3, #20]
 8005c38:	e7b8      	b.n	8005bac <USBD_StdDevReq+0x78>
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005c3a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8005c3e:	699b      	ldr	r3, [r3, #24]
 8005c40:	e7b4      	b.n	8005bac <USBD_StdDevReq+0x78>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c42:	7c03      	ldrb	r3, [r0, #16]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d1b2      	bne.n	8005bae <USBD_StdDevReq+0x7a>
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005c48:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8005c4c:	f10d 0006 	add.w	r0, sp, #6
 8005c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c52:	4798      	blx	r3
  if (err != 0U)
 8005c54:	e7b6      	b.n	8005bc4 <USBD_StdDevReq+0x90>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c56:	7c03      	ldrb	r3, [r0, #16]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d1a8      	bne.n	8005bae <USBD_StdDevReq+0x7a>
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005c5c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8005c60:	f10d 0006 	add.w	r0, sp, #6
 8005c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c66:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005c68:	2307      	movs	r3, #7
 8005c6a:	e7c6      	b.n	8005bfa <USBD_StdDevReq+0xc6>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005c6c:	888b      	ldrh	r3, [r1, #4]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d19d      	bne.n	8005bae <USBD_StdDevReq+0x7a>
 8005c72:	88cb      	ldrh	r3, [r1, #6]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d19a      	bne.n	8005bae <USBD_StdDevReq+0x7a>
 8005c78:	884e      	ldrh	r6, [r1, #2]
 8005c7a:	2e7f      	cmp	r6, #127	; 0x7f
 8005c7c:	d897      	bhi.n	8005bae <USBD_StdDevReq+0x7a>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c7e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005c82:	2b03      	cmp	r3, #3
 8005c84:	d093      	beq.n	8005bae <USBD_StdDevReq+0x7a>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005c86:	b2f1      	uxtb	r1, r6
      pdev->dev_address = dev_addr;
 8005c88:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005c8c:	f000 fca4 	bl	80065d8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005c90:	4620      	mov	r0, r4
 8005c92:	f000 f9b9 	bl	8006008 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8005c96:	b11e      	cbz	r6, 8005ca0 <USBD_StdDevReq+0x16c>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005c98:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8005c9a:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8005c9e:	e76d      	b.n	8005b7c <USBD_StdDevReq+0x48>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e7fa      	b.n	8005c9a <USBD_StdDevReq+0x166>
  cfgidx = (uint8_t)(req->wValue);
 8005ca4:	788e      	ldrb	r6, [r1, #2]
 8005ca6:	4f47      	ldr	r7, [pc, #284]	; (8005dc4 <USBD_StdDevReq+0x290>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005ca8:	2e01      	cmp	r6, #1
  cfgidx = (uint8_t)(req->wValue);
 8005caa:	703e      	strb	r6, [r7, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005cac:	d903      	bls.n	8005cb6 <USBD_StdDevReq+0x182>
    USBD_CtlError(pdev, req);
 8005cae:	f7ff ff35 	bl	8005b1c <USBD_CtlError.constprop.0>
    ret = USBD_FAIL;
 8005cb2:	2503      	movs	r5, #3
    break;
 8005cb4:	e762      	b.n	8005b7c <USBD_StdDevReq+0x48>
  switch (pdev->dev_state)
 8005cb6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005cba:	2b02      	cmp	r3, #2
 8005cbc:	d008      	beq.n	8005cd0 <USBD_StdDevReq+0x19c>
 8005cbe:	2b03      	cmp	r3, #3
 8005cc0:	d015      	beq.n	8005cee <USBD_StdDevReq+0x1ba>
    USBD_CtlError(pdev, req);
 8005cc2:	f7ff ff2b 	bl	8005b1c <USBD_CtlError.constprop.0>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005cc6:	7839      	ldrb	r1, [r7, #0]
 8005cc8:	4620      	mov	r0, r4
 8005cca:	f7ff fe13 	bl	80058f4 <USBD_ClrClassConfig>
 8005cce:	e7f0      	b.n	8005cb2 <USBD_StdDevReq+0x17e>
    if (cfgidx != 0U)
 8005cd0:	2e00      	cmp	r6, #0
 8005cd2:	d067      	beq.n	8005da4 <USBD_StdDevReq+0x270>
      pdev->dev_config = cfgidx;
 8005cd4:	2101      	movs	r1, #1
 8005cd6:	6041      	str	r1, [r0, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8005cd8:	f7ff fe05 	bl	80058e6 <USBD_SetClassConfig>
      if (ret != USBD_OK)
 8005cdc:	4605      	mov	r5, r0
        USBD_CtlError(pdev, req);
 8005cde:	4620      	mov	r0, r4
      if (ret != USBD_OK)
 8005ce0:	2d00      	cmp	r5, #0
 8005ce2:	f47f af65 	bne.w	8005bb0 <USBD_StdDevReq+0x7c>
        (void)USBD_CtlSendStatus(pdev);
 8005ce6:	f000 f98f 	bl	8006008 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8005cea:	2303      	movs	r3, #3
 8005cec:	e7d5      	b.n	8005c9a <USBD_StdDevReq+0x166>
    if (cfgidx == 0U)
 8005cee:	b95e      	cbnz	r6, 8005d08 <USBD_StdDevReq+0x1d4>
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8005cf0:	2302      	movs	r3, #2
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005cf2:	4631      	mov	r1, r6
      pdev->dev_config = cfgidx;
 8005cf4:	6046      	str	r6, [r0, #4]
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8005cf6:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005cfa:	f7ff fdfb 	bl	80058f4 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8005cfe:	4620      	mov	r0, r4
 8005d00:	f000 f982 	bl	8006008 <USBD_CtlSendStatus>
 8005d04:	4635      	mov	r5, r6
 8005d06:	e739      	b.n	8005b7c <USBD_StdDevReq+0x48>
    else if (cfgidx != pdev->dev_config)
 8005d08:	6841      	ldr	r1, [r0, #4]
 8005d0a:	2901      	cmp	r1, #1
 8005d0c:	d04a      	beq.n	8005da4 <USBD_StdDevReq+0x270>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005d0e:	b2c9      	uxtb	r1, r1
 8005d10:	f7ff fdf0 	bl	80058f4 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8005d14:	7839      	ldrb	r1, [r7, #0]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8005d16:	4620      	mov	r0, r4
      pdev->dev_config = cfgidx;
 8005d18:	6061      	str	r1, [r4, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8005d1a:	f7ff fde4 	bl	80058e6 <USBD_SetClassConfig>
      if (ret != USBD_OK)
 8005d1e:	4606      	mov	r6, r0
 8005d20:	2800      	cmp	r0, #0
 8005d22:	d03f      	beq.n	8005da4 <USBD_StdDevReq+0x270>
        USBD_CtlError(pdev, req);
 8005d24:	4620      	mov	r0, r4
 8005d26:	f7ff fef9 	bl	8005b1c <USBD_CtlError.constprop.0>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005d2a:	7921      	ldrb	r1, [r4, #4]
 8005d2c:	4620      	mov	r0, r4
 8005d2e:	f7ff fde1 	bl	80058f4 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005d32:	2302      	movs	r3, #2
 8005d34:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8005d38:	e7e4      	b.n	8005d04 <USBD_StdDevReq+0x1d0>
  if (req->wLength != 1U)
 8005d3a:	88ca      	ldrh	r2, [r1, #6]
 8005d3c:	2a01      	cmp	r2, #1
 8005d3e:	f47f af36 	bne.w	8005bae <USBD_StdDevReq+0x7a>
    switch (pdev->dev_state)
 8005d42:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005d46:	2b02      	cmp	r3, #2
 8005d48:	d805      	bhi.n	8005d56 <USBD_StdDevReq+0x222>
 8005d4a:	b133      	cbz	r3, 8005d5a <USBD_StdDevReq+0x226>
      pdev->dev_default_config = 0U;
 8005d4c:	4601      	mov	r1, r0
 8005d4e:	2300      	movs	r3, #0
 8005d50:	f841 3f08 	str.w	r3, [r1, #8]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005d54:	e744      	b.n	8005be0 <USBD_StdDevReq+0xac>
    switch (pdev->dev_state)
 8005d56:	2b03      	cmp	r3, #3
 8005d58:	d004      	beq.n	8005d64 <USBD_StdDevReq+0x230>
      USBD_CtlError(pdev, req);
 8005d5a:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 8005d5c:	2500      	movs	r5, #0
      USBD_CtlError(pdev, req);
 8005d5e:	f7ff fedd 	bl	8005b1c <USBD_CtlError.constprop.0>
      break;
 8005d62:	e70b      	b.n	8005b7c <USBD_StdDevReq+0x48>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005d64:	1d01      	adds	r1, r0, #4
 8005d66:	e73b      	b.n	8005be0 <USBD_StdDevReq+0xac>
  switch (pdev->dev_state)
 8005d68:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005d6c:	3b01      	subs	r3, #1
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	d8f3      	bhi.n	8005d5a <USBD_StdDevReq+0x226>
    if (req->wLength != 0x2U)
 8005d72:	88cb      	ldrh	r3, [r1, #6]
 8005d74:	2b02      	cmp	r3, #2
 8005d76:	f47f af1a 	bne.w	8005bae <USBD_StdDevReq+0x7a>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup != 0U)
 8005d7e:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8005d82:	b10b      	cbz	r3, 8005d88 <USBD_StdDevReq+0x254>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005d84:	2303      	movs	r3, #3
 8005d86:	60c3      	str	r3, [r0, #12]
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005d88:	2202      	movs	r2, #2
 8005d8a:	f104 010c 	add.w	r1, r4, #12
 8005d8e:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 8005d90:	463d      	mov	r5, r7
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005d92:	f000 f90f 	bl	8005fb4 <USBD_CtlSendData>
    break;
 8005d96:	e6f1      	b.n	8005b7c <USBD_StdDevReq+0x48>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005d98:	884b      	ldrh	r3, [r1, #2]
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	f47f aeee 	bne.w	8005b7c <USBD_StdDevReq+0x48>
        pdev->dev_remote_wakeup = 0U;
 8005da0:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005da4:	4620      	mov	r0, r4
 8005da6:	f000 f92f 	bl	8006008 <USBD_CtlSendStatus>
 8005daa:	e6e7      	b.n	8005b7c <USBD_StdDevReq+0x48>
  switch (pdev->dev_state)
 8005dac:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005db0:	3b01      	subs	r3, #1
 8005db2:	2b02      	cmp	r3, #2
 8005db4:	d8d1      	bhi.n	8005d5a <USBD_StdDevReq+0x226>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005db6:	884b      	ldrh	r3, [r1, #2]
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	f47f aedf 	bne.w	8005b7c <USBD_StdDevReq+0x48>
        pdev->dev_remote_wakeup = 0U;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	e7ee      	b.n	8005da0 <USBD_StdDevReq+0x26c>
 8005dc2:	bf00      	nop
 8005dc4:	200004d4 	.word	0x200004d4

08005dc8 <USBD_StdItfReq>:
{
 8005dc8:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005dca:	780b      	ldrb	r3, [r1, #0]
{
 8005dcc:	4604      	mov	r4, r0
 8005dce:	460e      	mov	r6, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005dd0:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8005dd4:	2a40      	cmp	r2, #64	; 0x40
 8005dd6:	d001      	beq.n	8005ddc <USBD_StdItfReq+0x14>
 8005dd8:	065b      	lsls	r3, r3, #25
 8005dda:	d416      	bmi.n	8005e0a <USBD_StdItfReq+0x42>
    switch (pdev->dev_state)
 8005ddc:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8005de0:	3b01      	subs	r3, #1
 8005de2:	2b02      	cmp	r3, #2
 8005de4:	d811      	bhi.n	8005e0a <USBD_StdItfReq+0x42>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005de6:	7933      	ldrb	r3, [r6, #4]
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d80e      	bhi.n	8005e0a <USBD_StdItfReq+0x42>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005dec:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8005df0:	4631      	mov	r1, r6
 8005df2:	4620      	mov	r0, r4
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 8005df8:	88f3      	ldrh	r3, [r6, #6]
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005dfa:	4605      	mov	r5, r0
        if ((req->wLength == 0U) && (ret == USBD_OK))
 8005dfc:	b91b      	cbnz	r3, 8005e06 <USBD_StdItfReq+0x3e>
 8005dfe:	b910      	cbnz	r0, 8005e06 <USBD_StdItfReq+0x3e>
          (void)USBD_CtlSendStatus(pdev);
 8005e00:	4620      	mov	r0, r4
 8005e02:	f000 f901 	bl	8006008 <USBD_CtlSendStatus>
}
 8005e06:	4628      	mov	r0, r5
 8005e08:	bd70      	pop	{r4, r5, r6, pc}
      USBD_CtlError(pdev, req);
 8005e0a:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 8005e0c:	2500      	movs	r5, #0
      USBD_CtlError(pdev, req);
 8005e0e:	f7ff fe85 	bl	8005b1c <USBD_CtlError.constprop.0>
      break;
 8005e12:	e7f8      	b.n	8005e06 <USBD_StdItfReq+0x3e>

08005e14 <USBD_StdEPReq>:
{
 8005e14:	b570      	push	{r4, r5, r6, lr}
 8005e16:	780b      	ldrb	r3, [r1, #0]
 8005e18:	4604      	mov	r4, r0
 8005e1a:	460d      	mov	r5, r1
 8005e1c:	f003 0360 	and.w	r3, r3, #96	; 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e20:	2b20      	cmp	r3, #32
 8005e22:	d028      	beq.n	8005e76 <USBD_StdEPReq+0x62>
 8005e24:	2b40      	cmp	r3, #64	; 0x40
 8005e26:	d026      	beq.n	8005e76 <USBD_StdEPReq+0x62>
 8005e28:	bb9b      	cbnz	r3, 8005e92 <USBD_StdEPReq+0x7e>
    switch (req->bRequest)
 8005e2a:	786b      	ldrb	r3, [r5, #1]
  ep_addr = LOBYTE(req->wIndex);
 8005e2c:	888a      	ldrh	r2, [r1, #4]
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	7909      	ldrb	r1, [r1, #4]
    switch (req->bRequest)
 8005e32:	d03f      	beq.n	8005eb4 <USBD_StdEPReq+0xa0>
 8005e34:	2b03      	cmp	r3, #3
 8005e36:	d026      	beq.n	8005e86 <USBD_StdEPReq+0x72>
 8005e38:	bb5b      	cbnz	r3, 8005e92 <USBD_StdEPReq+0x7e>
      switch (pdev->dev_state)
 8005e3a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005e3e:	2b02      	cmp	r3, #2
 8005e40:	d058      	beq.n	8005ef4 <USBD_StdEPReq+0xe0>
 8005e42:	2b03      	cmp	r3, #3
 8005e44:	d125      	bne.n	8005e92 <USBD_StdEPReq+0x7e>
        if ((ep_addr & 0x80U) == 0x80U)
 8005e46:	f001 030f 	and.w	r3, r1, #15
 8005e4a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005e4e:	f04f 0214 	mov.w	r2, #20
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005e52:	fb02 0303 	mla	r3, r2, r3, r0
        if ((ep_addr & 0x80U) == 0x80U)
 8005e56:	d05e      	beq.n	8005f16 <USBD_StdEPReq+0x102>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005e58:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005e5a:	b1d3      	cbz	r3, 8005e92 <USBD_StdEPReq+0x7e>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005e5c:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8005e60:	2314      	movs	r3, #20
 8005e62:	fb05 3303 	mla	r3, r5, r3, r3
 8005e66:	18c5      	adds	r5, r0, r3
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005e68:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 8005e6c:	d15f      	bne.n	8005f2e <USBD_StdEPReq+0x11a>
            pep->status = 0x0001U;
 8005e6e:	602b      	str	r3, [r5, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005e70:	2202      	movs	r2, #2
 8005e72:	4629      	mov	r1, r5
 8005e74:	e04b      	b.n	8005f0e <USBD_StdEPReq+0xfa>
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005e76:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8005e7a:	4629      	mov	r1, r5
 8005e7c:	4620      	mov	r0, r4
 8005e7e:	689b      	ldr	r3, [r3, #8]
}
 8005e80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005e84:	4718      	bx	r3
      switch (pdev->dev_state)
 8005e86:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005e8a:	2b02      	cmp	r3, #2
 8005e8c:	d029      	beq.n	8005ee2 <USBD_StdEPReq+0xce>
 8005e8e:	2b03      	cmp	r3, #3
 8005e90:	d003      	beq.n	8005e9a <USBD_StdEPReq+0x86>
        USBD_CtlError(pdev, req);
 8005e92:	4620      	mov	r0, r4
 8005e94:	f7ff fe42 	bl	8005b1c <USBD_CtlError.constprop.0>
        break;
 8005e98:	e00a      	b.n	8005eb0 <USBD_StdEPReq+0x9c>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005e9a:	886b      	ldrh	r3, [r5, #2]
 8005e9c:	b92b      	cbnz	r3, 8005eaa <USBD_StdEPReq+0x96>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005e9e:	064a      	lsls	r2, r1, #25
 8005ea0:	d003      	beq.n	8005eaa <USBD_StdEPReq+0x96>
 8005ea2:	88eb      	ldrh	r3, [r5, #6]
 8005ea4:	b90b      	cbnz	r3, 8005eaa <USBD_StdEPReq+0x96>
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8005ea6:	f000 fb67 	bl	8006578 <USBD_LL_StallEP>
        (void)USBD_CtlSendStatus(pdev);
 8005eaa:	4620      	mov	r0, r4
 8005eac:	f000 f8ac 	bl	8006008 <USBD_CtlSendStatus>
}
 8005eb0:	2000      	movs	r0, #0
 8005eb2:	bd70      	pop	{r4, r5, r6, pc}
      switch (pdev->dev_state)
 8005eb4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005eb8:	2b02      	cmp	r3, #2
 8005eba:	d012      	beq.n	8005ee2 <USBD_StdEPReq+0xce>
 8005ebc:	2b03      	cmp	r3, #3
 8005ebe:	d1e8      	bne.n	8005e92 <USBD_StdEPReq+0x7e>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005ec0:	886b      	ldrh	r3, [r5, #2]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d1f4      	bne.n	8005eb0 <USBD_StdEPReq+0x9c>
          if ((ep_addr & 0x7FU) != 0x00U)
 8005ec6:	064e      	lsls	r6, r1, #25
 8005ec8:	d001      	beq.n	8005ece <USBD_StdEPReq+0xba>
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005eca:	f000 fb63 	bl	8006594 <USBD_LL_ClearStallEP>
          (void)USBD_CtlSendStatus(pdev);
 8005ece:	4620      	mov	r0, r4
 8005ed0:	f000 f89a 	bl	8006008 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005ed4:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8005ed8:	4629      	mov	r1, r5
 8005eda:	4620      	mov	r0, r4
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	4798      	blx	r3
 8005ee0:	e7e6      	b.n	8005eb0 <USBD_StdEPReq+0x9c>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005ee2:	064b      	lsls	r3, r1, #25
 8005ee4:	d0d5      	beq.n	8005e92 <USBD_StdEPReq+0x7e>
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8005ee6:	f000 fb47 	bl	8006578 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005eea:	2180      	movs	r1, #128	; 0x80
 8005eec:	4620      	mov	r0, r4
 8005eee:	f000 fb43 	bl	8006578 <USBD_LL_StallEP>
 8005ef2:	e7dd      	b.n	8005eb0 <USBD_StdEPReq+0x9c>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005ef4:	0649      	lsls	r1, r1, #25
 8005ef6:	d1cc      	bne.n	8005e92 <USBD_StdEPReq+0x7e>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005ef8:	0613      	lsls	r3, r2, #24
        pep->status = 0x0000U;
 8005efa:	f04f 0300 	mov.w	r3, #0
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005efe:	f04f 0202 	mov.w	r2, #2
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005f02:	bf4c      	ite	mi
 8005f04:	f100 0114 	addmi.w	r1, r0, #20
 8005f08:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
        pep->status = 0x0000U;
 8005f0c:	600b      	str	r3, [r1, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005f0e:	4620      	mov	r0, r4
 8005f10:	f000 f850 	bl	8005fb4 <USBD_CtlSendData>
          break;
 8005f14:	e7cc      	b.n	8005eb0 <USBD_StdEPReq+0x9c>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005f16:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d0b9      	beq.n	8005e92 <USBD_StdEPReq+0x7e>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005f1e:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8005f22:	2314      	movs	r3, #20
 8005f24:	fb03 0505 	mla	r5, r3, r5, r0
 8005f28:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 8005f2c:	e79c      	b.n	8005e68 <USBD_StdEPReq+0x54>
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005f2e:	4620      	mov	r0, r4
 8005f30:	f000 fb3e 	bl	80065b0 <USBD_LL_IsStallEP>
 8005f34:	b108      	cbz	r0, 8005f3a <USBD_StdEPReq+0x126>
            pep->status = 0x0001U;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e799      	b.n	8005e6e <USBD_StdEPReq+0x5a>
            pep->status = 0x0000U;
 8005f3a:	6028      	str	r0, [r5, #0]
 8005f3c:	e798      	b.n	8005e70 <USBD_StdEPReq+0x5c>

08005f3e <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 8005f3e:	780b      	ldrb	r3, [r1, #0]
 8005f40:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 8005f42:	784b      	ldrb	r3, [r1, #1]
 8005f44:	7043      	strb	r3, [r0, #1]

  _Byte1 = *(uint8_t *)_pbuff;
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005f46:	78ca      	ldrb	r2, [r1, #3]
 8005f48:	788b      	ldrb	r3, [r1, #2]
 8005f4a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 8005f4e:	8043      	strh	r3, [r0, #2]
 8005f50:	794a      	ldrb	r2, [r1, #5]
 8005f52:	790b      	ldrb	r3, [r1, #4]
 8005f54:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 8005f58:	8083      	strh	r3, [r0, #4]
 8005f5a:	79ca      	ldrb	r2, [r1, #7]
 8005f5c:	798b      	ldrb	r3, [r1, #6]
 8005f5e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 8005f62:	80c3      	strh	r3, [r0, #6]
}
 8005f64:	4770      	bx	lr

08005f66 <USBD_CtlError>:
{
 8005f66:	b510      	push	{r4, lr}
 8005f68:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005f6a:	2180      	movs	r1, #128	; 0x80
 8005f6c:	f000 fb04 	bl	8006578 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005f70:	2100      	movs	r1, #0
 8005f72:	4620      	mov	r0, r4
}
 8005f74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 8005f78:	f000 bafe 	b.w	8006578 <USBD_LL_StallEP>

08005f7c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005f7c:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 8005f7e:	b188      	cbz	r0, 8005fa4 <USBD_GetString+0x28>
 8005f80:	2500      	movs	r5, #0
 8005f82:	3801      	subs	r0, #1
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 8005f84:	462b      	mov	r3, r5
 8005f86:	3501      	adds	r5, #1
 8005f88:	5d44      	ldrb	r4, [r0, r5]
 8005f8a:	2c00      	cmp	r4, #0
 8005f8c:	d1fa      	bne.n	8005f84 <USBD_GetString+0x8>
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	3301      	adds	r3, #1
 8005f92:	005b      	lsls	r3, r3, #1
 8005f94:	8013      	strh	r3, [r2, #0]
  unicode[idx] = *(uint8_t *)len;
 8005f96:	700b      	strb	r3, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005f98:	2303      	movs	r3, #3
 8005f9a:	704b      	strb	r3, [r1, #1]
  idx++;
 8005f9c:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 8005f9e:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8005fa2:	b902      	cbnz	r2, 8005fa6 <USBD_GetString+0x2a>
}
 8005fa4:	bd30      	pop	{r4, r5, pc}
    unicode[idx] = *pdesc;
 8005fa6:	54ca      	strb	r2, [r1, r3]
    idx++;
 8005fa8:	1c5a      	adds	r2, r3, #1
    idx++;
 8005faa:	3302      	adds	r3, #2
    unicode[idx] = 0U;
 8005fac:	b2d2      	uxtb	r2, r2
    idx++;
 8005fae:	b2db      	uxtb	r3, r3
    unicode[idx] = 0U;
 8005fb0:	548c      	strb	r4, [r1, r2]
    idx++;
 8005fb2:	e7f4      	b.n	8005f9e <USBD_GetString+0x22>

08005fb4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005fb4:	b510      	push	{r4, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005fb6:	2402      	movs	r4, #2
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length = len;

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005fb8:	4613      	mov	r3, r2
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005fba:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  pdev->ep_in[0].rem_length = len;
 8005fbe:	e9c0 2206 	strd	r2, r2, [r0, #24]
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005fc2:	460a      	mov	r2, r1
 8005fc4:	2100      	movs	r1, #0
 8005fc6:	f000 fb15 	bl	80065f4 <USBD_LL_Transmit>

  return USBD_OK;
}
 8005fca:	2000      	movs	r0, #0
 8005fcc:	bd10      	pop	{r4, pc}

08005fce <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005fce:	b508      	push	{r3, lr}
 8005fd0:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005fd2:	460a      	mov	r2, r1
 8005fd4:	2100      	movs	r1, #0
 8005fd6:	f000 fb0d 	bl	80065f4 <USBD_LL_Transmit>

  return USBD_OK;
}
 8005fda:	2000      	movs	r0, #0
 8005fdc:	bd08      	pop	{r3, pc}

08005fde <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8005fde:	b510      	push	{r4, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005fe0:	2403      	movs	r4, #3
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length = len;

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005fe2:	4613      	mov	r3, r2
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005fe4:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  pdev->ep_out[0].rem_length = len;
 8005fe8:	e9c0 2256 	strd	r2, r2, [r0, #344]	; 0x158
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005fec:	460a      	mov	r2, r1
 8005fee:	2100      	movs	r1, #0
 8005ff0:	f000 fb0e 	bl	8006610 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005ff4:	2000      	movs	r0, #0
 8005ff6:	bd10      	pop	{r4, pc}

08005ff8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005ff8:	b508      	push	{r3, lr}
 8005ffa:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005ffc:	460a      	mov	r2, r1
 8005ffe:	2100      	movs	r1, #0
 8006000:	f000 fb06 	bl	8006610 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006004:	2000      	movs	r0, #0
 8006006:	bd08      	pop	{r3, pc}

08006008 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006008:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800600a:	2304      	movs	r3, #4
 800600c:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006010:	2300      	movs	r3, #0
 8006012:	461a      	mov	r2, r3
 8006014:	4619      	mov	r1, r3
 8006016:	f000 faed 	bl	80065f4 <USBD_LL_Transmit>

  return USBD_OK;
}
 800601a:	2000      	movs	r0, #0
 800601c:	bd08      	pop	{r3, pc}

0800601e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800601e:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006020:	2305      	movs	r3, #5
 8006022:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006026:	2300      	movs	r3, #0
 8006028:	461a      	mov	r2, r3
 800602a:	4619      	mov	r1, r3
 800602c:	f000 faf0 	bl	8006610 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006030:	2000      	movs	r0, #0
 8006032:	bd08      	pop	{r3, pc}

08006034 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006034:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006036:	2200      	movs	r2, #0
 8006038:	490e      	ldr	r1, [pc, #56]	; (8006074 <MX_USB_DEVICE_Init+0x40>)
 800603a:	480f      	ldr	r0, [pc, #60]	; (8006078 <MX_USB_DEVICE_Init+0x44>)
 800603c:	f7ff fc26 	bl	800588c <USBD_Init>
 8006040:	b108      	cbz	r0, 8006046 <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 8006042:	f7fb fbc3 	bl	80017cc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006046:	490d      	ldr	r1, [pc, #52]	; (800607c <MX_USB_DEVICE_Init+0x48>)
 8006048:	480b      	ldr	r0, [pc, #44]	; (8006078 <MX_USB_DEVICE_Init+0x44>)
 800604a:	f7ff fc37 	bl	80058bc <USBD_RegisterClass>
 800604e:	b108      	cbz	r0, 8006054 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 8006050:	f7fb fbbc 	bl	80017cc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006054:	490a      	ldr	r1, [pc, #40]	; (8006080 <MX_USB_DEVICE_Init+0x4c>)
 8006056:	4808      	ldr	r0, [pc, #32]	; (8006078 <MX_USB_DEVICE_Init+0x44>)
 8006058:	f7ff fbd4 	bl	8005804 <USBD_CDC_RegisterInterface>
 800605c:	b108      	cbz	r0, 8006062 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 800605e:	f7fb fbb5 	bl	80017cc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006062:	4805      	ldr	r0, [pc, #20]	; (8006078 <MX_USB_DEVICE_Init+0x44>)
 8006064:	f7ff fc3d 	bl	80058e2 <USBD_Start>
 8006068:	b118      	cbz	r0, 8006072 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800606a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800606e:	f7fb bbad 	b.w	80017cc <Error_Handler>
}
 8006072:	bd08      	pop	{r3, pc}
 8006074:	2000013c 	.word	0x2000013c
 8006078:	20000a68 	.word	0x20000a68
 800607c:	2000000c 	.word	0x2000000c
 8006080:	20000124 	.word	0x20000124

08006084 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8006084:	2000      	movs	r0, #0
 8006086:	4770      	bx	lr

08006088 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 8006088:	2000      	movs	r0, #0
 800608a:	4770      	bx	lr

0800608c <CDC_Init_FS>:
{
 800608c:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800608e:	4c06      	ldr	r4, [pc, #24]	; (80060a8 <CDC_Init_FS+0x1c>)
 8006090:	2200      	movs	r2, #0
 8006092:	4906      	ldr	r1, [pc, #24]	; (80060ac <CDC_Init_FS+0x20>)
 8006094:	4620      	mov	r0, r4
 8006096:	f7ff fbbc 	bl	8005812 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800609a:	4905      	ldr	r1, [pc, #20]	; (80060b0 <CDC_Init_FS+0x24>)
 800609c:	4620      	mov	r0, r4
 800609e:	f7ff fbc0 	bl	8005822 <USBD_CDC_SetRxBuffer>
}
 80060a2:	2000      	movs	r0, #0
 80060a4:	bd10      	pop	{r4, pc}
 80060a6:	bf00      	nop
 80060a8:	20000a68 	.word	0x20000a68
 80060ac:	20000f38 	.word	0x20000f38
 80060b0:	20000d38 	.word	0x20000d38

080060b4 <CDC_Control_FS>:
  switch(cmd)
 80060b4:	2820      	cmp	r0, #32
 80060b6:	d003      	beq.n	80060c0 <CDC_Control_FS+0xc>
 80060b8:	2821      	cmp	r0, #33	; 0x21
 80060ba:	d017      	beq.n	80060ec <CDC_Control_FS+0x38>
}
 80060bc:	2000      	movs	r0, #0
 80060be:	4770      	bx	lr
        LineCoding.bitrate   = (uint32_t)(pbuf[0]);
 80060c0:	780b      	ldrb	r3, [r1, #0]
 80060c2:	4a13      	ldr	r2, [pc, #76]	; (8006110 <CDC_Control_FS+0x5c>)
 80060c4:	6013      	str	r3, [r2, #0]
        LineCoding.bitrate  |= (uint32_t)(pbuf[1]<<8);
 80060c6:	7848      	ldrb	r0, [r1, #1]
 80060c8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80060cc:	6013      	str	r3, [r2, #0]
        LineCoding.bitrate  |= (uint32_t)(pbuf[2]<<16);
 80060ce:	7888      	ldrb	r0, [r1, #2]
 80060d0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80060d4:	6013      	str	r3, [r2, #0]
        LineCoding.bitrate  |= (uint32_t)(pbuf[3]<<24);
 80060d6:	78c8      	ldrb	r0, [r1, #3]
 80060d8:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80060dc:	6013      	str	r3, [r2, #0]
        LineCoding.format    = pbuf[4];
 80060de:	790b      	ldrb	r3, [r1, #4]
 80060e0:	7113      	strb	r3, [r2, #4]
        LineCoding.paritytype= pbuf[5];
 80060e2:	794b      	ldrb	r3, [r1, #5]
 80060e4:	7153      	strb	r3, [r2, #5]
        LineCoding.datatype  = pbuf[6];
 80060e6:	798b      	ldrb	r3, [r1, #6]
 80060e8:	7193      	strb	r3, [r2, #6]
      break;
 80060ea:	e7e7      	b.n	80060bc <CDC_Control_FS+0x8>
        pbuf[0] = (uint8_t)(LineCoding.bitrate);
 80060ec:	4b08      	ldr	r3, [pc, #32]	; (8006110 <CDC_Control_FS+0x5c>)
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	700a      	strb	r2, [r1, #0]
        pbuf[1] = (uint8_t)(LineCoding.bitrate>>8);
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	0a12      	lsrs	r2, r2, #8
 80060f6:	704a      	strb	r2, [r1, #1]
        pbuf[2] = (uint8_t)(LineCoding.bitrate>>16);
 80060f8:	885a      	ldrh	r2, [r3, #2]
 80060fa:	708a      	strb	r2, [r1, #2]
        pbuf[3] = (uint8_t)(LineCoding.bitrate>>24);
 80060fc:	78da      	ldrb	r2, [r3, #3]
 80060fe:	70ca      	strb	r2, [r1, #3]
        pbuf[4] = LineCoding.format;
 8006100:	791a      	ldrb	r2, [r3, #4]
 8006102:	710a      	strb	r2, [r1, #4]
        pbuf[5] = LineCoding.paritytype;
 8006104:	795a      	ldrb	r2, [r3, #5]
 8006106:	714a      	strb	r2, [r1, #5]
        pbuf[6] = LineCoding.datatype;
 8006108:	799b      	ldrb	r3, [r3, #6]
 800610a:	718b      	strb	r3, [r1, #6]
      break;
 800610c:	e7d6      	b.n	80060bc <CDC_Control_FS+0x8>
 800610e:	bf00      	nop
 8006110:	2000011c 	.word	0x2000011c

08006114 <cdcAvailable>:
  ret = (rx_in - rx_out) % rx_len;
 8006114:	4a05      	ldr	r2, [pc, #20]	; (800612c <cdcAvailable+0x18>)
 8006116:	4b06      	ldr	r3, [pc, #24]	; (8006130 <cdcAvailable+0x1c>)
 8006118:	6810      	ldr	r0, [r2, #0]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a05      	ldr	r2, [pc, #20]	; (8006134 <cdcAvailable+0x20>)
 800611e:	1a1b      	subs	r3, r3, r0
 8006120:	6812      	ldr	r2, [r2, #0]
 8006122:	fbb3 f0f2 	udiv	r0, r3, r2
}
 8006126:	fb02 3010 	mls	r0, r2, r0, r3
 800612a:	4770      	bx	lr
 800612c:	200004dc 	.word	0x200004dc
 8006130:	200004d8 	.word	0x200004d8
 8006134:	20000138 	.word	0x20000138

08006138 <cdcRead>:
  ret = rx_buf[rx_out];
 8006138:	4908      	ldr	r1, [pc, #32]	; (800615c <cdcRead+0x24>)
 800613a:	4a09      	ldr	r2, [pc, #36]	; (8006160 <cdcRead+0x28>)
 800613c:	680b      	ldr	r3, [r1, #0]
{
 800613e:	b510      	push	{r4, lr}
  ret = rx_buf[rx_out];
 8006140:	5cd0      	ldrb	r0, [r2, r3]
  if (rx_out != rx_in)
 8006142:	4a08      	ldr	r2, [pc, #32]	; (8006164 <cdcRead+0x2c>)
 8006144:	6812      	ldr	r2, [r2, #0]
 8006146:	4293      	cmp	r3, r2
 8006148:	d007      	beq.n	800615a <cdcRead+0x22>
    rx_out = (rx_out + 1) % rx_len;
 800614a:	4a07      	ldr	r2, [pc, #28]	; (8006168 <cdcRead+0x30>)
 800614c:	3301      	adds	r3, #1
 800614e:	6814      	ldr	r4, [r2, #0]
 8006150:	fbb3 f2f4 	udiv	r2, r3, r4
 8006154:	fb04 3312 	mls	r3, r4, r2, r3
 8006158:	600b      	str	r3, [r1, #0]
}
 800615a:	bd10      	pop	{r4, pc}
 800615c:	200004dc 	.word	0x200004dc
 8006160:	20001138 	.word	0x20001138
 8006164:	200004d8 	.word	0x200004d8
 8006168:	20000138 	.word	0x20000138

0800616c <cdcDataIn>:
  rx_buf[rx_in] = rx_data;
 800616c:	4908      	ldr	r1, [pc, #32]	; (8006190 <cdcDataIn+0x24>)
 800616e:	4a09      	ldr	r2, [pc, #36]	; (8006194 <cdcDataIn+0x28>)
 8006170:	680b      	ldr	r3, [r1, #0]
 8006172:	54d0      	strb	r0, [r2, r3]
  next_rx_in = (rx_in + 1) % rx_len;
 8006174:	3301      	adds	r3, #1
 8006176:	4a08      	ldr	r2, [pc, #32]	; (8006198 <cdcDataIn+0x2c>)
 8006178:	6810      	ldr	r0, [r2, #0]
 800617a:	fbb3 f2f0 	udiv	r2, r3, r0
 800617e:	fb00 3312 	mls	r3, r0, r2, r3
  if (next_rx_in != rx_out)
 8006182:	4a06      	ldr	r2, [pc, #24]	; (800619c <cdcDataIn+0x30>)
 8006184:	6812      	ldr	r2, [r2, #0]
 8006186:	429a      	cmp	r2, r3
    rx_in = next_rx_in;
 8006188:	bf18      	it	ne
 800618a:	600b      	strne	r3, [r1, #0]
}
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop
 8006190:	200004d8 	.word	0x200004d8
 8006194:	20001138 	.word	0x20001138
 8006198:	20000138 	.word	0x20000138
 800619c:	200004dc 	.word	0x200004dc

080061a0 <CDC_Receive_FS>:
{
 80061a0:	b570      	push	{r4, r5, r6, lr}
 80061a2:	4604      	mov	r4, r0
 80061a4:	460e      	mov	r6, r1
	  for (int i=0; i<*Len; i++)
 80061a6:	2500      	movs	r5, #0
 80061a8:	6833      	ldr	r3, [r6, #0]
 80061aa:	42ab      	cmp	r3, r5
 80061ac:	d810      	bhi.n	80061d0 <CDC_Receive_FS+0x30>
	  buf_len = (rx_len - cdcAvailable()) - 1;
 80061ae:	4b0d      	ldr	r3, [pc, #52]	; (80061e4 <CDC_Receive_FS+0x44>)
 80061b0:	6819      	ldr	r1, [r3, #0]
 80061b2:	f7ff ffaf 	bl	8006114 <cdcAvailable>
 80061b6:	3901      	subs	r1, #1
 80061b8:	1a09      	subs	r1, r1, r0
	  if (buf_len >= USB_FS_MAX_PACKET_SIZE)
 80061ba:	293f      	cmp	r1, #63	; 0x3f
 80061bc:	d90d      	bls.n	80061da <CDC_Receive_FS+0x3a>
	    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80061be:	4621      	mov	r1, r4
 80061c0:	4809      	ldr	r0, [pc, #36]	; (80061e8 <CDC_Receive_FS+0x48>)
 80061c2:	f7ff fb2e 	bl	8005822 <USBD_CDC_SetRxBuffer>
	    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80061c6:	4808      	ldr	r0, [pc, #32]	; (80061e8 <CDC_Receive_FS+0x48>)
 80061c8:	f7ff fb49 	bl	800585e <USBD_CDC_ReceivePacket>
}
 80061cc:	2000      	movs	r0, #0
 80061ce:	bd70      	pop	{r4, r5, r6, pc}
	    cdcDataIn(Buf[i]);
 80061d0:	5d60      	ldrb	r0, [r4, r5]
	  for (int i=0; i<*Len; i++)
 80061d2:	3501      	adds	r5, #1
	    cdcDataIn(Buf[i]);
 80061d4:	f7ff ffca 	bl	800616c <cdcDataIn>
	  for (int i=0; i<*Len; i++)
 80061d8:	e7e6      	b.n	80061a8 <CDC_Receive_FS+0x8>
	    rx_full = true;
 80061da:	4b04      	ldr	r3, [pc, #16]	; (80061ec <CDC_Receive_FS+0x4c>)
 80061dc:	2201      	movs	r2, #1
 80061de:	701a      	strb	r2, [r3, #0]
 80061e0:	e7f4      	b.n	80061cc <CDC_Receive_FS+0x2c>
 80061e2:	bf00      	nop
 80061e4:	20000138 	.word	0x20000138
 80061e8:	20000a68 	.word	0x20000a68
 80061ec:	200004d5 	.word	0x200004d5

080061f0 <USBD_CDC_SOF>:
{
 80061f0:	b538      	push	{r3, r4, r5, lr}
  if (rx_full == true)
 80061f2:	4d09      	ldr	r5, [pc, #36]	; (8006218 <USBD_CDC_SOF+0x28>)
{
 80061f4:	4604      	mov	r4, r0
  if (rx_full == true)
 80061f6:	782b      	ldrb	r3, [r5, #0]
 80061f8:	b163      	cbz	r3, 8006214 <USBD_CDC_SOF+0x24>
    buf_len = (rx_len - cdcAvailable()) - 1;
 80061fa:	4b08      	ldr	r3, [pc, #32]	; (800621c <USBD_CDC_SOF+0x2c>)
 80061fc:	6819      	ldr	r1, [r3, #0]
 80061fe:	f7ff ff89 	bl	8006114 <cdcAvailable>
 8006202:	3901      	subs	r1, #1
 8006204:	1a09      	subs	r1, r1, r0
    if (buf_len >= USB_FS_MAX_PACKET_SIZE)
 8006206:	293f      	cmp	r1, #63	; 0x3f
 8006208:	d904      	bls.n	8006214 <USBD_CDC_SOF+0x24>
      USBD_CDC_ReceivePacket(pdev);
 800620a:	4620      	mov	r0, r4
 800620c:	f7ff fb27 	bl	800585e <USBD_CDC_ReceivePacket>
      rx_full = false;
 8006210:	2300      	movs	r3, #0
 8006212:	702b      	strb	r3, [r5, #0]
}
 8006214:	2000      	movs	r0, #0
 8006216:	bd38      	pop	{r3, r4, r5, pc}
 8006218:	200004d5 	.word	0x200004d5
 800621c:	20000138 	.word	0x20000138

08006220 <CDC_Transmit_FS>:
{
 8006220:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006222:	4c09      	ldr	r4, [pc, #36]	; (8006248 <CDC_Transmit_FS+0x28>)
{
 8006224:	460a      	mov	r2, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006226:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  if (hcdc->TxState != 0){
 800622a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800622e:	b943      	cbnz	r3, 8006242 <CDC_Transmit_FS+0x22>
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006230:	4601      	mov	r1, r0
 8006232:	4620      	mov	r0, r4
 8006234:	f7ff faed 	bl	8005812 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006238:	4620      	mov	r0, r4
}
 800623a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800623e:	f7ff baf6 	b.w	800582e <USBD_CDC_TransmitPacket>
}
 8006242:	2001      	movs	r0, #1
 8006244:	bd10      	pop	{r4, pc}
 8006246:	bf00      	nop
 8006248:	20000a68 	.word	0x20000a68

0800624c <cdcWrite>:
{
 800624c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800624e:	4606      	mov	r6, r0
 8006250:	460c      	mov	r4, r1
  if (cdcIsInit() != true)
 8006252:	f7fa fc67 	bl	8000b24 <cdcIsInit>
 8006256:	b178      	cbz	r0, 8006278 <cdcWrite+0x2c>
  pre_time = millis();
 8006258:	f7fb fab6 	bl	80017c8 <millis>
 800625c:	4605      	mov	r5, r0
    ret = CDC_Transmit_FS(p_data, length);
 800625e:	b2a7      	uxth	r7, r4
 8006260:	4639      	mov	r1, r7
 8006262:	4630      	mov	r0, r6
 8006264:	f7ff ffdc 	bl	8006220 <CDC_Transmit_FS>
    if (ret == USBD_OK)
 8006268:	b138      	cbz	r0, 800627a <cdcWrite+0x2e>
    else if (ret == USBD_FAIL)
 800626a:	2803      	cmp	r0, #3
 800626c:	d004      	beq.n	8006278 <cdcWrite+0x2c>
    if (millis()-pre_time >= 100)
 800626e:	f7fb faab 	bl	80017c8 <millis>
 8006272:	1b43      	subs	r3, r0, r5
 8006274:	2b63      	cmp	r3, #99	; 0x63
 8006276:	d9f3      	bls.n	8006260 <cdcWrite+0x14>
    return 0;
 8006278:	2400      	movs	r4, #0
}
 800627a:	4620      	mov	r0, r4
 800627c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006280 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006280:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8006282:	4801      	ldr	r0, [pc, #4]	; (8006288 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8006284:	800b      	strh	r3, [r1, #0]
}
 8006286:	4770      	bx	lr
 8006288:	20000168 	.word	0x20000168

0800628c <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800628c:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 800628e:	4801      	ldr	r0, [pc, #4]	; (8006294 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8006290:	800b      	strh	r3, [r1, #0]
}
 8006292:	4770      	bx	lr
 8006294:	2000017c 	.word	0x2000017c

08006298 <USBD_FS_USR_BOSDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8006298:	230c      	movs	r3, #12
  return (uint8_t*)USBD_FS_BOSDesc;
}
 800629a:	4801      	ldr	r0, [pc, #4]	; (80062a0 <USBD_FS_USR_BOSDescriptor+0x8>)
  *length = sizeof(USBD_FS_BOSDesc);
 800629c:	800b      	strh	r3, [r1, #0]
}
 800629e:	4770      	bx	lr
 80062a0:	2000015c 	.word	0x2000015c

080062a4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80062a4:	2300      	movs	r3, #0
 80062a6:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 80062a8:	1c4d      	adds	r5, r1, #1
 80062aa:	461e      	mov	r6, r3
    if (((value >> 28)) < 0xA)
 80062ac:	0f04      	lsrs	r4, r0, #28
 80062ae:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
    value = value << 4;
 80062b2:	ea4f 1000 	mov.w	r0, r0, lsl #4
      pbuf[2 * idx] = (value >> 28) + '0';
 80062b6:	bf34      	ite	cc
 80062b8:	3430      	addcc	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80062ba:	3437      	addcs	r4, #55	; 0x37
 80062bc:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 80062c0:	f805 6013 	strb.w	r6, [r5, r3, lsl #1]
  for (idx = 0; idx < len; idx++)
 80062c4:	3301      	adds	r3, #1
 80062c6:	b2dc      	uxtb	r4, r3
 80062c8:	42a2      	cmp	r2, r4
 80062ca:	d8ef      	bhi.n	80062ac <IntToUnicode+0x8>
  }
}
 80062cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080062d0 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 80062d0:	231a      	movs	r3, #26
{
 80062d2:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 80062d4:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80062d6:	4b09      	ldr	r3, [pc, #36]	; (80062fc <USBD_FS_SerialStrDescriptor+0x2c>)
 80062d8:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80062da:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 80062dc:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 80062de:	18c0      	adds	r0, r0, r3
 80062e0:	d00a      	beq.n	80062f8 <USBD_FS_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80062e2:	4b07      	ldr	r3, [pc, #28]	; (8006300 <USBD_FS_SerialStrDescriptor+0x30>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80062e4:	2208      	movs	r2, #8
 80062e6:	4907      	ldr	r1, [pc, #28]	; (8006304 <USBD_FS_SerialStrDescriptor+0x34>)
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80062e8:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80062ea:	f7ff ffdb 	bl	80062a4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80062ee:	2204      	movs	r2, #4
 80062f0:	4905      	ldr	r1, [pc, #20]	; (8006308 <USBD_FS_SerialStrDescriptor+0x38>)
 80062f2:	4620      	mov	r0, r4
 80062f4:	f7ff ffd6 	bl	80062a4 <IntToUnicode>
}
 80062f8:	4804      	ldr	r0, [pc, #16]	; (800630c <USBD_FS_SerialStrDescriptor+0x3c>)
 80062fa:	bd10      	pop	{r4, pc}
 80062fc:	1ff0f420 	.word	0x1ff0f420
 8006300:	1ff0f424 	.word	0x1ff0f424
 8006304:	20000182 	.word	0x20000182
 8006308:	20000192 	.word	0x20000192
 800630c:	20000180 	.word	0x20000180

08006310 <USBD_FS_ManufacturerStrDescriptor>:
{
 8006310:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006312:	4c04      	ldr	r4, [pc, #16]	; (8006324 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 8006314:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006316:	4804      	ldr	r0, [pc, #16]	; (8006328 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8006318:	4621      	mov	r1, r4
 800631a:	f7ff fe2f 	bl	8005f7c <USBD_GetString>
}
 800631e:	4620      	mov	r0, r4
 8006320:	bd10      	pop	{r4, pc}
 8006322:	bf00      	nop
 8006324:	20001338 	.word	0x20001338
 8006328:	08009f3e 	.word	0x08009f3e

0800632c <USBD_FS_ProductStrDescriptor>:
{
 800632c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800632e:	4c04      	ldr	r4, [pc, #16]	; (8006340 <USBD_FS_ProductStrDescriptor+0x14>)
{
 8006330:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006332:	4804      	ldr	r0, [pc, #16]	; (8006344 <USBD_FS_ProductStrDescriptor+0x18>)
 8006334:	4621      	mov	r1, r4
 8006336:	f7ff fe21 	bl	8005f7c <USBD_GetString>
}
 800633a:	4620      	mov	r0, r4
 800633c:	bd10      	pop	{r4, pc}
 800633e:	bf00      	nop
 8006340:	20001338 	.word	0x20001338
 8006344:	08009f51 	.word	0x08009f51

08006348 <USBD_FS_ConfigStrDescriptor>:
{
 8006348:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800634a:	4c04      	ldr	r4, [pc, #16]	; (800635c <USBD_FS_ConfigStrDescriptor+0x14>)
{
 800634c:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800634e:	4804      	ldr	r0, [pc, #16]	; (8006360 <USBD_FS_ConfigStrDescriptor+0x18>)
 8006350:	4621      	mov	r1, r4
 8006352:	f7ff fe13 	bl	8005f7c <USBD_GetString>
}
 8006356:	4620      	mov	r0, r4
 8006358:	bd10      	pop	{r4, pc}
 800635a:	bf00      	nop
 800635c:	20001338 	.word	0x20001338
 8006360:	08009f67 	.word	0x08009f67

08006364 <USBD_FS_InterfaceStrDescriptor>:
{
 8006364:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006366:	4c04      	ldr	r4, [pc, #16]	; (8006378 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 8006368:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800636a:	4804      	ldr	r0, [pc, #16]	; (800637c <USBD_FS_InterfaceStrDescriptor+0x18>)
 800636c:	4621      	mov	r1, r4
 800636e:	f7ff fe05 	bl	8005f7c <USBD_GetString>
}
 8006372:	4620      	mov	r0, r4
 8006374:	bd10      	pop	{r4, pc}
 8006376:	bf00      	nop
 8006378:	20001338 	.word	0x20001338
 800637c:	08009f72 	.word	0x08009f72

08006380 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006380:	b530      	push	{r4, r5, lr}
 8006382:	b089      	sub	sp, #36	; 0x24
 8006384:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006386:	2214      	movs	r2, #20
 8006388:	2100      	movs	r1, #0
 800638a:	a803      	add	r0, sp, #12
 800638c:	f000 f9f6 	bl	800677c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8006390:	6823      	ldr	r3, [r4, #0]
 8006392:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006396:	d132      	bne.n	80063fe <HAL_PCD_MspInit+0x7e>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006398:	4c1a      	ldr	r4, [pc, #104]	; (8006404 <HAL_PCD_MspInit+0x84>)
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800639a:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800639e:	2500      	movs	r5, #0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063a0:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80063a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063a4:	4818      	ldr	r0, [pc, #96]	; (8006408 <HAL_PCD_MspInit+0x88>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80063a6:	f043 0301 	orr.w	r3, r3, #1
 80063aa:	6323      	str	r3, [r4, #48]	; 0x30
 80063ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80063ae:	f003 0301 	and.w	r3, r3, #1
 80063b2:	9300      	str	r3, [sp, #0]
 80063b4:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063b6:	2302      	movs	r3, #2
 80063b8:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80063bc:	2303      	movs	r3, #3
 80063be:	e9cd 5305 	strd	r5, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80063c2:	230a      	movs	r3, #10
 80063c4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063c6:	f7fc fa8f 	bl	80028e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80063ca:	6b63      	ldr	r3, [r4, #52]	; 0x34

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80063cc:	2043      	movs	r0, #67	; 0x43
 80063ce:	462a      	mov	r2, r5
 80063d0:	4629      	mov	r1, r5
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80063d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063d6:	6363      	str	r3, [r4, #52]	; 0x34
 80063d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80063da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063de:	9301      	str	r3, [sp, #4]
 80063e0:	9b01      	ldr	r3, [sp, #4]
 80063e2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80063e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80063e8:	6463      	str	r3, [r4, #68]	; 0x44
 80063ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80063ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063f0:	9302      	str	r3, [sp, #8]
 80063f2:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80063f4:	f7fb fe5a 	bl	80020ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80063f8:	2043      	movs	r0, #67	; 0x43
 80063fa:	f7fb fe89 	bl	8002110 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80063fe:	b009      	add	sp, #36	; 0x24
 8006400:	bd30      	pop	{r4, r5, pc}
 8006402:	bf00      	nop
 8006404:	40023800 	.word	0x40023800
 8006408:	40020000 	.word	0x40020000

0800640c <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800640c:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 8006410:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8006414:	f7ff ba76 	b.w	8005904 <USBD_LL_SetupStage>

08006418 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006418:	231c      	movs	r3, #28
 800641a:	fb03 0301 	mla	r3, r3, r1, r0
 800641e:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8006422:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006426:	f7ff ba9d 	b.w	8005964 <USBD_LL_DataOutStage>

0800642a <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800642a:	231c      	movs	r3, #28
 800642c:	fb03 0301 	mla	r3, r3, r1, r0
 8006430:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8006434:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006436:	f7ff bac7 	b.w	80059c8 <USBD_LL_DataInStage>

0800643a <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800643a:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 800643e:	f7ff bb4f 	b.w	8005ae0 <USBD_LL_SOF>

08006442 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006442:	68c1      	ldr	r1, [r0, #12]
{
 8006444:	b510      	push	{r4, lr}
 8006446:	4604      	mov	r4, r0
  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006448:	b121      	cbz	r1, 8006454 <HAL_PCD_ResetCallback+0x12>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800644a:	2902      	cmp	r1, #2
 800644c:	d001      	beq.n	8006452 <HAL_PCD_ResetCallback+0x10>
  {
    speed = USBD_SPEED_FULL;
  }
  else
  {
    Error_Handler();
 800644e:	f7fb f9bd 	bl	80017cc <Error_Handler>
    speed = USBD_SPEED_FULL;
 8006452:	2101      	movs	r1, #1
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006454:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
 8006458:	f7ff fb2c 	bl	8005ab4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800645c:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
}
 8006460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006464:	f7ff bafe 	b.w	8005a64 <USBD_LL_Reset>

08006468 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006468:	b510      	push	{r4, lr}
 800646a:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800646c:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8006470:	f7ff fb23 	bl	8005aba <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006474:	6822      	ldr	r2, [r4, #0]
 8006476:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 800647a:	f043 0301 	orr.w	r3, r3, #1
 800647e:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006482:	6a23      	ldr	r3, [r4, #32]
 8006484:	b123      	cbz	r3, 8006490 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006486:	4a03      	ldr	r2, [pc, #12]	; (8006494 <HAL_PCD_SuspendCallback+0x2c>)
 8006488:	6913      	ldr	r3, [r2, #16]
 800648a:	f043 0306 	orr.w	r3, r3, #6
 800648e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006490:	bd10      	pop	{r4, pc}
 8006492:	bf00      	nop
 8006494:	e000ed00 	.word	0xe000ed00

08006498 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006498:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 800649c:	f7ff bb16 	b.w	8005acc <USBD_LL_Resume>

080064a0 <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80064a0:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 80064a4:	f7ff bb2a 	b.w	8005afc <USBD_LL_IsoOUTIncomplete>

080064a8 <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80064a8:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 80064ac:	f7ff bb24 	b.w	8005af8 <USBD_LL_IsoINIncomplete>

080064b0 <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80064b0:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 80064b4:	f7ff bb24 	b.w	8005b00 <USBD_LL_DevConnected>

080064b8 <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80064b8:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 80064bc:	f7ff bb22 	b.w	8005b04 <USBD_LL_DevDisconnected>

080064c0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80064c0:	b508      	push	{r3, lr}
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80064c2:	7803      	ldrb	r3, [r0, #0]
{
 80064c4:	4602      	mov	r2, r0
  if (pdev->id == DEVICE_FS) {
 80064c6:	bb33      	cbnz	r3, 8006516 <USBD_LL_Init+0x56>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80064c8:	4814      	ldr	r0, [pc, #80]	; (800651c <USBD_LL_Init+0x5c>)
  pdev->pData = &hpcd_USB_OTG_FS;

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80064ca:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
  hpcd_USB_OTG_FS.pData = pdev;
 80064ce:	f8c0 2400 	str.w	r2, [r0, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 80064d2:	f8c2 02c4 	str.w	r0, [r2, #708]	; 0x2c4
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80064d6:	2206      	movs	r2, #6
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80064d8:	6243      	str	r3, [r0, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80064da:	e9c0 1200 	strd	r1, r2, [r0]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80064de:	2202      	movs	r2, #2
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80064e0:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80064e4:	6182      	str	r2, [r0, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80064e6:	2201      	movs	r2, #1
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80064e8:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80064ec:	e9c0 2307 	strd	r2, r3, [r0, #28]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80064f0:	f7fc fb90 	bl	8002c14 <HAL_PCD_Init>
 80064f4:	b108      	cbz	r0, 80064fa <USBD_LL_Init+0x3a>
  {
    Error_Handler( );
 80064f6:	f7fb f969 	bl	80017cc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80064fa:	2180      	movs	r1, #128	; 0x80
 80064fc:	4807      	ldr	r0, [pc, #28]	; (800651c <USBD_LL_Init+0x5c>)
 80064fe:	f7fd f84c 	bl	800359a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006502:	2240      	movs	r2, #64	; 0x40
 8006504:	2100      	movs	r1, #0
 8006506:	4805      	ldr	r0, [pc, #20]	; (800651c <USBD_LL_Init+0x5c>)
 8006508:	f7fd f827 	bl	800355a <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800650c:	2280      	movs	r2, #128	; 0x80
 800650e:	2101      	movs	r1, #1
 8006510:	4802      	ldr	r0, [pc, #8]	; (800651c <USBD_LL_Init+0x5c>)
 8006512:	f7fd f822 	bl	800355a <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
}
 8006516:	2000      	movs	r0, #0
 8006518:	bd08      	pop	{r3, pc}
 800651a:	bf00      	nop
 800651c:	20001538 	.word	0x20001538

08006520 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006520:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 8006522:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006526:	f7fc fbfe 	bl	8002d26 <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800652a:	2803      	cmp	r0, #3
 800652c:	bf96      	itet	ls
 800652e:	4b02      	ldrls	r3, [pc, #8]	; (8006538 <USBD_LL_Start+0x18>)
  hal_status = HAL_PCD_Start(pdev->pData);
 8006530:	2003      	movhi	r0, #3
 8006532:	5c18      	ldrbls	r0, [r3, r0]
}
 8006534:	bd08      	pop	{r3, pc}
 8006536:	bf00      	nop
 8006538:	08009f80 	.word	0x08009f80

0800653c <USBD_LL_OpenEP>:
{
 800653c:	b510      	push	{r4, lr}
 800653e:	4614      	mov	r4, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006540:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8006544:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006546:	4623      	mov	r3, r4
 8006548:	f7fc fee6 	bl	8003318 <HAL_PCD_EP_Open>
  switch (hal_status)
 800654c:	2803      	cmp	r0, #3
 800654e:	bf96      	itet	ls
 8006550:	4b01      	ldrls	r3, [pc, #4]	; (8006558 <USBD_LL_OpenEP+0x1c>)
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006552:	2003      	movhi	r0, #3
 8006554:	5c18      	ldrbls	r0, [r3, r0]
}
 8006556:	bd10      	pop	{r4, pc}
 8006558:	08009f80 	.word	0x08009f80

0800655c <USBD_LL_CloseEP>:
{
 800655c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800655e:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006562:	f7fc ff11 	bl	8003388 <HAL_PCD_EP_Close>
  switch (hal_status)
 8006566:	2803      	cmp	r0, #3
 8006568:	bf96      	itet	ls
 800656a:	4b02      	ldrls	r3, [pc, #8]	; (8006574 <USBD_LL_CloseEP+0x18>)
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800656c:	2003      	movhi	r0, #3
 800656e:	5c18      	ldrbls	r0, [r3, r0]
}
 8006570:	bd08      	pop	{r3, pc}
 8006572:	bf00      	nop
 8006574:	08009f80 	.word	0x08009f80

08006578 <USBD_LL_StallEP>:
{
 8006578:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800657a:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800657e:	f7fc ff7e 	bl	800347e <HAL_PCD_EP_SetStall>
  switch (hal_status)
 8006582:	2803      	cmp	r0, #3
 8006584:	bf96      	itet	ls
 8006586:	4b02      	ldrls	r3, [pc, #8]	; (8006590 <USBD_LL_StallEP+0x18>)
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006588:	2003      	movhi	r0, #3
 800658a:	5c18      	ldrbls	r0, [r3, r0]
}
 800658c:	bd08      	pop	{r3, pc}
 800658e:	bf00      	nop
 8006590:	08009f80 	.word	0x08009f80

08006594 <USBD_LL_ClearStallEP>:
{
 8006594:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006596:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800659a:	f7fc ffa8 	bl	80034ee <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 800659e:	2803      	cmp	r0, #3
 80065a0:	bf96      	itet	ls
 80065a2:	4b02      	ldrls	r3, [pc, #8]	; (80065ac <USBD_LL_ClearStallEP+0x18>)
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80065a4:	2003      	movhi	r0, #3
 80065a6:	5c18      	ldrbls	r0, [r3, r0]
}
 80065a8:	bd08      	pop	{r3, pc}
 80065aa:	bf00      	nop
 80065ac:	08009f80 	.word	0x08009f80

080065b0 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 80065b0:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80065b4:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80)
 80065b8:	f04f 021c 	mov.w	r2, #28
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80065bc:	bf17      	itett	ne
 80065be:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80065c2:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80065c6:	fb02 3101 	mlane	r1, r2, r1, r3
 80065ca:	f891 003e 	ldrbne.w	r0, [r1, #62]	; 0x3e
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80065ce:	bf08      	it	eq
 80065d0:	f891 01fe 	ldrbeq.w	r0, [r1, #510]	; 0x1fe
}
 80065d4:	4770      	bx	lr
	...

080065d8 <USBD_LL_SetUSBAddress>:
{
 80065d8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80065da:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80065de:	f7fc fe87 	bl	80032f0 <HAL_PCD_SetAddress>
  switch (hal_status)
 80065e2:	2803      	cmp	r0, #3
 80065e4:	bf96      	itet	ls
 80065e6:	4b02      	ldrls	r3, [pc, #8]	; (80065f0 <USBD_LL_SetUSBAddress+0x18>)
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80065e8:	2003      	movhi	r0, #3
 80065ea:	5c18      	ldrbls	r0, [r3, r0]
}
 80065ec:	bd08      	pop	{r3, pc}
 80065ee:	bf00      	nop
 80065f0:	08009f80 	.word	0x08009f80

080065f4 <USBD_LL_Transmit>:
{
 80065f4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80065f6:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80065fa:	f7fc ff20 	bl	800343e <HAL_PCD_EP_Transmit>
  switch (hal_status)
 80065fe:	2803      	cmp	r0, #3
 8006600:	bf96      	itet	ls
 8006602:	4b02      	ldrls	r3, [pc, #8]	; (800660c <USBD_LL_Transmit+0x18>)
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006604:	2003      	movhi	r0, #3
 8006606:	5c18      	ldrbls	r0, [r3, r0]
}
 8006608:	bd08      	pop	{r3, pc}
 800660a:	bf00      	nop
 800660c:	08009f80 	.word	0x08009f80

08006610 <USBD_LL_PrepareReceive>:
{
 8006610:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006612:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006616:	f7fc fee6 	bl	80033e6 <HAL_PCD_EP_Receive>
  switch (hal_status)
 800661a:	2803      	cmp	r0, #3
 800661c:	bf96      	itet	ls
 800661e:	4b02      	ldrls	r3, [pc, #8]	; (8006628 <USBD_LL_PrepareReceive+0x18>)
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006620:	2003      	movhi	r0, #3
 8006622:	5c18      	ldrbls	r0, [r3, r0]
}
 8006624:	bd08      	pop	{r3, pc}
 8006626:	bf00      	nop
 8006628:	08009f80 	.word	0x08009f80

0800662c <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800662c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8006630:	f7fc befd 	b.w	800342e <HAL_PCD_EP_GetRxCount>

08006634 <HAL_PCDEx_LPM_Callback>:
{
 8006634:	b510      	push	{r4, lr}
 8006636:	4604      	mov	r4, r0
  switch (msg)
 8006638:	b111      	cbz	r1, 8006640 <HAL_PCDEx_LPM_Callback+0xc>
 800663a:	2901      	cmp	r1, #1
 800663c:	d016      	beq.n	800666c <HAL_PCDEx_LPM_Callback+0x38>
}
 800663e:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 8006640:	6a03      	ldr	r3, [r0, #32]
 8006642:	b133      	cbz	r3, 8006652 <HAL_PCDEx_LPM_Callback+0x1e>
  SystemClock_Config();
 8006644:	f7fb f836 	bl	80016b4 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006648:	4a12      	ldr	r2, [pc, #72]	; (8006694 <HAL_PCDEx_LPM_Callback+0x60>)
 800664a:	6913      	ldr	r3, [r2, #16]
 800664c:	f023 0306 	bic.w	r3, r3, #6
 8006650:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8006652:	6822      	ldr	r2, [r4, #0]
    USBD_LL_Resume(hpcd->pData);
 8006654:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8006658:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 800665c:	f023 0301 	bic.w	r3, r3, #1
}
 8006660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8006664:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Resume(hpcd->pData);
 8006668:	f7ff ba30 	b.w	8005acc <USBD_LL_Resume>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800666c:	6802      	ldr	r2, [r0, #0]
    USBD_LL_Suspend(hpcd->pData);
 800666e:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006672:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8006676:	f043 0301 	orr.w	r3, r3, #1
 800667a:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Suspend(hpcd->pData);
 800667e:	f7ff fa1c 	bl	8005aba <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8006682:	6a23      	ldr	r3, [r4, #32]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d0da      	beq.n	800663e <HAL_PCDEx_LPM_Callback+0xa>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006688:	4a02      	ldr	r2, [pc, #8]	; (8006694 <HAL_PCDEx_LPM_Callback+0x60>)
 800668a:	6913      	ldr	r3, [r2, #16]
 800668c:	f043 0306 	orr.w	r3, r3, #6
 8006690:	6113      	str	r3, [r2, #16]
}
 8006692:	e7d4      	b.n	800663e <HAL_PCDEx_LPM_Callback+0xa>
 8006694:	e000ed00 	.word	0xe000ed00

08006698 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006698:	f8df d034 	ldr.w	sp, [pc, #52]	; 80066d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800669c:	480d      	ldr	r0, [pc, #52]	; (80066d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800669e:	490e      	ldr	r1, [pc, #56]	; (80066d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80066a0:	4a0e      	ldr	r2, [pc, #56]	; (80066dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80066a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80066a4:	e002      	b.n	80066ac <LoopCopyDataInit>

080066a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80066a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80066a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80066aa:	3304      	adds	r3, #4

080066ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80066ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80066ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80066b0:	d3f9      	bcc.n	80066a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80066b2:	4a0b      	ldr	r2, [pc, #44]	; (80066e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80066b4:	4c0b      	ldr	r4, [pc, #44]	; (80066e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80066b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80066b8:	e001      	b.n	80066be <LoopFillZerobss>

080066ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80066ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80066bc:	3204      	adds	r2, #4

080066be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80066be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80066c0:	d3fb      	bcc.n	80066ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80066c2:	f7fa fa1f 	bl	8000b04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80066c6:	f000 f817 	bl	80066f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80066ca:	f7fb f881 	bl	80017d0 <main>
  bx  lr    
 80066ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80066d0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80066d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80066d8:	20000370 	.word	0x20000370
  ldr r2, =_sidata
 80066dc:	0800a3d4 	.word	0x0800a3d4
  ldr r2, =_sbss
 80066e0:	20000370 	.word	0x20000370
  ldr r4, =_ebss
 80066e4:	2000194c 	.word	0x2000194c

080066e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80066e8:	e7fe      	b.n	80066e8 <ADC_IRQHandler>
	...

080066ec <__errno>:
 80066ec:	4b01      	ldr	r3, [pc, #4]	; (80066f4 <__errno+0x8>)
 80066ee:	6818      	ldr	r0, [r3, #0]
 80066f0:	4770      	bx	lr
 80066f2:	bf00      	nop
 80066f4:	2000019c 	.word	0x2000019c

080066f8 <__libc_init_array>:
 80066f8:	b570      	push	{r4, r5, r6, lr}
 80066fa:	4d0d      	ldr	r5, [pc, #52]	; (8006730 <__libc_init_array+0x38>)
 80066fc:	4c0d      	ldr	r4, [pc, #52]	; (8006734 <__libc_init_array+0x3c>)
 80066fe:	1b64      	subs	r4, r4, r5
 8006700:	10a4      	asrs	r4, r4, #2
 8006702:	2600      	movs	r6, #0
 8006704:	42a6      	cmp	r6, r4
 8006706:	d109      	bne.n	800671c <__libc_init_array+0x24>
 8006708:	4d0b      	ldr	r5, [pc, #44]	; (8006738 <__libc_init_array+0x40>)
 800670a:	4c0c      	ldr	r4, [pc, #48]	; (800673c <__libc_init_array+0x44>)
 800670c:	f003 fa2c 	bl	8009b68 <_init>
 8006710:	1b64      	subs	r4, r4, r5
 8006712:	10a4      	asrs	r4, r4, #2
 8006714:	2600      	movs	r6, #0
 8006716:	42a6      	cmp	r6, r4
 8006718:	d105      	bne.n	8006726 <__libc_init_array+0x2e>
 800671a:	bd70      	pop	{r4, r5, r6, pc}
 800671c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006720:	4798      	blx	r3
 8006722:	3601      	adds	r6, #1
 8006724:	e7ee      	b.n	8006704 <__libc_init_array+0xc>
 8006726:	f855 3b04 	ldr.w	r3, [r5], #4
 800672a:	4798      	blx	r3
 800672c:	3601      	adds	r6, #1
 800672e:	e7f2      	b.n	8006716 <__libc_init_array+0x1e>
 8006730:	0800a3cc 	.word	0x0800a3cc
 8006734:	0800a3cc 	.word	0x0800a3cc
 8006738:	0800a3cc 	.word	0x0800a3cc
 800673c:	0800a3d0 	.word	0x0800a3d0

08006740 <malloc>:
 8006740:	4b02      	ldr	r3, [pc, #8]	; (800674c <malloc+0xc>)
 8006742:	4601      	mov	r1, r0
 8006744:	6818      	ldr	r0, [r3, #0]
 8006746:	f000 b871 	b.w	800682c <_malloc_r>
 800674a:	bf00      	nop
 800674c:	2000019c 	.word	0x2000019c

08006750 <free>:
 8006750:	4b02      	ldr	r3, [pc, #8]	; (800675c <free+0xc>)
 8006752:	4601      	mov	r1, r0
 8006754:	6818      	ldr	r0, [r3, #0]
 8006756:	f000 b819 	b.w	800678c <_free_r>
 800675a:	bf00      	nop
 800675c:	2000019c 	.word	0x2000019c

08006760 <memcpy>:
 8006760:	440a      	add	r2, r1
 8006762:	4291      	cmp	r1, r2
 8006764:	f100 33ff 	add.w	r3, r0, #4294967295
 8006768:	d100      	bne.n	800676c <memcpy+0xc>
 800676a:	4770      	bx	lr
 800676c:	b510      	push	{r4, lr}
 800676e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006772:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006776:	4291      	cmp	r1, r2
 8006778:	d1f9      	bne.n	800676e <memcpy+0xe>
 800677a:	bd10      	pop	{r4, pc}

0800677c <memset>:
 800677c:	4402      	add	r2, r0
 800677e:	4603      	mov	r3, r0
 8006780:	4293      	cmp	r3, r2
 8006782:	d100      	bne.n	8006786 <memset+0xa>
 8006784:	4770      	bx	lr
 8006786:	f803 1b01 	strb.w	r1, [r3], #1
 800678a:	e7f9      	b.n	8006780 <memset+0x4>

0800678c <_free_r>:
 800678c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800678e:	2900      	cmp	r1, #0
 8006790:	d048      	beq.n	8006824 <_free_r+0x98>
 8006792:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006796:	9001      	str	r0, [sp, #4]
 8006798:	2b00      	cmp	r3, #0
 800679a:	f1a1 0404 	sub.w	r4, r1, #4
 800679e:	bfb8      	it	lt
 80067a0:	18e4      	addlt	r4, r4, r3
 80067a2:	f001 fedd 	bl	8008560 <__malloc_lock>
 80067a6:	4a20      	ldr	r2, [pc, #128]	; (8006828 <_free_r+0x9c>)
 80067a8:	9801      	ldr	r0, [sp, #4]
 80067aa:	6813      	ldr	r3, [r2, #0]
 80067ac:	4615      	mov	r5, r2
 80067ae:	b933      	cbnz	r3, 80067be <_free_r+0x32>
 80067b0:	6063      	str	r3, [r4, #4]
 80067b2:	6014      	str	r4, [r2, #0]
 80067b4:	b003      	add	sp, #12
 80067b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80067ba:	f001 bed7 	b.w	800856c <__malloc_unlock>
 80067be:	42a3      	cmp	r3, r4
 80067c0:	d90b      	bls.n	80067da <_free_r+0x4e>
 80067c2:	6821      	ldr	r1, [r4, #0]
 80067c4:	1862      	adds	r2, r4, r1
 80067c6:	4293      	cmp	r3, r2
 80067c8:	bf04      	itt	eq
 80067ca:	681a      	ldreq	r2, [r3, #0]
 80067cc:	685b      	ldreq	r3, [r3, #4]
 80067ce:	6063      	str	r3, [r4, #4]
 80067d0:	bf04      	itt	eq
 80067d2:	1852      	addeq	r2, r2, r1
 80067d4:	6022      	streq	r2, [r4, #0]
 80067d6:	602c      	str	r4, [r5, #0]
 80067d8:	e7ec      	b.n	80067b4 <_free_r+0x28>
 80067da:	461a      	mov	r2, r3
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	b10b      	cbz	r3, 80067e4 <_free_r+0x58>
 80067e0:	42a3      	cmp	r3, r4
 80067e2:	d9fa      	bls.n	80067da <_free_r+0x4e>
 80067e4:	6811      	ldr	r1, [r2, #0]
 80067e6:	1855      	adds	r5, r2, r1
 80067e8:	42a5      	cmp	r5, r4
 80067ea:	d10b      	bne.n	8006804 <_free_r+0x78>
 80067ec:	6824      	ldr	r4, [r4, #0]
 80067ee:	4421      	add	r1, r4
 80067f0:	1854      	adds	r4, r2, r1
 80067f2:	42a3      	cmp	r3, r4
 80067f4:	6011      	str	r1, [r2, #0]
 80067f6:	d1dd      	bne.n	80067b4 <_free_r+0x28>
 80067f8:	681c      	ldr	r4, [r3, #0]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	6053      	str	r3, [r2, #4]
 80067fe:	4421      	add	r1, r4
 8006800:	6011      	str	r1, [r2, #0]
 8006802:	e7d7      	b.n	80067b4 <_free_r+0x28>
 8006804:	d902      	bls.n	800680c <_free_r+0x80>
 8006806:	230c      	movs	r3, #12
 8006808:	6003      	str	r3, [r0, #0]
 800680a:	e7d3      	b.n	80067b4 <_free_r+0x28>
 800680c:	6825      	ldr	r5, [r4, #0]
 800680e:	1961      	adds	r1, r4, r5
 8006810:	428b      	cmp	r3, r1
 8006812:	bf04      	itt	eq
 8006814:	6819      	ldreq	r1, [r3, #0]
 8006816:	685b      	ldreq	r3, [r3, #4]
 8006818:	6063      	str	r3, [r4, #4]
 800681a:	bf04      	itt	eq
 800681c:	1949      	addeq	r1, r1, r5
 800681e:	6021      	streq	r1, [r4, #0]
 8006820:	6054      	str	r4, [r2, #4]
 8006822:	e7c7      	b.n	80067b4 <_free_r+0x28>
 8006824:	b003      	add	sp, #12
 8006826:	bd30      	pop	{r4, r5, pc}
 8006828:	200004e0 	.word	0x200004e0

0800682c <_malloc_r>:
 800682c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800682e:	1ccd      	adds	r5, r1, #3
 8006830:	f025 0503 	bic.w	r5, r5, #3
 8006834:	3508      	adds	r5, #8
 8006836:	2d0c      	cmp	r5, #12
 8006838:	bf38      	it	cc
 800683a:	250c      	movcc	r5, #12
 800683c:	2d00      	cmp	r5, #0
 800683e:	4606      	mov	r6, r0
 8006840:	db01      	blt.n	8006846 <_malloc_r+0x1a>
 8006842:	42a9      	cmp	r1, r5
 8006844:	d903      	bls.n	800684e <_malloc_r+0x22>
 8006846:	230c      	movs	r3, #12
 8006848:	6033      	str	r3, [r6, #0]
 800684a:	2000      	movs	r0, #0
 800684c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800684e:	f001 fe87 	bl	8008560 <__malloc_lock>
 8006852:	4921      	ldr	r1, [pc, #132]	; (80068d8 <_malloc_r+0xac>)
 8006854:	680a      	ldr	r2, [r1, #0]
 8006856:	4614      	mov	r4, r2
 8006858:	b99c      	cbnz	r4, 8006882 <_malloc_r+0x56>
 800685a:	4f20      	ldr	r7, [pc, #128]	; (80068dc <_malloc_r+0xb0>)
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	b923      	cbnz	r3, 800686a <_malloc_r+0x3e>
 8006860:	4621      	mov	r1, r4
 8006862:	4630      	mov	r0, r6
 8006864:	f000 f8e0 	bl	8006a28 <_sbrk_r>
 8006868:	6038      	str	r0, [r7, #0]
 800686a:	4629      	mov	r1, r5
 800686c:	4630      	mov	r0, r6
 800686e:	f000 f8db 	bl	8006a28 <_sbrk_r>
 8006872:	1c43      	adds	r3, r0, #1
 8006874:	d123      	bne.n	80068be <_malloc_r+0x92>
 8006876:	230c      	movs	r3, #12
 8006878:	6033      	str	r3, [r6, #0]
 800687a:	4630      	mov	r0, r6
 800687c:	f001 fe76 	bl	800856c <__malloc_unlock>
 8006880:	e7e3      	b.n	800684a <_malloc_r+0x1e>
 8006882:	6823      	ldr	r3, [r4, #0]
 8006884:	1b5b      	subs	r3, r3, r5
 8006886:	d417      	bmi.n	80068b8 <_malloc_r+0x8c>
 8006888:	2b0b      	cmp	r3, #11
 800688a:	d903      	bls.n	8006894 <_malloc_r+0x68>
 800688c:	6023      	str	r3, [r4, #0]
 800688e:	441c      	add	r4, r3
 8006890:	6025      	str	r5, [r4, #0]
 8006892:	e004      	b.n	800689e <_malloc_r+0x72>
 8006894:	6863      	ldr	r3, [r4, #4]
 8006896:	42a2      	cmp	r2, r4
 8006898:	bf0c      	ite	eq
 800689a:	600b      	streq	r3, [r1, #0]
 800689c:	6053      	strne	r3, [r2, #4]
 800689e:	4630      	mov	r0, r6
 80068a0:	f001 fe64 	bl	800856c <__malloc_unlock>
 80068a4:	f104 000b 	add.w	r0, r4, #11
 80068a8:	1d23      	adds	r3, r4, #4
 80068aa:	f020 0007 	bic.w	r0, r0, #7
 80068ae:	1ac2      	subs	r2, r0, r3
 80068b0:	d0cc      	beq.n	800684c <_malloc_r+0x20>
 80068b2:	1a1b      	subs	r3, r3, r0
 80068b4:	50a3      	str	r3, [r4, r2]
 80068b6:	e7c9      	b.n	800684c <_malloc_r+0x20>
 80068b8:	4622      	mov	r2, r4
 80068ba:	6864      	ldr	r4, [r4, #4]
 80068bc:	e7cc      	b.n	8006858 <_malloc_r+0x2c>
 80068be:	1cc4      	adds	r4, r0, #3
 80068c0:	f024 0403 	bic.w	r4, r4, #3
 80068c4:	42a0      	cmp	r0, r4
 80068c6:	d0e3      	beq.n	8006890 <_malloc_r+0x64>
 80068c8:	1a21      	subs	r1, r4, r0
 80068ca:	4630      	mov	r0, r6
 80068cc:	f000 f8ac 	bl	8006a28 <_sbrk_r>
 80068d0:	3001      	adds	r0, #1
 80068d2:	d1dd      	bne.n	8006890 <_malloc_r+0x64>
 80068d4:	e7cf      	b.n	8006876 <_malloc_r+0x4a>
 80068d6:	bf00      	nop
 80068d8:	200004e0 	.word	0x200004e0
 80068dc:	200004e4 	.word	0x200004e4

080068e0 <iprintf>:
 80068e0:	b40f      	push	{r0, r1, r2, r3}
 80068e2:	4b0a      	ldr	r3, [pc, #40]	; (800690c <iprintf+0x2c>)
 80068e4:	b513      	push	{r0, r1, r4, lr}
 80068e6:	681c      	ldr	r4, [r3, #0]
 80068e8:	b124      	cbz	r4, 80068f4 <iprintf+0x14>
 80068ea:	69a3      	ldr	r3, [r4, #24]
 80068ec:	b913      	cbnz	r3, 80068f4 <iprintf+0x14>
 80068ee:	4620      	mov	r0, r4
 80068f0:	f001 f9b0 	bl	8007c54 <__sinit>
 80068f4:	ab05      	add	r3, sp, #20
 80068f6:	9a04      	ldr	r2, [sp, #16]
 80068f8:	68a1      	ldr	r1, [r4, #8]
 80068fa:	9301      	str	r3, [sp, #4]
 80068fc:	4620      	mov	r0, r4
 80068fe:	f002 fc8b 	bl	8009218 <_vfiprintf_r>
 8006902:	b002      	add	sp, #8
 8006904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006908:	b004      	add	sp, #16
 800690a:	4770      	bx	lr
 800690c:	2000019c 	.word	0x2000019c

08006910 <putchar>:
 8006910:	4b09      	ldr	r3, [pc, #36]	; (8006938 <putchar+0x28>)
 8006912:	b513      	push	{r0, r1, r4, lr}
 8006914:	681c      	ldr	r4, [r3, #0]
 8006916:	4601      	mov	r1, r0
 8006918:	b134      	cbz	r4, 8006928 <putchar+0x18>
 800691a:	69a3      	ldr	r3, [r4, #24]
 800691c:	b923      	cbnz	r3, 8006928 <putchar+0x18>
 800691e:	9001      	str	r0, [sp, #4]
 8006920:	4620      	mov	r0, r4
 8006922:	f001 f997 	bl	8007c54 <__sinit>
 8006926:	9901      	ldr	r1, [sp, #4]
 8006928:	68a2      	ldr	r2, [r4, #8]
 800692a:	4620      	mov	r0, r4
 800692c:	b002      	add	sp, #8
 800692e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006932:	f002 bf35 	b.w	80097a0 <_putc_r>
 8006936:	bf00      	nop
 8006938:	2000019c 	.word	0x2000019c

0800693c <_puts_r>:
 800693c:	b570      	push	{r4, r5, r6, lr}
 800693e:	460e      	mov	r6, r1
 8006940:	4605      	mov	r5, r0
 8006942:	b118      	cbz	r0, 800694c <_puts_r+0x10>
 8006944:	6983      	ldr	r3, [r0, #24]
 8006946:	b90b      	cbnz	r3, 800694c <_puts_r+0x10>
 8006948:	f001 f984 	bl	8007c54 <__sinit>
 800694c:	69ab      	ldr	r3, [r5, #24]
 800694e:	68ac      	ldr	r4, [r5, #8]
 8006950:	b913      	cbnz	r3, 8006958 <_puts_r+0x1c>
 8006952:	4628      	mov	r0, r5
 8006954:	f001 f97e 	bl	8007c54 <__sinit>
 8006958:	4b2c      	ldr	r3, [pc, #176]	; (8006a0c <_puts_r+0xd0>)
 800695a:	429c      	cmp	r4, r3
 800695c:	d120      	bne.n	80069a0 <_puts_r+0x64>
 800695e:	686c      	ldr	r4, [r5, #4]
 8006960:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006962:	07db      	lsls	r3, r3, #31
 8006964:	d405      	bmi.n	8006972 <_puts_r+0x36>
 8006966:	89a3      	ldrh	r3, [r4, #12]
 8006968:	0598      	lsls	r0, r3, #22
 800696a:	d402      	bmi.n	8006972 <_puts_r+0x36>
 800696c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800696e:	f001 fd7e 	bl	800846e <__retarget_lock_acquire_recursive>
 8006972:	89a3      	ldrh	r3, [r4, #12]
 8006974:	0719      	lsls	r1, r3, #28
 8006976:	d51d      	bpl.n	80069b4 <_puts_r+0x78>
 8006978:	6923      	ldr	r3, [r4, #16]
 800697a:	b1db      	cbz	r3, 80069b4 <_puts_r+0x78>
 800697c:	3e01      	subs	r6, #1
 800697e:	68a3      	ldr	r3, [r4, #8]
 8006980:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006984:	3b01      	subs	r3, #1
 8006986:	60a3      	str	r3, [r4, #8]
 8006988:	bb39      	cbnz	r1, 80069da <_puts_r+0x9e>
 800698a:	2b00      	cmp	r3, #0
 800698c:	da38      	bge.n	8006a00 <_puts_r+0xc4>
 800698e:	4622      	mov	r2, r4
 8006990:	210a      	movs	r1, #10
 8006992:	4628      	mov	r0, r5
 8006994:	f000 ff84 	bl	80078a0 <__swbuf_r>
 8006998:	3001      	adds	r0, #1
 800699a:	d011      	beq.n	80069c0 <_puts_r+0x84>
 800699c:	250a      	movs	r5, #10
 800699e:	e011      	b.n	80069c4 <_puts_r+0x88>
 80069a0:	4b1b      	ldr	r3, [pc, #108]	; (8006a10 <_puts_r+0xd4>)
 80069a2:	429c      	cmp	r4, r3
 80069a4:	d101      	bne.n	80069aa <_puts_r+0x6e>
 80069a6:	68ac      	ldr	r4, [r5, #8]
 80069a8:	e7da      	b.n	8006960 <_puts_r+0x24>
 80069aa:	4b1a      	ldr	r3, [pc, #104]	; (8006a14 <_puts_r+0xd8>)
 80069ac:	429c      	cmp	r4, r3
 80069ae:	bf08      	it	eq
 80069b0:	68ec      	ldreq	r4, [r5, #12]
 80069b2:	e7d5      	b.n	8006960 <_puts_r+0x24>
 80069b4:	4621      	mov	r1, r4
 80069b6:	4628      	mov	r0, r5
 80069b8:	f000 ffc4 	bl	8007944 <__swsetup_r>
 80069bc:	2800      	cmp	r0, #0
 80069be:	d0dd      	beq.n	800697c <_puts_r+0x40>
 80069c0:	f04f 35ff 	mov.w	r5, #4294967295
 80069c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80069c6:	07da      	lsls	r2, r3, #31
 80069c8:	d405      	bmi.n	80069d6 <_puts_r+0x9a>
 80069ca:	89a3      	ldrh	r3, [r4, #12]
 80069cc:	059b      	lsls	r3, r3, #22
 80069ce:	d402      	bmi.n	80069d6 <_puts_r+0x9a>
 80069d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80069d2:	f001 fd4d 	bl	8008470 <__retarget_lock_release_recursive>
 80069d6:	4628      	mov	r0, r5
 80069d8:	bd70      	pop	{r4, r5, r6, pc}
 80069da:	2b00      	cmp	r3, #0
 80069dc:	da04      	bge.n	80069e8 <_puts_r+0xac>
 80069de:	69a2      	ldr	r2, [r4, #24]
 80069e0:	429a      	cmp	r2, r3
 80069e2:	dc06      	bgt.n	80069f2 <_puts_r+0xb6>
 80069e4:	290a      	cmp	r1, #10
 80069e6:	d004      	beq.n	80069f2 <_puts_r+0xb6>
 80069e8:	6823      	ldr	r3, [r4, #0]
 80069ea:	1c5a      	adds	r2, r3, #1
 80069ec:	6022      	str	r2, [r4, #0]
 80069ee:	7019      	strb	r1, [r3, #0]
 80069f0:	e7c5      	b.n	800697e <_puts_r+0x42>
 80069f2:	4622      	mov	r2, r4
 80069f4:	4628      	mov	r0, r5
 80069f6:	f000 ff53 	bl	80078a0 <__swbuf_r>
 80069fa:	3001      	adds	r0, #1
 80069fc:	d1bf      	bne.n	800697e <_puts_r+0x42>
 80069fe:	e7df      	b.n	80069c0 <_puts_r+0x84>
 8006a00:	6823      	ldr	r3, [r4, #0]
 8006a02:	250a      	movs	r5, #10
 8006a04:	1c5a      	adds	r2, r3, #1
 8006a06:	6022      	str	r2, [r4, #0]
 8006a08:	701d      	strb	r5, [r3, #0]
 8006a0a:	e7db      	b.n	80069c4 <_puts_r+0x88>
 8006a0c:	0800a10c 	.word	0x0800a10c
 8006a10:	0800a12c 	.word	0x0800a12c
 8006a14:	0800a0ec 	.word	0x0800a0ec

08006a18 <puts>:
 8006a18:	4b02      	ldr	r3, [pc, #8]	; (8006a24 <puts+0xc>)
 8006a1a:	4601      	mov	r1, r0
 8006a1c:	6818      	ldr	r0, [r3, #0]
 8006a1e:	f7ff bf8d 	b.w	800693c <_puts_r>
 8006a22:	bf00      	nop
 8006a24:	2000019c 	.word	0x2000019c

08006a28 <_sbrk_r>:
 8006a28:	b538      	push	{r3, r4, r5, lr}
 8006a2a:	4d06      	ldr	r5, [pc, #24]	; (8006a44 <_sbrk_r+0x1c>)
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	4604      	mov	r4, r0
 8006a30:	4608      	mov	r0, r1
 8006a32:	602b      	str	r3, [r5, #0]
 8006a34:	f7fa f846 	bl	8000ac4 <_sbrk>
 8006a38:	1c43      	adds	r3, r0, #1
 8006a3a:	d102      	bne.n	8006a42 <_sbrk_r+0x1a>
 8006a3c:	682b      	ldr	r3, [r5, #0]
 8006a3e:	b103      	cbz	r3, 8006a42 <_sbrk_r+0x1a>
 8006a40:	6023      	str	r3, [r4, #0]
 8006a42:	bd38      	pop	{r3, r4, r5, pc}
 8006a44:	20001948 	.word	0x20001948

08006a48 <strcpy>:
 8006a48:	4603      	mov	r3, r0
 8006a4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a4e:	f803 2b01 	strb.w	r2, [r3], #1
 8006a52:	2a00      	cmp	r2, #0
 8006a54:	d1f9      	bne.n	8006a4a <strcpy+0x2>
 8006a56:	4770      	bx	lr

08006a58 <sulp>:
 8006a58:	b570      	push	{r4, r5, r6, lr}
 8006a5a:	4604      	mov	r4, r0
 8006a5c:	460d      	mov	r5, r1
 8006a5e:	4616      	mov	r6, r2
 8006a60:	ec45 4b10 	vmov	d0, r4, r5
 8006a64:	f002 f8f4 	bl	8008c50 <__ulp>
 8006a68:	b17e      	cbz	r6, 8006a8a <sulp+0x32>
 8006a6a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006a6e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	dd09      	ble.n	8006a8a <sulp+0x32>
 8006a76:	051b      	lsls	r3, r3, #20
 8006a78:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8006a7c:	2000      	movs	r0, #0
 8006a7e:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8006a82:	ec41 0b17 	vmov	d7, r0, r1
 8006a86:	ee20 0b07 	vmul.f64	d0, d0, d7
 8006a8a:	bd70      	pop	{r4, r5, r6, pc}
 8006a8c:	0000      	movs	r0, r0
	...

08006a90 <_strtod_l>:
 8006a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a94:	ed2d 8b0c 	vpush	{d8-d13}
 8006a98:	b09d      	sub	sp, #116	; 0x74
 8006a9a:	461f      	mov	r7, r3
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	9318      	str	r3, [sp, #96]	; 0x60
 8006aa0:	4ba6      	ldr	r3, [pc, #664]	; (8006d3c <_strtod_l+0x2ac>)
 8006aa2:	9213      	str	r2, [sp, #76]	; 0x4c
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	9308      	str	r3, [sp, #32]
 8006aa8:	4604      	mov	r4, r0
 8006aaa:	4618      	mov	r0, r3
 8006aac:	468a      	mov	sl, r1
 8006aae:	f7f9 fbd1 	bl	8000254 <strlen>
 8006ab2:	f04f 0800 	mov.w	r8, #0
 8006ab6:	4605      	mov	r5, r0
 8006ab8:	f04f 0900 	mov.w	r9, #0
 8006abc:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8006ac0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006ac2:	781a      	ldrb	r2, [r3, #0]
 8006ac4:	2a2b      	cmp	r2, #43	; 0x2b
 8006ac6:	d04d      	beq.n	8006b64 <_strtod_l+0xd4>
 8006ac8:	d83a      	bhi.n	8006b40 <_strtod_l+0xb0>
 8006aca:	2a0d      	cmp	r2, #13
 8006acc:	d833      	bhi.n	8006b36 <_strtod_l+0xa6>
 8006ace:	2a08      	cmp	r2, #8
 8006ad0:	d833      	bhi.n	8006b3a <_strtod_l+0xaa>
 8006ad2:	2a00      	cmp	r2, #0
 8006ad4:	d03d      	beq.n	8006b52 <_strtod_l+0xc2>
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ada:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006adc:	7833      	ldrb	r3, [r6, #0]
 8006ade:	2b30      	cmp	r3, #48	; 0x30
 8006ae0:	f040 80b6 	bne.w	8006c50 <_strtod_l+0x1c0>
 8006ae4:	7873      	ldrb	r3, [r6, #1]
 8006ae6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006aea:	2b58      	cmp	r3, #88	; 0x58
 8006aec:	d16d      	bne.n	8006bca <_strtod_l+0x13a>
 8006aee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006af0:	9301      	str	r3, [sp, #4]
 8006af2:	ab18      	add	r3, sp, #96	; 0x60
 8006af4:	9702      	str	r7, [sp, #8]
 8006af6:	9300      	str	r3, [sp, #0]
 8006af8:	4a91      	ldr	r2, [pc, #580]	; (8006d40 <_strtod_l+0x2b0>)
 8006afa:	ab19      	add	r3, sp, #100	; 0x64
 8006afc:	a917      	add	r1, sp, #92	; 0x5c
 8006afe:	4620      	mov	r0, r4
 8006b00:	f001 f9ac 	bl	8007e5c <__gethex>
 8006b04:	f010 0507 	ands.w	r5, r0, #7
 8006b08:	4607      	mov	r7, r0
 8006b0a:	d005      	beq.n	8006b18 <_strtod_l+0x88>
 8006b0c:	2d06      	cmp	r5, #6
 8006b0e:	d12b      	bne.n	8006b68 <_strtod_l+0xd8>
 8006b10:	3601      	adds	r6, #1
 8006b12:	2300      	movs	r3, #0
 8006b14:	9617      	str	r6, [sp, #92]	; 0x5c
 8006b16:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b18:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	f040 856e 	bne.w	80075fc <_strtod_l+0xb6c>
 8006b20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b22:	b1e3      	cbz	r3, 8006b5e <_strtod_l+0xce>
 8006b24:	ec49 8b17 	vmov	d7, r8, r9
 8006b28:	eeb1 0b47 	vneg.f64	d0, d7
 8006b2c:	b01d      	add	sp, #116	; 0x74
 8006b2e:	ecbd 8b0c 	vpop	{d8-d13}
 8006b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b36:	2a20      	cmp	r2, #32
 8006b38:	d1cd      	bne.n	8006ad6 <_strtod_l+0x46>
 8006b3a:	3301      	adds	r3, #1
 8006b3c:	9317      	str	r3, [sp, #92]	; 0x5c
 8006b3e:	e7bf      	b.n	8006ac0 <_strtod_l+0x30>
 8006b40:	2a2d      	cmp	r2, #45	; 0x2d
 8006b42:	d1c8      	bne.n	8006ad6 <_strtod_l+0x46>
 8006b44:	2201      	movs	r2, #1
 8006b46:	920b      	str	r2, [sp, #44]	; 0x2c
 8006b48:	1c5a      	adds	r2, r3, #1
 8006b4a:	9217      	str	r2, [sp, #92]	; 0x5c
 8006b4c:	785b      	ldrb	r3, [r3, #1]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d1c3      	bne.n	8006ada <_strtod_l+0x4a>
 8006b52:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006b54:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	f040 854d 	bne.w	80075f8 <_strtod_l+0xb68>
 8006b5e:	ec49 8b10 	vmov	d0, r8, r9
 8006b62:	e7e3      	b.n	8006b2c <_strtod_l+0x9c>
 8006b64:	2200      	movs	r2, #0
 8006b66:	e7ee      	b.n	8006b46 <_strtod_l+0xb6>
 8006b68:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006b6a:	b13a      	cbz	r2, 8006b7c <_strtod_l+0xec>
 8006b6c:	2135      	movs	r1, #53	; 0x35
 8006b6e:	a81a      	add	r0, sp, #104	; 0x68
 8006b70:	f002 f97a 	bl	8008e68 <__copybits>
 8006b74:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006b76:	4620      	mov	r0, r4
 8006b78:	f001 fd3e 	bl	80085f8 <_Bfree>
 8006b7c:	3d01      	subs	r5, #1
 8006b7e:	2d05      	cmp	r5, #5
 8006b80:	d807      	bhi.n	8006b92 <_strtod_l+0x102>
 8006b82:	e8df f005 	tbb	[pc, r5]
 8006b86:	0b0e      	.short	0x0b0e
 8006b88:	030e1d18 	.word	0x030e1d18
 8006b8c:	f04f 0900 	mov.w	r9, #0
 8006b90:	46c8      	mov	r8, r9
 8006b92:	073b      	lsls	r3, r7, #28
 8006b94:	d5c0      	bpl.n	8006b18 <_strtod_l+0x88>
 8006b96:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8006b9a:	e7bd      	b.n	8006b18 <_strtod_l+0x88>
 8006b9c:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 8006ba0:	e7f7      	b.n	8006b92 <_strtod_l+0x102>
 8006ba2:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 8006ba6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006ba8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006bac:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006bb0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8006bb4:	e7ed      	b.n	8006b92 <_strtod_l+0x102>
 8006bb6:	f8df 918c 	ldr.w	r9, [pc, #396]	; 8006d44 <_strtod_l+0x2b4>
 8006bba:	f04f 0800 	mov.w	r8, #0
 8006bbe:	e7e8      	b.n	8006b92 <_strtod_l+0x102>
 8006bc0:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006bc4:	f04f 38ff 	mov.w	r8, #4294967295
 8006bc8:	e7e3      	b.n	8006b92 <_strtod_l+0x102>
 8006bca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006bcc:	1c5a      	adds	r2, r3, #1
 8006bce:	9217      	str	r2, [sp, #92]	; 0x5c
 8006bd0:	785b      	ldrb	r3, [r3, #1]
 8006bd2:	2b30      	cmp	r3, #48	; 0x30
 8006bd4:	d0f9      	beq.n	8006bca <_strtod_l+0x13a>
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d09e      	beq.n	8006b18 <_strtod_l+0x88>
 8006bda:	2301      	movs	r3, #1
 8006bdc:	9306      	str	r3, [sp, #24]
 8006bde:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006be0:	930c      	str	r3, [sp, #48]	; 0x30
 8006be2:	2300      	movs	r3, #0
 8006be4:	9304      	str	r3, [sp, #16]
 8006be6:	930a      	str	r3, [sp, #40]	; 0x28
 8006be8:	461e      	mov	r6, r3
 8006bea:	220a      	movs	r2, #10
 8006bec:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006bee:	f890 b000 	ldrb.w	fp, [r0]
 8006bf2:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 8006bf6:	b2d9      	uxtb	r1, r3
 8006bf8:	2909      	cmp	r1, #9
 8006bfa:	d92b      	bls.n	8006c54 <_strtod_l+0x1c4>
 8006bfc:	9908      	ldr	r1, [sp, #32]
 8006bfe:	462a      	mov	r2, r5
 8006c00:	f002 fe67 	bl	80098d2 <strncmp>
 8006c04:	2800      	cmp	r0, #0
 8006c06:	d035      	beq.n	8006c74 <_strtod_l+0x1e4>
 8006c08:	2000      	movs	r0, #0
 8006c0a:	465a      	mov	r2, fp
 8006c0c:	4633      	mov	r3, r6
 8006c0e:	4683      	mov	fp, r0
 8006c10:	4601      	mov	r1, r0
 8006c12:	2a65      	cmp	r2, #101	; 0x65
 8006c14:	d001      	beq.n	8006c1a <_strtod_l+0x18a>
 8006c16:	2a45      	cmp	r2, #69	; 0x45
 8006c18:	d118      	bne.n	8006c4c <_strtod_l+0x1bc>
 8006c1a:	b91b      	cbnz	r3, 8006c24 <_strtod_l+0x194>
 8006c1c:	9b06      	ldr	r3, [sp, #24]
 8006c1e:	4303      	orrs	r3, r0
 8006c20:	d097      	beq.n	8006b52 <_strtod_l+0xc2>
 8006c22:	2300      	movs	r3, #0
 8006c24:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 8006c28:	f10a 0201 	add.w	r2, sl, #1
 8006c2c:	9217      	str	r2, [sp, #92]	; 0x5c
 8006c2e:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8006c32:	2a2b      	cmp	r2, #43	; 0x2b
 8006c34:	d077      	beq.n	8006d26 <_strtod_l+0x296>
 8006c36:	2a2d      	cmp	r2, #45	; 0x2d
 8006c38:	d07d      	beq.n	8006d36 <_strtod_l+0x2a6>
 8006c3a:	f04f 0e00 	mov.w	lr, #0
 8006c3e:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8006c42:	2d09      	cmp	r5, #9
 8006c44:	f240 8084 	bls.w	8006d50 <_strtod_l+0x2c0>
 8006c48:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8006c4c:	2500      	movs	r5, #0
 8006c4e:	e09f      	b.n	8006d90 <_strtod_l+0x300>
 8006c50:	2300      	movs	r3, #0
 8006c52:	e7c3      	b.n	8006bdc <_strtod_l+0x14c>
 8006c54:	2e08      	cmp	r6, #8
 8006c56:	bfd5      	itete	le
 8006c58:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8006c5a:	9904      	ldrgt	r1, [sp, #16]
 8006c5c:	fb02 3301 	mlale	r3, r2, r1, r3
 8006c60:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006c64:	f100 0001 	add.w	r0, r0, #1
 8006c68:	bfd4      	ite	le
 8006c6a:	930a      	strle	r3, [sp, #40]	; 0x28
 8006c6c:	9304      	strgt	r3, [sp, #16]
 8006c6e:	3601      	adds	r6, #1
 8006c70:	9017      	str	r0, [sp, #92]	; 0x5c
 8006c72:	e7bb      	b.n	8006bec <_strtod_l+0x15c>
 8006c74:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006c76:	195a      	adds	r2, r3, r5
 8006c78:	9217      	str	r2, [sp, #92]	; 0x5c
 8006c7a:	5d5a      	ldrb	r2, [r3, r5]
 8006c7c:	b3ae      	cbz	r6, 8006cea <_strtod_l+0x25a>
 8006c7e:	4683      	mov	fp, r0
 8006c80:	4633      	mov	r3, r6
 8006c82:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006c86:	2909      	cmp	r1, #9
 8006c88:	d912      	bls.n	8006cb0 <_strtod_l+0x220>
 8006c8a:	2101      	movs	r1, #1
 8006c8c:	e7c1      	b.n	8006c12 <_strtod_l+0x182>
 8006c8e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006c90:	1c5a      	adds	r2, r3, #1
 8006c92:	9217      	str	r2, [sp, #92]	; 0x5c
 8006c94:	785a      	ldrb	r2, [r3, #1]
 8006c96:	3001      	adds	r0, #1
 8006c98:	2a30      	cmp	r2, #48	; 0x30
 8006c9a:	d0f8      	beq.n	8006c8e <_strtod_l+0x1fe>
 8006c9c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006ca0:	2b08      	cmp	r3, #8
 8006ca2:	f200 84b0 	bhi.w	8007606 <_strtod_l+0xb76>
 8006ca6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006ca8:	930c      	str	r3, [sp, #48]	; 0x30
 8006caa:	4683      	mov	fp, r0
 8006cac:	2000      	movs	r0, #0
 8006cae:	4603      	mov	r3, r0
 8006cb0:	3a30      	subs	r2, #48	; 0x30
 8006cb2:	f100 0101 	add.w	r1, r0, #1
 8006cb6:	d012      	beq.n	8006cde <_strtod_l+0x24e>
 8006cb8:	448b      	add	fp, r1
 8006cba:	eb00 0c03 	add.w	ip, r0, r3
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	250a      	movs	r5, #10
 8006cc2:	4561      	cmp	r1, ip
 8006cc4:	d113      	bne.n	8006cee <_strtod_l+0x25e>
 8006cc6:	1819      	adds	r1, r3, r0
 8006cc8:	2908      	cmp	r1, #8
 8006cca:	f103 0301 	add.w	r3, r3, #1
 8006cce:	4403      	add	r3, r0
 8006cd0:	dc1d      	bgt.n	8006d0e <_strtod_l+0x27e>
 8006cd2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006cd4:	210a      	movs	r1, #10
 8006cd6:	fb01 2200 	mla	r2, r1, r0, r2
 8006cda:	920a      	str	r2, [sp, #40]	; 0x28
 8006cdc:	2100      	movs	r1, #0
 8006cde:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006ce0:	1c50      	adds	r0, r2, #1
 8006ce2:	9017      	str	r0, [sp, #92]	; 0x5c
 8006ce4:	7852      	ldrb	r2, [r2, #1]
 8006ce6:	4608      	mov	r0, r1
 8006ce8:	e7cb      	b.n	8006c82 <_strtod_l+0x1f2>
 8006cea:	4630      	mov	r0, r6
 8006cec:	e7d4      	b.n	8006c98 <_strtod_l+0x208>
 8006cee:	2908      	cmp	r1, #8
 8006cf0:	dc04      	bgt.n	8006cfc <_strtod_l+0x26c>
 8006cf2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006cf4:	436f      	muls	r7, r5
 8006cf6:	970a      	str	r7, [sp, #40]	; 0x28
 8006cf8:	3101      	adds	r1, #1
 8006cfa:	e7e2      	b.n	8006cc2 <_strtod_l+0x232>
 8006cfc:	f101 0e01 	add.w	lr, r1, #1
 8006d00:	f1be 0f10 	cmp.w	lr, #16
 8006d04:	bfde      	ittt	le
 8006d06:	9f04      	ldrle	r7, [sp, #16]
 8006d08:	436f      	mulle	r7, r5
 8006d0a:	9704      	strle	r7, [sp, #16]
 8006d0c:	e7f4      	b.n	8006cf8 <_strtod_l+0x268>
 8006d0e:	2b10      	cmp	r3, #16
 8006d10:	bfdf      	itttt	le
 8006d12:	9804      	ldrle	r0, [sp, #16]
 8006d14:	210a      	movle	r1, #10
 8006d16:	fb01 2200 	mlale	r2, r1, r0, r2
 8006d1a:	9204      	strle	r2, [sp, #16]
 8006d1c:	e7de      	b.n	8006cdc <_strtod_l+0x24c>
 8006d1e:	f04f 0b00 	mov.w	fp, #0
 8006d22:	2101      	movs	r1, #1
 8006d24:	e77a      	b.n	8006c1c <_strtod_l+0x18c>
 8006d26:	f04f 0e00 	mov.w	lr, #0
 8006d2a:	f10a 0202 	add.w	r2, sl, #2
 8006d2e:	9217      	str	r2, [sp, #92]	; 0x5c
 8006d30:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8006d34:	e783      	b.n	8006c3e <_strtod_l+0x1ae>
 8006d36:	f04f 0e01 	mov.w	lr, #1
 8006d3a:	e7f6      	b.n	8006d2a <_strtod_l+0x29a>
 8006d3c:	0800a1c8 	.word	0x0800a1c8
 8006d40:	08009f94 	.word	0x08009f94
 8006d44:	7ff00000 	.word	0x7ff00000
 8006d48:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006d4a:	1c55      	adds	r5, r2, #1
 8006d4c:	9517      	str	r5, [sp, #92]	; 0x5c
 8006d4e:	7852      	ldrb	r2, [r2, #1]
 8006d50:	2a30      	cmp	r2, #48	; 0x30
 8006d52:	d0f9      	beq.n	8006d48 <_strtod_l+0x2b8>
 8006d54:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8006d58:	2d08      	cmp	r5, #8
 8006d5a:	f63f af77 	bhi.w	8006c4c <_strtod_l+0x1bc>
 8006d5e:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8006d62:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006d64:	9208      	str	r2, [sp, #32]
 8006d66:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006d68:	1c55      	adds	r5, r2, #1
 8006d6a:	9517      	str	r5, [sp, #92]	; 0x5c
 8006d6c:	7852      	ldrb	r2, [r2, #1]
 8006d6e:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8006d72:	2f09      	cmp	r7, #9
 8006d74:	d937      	bls.n	8006de6 <_strtod_l+0x356>
 8006d76:	9f08      	ldr	r7, [sp, #32]
 8006d78:	1bed      	subs	r5, r5, r7
 8006d7a:	2d08      	cmp	r5, #8
 8006d7c:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8006d80:	dc02      	bgt.n	8006d88 <_strtod_l+0x2f8>
 8006d82:	4565      	cmp	r5, ip
 8006d84:	bfa8      	it	ge
 8006d86:	4665      	movge	r5, ip
 8006d88:	f1be 0f00 	cmp.w	lr, #0
 8006d8c:	d000      	beq.n	8006d90 <_strtod_l+0x300>
 8006d8e:	426d      	negs	r5, r5
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d14f      	bne.n	8006e34 <_strtod_l+0x3a4>
 8006d94:	9b06      	ldr	r3, [sp, #24]
 8006d96:	4303      	orrs	r3, r0
 8006d98:	f47f aebe 	bne.w	8006b18 <_strtod_l+0x88>
 8006d9c:	2900      	cmp	r1, #0
 8006d9e:	f47f aed8 	bne.w	8006b52 <_strtod_l+0xc2>
 8006da2:	2a69      	cmp	r2, #105	; 0x69
 8006da4:	d027      	beq.n	8006df6 <_strtod_l+0x366>
 8006da6:	dc24      	bgt.n	8006df2 <_strtod_l+0x362>
 8006da8:	2a49      	cmp	r2, #73	; 0x49
 8006daa:	d024      	beq.n	8006df6 <_strtod_l+0x366>
 8006dac:	2a4e      	cmp	r2, #78	; 0x4e
 8006dae:	f47f aed0 	bne.w	8006b52 <_strtod_l+0xc2>
 8006db2:	499b      	ldr	r1, [pc, #620]	; (8007020 <_strtod_l+0x590>)
 8006db4:	a817      	add	r0, sp, #92	; 0x5c
 8006db6:	f001 faa9 	bl	800830c <__match>
 8006dba:	2800      	cmp	r0, #0
 8006dbc:	f43f aec9 	beq.w	8006b52 <_strtod_l+0xc2>
 8006dc0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	2b28      	cmp	r3, #40	; 0x28
 8006dc6:	d12d      	bne.n	8006e24 <_strtod_l+0x394>
 8006dc8:	4996      	ldr	r1, [pc, #600]	; (8007024 <_strtod_l+0x594>)
 8006dca:	aa1a      	add	r2, sp, #104	; 0x68
 8006dcc:	a817      	add	r0, sp, #92	; 0x5c
 8006dce:	f001 fab1 	bl	8008334 <__hexnan>
 8006dd2:	2805      	cmp	r0, #5
 8006dd4:	d126      	bne.n	8006e24 <_strtod_l+0x394>
 8006dd6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006dd8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006ddc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006de0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8006de4:	e698      	b.n	8006b18 <_strtod_l+0x88>
 8006de6:	250a      	movs	r5, #10
 8006de8:	fb05 250c 	mla	r5, r5, ip, r2
 8006dec:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8006df0:	e7b9      	b.n	8006d66 <_strtod_l+0x2d6>
 8006df2:	2a6e      	cmp	r2, #110	; 0x6e
 8006df4:	e7db      	b.n	8006dae <_strtod_l+0x31e>
 8006df6:	498c      	ldr	r1, [pc, #560]	; (8007028 <_strtod_l+0x598>)
 8006df8:	a817      	add	r0, sp, #92	; 0x5c
 8006dfa:	f001 fa87 	bl	800830c <__match>
 8006dfe:	2800      	cmp	r0, #0
 8006e00:	f43f aea7 	beq.w	8006b52 <_strtod_l+0xc2>
 8006e04:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006e06:	4989      	ldr	r1, [pc, #548]	; (800702c <_strtod_l+0x59c>)
 8006e08:	3b01      	subs	r3, #1
 8006e0a:	a817      	add	r0, sp, #92	; 0x5c
 8006e0c:	9317      	str	r3, [sp, #92]	; 0x5c
 8006e0e:	f001 fa7d 	bl	800830c <__match>
 8006e12:	b910      	cbnz	r0, 8006e1a <_strtod_l+0x38a>
 8006e14:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006e16:	3301      	adds	r3, #1
 8006e18:	9317      	str	r3, [sp, #92]	; 0x5c
 8006e1a:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8007040 <_strtod_l+0x5b0>
 8006e1e:	f04f 0800 	mov.w	r8, #0
 8006e22:	e679      	b.n	8006b18 <_strtod_l+0x88>
 8006e24:	4882      	ldr	r0, [pc, #520]	; (8007030 <_strtod_l+0x5a0>)
 8006e26:	f002 fd03 	bl	8009830 <nan>
 8006e2a:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006e2e:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006e32:	e671      	b.n	8006b18 <_strtod_l+0x88>
 8006e34:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8006e38:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006e3c:	eba5 020b 	sub.w	r2, r5, fp
 8006e40:	2e00      	cmp	r6, #0
 8006e42:	bf08      	it	eq
 8006e44:	461e      	moveq	r6, r3
 8006e46:	2b10      	cmp	r3, #16
 8006e48:	ed8d 7b08 	vstr	d7, [sp, #32]
 8006e4c:	9206      	str	r2, [sp, #24]
 8006e4e:	461a      	mov	r2, r3
 8006e50:	bfa8      	it	ge
 8006e52:	2210      	movge	r2, #16
 8006e54:	2b09      	cmp	r3, #9
 8006e56:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8006e5a:	dd0e      	ble.n	8006e7a <_strtod_l+0x3ea>
 8006e5c:	4975      	ldr	r1, [pc, #468]	; (8007034 <_strtod_l+0x5a4>)
 8006e5e:	eddd 7a04 	vldr	s15, [sp, #16]
 8006e62:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8006e66:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 8006e6a:	ed9d 5b08 	vldr	d5, [sp, #32]
 8006e6e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006e72:	eea5 7b06 	vfma.f64	d7, d5, d6
 8006e76:	ec59 8b17 	vmov	r8, r9, d7
 8006e7a:	2b0f      	cmp	r3, #15
 8006e7c:	dc37      	bgt.n	8006eee <_strtod_l+0x45e>
 8006e7e:	9906      	ldr	r1, [sp, #24]
 8006e80:	2900      	cmp	r1, #0
 8006e82:	f43f ae49 	beq.w	8006b18 <_strtod_l+0x88>
 8006e86:	dd23      	ble.n	8006ed0 <_strtod_l+0x440>
 8006e88:	2916      	cmp	r1, #22
 8006e8a:	dc0b      	bgt.n	8006ea4 <_strtod_l+0x414>
 8006e8c:	4b69      	ldr	r3, [pc, #420]	; (8007034 <_strtod_l+0x5a4>)
 8006e8e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8006e92:	ed93 7b00 	vldr	d7, [r3]
 8006e96:	ec49 8b16 	vmov	d6, r8, r9
 8006e9a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006e9e:	ec59 8b17 	vmov	r8, r9, d7
 8006ea2:	e639      	b.n	8006b18 <_strtod_l+0x88>
 8006ea4:	9806      	ldr	r0, [sp, #24]
 8006ea6:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8006eaa:	4281      	cmp	r1, r0
 8006eac:	db1f      	blt.n	8006eee <_strtod_l+0x45e>
 8006eae:	4a61      	ldr	r2, [pc, #388]	; (8007034 <_strtod_l+0x5a4>)
 8006eb0:	f1c3 030f 	rsb	r3, r3, #15
 8006eb4:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8006eb8:	ed91 7b00 	vldr	d7, [r1]
 8006ebc:	ec49 8b16 	vmov	d6, r8, r9
 8006ec0:	1ac3      	subs	r3, r0, r3
 8006ec2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8006ec6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006eca:	ed92 6b00 	vldr	d6, [r2]
 8006ece:	e7e4      	b.n	8006e9a <_strtod_l+0x40a>
 8006ed0:	9906      	ldr	r1, [sp, #24]
 8006ed2:	3116      	adds	r1, #22
 8006ed4:	db0b      	blt.n	8006eee <_strtod_l+0x45e>
 8006ed6:	4b57      	ldr	r3, [pc, #348]	; (8007034 <_strtod_l+0x5a4>)
 8006ed8:	ebab 0505 	sub.w	r5, fp, r5
 8006edc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006ee0:	ed95 7b00 	vldr	d7, [r5]
 8006ee4:	ec49 8b16 	vmov	d6, r8, r9
 8006ee8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8006eec:	e7d7      	b.n	8006e9e <_strtod_l+0x40e>
 8006eee:	9906      	ldr	r1, [sp, #24]
 8006ef0:	1a9a      	subs	r2, r3, r2
 8006ef2:	440a      	add	r2, r1
 8006ef4:	2a00      	cmp	r2, #0
 8006ef6:	dd74      	ble.n	8006fe2 <_strtod_l+0x552>
 8006ef8:	f012 000f 	ands.w	r0, r2, #15
 8006efc:	d00a      	beq.n	8006f14 <_strtod_l+0x484>
 8006efe:	494d      	ldr	r1, [pc, #308]	; (8007034 <_strtod_l+0x5a4>)
 8006f00:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8006f04:	ed91 7b00 	vldr	d7, [r1]
 8006f08:	ec49 8b16 	vmov	d6, r8, r9
 8006f0c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006f10:	ec59 8b17 	vmov	r8, r9, d7
 8006f14:	f032 020f 	bics.w	r2, r2, #15
 8006f18:	d04f      	beq.n	8006fba <_strtod_l+0x52a>
 8006f1a:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8006f1e:	dd22      	ble.n	8006f66 <_strtod_l+0x4d6>
 8006f20:	2500      	movs	r5, #0
 8006f22:	462e      	mov	r6, r5
 8006f24:	950a      	str	r5, [sp, #40]	; 0x28
 8006f26:	462f      	mov	r7, r5
 8006f28:	2322      	movs	r3, #34	; 0x22
 8006f2a:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8007040 <_strtod_l+0x5b0>
 8006f2e:	6023      	str	r3, [r4, #0]
 8006f30:	f04f 0800 	mov.w	r8, #0
 8006f34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	f43f adee 	beq.w	8006b18 <_strtod_l+0x88>
 8006f3c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006f3e:	4620      	mov	r0, r4
 8006f40:	f001 fb5a 	bl	80085f8 <_Bfree>
 8006f44:	4639      	mov	r1, r7
 8006f46:	4620      	mov	r0, r4
 8006f48:	f001 fb56 	bl	80085f8 <_Bfree>
 8006f4c:	4631      	mov	r1, r6
 8006f4e:	4620      	mov	r0, r4
 8006f50:	f001 fb52 	bl	80085f8 <_Bfree>
 8006f54:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006f56:	4620      	mov	r0, r4
 8006f58:	f001 fb4e 	bl	80085f8 <_Bfree>
 8006f5c:	4629      	mov	r1, r5
 8006f5e:	4620      	mov	r0, r4
 8006f60:	f001 fb4a 	bl	80085f8 <_Bfree>
 8006f64:	e5d8      	b.n	8006b18 <_strtod_l+0x88>
 8006f66:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8006f6a:	2000      	movs	r0, #0
 8006f6c:	4f32      	ldr	r7, [pc, #200]	; (8007038 <_strtod_l+0x5a8>)
 8006f6e:	1112      	asrs	r2, r2, #4
 8006f70:	4601      	mov	r1, r0
 8006f72:	2a01      	cmp	r2, #1
 8006f74:	dc24      	bgt.n	8006fc0 <_strtod_l+0x530>
 8006f76:	b108      	cbz	r0, 8006f7c <_strtod_l+0x4ec>
 8006f78:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006f7c:	4a2e      	ldr	r2, [pc, #184]	; (8007038 <_strtod_l+0x5a8>)
 8006f7e:	482f      	ldr	r0, [pc, #188]	; (800703c <_strtod_l+0x5ac>)
 8006f80:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8006f84:	ed91 7b00 	vldr	d7, [r1]
 8006f88:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006f8c:	ec49 8b16 	vmov	d6, r8, r9
 8006f90:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006f94:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006f98:	9905      	ldr	r1, [sp, #20]
 8006f9a:	4a29      	ldr	r2, [pc, #164]	; (8007040 <_strtod_l+0x5b0>)
 8006f9c:	400a      	ands	r2, r1
 8006f9e:	4282      	cmp	r2, r0
 8006fa0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006fa4:	d8bc      	bhi.n	8006f20 <_strtod_l+0x490>
 8006fa6:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8006faa:	4282      	cmp	r2, r0
 8006fac:	bf86      	itte	hi
 8006fae:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8007044 <_strtod_l+0x5b4>
 8006fb2:	f04f 38ff 	movhi.w	r8, #4294967295
 8006fb6:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8006fba:	2200      	movs	r2, #0
 8006fbc:	9204      	str	r2, [sp, #16]
 8006fbe:	e07f      	b.n	80070c0 <_strtod_l+0x630>
 8006fc0:	f012 0f01 	tst.w	r2, #1
 8006fc4:	d00a      	beq.n	8006fdc <_strtod_l+0x54c>
 8006fc6:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 8006fca:	ed90 7b00 	vldr	d7, [r0]
 8006fce:	ed9d 6b04 	vldr	d6, [sp, #16]
 8006fd2:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006fd6:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006fda:	2001      	movs	r0, #1
 8006fdc:	3101      	adds	r1, #1
 8006fde:	1052      	asrs	r2, r2, #1
 8006fe0:	e7c7      	b.n	8006f72 <_strtod_l+0x4e2>
 8006fe2:	d0ea      	beq.n	8006fba <_strtod_l+0x52a>
 8006fe4:	4252      	negs	r2, r2
 8006fe6:	f012 000f 	ands.w	r0, r2, #15
 8006fea:	d00a      	beq.n	8007002 <_strtod_l+0x572>
 8006fec:	4911      	ldr	r1, [pc, #68]	; (8007034 <_strtod_l+0x5a4>)
 8006fee:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8006ff2:	ed91 7b00 	vldr	d7, [r1]
 8006ff6:	ec49 8b16 	vmov	d6, r8, r9
 8006ffa:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8006ffe:	ec59 8b17 	vmov	r8, r9, d7
 8007002:	1112      	asrs	r2, r2, #4
 8007004:	d0d9      	beq.n	8006fba <_strtod_l+0x52a>
 8007006:	2a1f      	cmp	r2, #31
 8007008:	dd1e      	ble.n	8007048 <_strtod_l+0x5b8>
 800700a:	2500      	movs	r5, #0
 800700c:	462e      	mov	r6, r5
 800700e:	950a      	str	r5, [sp, #40]	; 0x28
 8007010:	462f      	mov	r7, r5
 8007012:	2322      	movs	r3, #34	; 0x22
 8007014:	f04f 0800 	mov.w	r8, #0
 8007018:	f04f 0900 	mov.w	r9, #0
 800701c:	6023      	str	r3, [r4, #0]
 800701e:	e789      	b.n	8006f34 <_strtod_l+0x4a4>
 8007020:	08009f91 	.word	0x08009f91
 8007024:	08009fa8 	.word	0x08009fa8
 8007028:	08009f88 	.word	0x08009f88
 800702c:	08009f8b 	.word	0x08009f8b
 8007030:	08009dfa 	.word	0x08009dfa
 8007034:	0800a280 	.word	0x0800a280
 8007038:	0800a258 	.word	0x0800a258
 800703c:	7ca00000 	.word	0x7ca00000
 8007040:	7ff00000 	.word	0x7ff00000
 8007044:	7fefffff 	.word	0x7fefffff
 8007048:	f012 0110 	ands.w	r1, r2, #16
 800704c:	bf18      	it	ne
 800704e:	216a      	movne	r1, #106	; 0x6a
 8007050:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8007054:	9104      	str	r1, [sp, #16]
 8007056:	49c0      	ldr	r1, [pc, #768]	; (8007358 <_strtod_l+0x8c8>)
 8007058:	2000      	movs	r0, #0
 800705a:	07d7      	lsls	r7, r2, #31
 800705c:	d508      	bpl.n	8007070 <_strtod_l+0x5e0>
 800705e:	ed9d 6b08 	vldr	d6, [sp, #32]
 8007062:	ed91 7b00 	vldr	d7, [r1]
 8007066:	ee26 7b07 	vmul.f64	d7, d6, d7
 800706a:	ed8d 7b08 	vstr	d7, [sp, #32]
 800706e:	2001      	movs	r0, #1
 8007070:	1052      	asrs	r2, r2, #1
 8007072:	f101 0108 	add.w	r1, r1, #8
 8007076:	d1f0      	bne.n	800705a <_strtod_l+0x5ca>
 8007078:	b108      	cbz	r0, 800707e <_strtod_l+0x5ee>
 800707a:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 800707e:	9a04      	ldr	r2, [sp, #16]
 8007080:	b1ba      	cbz	r2, 80070b2 <_strtod_l+0x622>
 8007082:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007086:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 800708a:	2a00      	cmp	r2, #0
 800708c:	4649      	mov	r1, r9
 800708e:	dd10      	ble.n	80070b2 <_strtod_l+0x622>
 8007090:	2a1f      	cmp	r2, #31
 8007092:	f340 8132 	ble.w	80072fa <_strtod_l+0x86a>
 8007096:	2a34      	cmp	r2, #52	; 0x34
 8007098:	bfde      	ittt	le
 800709a:	3a20      	suble	r2, #32
 800709c:	f04f 30ff 	movle.w	r0, #4294967295
 80070a0:	fa00 f202 	lslle.w	r2, r0, r2
 80070a4:	f04f 0800 	mov.w	r8, #0
 80070a8:	bfcc      	ite	gt
 80070aa:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80070ae:	ea02 0901 	andle.w	r9, r2, r1
 80070b2:	ec49 8b17 	vmov	d7, r8, r9
 80070b6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80070ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070be:	d0a4      	beq.n	800700a <_strtod_l+0x57a>
 80070c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80070c2:	9200      	str	r2, [sp, #0]
 80070c4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80070c6:	4632      	mov	r2, r6
 80070c8:	4620      	mov	r0, r4
 80070ca:	f001 fb01 	bl	80086d0 <__s2b>
 80070ce:	900a      	str	r0, [sp, #40]	; 0x28
 80070d0:	2800      	cmp	r0, #0
 80070d2:	f43f af25 	beq.w	8006f20 <_strtod_l+0x490>
 80070d6:	9b06      	ldr	r3, [sp, #24]
 80070d8:	ebab 0505 	sub.w	r5, fp, r5
 80070dc:	2b00      	cmp	r3, #0
 80070de:	bfb4      	ite	lt
 80070e0:	462b      	movlt	r3, r5
 80070e2:	2300      	movge	r3, #0
 80070e4:	930c      	str	r3, [sp, #48]	; 0x30
 80070e6:	9b06      	ldr	r3, [sp, #24]
 80070e8:	ed9f 9b95 	vldr	d9, [pc, #596]	; 8007340 <_strtod_l+0x8b0>
 80070ec:	ed9f ab96 	vldr	d10, [pc, #600]	; 8007348 <_strtod_l+0x8b8>
 80070f0:	ed9f bb97 	vldr	d11, [pc, #604]	; 8007350 <_strtod_l+0x8c0>
 80070f4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80070f8:	2500      	movs	r5, #0
 80070fa:	9312      	str	r3, [sp, #72]	; 0x48
 80070fc:	462e      	mov	r6, r5
 80070fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007100:	4620      	mov	r0, r4
 8007102:	6859      	ldr	r1, [r3, #4]
 8007104:	f001 fa38 	bl	8008578 <_Balloc>
 8007108:	4607      	mov	r7, r0
 800710a:	2800      	cmp	r0, #0
 800710c:	f43f af0c 	beq.w	8006f28 <_strtod_l+0x498>
 8007110:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007112:	691a      	ldr	r2, [r3, #16]
 8007114:	3202      	adds	r2, #2
 8007116:	f103 010c 	add.w	r1, r3, #12
 800711a:	0092      	lsls	r2, r2, #2
 800711c:	300c      	adds	r0, #12
 800711e:	f7ff fb1f 	bl	8006760 <memcpy>
 8007122:	ec49 8b10 	vmov	d0, r8, r9
 8007126:	aa1a      	add	r2, sp, #104	; 0x68
 8007128:	a919      	add	r1, sp, #100	; 0x64
 800712a:	4620      	mov	r0, r4
 800712c:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8007130:	f001 fe0a 	bl	8008d48 <__d2b>
 8007134:	9018      	str	r0, [sp, #96]	; 0x60
 8007136:	2800      	cmp	r0, #0
 8007138:	f43f aef6 	beq.w	8006f28 <_strtod_l+0x498>
 800713c:	2101      	movs	r1, #1
 800713e:	4620      	mov	r0, r4
 8007140:	f001 fb60 	bl	8008804 <__i2b>
 8007144:	4606      	mov	r6, r0
 8007146:	2800      	cmp	r0, #0
 8007148:	f43f aeee 	beq.w	8006f28 <_strtod_l+0x498>
 800714c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800714e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007150:	2b00      	cmp	r3, #0
 8007152:	bfab      	itete	ge
 8007154:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8007156:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007158:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 800715c:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 8007160:	bfac      	ite	ge
 8007162:	eb03 0b02 	addge.w	fp, r3, r2
 8007166:	eba2 0a03 	sublt.w	sl, r2, r3
 800716a:	9a04      	ldr	r2, [sp, #16]
 800716c:	1a9b      	subs	r3, r3, r2
 800716e:	440b      	add	r3, r1
 8007170:	4a7a      	ldr	r2, [pc, #488]	; (800735c <_strtod_l+0x8cc>)
 8007172:	3b01      	subs	r3, #1
 8007174:	4293      	cmp	r3, r2
 8007176:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800717a:	f280 80d1 	bge.w	8007320 <_strtod_l+0x890>
 800717e:	1ad2      	subs	r2, r2, r3
 8007180:	2a1f      	cmp	r2, #31
 8007182:	eba1 0102 	sub.w	r1, r1, r2
 8007186:	f04f 0001 	mov.w	r0, #1
 800718a:	f300 80bd 	bgt.w	8007308 <_strtod_l+0x878>
 800718e:	fa00 f302 	lsl.w	r3, r0, r2
 8007192:	930e      	str	r3, [sp, #56]	; 0x38
 8007194:	2300      	movs	r3, #0
 8007196:	930d      	str	r3, [sp, #52]	; 0x34
 8007198:	eb0b 0301 	add.w	r3, fp, r1
 800719c:	9a04      	ldr	r2, [sp, #16]
 800719e:	459b      	cmp	fp, r3
 80071a0:	448a      	add	sl, r1
 80071a2:	4492      	add	sl, r2
 80071a4:	465a      	mov	r2, fp
 80071a6:	bfa8      	it	ge
 80071a8:	461a      	movge	r2, r3
 80071aa:	4552      	cmp	r2, sl
 80071ac:	bfa8      	it	ge
 80071ae:	4652      	movge	r2, sl
 80071b0:	2a00      	cmp	r2, #0
 80071b2:	bfc2      	ittt	gt
 80071b4:	1a9b      	subgt	r3, r3, r2
 80071b6:	ebaa 0a02 	subgt.w	sl, sl, r2
 80071ba:	ebab 0b02 	subgt.w	fp, fp, r2
 80071be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80071c0:	2a00      	cmp	r2, #0
 80071c2:	dd18      	ble.n	80071f6 <_strtod_l+0x766>
 80071c4:	4631      	mov	r1, r6
 80071c6:	4620      	mov	r0, r4
 80071c8:	9315      	str	r3, [sp, #84]	; 0x54
 80071ca:	f001 fbd7 	bl	800897c <__pow5mult>
 80071ce:	4606      	mov	r6, r0
 80071d0:	2800      	cmp	r0, #0
 80071d2:	f43f aea9 	beq.w	8006f28 <_strtod_l+0x498>
 80071d6:	4601      	mov	r1, r0
 80071d8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80071da:	4620      	mov	r0, r4
 80071dc:	f001 fb28 	bl	8008830 <__multiply>
 80071e0:	9014      	str	r0, [sp, #80]	; 0x50
 80071e2:	2800      	cmp	r0, #0
 80071e4:	f43f aea0 	beq.w	8006f28 <_strtod_l+0x498>
 80071e8:	9918      	ldr	r1, [sp, #96]	; 0x60
 80071ea:	4620      	mov	r0, r4
 80071ec:	f001 fa04 	bl	80085f8 <_Bfree>
 80071f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80071f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80071f4:	9218      	str	r2, [sp, #96]	; 0x60
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	f300 8097 	bgt.w	800732a <_strtod_l+0x89a>
 80071fc:	9b06      	ldr	r3, [sp, #24]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	dd08      	ble.n	8007214 <_strtod_l+0x784>
 8007202:	4639      	mov	r1, r7
 8007204:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007206:	4620      	mov	r0, r4
 8007208:	f001 fbb8 	bl	800897c <__pow5mult>
 800720c:	4607      	mov	r7, r0
 800720e:	2800      	cmp	r0, #0
 8007210:	f43f ae8a 	beq.w	8006f28 <_strtod_l+0x498>
 8007214:	f1ba 0f00 	cmp.w	sl, #0
 8007218:	dd08      	ble.n	800722c <_strtod_l+0x79c>
 800721a:	4639      	mov	r1, r7
 800721c:	4652      	mov	r2, sl
 800721e:	4620      	mov	r0, r4
 8007220:	f001 fc06 	bl	8008a30 <__lshift>
 8007224:	4607      	mov	r7, r0
 8007226:	2800      	cmp	r0, #0
 8007228:	f43f ae7e 	beq.w	8006f28 <_strtod_l+0x498>
 800722c:	f1bb 0f00 	cmp.w	fp, #0
 8007230:	dd08      	ble.n	8007244 <_strtod_l+0x7b4>
 8007232:	4631      	mov	r1, r6
 8007234:	465a      	mov	r2, fp
 8007236:	4620      	mov	r0, r4
 8007238:	f001 fbfa 	bl	8008a30 <__lshift>
 800723c:	4606      	mov	r6, r0
 800723e:	2800      	cmp	r0, #0
 8007240:	f43f ae72 	beq.w	8006f28 <_strtod_l+0x498>
 8007244:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007246:	463a      	mov	r2, r7
 8007248:	4620      	mov	r0, r4
 800724a:	f001 fc79 	bl	8008b40 <__mdiff>
 800724e:	4605      	mov	r5, r0
 8007250:	2800      	cmp	r0, #0
 8007252:	f43f ae69 	beq.w	8006f28 <_strtod_l+0x498>
 8007256:	2300      	movs	r3, #0
 8007258:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800725c:	60c3      	str	r3, [r0, #12]
 800725e:	4631      	mov	r1, r6
 8007260:	f001 fc52 	bl	8008b08 <__mcmp>
 8007264:	2800      	cmp	r0, #0
 8007266:	da7f      	bge.n	8007368 <_strtod_l+0x8d8>
 8007268:	ea5a 0308 	orrs.w	r3, sl, r8
 800726c:	f040 80a5 	bne.w	80073ba <_strtod_l+0x92a>
 8007270:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007274:	2b00      	cmp	r3, #0
 8007276:	f040 80a0 	bne.w	80073ba <_strtod_l+0x92a>
 800727a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800727e:	0d1b      	lsrs	r3, r3, #20
 8007280:	051b      	lsls	r3, r3, #20
 8007282:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007286:	f240 8098 	bls.w	80073ba <_strtod_l+0x92a>
 800728a:	696b      	ldr	r3, [r5, #20]
 800728c:	b91b      	cbnz	r3, 8007296 <_strtod_l+0x806>
 800728e:	692b      	ldr	r3, [r5, #16]
 8007290:	2b01      	cmp	r3, #1
 8007292:	f340 8092 	ble.w	80073ba <_strtod_l+0x92a>
 8007296:	4629      	mov	r1, r5
 8007298:	2201      	movs	r2, #1
 800729a:	4620      	mov	r0, r4
 800729c:	f001 fbc8 	bl	8008a30 <__lshift>
 80072a0:	4631      	mov	r1, r6
 80072a2:	4605      	mov	r5, r0
 80072a4:	f001 fc30 	bl	8008b08 <__mcmp>
 80072a8:	2800      	cmp	r0, #0
 80072aa:	f340 8086 	ble.w	80073ba <_strtod_l+0x92a>
 80072ae:	9904      	ldr	r1, [sp, #16]
 80072b0:	4a2b      	ldr	r2, [pc, #172]	; (8007360 <_strtod_l+0x8d0>)
 80072b2:	464b      	mov	r3, r9
 80072b4:	2900      	cmp	r1, #0
 80072b6:	f000 80a1 	beq.w	80073fc <_strtod_l+0x96c>
 80072ba:	ea02 0109 	and.w	r1, r2, r9
 80072be:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80072c2:	f300 809b 	bgt.w	80073fc <_strtod_l+0x96c>
 80072c6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80072ca:	f77f aea2 	ble.w	8007012 <_strtod_l+0x582>
 80072ce:	4a25      	ldr	r2, [pc, #148]	; (8007364 <_strtod_l+0x8d4>)
 80072d0:	2300      	movs	r3, #0
 80072d2:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 80072d6:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 80072da:	ec49 8b17 	vmov	d7, r8, r9
 80072de:	ee27 7b06 	vmul.f64	d7, d7, d6
 80072e2:	ed8d 7b04 	vstr	d7, [sp, #16]
 80072e6:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80072ea:	4313      	orrs	r3, r2
 80072ec:	bf08      	it	eq
 80072ee:	2322      	moveq	r3, #34	; 0x22
 80072f0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80072f4:	bf08      	it	eq
 80072f6:	6023      	streq	r3, [r4, #0]
 80072f8:	e620      	b.n	8006f3c <_strtod_l+0x4ac>
 80072fa:	f04f 31ff 	mov.w	r1, #4294967295
 80072fe:	fa01 f202 	lsl.w	r2, r1, r2
 8007302:	ea02 0808 	and.w	r8, r2, r8
 8007306:	e6d4      	b.n	80070b2 <_strtod_l+0x622>
 8007308:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800730c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8007310:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8007314:	33e2      	adds	r3, #226	; 0xe2
 8007316:	fa00 f303 	lsl.w	r3, r0, r3
 800731a:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 800731e:	e73b      	b.n	8007198 <_strtod_l+0x708>
 8007320:	2000      	movs	r0, #0
 8007322:	2301      	movs	r3, #1
 8007324:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 8007328:	e736      	b.n	8007198 <_strtod_l+0x708>
 800732a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800732c:	461a      	mov	r2, r3
 800732e:	4620      	mov	r0, r4
 8007330:	f001 fb7e 	bl	8008a30 <__lshift>
 8007334:	9018      	str	r0, [sp, #96]	; 0x60
 8007336:	2800      	cmp	r0, #0
 8007338:	f47f af60 	bne.w	80071fc <_strtod_l+0x76c>
 800733c:	e5f4      	b.n	8006f28 <_strtod_l+0x498>
 800733e:	bf00      	nop
 8007340:	94a03595 	.word	0x94a03595
 8007344:	3fcfffff 	.word	0x3fcfffff
 8007348:	94a03595 	.word	0x94a03595
 800734c:	3fdfffff 	.word	0x3fdfffff
 8007350:	35afe535 	.word	0x35afe535
 8007354:	3fe00000 	.word	0x3fe00000
 8007358:	08009fc0 	.word	0x08009fc0
 800735c:	fffffc02 	.word	0xfffffc02
 8007360:	7ff00000 	.word	0x7ff00000
 8007364:	39500000 	.word	0x39500000
 8007368:	46cb      	mov	fp, r9
 800736a:	d165      	bne.n	8007438 <_strtod_l+0x9a8>
 800736c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007370:	f1ba 0f00 	cmp.w	sl, #0
 8007374:	d02a      	beq.n	80073cc <_strtod_l+0x93c>
 8007376:	4aaa      	ldr	r2, [pc, #680]	; (8007620 <_strtod_l+0xb90>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d12b      	bne.n	80073d4 <_strtod_l+0x944>
 800737c:	9b04      	ldr	r3, [sp, #16]
 800737e:	4641      	mov	r1, r8
 8007380:	b1fb      	cbz	r3, 80073c2 <_strtod_l+0x932>
 8007382:	4aa8      	ldr	r2, [pc, #672]	; (8007624 <_strtod_l+0xb94>)
 8007384:	ea09 0202 	and.w	r2, r9, r2
 8007388:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800738c:	f04f 30ff 	mov.w	r0, #4294967295
 8007390:	d81a      	bhi.n	80073c8 <_strtod_l+0x938>
 8007392:	0d12      	lsrs	r2, r2, #20
 8007394:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007398:	fa00 f303 	lsl.w	r3, r0, r3
 800739c:	4299      	cmp	r1, r3
 800739e:	d119      	bne.n	80073d4 <_strtod_l+0x944>
 80073a0:	4ba1      	ldr	r3, [pc, #644]	; (8007628 <_strtod_l+0xb98>)
 80073a2:	459b      	cmp	fp, r3
 80073a4:	d102      	bne.n	80073ac <_strtod_l+0x91c>
 80073a6:	3101      	adds	r1, #1
 80073a8:	f43f adbe 	beq.w	8006f28 <_strtod_l+0x498>
 80073ac:	4b9d      	ldr	r3, [pc, #628]	; (8007624 <_strtod_l+0xb94>)
 80073ae:	ea0b 0303 	and.w	r3, fp, r3
 80073b2:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80073b6:	f04f 0800 	mov.w	r8, #0
 80073ba:	9b04      	ldr	r3, [sp, #16]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d186      	bne.n	80072ce <_strtod_l+0x83e>
 80073c0:	e5bc      	b.n	8006f3c <_strtod_l+0x4ac>
 80073c2:	f04f 33ff 	mov.w	r3, #4294967295
 80073c6:	e7e9      	b.n	800739c <_strtod_l+0x90c>
 80073c8:	4603      	mov	r3, r0
 80073ca:	e7e7      	b.n	800739c <_strtod_l+0x90c>
 80073cc:	ea53 0308 	orrs.w	r3, r3, r8
 80073d0:	f43f af6d 	beq.w	80072ae <_strtod_l+0x81e>
 80073d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80073d6:	b1db      	cbz	r3, 8007410 <_strtod_l+0x980>
 80073d8:	ea13 0f0b 	tst.w	r3, fp
 80073dc:	d0ed      	beq.n	80073ba <_strtod_l+0x92a>
 80073de:	9a04      	ldr	r2, [sp, #16]
 80073e0:	4640      	mov	r0, r8
 80073e2:	4649      	mov	r1, r9
 80073e4:	f1ba 0f00 	cmp.w	sl, #0
 80073e8:	d016      	beq.n	8007418 <_strtod_l+0x988>
 80073ea:	f7ff fb35 	bl	8006a58 <sulp>
 80073ee:	ed9d 7b08 	vldr	d7, [sp, #32]
 80073f2:	ee37 7b00 	vadd.f64	d7, d7, d0
 80073f6:	ec59 8b17 	vmov	r8, r9, d7
 80073fa:	e7de      	b.n	80073ba <_strtod_l+0x92a>
 80073fc:	4013      	ands	r3, r2
 80073fe:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007402:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007406:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800740a:	f04f 38ff 	mov.w	r8, #4294967295
 800740e:	e7d4      	b.n	80073ba <_strtod_l+0x92a>
 8007410:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007412:	ea13 0f08 	tst.w	r3, r8
 8007416:	e7e1      	b.n	80073dc <_strtod_l+0x94c>
 8007418:	f7ff fb1e 	bl	8006a58 <sulp>
 800741c:	ed9d 7b08 	vldr	d7, [sp, #32]
 8007420:	ee37 7b40 	vsub.f64	d7, d7, d0
 8007424:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007428:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800742c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007430:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8007434:	d1c1      	bne.n	80073ba <_strtod_l+0x92a>
 8007436:	e5ec      	b.n	8007012 <_strtod_l+0x582>
 8007438:	4631      	mov	r1, r6
 800743a:	4628      	mov	r0, r5
 800743c:	f001 fce0 	bl	8008e00 <__ratio>
 8007440:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8007444:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8007448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800744c:	d867      	bhi.n	800751e <_strtod_l+0xa8e>
 800744e:	f1ba 0f00 	cmp.w	sl, #0
 8007452:	d044      	beq.n	80074de <_strtod_l+0xa4e>
 8007454:	4b75      	ldr	r3, [pc, #468]	; (800762c <_strtod_l+0xb9c>)
 8007456:	2200      	movs	r2, #0
 8007458:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 800745c:	4971      	ldr	r1, [pc, #452]	; (8007624 <_strtod_l+0xb94>)
 800745e:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8007638 <_strtod_l+0xba8>
 8007462:	ea0b 0001 	and.w	r0, fp, r1
 8007466:	4560      	cmp	r0, ip
 8007468:	900d      	str	r0, [sp, #52]	; 0x34
 800746a:	f040 808b 	bne.w	8007584 <_strtod_l+0xaf4>
 800746e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007472:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8007476:	ec49 8b10 	vmov	d0, r8, r9
 800747a:	ec43 2b1c 	vmov	d12, r2, r3
 800747e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007482:	f001 fbe5 	bl	8008c50 <__ulp>
 8007486:	ec49 8b1d 	vmov	d13, r8, r9
 800748a:	eeac db00 	vfma.f64	d13, d12, d0
 800748e:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 8007492:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007494:	4963      	ldr	r1, [pc, #396]	; (8007624 <_strtod_l+0xb94>)
 8007496:	4a66      	ldr	r2, [pc, #408]	; (8007630 <_strtod_l+0xba0>)
 8007498:	4019      	ands	r1, r3
 800749a:	4291      	cmp	r1, r2
 800749c:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 80074a0:	d947      	bls.n	8007532 <_strtod_l+0xaa2>
 80074a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074a4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d103      	bne.n	80074b4 <_strtod_l+0xa24>
 80074ac:	9b08      	ldr	r3, [sp, #32]
 80074ae:	3301      	adds	r3, #1
 80074b0:	f43f ad3a 	beq.w	8006f28 <_strtod_l+0x498>
 80074b4:	f8df 9170 	ldr.w	r9, [pc, #368]	; 8007628 <_strtod_l+0xb98>
 80074b8:	f04f 38ff 	mov.w	r8, #4294967295
 80074bc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80074be:	4620      	mov	r0, r4
 80074c0:	f001 f89a 	bl	80085f8 <_Bfree>
 80074c4:	4639      	mov	r1, r7
 80074c6:	4620      	mov	r0, r4
 80074c8:	f001 f896 	bl	80085f8 <_Bfree>
 80074cc:	4631      	mov	r1, r6
 80074ce:	4620      	mov	r0, r4
 80074d0:	f001 f892 	bl	80085f8 <_Bfree>
 80074d4:	4629      	mov	r1, r5
 80074d6:	4620      	mov	r0, r4
 80074d8:	f001 f88e 	bl	80085f8 <_Bfree>
 80074dc:	e60f      	b.n	80070fe <_strtod_l+0x66e>
 80074de:	f1b8 0f00 	cmp.w	r8, #0
 80074e2:	d112      	bne.n	800750a <_strtod_l+0xa7a>
 80074e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80074e8:	b9b3      	cbnz	r3, 8007518 <_strtod_l+0xa88>
 80074ea:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80074ee:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80074f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074f6:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 80074fa:	d401      	bmi.n	8007500 <_strtod_l+0xa70>
 80074fc:	ee20 8b08 	vmul.f64	d8, d0, d8
 8007500:	eeb1 7b48 	vneg.f64	d7, d8
 8007504:	ec53 2b17 	vmov	r2, r3, d7
 8007508:	e7a8      	b.n	800745c <_strtod_l+0x9cc>
 800750a:	f1b8 0f01 	cmp.w	r8, #1
 800750e:	d103      	bne.n	8007518 <_strtod_l+0xa88>
 8007510:	f1b9 0f00 	cmp.w	r9, #0
 8007514:	f43f ad7d 	beq.w	8007012 <_strtod_l+0x582>
 8007518:	4b46      	ldr	r3, [pc, #280]	; (8007634 <_strtod_l+0xba4>)
 800751a:	2200      	movs	r2, #0
 800751c:	e79c      	b.n	8007458 <_strtod_l+0x9c8>
 800751e:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8007522:	ee20 8b08 	vmul.f64	d8, d0, d8
 8007526:	f1ba 0f00 	cmp.w	sl, #0
 800752a:	d0e9      	beq.n	8007500 <_strtod_l+0xa70>
 800752c:	ec53 2b18 	vmov	r2, r3, d8
 8007530:	e794      	b.n	800745c <_strtod_l+0x9cc>
 8007532:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8007536:	9b04      	ldr	r3, [sp, #16]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d1bf      	bne.n	80074bc <_strtod_l+0xa2c>
 800753c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007540:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007542:	0d1b      	lsrs	r3, r3, #20
 8007544:	051b      	lsls	r3, r3, #20
 8007546:	429a      	cmp	r2, r3
 8007548:	d1b8      	bne.n	80074bc <_strtod_l+0xa2c>
 800754a:	ec51 0b18 	vmov	r0, r1, d8
 800754e:	f7f9 f8b3 	bl	80006b8 <__aeabi_d2lz>
 8007552:	f7f9 f86b 	bl	800062c <__aeabi_l2d>
 8007556:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800755a:	ec41 0b17 	vmov	d7, r0, r1
 800755e:	ea43 0308 	orr.w	r3, r3, r8
 8007562:	ea53 030a 	orrs.w	r3, r3, sl
 8007566:	ee38 8b47 	vsub.f64	d8, d8, d7
 800756a:	d03e      	beq.n	80075ea <_strtod_l+0xb5a>
 800756c:	eeb4 8bca 	vcmpe.f64	d8, d10
 8007570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007574:	f53f ace2 	bmi.w	8006f3c <_strtod_l+0x4ac>
 8007578:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800757c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007580:	dd9c      	ble.n	80074bc <_strtod_l+0xa2c>
 8007582:	e4db      	b.n	8006f3c <_strtod_l+0x4ac>
 8007584:	9904      	ldr	r1, [sp, #16]
 8007586:	b301      	cbz	r1, 80075ca <_strtod_l+0xb3a>
 8007588:	990d      	ldr	r1, [sp, #52]	; 0x34
 800758a:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800758e:	d81c      	bhi.n	80075ca <_strtod_l+0xb3a>
 8007590:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8007618 <_strtod_l+0xb88>
 8007594:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800759c:	d811      	bhi.n	80075c2 <_strtod_l+0xb32>
 800759e:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 80075a2:	ee18 3a10 	vmov	r3, s16
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	bf38      	it	cc
 80075aa:	2301      	movcc	r3, #1
 80075ac:	ee08 3a10 	vmov	s16, r3
 80075b0:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 80075b4:	f1ba 0f00 	cmp.w	sl, #0
 80075b8:	d114      	bne.n	80075e4 <_strtod_l+0xb54>
 80075ba:	eeb1 7b48 	vneg.f64	d7, d8
 80075be:	ec53 2b17 	vmov	r2, r3, d7
 80075c2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80075c4:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 80075c8:	1a0b      	subs	r3, r1, r0
 80075ca:	ed9d 0b08 	vldr	d0, [sp, #32]
 80075ce:	ec43 2b1c 	vmov	d12, r2, r3
 80075d2:	f001 fb3d 	bl	8008c50 <__ulp>
 80075d6:	ed9d 7b08 	vldr	d7, [sp, #32]
 80075da:	eeac 7b00 	vfma.f64	d7, d12, d0
 80075de:	ec59 8b17 	vmov	r8, r9, d7
 80075e2:	e7a8      	b.n	8007536 <_strtod_l+0xaa6>
 80075e4:	ec53 2b18 	vmov	r2, r3, d8
 80075e8:	e7eb      	b.n	80075c2 <_strtod_l+0xb32>
 80075ea:	eeb4 8bc9 	vcmpe.f64	d8, d9
 80075ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075f2:	f57f af63 	bpl.w	80074bc <_strtod_l+0xa2c>
 80075f6:	e4a1      	b.n	8006f3c <_strtod_l+0x4ac>
 80075f8:	2300      	movs	r3, #0
 80075fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80075fc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80075fe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007600:	6013      	str	r3, [r2, #0]
 8007602:	f7ff ba8d 	b.w	8006b20 <_strtod_l+0x90>
 8007606:	2a65      	cmp	r2, #101	; 0x65
 8007608:	f43f ab89 	beq.w	8006d1e <_strtod_l+0x28e>
 800760c:	2a45      	cmp	r2, #69	; 0x45
 800760e:	f43f ab86 	beq.w	8006d1e <_strtod_l+0x28e>
 8007612:	2101      	movs	r1, #1
 8007614:	f7ff bbbe 	b.w	8006d94 <_strtod_l+0x304>
 8007618:	ffc00000 	.word	0xffc00000
 800761c:	41dfffff 	.word	0x41dfffff
 8007620:	000fffff 	.word	0x000fffff
 8007624:	7ff00000 	.word	0x7ff00000
 8007628:	7fefffff 	.word	0x7fefffff
 800762c:	3ff00000 	.word	0x3ff00000
 8007630:	7c9fffff 	.word	0x7c9fffff
 8007634:	bff00000 	.word	0xbff00000
 8007638:	7fe00000 	.word	0x7fe00000
 800763c:	00000000 	.word	0x00000000

08007640 <strtof>:
 8007640:	b510      	push	{r4, lr}
 8007642:	4c1d      	ldr	r4, [pc, #116]	; (80076b8 <strtof+0x78>)
 8007644:	4b1d      	ldr	r3, [pc, #116]	; (80076bc <strtof+0x7c>)
 8007646:	460a      	mov	r2, r1
 8007648:	4601      	mov	r1, r0
 800764a:	6820      	ldr	r0, [r4, #0]
 800764c:	f7ff fa20 	bl	8006a90 <_strtod_l>
 8007650:	eeb4 0b40 	vcmp.f64	d0, d0
 8007654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007658:	eeb0 7b40 	vmov.f64	d7, d0
 800765c:	d70d      	bvc.n	800767a <strtof+0x3a>
 800765e:	ee17 3a90 	vmov	r3, s15
 8007662:	2b00      	cmp	r3, #0
 8007664:	4816      	ldr	r0, [pc, #88]	; (80076c0 <strtof+0x80>)
 8007666:	da04      	bge.n	8007672 <strtof+0x32>
 8007668:	f002 f8ea 	bl	8009840 <nanf>
 800766c:	eeb1 0a40 	vneg.f32	s0, s0
 8007670:	bd10      	pop	{r4, pc}
 8007672:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007676:	f002 b8e3 	b.w	8009840 <nanf>
 800767a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800767e:	eddf 6a11 	vldr	s13, [pc, #68]	; 80076c4 <strtof+0x84>
 8007682:	eeb0 6ac0 	vabs.f32	s12, s0
 8007686:	eeb4 6a66 	vcmp.f32	s12, s13
 800768a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800768e:	ddef      	ble.n	8007670 <strtof+0x30>
 8007690:	eeb0 7bc7 	vabs.f64	d7, d7
 8007694:	ed9f 6b06 	vldr	d6, [pc, #24]	; 80076b0 <strtof+0x70>
 8007698:	eeb4 7b46 	vcmp.f64	d7, d6
 800769c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076a0:	bfde      	ittt	le
 80076a2:	6823      	ldrle	r3, [r4, #0]
 80076a4:	2222      	movle	r2, #34	; 0x22
 80076a6:	601a      	strle	r2, [r3, #0]
 80076a8:	e7e2      	b.n	8007670 <strtof+0x30>
 80076aa:	bf00      	nop
 80076ac:	f3af 8000 	nop.w
 80076b0:	ffffffff 	.word	0xffffffff
 80076b4:	7fefffff 	.word	0x7fefffff
 80076b8:	2000019c 	.word	0x2000019c
 80076bc:	20000204 	.word	0x20000204
 80076c0:	08009dfa 	.word	0x08009dfa
 80076c4:	7f7fffff 	.word	0x7f7fffff

080076c8 <__strtok_r>:
 80076c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076ca:	b908      	cbnz	r0, 80076d0 <__strtok_r+0x8>
 80076cc:	6810      	ldr	r0, [r2, #0]
 80076ce:	b188      	cbz	r0, 80076f4 <__strtok_r+0x2c>
 80076d0:	4604      	mov	r4, r0
 80076d2:	4620      	mov	r0, r4
 80076d4:	f814 5b01 	ldrb.w	r5, [r4], #1
 80076d8:	460f      	mov	r7, r1
 80076da:	f817 6b01 	ldrb.w	r6, [r7], #1
 80076de:	b91e      	cbnz	r6, 80076e8 <__strtok_r+0x20>
 80076e0:	b965      	cbnz	r5, 80076fc <__strtok_r+0x34>
 80076e2:	6015      	str	r5, [r2, #0]
 80076e4:	4628      	mov	r0, r5
 80076e6:	e005      	b.n	80076f4 <__strtok_r+0x2c>
 80076e8:	42b5      	cmp	r5, r6
 80076ea:	d1f6      	bne.n	80076da <__strtok_r+0x12>
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d1f0      	bne.n	80076d2 <__strtok_r+0xa>
 80076f0:	6014      	str	r4, [r2, #0]
 80076f2:	7003      	strb	r3, [r0, #0]
 80076f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076f6:	461c      	mov	r4, r3
 80076f8:	e00c      	b.n	8007714 <__strtok_r+0x4c>
 80076fa:	b915      	cbnz	r5, 8007702 <__strtok_r+0x3a>
 80076fc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007700:	460e      	mov	r6, r1
 8007702:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007706:	42ab      	cmp	r3, r5
 8007708:	d1f7      	bne.n	80076fa <__strtok_r+0x32>
 800770a:	2b00      	cmp	r3, #0
 800770c:	d0f3      	beq.n	80076f6 <__strtok_r+0x2e>
 800770e:	2300      	movs	r3, #0
 8007710:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007714:	6014      	str	r4, [r2, #0]
 8007716:	e7ed      	b.n	80076f4 <__strtok_r+0x2c>

08007718 <strtok_r>:
 8007718:	2301      	movs	r3, #1
 800771a:	f7ff bfd5 	b.w	80076c8 <__strtok_r>
	...

08007720 <_strtoul_l.isra.0>:
 8007720:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007724:	4e3b      	ldr	r6, [pc, #236]	; (8007814 <_strtoul_l.isra.0+0xf4>)
 8007726:	4686      	mov	lr, r0
 8007728:	468c      	mov	ip, r1
 800772a:	4660      	mov	r0, ip
 800772c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8007730:	5da5      	ldrb	r5, [r4, r6]
 8007732:	f015 0508 	ands.w	r5, r5, #8
 8007736:	d1f8      	bne.n	800772a <_strtoul_l.isra.0+0xa>
 8007738:	2c2d      	cmp	r4, #45	; 0x2d
 800773a:	d134      	bne.n	80077a6 <_strtoul_l.isra.0+0x86>
 800773c:	f89c 4000 	ldrb.w	r4, [ip]
 8007740:	f04f 0801 	mov.w	r8, #1
 8007744:	f100 0c02 	add.w	ip, r0, #2
 8007748:	2b00      	cmp	r3, #0
 800774a:	d05e      	beq.n	800780a <_strtoul_l.isra.0+0xea>
 800774c:	2b10      	cmp	r3, #16
 800774e:	d10c      	bne.n	800776a <_strtoul_l.isra.0+0x4a>
 8007750:	2c30      	cmp	r4, #48	; 0x30
 8007752:	d10a      	bne.n	800776a <_strtoul_l.isra.0+0x4a>
 8007754:	f89c 0000 	ldrb.w	r0, [ip]
 8007758:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800775c:	2858      	cmp	r0, #88	; 0x58
 800775e:	d14f      	bne.n	8007800 <_strtoul_l.isra.0+0xe0>
 8007760:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8007764:	2310      	movs	r3, #16
 8007766:	f10c 0c02 	add.w	ip, ip, #2
 800776a:	f04f 37ff 	mov.w	r7, #4294967295
 800776e:	2500      	movs	r5, #0
 8007770:	fbb7 f7f3 	udiv	r7, r7, r3
 8007774:	fb03 f907 	mul.w	r9, r3, r7
 8007778:	ea6f 0909 	mvn.w	r9, r9
 800777c:	4628      	mov	r0, r5
 800777e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8007782:	2e09      	cmp	r6, #9
 8007784:	d818      	bhi.n	80077b8 <_strtoul_l.isra.0+0x98>
 8007786:	4634      	mov	r4, r6
 8007788:	42a3      	cmp	r3, r4
 800778a:	dd24      	ble.n	80077d6 <_strtoul_l.isra.0+0xb6>
 800778c:	2d00      	cmp	r5, #0
 800778e:	db1f      	blt.n	80077d0 <_strtoul_l.isra.0+0xb0>
 8007790:	4287      	cmp	r7, r0
 8007792:	d31d      	bcc.n	80077d0 <_strtoul_l.isra.0+0xb0>
 8007794:	d101      	bne.n	800779a <_strtoul_l.isra.0+0x7a>
 8007796:	45a1      	cmp	r9, r4
 8007798:	db1a      	blt.n	80077d0 <_strtoul_l.isra.0+0xb0>
 800779a:	fb00 4003 	mla	r0, r0, r3, r4
 800779e:	2501      	movs	r5, #1
 80077a0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80077a4:	e7eb      	b.n	800777e <_strtoul_l.isra.0+0x5e>
 80077a6:	2c2b      	cmp	r4, #43	; 0x2b
 80077a8:	bf08      	it	eq
 80077aa:	f89c 4000 	ldrbeq.w	r4, [ip]
 80077ae:	46a8      	mov	r8, r5
 80077b0:	bf08      	it	eq
 80077b2:	f100 0c02 	addeq.w	ip, r0, #2
 80077b6:	e7c7      	b.n	8007748 <_strtoul_l.isra.0+0x28>
 80077b8:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80077bc:	2e19      	cmp	r6, #25
 80077be:	d801      	bhi.n	80077c4 <_strtoul_l.isra.0+0xa4>
 80077c0:	3c37      	subs	r4, #55	; 0x37
 80077c2:	e7e1      	b.n	8007788 <_strtoul_l.isra.0+0x68>
 80077c4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80077c8:	2e19      	cmp	r6, #25
 80077ca:	d804      	bhi.n	80077d6 <_strtoul_l.isra.0+0xb6>
 80077cc:	3c57      	subs	r4, #87	; 0x57
 80077ce:	e7db      	b.n	8007788 <_strtoul_l.isra.0+0x68>
 80077d0:	f04f 35ff 	mov.w	r5, #4294967295
 80077d4:	e7e4      	b.n	80077a0 <_strtoul_l.isra.0+0x80>
 80077d6:	2d00      	cmp	r5, #0
 80077d8:	da07      	bge.n	80077ea <_strtoul_l.isra.0+0xca>
 80077da:	2322      	movs	r3, #34	; 0x22
 80077dc:	f8ce 3000 	str.w	r3, [lr]
 80077e0:	f04f 30ff 	mov.w	r0, #4294967295
 80077e4:	b942      	cbnz	r2, 80077f8 <_strtoul_l.isra.0+0xd8>
 80077e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80077ea:	f1b8 0f00 	cmp.w	r8, #0
 80077ee:	d000      	beq.n	80077f2 <_strtoul_l.isra.0+0xd2>
 80077f0:	4240      	negs	r0, r0
 80077f2:	2a00      	cmp	r2, #0
 80077f4:	d0f7      	beq.n	80077e6 <_strtoul_l.isra.0+0xc6>
 80077f6:	b10d      	cbz	r5, 80077fc <_strtoul_l.isra.0+0xdc>
 80077f8:	f10c 31ff 	add.w	r1, ip, #4294967295
 80077fc:	6011      	str	r1, [r2, #0]
 80077fe:	e7f2      	b.n	80077e6 <_strtoul_l.isra.0+0xc6>
 8007800:	2430      	movs	r4, #48	; 0x30
 8007802:	2b00      	cmp	r3, #0
 8007804:	d1b1      	bne.n	800776a <_strtoul_l.isra.0+0x4a>
 8007806:	2308      	movs	r3, #8
 8007808:	e7af      	b.n	800776a <_strtoul_l.isra.0+0x4a>
 800780a:	2c30      	cmp	r4, #48	; 0x30
 800780c:	d0a2      	beq.n	8007754 <_strtoul_l.isra.0+0x34>
 800780e:	230a      	movs	r3, #10
 8007810:	e7ab      	b.n	800776a <_strtoul_l.isra.0+0x4a>
 8007812:	bf00      	nop
 8007814:	08009fe9 	.word	0x08009fe9

08007818 <strtoul>:
 8007818:	4613      	mov	r3, r2
 800781a:	460a      	mov	r2, r1
 800781c:	4601      	mov	r1, r0
 800781e:	4802      	ldr	r0, [pc, #8]	; (8007828 <strtoul+0x10>)
 8007820:	6800      	ldr	r0, [r0, #0]
 8007822:	f7ff bf7d 	b.w	8007720 <_strtoul_l.isra.0>
 8007826:	bf00      	nop
 8007828:	2000019c 	.word	0x2000019c

0800782c <_vsniprintf_r>:
 800782c:	b530      	push	{r4, r5, lr}
 800782e:	1e14      	subs	r4, r2, #0
 8007830:	4605      	mov	r5, r0
 8007832:	b09b      	sub	sp, #108	; 0x6c
 8007834:	4618      	mov	r0, r3
 8007836:	da05      	bge.n	8007844 <_vsniprintf_r+0x18>
 8007838:	238b      	movs	r3, #139	; 0x8b
 800783a:	602b      	str	r3, [r5, #0]
 800783c:	f04f 30ff 	mov.w	r0, #4294967295
 8007840:	b01b      	add	sp, #108	; 0x6c
 8007842:	bd30      	pop	{r4, r5, pc}
 8007844:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007848:	f8ad 300c 	strh.w	r3, [sp, #12]
 800784c:	bf14      	ite	ne
 800784e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007852:	4623      	moveq	r3, r4
 8007854:	9302      	str	r3, [sp, #8]
 8007856:	9305      	str	r3, [sp, #20]
 8007858:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800785c:	9100      	str	r1, [sp, #0]
 800785e:	9104      	str	r1, [sp, #16]
 8007860:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007864:	4602      	mov	r2, r0
 8007866:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007868:	4669      	mov	r1, sp
 800786a:	4628      	mov	r0, r5
 800786c:	f001 fbaa 	bl	8008fc4 <_svfiprintf_r>
 8007870:	1c43      	adds	r3, r0, #1
 8007872:	bfbc      	itt	lt
 8007874:	238b      	movlt	r3, #139	; 0x8b
 8007876:	602b      	strlt	r3, [r5, #0]
 8007878:	2c00      	cmp	r4, #0
 800787a:	d0e1      	beq.n	8007840 <_vsniprintf_r+0x14>
 800787c:	9b00      	ldr	r3, [sp, #0]
 800787e:	2200      	movs	r2, #0
 8007880:	701a      	strb	r2, [r3, #0]
 8007882:	e7dd      	b.n	8007840 <_vsniprintf_r+0x14>

08007884 <vsniprintf>:
 8007884:	b507      	push	{r0, r1, r2, lr}
 8007886:	9300      	str	r3, [sp, #0]
 8007888:	4613      	mov	r3, r2
 800788a:	460a      	mov	r2, r1
 800788c:	4601      	mov	r1, r0
 800788e:	4803      	ldr	r0, [pc, #12]	; (800789c <vsniprintf+0x18>)
 8007890:	6800      	ldr	r0, [r0, #0]
 8007892:	f7ff ffcb 	bl	800782c <_vsniprintf_r>
 8007896:	b003      	add	sp, #12
 8007898:	f85d fb04 	ldr.w	pc, [sp], #4
 800789c:	2000019c 	.word	0x2000019c

080078a0 <__swbuf_r>:
 80078a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078a2:	460e      	mov	r6, r1
 80078a4:	4614      	mov	r4, r2
 80078a6:	4605      	mov	r5, r0
 80078a8:	b118      	cbz	r0, 80078b2 <__swbuf_r+0x12>
 80078aa:	6983      	ldr	r3, [r0, #24]
 80078ac:	b90b      	cbnz	r3, 80078b2 <__swbuf_r+0x12>
 80078ae:	f000 f9d1 	bl	8007c54 <__sinit>
 80078b2:	4b21      	ldr	r3, [pc, #132]	; (8007938 <__swbuf_r+0x98>)
 80078b4:	429c      	cmp	r4, r3
 80078b6:	d12b      	bne.n	8007910 <__swbuf_r+0x70>
 80078b8:	686c      	ldr	r4, [r5, #4]
 80078ba:	69a3      	ldr	r3, [r4, #24]
 80078bc:	60a3      	str	r3, [r4, #8]
 80078be:	89a3      	ldrh	r3, [r4, #12]
 80078c0:	071a      	lsls	r2, r3, #28
 80078c2:	d52f      	bpl.n	8007924 <__swbuf_r+0x84>
 80078c4:	6923      	ldr	r3, [r4, #16]
 80078c6:	b36b      	cbz	r3, 8007924 <__swbuf_r+0x84>
 80078c8:	6923      	ldr	r3, [r4, #16]
 80078ca:	6820      	ldr	r0, [r4, #0]
 80078cc:	1ac0      	subs	r0, r0, r3
 80078ce:	6963      	ldr	r3, [r4, #20]
 80078d0:	b2f6      	uxtb	r6, r6
 80078d2:	4283      	cmp	r3, r0
 80078d4:	4637      	mov	r7, r6
 80078d6:	dc04      	bgt.n	80078e2 <__swbuf_r+0x42>
 80078d8:	4621      	mov	r1, r4
 80078da:	4628      	mov	r0, r5
 80078dc:	f000 f926 	bl	8007b2c <_fflush_r>
 80078e0:	bb30      	cbnz	r0, 8007930 <__swbuf_r+0x90>
 80078e2:	68a3      	ldr	r3, [r4, #8]
 80078e4:	3b01      	subs	r3, #1
 80078e6:	60a3      	str	r3, [r4, #8]
 80078e8:	6823      	ldr	r3, [r4, #0]
 80078ea:	1c5a      	adds	r2, r3, #1
 80078ec:	6022      	str	r2, [r4, #0]
 80078ee:	701e      	strb	r6, [r3, #0]
 80078f0:	6963      	ldr	r3, [r4, #20]
 80078f2:	3001      	adds	r0, #1
 80078f4:	4283      	cmp	r3, r0
 80078f6:	d004      	beq.n	8007902 <__swbuf_r+0x62>
 80078f8:	89a3      	ldrh	r3, [r4, #12]
 80078fa:	07db      	lsls	r3, r3, #31
 80078fc:	d506      	bpl.n	800790c <__swbuf_r+0x6c>
 80078fe:	2e0a      	cmp	r6, #10
 8007900:	d104      	bne.n	800790c <__swbuf_r+0x6c>
 8007902:	4621      	mov	r1, r4
 8007904:	4628      	mov	r0, r5
 8007906:	f000 f911 	bl	8007b2c <_fflush_r>
 800790a:	b988      	cbnz	r0, 8007930 <__swbuf_r+0x90>
 800790c:	4638      	mov	r0, r7
 800790e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007910:	4b0a      	ldr	r3, [pc, #40]	; (800793c <__swbuf_r+0x9c>)
 8007912:	429c      	cmp	r4, r3
 8007914:	d101      	bne.n	800791a <__swbuf_r+0x7a>
 8007916:	68ac      	ldr	r4, [r5, #8]
 8007918:	e7cf      	b.n	80078ba <__swbuf_r+0x1a>
 800791a:	4b09      	ldr	r3, [pc, #36]	; (8007940 <__swbuf_r+0xa0>)
 800791c:	429c      	cmp	r4, r3
 800791e:	bf08      	it	eq
 8007920:	68ec      	ldreq	r4, [r5, #12]
 8007922:	e7ca      	b.n	80078ba <__swbuf_r+0x1a>
 8007924:	4621      	mov	r1, r4
 8007926:	4628      	mov	r0, r5
 8007928:	f000 f80c 	bl	8007944 <__swsetup_r>
 800792c:	2800      	cmp	r0, #0
 800792e:	d0cb      	beq.n	80078c8 <__swbuf_r+0x28>
 8007930:	f04f 37ff 	mov.w	r7, #4294967295
 8007934:	e7ea      	b.n	800790c <__swbuf_r+0x6c>
 8007936:	bf00      	nop
 8007938:	0800a10c 	.word	0x0800a10c
 800793c:	0800a12c 	.word	0x0800a12c
 8007940:	0800a0ec 	.word	0x0800a0ec

08007944 <__swsetup_r>:
 8007944:	4b32      	ldr	r3, [pc, #200]	; (8007a10 <__swsetup_r+0xcc>)
 8007946:	b570      	push	{r4, r5, r6, lr}
 8007948:	681d      	ldr	r5, [r3, #0]
 800794a:	4606      	mov	r6, r0
 800794c:	460c      	mov	r4, r1
 800794e:	b125      	cbz	r5, 800795a <__swsetup_r+0x16>
 8007950:	69ab      	ldr	r3, [r5, #24]
 8007952:	b913      	cbnz	r3, 800795a <__swsetup_r+0x16>
 8007954:	4628      	mov	r0, r5
 8007956:	f000 f97d 	bl	8007c54 <__sinit>
 800795a:	4b2e      	ldr	r3, [pc, #184]	; (8007a14 <__swsetup_r+0xd0>)
 800795c:	429c      	cmp	r4, r3
 800795e:	d10f      	bne.n	8007980 <__swsetup_r+0x3c>
 8007960:	686c      	ldr	r4, [r5, #4]
 8007962:	89a3      	ldrh	r3, [r4, #12]
 8007964:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007968:	0719      	lsls	r1, r3, #28
 800796a:	d42c      	bmi.n	80079c6 <__swsetup_r+0x82>
 800796c:	06dd      	lsls	r5, r3, #27
 800796e:	d411      	bmi.n	8007994 <__swsetup_r+0x50>
 8007970:	2309      	movs	r3, #9
 8007972:	6033      	str	r3, [r6, #0]
 8007974:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007978:	81a3      	strh	r3, [r4, #12]
 800797a:	f04f 30ff 	mov.w	r0, #4294967295
 800797e:	e03e      	b.n	80079fe <__swsetup_r+0xba>
 8007980:	4b25      	ldr	r3, [pc, #148]	; (8007a18 <__swsetup_r+0xd4>)
 8007982:	429c      	cmp	r4, r3
 8007984:	d101      	bne.n	800798a <__swsetup_r+0x46>
 8007986:	68ac      	ldr	r4, [r5, #8]
 8007988:	e7eb      	b.n	8007962 <__swsetup_r+0x1e>
 800798a:	4b24      	ldr	r3, [pc, #144]	; (8007a1c <__swsetup_r+0xd8>)
 800798c:	429c      	cmp	r4, r3
 800798e:	bf08      	it	eq
 8007990:	68ec      	ldreq	r4, [r5, #12]
 8007992:	e7e6      	b.n	8007962 <__swsetup_r+0x1e>
 8007994:	0758      	lsls	r0, r3, #29
 8007996:	d512      	bpl.n	80079be <__swsetup_r+0x7a>
 8007998:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800799a:	b141      	cbz	r1, 80079ae <__swsetup_r+0x6a>
 800799c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80079a0:	4299      	cmp	r1, r3
 80079a2:	d002      	beq.n	80079aa <__swsetup_r+0x66>
 80079a4:	4630      	mov	r0, r6
 80079a6:	f7fe fef1 	bl	800678c <_free_r>
 80079aa:	2300      	movs	r3, #0
 80079ac:	6363      	str	r3, [r4, #52]	; 0x34
 80079ae:	89a3      	ldrh	r3, [r4, #12]
 80079b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80079b4:	81a3      	strh	r3, [r4, #12]
 80079b6:	2300      	movs	r3, #0
 80079b8:	6063      	str	r3, [r4, #4]
 80079ba:	6923      	ldr	r3, [r4, #16]
 80079bc:	6023      	str	r3, [r4, #0]
 80079be:	89a3      	ldrh	r3, [r4, #12]
 80079c0:	f043 0308 	orr.w	r3, r3, #8
 80079c4:	81a3      	strh	r3, [r4, #12]
 80079c6:	6923      	ldr	r3, [r4, #16]
 80079c8:	b94b      	cbnz	r3, 80079de <__swsetup_r+0x9a>
 80079ca:	89a3      	ldrh	r3, [r4, #12]
 80079cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80079d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079d4:	d003      	beq.n	80079de <__swsetup_r+0x9a>
 80079d6:	4621      	mov	r1, r4
 80079d8:	4630      	mov	r0, r6
 80079da:	f000 fd6f 	bl	80084bc <__smakebuf_r>
 80079de:	89a0      	ldrh	r0, [r4, #12]
 80079e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80079e4:	f010 0301 	ands.w	r3, r0, #1
 80079e8:	d00a      	beq.n	8007a00 <__swsetup_r+0xbc>
 80079ea:	2300      	movs	r3, #0
 80079ec:	60a3      	str	r3, [r4, #8]
 80079ee:	6963      	ldr	r3, [r4, #20]
 80079f0:	425b      	negs	r3, r3
 80079f2:	61a3      	str	r3, [r4, #24]
 80079f4:	6923      	ldr	r3, [r4, #16]
 80079f6:	b943      	cbnz	r3, 8007a0a <__swsetup_r+0xc6>
 80079f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80079fc:	d1ba      	bne.n	8007974 <__swsetup_r+0x30>
 80079fe:	bd70      	pop	{r4, r5, r6, pc}
 8007a00:	0781      	lsls	r1, r0, #30
 8007a02:	bf58      	it	pl
 8007a04:	6963      	ldrpl	r3, [r4, #20]
 8007a06:	60a3      	str	r3, [r4, #8]
 8007a08:	e7f4      	b.n	80079f4 <__swsetup_r+0xb0>
 8007a0a:	2000      	movs	r0, #0
 8007a0c:	e7f7      	b.n	80079fe <__swsetup_r+0xba>
 8007a0e:	bf00      	nop
 8007a10:	2000019c 	.word	0x2000019c
 8007a14:	0800a10c 	.word	0x0800a10c
 8007a18:	0800a12c 	.word	0x0800a12c
 8007a1c:	0800a0ec 	.word	0x0800a0ec

08007a20 <__sflush_r>:
 8007a20:	898a      	ldrh	r2, [r1, #12]
 8007a22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a26:	4605      	mov	r5, r0
 8007a28:	0710      	lsls	r0, r2, #28
 8007a2a:	460c      	mov	r4, r1
 8007a2c:	d458      	bmi.n	8007ae0 <__sflush_r+0xc0>
 8007a2e:	684b      	ldr	r3, [r1, #4]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	dc05      	bgt.n	8007a40 <__sflush_r+0x20>
 8007a34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	dc02      	bgt.n	8007a40 <__sflush_r+0x20>
 8007a3a:	2000      	movs	r0, #0
 8007a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a42:	2e00      	cmp	r6, #0
 8007a44:	d0f9      	beq.n	8007a3a <__sflush_r+0x1a>
 8007a46:	2300      	movs	r3, #0
 8007a48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007a4c:	682f      	ldr	r7, [r5, #0]
 8007a4e:	602b      	str	r3, [r5, #0]
 8007a50:	d032      	beq.n	8007ab8 <__sflush_r+0x98>
 8007a52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007a54:	89a3      	ldrh	r3, [r4, #12]
 8007a56:	075a      	lsls	r2, r3, #29
 8007a58:	d505      	bpl.n	8007a66 <__sflush_r+0x46>
 8007a5a:	6863      	ldr	r3, [r4, #4]
 8007a5c:	1ac0      	subs	r0, r0, r3
 8007a5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a60:	b10b      	cbz	r3, 8007a66 <__sflush_r+0x46>
 8007a62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a64:	1ac0      	subs	r0, r0, r3
 8007a66:	2300      	movs	r3, #0
 8007a68:	4602      	mov	r2, r0
 8007a6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a6c:	6a21      	ldr	r1, [r4, #32]
 8007a6e:	4628      	mov	r0, r5
 8007a70:	47b0      	blx	r6
 8007a72:	1c43      	adds	r3, r0, #1
 8007a74:	89a3      	ldrh	r3, [r4, #12]
 8007a76:	d106      	bne.n	8007a86 <__sflush_r+0x66>
 8007a78:	6829      	ldr	r1, [r5, #0]
 8007a7a:	291d      	cmp	r1, #29
 8007a7c:	d82c      	bhi.n	8007ad8 <__sflush_r+0xb8>
 8007a7e:	4a2a      	ldr	r2, [pc, #168]	; (8007b28 <__sflush_r+0x108>)
 8007a80:	40ca      	lsrs	r2, r1
 8007a82:	07d6      	lsls	r6, r2, #31
 8007a84:	d528      	bpl.n	8007ad8 <__sflush_r+0xb8>
 8007a86:	2200      	movs	r2, #0
 8007a88:	6062      	str	r2, [r4, #4]
 8007a8a:	04d9      	lsls	r1, r3, #19
 8007a8c:	6922      	ldr	r2, [r4, #16]
 8007a8e:	6022      	str	r2, [r4, #0]
 8007a90:	d504      	bpl.n	8007a9c <__sflush_r+0x7c>
 8007a92:	1c42      	adds	r2, r0, #1
 8007a94:	d101      	bne.n	8007a9a <__sflush_r+0x7a>
 8007a96:	682b      	ldr	r3, [r5, #0]
 8007a98:	b903      	cbnz	r3, 8007a9c <__sflush_r+0x7c>
 8007a9a:	6560      	str	r0, [r4, #84]	; 0x54
 8007a9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a9e:	602f      	str	r7, [r5, #0]
 8007aa0:	2900      	cmp	r1, #0
 8007aa2:	d0ca      	beq.n	8007a3a <__sflush_r+0x1a>
 8007aa4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007aa8:	4299      	cmp	r1, r3
 8007aaa:	d002      	beq.n	8007ab2 <__sflush_r+0x92>
 8007aac:	4628      	mov	r0, r5
 8007aae:	f7fe fe6d 	bl	800678c <_free_r>
 8007ab2:	2000      	movs	r0, #0
 8007ab4:	6360      	str	r0, [r4, #52]	; 0x34
 8007ab6:	e7c1      	b.n	8007a3c <__sflush_r+0x1c>
 8007ab8:	6a21      	ldr	r1, [r4, #32]
 8007aba:	2301      	movs	r3, #1
 8007abc:	4628      	mov	r0, r5
 8007abe:	47b0      	blx	r6
 8007ac0:	1c41      	adds	r1, r0, #1
 8007ac2:	d1c7      	bne.n	8007a54 <__sflush_r+0x34>
 8007ac4:	682b      	ldr	r3, [r5, #0]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d0c4      	beq.n	8007a54 <__sflush_r+0x34>
 8007aca:	2b1d      	cmp	r3, #29
 8007acc:	d001      	beq.n	8007ad2 <__sflush_r+0xb2>
 8007ace:	2b16      	cmp	r3, #22
 8007ad0:	d101      	bne.n	8007ad6 <__sflush_r+0xb6>
 8007ad2:	602f      	str	r7, [r5, #0]
 8007ad4:	e7b1      	b.n	8007a3a <__sflush_r+0x1a>
 8007ad6:	89a3      	ldrh	r3, [r4, #12]
 8007ad8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007adc:	81a3      	strh	r3, [r4, #12]
 8007ade:	e7ad      	b.n	8007a3c <__sflush_r+0x1c>
 8007ae0:	690f      	ldr	r7, [r1, #16]
 8007ae2:	2f00      	cmp	r7, #0
 8007ae4:	d0a9      	beq.n	8007a3a <__sflush_r+0x1a>
 8007ae6:	0793      	lsls	r3, r2, #30
 8007ae8:	680e      	ldr	r6, [r1, #0]
 8007aea:	bf08      	it	eq
 8007aec:	694b      	ldreq	r3, [r1, #20]
 8007aee:	600f      	str	r7, [r1, #0]
 8007af0:	bf18      	it	ne
 8007af2:	2300      	movne	r3, #0
 8007af4:	eba6 0807 	sub.w	r8, r6, r7
 8007af8:	608b      	str	r3, [r1, #8]
 8007afa:	f1b8 0f00 	cmp.w	r8, #0
 8007afe:	dd9c      	ble.n	8007a3a <__sflush_r+0x1a>
 8007b00:	6a21      	ldr	r1, [r4, #32]
 8007b02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007b04:	4643      	mov	r3, r8
 8007b06:	463a      	mov	r2, r7
 8007b08:	4628      	mov	r0, r5
 8007b0a:	47b0      	blx	r6
 8007b0c:	2800      	cmp	r0, #0
 8007b0e:	dc06      	bgt.n	8007b1e <__sflush_r+0xfe>
 8007b10:	89a3      	ldrh	r3, [r4, #12]
 8007b12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b16:	81a3      	strh	r3, [r4, #12]
 8007b18:	f04f 30ff 	mov.w	r0, #4294967295
 8007b1c:	e78e      	b.n	8007a3c <__sflush_r+0x1c>
 8007b1e:	4407      	add	r7, r0
 8007b20:	eba8 0800 	sub.w	r8, r8, r0
 8007b24:	e7e9      	b.n	8007afa <__sflush_r+0xda>
 8007b26:	bf00      	nop
 8007b28:	20400001 	.word	0x20400001

08007b2c <_fflush_r>:
 8007b2c:	b538      	push	{r3, r4, r5, lr}
 8007b2e:	690b      	ldr	r3, [r1, #16]
 8007b30:	4605      	mov	r5, r0
 8007b32:	460c      	mov	r4, r1
 8007b34:	b913      	cbnz	r3, 8007b3c <_fflush_r+0x10>
 8007b36:	2500      	movs	r5, #0
 8007b38:	4628      	mov	r0, r5
 8007b3a:	bd38      	pop	{r3, r4, r5, pc}
 8007b3c:	b118      	cbz	r0, 8007b46 <_fflush_r+0x1a>
 8007b3e:	6983      	ldr	r3, [r0, #24]
 8007b40:	b90b      	cbnz	r3, 8007b46 <_fflush_r+0x1a>
 8007b42:	f000 f887 	bl	8007c54 <__sinit>
 8007b46:	4b14      	ldr	r3, [pc, #80]	; (8007b98 <_fflush_r+0x6c>)
 8007b48:	429c      	cmp	r4, r3
 8007b4a:	d11b      	bne.n	8007b84 <_fflush_r+0x58>
 8007b4c:	686c      	ldr	r4, [r5, #4]
 8007b4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d0ef      	beq.n	8007b36 <_fflush_r+0xa>
 8007b56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007b58:	07d0      	lsls	r0, r2, #31
 8007b5a:	d404      	bmi.n	8007b66 <_fflush_r+0x3a>
 8007b5c:	0599      	lsls	r1, r3, #22
 8007b5e:	d402      	bmi.n	8007b66 <_fflush_r+0x3a>
 8007b60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b62:	f000 fc84 	bl	800846e <__retarget_lock_acquire_recursive>
 8007b66:	4628      	mov	r0, r5
 8007b68:	4621      	mov	r1, r4
 8007b6a:	f7ff ff59 	bl	8007a20 <__sflush_r>
 8007b6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b70:	07da      	lsls	r2, r3, #31
 8007b72:	4605      	mov	r5, r0
 8007b74:	d4e0      	bmi.n	8007b38 <_fflush_r+0xc>
 8007b76:	89a3      	ldrh	r3, [r4, #12]
 8007b78:	059b      	lsls	r3, r3, #22
 8007b7a:	d4dd      	bmi.n	8007b38 <_fflush_r+0xc>
 8007b7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b7e:	f000 fc77 	bl	8008470 <__retarget_lock_release_recursive>
 8007b82:	e7d9      	b.n	8007b38 <_fflush_r+0xc>
 8007b84:	4b05      	ldr	r3, [pc, #20]	; (8007b9c <_fflush_r+0x70>)
 8007b86:	429c      	cmp	r4, r3
 8007b88:	d101      	bne.n	8007b8e <_fflush_r+0x62>
 8007b8a:	68ac      	ldr	r4, [r5, #8]
 8007b8c:	e7df      	b.n	8007b4e <_fflush_r+0x22>
 8007b8e:	4b04      	ldr	r3, [pc, #16]	; (8007ba0 <_fflush_r+0x74>)
 8007b90:	429c      	cmp	r4, r3
 8007b92:	bf08      	it	eq
 8007b94:	68ec      	ldreq	r4, [r5, #12]
 8007b96:	e7da      	b.n	8007b4e <_fflush_r+0x22>
 8007b98:	0800a10c 	.word	0x0800a10c
 8007b9c:	0800a12c 	.word	0x0800a12c
 8007ba0:	0800a0ec 	.word	0x0800a0ec

08007ba4 <std>:
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	b510      	push	{r4, lr}
 8007ba8:	4604      	mov	r4, r0
 8007baa:	e9c0 3300 	strd	r3, r3, [r0]
 8007bae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007bb2:	6083      	str	r3, [r0, #8]
 8007bb4:	8181      	strh	r1, [r0, #12]
 8007bb6:	6643      	str	r3, [r0, #100]	; 0x64
 8007bb8:	81c2      	strh	r2, [r0, #14]
 8007bba:	6183      	str	r3, [r0, #24]
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	2208      	movs	r2, #8
 8007bc0:	305c      	adds	r0, #92	; 0x5c
 8007bc2:	f7fe fddb 	bl	800677c <memset>
 8007bc6:	4b05      	ldr	r3, [pc, #20]	; (8007bdc <std+0x38>)
 8007bc8:	6263      	str	r3, [r4, #36]	; 0x24
 8007bca:	4b05      	ldr	r3, [pc, #20]	; (8007be0 <std+0x3c>)
 8007bcc:	62a3      	str	r3, [r4, #40]	; 0x28
 8007bce:	4b05      	ldr	r3, [pc, #20]	; (8007be4 <std+0x40>)
 8007bd0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007bd2:	4b05      	ldr	r3, [pc, #20]	; (8007be8 <std+0x44>)
 8007bd4:	6224      	str	r4, [r4, #32]
 8007bd6:	6323      	str	r3, [r4, #48]	; 0x30
 8007bd8:	bd10      	pop	{r4, pc}
 8007bda:	bf00      	nop
 8007bdc:	0800984d 	.word	0x0800984d
 8007be0:	0800986f 	.word	0x0800986f
 8007be4:	080098a7 	.word	0x080098a7
 8007be8:	080098cb 	.word	0x080098cb

08007bec <_cleanup_r>:
 8007bec:	4901      	ldr	r1, [pc, #4]	; (8007bf4 <_cleanup_r+0x8>)
 8007bee:	f000 b8af 	b.w	8007d50 <_fwalk_reent>
 8007bf2:	bf00      	nop
 8007bf4:	08007b2d 	.word	0x08007b2d

08007bf8 <__sfmoreglue>:
 8007bf8:	b570      	push	{r4, r5, r6, lr}
 8007bfa:	1e4a      	subs	r2, r1, #1
 8007bfc:	2568      	movs	r5, #104	; 0x68
 8007bfe:	4355      	muls	r5, r2
 8007c00:	460e      	mov	r6, r1
 8007c02:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007c06:	f7fe fe11 	bl	800682c <_malloc_r>
 8007c0a:	4604      	mov	r4, r0
 8007c0c:	b140      	cbz	r0, 8007c20 <__sfmoreglue+0x28>
 8007c0e:	2100      	movs	r1, #0
 8007c10:	e9c0 1600 	strd	r1, r6, [r0]
 8007c14:	300c      	adds	r0, #12
 8007c16:	60a0      	str	r0, [r4, #8]
 8007c18:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007c1c:	f7fe fdae 	bl	800677c <memset>
 8007c20:	4620      	mov	r0, r4
 8007c22:	bd70      	pop	{r4, r5, r6, pc}

08007c24 <__sfp_lock_acquire>:
 8007c24:	4801      	ldr	r0, [pc, #4]	; (8007c2c <__sfp_lock_acquire+0x8>)
 8007c26:	f000 bc22 	b.w	800846e <__retarget_lock_acquire_recursive>
 8007c2a:	bf00      	nop
 8007c2c:	20001944 	.word	0x20001944

08007c30 <__sfp_lock_release>:
 8007c30:	4801      	ldr	r0, [pc, #4]	; (8007c38 <__sfp_lock_release+0x8>)
 8007c32:	f000 bc1d 	b.w	8008470 <__retarget_lock_release_recursive>
 8007c36:	bf00      	nop
 8007c38:	20001944 	.word	0x20001944

08007c3c <__sinit_lock_acquire>:
 8007c3c:	4801      	ldr	r0, [pc, #4]	; (8007c44 <__sinit_lock_acquire+0x8>)
 8007c3e:	f000 bc16 	b.w	800846e <__retarget_lock_acquire_recursive>
 8007c42:	bf00      	nop
 8007c44:	2000193f 	.word	0x2000193f

08007c48 <__sinit_lock_release>:
 8007c48:	4801      	ldr	r0, [pc, #4]	; (8007c50 <__sinit_lock_release+0x8>)
 8007c4a:	f000 bc11 	b.w	8008470 <__retarget_lock_release_recursive>
 8007c4e:	bf00      	nop
 8007c50:	2000193f 	.word	0x2000193f

08007c54 <__sinit>:
 8007c54:	b510      	push	{r4, lr}
 8007c56:	4604      	mov	r4, r0
 8007c58:	f7ff fff0 	bl	8007c3c <__sinit_lock_acquire>
 8007c5c:	69a3      	ldr	r3, [r4, #24]
 8007c5e:	b11b      	cbz	r3, 8007c68 <__sinit+0x14>
 8007c60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c64:	f7ff bff0 	b.w	8007c48 <__sinit_lock_release>
 8007c68:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007c6c:	6523      	str	r3, [r4, #80]	; 0x50
 8007c6e:	4b13      	ldr	r3, [pc, #76]	; (8007cbc <__sinit+0x68>)
 8007c70:	4a13      	ldr	r2, [pc, #76]	; (8007cc0 <__sinit+0x6c>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	62a2      	str	r2, [r4, #40]	; 0x28
 8007c76:	42a3      	cmp	r3, r4
 8007c78:	bf04      	itt	eq
 8007c7a:	2301      	moveq	r3, #1
 8007c7c:	61a3      	streq	r3, [r4, #24]
 8007c7e:	4620      	mov	r0, r4
 8007c80:	f000 f820 	bl	8007cc4 <__sfp>
 8007c84:	6060      	str	r0, [r4, #4]
 8007c86:	4620      	mov	r0, r4
 8007c88:	f000 f81c 	bl	8007cc4 <__sfp>
 8007c8c:	60a0      	str	r0, [r4, #8]
 8007c8e:	4620      	mov	r0, r4
 8007c90:	f000 f818 	bl	8007cc4 <__sfp>
 8007c94:	2200      	movs	r2, #0
 8007c96:	60e0      	str	r0, [r4, #12]
 8007c98:	2104      	movs	r1, #4
 8007c9a:	6860      	ldr	r0, [r4, #4]
 8007c9c:	f7ff ff82 	bl	8007ba4 <std>
 8007ca0:	68a0      	ldr	r0, [r4, #8]
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	2109      	movs	r1, #9
 8007ca6:	f7ff ff7d 	bl	8007ba4 <std>
 8007caa:	68e0      	ldr	r0, [r4, #12]
 8007cac:	2202      	movs	r2, #2
 8007cae:	2112      	movs	r1, #18
 8007cb0:	f7ff ff78 	bl	8007ba4 <std>
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	61a3      	str	r3, [r4, #24]
 8007cb8:	e7d2      	b.n	8007c60 <__sinit+0xc>
 8007cba:	bf00      	nop
 8007cbc:	08009f84 	.word	0x08009f84
 8007cc0:	08007bed 	.word	0x08007bed

08007cc4 <__sfp>:
 8007cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cc6:	4607      	mov	r7, r0
 8007cc8:	f7ff ffac 	bl	8007c24 <__sfp_lock_acquire>
 8007ccc:	4b1e      	ldr	r3, [pc, #120]	; (8007d48 <__sfp+0x84>)
 8007cce:	681e      	ldr	r6, [r3, #0]
 8007cd0:	69b3      	ldr	r3, [r6, #24]
 8007cd2:	b913      	cbnz	r3, 8007cda <__sfp+0x16>
 8007cd4:	4630      	mov	r0, r6
 8007cd6:	f7ff ffbd 	bl	8007c54 <__sinit>
 8007cda:	3648      	adds	r6, #72	; 0x48
 8007cdc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007ce0:	3b01      	subs	r3, #1
 8007ce2:	d503      	bpl.n	8007cec <__sfp+0x28>
 8007ce4:	6833      	ldr	r3, [r6, #0]
 8007ce6:	b30b      	cbz	r3, 8007d2c <__sfp+0x68>
 8007ce8:	6836      	ldr	r6, [r6, #0]
 8007cea:	e7f7      	b.n	8007cdc <__sfp+0x18>
 8007cec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007cf0:	b9d5      	cbnz	r5, 8007d28 <__sfp+0x64>
 8007cf2:	4b16      	ldr	r3, [pc, #88]	; (8007d4c <__sfp+0x88>)
 8007cf4:	60e3      	str	r3, [r4, #12]
 8007cf6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007cfa:	6665      	str	r5, [r4, #100]	; 0x64
 8007cfc:	f000 fbb6 	bl	800846c <__retarget_lock_init_recursive>
 8007d00:	f7ff ff96 	bl	8007c30 <__sfp_lock_release>
 8007d04:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007d08:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007d0c:	6025      	str	r5, [r4, #0]
 8007d0e:	61a5      	str	r5, [r4, #24]
 8007d10:	2208      	movs	r2, #8
 8007d12:	4629      	mov	r1, r5
 8007d14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007d18:	f7fe fd30 	bl	800677c <memset>
 8007d1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007d20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007d24:	4620      	mov	r0, r4
 8007d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d28:	3468      	adds	r4, #104	; 0x68
 8007d2a:	e7d9      	b.n	8007ce0 <__sfp+0x1c>
 8007d2c:	2104      	movs	r1, #4
 8007d2e:	4638      	mov	r0, r7
 8007d30:	f7ff ff62 	bl	8007bf8 <__sfmoreglue>
 8007d34:	4604      	mov	r4, r0
 8007d36:	6030      	str	r0, [r6, #0]
 8007d38:	2800      	cmp	r0, #0
 8007d3a:	d1d5      	bne.n	8007ce8 <__sfp+0x24>
 8007d3c:	f7ff ff78 	bl	8007c30 <__sfp_lock_release>
 8007d40:	230c      	movs	r3, #12
 8007d42:	603b      	str	r3, [r7, #0]
 8007d44:	e7ee      	b.n	8007d24 <__sfp+0x60>
 8007d46:	bf00      	nop
 8007d48:	08009f84 	.word	0x08009f84
 8007d4c:	ffff0001 	.word	0xffff0001

08007d50 <_fwalk_reent>:
 8007d50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d54:	4606      	mov	r6, r0
 8007d56:	4688      	mov	r8, r1
 8007d58:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007d5c:	2700      	movs	r7, #0
 8007d5e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d62:	f1b9 0901 	subs.w	r9, r9, #1
 8007d66:	d505      	bpl.n	8007d74 <_fwalk_reent+0x24>
 8007d68:	6824      	ldr	r4, [r4, #0]
 8007d6a:	2c00      	cmp	r4, #0
 8007d6c:	d1f7      	bne.n	8007d5e <_fwalk_reent+0xe>
 8007d6e:	4638      	mov	r0, r7
 8007d70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d74:	89ab      	ldrh	r3, [r5, #12]
 8007d76:	2b01      	cmp	r3, #1
 8007d78:	d907      	bls.n	8007d8a <_fwalk_reent+0x3a>
 8007d7a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d7e:	3301      	adds	r3, #1
 8007d80:	d003      	beq.n	8007d8a <_fwalk_reent+0x3a>
 8007d82:	4629      	mov	r1, r5
 8007d84:	4630      	mov	r0, r6
 8007d86:	47c0      	blx	r8
 8007d88:	4307      	orrs	r7, r0
 8007d8a:	3568      	adds	r5, #104	; 0x68
 8007d8c:	e7e9      	b.n	8007d62 <_fwalk_reent+0x12>

08007d8e <rshift>:
 8007d8e:	6903      	ldr	r3, [r0, #16]
 8007d90:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007d94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007d98:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007d9c:	f100 0414 	add.w	r4, r0, #20
 8007da0:	dd45      	ble.n	8007e2e <rshift+0xa0>
 8007da2:	f011 011f 	ands.w	r1, r1, #31
 8007da6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007daa:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007dae:	d10c      	bne.n	8007dca <rshift+0x3c>
 8007db0:	f100 0710 	add.w	r7, r0, #16
 8007db4:	4629      	mov	r1, r5
 8007db6:	42b1      	cmp	r1, r6
 8007db8:	d334      	bcc.n	8007e24 <rshift+0x96>
 8007dba:	1a9b      	subs	r3, r3, r2
 8007dbc:	009b      	lsls	r3, r3, #2
 8007dbe:	1eea      	subs	r2, r5, #3
 8007dc0:	4296      	cmp	r6, r2
 8007dc2:	bf38      	it	cc
 8007dc4:	2300      	movcc	r3, #0
 8007dc6:	4423      	add	r3, r4
 8007dc8:	e015      	b.n	8007df6 <rshift+0x68>
 8007dca:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007dce:	f1c1 0820 	rsb	r8, r1, #32
 8007dd2:	40cf      	lsrs	r7, r1
 8007dd4:	f105 0e04 	add.w	lr, r5, #4
 8007dd8:	46a1      	mov	r9, r4
 8007dda:	4576      	cmp	r6, lr
 8007ddc:	46f4      	mov	ip, lr
 8007dde:	d815      	bhi.n	8007e0c <rshift+0x7e>
 8007de0:	1a9b      	subs	r3, r3, r2
 8007de2:	009a      	lsls	r2, r3, #2
 8007de4:	3a04      	subs	r2, #4
 8007de6:	3501      	adds	r5, #1
 8007de8:	42ae      	cmp	r6, r5
 8007dea:	bf38      	it	cc
 8007dec:	2200      	movcc	r2, #0
 8007dee:	18a3      	adds	r3, r4, r2
 8007df0:	50a7      	str	r7, [r4, r2]
 8007df2:	b107      	cbz	r7, 8007df6 <rshift+0x68>
 8007df4:	3304      	adds	r3, #4
 8007df6:	1b1a      	subs	r2, r3, r4
 8007df8:	42a3      	cmp	r3, r4
 8007dfa:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007dfe:	bf08      	it	eq
 8007e00:	2300      	moveq	r3, #0
 8007e02:	6102      	str	r2, [r0, #16]
 8007e04:	bf08      	it	eq
 8007e06:	6143      	streq	r3, [r0, #20]
 8007e08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e0c:	f8dc c000 	ldr.w	ip, [ip]
 8007e10:	fa0c fc08 	lsl.w	ip, ip, r8
 8007e14:	ea4c 0707 	orr.w	r7, ip, r7
 8007e18:	f849 7b04 	str.w	r7, [r9], #4
 8007e1c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007e20:	40cf      	lsrs	r7, r1
 8007e22:	e7da      	b.n	8007dda <rshift+0x4c>
 8007e24:	f851 cb04 	ldr.w	ip, [r1], #4
 8007e28:	f847 cf04 	str.w	ip, [r7, #4]!
 8007e2c:	e7c3      	b.n	8007db6 <rshift+0x28>
 8007e2e:	4623      	mov	r3, r4
 8007e30:	e7e1      	b.n	8007df6 <rshift+0x68>

08007e32 <__hexdig_fun>:
 8007e32:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007e36:	2b09      	cmp	r3, #9
 8007e38:	d802      	bhi.n	8007e40 <__hexdig_fun+0xe>
 8007e3a:	3820      	subs	r0, #32
 8007e3c:	b2c0      	uxtb	r0, r0
 8007e3e:	4770      	bx	lr
 8007e40:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007e44:	2b05      	cmp	r3, #5
 8007e46:	d801      	bhi.n	8007e4c <__hexdig_fun+0x1a>
 8007e48:	3847      	subs	r0, #71	; 0x47
 8007e4a:	e7f7      	b.n	8007e3c <__hexdig_fun+0xa>
 8007e4c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007e50:	2b05      	cmp	r3, #5
 8007e52:	d801      	bhi.n	8007e58 <__hexdig_fun+0x26>
 8007e54:	3827      	subs	r0, #39	; 0x27
 8007e56:	e7f1      	b.n	8007e3c <__hexdig_fun+0xa>
 8007e58:	2000      	movs	r0, #0
 8007e5a:	4770      	bx	lr

08007e5c <__gethex>:
 8007e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e60:	ed2d 8b02 	vpush	{d8}
 8007e64:	b089      	sub	sp, #36	; 0x24
 8007e66:	ee08 0a10 	vmov	s16, r0
 8007e6a:	9304      	str	r3, [sp, #16]
 8007e6c:	4bbc      	ldr	r3, [pc, #752]	; (8008160 <__gethex+0x304>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	9301      	str	r3, [sp, #4]
 8007e72:	4618      	mov	r0, r3
 8007e74:	468b      	mov	fp, r1
 8007e76:	4690      	mov	r8, r2
 8007e78:	f7f8 f9ec 	bl	8000254 <strlen>
 8007e7c:	9b01      	ldr	r3, [sp, #4]
 8007e7e:	f8db 2000 	ldr.w	r2, [fp]
 8007e82:	4403      	add	r3, r0
 8007e84:	4682      	mov	sl, r0
 8007e86:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007e8a:	9305      	str	r3, [sp, #20]
 8007e8c:	1c93      	adds	r3, r2, #2
 8007e8e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007e92:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007e96:	32fe      	adds	r2, #254	; 0xfe
 8007e98:	18d1      	adds	r1, r2, r3
 8007e9a:	461f      	mov	r7, r3
 8007e9c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007ea0:	9100      	str	r1, [sp, #0]
 8007ea2:	2830      	cmp	r0, #48	; 0x30
 8007ea4:	d0f8      	beq.n	8007e98 <__gethex+0x3c>
 8007ea6:	f7ff ffc4 	bl	8007e32 <__hexdig_fun>
 8007eaa:	4604      	mov	r4, r0
 8007eac:	2800      	cmp	r0, #0
 8007eae:	d13a      	bne.n	8007f26 <__gethex+0xca>
 8007eb0:	9901      	ldr	r1, [sp, #4]
 8007eb2:	4652      	mov	r2, sl
 8007eb4:	4638      	mov	r0, r7
 8007eb6:	f001 fd0c 	bl	80098d2 <strncmp>
 8007eba:	4605      	mov	r5, r0
 8007ebc:	2800      	cmp	r0, #0
 8007ebe:	d168      	bne.n	8007f92 <__gethex+0x136>
 8007ec0:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007ec4:	eb07 060a 	add.w	r6, r7, sl
 8007ec8:	f7ff ffb3 	bl	8007e32 <__hexdig_fun>
 8007ecc:	2800      	cmp	r0, #0
 8007ece:	d062      	beq.n	8007f96 <__gethex+0x13a>
 8007ed0:	4633      	mov	r3, r6
 8007ed2:	7818      	ldrb	r0, [r3, #0]
 8007ed4:	2830      	cmp	r0, #48	; 0x30
 8007ed6:	461f      	mov	r7, r3
 8007ed8:	f103 0301 	add.w	r3, r3, #1
 8007edc:	d0f9      	beq.n	8007ed2 <__gethex+0x76>
 8007ede:	f7ff ffa8 	bl	8007e32 <__hexdig_fun>
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	fab0 f480 	clz	r4, r0
 8007ee8:	0964      	lsrs	r4, r4, #5
 8007eea:	4635      	mov	r5, r6
 8007eec:	9300      	str	r3, [sp, #0]
 8007eee:	463a      	mov	r2, r7
 8007ef0:	4616      	mov	r6, r2
 8007ef2:	3201      	adds	r2, #1
 8007ef4:	7830      	ldrb	r0, [r6, #0]
 8007ef6:	f7ff ff9c 	bl	8007e32 <__hexdig_fun>
 8007efa:	2800      	cmp	r0, #0
 8007efc:	d1f8      	bne.n	8007ef0 <__gethex+0x94>
 8007efe:	9901      	ldr	r1, [sp, #4]
 8007f00:	4652      	mov	r2, sl
 8007f02:	4630      	mov	r0, r6
 8007f04:	f001 fce5 	bl	80098d2 <strncmp>
 8007f08:	b980      	cbnz	r0, 8007f2c <__gethex+0xd0>
 8007f0a:	b94d      	cbnz	r5, 8007f20 <__gethex+0xc4>
 8007f0c:	eb06 050a 	add.w	r5, r6, sl
 8007f10:	462a      	mov	r2, r5
 8007f12:	4616      	mov	r6, r2
 8007f14:	3201      	adds	r2, #1
 8007f16:	7830      	ldrb	r0, [r6, #0]
 8007f18:	f7ff ff8b 	bl	8007e32 <__hexdig_fun>
 8007f1c:	2800      	cmp	r0, #0
 8007f1e:	d1f8      	bne.n	8007f12 <__gethex+0xb6>
 8007f20:	1bad      	subs	r5, r5, r6
 8007f22:	00ad      	lsls	r5, r5, #2
 8007f24:	e004      	b.n	8007f30 <__gethex+0xd4>
 8007f26:	2400      	movs	r4, #0
 8007f28:	4625      	mov	r5, r4
 8007f2a:	e7e0      	b.n	8007eee <__gethex+0x92>
 8007f2c:	2d00      	cmp	r5, #0
 8007f2e:	d1f7      	bne.n	8007f20 <__gethex+0xc4>
 8007f30:	7833      	ldrb	r3, [r6, #0]
 8007f32:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007f36:	2b50      	cmp	r3, #80	; 0x50
 8007f38:	d13b      	bne.n	8007fb2 <__gethex+0x156>
 8007f3a:	7873      	ldrb	r3, [r6, #1]
 8007f3c:	2b2b      	cmp	r3, #43	; 0x2b
 8007f3e:	d02c      	beq.n	8007f9a <__gethex+0x13e>
 8007f40:	2b2d      	cmp	r3, #45	; 0x2d
 8007f42:	d02e      	beq.n	8007fa2 <__gethex+0x146>
 8007f44:	1c71      	adds	r1, r6, #1
 8007f46:	f04f 0900 	mov.w	r9, #0
 8007f4a:	7808      	ldrb	r0, [r1, #0]
 8007f4c:	f7ff ff71 	bl	8007e32 <__hexdig_fun>
 8007f50:	1e43      	subs	r3, r0, #1
 8007f52:	b2db      	uxtb	r3, r3
 8007f54:	2b18      	cmp	r3, #24
 8007f56:	d82c      	bhi.n	8007fb2 <__gethex+0x156>
 8007f58:	f1a0 0210 	sub.w	r2, r0, #16
 8007f5c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007f60:	f7ff ff67 	bl	8007e32 <__hexdig_fun>
 8007f64:	1e43      	subs	r3, r0, #1
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	2b18      	cmp	r3, #24
 8007f6a:	d91d      	bls.n	8007fa8 <__gethex+0x14c>
 8007f6c:	f1b9 0f00 	cmp.w	r9, #0
 8007f70:	d000      	beq.n	8007f74 <__gethex+0x118>
 8007f72:	4252      	negs	r2, r2
 8007f74:	4415      	add	r5, r2
 8007f76:	f8cb 1000 	str.w	r1, [fp]
 8007f7a:	b1e4      	cbz	r4, 8007fb6 <__gethex+0x15a>
 8007f7c:	9b00      	ldr	r3, [sp, #0]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	bf14      	ite	ne
 8007f82:	2700      	movne	r7, #0
 8007f84:	2706      	moveq	r7, #6
 8007f86:	4638      	mov	r0, r7
 8007f88:	b009      	add	sp, #36	; 0x24
 8007f8a:	ecbd 8b02 	vpop	{d8}
 8007f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f92:	463e      	mov	r6, r7
 8007f94:	4625      	mov	r5, r4
 8007f96:	2401      	movs	r4, #1
 8007f98:	e7ca      	b.n	8007f30 <__gethex+0xd4>
 8007f9a:	f04f 0900 	mov.w	r9, #0
 8007f9e:	1cb1      	adds	r1, r6, #2
 8007fa0:	e7d3      	b.n	8007f4a <__gethex+0xee>
 8007fa2:	f04f 0901 	mov.w	r9, #1
 8007fa6:	e7fa      	b.n	8007f9e <__gethex+0x142>
 8007fa8:	230a      	movs	r3, #10
 8007faa:	fb03 0202 	mla	r2, r3, r2, r0
 8007fae:	3a10      	subs	r2, #16
 8007fb0:	e7d4      	b.n	8007f5c <__gethex+0x100>
 8007fb2:	4631      	mov	r1, r6
 8007fb4:	e7df      	b.n	8007f76 <__gethex+0x11a>
 8007fb6:	1bf3      	subs	r3, r6, r7
 8007fb8:	3b01      	subs	r3, #1
 8007fba:	4621      	mov	r1, r4
 8007fbc:	2b07      	cmp	r3, #7
 8007fbe:	dc0b      	bgt.n	8007fd8 <__gethex+0x17c>
 8007fc0:	ee18 0a10 	vmov	r0, s16
 8007fc4:	f000 fad8 	bl	8008578 <_Balloc>
 8007fc8:	4604      	mov	r4, r0
 8007fca:	b940      	cbnz	r0, 8007fde <__gethex+0x182>
 8007fcc:	4b65      	ldr	r3, [pc, #404]	; (8008164 <__gethex+0x308>)
 8007fce:	4602      	mov	r2, r0
 8007fd0:	21de      	movs	r1, #222	; 0xde
 8007fd2:	4865      	ldr	r0, [pc, #404]	; (8008168 <__gethex+0x30c>)
 8007fd4:	f001 fcae 	bl	8009934 <__assert_func>
 8007fd8:	3101      	adds	r1, #1
 8007fda:	105b      	asrs	r3, r3, #1
 8007fdc:	e7ee      	b.n	8007fbc <__gethex+0x160>
 8007fde:	f100 0914 	add.w	r9, r0, #20
 8007fe2:	f04f 0b00 	mov.w	fp, #0
 8007fe6:	f1ca 0301 	rsb	r3, sl, #1
 8007fea:	f8cd 9008 	str.w	r9, [sp, #8]
 8007fee:	f8cd b000 	str.w	fp, [sp]
 8007ff2:	9306      	str	r3, [sp, #24]
 8007ff4:	42b7      	cmp	r7, r6
 8007ff6:	d340      	bcc.n	800807a <__gethex+0x21e>
 8007ff8:	9802      	ldr	r0, [sp, #8]
 8007ffa:	9b00      	ldr	r3, [sp, #0]
 8007ffc:	f840 3b04 	str.w	r3, [r0], #4
 8008000:	eba0 0009 	sub.w	r0, r0, r9
 8008004:	1080      	asrs	r0, r0, #2
 8008006:	0146      	lsls	r6, r0, #5
 8008008:	6120      	str	r0, [r4, #16]
 800800a:	4618      	mov	r0, r3
 800800c:	f000 fbaa 	bl	8008764 <__hi0bits>
 8008010:	1a30      	subs	r0, r6, r0
 8008012:	f8d8 6000 	ldr.w	r6, [r8]
 8008016:	42b0      	cmp	r0, r6
 8008018:	dd63      	ble.n	80080e2 <__gethex+0x286>
 800801a:	1b87      	subs	r7, r0, r6
 800801c:	4639      	mov	r1, r7
 800801e:	4620      	mov	r0, r4
 8008020:	f000 ff45 	bl	8008eae <__any_on>
 8008024:	4682      	mov	sl, r0
 8008026:	b1a8      	cbz	r0, 8008054 <__gethex+0x1f8>
 8008028:	1e7b      	subs	r3, r7, #1
 800802a:	1159      	asrs	r1, r3, #5
 800802c:	f003 021f 	and.w	r2, r3, #31
 8008030:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008034:	f04f 0a01 	mov.w	sl, #1
 8008038:	fa0a f202 	lsl.w	r2, sl, r2
 800803c:	420a      	tst	r2, r1
 800803e:	d009      	beq.n	8008054 <__gethex+0x1f8>
 8008040:	4553      	cmp	r3, sl
 8008042:	dd05      	ble.n	8008050 <__gethex+0x1f4>
 8008044:	1eb9      	subs	r1, r7, #2
 8008046:	4620      	mov	r0, r4
 8008048:	f000 ff31 	bl	8008eae <__any_on>
 800804c:	2800      	cmp	r0, #0
 800804e:	d145      	bne.n	80080dc <__gethex+0x280>
 8008050:	f04f 0a02 	mov.w	sl, #2
 8008054:	4639      	mov	r1, r7
 8008056:	4620      	mov	r0, r4
 8008058:	f7ff fe99 	bl	8007d8e <rshift>
 800805c:	443d      	add	r5, r7
 800805e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008062:	42ab      	cmp	r3, r5
 8008064:	da4c      	bge.n	8008100 <__gethex+0x2a4>
 8008066:	ee18 0a10 	vmov	r0, s16
 800806a:	4621      	mov	r1, r4
 800806c:	f000 fac4 	bl	80085f8 <_Bfree>
 8008070:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008072:	2300      	movs	r3, #0
 8008074:	6013      	str	r3, [r2, #0]
 8008076:	27a3      	movs	r7, #163	; 0xa3
 8008078:	e785      	b.n	8007f86 <__gethex+0x12a>
 800807a:	1e73      	subs	r3, r6, #1
 800807c:	9a05      	ldr	r2, [sp, #20]
 800807e:	9303      	str	r3, [sp, #12]
 8008080:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008084:	4293      	cmp	r3, r2
 8008086:	d019      	beq.n	80080bc <__gethex+0x260>
 8008088:	f1bb 0f20 	cmp.w	fp, #32
 800808c:	d107      	bne.n	800809e <__gethex+0x242>
 800808e:	9b02      	ldr	r3, [sp, #8]
 8008090:	9a00      	ldr	r2, [sp, #0]
 8008092:	f843 2b04 	str.w	r2, [r3], #4
 8008096:	9302      	str	r3, [sp, #8]
 8008098:	2300      	movs	r3, #0
 800809a:	9300      	str	r3, [sp, #0]
 800809c:	469b      	mov	fp, r3
 800809e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80080a2:	f7ff fec6 	bl	8007e32 <__hexdig_fun>
 80080a6:	9b00      	ldr	r3, [sp, #0]
 80080a8:	f000 000f 	and.w	r0, r0, #15
 80080ac:	fa00 f00b 	lsl.w	r0, r0, fp
 80080b0:	4303      	orrs	r3, r0
 80080b2:	9300      	str	r3, [sp, #0]
 80080b4:	f10b 0b04 	add.w	fp, fp, #4
 80080b8:	9b03      	ldr	r3, [sp, #12]
 80080ba:	e00d      	b.n	80080d8 <__gethex+0x27c>
 80080bc:	9b03      	ldr	r3, [sp, #12]
 80080be:	9a06      	ldr	r2, [sp, #24]
 80080c0:	4413      	add	r3, r2
 80080c2:	42bb      	cmp	r3, r7
 80080c4:	d3e0      	bcc.n	8008088 <__gethex+0x22c>
 80080c6:	4618      	mov	r0, r3
 80080c8:	9901      	ldr	r1, [sp, #4]
 80080ca:	9307      	str	r3, [sp, #28]
 80080cc:	4652      	mov	r2, sl
 80080ce:	f001 fc00 	bl	80098d2 <strncmp>
 80080d2:	9b07      	ldr	r3, [sp, #28]
 80080d4:	2800      	cmp	r0, #0
 80080d6:	d1d7      	bne.n	8008088 <__gethex+0x22c>
 80080d8:	461e      	mov	r6, r3
 80080da:	e78b      	b.n	8007ff4 <__gethex+0x198>
 80080dc:	f04f 0a03 	mov.w	sl, #3
 80080e0:	e7b8      	b.n	8008054 <__gethex+0x1f8>
 80080e2:	da0a      	bge.n	80080fa <__gethex+0x29e>
 80080e4:	1a37      	subs	r7, r6, r0
 80080e6:	4621      	mov	r1, r4
 80080e8:	ee18 0a10 	vmov	r0, s16
 80080ec:	463a      	mov	r2, r7
 80080ee:	f000 fc9f 	bl	8008a30 <__lshift>
 80080f2:	1bed      	subs	r5, r5, r7
 80080f4:	4604      	mov	r4, r0
 80080f6:	f100 0914 	add.w	r9, r0, #20
 80080fa:	f04f 0a00 	mov.w	sl, #0
 80080fe:	e7ae      	b.n	800805e <__gethex+0x202>
 8008100:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008104:	42a8      	cmp	r0, r5
 8008106:	dd72      	ble.n	80081ee <__gethex+0x392>
 8008108:	1b45      	subs	r5, r0, r5
 800810a:	42ae      	cmp	r6, r5
 800810c:	dc36      	bgt.n	800817c <__gethex+0x320>
 800810e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008112:	2b02      	cmp	r3, #2
 8008114:	d02a      	beq.n	800816c <__gethex+0x310>
 8008116:	2b03      	cmp	r3, #3
 8008118:	d02c      	beq.n	8008174 <__gethex+0x318>
 800811a:	2b01      	cmp	r3, #1
 800811c:	d115      	bne.n	800814a <__gethex+0x2ee>
 800811e:	42ae      	cmp	r6, r5
 8008120:	d113      	bne.n	800814a <__gethex+0x2ee>
 8008122:	2e01      	cmp	r6, #1
 8008124:	d10b      	bne.n	800813e <__gethex+0x2e2>
 8008126:	9a04      	ldr	r2, [sp, #16]
 8008128:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800812c:	6013      	str	r3, [r2, #0]
 800812e:	2301      	movs	r3, #1
 8008130:	6123      	str	r3, [r4, #16]
 8008132:	f8c9 3000 	str.w	r3, [r9]
 8008136:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008138:	2762      	movs	r7, #98	; 0x62
 800813a:	601c      	str	r4, [r3, #0]
 800813c:	e723      	b.n	8007f86 <__gethex+0x12a>
 800813e:	1e71      	subs	r1, r6, #1
 8008140:	4620      	mov	r0, r4
 8008142:	f000 feb4 	bl	8008eae <__any_on>
 8008146:	2800      	cmp	r0, #0
 8008148:	d1ed      	bne.n	8008126 <__gethex+0x2ca>
 800814a:	ee18 0a10 	vmov	r0, s16
 800814e:	4621      	mov	r1, r4
 8008150:	f000 fa52 	bl	80085f8 <_Bfree>
 8008154:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008156:	2300      	movs	r3, #0
 8008158:	6013      	str	r3, [r2, #0]
 800815a:	2750      	movs	r7, #80	; 0x50
 800815c:	e713      	b.n	8007f86 <__gethex+0x12a>
 800815e:	bf00      	nop
 8008160:	0800a1c8 	.word	0x0800a1c8
 8008164:	0800a14c 	.word	0x0800a14c
 8008168:	0800a15d 	.word	0x0800a15d
 800816c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800816e:	2b00      	cmp	r3, #0
 8008170:	d1eb      	bne.n	800814a <__gethex+0x2ee>
 8008172:	e7d8      	b.n	8008126 <__gethex+0x2ca>
 8008174:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008176:	2b00      	cmp	r3, #0
 8008178:	d1d5      	bne.n	8008126 <__gethex+0x2ca>
 800817a:	e7e6      	b.n	800814a <__gethex+0x2ee>
 800817c:	1e6f      	subs	r7, r5, #1
 800817e:	f1ba 0f00 	cmp.w	sl, #0
 8008182:	d131      	bne.n	80081e8 <__gethex+0x38c>
 8008184:	b127      	cbz	r7, 8008190 <__gethex+0x334>
 8008186:	4639      	mov	r1, r7
 8008188:	4620      	mov	r0, r4
 800818a:	f000 fe90 	bl	8008eae <__any_on>
 800818e:	4682      	mov	sl, r0
 8008190:	117b      	asrs	r3, r7, #5
 8008192:	2101      	movs	r1, #1
 8008194:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008198:	f007 071f 	and.w	r7, r7, #31
 800819c:	fa01 f707 	lsl.w	r7, r1, r7
 80081a0:	421f      	tst	r7, r3
 80081a2:	4629      	mov	r1, r5
 80081a4:	4620      	mov	r0, r4
 80081a6:	bf18      	it	ne
 80081a8:	f04a 0a02 	orrne.w	sl, sl, #2
 80081ac:	1b76      	subs	r6, r6, r5
 80081ae:	f7ff fdee 	bl	8007d8e <rshift>
 80081b2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80081b6:	2702      	movs	r7, #2
 80081b8:	f1ba 0f00 	cmp.w	sl, #0
 80081bc:	d048      	beq.n	8008250 <__gethex+0x3f4>
 80081be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80081c2:	2b02      	cmp	r3, #2
 80081c4:	d015      	beq.n	80081f2 <__gethex+0x396>
 80081c6:	2b03      	cmp	r3, #3
 80081c8:	d017      	beq.n	80081fa <__gethex+0x39e>
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d109      	bne.n	80081e2 <__gethex+0x386>
 80081ce:	f01a 0f02 	tst.w	sl, #2
 80081d2:	d006      	beq.n	80081e2 <__gethex+0x386>
 80081d4:	f8d9 0000 	ldr.w	r0, [r9]
 80081d8:	ea4a 0a00 	orr.w	sl, sl, r0
 80081dc:	f01a 0f01 	tst.w	sl, #1
 80081e0:	d10e      	bne.n	8008200 <__gethex+0x3a4>
 80081e2:	f047 0710 	orr.w	r7, r7, #16
 80081e6:	e033      	b.n	8008250 <__gethex+0x3f4>
 80081e8:	f04f 0a01 	mov.w	sl, #1
 80081ec:	e7d0      	b.n	8008190 <__gethex+0x334>
 80081ee:	2701      	movs	r7, #1
 80081f0:	e7e2      	b.n	80081b8 <__gethex+0x35c>
 80081f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80081f4:	f1c3 0301 	rsb	r3, r3, #1
 80081f8:	9315      	str	r3, [sp, #84]	; 0x54
 80081fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d0f0      	beq.n	80081e2 <__gethex+0x386>
 8008200:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008204:	f104 0314 	add.w	r3, r4, #20
 8008208:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800820c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008210:	f04f 0c00 	mov.w	ip, #0
 8008214:	4618      	mov	r0, r3
 8008216:	f853 2b04 	ldr.w	r2, [r3], #4
 800821a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800821e:	d01c      	beq.n	800825a <__gethex+0x3fe>
 8008220:	3201      	adds	r2, #1
 8008222:	6002      	str	r2, [r0, #0]
 8008224:	2f02      	cmp	r7, #2
 8008226:	f104 0314 	add.w	r3, r4, #20
 800822a:	d13f      	bne.n	80082ac <__gethex+0x450>
 800822c:	f8d8 2000 	ldr.w	r2, [r8]
 8008230:	3a01      	subs	r2, #1
 8008232:	42b2      	cmp	r2, r6
 8008234:	d10a      	bne.n	800824c <__gethex+0x3f0>
 8008236:	1171      	asrs	r1, r6, #5
 8008238:	2201      	movs	r2, #1
 800823a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800823e:	f006 061f 	and.w	r6, r6, #31
 8008242:	fa02 f606 	lsl.w	r6, r2, r6
 8008246:	421e      	tst	r6, r3
 8008248:	bf18      	it	ne
 800824a:	4617      	movne	r7, r2
 800824c:	f047 0720 	orr.w	r7, r7, #32
 8008250:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008252:	601c      	str	r4, [r3, #0]
 8008254:	9b04      	ldr	r3, [sp, #16]
 8008256:	601d      	str	r5, [r3, #0]
 8008258:	e695      	b.n	8007f86 <__gethex+0x12a>
 800825a:	4299      	cmp	r1, r3
 800825c:	f843 cc04 	str.w	ip, [r3, #-4]
 8008260:	d8d8      	bhi.n	8008214 <__gethex+0x3b8>
 8008262:	68a3      	ldr	r3, [r4, #8]
 8008264:	459b      	cmp	fp, r3
 8008266:	db19      	blt.n	800829c <__gethex+0x440>
 8008268:	6861      	ldr	r1, [r4, #4]
 800826a:	ee18 0a10 	vmov	r0, s16
 800826e:	3101      	adds	r1, #1
 8008270:	f000 f982 	bl	8008578 <_Balloc>
 8008274:	4681      	mov	r9, r0
 8008276:	b918      	cbnz	r0, 8008280 <__gethex+0x424>
 8008278:	4b1a      	ldr	r3, [pc, #104]	; (80082e4 <__gethex+0x488>)
 800827a:	4602      	mov	r2, r0
 800827c:	2184      	movs	r1, #132	; 0x84
 800827e:	e6a8      	b.n	8007fd2 <__gethex+0x176>
 8008280:	6922      	ldr	r2, [r4, #16]
 8008282:	3202      	adds	r2, #2
 8008284:	f104 010c 	add.w	r1, r4, #12
 8008288:	0092      	lsls	r2, r2, #2
 800828a:	300c      	adds	r0, #12
 800828c:	f7fe fa68 	bl	8006760 <memcpy>
 8008290:	4621      	mov	r1, r4
 8008292:	ee18 0a10 	vmov	r0, s16
 8008296:	f000 f9af 	bl	80085f8 <_Bfree>
 800829a:	464c      	mov	r4, r9
 800829c:	6923      	ldr	r3, [r4, #16]
 800829e:	1c5a      	adds	r2, r3, #1
 80082a0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80082a4:	6122      	str	r2, [r4, #16]
 80082a6:	2201      	movs	r2, #1
 80082a8:	615a      	str	r2, [r3, #20]
 80082aa:	e7bb      	b.n	8008224 <__gethex+0x3c8>
 80082ac:	6922      	ldr	r2, [r4, #16]
 80082ae:	455a      	cmp	r2, fp
 80082b0:	dd0b      	ble.n	80082ca <__gethex+0x46e>
 80082b2:	2101      	movs	r1, #1
 80082b4:	4620      	mov	r0, r4
 80082b6:	f7ff fd6a 	bl	8007d8e <rshift>
 80082ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80082be:	3501      	adds	r5, #1
 80082c0:	42ab      	cmp	r3, r5
 80082c2:	f6ff aed0 	blt.w	8008066 <__gethex+0x20a>
 80082c6:	2701      	movs	r7, #1
 80082c8:	e7c0      	b.n	800824c <__gethex+0x3f0>
 80082ca:	f016 061f 	ands.w	r6, r6, #31
 80082ce:	d0fa      	beq.n	80082c6 <__gethex+0x46a>
 80082d0:	449a      	add	sl, r3
 80082d2:	f1c6 0620 	rsb	r6, r6, #32
 80082d6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80082da:	f000 fa43 	bl	8008764 <__hi0bits>
 80082de:	42b0      	cmp	r0, r6
 80082e0:	dbe7      	blt.n	80082b2 <__gethex+0x456>
 80082e2:	e7f0      	b.n	80082c6 <__gethex+0x46a>
 80082e4:	0800a14c 	.word	0x0800a14c

080082e8 <L_shift>:
 80082e8:	f1c2 0208 	rsb	r2, r2, #8
 80082ec:	0092      	lsls	r2, r2, #2
 80082ee:	b570      	push	{r4, r5, r6, lr}
 80082f0:	f1c2 0620 	rsb	r6, r2, #32
 80082f4:	6843      	ldr	r3, [r0, #4]
 80082f6:	6804      	ldr	r4, [r0, #0]
 80082f8:	fa03 f506 	lsl.w	r5, r3, r6
 80082fc:	432c      	orrs	r4, r5
 80082fe:	40d3      	lsrs	r3, r2
 8008300:	6004      	str	r4, [r0, #0]
 8008302:	f840 3f04 	str.w	r3, [r0, #4]!
 8008306:	4288      	cmp	r0, r1
 8008308:	d3f4      	bcc.n	80082f4 <L_shift+0xc>
 800830a:	bd70      	pop	{r4, r5, r6, pc}

0800830c <__match>:
 800830c:	b530      	push	{r4, r5, lr}
 800830e:	6803      	ldr	r3, [r0, #0]
 8008310:	3301      	adds	r3, #1
 8008312:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008316:	b914      	cbnz	r4, 800831e <__match+0x12>
 8008318:	6003      	str	r3, [r0, #0]
 800831a:	2001      	movs	r0, #1
 800831c:	bd30      	pop	{r4, r5, pc}
 800831e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008322:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008326:	2d19      	cmp	r5, #25
 8008328:	bf98      	it	ls
 800832a:	3220      	addls	r2, #32
 800832c:	42a2      	cmp	r2, r4
 800832e:	d0f0      	beq.n	8008312 <__match+0x6>
 8008330:	2000      	movs	r0, #0
 8008332:	e7f3      	b.n	800831c <__match+0x10>

08008334 <__hexnan>:
 8008334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008338:	680b      	ldr	r3, [r1, #0]
 800833a:	6801      	ldr	r1, [r0, #0]
 800833c:	115e      	asrs	r6, r3, #5
 800833e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008342:	f013 031f 	ands.w	r3, r3, #31
 8008346:	b087      	sub	sp, #28
 8008348:	bf18      	it	ne
 800834a:	3604      	addne	r6, #4
 800834c:	2500      	movs	r5, #0
 800834e:	1f37      	subs	r7, r6, #4
 8008350:	4682      	mov	sl, r0
 8008352:	4690      	mov	r8, r2
 8008354:	9301      	str	r3, [sp, #4]
 8008356:	f846 5c04 	str.w	r5, [r6, #-4]
 800835a:	46b9      	mov	r9, r7
 800835c:	463c      	mov	r4, r7
 800835e:	9502      	str	r5, [sp, #8]
 8008360:	46ab      	mov	fp, r5
 8008362:	784a      	ldrb	r2, [r1, #1]
 8008364:	1c4b      	adds	r3, r1, #1
 8008366:	9303      	str	r3, [sp, #12]
 8008368:	b342      	cbz	r2, 80083bc <__hexnan+0x88>
 800836a:	4610      	mov	r0, r2
 800836c:	9105      	str	r1, [sp, #20]
 800836e:	9204      	str	r2, [sp, #16]
 8008370:	f7ff fd5f 	bl	8007e32 <__hexdig_fun>
 8008374:	2800      	cmp	r0, #0
 8008376:	d14f      	bne.n	8008418 <__hexnan+0xe4>
 8008378:	9a04      	ldr	r2, [sp, #16]
 800837a:	9905      	ldr	r1, [sp, #20]
 800837c:	2a20      	cmp	r2, #32
 800837e:	d818      	bhi.n	80083b2 <__hexnan+0x7e>
 8008380:	9b02      	ldr	r3, [sp, #8]
 8008382:	459b      	cmp	fp, r3
 8008384:	dd13      	ble.n	80083ae <__hexnan+0x7a>
 8008386:	454c      	cmp	r4, r9
 8008388:	d206      	bcs.n	8008398 <__hexnan+0x64>
 800838a:	2d07      	cmp	r5, #7
 800838c:	dc04      	bgt.n	8008398 <__hexnan+0x64>
 800838e:	462a      	mov	r2, r5
 8008390:	4649      	mov	r1, r9
 8008392:	4620      	mov	r0, r4
 8008394:	f7ff ffa8 	bl	80082e8 <L_shift>
 8008398:	4544      	cmp	r4, r8
 800839a:	d950      	bls.n	800843e <__hexnan+0x10a>
 800839c:	2300      	movs	r3, #0
 800839e:	f1a4 0904 	sub.w	r9, r4, #4
 80083a2:	f844 3c04 	str.w	r3, [r4, #-4]
 80083a6:	f8cd b008 	str.w	fp, [sp, #8]
 80083aa:	464c      	mov	r4, r9
 80083ac:	461d      	mov	r5, r3
 80083ae:	9903      	ldr	r1, [sp, #12]
 80083b0:	e7d7      	b.n	8008362 <__hexnan+0x2e>
 80083b2:	2a29      	cmp	r2, #41	; 0x29
 80083b4:	d156      	bne.n	8008464 <__hexnan+0x130>
 80083b6:	3102      	adds	r1, #2
 80083b8:	f8ca 1000 	str.w	r1, [sl]
 80083bc:	f1bb 0f00 	cmp.w	fp, #0
 80083c0:	d050      	beq.n	8008464 <__hexnan+0x130>
 80083c2:	454c      	cmp	r4, r9
 80083c4:	d206      	bcs.n	80083d4 <__hexnan+0xa0>
 80083c6:	2d07      	cmp	r5, #7
 80083c8:	dc04      	bgt.n	80083d4 <__hexnan+0xa0>
 80083ca:	462a      	mov	r2, r5
 80083cc:	4649      	mov	r1, r9
 80083ce:	4620      	mov	r0, r4
 80083d0:	f7ff ff8a 	bl	80082e8 <L_shift>
 80083d4:	4544      	cmp	r4, r8
 80083d6:	d934      	bls.n	8008442 <__hexnan+0x10e>
 80083d8:	f1a8 0204 	sub.w	r2, r8, #4
 80083dc:	4623      	mov	r3, r4
 80083de:	f853 1b04 	ldr.w	r1, [r3], #4
 80083e2:	f842 1f04 	str.w	r1, [r2, #4]!
 80083e6:	429f      	cmp	r7, r3
 80083e8:	d2f9      	bcs.n	80083de <__hexnan+0xaa>
 80083ea:	1b3b      	subs	r3, r7, r4
 80083ec:	f023 0303 	bic.w	r3, r3, #3
 80083f0:	3304      	adds	r3, #4
 80083f2:	3401      	adds	r4, #1
 80083f4:	3e03      	subs	r6, #3
 80083f6:	42b4      	cmp	r4, r6
 80083f8:	bf88      	it	hi
 80083fa:	2304      	movhi	r3, #4
 80083fc:	4443      	add	r3, r8
 80083fe:	2200      	movs	r2, #0
 8008400:	f843 2b04 	str.w	r2, [r3], #4
 8008404:	429f      	cmp	r7, r3
 8008406:	d2fb      	bcs.n	8008400 <__hexnan+0xcc>
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	b91b      	cbnz	r3, 8008414 <__hexnan+0xe0>
 800840c:	4547      	cmp	r7, r8
 800840e:	d127      	bne.n	8008460 <__hexnan+0x12c>
 8008410:	2301      	movs	r3, #1
 8008412:	603b      	str	r3, [r7, #0]
 8008414:	2005      	movs	r0, #5
 8008416:	e026      	b.n	8008466 <__hexnan+0x132>
 8008418:	3501      	adds	r5, #1
 800841a:	2d08      	cmp	r5, #8
 800841c:	f10b 0b01 	add.w	fp, fp, #1
 8008420:	dd06      	ble.n	8008430 <__hexnan+0xfc>
 8008422:	4544      	cmp	r4, r8
 8008424:	d9c3      	bls.n	80083ae <__hexnan+0x7a>
 8008426:	2300      	movs	r3, #0
 8008428:	f844 3c04 	str.w	r3, [r4, #-4]
 800842c:	2501      	movs	r5, #1
 800842e:	3c04      	subs	r4, #4
 8008430:	6822      	ldr	r2, [r4, #0]
 8008432:	f000 000f 	and.w	r0, r0, #15
 8008436:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800843a:	6022      	str	r2, [r4, #0]
 800843c:	e7b7      	b.n	80083ae <__hexnan+0x7a>
 800843e:	2508      	movs	r5, #8
 8008440:	e7b5      	b.n	80083ae <__hexnan+0x7a>
 8008442:	9b01      	ldr	r3, [sp, #4]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d0df      	beq.n	8008408 <__hexnan+0xd4>
 8008448:	f04f 32ff 	mov.w	r2, #4294967295
 800844c:	f1c3 0320 	rsb	r3, r3, #32
 8008450:	fa22 f303 	lsr.w	r3, r2, r3
 8008454:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008458:	401a      	ands	r2, r3
 800845a:	f846 2c04 	str.w	r2, [r6, #-4]
 800845e:	e7d3      	b.n	8008408 <__hexnan+0xd4>
 8008460:	3f04      	subs	r7, #4
 8008462:	e7d1      	b.n	8008408 <__hexnan+0xd4>
 8008464:	2004      	movs	r0, #4
 8008466:	b007      	add	sp, #28
 8008468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800846c <__retarget_lock_init_recursive>:
 800846c:	4770      	bx	lr

0800846e <__retarget_lock_acquire_recursive>:
 800846e:	4770      	bx	lr

08008470 <__retarget_lock_release_recursive>:
 8008470:	4770      	bx	lr

08008472 <__swhatbuf_r>:
 8008472:	b570      	push	{r4, r5, r6, lr}
 8008474:	460e      	mov	r6, r1
 8008476:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800847a:	2900      	cmp	r1, #0
 800847c:	b096      	sub	sp, #88	; 0x58
 800847e:	4614      	mov	r4, r2
 8008480:	461d      	mov	r5, r3
 8008482:	da07      	bge.n	8008494 <__swhatbuf_r+0x22>
 8008484:	2300      	movs	r3, #0
 8008486:	602b      	str	r3, [r5, #0]
 8008488:	89b3      	ldrh	r3, [r6, #12]
 800848a:	061a      	lsls	r2, r3, #24
 800848c:	d410      	bmi.n	80084b0 <__swhatbuf_r+0x3e>
 800848e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008492:	e00e      	b.n	80084b2 <__swhatbuf_r+0x40>
 8008494:	466a      	mov	r2, sp
 8008496:	f001 fa8d 	bl	80099b4 <_fstat_r>
 800849a:	2800      	cmp	r0, #0
 800849c:	dbf2      	blt.n	8008484 <__swhatbuf_r+0x12>
 800849e:	9a01      	ldr	r2, [sp, #4]
 80084a0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80084a4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80084a8:	425a      	negs	r2, r3
 80084aa:	415a      	adcs	r2, r3
 80084ac:	602a      	str	r2, [r5, #0]
 80084ae:	e7ee      	b.n	800848e <__swhatbuf_r+0x1c>
 80084b0:	2340      	movs	r3, #64	; 0x40
 80084b2:	2000      	movs	r0, #0
 80084b4:	6023      	str	r3, [r4, #0]
 80084b6:	b016      	add	sp, #88	; 0x58
 80084b8:	bd70      	pop	{r4, r5, r6, pc}
	...

080084bc <__smakebuf_r>:
 80084bc:	898b      	ldrh	r3, [r1, #12]
 80084be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80084c0:	079d      	lsls	r5, r3, #30
 80084c2:	4606      	mov	r6, r0
 80084c4:	460c      	mov	r4, r1
 80084c6:	d507      	bpl.n	80084d8 <__smakebuf_r+0x1c>
 80084c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80084cc:	6023      	str	r3, [r4, #0]
 80084ce:	6123      	str	r3, [r4, #16]
 80084d0:	2301      	movs	r3, #1
 80084d2:	6163      	str	r3, [r4, #20]
 80084d4:	b002      	add	sp, #8
 80084d6:	bd70      	pop	{r4, r5, r6, pc}
 80084d8:	ab01      	add	r3, sp, #4
 80084da:	466a      	mov	r2, sp
 80084dc:	f7ff ffc9 	bl	8008472 <__swhatbuf_r>
 80084e0:	9900      	ldr	r1, [sp, #0]
 80084e2:	4605      	mov	r5, r0
 80084e4:	4630      	mov	r0, r6
 80084e6:	f7fe f9a1 	bl	800682c <_malloc_r>
 80084ea:	b948      	cbnz	r0, 8008500 <__smakebuf_r+0x44>
 80084ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084f0:	059a      	lsls	r2, r3, #22
 80084f2:	d4ef      	bmi.n	80084d4 <__smakebuf_r+0x18>
 80084f4:	f023 0303 	bic.w	r3, r3, #3
 80084f8:	f043 0302 	orr.w	r3, r3, #2
 80084fc:	81a3      	strh	r3, [r4, #12]
 80084fe:	e7e3      	b.n	80084c8 <__smakebuf_r+0xc>
 8008500:	4b0d      	ldr	r3, [pc, #52]	; (8008538 <__smakebuf_r+0x7c>)
 8008502:	62b3      	str	r3, [r6, #40]	; 0x28
 8008504:	89a3      	ldrh	r3, [r4, #12]
 8008506:	6020      	str	r0, [r4, #0]
 8008508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800850c:	81a3      	strh	r3, [r4, #12]
 800850e:	9b00      	ldr	r3, [sp, #0]
 8008510:	6163      	str	r3, [r4, #20]
 8008512:	9b01      	ldr	r3, [sp, #4]
 8008514:	6120      	str	r0, [r4, #16]
 8008516:	b15b      	cbz	r3, 8008530 <__smakebuf_r+0x74>
 8008518:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800851c:	4630      	mov	r0, r6
 800851e:	f001 fa5b 	bl	80099d8 <_isatty_r>
 8008522:	b128      	cbz	r0, 8008530 <__smakebuf_r+0x74>
 8008524:	89a3      	ldrh	r3, [r4, #12]
 8008526:	f023 0303 	bic.w	r3, r3, #3
 800852a:	f043 0301 	orr.w	r3, r3, #1
 800852e:	81a3      	strh	r3, [r4, #12]
 8008530:	89a0      	ldrh	r0, [r4, #12]
 8008532:	4305      	orrs	r5, r0
 8008534:	81a5      	strh	r5, [r4, #12]
 8008536:	e7cd      	b.n	80084d4 <__smakebuf_r+0x18>
 8008538:	08007bed 	.word	0x08007bed

0800853c <__ascii_mbtowc>:
 800853c:	b082      	sub	sp, #8
 800853e:	b901      	cbnz	r1, 8008542 <__ascii_mbtowc+0x6>
 8008540:	a901      	add	r1, sp, #4
 8008542:	b142      	cbz	r2, 8008556 <__ascii_mbtowc+0x1a>
 8008544:	b14b      	cbz	r3, 800855a <__ascii_mbtowc+0x1e>
 8008546:	7813      	ldrb	r3, [r2, #0]
 8008548:	600b      	str	r3, [r1, #0]
 800854a:	7812      	ldrb	r2, [r2, #0]
 800854c:	1e10      	subs	r0, r2, #0
 800854e:	bf18      	it	ne
 8008550:	2001      	movne	r0, #1
 8008552:	b002      	add	sp, #8
 8008554:	4770      	bx	lr
 8008556:	4610      	mov	r0, r2
 8008558:	e7fb      	b.n	8008552 <__ascii_mbtowc+0x16>
 800855a:	f06f 0001 	mvn.w	r0, #1
 800855e:	e7f8      	b.n	8008552 <__ascii_mbtowc+0x16>

08008560 <__malloc_lock>:
 8008560:	4801      	ldr	r0, [pc, #4]	; (8008568 <__malloc_lock+0x8>)
 8008562:	f7ff bf84 	b.w	800846e <__retarget_lock_acquire_recursive>
 8008566:	bf00      	nop
 8008568:	20001940 	.word	0x20001940

0800856c <__malloc_unlock>:
 800856c:	4801      	ldr	r0, [pc, #4]	; (8008574 <__malloc_unlock+0x8>)
 800856e:	f7ff bf7f 	b.w	8008470 <__retarget_lock_release_recursive>
 8008572:	bf00      	nop
 8008574:	20001940 	.word	0x20001940

08008578 <_Balloc>:
 8008578:	b570      	push	{r4, r5, r6, lr}
 800857a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800857c:	4604      	mov	r4, r0
 800857e:	460d      	mov	r5, r1
 8008580:	b976      	cbnz	r6, 80085a0 <_Balloc+0x28>
 8008582:	2010      	movs	r0, #16
 8008584:	f7fe f8dc 	bl	8006740 <malloc>
 8008588:	4602      	mov	r2, r0
 800858a:	6260      	str	r0, [r4, #36]	; 0x24
 800858c:	b920      	cbnz	r0, 8008598 <_Balloc+0x20>
 800858e:	4b18      	ldr	r3, [pc, #96]	; (80085f0 <_Balloc+0x78>)
 8008590:	4818      	ldr	r0, [pc, #96]	; (80085f4 <_Balloc+0x7c>)
 8008592:	2166      	movs	r1, #102	; 0x66
 8008594:	f001 f9ce 	bl	8009934 <__assert_func>
 8008598:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800859c:	6006      	str	r6, [r0, #0]
 800859e:	60c6      	str	r6, [r0, #12]
 80085a0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80085a2:	68f3      	ldr	r3, [r6, #12]
 80085a4:	b183      	cbz	r3, 80085c8 <_Balloc+0x50>
 80085a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085a8:	68db      	ldr	r3, [r3, #12]
 80085aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80085ae:	b9b8      	cbnz	r0, 80085e0 <_Balloc+0x68>
 80085b0:	2101      	movs	r1, #1
 80085b2:	fa01 f605 	lsl.w	r6, r1, r5
 80085b6:	1d72      	adds	r2, r6, #5
 80085b8:	0092      	lsls	r2, r2, #2
 80085ba:	4620      	mov	r0, r4
 80085bc:	f000 fc98 	bl	8008ef0 <_calloc_r>
 80085c0:	b160      	cbz	r0, 80085dc <_Balloc+0x64>
 80085c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80085c6:	e00e      	b.n	80085e6 <_Balloc+0x6e>
 80085c8:	2221      	movs	r2, #33	; 0x21
 80085ca:	2104      	movs	r1, #4
 80085cc:	4620      	mov	r0, r4
 80085ce:	f000 fc8f 	bl	8008ef0 <_calloc_r>
 80085d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085d4:	60f0      	str	r0, [r6, #12]
 80085d6:	68db      	ldr	r3, [r3, #12]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d1e4      	bne.n	80085a6 <_Balloc+0x2e>
 80085dc:	2000      	movs	r0, #0
 80085de:	bd70      	pop	{r4, r5, r6, pc}
 80085e0:	6802      	ldr	r2, [r0, #0]
 80085e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80085e6:	2300      	movs	r3, #0
 80085e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80085ec:	e7f7      	b.n	80085de <_Balloc+0x66>
 80085ee:	bf00      	nop
 80085f0:	0800a1da 	.word	0x0800a1da
 80085f4:	0800a1f1 	.word	0x0800a1f1

080085f8 <_Bfree>:
 80085f8:	b570      	push	{r4, r5, r6, lr}
 80085fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80085fc:	4605      	mov	r5, r0
 80085fe:	460c      	mov	r4, r1
 8008600:	b976      	cbnz	r6, 8008620 <_Bfree+0x28>
 8008602:	2010      	movs	r0, #16
 8008604:	f7fe f89c 	bl	8006740 <malloc>
 8008608:	4602      	mov	r2, r0
 800860a:	6268      	str	r0, [r5, #36]	; 0x24
 800860c:	b920      	cbnz	r0, 8008618 <_Bfree+0x20>
 800860e:	4b09      	ldr	r3, [pc, #36]	; (8008634 <_Bfree+0x3c>)
 8008610:	4809      	ldr	r0, [pc, #36]	; (8008638 <_Bfree+0x40>)
 8008612:	218a      	movs	r1, #138	; 0x8a
 8008614:	f001 f98e 	bl	8009934 <__assert_func>
 8008618:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800861c:	6006      	str	r6, [r0, #0]
 800861e:	60c6      	str	r6, [r0, #12]
 8008620:	b13c      	cbz	r4, 8008632 <_Bfree+0x3a>
 8008622:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008624:	6862      	ldr	r2, [r4, #4]
 8008626:	68db      	ldr	r3, [r3, #12]
 8008628:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800862c:	6021      	str	r1, [r4, #0]
 800862e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008632:	bd70      	pop	{r4, r5, r6, pc}
 8008634:	0800a1da 	.word	0x0800a1da
 8008638:	0800a1f1 	.word	0x0800a1f1

0800863c <__multadd>:
 800863c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008640:	690e      	ldr	r6, [r1, #16]
 8008642:	4607      	mov	r7, r0
 8008644:	4698      	mov	r8, r3
 8008646:	460c      	mov	r4, r1
 8008648:	f101 0014 	add.w	r0, r1, #20
 800864c:	2300      	movs	r3, #0
 800864e:	6805      	ldr	r5, [r0, #0]
 8008650:	b2a9      	uxth	r1, r5
 8008652:	fb02 8101 	mla	r1, r2, r1, r8
 8008656:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800865a:	0c2d      	lsrs	r5, r5, #16
 800865c:	fb02 c505 	mla	r5, r2, r5, ip
 8008660:	b289      	uxth	r1, r1
 8008662:	3301      	adds	r3, #1
 8008664:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008668:	429e      	cmp	r6, r3
 800866a:	f840 1b04 	str.w	r1, [r0], #4
 800866e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008672:	dcec      	bgt.n	800864e <__multadd+0x12>
 8008674:	f1b8 0f00 	cmp.w	r8, #0
 8008678:	d022      	beq.n	80086c0 <__multadd+0x84>
 800867a:	68a3      	ldr	r3, [r4, #8]
 800867c:	42b3      	cmp	r3, r6
 800867e:	dc19      	bgt.n	80086b4 <__multadd+0x78>
 8008680:	6861      	ldr	r1, [r4, #4]
 8008682:	4638      	mov	r0, r7
 8008684:	3101      	adds	r1, #1
 8008686:	f7ff ff77 	bl	8008578 <_Balloc>
 800868a:	4605      	mov	r5, r0
 800868c:	b928      	cbnz	r0, 800869a <__multadd+0x5e>
 800868e:	4602      	mov	r2, r0
 8008690:	4b0d      	ldr	r3, [pc, #52]	; (80086c8 <__multadd+0x8c>)
 8008692:	480e      	ldr	r0, [pc, #56]	; (80086cc <__multadd+0x90>)
 8008694:	21b5      	movs	r1, #181	; 0xb5
 8008696:	f001 f94d 	bl	8009934 <__assert_func>
 800869a:	6922      	ldr	r2, [r4, #16]
 800869c:	3202      	adds	r2, #2
 800869e:	f104 010c 	add.w	r1, r4, #12
 80086a2:	0092      	lsls	r2, r2, #2
 80086a4:	300c      	adds	r0, #12
 80086a6:	f7fe f85b 	bl	8006760 <memcpy>
 80086aa:	4621      	mov	r1, r4
 80086ac:	4638      	mov	r0, r7
 80086ae:	f7ff ffa3 	bl	80085f8 <_Bfree>
 80086b2:	462c      	mov	r4, r5
 80086b4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80086b8:	3601      	adds	r6, #1
 80086ba:	f8c3 8014 	str.w	r8, [r3, #20]
 80086be:	6126      	str	r6, [r4, #16]
 80086c0:	4620      	mov	r0, r4
 80086c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086c6:	bf00      	nop
 80086c8:	0800a14c 	.word	0x0800a14c
 80086cc:	0800a1f1 	.word	0x0800a1f1

080086d0 <__s2b>:
 80086d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086d4:	460c      	mov	r4, r1
 80086d6:	4615      	mov	r5, r2
 80086d8:	461f      	mov	r7, r3
 80086da:	2209      	movs	r2, #9
 80086dc:	3308      	adds	r3, #8
 80086de:	4606      	mov	r6, r0
 80086e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80086e4:	2100      	movs	r1, #0
 80086e6:	2201      	movs	r2, #1
 80086e8:	429a      	cmp	r2, r3
 80086ea:	db09      	blt.n	8008700 <__s2b+0x30>
 80086ec:	4630      	mov	r0, r6
 80086ee:	f7ff ff43 	bl	8008578 <_Balloc>
 80086f2:	b940      	cbnz	r0, 8008706 <__s2b+0x36>
 80086f4:	4602      	mov	r2, r0
 80086f6:	4b19      	ldr	r3, [pc, #100]	; (800875c <__s2b+0x8c>)
 80086f8:	4819      	ldr	r0, [pc, #100]	; (8008760 <__s2b+0x90>)
 80086fa:	21ce      	movs	r1, #206	; 0xce
 80086fc:	f001 f91a 	bl	8009934 <__assert_func>
 8008700:	0052      	lsls	r2, r2, #1
 8008702:	3101      	adds	r1, #1
 8008704:	e7f0      	b.n	80086e8 <__s2b+0x18>
 8008706:	9b08      	ldr	r3, [sp, #32]
 8008708:	6143      	str	r3, [r0, #20]
 800870a:	2d09      	cmp	r5, #9
 800870c:	f04f 0301 	mov.w	r3, #1
 8008710:	6103      	str	r3, [r0, #16]
 8008712:	dd16      	ble.n	8008742 <__s2b+0x72>
 8008714:	f104 0909 	add.w	r9, r4, #9
 8008718:	46c8      	mov	r8, r9
 800871a:	442c      	add	r4, r5
 800871c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008720:	4601      	mov	r1, r0
 8008722:	3b30      	subs	r3, #48	; 0x30
 8008724:	220a      	movs	r2, #10
 8008726:	4630      	mov	r0, r6
 8008728:	f7ff ff88 	bl	800863c <__multadd>
 800872c:	45a0      	cmp	r8, r4
 800872e:	d1f5      	bne.n	800871c <__s2b+0x4c>
 8008730:	f1a5 0408 	sub.w	r4, r5, #8
 8008734:	444c      	add	r4, r9
 8008736:	1b2d      	subs	r5, r5, r4
 8008738:	1963      	adds	r3, r4, r5
 800873a:	42bb      	cmp	r3, r7
 800873c:	db04      	blt.n	8008748 <__s2b+0x78>
 800873e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008742:	340a      	adds	r4, #10
 8008744:	2509      	movs	r5, #9
 8008746:	e7f6      	b.n	8008736 <__s2b+0x66>
 8008748:	f814 3b01 	ldrb.w	r3, [r4], #1
 800874c:	4601      	mov	r1, r0
 800874e:	3b30      	subs	r3, #48	; 0x30
 8008750:	220a      	movs	r2, #10
 8008752:	4630      	mov	r0, r6
 8008754:	f7ff ff72 	bl	800863c <__multadd>
 8008758:	e7ee      	b.n	8008738 <__s2b+0x68>
 800875a:	bf00      	nop
 800875c:	0800a14c 	.word	0x0800a14c
 8008760:	0800a1f1 	.word	0x0800a1f1

08008764 <__hi0bits>:
 8008764:	0c03      	lsrs	r3, r0, #16
 8008766:	041b      	lsls	r3, r3, #16
 8008768:	b9d3      	cbnz	r3, 80087a0 <__hi0bits+0x3c>
 800876a:	0400      	lsls	r0, r0, #16
 800876c:	2310      	movs	r3, #16
 800876e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008772:	bf04      	itt	eq
 8008774:	0200      	lsleq	r0, r0, #8
 8008776:	3308      	addeq	r3, #8
 8008778:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800877c:	bf04      	itt	eq
 800877e:	0100      	lsleq	r0, r0, #4
 8008780:	3304      	addeq	r3, #4
 8008782:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008786:	bf04      	itt	eq
 8008788:	0080      	lsleq	r0, r0, #2
 800878a:	3302      	addeq	r3, #2
 800878c:	2800      	cmp	r0, #0
 800878e:	db05      	blt.n	800879c <__hi0bits+0x38>
 8008790:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008794:	f103 0301 	add.w	r3, r3, #1
 8008798:	bf08      	it	eq
 800879a:	2320      	moveq	r3, #32
 800879c:	4618      	mov	r0, r3
 800879e:	4770      	bx	lr
 80087a0:	2300      	movs	r3, #0
 80087a2:	e7e4      	b.n	800876e <__hi0bits+0xa>

080087a4 <__lo0bits>:
 80087a4:	6803      	ldr	r3, [r0, #0]
 80087a6:	f013 0207 	ands.w	r2, r3, #7
 80087aa:	4601      	mov	r1, r0
 80087ac:	d00b      	beq.n	80087c6 <__lo0bits+0x22>
 80087ae:	07da      	lsls	r2, r3, #31
 80087b0:	d424      	bmi.n	80087fc <__lo0bits+0x58>
 80087b2:	0798      	lsls	r0, r3, #30
 80087b4:	bf49      	itett	mi
 80087b6:	085b      	lsrmi	r3, r3, #1
 80087b8:	089b      	lsrpl	r3, r3, #2
 80087ba:	2001      	movmi	r0, #1
 80087bc:	600b      	strmi	r3, [r1, #0]
 80087be:	bf5c      	itt	pl
 80087c0:	600b      	strpl	r3, [r1, #0]
 80087c2:	2002      	movpl	r0, #2
 80087c4:	4770      	bx	lr
 80087c6:	b298      	uxth	r0, r3
 80087c8:	b9b0      	cbnz	r0, 80087f8 <__lo0bits+0x54>
 80087ca:	0c1b      	lsrs	r3, r3, #16
 80087cc:	2010      	movs	r0, #16
 80087ce:	f013 0fff 	tst.w	r3, #255	; 0xff
 80087d2:	bf04      	itt	eq
 80087d4:	0a1b      	lsreq	r3, r3, #8
 80087d6:	3008      	addeq	r0, #8
 80087d8:	071a      	lsls	r2, r3, #28
 80087da:	bf04      	itt	eq
 80087dc:	091b      	lsreq	r3, r3, #4
 80087de:	3004      	addeq	r0, #4
 80087e0:	079a      	lsls	r2, r3, #30
 80087e2:	bf04      	itt	eq
 80087e4:	089b      	lsreq	r3, r3, #2
 80087e6:	3002      	addeq	r0, #2
 80087e8:	07da      	lsls	r2, r3, #31
 80087ea:	d403      	bmi.n	80087f4 <__lo0bits+0x50>
 80087ec:	085b      	lsrs	r3, r3, #1
 80087ee:	f100 0001 	add.w	r0, r0, #1
 80087f2:	d005      	beq.n	8008800 <__lo0bits+0x5c>
 80087f4:	600b      	str	r3, [r1, #0]
 80087f6:	4770      	bx	lr
 80087f8:	4610      	mov	r0, r2
 80087fa:	e7e8      	b.n	80087ce <__lo0bits+0x2a>
 80087fc:	2000      	movs	r0, #0
 80087fe:	4770      	bx	lr
 8008800:	2020      	movs	r0, #32
 8008802:	4770      	bx	lr

08008804 <__i2b>:
 8008804:	b510      	push	{r4, lr}
 8008806:	460c      	mov	r4, r1
 8008808:	2101      	movs	r1, #1
 800880a:	f7ff feb5 	bl	8008578 <_Balloc>
 800880e:	4602      	mov	r2, r0
 8008810:	b928      	cbnz	r0, 800881e <__i2b+0x1a>
 8008812:	4b05      	ldr	r3, [pc, #20]	; (8008828 <__i2b+0x24>)
 8008814:	4805      	ldr	r0, [pc, #20]	; (800882c <__i2b+0x28>)
 8008816:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800881a:	f001 f88b 	bl	8009934 <__assert_func>
 800881e:	2301      	movs	r3, #1
 8008820:	6144      	str	r4, [r0, #20]
 8008822:	6103      	str	r3, [r0, #16]
 8008824:	bd10      	pop	{r4, pc}
 8008826:	bf00      	nop
 8008828:	0800a14c 	.word	0x0800a14c
 800882c:	0800a1f1 	.word	0x0800a1f1

08008830 <__multiply>:
 8008830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008834:	4614      	mov	r4, r2
 8008836:	690a      	ldr	r2, [r1, #16]
 8008838:	6923      	ldr	r3, [r4, #16]
 800883a:	429a      	cmp	r2, r3
 800883c:	bfb8      	it	lt
 800883e:	460b      	movlt	r3, r1
 8008840:	460d      	mov	r5, r1
 8008842:	bfbc      	itt	lt
 8008844:	4625      	movlt	r5, r4
 8008846:	461c      	movlt	r4, r3
 8008848:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800884c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008850:	68ab      	ldr	r3, [r5, #8]
 8008852:	6869      	ldr	r1, [r5, #4]
 8008854:	eb0a 0709 	add.w	r7, sl, r9
 8008858:	42bb      	cmp	r3, r7
 800885a:	b085      	sub	sp, #20
 800885c:	bfb8      	it	lt
 800885e:	3101      	addlt	r1, #1
 8008860:	f7ff fe8a 	bl	8008578 <_Balloc>
 8008864:	b930      	cbnz	r0, 8008874 <__multiply+0x44>
 8008866:	4602      	mov	r2, r0
 8008868:	4b42      	ldr	r3, [pc, #264]	; (8008974 <__multiply+0x144>)
 800886a:	4843      	ldr	r0, [pc, #268]	; (8008978 <__multiply+0x148>)
 800886c:	f240 115d 	movw	r1, #349	; 0x15d
 8008870:	f001 f860 	bl	8009934 <__assert_func>
 8008874:	f100 0614 	add.w	r6, r0, #20
 8008878:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800887c:	4633      	mov	r3, r6
 800887e:	2200      	movs	r2, #0
 8008880:	4543      	cmp	r3, r8
 8008882:	d31e      	bcc.n	80088c2 <__multiply+0x92>
 8008884:	f105 0c14 	add.w	ip, r5, #20
 8008888:	f104 0314 	add.w	r3, r4, #20
 800888c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008890:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008894:	9202      	str	r2, [sp, #8]
 8008896:	ebac 0205 	sub.w	r2, ip, r5
 800889a:	3a15      	subs	r2, #21
 800889c:	f022 0203 	bic.w	r2, r2, #3
 80088a0:	3204      	adds	r2, #4
 80088a2:	f105 0115 	add.w	r1, r5, #21
 80088a6:	458c      	cmp	ip, r1
 80088a8:	bf38      	it	cc
 80088aa:	2204      	movcc	r2, #4
 80088ac:	9201      	str	r2, [sp, #4]
 80088ae:	9a02      	ldr	r2, [sp, #8]
 80088b0:	9303      	str	r3, [sp, #12]
 80088b2:	429a      	cmp	r2, r3
 80088b4:	d808      	bhi.n	80088c8 <__multiply+0x98>
 80088b6:	2f00      	cmp	r7, #0
 80088b8:	dc55      	bgt.n	8008966 <__multiply+0x136>
 80088ba:	6107      	str	r7, [r0, #16]
 80088bc:	b005      	add	sp, #20
 80088be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088c2:	f843 2b04 	str.w	r2, [r3], #4
 80088c6:	e7db      	b.n	8008880 <__multiply+0x50>
 80088c8:	f8b3 a000 	ldrh.w	sl, [r3]
 80088cc:	f1ba 0f00 	cmp.w	sl, #0
 80088d0:	d020      	beq.n	8008914 <__multiply+0xe4>
 80088d2:	f105 0e14 	add.w	lr, r5, #20
 80088d6:	46b1      	mov	r9, r6
 80088d8:	2200      	movs	r2, #0
 80088da:	f85e 4b04 	ldr.w	r4, [lr], #4
 80088de:	f8d9 b000 	ldr.w	fp, [r9]
 80088e2:	b2a1      	uxth	r1, r4
 80088e4:	fa1f fb8b 	uxth.w	fp, fp
 80088e8:	fb0a b101 	mla	r1, sl, r1, fp
 80088ec:	4411      	add	r1, r2
 80088ee:	f8d9 2000 	ldr.w	r2, [r9]
 80088f2:	0c24      	lsrs	r4, r4, #16
 80088f4:	0c12      	lsrs	r2, r2, #16
 80088f6:	fb0a 2404 	mla	r4, sl, r4, r2
 80088fa:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80088fe:	b289      	uxth	r1, r1
 8008900:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008904:	45f4      	cmp	ip, lr
 8008906:	f849 1b04 	str.w	r1, [r9], #4
 800890a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800890e:	d8e4      	bhi.n	80088da <__multiply+0xaa>
 8008910:	9901      	ldr	r1, [sp, #4]
 8008912:	5072      	str	r2, [r6, r1]
 8008914:	9a03      	ldr	r2, [sp, #12]
 8008916:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800891a:	3304      	adds	r3, #4
 800891c:	f1b9 0f00 	cmp.w	r9, #0
 8008920:	d01f      	beq.n	8008962 <__multiply+0x132>
 8008922:	6834      	ldr	r4, [r6, #0]
 8008924:	f105 0114 	add.w	r1, r5, #20
 8008928:	46b6      	mov	lr, r6
 800892a:	f04f 0a00 	mov.w	sl, #0
 800892e:	880a      	ldrh	r2, [r1, #0]
 8008930:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008934:	fb09 b202 	mla	r2, r9, r2, fp
 8008938:	4492      	add	sl, r2
 800893a:	b2a4      	uxth	r4, r4
 800893c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008940:	f84e 4b04 	str.w	r4, [lr], #4
 8008944:	f851 4b04 	ldr.w	r4, [r1], #4
 8008948:	f8be 2000 	ldrh.w	r2, [lr]
 800894c:	0c24      	lsrs	r4, r4, #16
 800894e:	fb09 2404 	mla	r4, r9, r4, r2
 8008952:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008956:	458c      	cmp	ip, r1
 8008958:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800895c:	d8e7      	bhi.n	800892e <__multiply+0xfe>
 800895e:	9a01      	ldr	r2, [sp, #4]
 8008960:	50b4      	str	r4, [r6, r2]
 8008962:	3604      	adds	r6, #4
 8008964:	e7a3      	b.n	80088ae <__multiply+0x7e>
 8008966:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800896a:	2b00      	cmp	r3, #0
 800896c:	d1a5      	bne.n	80088ba <__multiply+0x8a>
 800896e:	3f01      	subs	r7, #1
 8008970:	e7a1      	b.n	80088b6 <__multiply+0x86>
 8008972:	bf00      	nop
 8008974:	0800a14c 	.word	0x0800a14c
 8008978:	0800a1f1 	.word	0x0800a1f1

0800897c <__pow5mult>:
 800897c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008980:	4615      	mov	r5, r2
 8008982:	f012 0203 	ands.w	r2, r2, #3
 8008986:	4606      	mov	r6, r0
 8008988:	460f      	mov	r7, r1
 800898a:	d007      	beq.n	800899c <__pow5mult+0x20>
 800898c:	4c25      	ldr	r4, [pc, #148]	; (8008a24 <__pow5mult+0xa8>)
 800898e:	3a01      	subs	r2, #1
 8008990:	2300      	movs	r3, #0
 8008992:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008996:	f7ff fe51 	bl	800863c <__multadd>
 800899a:	4607      	mov	r7, r0
 800899c:	10ad      	asrs	r5, r5, #2
 800899e:	d03d      	beq.n	8008a1c <__pow5mult+0xa0>
 80089a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80089a2:	b97c      	cbnz	r4, 80089c4 <__pow5mult+0x48>
 80089a4:	2010      	movs	r0, #16
 80089a6:	f7fd fecb 	bl	8006740 <malloc>
 80089aa:	4602      	mov	r2, r0
 80089ac:	6270      	str	r0, [r6, #36]	; 0x24
 80089ae:	b928      	cbnz	r0, 80089bc <__pow5mult+0x40>
 80089b0:	4b1d      	ldr	r3, [pc, #116]	; (8008a28 <__pow5mult+0xac>)
 80089b2:	481e      	ldr	r0, [pc, #120]	; (8008a2c <__pow5mult+0xb0>)
 80089b4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80089b8:	f000 ffbc 	bl	8009934 <__assert_func>
 80089bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80089c0:	6004      	str	r4, [r0, #0]
 80089c2:	60c4      	str	r4, [r0, #12]
 80089c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80089c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80089cc:	b94c      	cbnz	r4, 80089e2 <__pow5mult+0x66>
 80089ce:	f240 2171 	movw	r1, #625	; 0x271
 80089d2:	4630      	mov	r0, r6
 80089d4:	f7ff ff16 	bl	8008804 <__i2b>
 80089d8:	2300      	movs	r3, #0
 80089da:	f8c8 0008 	str.w	r0, [r8, #8]
 80089de:	4604      	mov	r4, r0
 80089e0:	6003      	str	r3, [r0, #0]
 80089e2:	f04f 0900 	mov.w	r9, #0
 80089e6:	07eb      	lsls	r3, r5, #31
 80089e8:	d50a      	bpl.n	8008a00 <__pow5mult+0x84>
 80089ea:	4639      	mov	r1, r7
 80089ec:	4622      	mov	r2, r4
 80089ee:	4630      	mov	r0, r6
 80089f0:	f7ff ff1e 	bl	8008830 <__multiply>
 80089f4:	4639      	mov	r1, r7
 80089f6:	4680      	mov	r8, r0
 80089f8:	4630      	mov	r0, r6
 80089fa:	f7ff fdfd 	bl	80085f8 <_Bfree>
 80089fe:	4647      	mov	r7, r8
 8008a00:	106d      	asrs	r5, r5, #1
 8008a02:	d00b      	beq.n	8008a1c <__pow5mult+0xa0>
 8008a04:	6820      	ldr	r0, [r4, #0]
 8008a06:	b938      	cbnz	r0, 8008a18 <__pow5mult+0x9c>
 8008a08:	4622      	mov	r2, r4
 8008a0a:	4621      	mov	r1, r4
 8008a0c:	4630      	mov	r0, r6
 8008a0e:	f7ff ff0f 	bl	8008830 <__multiply>
 8008a12:	6020      	str	r0, [r4, #0]
 8008a14:	f8c0 9000 	str.w	r9, [r0]
 8008a18:	4604      	mov	r4, r0
 8008a1a:	e7e4      	b.n	80089e6 <__pow5mult+0x6a>
 8008a1c:	4638      	mov	r0, r7
 8008a1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a22:	bf00      	nop
 8008a24:	0800a348 	.word	0x0800a348
 8008a28:	0800a1da 	.word	0x0800a1da
 8008a2c:	0800a1f1 	.word	0x0800a1f1

08008a30 <__lshift>:
 8008a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a34:	460c      	mov	r4, r1
 8008a36:	6849      	ldr	r1, [r1, #4]
 8008a38:	6923      	ldr	r3, [r4, #16]
 8008a3a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008a3e:	68a3      	ldr	r3, [r4, #8]
 8008a40:	4607      	mov	r7, r0
 8008a42:	4691      	mov	r9, r2
 8008a44:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008a48:	f108 0601 	add.w	r6, r8, #1
 8008a4c:	42b3      	cmp	r3, r6
 8008a4e:	db0b      	blt.n	8008a68 <__lshift+0x38>
 8008a50:	4638      	mov	r0, r7
 8008a52:	f7ff fd91 	bl	8008578 <_Balloc>
 8008a56:	4605      	mov	r5, r0
 8008a58:	b948      	cbnz	r0, 8008a6e <__lshift+0x3e>
 8008a5a:	4602      	mov	r2, r0
 8008a5c:	4b28      	ldr	r3, [pc, #160]	; (8008b00 <__lshift+0xd0>)
 8008a5e:	4829      	ldr	r0, [pc, #164]	; (8008b04 <__lshift+0xd4>)
 8008a60:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008a64:	f000 ff66 	bl	8009934 <__assert_func>
 8008a68:	3101      	adds	r1, #1
 8008a6a:	005b      	lsls	r3, r3, #1
 8008a6c:	e7ee      	b.n	8008a4c <__lshift+0x1c>
 8008a6e:	2300      	movs	r3, #0
 8008a70:	f100 0114 	add.w	r1, r0, #20
 8008a74:	f100 0210 	add.w	r2, r0, #16
 8008a78:	4618      	mov	r0, r3
 8008a7a:	4553      	cmp	r3, sl
 8008a7c:	db33      	blt.n	8008ae6 <__lshift+0xb6>
 8008a7e:	6920      	ldr	r0, [r4, #16]
 8008a80:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008a84:	f104 0314 	add.w	r3, r4, #20
 8008a88:	f019 091f 	ands.w	r9, r9, #31
 8008a8c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008a90:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008a94:	d02b      	beq.n	8008aee <__lshift+0xbe>
 8008a96:	f1c9 0e20 	rsb	lr, r9, #32
 8008a9a:	468a      	mov	sl, r1
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	6818      	ldr	r0, [r3, #0]
 8008aa0:	fa00 f009 	lsl.w	r0, r0, r9
 8008aa4:	4302      	orrs	r2, r0
 8008aa6:	f84a 2b04 	str.w	r2, [sl], #4
 8008aaa:	f853 2b04 	ldr.w	r2, [r3], #4
 8008aae:	459c      	cmp	ip, r3
 8008ab0:	fa22 f20e 	lsr.w	r2, r2, lr
 8008ab4:	d8f3      	bhi.n	8008a9e <__lshift+0x6e>
 8008ab6:	ebac 0304 	sub.w	r3, ip, r4
 8008aba:	3b15      	subs	r3, #21
 8008abc:	f023 0303 	bic.w	r3, r3, #3
 8008ac0:	3304      	adds	r3, #4
 8008ac2:	f104 0015 	add.w	r0, r4, #21
 8008ac6:	4584      	cmp	ip, r0
 8008ac8:	bf38      	it	cc
 8008aca:	2304      	movcc	r3, #4
 8008acc:	50ca      	str	r2, [r1, r3]
 8008ace:	b10a      	cbz	r2, 8008ad4 <__lshift+0xa4>
 8008ad0:	f108 0602 	add.w	r6, r8, #2
 8008ad4:	3e01      	subs	r6, #1
 8008ad6:	4638      	mov	r0, r7
 8008ad8:	612e      	str	r6, [r5, #16]
 8008ada:	4621      	mov	r1, r4
 8008adc:	f7ff fd8c 	bl	80085f8 <_Bfree>
 8008ae0:	4628      	mov	r0, r5
 8008ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ae6:	f842 0f04 	str.w	r0, [r2, #4]!
 8008aea:	3301      	adds	r3, #1
 8008aec:	e7c5      	b.n	8008a7a <__lshift+0x4a>
 8008aee:	3904      	subs	r1, #4
 8008af0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008af4:	f841 2f04 	str.w	r2, [r1, #4]!
 8008af8:	459c      	cmp	ip, r3
 8008afa:	d8f9      	bhi.n	8008af0 <__lshift+0xc0>
 8008afc:	e7ea      	b.n	8008ad4 <__lshift+0xa4>
 8008afe:	bf00      	nop
 8008b00:	0800a14c 	.word	0x0800a14c
 8008b04:	0800a1f1 	.word	0x0800a1f1

08008b08 <__mcmp>:
 8008b08:	b530      	push	{r4, r5, lr}
 8008b0a:	6902      	ldr	r2, [r0, #16]
 8008b0c:	690c      	ldr	r4, [r1, #16]
 8008b0e:	1b12      	subs	r2, r2, r4
 8008b10:	d10e      	bne.n	8008b30 <__mcmp+0x28>
 8008b12:	f100 0314 	add.w	r3, r0, #20
 8008b16:	3114      	adds	r1, #20
 8008b18:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008b1c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008b20:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008b24:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008b28:	42a5      	cmp	r5, r4
 8008b2a:	d003      	beq.n	8008b34 <__mcmp+0x2c>
 8008b2c:	d305      	bcc.n	8008b3a <__mcmp+0x32>
 8008b2e:	2201      	movs	r2, #1
 8008b30:	4610      	mov	r0, r2
 8008b32:	bd30      	pop	{r4, r5, pc}
 8008b34:	4283      	cmp	r3, r0
 8008b36:	d3f3      	bcc.n	8008b20 <__mcmp+0x18>
 8008b38:	e7fa      	b.n	8008b30 <__mcmp+0x28>
 8008b3a:	f04f 32ff 	mov.w	r2, #4294967295
 8008b3e:	e7f7      	b.n	8008b30 <__mcmp+0x28>

08008b40 <__mdiff>:
 8008b40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b44:	460c      	mov	r4, r1
 8008b46:	4606      	mov	r6, r0
 8008b48:	4611      	mov	r1, r2
 8008b4a:	4620      	mov	r0, r4
 8008b4c:	4617      	mov	r7, r2
 8008b4e:	f7ff ffdb 	bl	8008b08 <__mcmp>
 8008b52:	1e05      	subs	r5, r0, #0
 8008b54:	d110      	bne.n	8008b78 <__mdiff+0x38>
 8008b56:	4629      	mov	r1, r5
 8008b58:	4630      	mov	r0, r6
 8008b5a:	f7ff fd0d 	bl	8008578 <_Balloc>
 8008b5e:	b930      	cbnz	r0, 8008b6e <__mdiff+0x2e>
 8008b60:	4b39      	ldr	r3, [pc, #228]	; (8008c48 <__mdiff+0x108>)
 8008b62:	4602      	mov	r2, r0
 8008b64:	f240 2132 	movw	r1, #562	; 0x232
 8008b68:	4838      	ldr	r0, [pc, #224]	; (8008c4c <__mdiff+0x10c>)
 8008b6a:	f000 fee3 	bl	8009934 <__assert_func>
 8008b6e:	2301      	movs	r3, #1
 8008b70:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008b74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b78:	bfa4      	itt	ge
 8008b7a:	463b      	movge	r3, r7
 8008b7c:	4627      	movge	r7, r4
 8008b7e:	4630      	mov	r0, r6
 8008b80:	6879      	ldr	r1, [r7, #4]
 8008b82:	bfa6      	itte	ge
 8008b84:	461c      	movge	r4, r3
 8008b86:	2500      	movge	r5, #0
 8008b88:	2501      	movlt	r5, #1
 8008b8a:	f7ff fcf5 	bl	8008578 <_Balloc>
 8008b8e:	b920      	cbnz	r0, 8008b9a <__mdiff+0x5a>
 8008b90:	4b2d      	ldr	r3, [pc, #180]	; (8008c48 <__mdiff+0x108>)
 8008b92:	4602      	mov	r2, r0
 8008b94:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008b98:	e7e6      	b.n	8008b68 <__mdiff+0x28>
 8008b9a:	693e      	ldr	r6, [r7, #16]
 8008b9c:	60c5      	str	r5, [r0, #12]
 8008b9e:	6925      	ldr	r5, [r4, #16]
 8008ba0:	f107 0114 	add.w	r1, r7, #20
 8008ba4:	f104 0914 	add.w	r9, r4, #20
 8008ba8:	f100 0e14 	add.w	lr, r0, #20
 8008bac:	f107 0210 	add.w	r2, r7, #16
 8008bb0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008bb4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008bb8:	46f2      	mov	sl, lr
 8008bba:	2700      	movs	r7, #0
 8008bbc:	f859 3b04 	ldr.w	r3, [r9], #4
 8008bc0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008bc4:	fa1f f883 	uxth.w	r8, r3
 8008bc8:	fa17 f78b 	uxtah	r7, r7, fp
 8008bcc:	0c1b      	lsrs	r3, r3, #16
 8008bce:	eba7 0808 	sub.w	r8, r7, r8
 8008bd2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008bd6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008bda:	fa1f f888 	uxth.w	r8, r8
 8008bde:	141f      	asrs	r7, r3, #16
 8008be0:	454d      	cmp	r5, r9
 8008be2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008be6:	f84a 3b04 	str.w	r3, [sl], #4
 8008bea:	d8e7      	bhi.n	8008bbc <__mdiff+0x7c>
 8008bec:	1b2b      	subs	r3, r5, r4
 8008bee:	3b15      	subs	r3, #21
 8008bf0:	f023 0303 	bic.w	r3, r3, #3
 8008bf4:	3304      	adds	r3, #4
 8008bf6:	3415      	adds	r4, #21
 8008bf8:	42a5      	cmp	r5, r4
 8008bfa:	bf38      	it	cc
 8008bfc:	2304      	movcc	r3, #4
 8008bfe:	4419      	add	r1, r3
 8008c00:	4473      	add	r3, lr
 8008c02:	469e      	mov	lr, r3
 8008c04:	460d      	mov	r5, r1
 8008c06:	4565      	cmp	r5, ip
 8008c08:	d30e      	bcc.n	8008c28 <__mdiff+0xe8>
 8008c0a:	f10c 0203 	add.w	r2, ip, #3
 8008c0e:	1a52      	subs	r2, r2, r1
 8008c10:	f022 0203 	bic.w	r2, r2, #3
 8008c14:	3903      	subs	r1, #3
 8008c16:	458c      	cmp	ip, r1
 8008c18:	bf38      	it	cc
 8008c1a:	2200      	movcc	r2, #0
 8008c1c:	441a      	add	r2, r3
 8008c1e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008c22:	b17b      	cbz	r3, 8008c44 <__mdiff+0x104>
 8008c24:	6106      	str	r6, [r0, #16]
 8008c26:	e7a5      	b.n	8008b74 <__mdiff+0x34>
 8008c28:	f855 8b04 	ldr.w	r8, [r5], #4
 8008c2c:	fa17 f488 	uxtah	r4, r7, r8
 8008c30:	1422      	asrs	r2, r4, #16
 8008c32:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008c36:	b2a4      	uxth	r4, r4
 8008c38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008c3c:	f84e 4b04 	str.w	r4, [lr], #4
 8008c40:	1417      	asrs	r7, r2, #16
 8008c42:	e7e0      	b.n	8008c06 <__mdiff+0xc6>
 8008c44:	3e01      	subs	r6, #1
 8008c46:	e7ea      	b.n	8008c1e <__mdiff+0xde>
 8008c48:	0800a14c 	.word	0x0800a14c
 8008c4c:	0800a1f1 	.word	0x0800a1f1

08008c50 <__ulp>:
 8008c50:	b082      	sub	sp, #8
 8008c52:	ed8d 0b00 	vstr	d0, [sp]
 8008c56:	9b01      	ldr	r3, [sp, #4]
 8008c58:	4912      	ldr	r1, [pc, #72]	; (8008ca4 <__ulp+0x54>)
 8008c5a:	4019      	ands	r1, r3
 8008c5c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8008c60:	2900      	cmp	r1, #0
 8008c62:	dd05      	ble.n	8008c70 <__ulp+0x20>
 8008c64:	2200      	movs	r2, #0
 8008c66:	460b      	mov	r3, r1
 8008c68:	ec43 2b10 	vmov	d0, r2, r3
 8008c6c:	b002      	add	sp, #8
 8008c6e:	4770      	bx	lr
 8008c70:	4249      	negs	r1, r1
 8008c72:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8008c76:	ea4f 5021 	mov.w	r0, r1, asr #20
 8008c7a:	f04f 0200 	mov.w	r2, #0
 8008c7e:	f04f 0300 	mov.w	r3, #0
 8008c82:	da04      	bge.n	8008c8e <__ulp+0x3e>
 8008c84:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008c88:	fa41 f300 	asr.w	r3, r1, r0
 8008c8c:	e7ec      	b.n	8008c68 <__ulp+0x18>
 8008c8e:	f1a0 0114 	sub.w	r1, r0, #20
 8008c92:	291e      	cmp	r1, #30
 8008c94:	bfda      	itte	le
 8008c96:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8008c9a:	fa20 f101 	lsrle.w	r1, r0, r1
 8008c9e:	2101      	movgt	r1, #1
 8008ca0:	460a      	mov	r2, r1
 8008ca2:	e7e1      	b.n	8008c68 <__ulp+0x18>
 8008ca4:	7ff00000 	.word	0x7ff00000

08008ca8 <__b2d>:
 8008ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008caa:	6905      	ldr	r5, [r0, #16]
 8008cac:	f100 0714 	add.w	r7, r0, #20
 8008cb0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008cb4:	1f2e      	subs	r6, r5, #4
 8008cb6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008cba:	4620      	mov	r0, r4
 8008cbc:	f7ff fd52 	bl	8008764 <__hi0bits>
 8008cc0:	f1c0 0320 	rsb	r3, r0, #32
 8008cc4:	280a      	cmp	r0, #10
 8008cc6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008d44 <__b2d+0x9c>
 8008cca:	600b      	str	r3, [r1, #0]
 8008ccc:	dc14      	bgt.n	8008cf8 <__b2d+0x50>
 8008cce:	f1c0 0e0b 	rsb	lr, r0, #11
 8008cd2:	fa24 f10e 	lsr.w	r1, r4, lr
 8008cd6:	42b7      	cmp	r7, r6
 8008cd8:	ea41 030c 	orr.w	r3, r1, ip
 8008cdc:	bf34      	ite	cc
 8008cde:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008ce2:	2100      	movcs	r1, #0
 8008ce4:	3015      	adds	r0, #21
 8008ce6:	fa04 f000 	lsl.w	r0, r4, r0
 8008cea:	fa21 f10e 	lsr.w	r1, r1, lr
 8008cee:	ea40 0201 	orr.w	r2, r0, r1
 8008cf2:	ec43 2b10 	vmov	d0, r2, r3
 8008cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008cf8:	42b7      	cmp	r7, r6
 8008cfa:	bf3a      	itte	cc
 8008cfc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008d00:	f1a5 0608 	subcc.w	r6, r5, #8
 8008d04:	2100      	movcs	r1, #0
 8008d06:	380b      	subs	r0, #11
 8008d08:	d017      	beq.n	8008d3a <__b2d+0x92>
 8008d0a:	f1c0 0c20 	rsb	ip, r0, #32
 8008d0e:	fa04 f500 	lsl.w	r5, r4, r0
 8008d12:	42be      	cmp	r6, r7
 8008d14:	fa21 f40c 	lsr.w	r4, r1, ip
 8008d18:	ea45 0504 	orr.w	r5, r5, r4
 8008d1c:	bf8c      	ite	hi
 8008d1e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008d22:	2400      	movls	r4, #0
 8008d24:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8008d28:	fa01 f000 	lsl.w	r0, r1, r0
 8008d2c:	fa24 f40c 	lsr.w	r4, r4, ip
 8008d30:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008d34:	ea40 0204 	orr.w	r2, r0, r4
 8008d38:	e7db      	b.n	8008cf2 <__b2d+0x4a>
 8008d3a:	ea44 030c 	orr.w	r3, r4, ip
 8008d3e:	460a      	mov	r2, r1
 8008d40:	e7d7      	b.n	8008cf2 <__b2d+0x4a>
 8008d42:	bf00      	nop
 8008d44:	3ff00000 	.word	0x3ff00000

08008d48 <__d2b>:
 8008d48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008d4c:	4689      	mov	r9, r1
 8008d4e:	2101      	movs	r1, #1
 8008d50:	ec57 6b10 	vmov	r6, r7, d0
 8008d54:	4690      	mov	r8, r2
 8008d56:	f7ff fc0f 	bl	8008578 <_Balloc>
 8008d5a:	4604      	mov	r4, r0
 8008d5c:	b930      	cbnz	r0, 8008d6c <__d2b+0x24>
 8008d5e:	4602      	mov	r2, r0
 8008d60:	4b25      	ldr	r3, [pc, #148]	; (8008df8 <__d2b+0xb0>)
 8008d62:	4826      	ldr	r0, [pc, #152]	; (8008dfc <__d2b+0xb4>)
 8008d64:	f240 310a 	movw	r1, #778	; 0x30a
 8008d68:	f000 fde4 	bl	8009934 <__assert_func>
 8008d6c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008d70:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008d74:	bb35      	cbnz	r5, 8008dc4 <__d2b+0x7c>
 8008d76:	2e00      	cmp	r6, #0
 8008d78:	9301      	str	r3, [sp, #4]
 8008d7a:	d028      	beq.n	8008dce <__d2b+0x86>
 8008d7c:	4668      	mov	r0, sp
 8008d7e:	9600      	str	r6, [sp, #0]
 8008d80:	f7ff fd10 	bl	80087a4 <__lo0bits>
 8008d84:	9900      	ldr	r1, [sp, #0]
 8008d86:	b300      	cbz	r0, 8008dca <__d2b+0x82>
 8008d88:	9a01      	ldr	r2, [sp, #4]
 8008d8a:	f1c0 0320 	rsb	r3, r0, #32
 8008d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d92:	430b      	orrs	r3, r1
 8008d94:	40c2      	lsrs	r2, r0
 8008d96:	6163      	str	r3, [r4, #20]
 8008d98:	9201      	str	r2, [sp, #4]
 8008d9a:	9b01      	ldr	r3, [sp, #4]
 8008d9c:	61a3      	str	r3, [r4, #24]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	bf14      	ite	ne
 8008da2:	2202      	movne	r2, #2
 8008da4:	2201      	moveq	r2, #1
 8008da6:	6122      	str	r2, [r4, #16]
 8008da8:	b1d5      	cbz	r5, 8008de0 <__d2b+0x98>
 8008daa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008dae:	4405      	add	r5, r0
 8008db0:	f8c9 5000 	str.w	r5, [r9]
 8008db4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008db8:	f8c8 0000 	str.w	r0, [r8]
 8008dbc:	4620      	mov	r0, r4
 8008dbe:	b003      	add	sp, #12
 8008dc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008dc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008dc8:	e7d5      	b.n	8008d76 <__d2b+0x2e>
 8008dca:	6161      	str	r1, [r4, #20]
 8008dcc:	e7e5      	b.n	8008d9a <__d2b+0x52>
 8008dce:	a801      	add	r0, sp, #4
 8008dd0:	f7ff fce8 	bl	80087a4 <__lo0bits>
 8008dd4:	9b01      	ldr	r3, [sp, #4]
 8008dd6:	6163      	str	r3, [r4, #20]
 8008dd8:	2201      	movs	r2, #1
 8008dda:	6122      	str	r2, [r4, #16]
 8008ddc:	3020      	adds	r0, #32
 8008dde:	e7e3      	b.n	8008da8 <__d2b+0x60>
 8008de0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008de4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008de8:	f8c9 0000 	str.w	r0, [r9]
 8008dec:	6918      	ldr	r0, [r3, #16]
 8008dee:	f7ff fcb9 	bl	8008764 <__hi0bits>
 8008df2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008df6:	e7df      	b.n	8008db8 <__d2b+0x70>
 8008df8:	0800a14c 	.word	0x0800a14c
 8008dfc:	0800a1f1 	.word	0x0800a1f1

08008e00 <__ratio>:
 8008e00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e04:	468a      	mov	sl, r1
 8008e06:	4669      	mov	r1, sp
 8008e08:	4683      	mov	fp, r0
 8008e0a:	f7ff ff4d 	bl	8008ca8 <__b2d>
 8008e0e:	a901      	add	r1, sp, #4
 8008e10:	4650      	mov	r0, sl
 8008e12:	ec59 8b10 	vmov	r8, r9, d0
 8008e16:	ee10 6a10 	vmov	r6, s0
 8008e1a:	f7ff ff45 	bl	8008ca8 <__b2d>
 8008e1e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8008e22:	f8da 2010 	ldr.w	r2, [sl, #16]
 8008e26:	eba3 0c02 	sub.w	ip, r3, r2
 8008e2a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008e2e:	1a9b      	subs	r3, r3, r2
 8008e30:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008e34:	ec55 4b10 	vmov	r4, r5, d0
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	ee10 0a10 	vmov	r0, s0
 8008e3e:	bfce      	itee	gt
 8008e40:	464a      	movgt	r2, r9
 8008e42:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008e46:	462a      	movle	r2, r5
 8008e48:	464f      	mov	r7, r9
 8008e4a:	4629      	mov	r1, r5
 8008e4c:	bfcc      	ite	gt
 8008e4e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008e52:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8008e56:	ec47 6b17 	vmov	d7, r6, r7
 8008e5a:	ec41 0b16 	vmov	d6, r0, r1
 8008e5e:	ee87 0b06 	vdiv.f64	d0, d7, d6
 8008e62:	b003      	add	sp, #12
 8008e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008e68 <__copybits>:
 8008e68:	3901      	subs	r1, #1
 8008e6a:	b570      	push	{r4, r5, r6, lr}
 8008e6c:	1149      	asrs	r1, r1, #5
 8008e6e:	6914      	ldr	r4, [r2, #16]
 8008e70:	3101      	adds	r1, #1
 8008e72:	f102 0314 	add.w	r3, r2, #20
 8008e76:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008e7a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008e7e:	1f05      	subs	r5, r0, #4
 8008e80:	42a3      	cmp	r3, r4
 8008e82:	d30c      	bcc.n	8008e9e <__copybits+0x36>
 8008e84:	1aa3      	subs	r3, r4, r2
 8008e86:	3b11      	subs	r3, #17
 8008e88:	f023 0303 	bic.w	r3, r3, #3
 8008e8c:	3211      	adds	r2, #17
 8008e8e:	42a2      	cmp	r2, r4
 8008e90:	bf88      	it	hi
 8008e92:	2300      	movhi	r3, #0
 8008e94:	4418      	add	r0, r3
 8008e96:	2300      	movs	r3, #0
 8008e98:	4288      	cmp	r0, r1
 8008e9a:	d305      	bcc.n	8008ea8 <__copybits+0x40>
 8008e9c:	bd70      	pop	{r4, r5, r6, pc}
 8008e9e:	f853 6b04 	ldr.w	r6, [r3], #4
 8008ea2:	f845 6f04 	str.w	r6, [r5, #4]!
 8008ea6:	e7eb      	b.n	8008e80 <__copybits+0x18>
 8008ea8:	f840 3b04 	str.w	r3, [r0], #4
 8008eac:	e7f4      	b.n	8008e98 <__copybits+0x30>

08008eae <__any_on>:
 8008eae:	f100 0214 	add.w	r2, r0, #20
 8008eb2:	6900      	ldr	r0, [r0, #16]
 8008eb4:	114b      	asrs	r3, r1, #5
 8008eb6:	4298      	cmp	r0, r3
 8008eb8:	b510      	push	{r4, lr}
 8008eba:	db11      	blt.n	8008ee0 <__any_on+0x32>
 8008ebc:	dd0a      	ble.n	8008ed4 <__any_on+0x26>
 8008ebe:	f011 011f 	ands.w	r1, r1, #31
 8008ec2:	d007      	beq.n	8008ed4 <__any_on+0x26>
 8008ec4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008ec8:	fa24 f001 	lsr.w	r0, r4, r1
 8008ecc:	fa00 f101 	lsl.w	r1, r0, r1
 8008ed0:	428c      	cmp	r4, r1
 8008ed2:	d10b      	bne.n	8008eec <__any_on+0x3e>
 8008ed4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d803      	bhi.n	8008ee4 <__any_on+0x36>
 8008edc:	2000      	movs	r0, #0
 8008ede:	bd10      	pop	{r4, pc}
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	e7f7      	b.n	8008ed4 <__any_on+0x26>
 8008ee4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008ee8:	2900      	cmp	r1, #0
 8008eea:	d0f5      	beq.n	8008ed8 <__any_on+0x2a>
 8008eec:	2001      	movs	r0, #1
 8008eee:	e7f6      	b.n	8008ede <__any_on+0x30>

08008ef0 <_calloc_r>:
 8008ef0:	b513      	push	{r0, r1, r4, lr}
 8008ef2:	434a      	muls	r2, r1
 8008ef4:	4611      	mov	r1, r2
 8008ef6:	9201      	str	r2, [sp, #4]
 8008ef8:	f7fd fc98 	bl	800682c <_malloc_r>
 8008efc:	4604      	mov	r4, r0
 8008efe:	b118      	cbz	r0, 8008f08 <_calloc_r+0x18>
 8008f00:	9a01      	ldr	r2, [sp, #4]
 8008f02:	2100      	movs	r1, #0
 8008f04:	f7fd fc3a 	bl	800677c <memset>
 8008f08:	4620      	mov	r0, r4
 8008f0a:	b002      	add	sp, #8
 8008f0c:	bd10      	pop	{r4, pc}

08008f0e <__ssputs_r>:
 8008f0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f12:	688e      	ldr	r6, [r1, #8]
 8008f14:	429e      	cmp	r6, r3
 8008f16:	4682      	mov	sl, r0
 8008f18:	460c      	mov	r4, r1
 8008f1a:	4690      	mov	r8, r2
 8008f1c:	461f      	mov	r7, r3
 8008f1e:	d838      	bhi.n	8008f92 <__ssputs_r+0x84>
 8008f20:	898a      	ldrh	r2, [r1, #12]
 8008f22:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008f26:	d032      	beq.n	8008f8e <__ssputs_r+0x80>
 8008f28:	6825      	ldr	r5, [r4, #0]
 8008f2a:	6909      	ldr	r1, [r1, #16]
 8008f2c:	eba5 0901 	sub.w	r9, r5, r1
 8008f30:	6965      	ldr	r5, [r4, #20]
 8008f32:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f36:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008f3a:	3301      	adds	r3, #1
 8008f3c:	444b      	add	r3, r9
 8008f3e:	106d      	asrs	r5, r5, #1
 8008f40:	429d      	cmp	r5, r3
 8008f42:	bf38      	it	cc
 8008f44:	461d      	movcc	r5, r3
 8008f46:	0553      	lsls	r3, r2, #21
 8008f48:	d531      	bpl.n	8008fae <__ssputs_r+0xa0>
 8008f4a:	4629      	mov	r1, r5
 8008f4c:	f7fd fc6e 	bl	800682c <_malloc_r>
 8008f50:	4606      	mov	r6, r0
 8008f52:	b950      	cbnz	r0, 8008f6a <__ssputs_r+0x5c>
 8008f54:	230c      	movs	r3, #12
 8008f56:	f8ca 3000 	str.w	r3, [sl]
 8008f5a:	89a3      	ldrh	r3, [r4, #12]
 8008f5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f60:	81a3      	strh	r3, [r4, #12]
 8008f62:	f04f 30ff 	mov.w	r0, #4294967295
 8008f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f6a:	6921      	ldr	r1, [r4, #16]
 8008f6c:	464a      	mov	r2, r9
 8008f6e:	f7fd fbf7 	bl	8006760 <memcpy>
 8008f72:	89a3      	ldrh	r3, [r4, #12]
 8008f74:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008f78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f7c:	81a3      	strh	r3, [r4, #12]
 8008f7e:	6126      	str	r6, [r4, #16]
 8008f80:	6165      	str	r5, [r4, #20]
 8008f82:	444e      	add	r6, r9
 8008f84:	eba5 0509 	sub.w	r5, r5, r9
 8008f88:	6026      	str	r6, [r4, #0]
 8008f8a:	60a5      	str	r5, [r4, #8]
 8008f8c:	463e      	mov	r6, r7
 8008f8e:	42be      	cmp	r6, r7
 8008f90:	d900      	bls.n	8008f94 <__ssputs_r+0x86>
 8008f92:	463e      	mov	r6, r7
 8008f94:	4632      	mov	r2, r6
 8008f96:	6820      	ldr	r0, [r4, #0]
 8008f98:	4641      	mov	r1, r8
 8008f9a:	f000 fd3f 	bl	8009a1c <memmove>
 8008f9e:	68a3      	ldr	r3, [r4, #8]
 8008fa0:	6822      	ldr	r2, [r4, #0]
 8008fa2:	1b9b      	subs	r3, r3, r6
 8008fa4:	4432      	add	r2, r6
 8008fa6:	60a3      	str	r3, [r4, #8]
 8008fa8:	6022      	str	r2, [r4, #0]
 8008faa:	2000      	movs	r0, #0
 8008fac:	e7db      	b.n	8008f66 <__ssputs_r+0x58>
 8008fae:	462a      	mov	r2, r5
 8008fb0:	f000 fd4e 	bl	8009a50 <_realloc_r>
 8008fb4:	4606      	mov	r6, r0
 8008fb6:	2800      	cmp	r0, #0
 8008fb8:	d1e1      	bne.n	8008f7e <__ssputs_r+0x70>
 8008fba:	6921      	ldr	r1, [r4, #16]
 8008fbc:	4650      	mov	r0, sl
 8008fbe:	f7fd fbe5 	bl	800678c <_free_r>
 8008fc2:	e7c7      	b.n	8008f54 <__ssputs_r+0x46>

08008fc4 <_svfiprintf_r>:
 8008fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fc8:	4698      	mov	r8, r3
 8008fca:	898b      	ldrh	r3, [r1, #12]
 8008fcc:	061b      	lsls	r3, r3, #24
 8008fce:	b09d      	sub	sp, #116	; 0x74
 8008fd0:	4607      	mov	r7, r0
 8008fd2:	460d      	mov	r5, r1
 8008fd4:	4614      	mov	r4, r2
 8008fd6:	d50e      	bpl.n	8008ff6 <_svfiprintf_r+0x32>
 8008fd8:	690b      	ldr	r3, [r1, #16]
 8008fda:	b963      	cbnz	r3, 8008ff6 <_svfiprintf_r+0x32>
 8008fdc:	2140      	movs	r1, #64	; 0x40
 8008fde:	f7fd fc25 	bl	800682c <_malloc_r>
 8008fe2:	6028      	str	r0, [r5, #0]
 8008fe4:	6128      	str	r0, [r5, #16]
 8008fe6:	b920      	cbnz	r0, 8008ff2 <_svfiprintf_r+0x2e>
 8008fe8:	230c      	movs	r3, #12
 8008fea:	603b      	str	r3, [r7, #0]
 8008fec:	f04f 30ff 	mov.w	r0, #4294967295
 8008ff0:	e0d1      	b.n	8009196 <_svfiprintf_r+0x1d2>
 8008ff2:	2340      	movs	r3, #64	; 0x40
 8008ff4:	616b      	str	r3, [r5, #20]
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	9309      	str	r3, [sp, #36]	; 0x24
 8008ffa:	2320      	movs	r3, #32
 8008ffc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009000:	f8cd 800c 	str.w	r8, [sp, #12]
 8009004:	2330      	movs	r3, #48	; 0x30
 8009006:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80091b0 <_svfiprintf_r+0x1ec>
 800900a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800900e:	f04f 0901 	mov.w	r9, #1
 8009012:	4623      	mov	r3, r4
 8009014:	469a      	mov	sl, r3
 8009016:	f813 2b01 	ldrb.w	r2, [r3], #1
 800901a:	b10a      	cbz	r2, 8009020 <_svfiprintf_r+0x5c>
 800901c:	2a25      	cmp	r2, #37	; 0x25
 800901e:	d1f9      	bne.n	8009014 <_svfiprintf_r+0x50>
 8009020:	ebba 0b04 	subs.w	fp, sl, r4
 8009024:	d00b      	beq.n	800903e <_svfiprintf_r+0x7a>
 8009026:	465b      	mov	r3, fp
 8009028:	4622      	mov	r2, r4
 800902a:	4629      	mov	r1, r5
 800902c:	4638      	mov	r0, r7
 800902e:	f7ff ff6e 	bl	8008f0e <__ssputs_r>
 8009032:	3001      	adds	r0, #1
 8009034:	f000 80aa 	beq.w	800918c <_svfiprintf_r+0x1c8>
 8009038:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800903a:	445a      	add	r2, fp
 800903c:	9209      	str	r2, [sp, #36]	; 0x24
 800903e:	f89a 3000 	ldrb.w	r3, [sl]
 8009042:	2b00      	cmp	r3, #0
 8009044:	f000 80a2 	beq.w	800918c <_svfiprintf_r+0x1c8>
 8009048:	2300      	movs	r3, #0
 800904a:	f04f 32ff 	mov.w	r2, #4294967295
 800904e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009052:	f10a 0a01 	add.w	sl, sl, #1
 8009056:	9304      	str	r3, [sp, #16]
 8009058:	9307      	str	r3, [sp, #28]
 800905a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800905e:	931a      	str	r3, [sp, #104]	; 0x68
 8009060:	4654      	mov	r4, sl
 8009062:	2205      	movs	r2, #5
 8009064:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009068:	4851      	ldr	r0, [pc, #324]	; (80091b0 <_svfiprintf_r+0x1ec>)
 800906a:	f7f7 f901 	bl	8000270 <memchr>
 800906e:	9a04      	ldr	r2, [sp, #16]
 8009070:	b9d8      	cbnz	r0, 80090aa <_svfiprintf_r+0xe6>
 8009072:	06d0      	lsls	r0, r2, #27
 8009074:	bf44      	itt	mi
 8009076:	2320      	movmi	r3, #32
 8009078:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800907c:	0711      	lsls	r1, r2, #28
 800907e:	bf44      	itt	mi
 8009080:	232b      	movmi	r3, #43	; 0x2b
 8009082:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009086:	f89a 3000 	ldrb.w	r3, [sl]
 800908a:	2b2a      	cmp	r3, #42	; 0x2a
 800908c:	d015      	beq.n	80090ba <_svfiprintf_r+0xf6>
 800908e:	9a07      	ldr	r2, [sp, #28]
 8009090:	4654      	mov	r4, sl
 8009092:	2000      	movs	r0, #0
 8009094:	f04f 0c0a 	mov.w	ip, #10
 8009098:	4621      	mov	r1, r4
 800909a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800909e:	3b30      	subs	r3, #48	; 0x30
 80090a0:	2b09      	cmp	r3, #9
 80090a2:	d94e      	bls.n	8009142 <_svfiprintf_r+0x17e>
 80090a4:	b1b0      	cbz	r0, 80090d4 <_svfiprintf_r+0x110>
 80090a6:	9207      	str	r2, [sp, #28]
 80090a8:	e014      	b.n	80090d4 <_svfiprintf_r+0x110>
 80090aa:	eba0 0308 	sub.w	r3, r0, r8
 80090ae:	fa09 f303 	lsl.w	r3, r9, r3
 80090b2:	4313      	orrs	r3, r2
 80090b4:	9304      	str	r3, [sp, #16]
 80090b6:	46a2      	mov	sl, r4
 80090b8:	e7d2      	b.n	8009060 <_svfiprintf_r+0x9c>
 80090ba:	9b03      	ldr	r3, [sp, #12]
 80090bc:	1d19      	adds	r1, r3, #4
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	9103      	str	r1, [sp, #12]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	bfbb      	ittet	lt
 80090c6:	425b      	neglt	r3, r3
 80090c8:	f042 0202 	orrlt.w	r2, r2, #2
 80090cc:	9307      	strge	r3, [sp, #28]
 80090ce:	9307      	strlt	r3, [sp, #28]
 80090d0:	bfb8      	it	lt
 80090d2:	9204      	strlt	r2, [sp, #16]
 80090d4:	7823      	ldrb	r3, [r4, #0]
 80090d6:	2b2e      	cmp	r3, #46	; 0x2e
 80090d8:	d10c      	bne.n	80090f4 <_svfiprintf_r+0x130>
 80090da:	7863      	ldrb	r3, [r4, #1]
 80090dc:	2b2a      	cmp	r3, #42	; 0x2a
 80090de:	d135      	bne.n	800914c <_svfiprintf_r+0x188>
 80090e0:	9b03      	ldr	r3, [sp, #12]
 80090e2:	1d1a      	adds	r2, r3, #4
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	9203      	str	r2, [sp, #12]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	bfb8      	it	lt
 80090ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80090f0:	3402      	adds	r4, #2
 80090f2:	9305      	str	r3, [sp, #20]
 80090f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80091c0 <_svfiprintf_r+0x1fc>
 80090f8:	7821      	ldrb	r1, [r4, #0]
 80090fa:	2203      	movs	r2, #3
 80090fc:	4650      	mov	r0, sl
 80090fe:	f7f7 f8b7 	bl	8000270 <memchr>
 8009102:	b140      	cbz	r0, 8009116 <_svfiprintf_r+0x152>
 8009104:	2340      	movs	r3, #64	; 0x40
 8009106:	eba0 000a 	sub.w	r0, r0, sl
 800910a:	fa03 f000 	lsl.w	r0, r3, r0
 800910e:	9b04      	ldr	r3, [sp, #16]
 8009110:	4303      	orrs	r3, r0
 8009112:	3401      	adds	r4, #1
 8009114:	9304      	str	r3, [sp, #16]
 8009116:	f814 1b01 	ldrb.w	r1, [r4], #1
 800911a:	4826      	ldr	r0, [pc, #152]	; (80091b4 <_svfiprintf_r+0x1f0>)
 800911c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009120:	2206      	movs	r2, #6
 8009122:	f7f7 f8a5 	bl	8000270 <memchr>
 8009126:	2800      	cmp	r0, #0
 8009128:	d038      	beq.n	800919c <_svfiprintf_r+0x1d8>
 800912a:	4b23      	ldr	r3, [pc, #140]	; (80091b8 <_svfiprintf_r+0x1f4>)
 800912c:	bb1b      	cbnz	r3, 8009176 <_svfiprintf_r+0x1b2>
 800912e:	9b03      	ldr	r3, [sp, #12]
 8009130:	3307      	adds	r3, #7
 8009132:	f023 0307 	bic.w	r3, r3, #7
 8009136:	3308      	adds	r3, #8
 8009138:	9303      	str	r3, [sp, #12]
 800913a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800913c:	4433      	add	r3, r6
 800913e:	9309      	str	r3, [sp, #36]	; 0x24
 8009140:	e767      	b.n	8009012 <_svfiprintf_r+0x4e>
 8009142:	fb0c 3202 	mla	r2, ip, r2, r3
 8009146:	460c      	mov	r4, r1
 8009148:	2001      	movs	r0, #1
 800914a:	e7a5      	b.n	8009098 <_svfiprintf_r+0xd4>
 800914c:	2300      	movs	r3, #0
 800914e:	3401      	adds	r4, #1
 8009150:	9305      	str	r3, [sp, #20]
 8009152:	4619      	mov	r1, r3
 8009154:	f04f 0c0a 	mov.w	ip, #10
 8009158:	4620      	mov	r0, r4
 800915a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800915e:	3a30      	subs	r2, #48	; 0x30
 8009160:	2a09      	cmp	r2, #9
 8009162:	d903      	bls.n	800916c <_svfiprintf_r+0x1a8>
 8009164:	2b00      	cmp	r3, #0
 8009166:	d0c5      	beq.n	80090f4 <_svfiprintf_r+0x130>
 8009168:	9105      	str	r1, [sp, #20]
 800916a:	e7c3      	b.n	80090f4 <_svfiprintf_r+0x130>
 800916c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009170:	4604      	mov	r4, r0
 8009172:	2301      	movs	r3, #1
 8009174:	e7f0      	b.n	8009158 <_svfiprintf_r+0x194>
 8009176:	ab03      	add	r3, sp, #12
 8009178:	9300      	str	r3, [sp, #0]
 800917a:	462a      	mov	r2, r5
 800917c:	4b0f      	ldr	r3, [pc, #60]	; (80091bc <_svfiprintf_r+0x1f8>)
 800917e:	a904      	add	r1, sp, #16
 8009180:	4638      	mov	r0, r7
 8009182:	f3af 8000 	nop.w
 8009186:	1c42      	adds	r2, r0, #1
 8009188:	4606      	mov	r6, r0
 800918a:	d1d6      	bne.n	800913a <_svfiprintf_r+0x176>
 800918c:	89ab      	ldrh	r3, [r5, #12]
 800918e:	065b      	lsls	r3, r3, #25
 8009190:	f53f af2c 	bmi.w	8008fec <_svfiprintf_r+0x28>
 8009194:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009196:	b01d      	add	sp, #116	; 0x74
 8009198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800919c:	ab03      	add	r3, sp, #12
 800919e:	9300      	str	r3, [sp, #0]
 80091a0:	462a      	mov	r2, r5
 80091a2:	4b06      	ldr	r3, [pc, #24]	; (80091bc <_svfiprintf_r+0x1f8>)
 80091a4:	a904      	add	r1, sp, #16
 80091a6:	4638      	mov	r0, r7
 80091a8:	f000 f9d4 	bl	8009554 <_printf_i>
 80091ac:	e7eb      	b.n	8009186 <_svfiprintf_r+0x1c2>
 80091ae:	bf00      	nop
 80091b0:	0800a354 	.word	0x0800a354
 80091b4:	0800a35e 	.word	0x0800a35e
 80091b8:	00000000 	.word	0x00000000
 80091bc:	08008f0f 	.word	0x08008f0f
 80091c0:	0800a35a 	.word	0x0800a35a

080091c4 <__sfputc_r>:
 80091c4:	6893      	ldr	r3, [r2, #8]
 80091c6:	3b01      	subs	r3, #1
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	b410      	push	{r4}
 80091cc:	6093      	str	r3, [r2, #8]
 80091ce:	da08      	bge.n	80091e2 <__sfputc_r+0x1e>
 80091d0:	6994      	ldr	r4, [r2, #24]
 80091d2:	42a3      	cmp	r3, r4
 80091d4:	db01      	blt.n	80091da <__sfputc_r+0x16>
 80091d6:	290a      	cmp	r1, #10
 80091d8:	d103      	bne.n	80091e2 <__sfputc_r+0x1e>
 80091da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091de:	f7fe bb5f 	b.w	80078a0 <__swbuf_r>
 80091e2:	6813      	ldr	r3, [r2, #0]
 80091e4:	1c58      	adds	r0, r3, #1
 80091e6:	6010      	str	r0, [r2, #0]
 80091e8:	7019      	strb	r1, [r3, #0]
 80091ea:	4608      	mov	r0, r1
 80091ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091f0:	4770      	bx	lr

080091f2 <__sfputs_r>:
 80091f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091f4:	4606      	mov	r6, r0
 80091f6:	460f      	mov	r7, r1
 80091f8:	4614      	mov	r4, r2
 80091fa:	18d5      	adds	r5, r2, r3
 80091fc:	42ac      	cmp	r4, r5
 80091fe:	d101      	bne.n	8009204 <__sfputs_r+0x12>
 8009200:	2000      	movs	r0, #0
 8009202:	e007      	b.n	8009214 <__sfputs_r+0x22>
 8009204:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009208:	463a      	mov	r2, r7
 800920a:	4630      	mov	r0, r6
 800920c:	f7ff ffda 	bl	80091c4 <__sfputc_r>
 8009210:	1c43      	adds	r3, r0, #1
 8009212:	d1f3      	bne.n	80091fc <__sfputs_r+0xa>
 8009214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009218 <_vfiprintf_r>:
 8009218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800921c:	460d      	mov	r5, r1
 800921e:	b09d      	sub	sp, #116	; 0x74
 8009220:	4614      	mov	r4, r2
 8009222:	4698      	mov	r8, r3
 8009224:	4606      	mov	r6, r0
 8009226:	b118      	cbz	r0, 8009230 <_vfiprintf_r+0x18>
 8009228:	6983      	ldr	r3, [r0, #24]
 800922a:	b90b      	cbnz	r3, 8009230 <_vfiprintf_r+0x18>
 800922c:	f7fe fd12 	bl	8007c54 <__sinit>
 8009230:	4b89      	ldr	r3, [pc, #548]	; (8009458 <_vfiprintf_r+0x240>)
 8009232:	429d      	cmp	r5, r3
 8009234:	d11b      	bne.n	800926e <_vfiprintf_r+0x56>
 8009236:	6875      	ldr	r5, [r6, #4]
 8009238:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800923a:	07d9      	lsls	r1, r3, #31
 800923c:	d405      	bmi.n	800924a <_vfiprintf_r+0x32>
 800923e:	89ab      	ldrh	r3, [r5, #12]
 8009240:	059a      	lsls	r2, r3, #22
 8009242:	d402      	bmi.n	800924a <_vfiprintf_r+0x32>
 8009244:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009246:	f7ff f912 	bl	800846e <__retarget_lock_acquire_recursive>
 800924a:	89ab      	ldrh	r3, [r5, #12]
 800924c:	071b      	lsls	r3, r3, #28
 800924e:	d501      	bpl.n	8009254 <_vfiprintf_r+0x3c>
 8009250:	692b      	ldr	r3, [r5, #16]
 8009252:	b9eb      	cbnz	r3, 8009290 <_vfiprintf_r+0x78>
 8009254:	4629      	mov	r1, r5
 8009256:	4630      	mov	r0, r6
 8009258:	f7fe fb74 	bl	8007944 <__swsetup_r>
 800925c:	b1c0      	cbz	r0, 8009290 <_vfiprintf_r+0x78>
 800925e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009260:	07dc      	lsls	r4, r3, #31
 8009262:	d50e      	bpl.n	8009282 <_vfiprintf_r+0x6a>
 8009264:	f04f 30ff 	mov.w	r0, #4294967295
 8009268:	b01d      	add	sp, #116	; 0x74
 800926a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800926e:	4b7b      	ldr	r3, [pc, #492]	; (800945c <_vfiprintf_r+0x244>)
 8009270:	429d      	cmp	r5, r3
 8009272:	d101      	bne.n	8009278 <_vfiprintf_r+0x60>
 8009274:	68b5      	ldr	r5, [r6, #8]
 8009276:	e7df      	b.n	8009238 <_vfiprintf_r+0x20>
 8009278:	4b79      	ldr	r3, [pc, #484]	; (8009460 <_vfiprintf_r+0x248>)
 800927a:	429d      	cmp	r5, r3
 800927c:	bf08      	it	eq
 800927e:	68f5      	ldreq	r5, [r6, #12]
 8009280:	e7da      	b.n	8009238 <_vfiprintf_r+0x20>
 8009282:	89ab      	ldrh	r3, [r5, #12]
 8009284:	0598      	lsls	r0, r3, #22
 8009286:	d4ed      	bmi.n	8009264 <_vfiprintf_r+0x4c>
 8009288:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800928a:	f7ff f8f1 	bl	8008470 <__retarget_lock_release_recursive>
 800928e:	e7e9      	b.n	8009264 <_vfiprintf_r+0x4c>
 8009290:	2300      	movs	r3, #0
 8009292:	9309      	str	r3, [sp, #36]	; 0x24
 8009294:	2320      	movs	r3, #32
 8009296:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800929a:	f8cd 800c 	str.w	r8, [sp, #12]
 800929e:	2330      	movs	r3, #48	; 0x30
 80092a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009464 <_vfiprintf_r+0x24c>
 80092a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80092a8:	f04f 0901 	mov.w	r9, #1
 80092ac:	4623      	mov	r3, r4
 80092ae:	469a      	mov	sl, r3
 80092b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092b4:	b10a      	cbz	r2, 80092ba <_vfiprintf_r+0xa2>
 80092b6:	2a25      	cmp	r2, #37	; 0x25
 80092b8:	d1f9      	bne.n	80092ae <_vfiprintf_r+0x96>
 80092ba:	ebba 0b04 	subs.w	fp, sl, r4
 80092be:	d00b      	beq.n	80092d8 <_vfiprintf_r+0xc0>
 80092c0:	465b      	mov	r3, fp
 80092c2:	4622      	mov	r2, r4
 80092c4:	4629      	mov	r1, r5
 80092c6:	4630      	mov	r0, r6
 80092c8:	f7ff ff93 	bl	80091f2 <__sfputs_r>
 80092cc:	3001      	adds	r0, #1
 80092ce:	f000 80aa 	beq.w	8009426 <_vfiprintf_r+0x20e>
 80092d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092d4:	445a      	add	r2, fp
 80092d6:	9209      	str	r2, [sp, #36]	; 0x24
 80092d8:	f89a 3000 	ldrb.w	r3, [sl]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	f000 80a2 	beq.w	8009426 <_vfiprintf_r+0x20e>
 80092e2:	2300      	movs	r3, #0
 80092e4:	f04f 32ff 	mov.w	r2, #4294967295
 80092e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092ec:	f10a 0a01 	add.w	sl, sl, #1
 80092f0:	9304      	str	r3, [sp, #16]
 80092f2:	9307      	str	r3, [sp, #28]
 80092f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80092f8:	931a      	str	r3, [sp, #104]	; 0x68
 80092fa:	4654      	mov	r4, sl
 80092fc:	2205      	movs	r2, #5
 80092fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009302:	4858      	ldr	r0, [pc, #352]	; (8009464 <_vfiprintf_r+0x24c>)
 8009304:	f7f6 ffb4 	bl	8000270 <memchr>
 8009308:	9a04      	ldr	r2, [sp, #16]
 800930a:	b9d8      	cbnz	r0, 8009344 <_vfiprintf_r+0x12c>
 800930c:	06d1      	lsls	r1, r2, #27
 800930e:	bf44      	itt	mi
 8009310:	2320      	movmi	r3, #32
 8009312:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009316:	0713      	lsls	r3, r2, #28
 8009318:	bf44      	itt	mi
 800931a:	232b      	movmi	r3, #43	; 0x2b
 800931c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009320:	f89a 3000 	ldrb.w	r3, [sl]
 8009324:	2b2a      	cmp	r3, #42	; 0x2a
 8009326:	d015      	beq.n	8009354 <_vfiprintf_r+0x13c>
 8009328:	9a07      	ldr	r2, [sp, #28]
 800932a:	4654      	mov	r4, sl
 800932c:	2000      	movs	r0, #0
 800932e:	f04f 0c0a 	mov.w	ip, #10
 8009332:	4621      	mov	r1, r4
 8009334:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009338:	3b30      	subs	r3, #48	; 0x30
 800933a:	2b09      	cmp	r3, #9
 800933c:	d94e      	bls.n	80093dc <_vfiprintf_r+0x1c4>
 800933e:	b1b0      	cbz	r0, 800936e <_vfiprintf_r+0x156>
 8009340:	9207      	str	r2, [sp, #28]
 8009342:	e014      	b.n	800936e <_vfiprintf_r+0x156>
 8009344:	eba0 0308 	sub.w	r3, r0, r8
 8009348:	fa09 f303 	lsl.w	r3, r9, r3
 800934c:	4313      	orrs	r3, r2
 800934e:	9304      	str	r3, [sp, #16]
 8009350:	46a2      	mov	sl, r4
 8009352:	e7d2      	b.n	80092fa <_vfiprintf_r+0xe2>
 8009354:	9b03      	ldr	r3, [sp, #12]
 8009356:	1d19      	adds	r1, r3, #4
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	9103      	str	r1, [sp, #12]
 800935c:	2b00      	cmp	r3, #0
 800935e:	bfbb      	ittet	lt
 8009360:	425b      	neglt	r3, r3
 8009362:	f042 0202 	orrlt.w	r2, r2, #2
 8009366:	9307      	strge	r3, [sp, #28]
 8009368:	9307      	strlt	r3, [sp, #28]
 800936a:	bfb8      	it	lt
 800936c:	9204      	strlt	r2, [sp, #16]
 800936e:	7823      	ldrb	r3, [r4, #0]
 8009370:	2b2e      	cmp	r3, #46	; 0x2e
 8009372:	d10c      	bne.n	800938e <_vfiprintf_r+0x176>
 8009374:	7863      	ldrb	r3, [r4, #1]
 8009376:	2b2a      	cmp	r3, #42	; 0x2a
 8009378:	d135      	bne.n	80093e6 <_vfiprintf_r+0x1ce>
 800937a:	9b03      	ldr	r3, [sp, #12]
 800937c:	1d1a      	adds	r2, r3, #4
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	9203      	str	r2, [sp, #12]
 8009382:	2b00      	cmp	r3, #0
 8009384:	bfb8      	it	lt
 8009386:	f04f 33ff 	movlt.w	r3, #4294967295
 800938a:	3402      	adds	r4, #2
 800938c:	9305      	str	r3, [sp, #20]
 800938e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009474 <_vfiprintf_r+0x25c>
 8009392:	7821      	ldrb	r1, [r4, #0]
 8009394:	2203      	movs	r2, #3
 8009396:	4650      	mov	r0, sl
 8009398:	f7f6 ff6a 	bl	8000270 <memchr>
 800939c:	b140      	cbz	r0, 80093b0 <_vfiprintf_r+0x198>
 800939e:	2340      	movs	r3, #64	; 0x40
 80093a0:	eba0 000a 	sub.w	r0, r0, sl
 80093a4:	fa03 f000 	lsl.w	r0, r3, r0
 80093a8:	9b04      	ldr	r3, [sp, #16]
 80093aa:	4303      	orrs	r3, r0
 80093ac:	3401      	adds	r4, #1
 80093ae:	9304      	str	r3, [sp, #16]
 80093b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093b4:	482c      	ldr	r0, [pc, #176]	; (8009468 <_vfiprintf_r+0x250>)
 80093b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80093ba:	2206      	movs	r2, #6
 80093bc:	f7f6 ff58 	bl	8000270 <memchr>
 80093c0:	2800      	cmp	r0, #0
 80093c2:	d03f      	beq.n	8009444 <_vfiprintf_r+0x22c>
 80093c4:	4b29      	ldr	r3, [pc, #164]	; (800946c <_vfiprintf_r+0x254>)
 80093c6:	bb1b      	cbnz	r3, 8009410 <_vfiprintf_r+0x1f8>
 80093c8:	9b03      	ldr	r3, [sp, #12]
 80093ca:	3307      	adds	r3, #7
 80093cc:	f023 0307 	bic.w	r3, r3, #7
 80093d0:	3308      	adds	r3, #8
 80093d2:	9303      	str	r3, [sp, #12]
 80093d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093d6:	443b      	add	r3, r7
 80093d8:	9309      	str	r3, [sp, #36]	; 0x24
 80093da:	e767      	b.n	80092ac <_vfiprintf_r+0x94>
 80093dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80093e0:	460c      	mov	r4, r1
 80093e2:	2001      	movs	r0, #1
 80093e4:	e7a5      	b.n	8009332 <_vfiprintf_r+0x11a>
 80093e6:	2300      	movs	r3, #0
 80093e8:	3401      	adds	r4, #1
 80093ea:	9305      	str	r3, [sp, #20]
 80093ec:	4619      	mov	r1, r3
 80093ee:	f04f 0c0a 	mov.w	ip, #10
 80093f2:	4620      	mov	r0, r4
 80093f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093f8:	3a30      	subs	r2, #48	; 0x30
 80093fa:	2a09      	cmp	r2, #9
 80093fc:	d903      	bls.n	8009406 <_vfiprintf_r+0x1ee>
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d0c5      	beq.n	800938e <_vfiprintf_r+0x176>
 8009402:	9105      	str	r1, [sp, #20]
 8009404:	e7c3      	b.n	800938e <_vfiprintf_r+0x176>
 8009406:	fb0c 2101 	mla	r1, ip, r1, r2
 800940a:	4604      	mov	r4, r0
 800940c:	2301      	movs	r3, #1
 800940e:	e7f0      	b.n	80093f2 <_vfiprintf_r+0x1da>
 8009410:	ab03      	add	r3, sp, #12
 8009412:	9300      	str	r3, [sp, #0]
 8009414:	462a      	mov	r2, r5
 8009416:	4b16      	ldr	r3, [pc, #88]	; (8009470 <_vfiprintf_r+0x258>)
 8009418:	a904      	add	r1, sp, #16
 800941a:	4630      	mov	r0, r6
 800941c:	f3af 8000 	nop.w
 8009420:	4607      	mov	r7, r0
 8009422:	1c78      	adds	r0, r7, #1
 8009424:	d1d6      	bne.n	80093d4 <_vfiprintf_r+0x1bc>
 8009426:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009428:	07d9      	lsls	r1, r3, #31
 800942a:	d405      	bmi.n	8009438 <_vfiprintf_r+0x220>
 800942c:	89ab      	ldrh	r3, [r5, #12]
 800942e:	059a      	lsls	r2, r3, #22
 8009430:	d402      	bmi.n	8009438 <_vfiprintf_r+0x220>
 8009432:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009434:	f7ff f81c 	bl	8008470 <__retarget_lock_release_recursive>
 8009438:	89ab      	ldrh	r3, [r5, #12]
 800943a:	065b      	lsls	r3, r3, #25
 800943c:	f53f af12 	bmi.w	8009264 <_vfiprintf_r+0x4c>
 8009440:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009442:	e711      	b.n	8009268 <_vfiprintf_r+0x50>
 8009444:	ab03      	add	r3, sp, #12
 8009446:	9300      	str	r3, [sp, #0]
 8009448:	462a      	mov	r2, r5
 800944a:	4b09      	ldr	r3, [pc, #36]	; (8009470 <_vfiprintf_r+0x258>)
 800944c:	a904      	add	r1, sp, #16
 800944e:	4630      	mov	r0, r6
 8009450:	f000 f880 	bl	8009554 <_printf_i>
 8009454:	e7e4      	b.n	8009420 <_vfiprintf_r+0x208>
 8009456:	bf00      	nop
 8009458:	0800a10c 	.word	0x0800a10c
 800945c:	0800a12c 	.word	0x0800a12c
 8009460:	0800a0ec 	.word	0x0800a0ec
 8009464:	0800a354 	.word	0x0800a354
 8009468:	0800a35e 	.word	0x0800a35e
 800946c:	00000000 	.word	0x00000000
 8009470:	080091f3 	.word	0x080091f3
 8009474:	0800a35a 	.word	0x0800a35a

08009478 <_printf_common>:
 8009478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800947c:	4616      	mov	r6, r2
 800947e:	4699      	mov	r9, r3
 8009480:	688a      	ldr	r2, [r1, #8]
 8009482:	690b      	ldr	r3, [r1, #16]
 8009484:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009488:	4293      	cmp	r3, r2
 800948a:	bfb8      	it	lt
 800948c:	4613      	movlt	r3, r2
 800948e:	6033      	str	r3, [r6, #0]
 8009490:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009494:	4607      	mov	r7, r0
 8009496:	460c      	mov	r4, r1
 8009498:	b10a      	cbz	r2, 800949e <_printf_common+0x26>
 800949a:	3301      	adds	r3, #1
 800949c:	6033      	str	r3, [r6, #0]
 800949e:	6823      	ldr	r3, [r4, #0]
 80094a0:	0699      	lsls	r1, r3, #26
 80094a2:	bf42      	ittt	mi
 80094a4:	6833      	ldrmi	r3, [r6, #0]
 80094a6:	3302      	addmi	r3, #2
 80094a8:	6033      	strmi	r3, [r6, #0]
 80094aa:	6825      	ldr	r5, [r4, #0]
 80094ac:	f015 0506 	ands.w	r5, r5, #6
 80094b0:	d106      	bne.n	80094c0 <_printf_common+0x48>
 80094b2:	f104 0a19 	add.w	sl, r4, #25
 80094b6:	68e3      	ldr	r3, [r4, #12]
 80094b8:	6832      	ldr	r2, [r6, #0]
 80094ba:	1a9b      	subs	r3, r3, r2
 80094bc:	42ab      	cmp	r3, r5
 80094be:	dc26      	bgt.n	800950e <_printf_common+0x96>
 80094c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80094c4:	1e13      	subs	r3, r2, #0
 80094c6:	6822      	ldr	r2, [r4, #0]
 80094c8:	bf18      	it	ne
 80094ca:	2301      	movne	r3, #1
 80094cc:	0692      	lsls	r2, r2, #26
 80094ce:	d42b      	bmi.n	8009528 <_printf_common+0xb0>
 80094d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80094d4:	4649      	mov	r1, r9
 80094d6:	4638      	mov	r0, r7
 80094d8:	47c0      	blx	r8
 80094da:	3001      	adds	r0, #1
 80094dc:	d01e      	beq.n	800951c <_printf_common+0xa4>
 80094de:	6823      	ldr	r3, [r4, #0]
 80094e0:	68e5      	ldr	r5, [r4, #12]
 80094e2:	6832      	ldr	r2, [r6, #0]
 80094e4:	f003 0306 	and.w	r3, r3, #6
 80094e8:	2b04      	cmp	r3, #4
 80094ea:	bf08      	it	eq
 80094ec:	1aad      	subeq	r5, r5, r2
 80094ee:	68a3      	ldr	r3, [r4, #8]
 80094f0:	6922      	ldr	r2, [r4, #16]
 80094f2:	bf0c      	ite	eq
 80094f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80094f8:	2500      	movne	r5, #0
 80094fa:	4293      	cmp	r3, r2
 80094fc:	bfc4      	itt	gt
 80094fe:	1a9b      	subgt	r3, r3, r2
 8009500:	18ed      	addgt	r5, r5, r3
 8009502:	2600      	movs	r6, #0
 8009504:	341a      	adds	r4, #26
 8009506:	42b5      	cmp	r5, r6
 8009508:	d11a      	bne.n	8009540 <_printf_common+0xc8>
 800950a:	2000      	movs	r0, #0
 800950c:	e008      	b.n	8009520 <_printf_common+0xa8>
 800950e:	2301      	movs	r3, #1
 8009510:	4652      	mov	r2, sl
 8009512:	4649      	mov	r1, r9
 8009514:	4638      	mov	r0, r7
 8009516:	47c0      	blx	r8
 8009518:	3001      	adds	r0, #1
 800951a:	d103      	bne.n	8009524 <_printf_common+0xac>
 800951c:	f04f 30ff 	mov.w	r0, #4294967295
 8009520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009524:	3501      	adds	r5, #1
 8009526:	e7c6      	b.n	80094b6 <_printf_common+0x3e>
 8009528:	18e1      	adds	r1, r4, r3
 800952a:	1c5a      	adds	r2, r3, #1
 800952c:	2030      	movs	r0, #48	; 0x30
 800952e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009532:	4422      	add	r2, r4
 8009534:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009538:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800953c:	3302      	adds	r3, #2
 800953e:	e7c7      	b.n	80094d0 <_printf_common+0x58>
 8009540:	2301      	movs	r3, #1
 8009542:	4622      	mov	r2, r4
 8009544:	4649      	mov	r1, r9
 8009546:	4638      	mov	r0, r7
 8009548:	47c0      	blx	r8
 800954a:	3001      	adds	r0, #1
 800954c:	d0e6      	beq.n	800951c <_printf_common+0xa4>
 800954e:	3601      	adds	r6, #1
 8009550:	e7d9      	b.n	8009506 <_printf_common+0x8e>
	...

08009554 <_printf_i>:
 8009554:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009558:	460c      	mov	r4, r1
 800955a:	4691      	mov	r9, r2
 800955c:	7e27      	ldrb	r7, [r4, #24]
 800955e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009560:	2f78      	cmp	r7, #120	; 0x78
 8009562:	4680      	mov	r8, r0
 8009564:	469a      	mov	sl, r3
 8009566:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800956a:	d807      	bhi.n	800957c <_printf_i+0x28>
 800956c:	2f62      	cmp	r7, #98	; 0x62
 800956e:	d80a      	bhi.n	8009586 <_printf_i+0x32>
 8009570:	2f00      	cmp	r7, #0
 8009572:	f000 80d8 	beq.w	8009726 <_printf_i+0x1d2>
 8009576:	2f58      	cmp	r7, #88	; 0x58
 8009578:	f000 80a3 	beq.w	80096c2 <_printf_i+0x16e>
 800957c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009580:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009584:	e03a      	b.n	80095fc <_printf_i+0xa8>
 8009586:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800958a:	2b15      	cmp	r3, #21
 800958c:	d8f6      	bhi.n	800957c <_printf_i+0x28>
 800958e:	a001      	add	r0, pc, #4	; (adr r0, 8009594 <_printf_i+0x40>)
 8009590:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009594:	080095ed 	.word	0x080095ed
 8009598:	08009601 	.word	0x08009601
 800959c:	0800957d 	.word	0x0800957d
 80095a0:	0800957d 	.word	0x0800957d
 80095a4:	0800957d 	.word	0x0800957d
 80095a8:	0800957d 	.word	0x0800957d
 80095ac:	08009601 	.word	0x08009601
 80095b0:	0800957d 	.word	0x0800957d
 80095b4:	0800957d 	.word	0x0800957d
 80095b8:	0800957d 	.word	0x0800957d
 80095bc:	0800957d 	.word	0x0800957d
 80095c0:	0800970d 	.word	0x0800970d
 80095c4:	08009631 	.word	0x08009631
 80095c8:	080096ef 	.word	0x080096ef
 80095cc:	0800957d 	.word	0x0800957d
 80095d0:	0800957d 	.word	0x0800957d
 80095d4:	0800972f 	.word	0x0800972f
 80095d8:	0800957d 	.word	0x0800957d
 80095dc:	08009631 	.word	0x08009631
 80095e0:	0800957d 	.word	0x0800957d
 80095e4:	0800957d 	.word	0x0800957d
 80095e8:	080096f7 	.word	0x080096f7
 80095ec:	680b      	ldr	r3, [r1, #0]
 80095ee:	1d1a      	adds	r2, r3, #4
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	600a      	str	r2, [r1, #0]
 80095f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80095f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80095fc:	2301      	movs	r3, #1
 80095fe:	e0a3      	b.n	8009748 <_printf_i+0x1f4>
 8009600:	6825      	ldr	r5, [r4, #0]
 8009602:	6808      	ldr	r0, [r1, #0]
 8009604:	062e      	lsls	r6, r5, #24
 8009606:	f100 0304 	add.w	r3, r0, #4
 800960a:	d50a      	bpl.n	8009622 <_printf_i+0xce>
 800960c:	6805      	ldr	r5, [r0, #0]
 800960e:	600b      	str	r3, [r1, #0]
 8009610:	2d00      	cmp	r5, #0
 8009612:	da03      	bge.n	800961c <_printf_i+0xc8>
 8009614:	232d      	movs	r3, #45	; 0x2d
 8009616:	426d      	negs	r5, r5
 8009618:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800961c:	485e      	ldr	r0, [pc, #376]	; (8009798 <_printf_i+0x244>)
 800961e:	230a      	movs	r3, #10
 8009620:	e019      	b.n	8009656 <_printf_i+0x102>
 8009622:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009626:	6805      	ldr	r5, [r0, #0]
 8009628:	600b      	str	r3, [r1, #0]
 800962a:	bf18      	it	ne
 800962c:	b22d      	sxthne	r5, r5
 800962e:	e7ef      	b.n	8009610 <_printf_i+0xbc>
 8009630:	680b      	ldr	r3, [r1, #0]
 8009632:	6825      	ldr	r5, [r4, #0]
 8009634:	1d18      	adds	r0, r3, #4
 8009636:	6008      	str	r0, [r1, #0]
 8009638:	0628      	lsls	r0, r5, #24
 800963a:	d501      	bpl.n	8009640 <_printf_i+0xec>
 800963c:	681d      	ldr	r5, [r3, #0]
 800963e:	e002      	b.n	8009646 <_printf_i+0xf2>
 8009640:	0669      	lsls	r1, r5, #25
 8009642:	d5fb      	bpl.n	800963c <_printf_i+0xe8>
 8009644:	881d      	ldrh	r5, [r3, #0]
 8009646:	4854      	ldr	r0, [pc, #336]	; (8009798 <_printf_i+0x244>)
 8009648:	2f6f      	cmp	r7, #111	; 0x6f
 800964a:	bf0c      	ite	eq
 800964c:	2308      	moveq	r3, #8
 800964e:	230a      	movne	r3, #10
 8009650:	2100      	movs	r1, #0
 8009652:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009656:	6866      	ldr	r6, [r4, #4]
 8009658:	60a6      	str	r6, [r4, #8]
 800965a:	2e00      	cmp	r6, #0
 800965c:	bfa2      	ittt	ge
 800965e:	6821      	ldrge	r1, [r4, #0]
 8009660:	f021 0104 	bicge.w	r1, r1, #4
 8009664:	6021      	strge	r1, [r4, #0]
 8009666:	b90d      	cbnz	r5, 800966c <_printf_i+0x118>
 8009668:	2e00      	cmp	r6, #0
 800966a:	d04d      	beq.n	8009708 <_printf_i+0x1b4>
 800966c:	4616      	mov	r6, r2
 800966e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009672:	fb03 5711 	mls	r7, r3, r1, r5
 8009676:	5dc7      	ldrb	r7, [r0, r7]
 8009678:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800967c:	462f      	mov	r7, r5
 800967e:	42bb      	cmp	r3, r7
 8009680:	460d      	mov	r5, r1
 8009682:	d9f4      	bls.n	800966e <_printf_i+0x11a>
 8009684:	2b08      	cmp	r3, #8
 8009686:	d10b      	bne.n	80096a0 <_printf_i+0x14c>
 8009688:	6823      	ldr	r3, [r4, #0]
 800968a:	07df      	lsls	r7, r3, #31
 800968c:	d508      	bpl.n	80096a0 <_printf_i+0x14c>
 800968e:	6923      	ldr	r3, [r4, #16]
 8009690:	6861      	ldr	r1, [r4, #4]
 8009692:	4299      	cmp	r1, r3
 8009694:	bfde      	ittt	le
 8009696:	2330      	movle	r3, #48	; 0x30
 8009698:	f806 3c01 	strble.w	r3, [r6, #-1]
 800969c:	f106 36ff 	addle.w	r6, r6, #4294967295
 80096a0:	1b92      	subs	r2, r2, r6
 80096a2:	6122      	str	r2, [r4, #16]
 80096a4:	f8cd a000 	str.w	sl, [sp]
 80096a8:	464b      	mov	r3, r9
 80096aa:	aa03      	add	r2, sp, #12
 80096ac:	4621      	mov	r1, r4
 80096ae:	4640      	mov	r0, r8
 80096b0:	f7ff fee2 	bl	8009478 <_printf_common>
 80096b4:	3001      	adds	r0, #1
 80096b6:	d14c      	bne.n	8009752 <_printf_i+0x1fe>
 80096b8:	f04f 30ff 	mov.w	r0, #4294967295
 80096bc:	b004      	add	sp, #16
 80096be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096c2:	4835      	ldr	r0, [pc, #212]	; (8009798 <_printf_i+0x244>)
 80096c4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80096c8:	6823      	ldr	r3, [r4, #0]
 80096ca:	680e      	ldr	r6, [r1, #0]
 80096cc:	061f      	lsls	r7, r3, #24
 80096ce:	f856 5b04 	ldr.w	r5, [r6], #4
 80096d2:	600e      	str	r6, [r1, #0]
 80096d4:	d514      	bpl.n	8009700 <_printf_i+0x1ac>
 80096d6:	07d9      	lsls	r1, r3, #31
 80096d8:	bf44      	itt	mi
 80096da:	f043 0320 	orrmi.w	r3, r3, #32
 80096de:	6023      	strmi	r3, [r4, #0]
 80096e0:	b91d      	cbnz	r5, 80096ea <_printf_i+0x196>
 80096e2:	6823      	ldr	r3, [r4, #0]
 80096e4:	f023 0320 	bic.w	r3, r3, #32
 80096e8:	6023      	str	r3, [r4, #0]
 80096ea:	2310      	movs	r3, #16
 80096ec:	e7b0      	b.n	8009650 <_printf_i+0xfc>
 80096ee:	6823      	ldr	r3, [r4, #0]
 80096f0:	f043 0320 	orr.w	r3, r3, #32
 80096f4:	6023      	str	r3, [r4, #0]
 80096f6:	2378      	movs	r3, #120	; 0x78
 80096f8:	4828      	ldr	r0, [pc, #160]	; (800979c <_printf_i+0x248>)
 80096fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80096fe:	e7e3      	b.n	80096c8 <_printf_i+0x174>
 8009700:	065e      	lsls	r6, r3, #25
 8009702:	bf48      	it	mi
 8009704:	b2ad      	uxthmi	r5, r5
 8009706:	e7e6      	b.n	80096d6 <_printf_i+0x182>
 8009708:	4616      	mov	r6, r2
 800970a:	e7bb      	b.n	8009684 <_printf_i+0x130>
 800970c:	680b      	ldr	r3, [r1, #0]
 800970e:	6826      	ldr	r6, [r4, #0]
 8009710:	6960      	ldr	r0, [r4, #20]
 8009712:	1d1d      	adds	r5, r3, #4
 8009714:	600d      	str	r5, [r1, #0]
 8009716:	0635      	lsls	r5, r6, #24
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	d501      	bpl.n	8009720 <_printf_i+0x1cc>
 800971c:	6018      	str	r0, [r3, #0]
 800971e:	e002      	b.n	8009726 <_printf_i+0x1d2>
 8009720:	0671      	lsls	r1, r6, #25
 8009722:	d5fb      	bpl.n	800971c <_printf_i+0x1c8>
 8009724:	8018      	strh	r0, [r3, #0]
 8009726:	2300      	movs	r3, #0
 8009728:	6123      	str	r3, [r4, #16]
 800972a:	4616      	mov	r6, r2
 800972c:	e7ba      	b.n	80096a4 <_printf_i+0x150>
 800972e:	680b      	ldr	r3, [r1, #0]
 8009730:	1d1a      	adds	r2, r3, #4
 8009732:	600a      	str	r2, [r1, #0]
 8009734:	681e      	ldr	r6, [r3, #0]
 8009736:	6862      	ldr	r2, [r4, #4]
 8009738:	2100      	movs	r1, #0
 800973a:	4630      	mov	r0, r6
 800973c:	f7f6 fd98 	bl	8000270 <memchr>
 8009740:	b108      	cbz	r0, 8009746 <_printf_i+0x1f2>
 8009742:	1b80      	subs	r0, r0, r6
 8009744:	6060      	str	r0, [r4, #4]
 8009746:	6863      	ldr	r3, [r4, #4]
 8009748:	6123      	str	r3, [r4, #16]
 800974a:	2300      	movs	r3, #0
 800974c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009750:	e7a8      	b.n	80096a4 <_printf_i+0x150>
 8009752:	6923      	ldr	r3, [r4, #16]
 8009754:	4632      	mov	r2, r6
 8009756:	4649      	mov	r1, r9
 8009758:	4640      	mov	r0, r8
 800975a:	47d0      	blx	sl
 800975c:	3001      	adds	r0, #1
 800975e:	d0ab      	beq.n	80096b8 <_printf_i+0x164>
 8009760:	6823      	ldr	r3, [r4, #0]
 8009762:	079b      	lsls	r3, r3, #30
 8009764:	d413      	bmi.n	800978e <_printf_i+0x23a>
 8009766:	68e0      	ldr	r0, [r4, #12]
 8009768:	9b03      	ldr	r3, [sp, #12]
 800976a:	4298      	cmp	r0, r3
 800976c:	bfb8      	it	lt
 800976e:	4618      	movlt	r0, r3
 8009770:	e7a4      	b.n	80096bc <_printf_i+0x168>
 8009772:	2301      	movs	r3, #1
 8009774:	4632      	mov	r2, r6
 8009776:	4649      	mov	r1, r9
 8009778:	4640      	mov	r0, r8
 800977a:	47d0      	blx	sl
 800977c:	3001      	adds	r0, #1
 800977e:	d09b      	beq.n	80096b8 <_printf_i+0x164>
 8009780:	3501      	adds	r5, #1
 8009782:	68e3      	ldr	r3, [r4, #12]
 8009784:	9903      	ldr	r1, [sp, #12]
 8009786:	1a5b      	subs	r3, r3, r1
 8009788:	42ab      	cmp	r3, r5
 800978a:	dcf2      	bgt.n	8009772 <_printf_i+0x21e>
 800978c:	e7eb      	b.n	8009766 <_printf_i+0x212>
 800978e:	2500      	movs	r5, #0
 8009790:	f104 0619 	add.w	r6, r4, #25
 8009794:	e7f5      	b.n	8009782 <_printf_i+0x22e>
 8009796:	bf00      	nop
 8009798:	0800a365 	.word	0x0800a365
 800979c:	0800a376 	.word	0x0800a376

080097a0 <_putc_r>:
 80097a0:	b570      	push	{r4, r5, r6, lr}
 80097a2:	460d      	mov	r5, r1
 80097a4:	4614      	mov	r4, r2
 80097a6:	4606      	mov	r6, r0
 80097a8:	b118      	cbz	r0, 80097b2 <_putc_r+0x12>
 80097aa:	6983      	ldr	r3, [r0, #24]
 80097ac:	b90b      	cbnz	r3, 80097b2 <_putc_r+0x12>
 80097ae:	f7fe fa51 	bl	8007c54 <__sinit>
 80097b2:	4b1c      	ldr	r3, [pc, #112]	; (8009824 <_putc_r+0x84>)
 80097b4:	429c      	cmp	r4, r3
 80097b6:	d124      	bne.n	8009802 <_putc_r+0x62>
 80097b8:	6874      	ldr	r4, [r6, #4]
 80097ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80097bc:	07d8      	lsls	r0, r3, #31
 80097be:	d405      	bmi.n	80097cc <_putc_r+0x2c>
 80097c0:	89a3      	ldrh	r3, [r4, #12]
 80097c2:	0599      	lsls	r1, r3, #22
 80097c4:	d402      	bmi.n	80097cc <_putc_r+0x2c>
 80097c6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097c8:	f7fe fe51 	bl	800846e <__retarget_lock_acquire_recursive>
 80097cc:	68a3      	ldr	r3, [r4, #8]
 80097ce:	3b01      	subs	r3, #1
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	60a3      	str	r3, [r4, #8]
 80097d4:	da05      	bge.n	80097e2 <_putc_r+0x42>
 80097d6:	69a2      	ldr	r2, [r4, #24]
 80097d8:	4293      	cmp	r3, r2
 80097da:	db1c      	blt.n	8009816 <_putc_r+0x76>
 80097dc:	b2eb      	uxtb	r3, r5
 80097de:	2b0a      	cmp	r3, #10
 80097e0:	d019      	beq.n	8009816 <_putc_r+0x76>
 80097e2:	6823      	ldr	r3, [r4, #0]
 80097e4:	1c5a      	adds	r2, r3, #1
 80097e6:	6022      	str	r2, [r4, #0]
 80097e8:	701d      	strb	r5, [r3, #0]
 80097ea:	b2ed      	uxtb	r5, r5
 80097ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80097ee:	07da      	lsls	r2, r3, #31
 80097f0:	d405      	bmi.n	80097fe <_putc_r+0x5e>
 80097f2:	89a3      	ldrh	r3, [r4, #12]
 80097f4:	059b      	lsls	r3, r3, #22
 80097f6:	d402      	bmi.n	80097fe <_putc_r+0x5e>
 80097f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097fa:	f7fe fe39 	bl	8008470 <__retarget_lock_release_recursive>
 80097fe:	4628      	mov	r0, r5
 8009800:	bd70      	pop	{r4, r5, r6, pc}
 8009802:	4b09      	ldr	r3, [pc, #36]	; (8009828 <_putc_r+0x88>)
 8009804:	429c      	cmp	r4, r3
 8009806:	d101      	bne.n	800980c <_putc_r+0x6c>
 8009808:	68b4      	ldr	r4, [r6, #8]
 800980a:	e7d6      	b.n	80097ba <_putc_r+0x1a>
 800980c:	4b07      	ldr	r3, [pc, #28]	; (800982c <_putc_r+0x8c>)
 800980e:	429c      	cmp	r4, r3
 8009810:	bf08      	it	eq
 8009812:	68f4      	ldreq	r4, [r6, #12]
 8009814:	e7d1      	b.n	80097ba <_putc_r+0x1a>
 8009816:	4629      	mov	r1, r5
 8009818:	4622      	mov	r2, r4
 800981a:	4630      	mov	r0, r6
 800981c:	f7fe f840 	bl	80078a0 <__swbuf_r>
 8009820:	4605      	mov	r5, r0
 8009822:	e7e3      	b.n	80097ec <_putc_r+0x4c>
 8009824:	0800a10c 	.word	0x0800a10c
 8009828:	0800a12c 	.word	0x0800a12c
 800982c:	0800a0ec 	.word	0x0800a0ec

08009830 <nan>:
 8009830:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009838 <nan+0x8>
 8009834:	4770      	bx	lr
 8009836:	bf00      	nop
 8009838:	00000000 	.word	0x00000000
 800983c:	7ff80000 	.word	0x7ff80000

08009840 <nanf>:
 8009840:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009848 <nanf+0x8>
 8009844:	4770      	bx	lr
 8009846:	bf00      	nop
 8009848:	7fc00000 	.word	0x7fc00000

0800984c <__sread>:
 800984c:	b510      	push	{r4, lr}
 800984e:	460c      	mov	r4, r1
 8009850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009854:	f000 f922 	bl	8009a9c <_read_r>
 8009858:	2800      	cmp	r0, #0
 800985a:	bfab      	itete	ge
 800985c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800985e:	89a3      	ldrhlt	r3, [r4, #12]
 8009860:	181b      	addge	r3, r3, r0
 8009862:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009866:	bfac      	ite	ge
 8009868:	6563      	strge	r3, [r4, #84]	; 0x54
 800986a:	81a3      	strhlt	r3, [r4, #12]
 800986c:	bd10      	pop	{r4, pc}

0800986e <__swrite>:
 800986e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009872:	461f      	mov	r7, r3
 8009874:	898b      	ldrh	r3, [r1, #12]
 8009876:	05db      	lsls	r3, r3, #23
 8009878:	4605      	mov	r5, r0
 800987a:	460c      	mov	r4, r1
 800987c:	4616      	mov	r6, r2
 800987e:	d505      	bpl.n	800988c <__swrite+0x1e>
 8009880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009884:	2302      	movs	r3, #2
 8009886:	2200      	movs	r2, #0
 8009888:	f000 f8b6 	bl	80099f8 <_lseek_r>
 800988c:	89a3      	ldrh	r3, [r4, #12]
 800988e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009892:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009896:	81a3      	strh	r3, [r4, #12]
 8009898:	4632      	mov	r2, r6
 800989a:	463b      	mov	r3, r7
 800989c:	4628      	mov	r0, r5
 800989e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098a2:	f000 b835 	b.w	8009910 <_write_r>

080098a6 <__sseek>:
 80098a6:	b510      	push	{r4, lr}
 80098a8:	460c      	mov	r4, r1
 80098aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098ae:	f000 f8a3 	bl	80099f8 <_lseek_r>
 80098b2:	1c43      	adds	r3, r0, #1
 80098b4:	89a3      	ldrh	r3, [r4, #12]
 80098b6:	bf15      	itete	ne
 80098b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80098ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80098be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80098c2:	81a3      	strheq	r3, [r4, #12]
 80098c4:	bf18      	it	ne
 80098c6:	81a3      	strhne	r3, [r4, #12]
 80098c8:	bd10      	pop	{r4, pc}

080098ca <__sclose>:
 80098ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098ce:	f000 b84f 	b.w	8009970 <_close_r>

080098d2 <strncmp>:
 80098d2:	b510      	push	{r4, lr}
 80098d4:	b16a      	cbz	r2, 80098f2 <strncmp+0x20>
 80098d6:	3901      	subs	r1, #1
 80098d8:	1884      	adds	r4, r0, r2
 80098da:	f810 3b01 	ldrb.w	r3, [r0], #1
 80098de:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d103      	bne.n	80098ee <strncmp+0x1c>
 80098e6:	42a0      	cmp	r0, r4
 80098e8:	d001      	beq.n	80098ee <strncmp+0x1c>
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d1f5      	bne.n	80098da <strncmp+0x8>
 80098ee:	1a98      	subs	r0, r3, r2
 80098f0:	bd10      	pop	{r4, pc}
 80098f2:	4610      	mov	r0, r2
 80098f4:	e7fc      	b.n	80098f0 <strncmp+0x1e>

080098f6 <__ascii_wctomb>:
 80098f6:	b149      	cbz	r1, 800990c <__ascii_wctomb+0x16>
 80098f8:	2aff      	cmp	r2, #255	; 0xff
 80098fa:	bf85      	ittet	hi
 80098fc:	238a      	movhi	r3, #138	; 0x8a
 80098fe:	6003      	strhi	r3, [r0, #0]
 8009900:	700a      	strbls	r2, [r1, #0]
 8009902:	f04f 30ff 	movhi.w	r0, #4294967295
 8009906:	bf98      	it	ls
 8009908:	2001      	movls	r0, #1
 800990a:	4770      	bx	lr
 800990c:	4608      	mov	r0, r1
 800990e:	4770      	bx	lr

08009910 <_write_r>:
 8009910:	b538      	push	{r3, r4, r5, lr}
 8009912:	4d07      	ldr	r5, [pc, #28]	; (8009930 <_write_r+0x20>)
 8009914:	4604      	mov	r4, r0
 8009916:	4608      	mov	r0, r1
 8009918:	4611      	mov	r1, r2
 800991a:	2200      	movs	r2, #0
 800991c:	602a      	str	r2, [r5, #0]
 800991e:	461a      	mov	r2, r3
 8009920:	f7f7 f8b7 	bl	8000a92 <_write>
 8009924:	1c43      	adds	r3, r0, #1
 8009926:	d102      	bne.n	800992e <_write_r+0x1e>
 8009928:	682b      	ldr	r3, [r5, #0]
 800992a:	b103      	cbz	r3, 800992e <_write_r+0x1e>
 800992c:	6023      	str	r3, [r4, #0]
 800992e:	bd38      	pop	{r3, r4, r5, pc}
 8009930:	20001948 	.word	0x20001948

08009934 <__assert_func>:
 8009934:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009936:	4614      	mov	r4, r2
 8009938:	461a      	mov	r2, r3
 800993a:	4b09      	ldr	r3, [pc, #36]	; (8009960 <__assert_func+0x2c>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	4605      	mov	r5, r0
 8009940:	68d8      	ldr	r0, [r3, #12]
 8009942:	b14c      	cbz	r4, 8009958 <__assert_func+0x24>
 8009944:	4b07      	ldr	r3, [pc, #28]	; (8009964 <__assert_func+0x30>)
 8009946:	9100      	str	r1, [sp, #0]
 8009948:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800994c:	4906      	ldr	r1, [pc, #24]	; (8009968 <__assert_func+0x34>)
 800994e:	462b      	mov	r3, r5
 8009950:	f000 f81e 	bl	8009990 <fiprintf>
 8009954:	f000 f8b4 	bl	8009ac0 <abort>
 8009958:	4b04      	ldr	r3, [pc, #16]	; (800996c <__assert_func+0x38>)
 800995a:	461c      	mov	r4, r3
 800995c:	e7f3      	b.n	8009946 <__assert_func+0x12>
 800995e:	bf00      	nop
 8009960:	2000019c 	.word	0x2000019c
 8009964:	0800a387 	.word	0x0800a387
 8009968:	0800a394 	.word	0x0800a394
 800996c:	08009dfa 	.word	0x08009dfa

08009970 <_close_r>:
 8009970:	b538      	push	{r3, r4, r5, lr}
 8009972:	4d06      	ldr	r5, [pc, #24]	; (800998c <_close_r+0x1c>)
 8009974:	2300      	movs	r3, #0
 8009976:	4604      	mov	r4, r0
 8009978:	4608      	mov	r0, r1
 800997a:	602b      	str	r3, [r5, #0]
 800997c:	f7f7 f896 	bl	8000aac <_close>
 8009980:	1c43      	adds	r3, r0, #1
 8009982:	d102      	bne.n	800998a <_close_r+0x1a>
 8009984:	682b      	ldr	r3, [r5, #0]
 8009986:	b103      	cbz	r3, 800998a <_close_r+0x1a>
 8009988:	6023      	str	r3, [r4, #0]
 800998a:	bd38      	pop	{r3, r4, r5, pc}
 800998c:	20001948 	.word	0x20001948

08009990 <fiprintf>:
 8009990:	b40e      	push	{r1, r2, r3}
 8009992:	b503      	push	{r0, r1, lr}
 8009994:	4601      	mov	r1, r0
 8009996:	ab03      	add	r3, sp, #12
 8009998:	4805      	ldr	r0, [pc, #20]	; (80099b0 <fiprintf+0x20>)
 800999a:	f853 2b04 	ldr.w	r2, [r3], #4
 800999e:	6800      	ldr	r0, [r0, #0]
 80099a0:	9301      	str	r3, [sp, #4]
 80099a2:	f7ff fc39 	bl	8009218 <_vfiprintf_r>
 80099a6:	b002      	add	sp, #8
 80099a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80099ac:	b003      	add	sp, #12
 80099ae:	4770      	bx	lr
 80099b0:	2000019c 	.word	0x2000019c

080099b4 <_fstat_r>:
 80099b4:	b538      	push	{r3, r4, r5, lr}
 80099b6:	4d07      	ldr	r5, [pc, #28]	; (80099d4 <_fstat_r+0x20>)
 80099b8:	2300      	movs	r3, #0
 80099ba:	4604      	mov	r4, r0
 80099bc:	4608      	mov	r0, r1
 80099be:	4611      	mov	r1, r2
 80099c0:	602b      	str	r3, [r5, #0]
 80099c2:	f7f7 f876 	bl	8000ab2 <_fstat>
 80099c6:	1c43      	adds	r3, r0, #1
 80099c8:	d102      	bne.n	80099d0 <_fstat_r+0x1c>
 80099ca:	682b      	ldr	r3, [r5, #0]
 80099cc:	b103      	cbz	r3, 80099d0 <_fstat_r+0x1c>
 80099ce:	6023      	str	r3, [r4, #0]
 80099d0:	bd38      	pop	{r3, r4, r5, pc}
 80099d2:	bf00      	nop
 80099d4:	20001948 	.word	0x20001948

080099d8 <_isatty_r>:
 80099d8:	b538      	push	{r3, r4, r5, lr}
 80099da:	4d06      	ldr	r5, [pc, #24]	; (80099f4 <_isatty_r+0x1c>)
 80099dc:	2300      	movs	r3, #0
 80099de:	4604      	mov	r4, r0
 80099e0:	4608      	mov	r0, r1
 80099e2:	602b      	str	r3, [r5, #0]
 80099e4:	f7f7 f86a 	bl	8000abc <_isatty>
 80099e8:	1c43      	adds	r3, r0, #1
 80099ea:	d102      	bne.n	80099f2 <_isatty_r+0x1a>
 80099ec:	682b      	ldr	r3, [r5, #0]
 80099ee:	b103      	cbz	r3, 80099f2 <_isatty_r+0x1a>
 80099f0:	6023      	str	r3, [r4, #0]
 80099f2:	bd38      	pop	{r3, r4, r5, pc}
 80099f4:	20001948 	.word	0x20001948

080099f8 <_lseek_r>:
 80099f8:	b538      	push	{r3, r4, r5, lr}
 80099fa:	4d07      	ldr	r5, [pc, #28]	; (8009a18 <_lseek_r+0x20>)
 80099fc:	4604      	mov	r4, r0
 80099fe:	4608      	mov	r0, r1
 8009a00:	4611      	mov	r1, r2
 8009a02:	2200      	movs	r2, #0
 8009a04:	602a      	str	r2, [r5, #0]
 8009a06:	461a      	mov	r2, r3
 8009a08:	f7f7 f85a 	bl	8000ac0 <_lseek>
 8009a0c:	1c43      	adds	r3, r0, #1
 8009a0e:	d102      	bne.n	8009a16 <_lseek_r+0x1e>
 8009a10:	682b      	ldr	r3, [r5, #0]
 8009a12:	b103      	cbz	r3, 8009a16 <_lseek_r+0x1e>
 8009a14:	6023      	str	r3, [r4, #0]
 8009a16:	bd38      	pop	{r3, r4, r5, pc}
 8009a18:	20001948 	.word	0x20001948

08009a1c <memmove>:
 8009a1c:	4288      	cmp	r0, r1
 8009a1e:	b510      	push	{r4, lr}
 8009a20:	eb01 0402 	add.w	r4, r1, r2
 8009a24:	d902      	bls.n	8009a2c <memmove+0x10>
 8009a26:	4284      	cmp	r4, r0
 8009a28:	4623      	mov	r3, r4
 8009a2a:	d807      	bhi.n	8009a3c <memmove+0x20>
 8009a2c:	1e43      	subs	r3, r0, #1
 8009a2e:	42a1      	cmp	r1, r4
 8009a30:	d008      	beq.n	8009a44 <memmove+0x28>
 8009a32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009a3a:	e7f8      	b.n	8009a2e <memmove+0x12>
 8009a3c:	4402      	add	r2, r0
 8009a3e:	4601      	mov	r1, r0
 8009a40:	428a      	cmp	r2, r1
 8009a42:	d100      	bne.n	8009a46 <memmove+0x2a>
 8009a44:	bd10      	pop	{r4, pc}
 8009a46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009a4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009a4e:	e7f7      	b.n	8009a40 <memmove+0x24>

08009a50 <_realloc_r>:
 8009a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a52:	4607      	mov	r7, r0
 8009a54:	4614      	mov	r4, r2
 8009a56:	460e      	mov	r6, r1
 8009a58:	b921      	cbnz	r1, 8009a64 <_realloc_r+0x14>
 8009a5a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009a5e:	4611      	mov	r1, r2
 8009a60:	f7fc bee4 	b.w	800682c <_malloc_r>
 8009a64:	b922      	cbnz	r2, 8009a70 <_realloc_r+0x20>
 8009a66:	f7fc fe91 	bl	800678c <_free_r>
 8009a6a:	4625      	mov	r5, r4
 8009a6c:	4628      	mov	r0, r5
 8009a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a70:	f000 f82d 	bl	8009ace <_malloc_usable_size_r>
 8009a74:	42a0      	cmp	r0, r4
 8009a76:	d20f      	bcs.n	8009a98 <_realloc_r+0x48>
 8009a78:	4621      	mov	r1, r4
 8009a7a:	4638      	mov	r0, r7
 8009a7c:	f7fc fed6 	bl	800682c <_malloc_r>
 8009a80:	4605      	mov	r5, r0
 8009a82:	2800      	cmp	r0, #0
 8009a84:	d0f2      	beq.n	8009a6c <_realloc_r+0x1c>
 8009a86:	4631      	mov	r1, r6
 8009a88:	4622      	mov	r2, r4
 8009a8a:	f7fc fe69 	bl	8006760 <memcpy>
 8009a8e:	4631      	mov	r1, r6
 8009a90:	4638      	mov	r0, r7
 8009a92:	f7fc fe7b 	bl	800678c <_free_r>
 8009a96:	e7e9      	b.n	8009a6c <_realloc_r+0x1c>
 8009a98:	4635      	mov	r5, r6
 8009a9a:	e7e7      	b.n	8009a6c <_realloc_r+0x1c>

08009a9c <_read_r>:
 8009a9c:	b538      	push	{r3, r4, r5, lr}
 8009a9e:	4d07      	ldr	r5, [pc, #28]	; (8009abc <_read_r+0x20>)
 8009aa0:	4604      	mov	r4, r0
 8009aa2:	4608      	mov	r0, r1
 8009aa4:	4611      	mov	r1, r2
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	602a      	str	r2, [r5, #0]
 8009aaa:	461a      	mov	r2, r3
 8009aac:	f7f6 ffe4 	bl	8000a78 <_read>
 8009ab0:	1c43      	adds	r3, r0, #1
 8009ab2:	d102      	bne.n	8009aba <_read_r+0x1e>
 8009ab4:	682b      	ldr	r3, [r5, #0]
 8009ab6:	b103      	cbz	r3, 8009aba <_read_r+0x1e>
 8009ab8:	6023      	str	r3, [r4, #0]
 8009aba:	bd38      	pop	{r3, r4, r5, pc}
 8009abc:	20001948 	.word	0x20001948

08009ac0 <abort>:
 8009ac0:	b508      	push	{r3, lr}
 8009ac2:	2006      	movs	r0, #6
 8009ac4:	f000 f834 	bl	8009b30 <raise>
 8009ac8:	2001      	movs	r0, #1
 8009aca:	f7f6 ffcf 	bl	8000a6c <_exit>

08009ace <_malloc_usable_size_r>:
 8009ace:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ad2:	1f18      	subs	r0, r3, #4
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	bfbc      	itt	lt
 8009ad8:	580b      	ldrlt	r3, [r1, r0]
 8009ada:	18c0      	addlt	r0, r0, r3
 8009adc:	4770      	bx	lr

08009ade <_raise_r>:
 8009ade:	291f      	cmp	r1, #31
 8009ae0:	b538      	push	{r3, r4, r5, lr}
 8009ae2:	4604      	mov	r4, r0
 8009ae4:	460d      	mov	r5, r1
 8009ae6:	d904      	bls.n	8009af2 <_raise_r+0x14>
 8009ae8:	2316      	movs	r3, #22
 8009aea:	6003      	str	r3, [r0, #0]
 8009aec:	f04f 30ff 	mov.w	r0, #4294967295
 8009af0:	bd38      	pop	{r3, r4, r5, pc}
 8009af2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009af4:	b112      	cbz	r2, 8009afc <_raise_r+0x1e>
 8009af6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009afa:	b94b      	cbnz	r3, 8009b10 <_raise_r+0x32>
 8009afc:	4620      	mov	r0, r4
 8009afe:	f000 f831 	bl	8009b64 <_getpid_r>
 8009b02:	462a      	mov	r2, r5
 8009b04:	4601      	mov	r1, r0
 8009b06:	4620      	mov	r0, r4
 8009b08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b0c:	f000 b818 	b.w	8009b40 <_kill_r>
 8009b10:	2b01      	cmp	r3, #1
 8009b12:	d00a      	beq.n	8009b2a <_raise_r+0x4c>
 8009b14:	1c59      	adds	r1, r3, #1
 8009b16:	d103      	bne.n	8009b20 <_raise_r+0x42>
 8009b18:	2316      	movs	r3, #22
 8009b1a:	6003      	str	r3, [r0, #0]
 8009b1c:	2001      	movs	r0, #1
 8009b1e:	e7e7      	b.n	8009af0 <_raise_r+0x12>
 8009b20:	2400      	movs	r4, #0
 8009b22:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009b26:	4628      	mov	r0, r5
 8009b28:	4798      	blx	r3
 8009b2a:	2000      	movs	r0, #0
 8009b2c:	e7e0      	b.n	8009af0 <_raise_r+0x12>
	...

08009b30 <raise>:
 8009b30:	4b02      	ldr	r3, [pc, #8]	; (8009b3c <raise+0xc>)
 8009b32:	4601      	mov	r1, r0
 8009b34:	6818      	ldr	r0, [r3, #0]
 8009b36:	f7ff bfd2 	b.w	8009ade <_raise_r>
 8009b3a:	bf00      	nop
 8009b3c:	2000019c 	.word	0x2000019c

08009b40 <_kill_r>:
 8009b40:	b538      	push	{r3, r4, r5, lr}
 8009b42:	4d07      	ldr	r5, [pc, #28]	; (8009b60 <_kill_r+0x20>)
 8009b44:	2300      	movs	r3, #0
 8009b46:	4604      	mov	r4, r0
 8009b48:	4608      	mov	r0, r1
 8009b4a:	4611      	mov	r1, r2
 8009b4c:	602b      	str	r3, [r5, #0]
 8009b4e:	f7f6 ff85 	bl	8000a5c <_kill>
 8009b52:	1c43      	adds	r3, r0, #1
 8009b54:	d102      	bne.n	8009b5c <_kill_r+0x1c>
 8009b56:	682b      	ldr	r3, [r5, #0]
 8009b58:	b103      	cbz	r3, 8009b5c <_kill_r+0x1c>
 8009b5a:	6023      	str	r3, [r4, #0]
 8009b5c:	bd38      	pop	{r3, r4, r5, pc}
 8009b5e:	bf00      	nop
 8009b60:	20001948 	.word	0x20001948

08009b64 <_getpid_r>:
 8009b64:	f7f6 bf78 	b.w	8000a58 <_getpid>

08009b68 <_init>:
 8009b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b6a:	bf00      	nop
 8009b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b6e:	bc08      	pop	{r3}
 8009b70:	469e      	mov	lr, r3
 8009b72:	4770      	bx	lr

08009b74 <_fini>:
 8009b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b76:	bf00      	nop
 8009b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b7a:	bc08      	pop	{r3}
 8009b7c:	469e      	mov	lr, r3
 8009b7e:	4770      	bx	lr
