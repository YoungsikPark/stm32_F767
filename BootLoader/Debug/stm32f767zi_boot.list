
stm32f767zi_boot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c9c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08005e9c  08005e9c  00015e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fc8  08005fc8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005fc8  08005fc8  00015fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005fd0  08005fd0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fd0  08005fd0  00015fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fd4  08005fd4  00015fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005fd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c0  20000070  08006048  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000330  08006048  00020330  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f5fc  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a7d  00000000  00000000  0002f69a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b50  00000000  00000000  00032118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a38  00000000  00000000  00032c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029bae  00000000  00000000  000336a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f18f  00000000  00000000  0005d24e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fbfae  00000000  00000000  0006c3dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016838b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033a0  00000000  00000000  001683e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08005e84 	.word	0x08005e84

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08005e84 	.word	0x08005e84

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80005de:	4b0f      	ldr	r3, [pc, #60]	; (800061c <HAL_MspInit+0x44>)
 80005e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e2:	4a0e      	ldr	r2, [pc, #56]	; (800061c <HAL_MspInit+0x44>)
 80005e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005e8:	6413      	str	r3, [r2, #64]	; 0x40
 80005ea:	4b0c      	ldr	r3, [pc, #48]	; (800061c <HAL_MspInit+0x44>)
 80005ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005f6:	4b09      	ldr	r3, [pc, #36]	; (800061c <HAL_MspInit+0x44>)
 80005f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005fa:	4a08      	ldr	r2, [pc, #32]	; (800061c <HAL_MspInit+0x44>)
 80005fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000600:	6453      	str	r3, [r2, #68]	; 0x44
 8000602:	4b06      	ldr	r3, [pc, #24]	; (800061c <HAL_MspInit+0x44>)
 8000604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000606:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800060a:	603b      	str	r3, [r7, #0]
 800060c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800060e:	bf00      	nop
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	40023800 	.word	0x40023800

08000620 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000624:	e7fe      	b.n	8000624 <NMI_Handler+0x4>

08000626 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000626:	b480      	push	{r7}
 8000628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800062a:	e7fe      	b.n	800062a <HardFault_Handler+0x4>

0800062c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000630:	e7fe      	b.n	8000630 <MemManage_Handler+0x4>

08000632 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000632:	b480      	push	{r7}
 8000634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000636:	e7fe      	b.n	8000636 <BusFault_Handler+0x4>

08000638 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800063c:	e7fe      	b.n	800063c <UsageFault_Handler+0x4>

0800063e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800063e:	b480      	push	{r7}
 8000640:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000642:	bf00      	nop
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr

0800064c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000650:	bf00      	nop
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr

0800065a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800065a:	b480      	push	{r7}
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800065e:	bf00      	nop
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr

08000668 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800066c:	f000 fe66 	bl	800133c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000670:	bf00      	nop
 8000672:	bd80      	pop	{r7, pc}

08000674 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000678:	4802      	ldr	r0, [pc, #8]	; (8000684 <DMA1_Stream1_IRQHandler+0x10>)
 800067a:	f001 f9c1 	bl	8001a00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	200002a0 	.word	0x200002a0

08000688 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800068c:	4802      	ldr	r0, [pc, #8]	; (8000698 <USART3_IRQHandler+0x10>)
 800068e:	f003 fc59 	bl	8003f44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	2000021c 	.word	0x2000021c

0800069c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006a0:	4b06      	ldr	r3, [pc, #24]	; (80006bc <SystemInit+0x20>)
 80006a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006a6:	4a05      	ldr	r2, [pc, #20]	; (80006bc <SystemInit+0x20>)
 80006a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006b0:	bf00      	nop
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	e000ed00 	.word	0xe000ed00

080006c0 <flashInit>:
static bool flashInSector(uint16_t sector_num, uint32_t addr, uint32_t length);



bool flashInit(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
  for (int i=0; i<FLASH_SECTOR_MAX; i++)
 80006c6:	2300      	movs	r3, #0
 80006c8:	607b      	str	r3, [r7, #4]
 80006ca:	e012      	b.n	80006f2 <flashInit+0x32>
  {
    flash_tbl[i].addr   = 0x8000000 + i*1024;
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80006d2:	029b      	lsls	r3, r3, #10
 80006d4:	4619      	mov	r1, r3
 80006d6:	4a0c      	ldr	r2, [pc, #48]	; (8000708 <flashInit+0x48>)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    flash_tbl[i].length = 1024;
 80006de:	4a0a      	ldr	r2, [pc, #40]	; (8000708 <flashInit+0x48>)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	00db      	lsls	r3, r3, #3
 80006e4:	4413      	add	r3, r2
 80006e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006ea:	605a      	str	r2, [r3, #4]
  for (int i=0; i<FLASH_SECTOR_MAX; i++)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	3301      	adds	r3, #1
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	2b07      	cmp	r3, #7
 80006f6:	dde9      	ble.n	80006cc <flashInit+0xc>
  }

  return true;
 80006f8:	2301      	movs	r3, #1
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	370c      	adds	r7, #12
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	2000008c 	.word	0x2000008c

0800070c <flashErase>:

bool flashErase(uint32_t addr, uint32_t length)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08c      	sub	sp, #48	; 0x30
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
  bool ret = false;
 8000716:	2300      	movs	r3, #0
 8000718:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  HAL_StatusTypeDef status;
  FLASH_EraseInitTypeDef init;
  uint32_t page_error;

  int16_t  start_sector_num = -1;
 800071c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000720:	85bb      	strh	r3, [r7, #44]	; 0x2c
  uint32_t sector_count = 0;
 8000722:	2300      	movs	r3, #0
 8000724:	62bb      	str	r3, [r7, #40]	; 0x28



  for (int i=0; i<FLASH_SECTOR_MAX; i++)
 8000726:	2300      	movs	r3, #0
 8000728:	627b      	str	r3, [r7, #36]	; 0x24
 800072a:	e015      	b.n	8000758 <flashErase+0x4c>
  {
    if (flashInSector(i, addr, length) == true)
 800072c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800072e:	b29b      	uxth	r3, r3
 8000730:	683a      	ldr	r2, [r7, #0]
 8000732:	6879      	ldr	r1, [r7, #4]
 8000734:	4618      	mov	r0, r3
 8000736:	f000 f8a7 	bl	8000888 <flashInSector>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d008      	beq.n	8000752 <flashErase+0x46>
    {
      if (start_sector_num < 0)
 8000740:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8000744:	2b00      	cmp	r3, #0
 8000746:	da01      	bge.n	800074c <flashErase+0x40>
      {
        start_sector_num = i;
 8000748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800074a:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }
      sector_count++;
 800074c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800074e:	3301      	adds	r3, #1
 8000750:	62bb      	str	r3, [r7, #40]	; 0x28
  for (int i=0; i<FLASH_SECTOR_MAX; i++)
 8000752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000754:	3301      	adds	r3, #1
 8000756:	627b      	str	r3, [r7, #36]	; 0x24
 8000758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800075a:	2b07      	cmp	r3, #7
 800075c:	dde6      	ble.n	800072c <flashErase+0x20>
    }
  }


  if (sector_count > 0)
 800075e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000760:	2b00      	cmp	r3, #0
 8000762:	d021      	beq.n	80007a8 <flashErase+0x9c>
  {
    HAL_FLASH_Unlock();
 8000764:	f001 fc12 	bl	8001f8c <HAL_FLASH_Unlock>

    init.TypeErase      = FLASH_TYPEERASE_SECTORS;
 8000768:	2300      	movs	r3, #0
 800076a:	60fb      	str	r3, [r7, #12]
    init.Banks          = FLASH_BANK_1;
 800076c:	2301      	movs	r3, #1
 800076e:	613b      	str	r3, [r7, #16]
    init.Sector 		= flash_tbl[start_sector_num].addr;
 8000770:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8000774:	4a0f      	ldr	r2, [pc, #60]	; (80007b4 <flashErase+0xa8>)
 8000776:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800077a:	617b      	str	r3, [r7, #20]
    init.NbSectors      = sector_count;
 800077c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800077e:	61bb      	str	r3, [r7, #24]

    status = HAL_FLASHEx_Erase(&init, &page_error);
 8000780:	f107 0208 	add.w	r2, r7, #8
 8000784:	f107 030c 	add.w	r3, r7, #12
 8000788:	4611      	mov	r1, r2
 800078a:	4618      	mov	r0, r3
 800078c:	f001 fd60 	bl	8002250 <HAL_FLASHEx_Erase>
 8000790:	4603      	mov	r3, r0
 8000792:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (status == HAL_OK)
 8000796:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800079a:	2b00      	cmp	r3, #0
 800079c:	d102      	bne.n	80007a4 <flashErase+0x98>
    {
      ret = true;
 800079e:	2301      	movs	r3, #1
 80007a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    HAL_FLASH_Lock();
 80007a4:	f001 fc14 	bl	8001fd0 <HAL_FLASH_Lock>
  }

  return ret;
 80007a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	3730      	adds	r7, #48	; 0x30
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	2000008c 	.word	0x2000008c

080007b8 <flashWrite>:

bool flashWrite(uint32_t addr, uint8_t *p_data, uint32_t length)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b088      	sub	sp, #32
 80007bc:	af00      	add	r7, sp, #0
 80007be:	60f8      	str	r0, [r7, #12]
 80007c0:	60b9      	str	r1, [r7, #8]
 80007c2:	607a      	str	r2, [r7, #4]
  bool ret = true;
 80007c4:	2301      	movs	r3, #1
 80007c6:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status;


  if (addr%2 != 0)
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <flashWrite+0x1e>
  {
    return false;
 80007d2:	2300      	movs	r3, #0
 80007d4:	e030      	b.n	8000838 <flashWrite+0x80>
  }

  HAL_FLASH_Unlock();
 80007d6:	f001 fbd9 	bl	8001f8c <HAL_FLASH_Unlock>

  for (int i=0; i<length; i+=2)
 80007da:	2300      	movs	r3, #0
 80007dc:	61bb      	str	r3, [r7, #24]
 80007de:	e024      	b.n	800082a <flashWrite+0x72>
  {
    uint16_t data;

    data  = p_data[i+0] << 0;
 80007e0:	69bb      	ldr	r3, [r7, #24]
 80007e2:	68ba      	ldr	r2, [r7, #8]
 80007e4:	4413      	add	r3, r2
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	82fb      	strh	r3, [r7, #22]
    data |= p_data[i+1] << 8;
 80007ea:	69bb      	ldr	r3, [r7, #24]
 80007ec:	3301      	adds	r3, #1
 80007ee:	68ba      	ldr	r2, [r7, #8]
 80007f0:	4413      	add	r3, r2
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	021b      	lsls	r3, r3, #8
 80007f6:	b21a      	sxth	r2, r3
 80007f8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80007fc:	4313      	orrs	r3, r2
 80007fe:	b21b      	sxth	r3, r3
 8000800:	82fb      	strh	r3, [r7, #22]

    status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, addr + i, (uint64_t)data);
 8000802:	69ba      	ldr	r2, [r7, #24]
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	18d1      	adds	r1, r2, r3
 8000808:	8afa      	ldrh	r2, [r7, #22]
 800080a:	f04f 0300 	mov.w	r3, #0
 800080e:	2001      	movs	r0, #1
 8000810:	f001 fb60 	bl	8001ed4 <HAL_FLASH_Program>
 8000814:	4603      	mov	r3, r0
 8000816:	757b      	strb	r3, [r7, #21]
    if (status != HAL_OK)
 8000818:	7d7b      	ldrb	r3, [r7, #21]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d002      	beq.n	8000824 <flashWrite+0x6c>
    {
      ret = false;
 800081e:	2300      	movs	r3, #0
 8000820:	77fb      	strb	r3, [r7, #31]
      break;
 8000822:	e006      	b.n	8000832 <flashWrite+0x7a>
  for (int i=0; i<length; i+=2)
 8000824:	69bb      	ldr	r3, [r7, #24]
 8000826:	3302      	adds	r3, #2
 8000828:	61bb      	str	r3, [r7, #24]
 800082a:	69bb      	ldr	r3, [r7, #24]
 800082c:	687a      	ldr	r2, [r7, #4]
 800082e:	429a      	cmp	r2, r3
 8000830:	d8d6      	bhi.n	80007e0 <flashWrite+0x28>
    }
  }

  HAL_FLASH_Lock();
 8000832:	f001 fbcd 	bl	8001fd0 <HAL_FLASH_Lock>

  return ret;
 8000836:	7ffb      	ldrb	r3, [r7, #31]
}
 8000838:	4618      	mov	r0, r3
 800083a:	3720      	adds	r7, #32
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}

08000840 <flashRead>:

bool flashRead(uint32_t addr, uint8_t *p_data, uint32_t length)
{
 8000840:	b480      	push	{r7}
 8000842:	b089      	sub	sp, #36	; 0x24
 8000844:	af00      	add	r7, sp, #0
 8000846:	60f8      	str	r0, [r7, #12]
 8000848:	60b9      	str	r1, [r7, #8]
 800084a:	607a      	str	r2, [r7, #4]
  bool ret = true;
 800084c:	2301      	movs	r3, #1
 800084e:	76fb      	strb	r3, [r7, #27]
  uint8_t *p_byte = (uint8_t *)addr;
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	617b      	str	r3, [r7, #20]


  for (int i=0; i<length; i++)
 8000854:	2300      	movs	r3, #0
 8000856:	61fb      	str	r3, [r7, #28]
 8000858:	e00a      	b.n	8000870 <flashRead+0x30>
  {
    p_data[i] = p_byte[i];
 800085a:	69fb      	ldr	r3, [r7, #28]
 800085c:	697a      	ldr	r2, [r7, #20]
 800085e:	441a      	add	r2, r3
 8000860:	69fb      	ldr	r3, [r7, #28]
 8000862:	68b9      	ldr	r1, [r7, #8]
 8000864:	440b      	add	r3, r1
 8000866:	7812      	ldrb	r2, [r2, #0]
 8000868:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<length; i++)
 800086a:	69fb      	ldr	r3, [r7, #28]
 800086c:	3301      	adds	r3, #1
 800086e:	61fb      	str	r3, [r7, #28]
 8000870:	69fb      	ldr	r3, [r7, #28]
 8000872:	687a      	ldr	r2, [r7, #4]
 8000874:	429a      	cmp	r2, r3
 8000876:	d8f0      	bhi.n	800085a <flashRead+0x1a>
  }

  return ret;
 8000878:	7efb      	ldrb	r3, [r7, #27]
}
 800087a:	4618      	mov	r0, r3
 800087c:	3724      	adds	r7, #36	; 0x24
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
	...

08000888 <flashInSector>:

bool flashInSector(uint16_t sector_num, uint32_t addr, uint32_t length)
{
 8000888:	b480      	push	{r7}
 800088a:	b08b      	sub	sp, #44	; 0x2c
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	60b9      	str	r1, [r7, #8]
 8000892:	607a      	str	r2, [r7, #4]
 8000894:	81fb      	strh	r3, [r7, #14]
  bool ret = false;
 8000896:	2300      	movs	r3, #0
 8000898:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t sector_end;
  uint32_t flash_start;
  uint32_t flash_end;


  sector_start = flash_tbl[sector_num].addr;
 800089c:	89fb      	ldrh	r3, [r7, #14]
 800089e:	4a25      	ldr	r2, [pc, #148]	; (8000934 <flashInSector+0xac>)
 80008a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80008a4:	623b      	str	r3, [r7, #32]
  sector_end   = flash_tbl[sector_num].addr + flash_tbl[sector_num].length - 1;
 80008a6:	89fb      	ldrh	r3, [r7, #14]
 80008a8:	4a22      	ldr	r2, [pc, #136]	; (8000934 <flashInSector+0xac>)
 80008aa:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80008ae:	89fb      	ldrh	r3, [r7, #14]
 80008b0:	4920      	ldr	r1, [pc, #128]	; (8000934 <flashInSector+0xac>)
 80008b2:	00db      	lsls	r3, r3, #3
 80008b4:	440b      	add	r3, r1
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	4413      	add	r3, r2
 80008ba:	3b01      	subs	r3, #1
 80008bc:	61fb      	str	r3, [r7, #28]
  flash_start  = addr;
 80008be:	68bb      	ldr	r3, [r7, #8]
 80008c0:	61bb      	str	r3, [r7, #24]
  flash_end    = addr + length - 1;
 80008c2:	68ba      	ldr	r2, [r7, #8]
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	4413      	add	r3, r2
 80008c8:	3b01      	subs	r3, #1
 80008ca:	617b      	str	r3, [r7, #20]


  if (sector_start >= flash_start && sector_start <= flash_end)
 80008cc:	6a3a      	ldr	r2, [r7, #32]
 80008ce:	69bb      	ldr	r3, [r7, #24]
 80008d0:	429a      	cmp	r2, r3
 80008d2:	d306      	bcc.n	80008e2 <flashInSector+0x5a>
 80008d4:	6a3a      	ldr	r2, [r7, #32]
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	429a      	cmp	r2, r3
 80008da:	d802      	bhi.n	80008e2 <flashInSector+0x5a>
  {
    ret = true;
 80008dc:	2301      	movs	r3, #1
 80008de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (sector_end >= flash_start && sector_end <= flash_end)
 80008e2:	69fa      	ldr	r2, [r7, #28]
 80008e4:	69bb      	ldr	r3, [r7, #24]
 80008e6:	429a      	cmp	r2, r3
 80008e8:	d306      	bcc.n	80008f8 <flashInSector+0x70>
 80008ea:	69fa      	ldr	r2, [r7, #28]
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	429a      	cmp	r2, r3
 80008f0:	d802      	bhi.n	80008f8 <flashInSector+0x70>
  {
    ret = true;
 80008f2:	2301      	movs	r3, #1
 80008f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (flash_start >= sector_start && flash_start <= sector_end)
 80008f8:	69ba      	ldr	r2, [r7, #24]
 80008fa:	6a3b      	ldr	r3, [r7, #32]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d306      	bcc.n	800090e <flashInSector+0x86>
 8000900:	69ba      	ldr	r2, [r7, #24]
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	429a      	cmp	r2, r3
 8000906:	d802      	bhi.n	800090e <flashInSector+0x86>
  {
    ret = true;
 8000908:	2301      	movs	r3, #1
 800090a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (flash_end >= sector_start && flash_end <= sector_end)
 800090e:	697a      	ldr	r2, [r7, #20]
 8000910:	6a3b      	ldr	r3, [r7, #32]
 8000912:	429a      	cmp	r2, r3
 8000914:	d306      	bcc.n	8000924 <flashInSector+0x9c>
 8000916:	697a      	ldr	r2, [r7, #20]
 8000918:	69fb      	ldr	r3, [r7, #28]
 800091a:	429a      	cmp	r2, r3
 800091c:	d802      	bhi.n	8000924 <flashInSector+0x9c>
  {
    ret = true;
 800091e:	2301      	movs	r3, #1
 8000920:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return ret;
 8000924:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000928:	4618      	mov	r0, r3
 800092a:	372c      	adds	r7, #44	; 0x2c
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr
 8000934:	2000008c 	.word	0x2000008c

08000938 <__io_putchar>:


UART_HandleTypeDef huart3;

int __io_putchar(int ch)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  uartWrite(2, (uint8_t *)&ch, 1);
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	2201      	movs	r2, #1
 8000944:	4619      	mov	r1, r3
 8000946:	2002      	movs	r0, #2
 8000948:	f000 fb52 	bl	8000ff0 <uartWrite>
  return 1;
 800094c:	2301      	movs	r3, #1
}
 800094e:	4618      	mov	r0, r3
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
	...

08000958 <MX_GPIO_Init>:
*/

void SystemClock_config(void);

void MX_GPIO_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b08c      	sub	sp, #48	; 0x30
 800095c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]
 800096a:	60da      	str	r2, [r3, #12]
 800096c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800096e:	4b46      	ldr	r3, [pc, #280]	; (8000a88 <MX_GPIO_Init+0x130>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a45      	ldr	r2, [pc, #276]	; (8000a88 <MX_GPIO_Init+0x130>)
 8000974:	f043 0304 	orr.w	r3, r3, #4
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b43      	ldr	r3, [pc, #268]	; (8000a88 <MX_GPIO_Init+0x130>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0304 	and.w	r3, r3, #4
 8000982:	61bb      	str	r3, [r7, #24]
 8000984:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000986:	4b40      	ldr	r3, [pc, #256]	; (8000a88 <MX_GPIO_Init+0x130>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	4a3f      	ldr	r2, [pc, #252]	; (8000a88 <MX_GPIO_Init+0x130>)
 800098c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000990:	6313      	str	r3, [r2, #48]	; 0x30
 8000992:	4b3d      	ldr	r3, [pc, #244]	; (8000a88 <MX_GPIO_Init+0x130>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800099a:	617b      	str	r3, [r7, #20]
 800099c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800099e:	4b3a      	ldr	r3, [pc, #232]	; (8000a88 <MX_GPIO_Init+0x130>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	4a39      	ldr	r2, [pc, #228]	; (8000a88 <MX_GPIO_Init+0x130>)
 80009a4:	f043 0301 	orr.w	r3, r3, #1
 80009a8:	6313      	str	r3, [r2, #48]	; 0x30
 80009aa:	4b37      	ldr	r3, [pc, #220]	; (8000a88 <MX_GPIO_Init+0x130>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	613b      	str	r3, [r7, #16]
 80009b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b6:	4b34      	ldr	r3, [pc, #208]	; (8000a88 <MX_GPIO_Init+0x130>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a33      	ldr	r2, [pc, #204]	; (8000a88 <MX_GPIO_Init+0x130>)
 80009bc:	f043 0302 	orr.w	r3, r3, #2
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
 80009c2:	4b31      	ldr	r3, [pc, #196]	; (8000a88 <MX_GPIO_Init+0x130>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	f003 0302 	and.w	r3, r3, #2
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ce:	4b2e      	ldr	r3, [pc, #184]	; (8000a88 <MX_GPIO_Init+0x130>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a2d      	ldr	r2, [pc, #180]	; (8000a88 <MX_GPIO_Init+0x130>)
 80009d4:	f043 0308 	orr.w	r3, r3, #8
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b2b      	ldr	r3, [pc, #172]	; (8000a88 <MX_GPIO_Init+0x130>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0308 	and.w	r3, r3, #8
 80009e2:	60bb      	str	r3, [r7, #8]
 80009e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009e6:	4b28      	ldr	r3, [pc, #160]	; (8000a88 <MX_GPIO_Init+0x130>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a27      	ldr	r2, [pc, #156]	; (8000a88 <MX_GPIO_Init+0x130>)
 80009ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b25      	ldr	r3, [pc, #148]	; (8000a88 <MX_GPIO_Init+0x130>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009fe:	2200      	movs	r2, #0
 8000a00:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a04:	4821      	ldr	r0, [pc, #132]	; (8000a8c <MX_GPIO_Init+0x134>)
 8000a06:	f001 ffd9 	bl	80029bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2140      	movs	r1, #64	; 0x40
 8000a0e:	4820      	ldr	r0, [pc, #128]	; (8000a90 <MX_GPIO_Init+0x138>)
 8000a10:	f001 ffd4 	bl	80029bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a1a:	4b1e      	ldr	r3, [pc, #120]	; (8000a94 <MX_GPIO_Init+0x13c>)
 8000a1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a22:	f107 031c 	add.w	r3, r7, #28
 8000a26:	4619      	mov	r1, r3
 8000a28:	481b      	ldr	r0, [pc, #108]	; (8000a98 <MX_GPIO_Init+0x140>)
 8000a2a:	f001 fd0f 	bl	800244c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a2e:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a34:	2301      	movs	r3, #1
 8000a36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a40:	f107 031c 	add.w	r3, r7, #28
 8000a44:	4619      	mov	r1, r3
 8000a46:	4811      	ldr	r0, [pc, #68]	; (8000a8c <MX_GPIO_Init+0x134>)
 8000a48:	f001 fd00 	bl	800244c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a4c:	2340      	movs	r3, #64	; 0x40
 8000a4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a50:	2301      	movs	r3, #1
 8000a52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a5c:	f107 031c 	add.w	r3, r7, #28
 8000a60:	4619      	mov	r1, r3
 8000a62:	480b      	ldr	r0, [pc, #44]	; (8000a90 <MX_GPIO_Init+0x138>)
 8000a64:	f001 fcf2 	bl	800244c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a68:	2380      	movs	r3, #128	; 0x80
 8000a6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a74:	f107 031c 	add.w	r3, r7, #28
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4805      	ldr	r0, [pc, #20]	; (8000a90 <MX_GPIO_Init+0x138>)
 8000a7c:	f001 fce6 	bl	800244c <HAL_GPIO_Init>
}
 8000a80:	bf00      	nop
 8000a82:	3730      	adds	r7, #48	; 0x30
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40023800 	.word	0x40023800
 8000a8c:	40020400 	.word	0x40020400
 8000a90:	40021800 	.word	0x40021800
 8000a94:	10110000 	.word	0x10110000
 8000a98:	40020800 	.word	0x40020800

08000a9c <SystemClock_Config>:

void SystemClock_Config(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b0b8      	sub	sp, #224	; 0xe0
 8000aa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aa2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000aa6:	2234      	movs	r2, #52	; 0x34
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f004 fa16 	bl	8004edc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ab0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ac0:	f107 0308 	add.w	r3, r7, #8
 8000ac4:	2290      	movs	r2, #144	; 0x90
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f004 fa07 	bl	8004edc <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000ace:	f001 ffa9 	bl	8002a24 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad2:	4b39      	ldr	r3, [pc, #228]	; (8000bb8 <SystemClock_Config+0x11c>)
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad6:	4a38      	ldr	r2, [pc, #224]	; (8000bb8 <SystemClock_Config+0x11c>)
 8000ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000adc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ade:	4b36      	ldr	r3, [pc, #216]	; (8000bb8 <SystemClock_Config+0x11c>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae6:	607b      	str	r3, [r7, #4]
 8000ae8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000aea:	4b34      	ldr	r3, [pc, #208]	; (8000bbc <SystemClock_Config+0x120>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a33      	ldr	r2, [pc, #204]	; (8000bbc <SystemClock_Config+0x120>)
 8000af0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000af4:	6013      	str	r3, [r2, #0]
 8000af6:	4b31      	ldr	r3, [pc, #196]	; (8000bbc <SystemClock_Config+0x120>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000afe:	603b      	str	r3, [r7, #0]
 8000b00:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b02:	2301      	movs	r3, #1
 8000b04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b08:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b10:	2302      	movs	r3, #2
 8000b12:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b16:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b1a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b1e:	2304      	movs	r3, #4
 8000b20:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000b24:	23d8      	movs	r3, #216	; 0xd8
 8000b26:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000b30:	2309      	movs	r3, #9
 8000b32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b36:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f001 ffd2 	bl	8002ae4 <HAL_RCC_OscConfig>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000b46:	f000 f842 	bl	8000bce <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b4a:	f001 ff7b 	bl	8002a44 <HAL_PWREx_EnableOverDrive>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000b54:	f000 f83b 	bl	8000bce <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b58:	230f      	movs	r3, #15
 8000b5a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b64:	2300      	movs	r3, #0
 8000b66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b6a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000b7a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000b7e:	2107      	movs	r1, #7
 8000b80:	4618      	mov	r0, r3
 8000b82:	f002 fa5d 	bl	8003040 <HAL_RCC_ClockConfig>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000b8c:	f000 f81f 	bl	8000bce <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b94:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b96:	2300      	movs	r3, #0
 8000b98:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b9a:	f107 0308 	add.w	r3, r7, #8
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f002 fc50 	bl	8003444 <HAL_RCCEx_PeriphCLKConfig>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <SystemClock_Config+0x112>
  {
    Error_Handler();
 8000baa:	f000 f810 	bl	8000bce <Error_Handler>
  }
}
 8000bae:	bf00      	nop
 8000bb0:	37e0      	adds	r7, #224	; 0xe0
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	40007000 	.word	0x40007000

08000bc0 <millis>:
void delay(uint32_t ms)
{
	HAL_Delay(ms);
}
uint32_t millis(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8000bc4:	f000 fbce 	bl	8001364 <HAL_GetTick>
 8000bc8:	4603      	mov	r3, r0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <Error_Handler>:
void Error_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd2:	b672      	cpsid	i
}
 8000bd4:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
}
 8000bd6:	bf00      	nop
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <main>:

int main(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08c      	sub	sp, #48	; 0x30
 8000be4:	af00      	add	r7, sp, #0
	uint32_t pre_time;


	HAL_Init();
 8000be6:	f000 fb6b 	bl	80012c0 <HAL_Init>
	SystemClock_Config();
 8000bea:	f7ff ff57 	bl	8000a9c <SystemClock_Config>

	//SystemInit();
	MX_GPIO_Init();
 8000bee:	f7ff feb3 	bl	8000958 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8000bf2:	f000 fa25 	bl	8001040 <MX_USART3_UART_Init>
	flashInit();
 8000bf6:	f7ff fd63 	bl	80006c0 <flashInit>
/*
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif ...? 확인 필요.
*/
	printf("start MCU\r\n");
 8000bfa:	4842      	ldr	r0, [pc, #264]	; (8000d04 <main+0x124>)
 8000bfc:	f004 f9fc 	bl	8004ff8 <puts>
	 pre_time = millis();
 8000c00:	f7ff ffde 	bl	8000bc0 <millis>
 8000c04:	62f8      	str	r0, [r7, #44]	; 0x2c

	  while(1)
	  {
		  if(millis()-pre_time >= 500)
 8000c06:	f7ff ffdb 	bl	8000bc0 <millis>
 8000c0a:	4602      	mov	r2, r0
 8000c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c0e:	1ad3      	subs	r3, r2, r3
 8000c10:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000c14:	d306      	bcc.n	8000c24 <main+0x44>
		  {
			  pre_time = millis();
 8000c16:	f7ff ffd3 	bl	8000bc0 <millis>
 8000c1a:	62f8      	str	r0, [r7, #44]	; 0x2c
			  HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 8000c1c:	2101      	movs	r1, #1
 8000c1e:	483a      	ldr	r0, [pc, #232]	; (8000d08 <main+0x128>)
 8000c20:	f001 fee5 	bl	80029ee <HAL_GPIO_TogglePin>
		  }

		  if(uartAvailable(2)>0)
 8000c24:	2002      	movs	r0, #2
 8000c26:	f000 f995 	bl	8000f54 <uartAvailable>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d0ea      	beq.n	8000c06 <main+0x26>
		  {
			  uint8_t rx_data;

			  rx_data = uartRead(2);
 8000c30:	2002      	movs	r0, #2
 8000c32:	f000 f9bd 	bl	8000fb0 <uartRead>
 8000c36:	4603      	mov	r3, r0
 8000c38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			  printf("uart Rx : %c %x \r\n",rx_data, rx_data);
 8000c3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000c40:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000c44:	4619      	mov	r1, r3
 8000c46:	4831      	ldr	r0, [pc, #196]	; (8000d0c <main+0x12c>)
 8000c48:	f004 f950 	bl	8004eec <iprintf>

			  if(rx_data == '1')
 8000c4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000c50:	2b31      	cmp	r3, #49	; 0x31
 8000c52:	d11c      	bne.n	8000c8e <main+0xae>
			  {
				  uint8_t buf[32];

				  printf("Read....\r\n");
 8000c54:	482e      	ldr	r0, [pc, #184]	; (8000d10 <main+0x130>)
 8000c56:	f004 f9cf 	bl	8004ff8 <puts>
				  flashRead(0x08000000+(60*1024),buf,32);
 8000c5a:	463b      	mov	r3, r7
 8000c5c:	2220      	movs	r2, #32
 8000c5e:	4619      	mov	r1, r3
 8000c60:	482c      	ldr	r0, [pc, #176]	; (8000d14 <main+0x134>)
 8000c62:	f7ff fded 	bl	8000840 <flashRead>
				  for(int i=0; i<32; i++)
 8000c66:	2300      	movs	r3, #0
 8000c68:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c6a:	e00d      	b.n	8000c88 <main+0xa8>
				  {
					 printf("0x0%X : 0x%X\r\n",0x08000000+(60*1024)+i,buf[i]);
 8000c6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c6e:	4b29      	ldr	r3, [pc, #164]	; (8000d14 <main+0x134>)
 8000c70:	4413      	add	r3, r2
 8000c72:	4639      	mov	r1, r7
 8000c74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c76:	440a      	add	r2, r1
 8000c78:	7812      	ldrb	r2, [r2, #0]
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4826      	ldr	r0, [pc, #152]	; (8000d18 <main+0x138>)
 8000c7e:	f004 f935 	bl	8004eec <iprintf>
				  for(int i=0; i<32; i++)
 8000c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c84:	3301      	adds	r3, #1
 8000c86:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c8a:	2b1f      	cmp	r3, #31
 8000c8c:	ddee      	ble.n	8000c6c <main+0x8c>
				  }
			  }

			  if(rx_data == '2')
 8000c8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000c92:	2b32      	cmp	r3, #50	; 0x32
 8000c94:	d110      	bne.n	8000cb8 <main+0xd8>
			  {
				  printf("Erase.......");
 8000c96:	4821      	ldr	r0, [pc, #132]	; (8000d1c <main+0x13c>)
 8000c98:	f004 f928 	bl	8004eec <iprintf>

				  if(flashErase(0x08000000+(60*1024),32) == true){
 8000c9c:	2120      	movs	r1, #32
 8000c9e:	481d      	ldr	r0, [pc, #116]	; (8000d14 <main+0x134>)
 8000ca0:	f7ff fd34 	bl	800070c <flashErase>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d103      	bne.n	8000cb2 <main+0xd2>
					  printf("Ok!!\r\n");
 8000caa:	481d      	ldr	r0, [pc, #116]	; (8000d20 <main+0x140>)
 8000cac:	f004 f9a4 	bl	8004ff8 <puts>
 8000cb0:	e002      	b.n	8000cb8 <main+0xd8>
				  }
				  else
				  {
					  printf("Fail\r\n");
 8000cb2:	481c      	ldr	r0, [pc, #112]	; (8000d24 <main+0x144>)
 8000cb4:	f004 f9a0 	bl	8004ff8 <puts>
				  }
			   }

			  if(rx_data == '3')
 8000cb8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000cbc:	2b33      	cmp	r3, #51	; 0x33
 8000cbe:	d1a2      	bne.n	8000c06 <main+0x26>
			  {
				  uint8_t buf[32];
				  for(int i=0; i<32; i++)
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	627b      	str	r3, [r7, #36]	; 0x24
 8000cc4:	e009      	b.n	8000cda <main+0xfa>
				  {
					 buf[i]=i;
 8000cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc8:	b2d9      	uxtb	r1, r3
 8000cca:	463a      	mov	r2, r7
 8000ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cce:	4413      	add	r3, r2
 8000cd0:	460a      	mov	r2, r1
 8000cd2:	701a      	strb	r2, [r3, #0]
				  for(int i=0; i<32; i++)
 8000cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	627b      	str	r3, [r7, #36]	; 0x24
 8000cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cdc:	2b1f      	cmp	r3, #31
 8000cde:	ddf2      	ble.n	8000cc6 <main+0xe6>
				  }
				  printf("Write...\r\n");
 8000ce0:	4811      	ldr	r0, [pc, #68]	; (8000d28 <main+0x148>)
 8000ce2:	f004 f989 	bl	8004ff8 <puts>
				  if(flashWrite(0x08000000+(60*1024),32) == true){
 8000ce6:	2120      	movs	r1, #32
 8000ce8:	480a      	ldr	r0, [pc, #40]	; (8000d14 <main+0x134>)
 8000cea:	f7ff fd65 	bl	80007b8 <flashWrite>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d103      	bne.n	8000cfc <main+0x11c>
					  printf("Ok!!\r\n");
 8000cf4:	480a      	ldr	r0, [pc, #40]	; (8000d20 <main+0x140>)
 8000cf6:	f004 f97f 	bl	8004ff8 <puts>
 8000cfa:	e784      	b.n	8000c06 <main+0x26>
				  }
				  else
				  {
					  printf("Fail\r\n");
 8000cfc:	4809      	ldr	r0, [pc, #36]	; (8000d24 <main+0x144>)
 8000cfe:	f004 f97b 	bl	8004ff8 <puts>
		  if(millis()-pre_time >= 500)
 8000d02:	e780      	b.n	8000c06 <main+0x26>
 8000d04:	08005e9c 	.word	0x08005e9c
 8000d08:	40020400 	.word	0x40020400
 8000d0c:	08005ea8 	.word	0x08005ea8
 8000d10:	08005ebc 	.word	0x08005ebc
 8000d14:	0800f000 	.word	0x0800f000
 8000d18:	08005ec8 	.word	0x08005ec8
 8000d1c:	08005ed8 	.word	0x08005ed8
 8000d20:	08005ee8 	.word	0x08005ee8
 8000d24:	08005ef0 	.word	0x08005ef0
 8000d28:	08005ef8 	.word	0x08005ef8

08000d2c <qbufferCreate>:
{

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b087      	sub	sp, #28
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	75fb      	strb	r3, [r7, #23]

  p_node->in    = 0;
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
  p_node->out   = 0;
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	2200      	movs	r2, #0
 8000d46:	605a      	str	r2, [r3, #4]
  p_node->len   = length;
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	687a      	ldr	r2, [r7, #4]
 8000d4c:	609a      	str	r2, [r3, #8]
  p_node->p_buf = p_buf;
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	68ba      	ldr	r2, [r7, #8]
 8000d52:	60da      	str	r2, [r3, #12]

  return ret;
 8000d54:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	371c      	adds	r7, #28
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <qbufferRead>:

  return ret;
}

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8000d62:	b480      	push	{r7}
 8000d64:	b087      	sub	sp, #28
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	60f8      	str	r0, [r7, #12]
 8000d6a:	60b9      	str	r1, [r7, #8]
 8000d6c:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	75fb      	strb	r3, [r7, #23]

  for (int i=0; i<length; i++)
 8000d72:	2300      	movs	r3, #0
 8000d74:	613b      	str	r3, [r7, #16]
 8000d76:	e026      	b.n	8000dc6 <qbufferRead+0x64>
  {
    if (p_node->p_buf != NULL)
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d009      	beq.n	8000d94 <qbufferRead+0x32>
    {
      p_data[i] = p_node->p_buf[p_node->out];
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	68da      	ldr	r2, [r3, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	441a      	add	r2, r3
 8000d8a:	693b      	ldr	r3, [r7, #16]
 8000d8c:	68b9      	ldr	r1, [r7, #8]
 8000d8e:	440b      	add	r3, r1
 8000d90:	7812      	ldrb	r2, [r2, #0]
 8000d92:	701a      	strb	r2, [r3, #0]
    }

    if (p_node->out != p_node->in)
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	685a      	ldr	r2, [r3, #4]
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d00c      	beq.n	8000dba <qbufferRead+0x58>
    {
      p_node->out = (p_node->out + 1) % p_node->len;
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	3301      	adds	r3, #1
 8000da6:	68fa      	ldr	r2, [r7, #12]
 8000da8:	6892      	ldr	r2, [r2, #8]
 8000daa:	fbb3 f1f2 	udiv	r1, r3, r2
 8000dae:	fb02 f201 	mul.w	r2, r2, r1
 8000db2:	1a9a      	subs	r2, r3, r2
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	e002      	b.n	8000dc0 <qbufferRead+0x5e>
    }
    else
    {
      ret = false;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	75fb      	strb	r3, [r7, #23]
      break;
 8000dbe:	e006      	b.n	8000dce <qbufferRead+0x6c>
  for (int i=0; i<length; i++)
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	613b      	str	r3, [r7, #16]
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	687a      	ldr	r2, [r7, #4]
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d8d4      	bhi.n	8000d78 <qbufferRead+0x16>
    }
  }

  return ret;
 8000dce:	7dfb      	ldrb	r3, [r7, #23]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	371c      	adds	r7, #28
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <qbufferAvailable>:

uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  uint32_t ret;

  ret = (p_node->in - p_node->out) % p_node->len;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	6892      	ldr	r2, [r2, #8]
 8000df2:	fbb3 f1f2 	udiv	r1, r3, r2
 8000df6:	fb02 f201 	mul.w	r2, r2, r1
 8000dfa:	1a9b      	subs	r3, r3, r2
 8000dfc:	60fb      	str	r3, [r7, #12]

  return ret;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3714      	adds	r7, #20
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b086      	sub	sp, #24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e18:	2300      	movs	r3, #0
 8000e1a:	617b      	str	r3, [r7, #20]
 8000e1c:	e00a      	b.n	8000e34 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e1e:	f3af 8000 	nop.w
 8000e22:	4601      	mov	r1, r0
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	1c5a      	adds	r2, r3, #1
 8000e28:	60ba      	str	r2, [r7, #8]
 8000e2a:	b2ca      	uxtb	r2, r1
 8000e2c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	3301      	adds	r3, #1
 8000e32:	617b      	str	r3, [r7, #20]
 8000e34:	697a      	ldr	r2, [r7, #20]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	dbf0      	blt.n	8000e1e <_read+0x12>
	}

return len;
 8000e3c:	687b      	ldr	r3, [r7, #4]
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3718      	adds	r7, #24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b086      	sub	sp, #24
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	60f8      	str	r0, [r7, #12]
 8000e4e:	60b9      	str	r1, [r7, #8]
 8000e50:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e52:	2300      	movs	r3, #0
 8000e54:	617b      	str	r3, [r7, #20]
 8000e56:	e009      	b.n	8000e6c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	1c5a      	adds	r2, r3, #1
 8000e5c:	60ba      	str	r2, [r7, #8]
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff fd69 	bl	8000938 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	617b      	str	r3, [r7, #20]
 8000e6c:	697a      	ldr	r2, [r7, #20]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	dbf1      	blt.n	8000e58 <_write+0x12>
	}
	return len;
 8000e74:	687b      	ldr	r3, [r7, #4]
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3718      	adds	r7, #24
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <_close>:

int _close(int file)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	b083      	sub	sp, #12
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
	return -1;
 8000e86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr

08000e96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e96:	b480      	push	{r7}
 8000e98:	b083      	sub	sp, #12
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
 8000e9e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ea6:	605a      	str	r2, [r3, #4]
	return 0;
 8000ea8:	2300      	movs	r3, #0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr

08000eb6 <_isatty>:

int _isatty(int file)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	b083      	sub	sp, #12
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
	return 1;
 8000ebe:	2301      	movs	r3, #1
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
	return 0;
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3714      	adds	r7, #20
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
	...

08000ee8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b086      	sub	sp, #24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ef0:	4a14      	ldr	r2, [pc, #80]	; (8000f44 <_sbrk+0x5c>)
 8000ef2:	4b15      	ldr	r3, [pc, #84]	; (8000f48 <_sbrk+0x60>)
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000efc:	4b13      	ldr	r3, [pc, #76]	; (8000f4c <_sbrk+0x64>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d102      	bne.n	8000f0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f04:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <_sbrk+0x64>)
 8000f06:	4a12      	ldr	r2, [pc, #72]	; (8000f50 <_sbrk+0x68>)
 8000f08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f0a:	4b10      	ldr	r3, [pc, #64]	; (8000f4c <_sbrk+0x64>)
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4413      	add	r3, r2
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d207      	bcs.n	8000f28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f18:	f003 ffb6 	bl	8004e88 <__errno>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	220c      	movs	r2, #12
 8000f20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f22:	f04f 33ff 	mov.w	r3, #4294967295
 8000f26:	e009      	b.n	8000f3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f28:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <_sbrk+0x64>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f2e:	4b07      	ldr	r3, [pc, #28]	; (8000f4c <_sbrk+0x64>)
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4413      	add	r3, r2
 8000f36:	4a05      	ldr	r2, [pc, #20]	; (8000f4c <_sbrk+0x64>)
 8000f38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3718      	adds	r7, #24
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20080000 	.word	0x20080000
 8000f48:	00000400 	.word	0x00000400
 8000f4c:	200000cc 	.word	0x200000cc
 8000f50:	20000330 	.word	0x20000330

08000f54 <uartAvailable>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

uint32_t uartAvailable(uint8_t ch)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60fb      	str	r3, [r7, #12]

  switch(ch)
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d019      	beq.n	8000f9c <uartAvailable+0x48>
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d118      	bne.n	8000f9e <uartAvailable+0x4a>
    case 1:
 //     ret = cdcAvailable();
      break;

    case 2:
     qbuffer[ch].in = (qbuffer[ch].len - hdma_usart3_rx.Instance->NDTR);
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	4a0e      	ldr	r2, [pc, #56]	; (8000fa8 <uartAvailable+0x54>)
 8000f70:	011b      	lsls	r3, r3, #4
 8000f72:	4413      	add	r3, r2
 8000f74:	3308      	adds	r3, #8
 8000f76:	6819      	ldr	r1, [r3, #0]
 8000f78:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <uartAvailable+0x58>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	685a      	ldr	r2, [r3, #4]
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	1a8a      	subs	r2, r1, r2
 8000f82:	4909      	ldr	r1, [pc, #36]	; (8000fa8 <uartAvailable+0x54>)
 8000f84:	011b      	lsls	r3, r3, #4
 8000f86:	440b      	add	r3, r1
 8000f88:	601a      	str	r2, [r3, #0]
     ret = qbufferAvailable(&qbuffer[ch]); //인터럽트 사용시
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	011b      	lsls	r3, r3, #4
 8000f8e:	4a06      	ldr	r2, [pc, #24]	; (8000fa8 <uartAvailable+0x54>)
 8000f90:	4413      	add	r3, r2
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff ff22 	bl	8000ddc <qbufferAvailable>
 8000f98:	60f8      	str	r0, [r7, #12]
       break;
 8000f9a:	e000      	b.n	8000f9e <uartAvailable+0x4a>
      break;
 8000f9c:	bf00      	nop
  }

  return ret;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3710      	adds	r7, #16
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	200000d4 	.word	0x200000d4
 8000fac:	200002a0 	.word	0x200002a0

08000fb0 <uartRead>:

uint8_t uartRead(uint8_t ch)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d00c      	beq.n	8000fde <uartRead+0x2e>
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	d10b      	bne.n	8000fe0 <uartRead+0x30>
    case 1:
  //    ret = cdcRead();
      break;

    case 2:
      qbufferRead(&qbuffer[ch], &ret, 1);
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	011b      	lsls	r3, r3, #4
 8000fcc:	4a07      	ldr	r2, [pc, #28]	; (8000fec <uartRead+0x3c>)
 8000fce:	4413      	add	r3, r2
 8000fd0:	f107 010f 	add.w	r1, r7, #15
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff fec3 	bl	8000d62 <qbufferRead>
      break;
 8000fdc:	e000      	b.n	8000fe0 <uartRead+0x30>
      break;
 8000fde:	bf00      	nop
  }
  return ret;
 8000fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	200000d4 	.word	0x200000d4

08000ff0 <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
 8000ffc:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  switch(ch)
 8001002:	7bfb      	ldrb	r3, [r7, #15]
 8001004:	2b01      	cmp	r3, #1
 8001006:	d010      	beq.n	800102a <uartWrite+0x3a>
 8001008:	2b02      	cmp	r3, #2
 800100a:	d111      	bne.n	8001030 <uartWrite+0x40>
    case 1:
    //  ret = cdcWrite(p_data, length);
      break;

    case 2:
      status = HAL_UART_Transmit(&huart3, p_data, length, 100);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	b29a      	uxth	r2, r3
 8001010:	2364      	movs	r3, #100	; 0x64
 8001012:	68b9      	ldr	r1, [r7, #8]
 8001014:	4809      	ldr	r0, [pc, #36]	; (800103c <uartWrite+0x4c>)
 8001016:	f002 fec4 	bl	8003da2 <HAL_UART_Transmit>
 800101a:	4603      	mov	r3, r0
 800101c:	74fb      	strb	r3, [r7, #19]
      if (status == HAL_OK)
 800101e:	7cfb      	ldrb	r3, [r7, #19]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d104      	bne.n	800102e <uartWrite+0x3e>
      {
        ret = length;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	617b      	str	r3, [r7, #20]
      }

      break;
 8001028:	e001      	b.n	800102e <uartWrite+0x3e>
      break;
 800102a:	bf00      	nop
 800102c:	e000      	b.n	8001030 <uartWrite+0x40>
      break;
 800102e:	bf00      	nop
  }

  return ret;
 8001030:	697b      	ldr	r3, [r7, #20]
}
 8001032:	4618      	mov	r0, r3
 8001034:	3718      	adds	r7, #24
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	2000021c 	.word	0x2000021c

08001040 <MX_USART3_UART_Init>:
void MX_USART3_UART_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
  //bool ret = false;

  huart3.Instance = USART3;
 8001046:	4b32      	ldr	r3, [pc, #200]	; (8001110 <MX_USART3_UART_Init+0xd0>)
 8001048:	4a32      	ldr	r2, [pc, #200]	; (8001114 <MX_USART3_UART_Init+0xd4>)
 800104a:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800104c:	4b30      	ldr	r3, [pc, #192]	; (8001110 <MX_USART3_UART_Init+0xd0>)
 800104e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001052:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001054:	4b2e      	ldr	r3, [pc, #184]	; (8001110 <MX_USART3_UART_Init+0xd0>)
 8001056:	2200      	movs	r2, #0
 8001058:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800105a:	4b2d      	ldr	r3, [pc, #180]	; (8001110 <MX_USART3_UART_Init+0xd0>)
 800105c:	2200      	movs	r2, #0
 800105e:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001060:	4b2b      	ldr	r3, [pc, #172]	; (8001110 <MX_USART3_UART_Init+0xd0>)
 8001062:	2200      	movs	r2, #0
 8001064:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001066:	4b2a      	ldr	r3, [pc, #168]	; (8001110 <MX_USART3_UART_Init+0xd0>)
 8001068:	220c      	movs	r2, #12
 800106a:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800106c:	4b28      	ldr	r3, [pc, #160]	; (8001110 <MX_USART3_UART_Init+0xd0>)
 800106e:	2200      	movs	r2, #0
 8001070:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001072:	4b27      	ldr	r3, [pc, #156]	; (8001110 <MX_USART3_UART_Init+0xd0>)
 8001074:	2200      	movs	r2, #0
 8001076:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001078:	4b25      	ldr	r3, [pc, #148]	; (8001110 <MX_USART3_UART_Init+0xd0>)
 800107a:	2200      	movs	r2, #0
 800107c:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800107e:	4b24      	ldr	r3, [pc, #144]	; (8001110 <MX_USART3_UART_Init+0xd0>)
 8001080:	2200      	movs	r2, #0
 8001082:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_UART_DeInit(&huart3);
 8001084:	4822      	ldr	r0, [pc, #136]	; (8001110 <MX_USART3_UART_Init+0xd0>)
 8001086:	f002 fe53 	bl	8003d30 <HAL_UART_DeInit>

  qbufferCreate(&qbuffer[2], &rx_buf[0], 256);
 800108a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800108e:	4922      	ldr	r1, [pc, #136]	; (8001118 <MX_USART3_UART_Init+0xd8>)
 8001090:	4822      	ldr	r0, [pc, #136]	; (800111c <MX_USART3_UART_Init+0xdc>)
 8001092:	f7ff fe4b 	bl	8000d2c <qbufferCreate>

   __HAL_RCC_DMA1_CLK_ENABLE();
 8001096:	4b22      	ldr	r3, [pc, #136]	; (8001120 <MX_USART3_UART_Init+0xe0>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	4a21      	ldr	r2, [pc, #132]	; (8001120 <MX_USART3_UART_Init+0xe0>)
 800109c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010a0:	6313      	str	r3, [r2, #48]	; 0x30
 80010a2:	4b1f      	ldr	r3, [pc, #124]	; (8001120 <MX_USART3_UART_Init+0xe0>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]
   HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2100      	movs	r1, #0
 80010b2:	2027      	movs	r0, #39	; 0x27
 80010b4:	f000 fa61 	bl	800157a <HAL_NVIC_SetPriority>
   HAL_NVIC_EnableIRQ(USART3_IRQn);
 80010b8:	2027      	movs	r0, #39	; 0x27
 80010ba:	f000 fa7a 	bl	80015b2 <HAL_NVIC_EnableIRQ>

  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010be:	4814      	ldr	r0, [pc, #80]	; (8001110 <MX_USART3_UART_Init+0xd0>)
 80010c0:	f002 fde8 	bl	8003c94 <HAL_UART_Init>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d002      	beq.n	80010d0 <MX_USART3_UART_Init+0x90>
  {
    Error_Handler();
 80010ca:	f7ff fd80 	bl	8000bce <Error_Handler>
	  }
		qbuffer[2].in  = qbuffer[2].len - hdma_usart3_rx.Instance->NDTR;
		qbuffer[2].out = qbuffer[2].in;
  }

}
 80010ce:	e01a      	b.n	8001106 <MX_USART3_UART_Init+0xc6>
	  is_open[2]=true;
 80010d0:	4b14      	ldr	r3, [pc, #80]	; (8001124 <MX_USART3_UART_Init+0xe4>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	709a      	strb	r2, [r3, #2]
	   if(HAL_UART_Receive_DMA(&huart3, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 80010d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010da:	490f      	ldr	r1, [pc, #60]	; (8001118 <MX_USART3_UART_Init+0xd8>)
 80010dc:	480c      	ldr	r0, [pc, #48]	; (8001110 <MX_USART3_UART_Init+0xd0>)
 80010de:	f002 fef3 	bl	8003ec8 <HAL_UART_Receive_DMA>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d002      	beq.n	80010ee <MX_USART3_UART_Init+0xae>
		  printf("HAL_ERROR\r\n");
 80010e8:	480f      	ldr	r0, [pc, #60]	; (8001128 <MX_USART3_UART_Init+0xe8>)
 80010ea:	f003 ff85 	bl	8004ff8 <puts>
		qbuffer[2].in  = qbuffer[2].len - hdma_usart3_rx.Instance->NDTR;
 80010ee:	4b0f      	ldr	r3, [pc, #60]	; (800112c <MX_USART3_UART_Init+0xec>)
 80010f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010f2:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <MX_USART3_UART_Init+0xf0>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	4a0c      	ldr	r2, [pc, #48]	; (800112c <MX_USART3_UART_Init+0xec>)
 80010fc:	6213      	str	r3, [r2, #32]
		qbuffer[2].out = qbuffer[2].in;
 80010fe:	4b0b      	ldr	r3, [pc, #44]	; (800112c <MX_USART3_UART_Init+0xec>)
 8001100:	6a1b      	ldr	r3, [r3, #32]
 8001102:	4a0a      	ldr	r2, [pc, #40]	; (800112c <MX_USART3_UART_Init+0xec>)
 8001104:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	2000021c 	.word	0x2000021c
 8001114:	40004800 	.word	0x40004800
 8001118:	20000114 	.word	0x20000114
 800111c:	200000f4 	.word	0x200000f4
 8001120:	40023800 	.word	0x40023800
 8001124:	200000d0 	.word	0x200000d0
 8001128:	08005f04 	.word	0x08005f04
 800112c:	200000d4 	.word	0x200000d4
 8001130:	200002a0 	.word	0x200002a0

08001134 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08a      	sub	sp, #40	; 0x28
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a33      	ldr	r2, [pc, #204]	; (8001220 <HAL_UART_MspInit+0xec>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d15f      	bne.n	8001216 <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001156:	4b33      	ldr	r3, [pc, #204]	; (8001224 <HAL_UART_MspInit+0xf0>)
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	4a32      	ldr	r2, [pc, #200]	; (8001224 <HAL_UART_MspInit+0xf0>)
 800115c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001160:	6413      	str	r3, [r2, #64]	; 0x40
 8001162:	4b30      	ldr	r3, [pc, #192]	; (8001224 <HAL_UART_MspInit+0xf0>)
 8001164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001166:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800116a:	613b      	str	r3, [r7, #16]
 800116c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800116e:	4b2d      	ldr	r3, [pc, #180]	; (8001224 <HAL_UART_MspInit+0xf0>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a2c      	ldr	r2, [pc, #176]	; (8001224 <HAL_UART_MspInit+0xf0>)
 8001174:	f043 0308 	orr.w	r3, r3, #8
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b2a      	ldr	r3, [pc, #168]	; (8001224 <HAL_UART_MspInit+0xf0>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0308 	and.w	r3, r3, #8
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001186:	f44f 7340 	mov.w	r3, #768	; 0x300
 800118a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118c:	2302      	movs	r3, #2
 800118e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001194:	2303      	movs	r3, #3
 8001196:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001198:	2307      	movs	r3, #7
 800119a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	4619      	mov	r1, r3
 80011a2:	4821      	ldr	r0, [pc, #132]	; (8001228 <HAL_UART_MspInit+0xf4>)
 80011a4:	f001 f952 	bl	800244c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80011a8:	4b20      	ldr	r3, [pc, #128]	; (800122c <HAL_UART_MspInit+0xf8>)
 80011aa:	4a21      	ldr	r2, [pc, #132]	; (8001230 <HAL_UART_MspInit+0xfc>)
 80011ac:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80011ae:	4b1f      	ldr	r3, [pc, #124]	; (800122c <HAL_UART_MspInit+0xf8>)
 80011b0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011b4:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011b6:	4b1d      	ldr	r3, [pc, #116]	; (800122c <HAL_UART_MspInit+0xf8>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011bc:	4b1b      	ldr	r3, [pc, #108]	; (800122c <HAL_UART_MspInit+0xf8>)
 80011be:	2200      	movs	r2, #0
 80011c0:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011c2:	4b1a      	ldr	r3, [pc, #104]	; (800122c <HAL_UART_MspInit+0xf8>)
 80011c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011c8:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011ca:	4b18      	ldr	r3, [pc, #96]	; (800122c <HAL_UART_MspInit+0xf8>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011d0:	4b16      	ldr	r3, [pc, #88]	; (800122c <HAL_UART_MspInit+0xf8>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80011d6:	4b15      	ldr	r3, [pc, #84]	; (800122c <HAL_UART_MspInit+0xf8>)
 80011d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011dc:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011de:	4b13      	ldr	r3, [pc, #76]	; (800122c <HAL_UART_MspInit+0xf8>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011e4:	4b11      	ldr	r3, [pc, #68]	; (800122c <HAL_UART_MspInit+0xf8>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80011ea:	4810      	ldr	r0, [pc, #64]	; (800122c <HAL_UART_MspInit+0xf8>)
 80011ec:	f000 fa0a 	bl	8001604 <HAL_DMA_Init>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 80011f6:	f7ff fcea 	bl	8000bce <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a0b      	ldr	r2, [pc, #44]	; (800122c <HAL_UART_MspInit+0xf8>)
 80011fe:	671a      	str	r2, [r3, #112]	; 0x70
 8001200:	4a0a      	ldr	r2, [pc, #40]	; (800122c <HAL_UART_MspInit+0xf8>)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001206:	2200      	movs	r2, #0
 8001208:	2100      	movs	r1, #0
 800120a:	2027      	movs	r0, #39	; 0x27
 800120c:	f000 f9b5 	bl	800157a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001210:	2027      	movs	r0, #39	; 0x27
 8001212:	f000 f9ce 	bl	80015b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001216:	bf00      	nop
 8001218:	3728      	adds	r7, #40	; 0x28
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40004800 	.word	0x40004800
 8001224:	40023800 	.word	0x40023800
 8001228:	40020c00 	.word	0x40020c00
 800122c:	200002a0 	.word	0x200002a0
 8001230:	40026028 	.word	0x40026028

08001234 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART3)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a0c      	ldr	r2, [pc, #48]	; (8001274 <HAL_UART_MspDeInit+0x40>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d112      	bne.n	800126c <HAL_UART_MspDeInit+0x38>
  {
  /* USER CODE BEGIN USART3_MspDeInit 0 */

  /* USER CODE END USART3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART3_CLK_DISABLE();
 8001246:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <HAL_UART_MspDeInit+0x44>)
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124a:	4a0b      	ldr	r2, [pc, #44]	; (8001278 <HAL_UART_MspDeInit+0x44>)
 800124c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001250:	6413      	str	r3, [r2, #64]	; 0x40

    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    HAL_GPIO_DeInit(GPIOD, STLK_RX_Pin|STLK_TX_Pin);
 8001252:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001256:	4809      	ldr	r0, [pc, #36]	; (800127c <HAL_UART_MspDeInit+0x48>)
 8001258:	f001 faa4 	bl	80027a4 <HAL_GPIO_DeInit>

    /* USART3 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001260:	4618      	mov	r0, r3
 8001262:	f000 fa7d 	bl	8001760 <HAL_DMA_DeInit>

    /* USART3 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 8001266:	2027      	movs	r0, #39	; 0x27
 8001268:	f000 f9b1 	bl	80015ce <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }
}
 800126c:	bf00      	nop
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40004800 	.word	0x40004800
 8001278:	40023800 	.word	0x40023800
 800127c:	40020c00 	.word	0x40020c00

08001280 <HAL_UART_ErrorCallback>:


void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART3)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a05      	ldr	r2, [pc, #20]	; (80012a4 <HAL_UART_ErrorCallback+0x24>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d104      	bne.n	800129c <HAL_UART_ErrorCallback+0x1c>
  {
	  HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8001292:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001296:	4804      	ldr	r0, [pc, #16]	; (80012a8 <HAL_UART_ErrorCallback+0x28>)
 8001298:	f001 fba9 	bl	80029ee <HAL_GPIO_TogglePin>
  }
}
 800129c:	bf00      	nop
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40004800 	.word	0x40004800
 80012a8:	40020400 	.word	0x40020400

080012ac <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
    HAL_UART_Receive_IT(&huart3, (uint8_t *)&rx_data, 1);
    qbufferWrite(&qbuffer, &rx_data, 1);
  }
#endif
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012c4:	2003      	movs	r0, #3
 80012c6:	f000 f94d 	bl	8001564 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ca:	2000      	movs	r0, #0
 80012cc:	f000 f806 	bl	80012dc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80012d0:	f7ff f982 	bl	80005d8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	bd80      	pop	{r7, pc}
	...

080012dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012e4:	4b12      	ldr	r3, [pc, #72]	; (8001330 <HAL_InitTick+0x54>)
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	4b12      	ldr	r3, [pc, #72]	; (8001334 <HAL_InitTick+0x58>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	4619      	mov	r1, r3
 80012ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012fa:	4618      	mov	r0, r3
 80012fc:	f000 f975 	bl	80015ea <HAL_SYSTICK_Config>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e00e      	b.n	8001328 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2b0f      	cmp	r3, #15
 800130e:	d80a      	bhi.n	8001326 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001310:	2200      	movs	r2, #0
 8001312:	6879      	ldr	r1, [r7, #4]
 8001314:	f04f 30ff 	mov.w	r0, #4294967295
 8001318:	f000 f92f 	bl	800157a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800131c:	4a06      	ldr	r2, [pc, #24]	; (8001338 <HAL_InitTick+0x5c>)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001322:	2300      	movs	r3, #0
 8001324:	e000      	b.n	8001328 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
}
 8001328:	4618      	mov	r0, r3
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20000000 	.word	0x20000000
 8001334:	20000008 	.word	0x20000008
 8001338:	20000004 	.word	0x20000004

0800133c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001340:	4b06      	ldr	r3, [pc, #24]	; (800135c <HAL_IncTick+0x20>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	461a      	mov	r2, r3
 8001346:	4b06      	ldr	r3, [pc, #24]	; (8001360 <HAL_IncTick+0x24>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4413      	add	r3, r2
 800134c:	4a04      	ldr	r2, [pc, #16]	; (8001360 <HAL_IncTick+0x24>)
 800134e:	6013      	str	r3, [r2, #0]
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	20000008 	.word	0x20000008
 8001360:	20000300 	.word	0x20000300

08001364 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  return uwTick;
 8001368:	4b03      	ldr	r3, [pc, #12]	; (8001378 <HAL_GetTick+0x14>)
 800136a:	681b      	ldr	r3, [r3, #0]
}
 800136c:	4618      	mov	r0, r3
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	20000300 	.word	0x20000300

0800137c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f003 0307 	and.w	r3, r3, #7
 800138a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800138c:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <__NVIC_SetPriorityGrouping+0x40>)
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001392:	68ba      	ldr	r2, [r7, #8]
 8001394:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001398:	4013      	ands	r3, r2
 800139a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013a4:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <__NVIC_SetPriorityGrouping+0x44>)
 80013a6:	4313      	orrs	r3, r2
 80013a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013aa:	4a04      	ldr	r2, [pc, #16]	; (80013bc <__NVIC_SetPriorityGrouping+0x40>)
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	60d3      	str	r3, [r2, #12]
}
 80013b0:	bf00      	nop
 80013b2:	3714      	adds	r7, #20
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	e000ed00 	.word	0xe000ed00
 80013c0:	05fa0000 	.word	0x05fa0000

080013c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013c8:	4b04      	ldr	r3, [pc, #16]	; (80013dc <__NVIC_GetPriorityGrouping+0x18>)
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	0a1b      	lsrs	r3, r3, #8
 80013ce:	f003 0307 	and.w	r3, r3, #7
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	e000ed00 	.word	0xe000ed00

080013e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	db0b      	blt.n	800140a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013f2:	79fb      	ldrb	r3, [r7, #7]
 80013f4:	f003 021f 	and.w	r2, r3, #31
 80013f8:	4907      	ldr	r1, [pc, #28]	; (8001418 <__NVIC_EnableIRQ+0x38>)
 80013fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fe:	095b      	lsrs	r3, r3, #5
 8001400:	2001      	movs	r0, #1
 8001402:	fa00 f202 	lsl.w	r2, r0, r2
 8001406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	e000e100 	.word	0xe000e100

0800141c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142a:	2b00      	cmp	r3, #0
 800142c:	db12      	blt.n	8001454 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	f003 021f 	and.w	r2, r3, #31
 8001434:	490a      	ldr	r1, [pc, #40]	; (8001460 <__NVIC_DisableIRQ+0x44>)
 8001436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143a:	095b      	lsrs	r3, r3, #5
 800143c:	2001      	movs	r0, #1
 800143e:	fa00 f202 	lsl.w	r2, r0, r2
 8001442:	3320      	adds	r3, #32
 8001444:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001448:	f3bf 8f4f 	dsb	sy
}
 800144c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800144e:	f3bf 8f6f 	isb	sy
}
 8001452:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	e000e100 	.word	0xe000e100

08001464 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	6039      	str	r1, [r7, #0]
 800146e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001474:	2b00      	cmp	r3, #0
 8001476:	db0a      	blt.n	800148e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	b2da      	uxtb	r2, r3
 800147c:	490c      	ldr	r1, [pc, #48]	; (80014b0 <__NVIC_SetPriority+0x4c>)
 800147e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001482:	0112      	lsls	r2, r2, #4
 8001484:	b2d2      	uxtb	r2, r2
 8001486:	440b      	add	r3, r1
 8001488:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800148c:	e00a      	b.n	80014a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	b2da      	uxtb	r2, r3
 8001492:	4908      	ldr	r1, [pc, #32]	; (80014b4 <__NVIC_SetPriority+0x50>)
 8001494:	79fb      	ldrb	r3, [r7, #7]
 8001496:	f003 030f 	and.w	r3, r3, #15
 800149a:	3b04      	subs	r3, #4
 800149c:	0112      	lsls	r2, r2, #4
 800149e:	b2d2      	uxtb	r2, r2
 80014a0:	440b      	add	r3, r1
 80014a2:	761a      	strb	r2, [r3, #24]
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	e000e100 	.word	0xe000e100
 80014b4:	e000ed00 	.word	0xe000ed00

080014b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b089      	sub	sp, #36	; 0x24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f003 0307 	and.w	r3, r3, #7
 80014ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	f1c3 0307 	rsb	r3, r3, #7
 80014d2:	2b04      	cmp	r3, #4
 80014d4:	bf28      	it	cs
 80014d6:	2304      	movcs	r3, #4
 80014d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	3304      	adds	r3, #4
 80014de:	2b06      	cmp	r3, #6
 80014e0:	d902      	bls.n	80014e8 <NVIC_EncodePriority+0x30>
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	3b03      	subs	r3, #3
 80014e6:	e000      	b.n	80014ea <NVIC_EncodePriority+0x32>
 80014e8:	2300      	movs	r3, #0
 80014ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ec:	f04f 32ff 	mov.w	r2, #4294967295
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	43da      	mvns	r2, r3
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	401a      	ands	r2, r3
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001500:	f04f 31ff 	mov.w	r1, #4294967295
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	fa01 f303 	lsl.w	r3, r1, r3
 800150a:	43d9      	mvns	r1, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001510:	4313      	orrs	r3, r2
         );
}
 8001512:	4618      	mov	r0, r3
 8001514:	3724      	adds	r7, #36	; 0x24
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
	...

08001520 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	3b01      	subs	r3, #1
 800152c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001530:	d301      	bcc.n	8001536 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001532:	2301      	movs	r3, #1
 8001534:	e00f      	b.n	8001556 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001536:	4a0a      	ldr	r2, [pc, #40]	; (8001560 <SysTick_Config+0x40>)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3b01      	subs	r3, #1
 800153c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800153e:	210f      	movs	r1, #15
 8001540:	f04f 30ff 	mov.w	r0, #4294967295
 8001544:	f7ff ff8e 	bl	8001464 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001548:	4b05      	ldr	r3, [pc, #20]	; (8001560 <SysTick_Config+0x40>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800154e:	4b04      	ldr	r3, [pc, #16]	; (8001560 <SysTick_Config+0x40>)
 8001550:	2207      	movs	r2, #7
 8001552:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	e000e010 	.word	0xe000e010

08001564 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f7ff ff05 	bl	800137c <__NVIC_SetPriorityGrouping>
}
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800157a:	b580      	push	{r7, lr}
 800157c:	b086      	sub	sp, #24
 800157e:	af00      	add	r7, sp, #0
 8001580:	4603      	mov	r3, r0
 8001582:	60b9      	str	r1, [r7, #8]
 8001584:	607a      	str	r2, [r7, #4]
 8001586:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001588:	2300      	movs	r3, #0
 800158a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800158c:	f7ff ff1a 	bl	80013c4 <__NVIC_GetPriorityGrouping>
 8001590:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	68b9      	ldr	r1, [r7, #8]
 8001596:	6978      	ldr	r0, [r7, #20]
 8001598:	f7ff ff8e 	bl	80014b8 <NVIC_EncodePriority>
 800159c:	4602      	mov	r2, r0
 800159e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015a2:	4611      	mov	r1, r2
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff ff5d 	bl	8001464 <__NVIC_SetPriority>
}
 80015aa:	bf00      	nop
 80015ac:	3718      	adds	r7, #24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b082      	sub	sp, #8
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	4603      	mov	r3, r0
 80015ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff ff0d 	bl	80013e0 <__NVIC_EnableIRQ>
}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b082      	sub	sp, #8
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	4603      	mov	r3, r0
 80015d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80015d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff ff1d 	bl	800141c <__NVIC_DisableIRQ>
}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b082      	sub	sp, #8
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f7ff ff94 	bl	8001520 <SysTick_Config>
 80015f8:	4603      	mov	r3, r0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
	...

08001604 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800160c:	2300      	movs	r3, #0
 800160e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001610:	f7ff fea8 	bl	8001364 <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d101      	bne.n	8001620 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e099      	b.n	8001754 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2200      	movs	r2, #0
 8001624:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2202      	movs	r2, #2
 800162c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f022 0201 	bic.w	r2, r2, #1
 800163e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001640:	e00f      	b.n	8001662 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001642:	f7ff fe8f 	bl	8001364 <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	2b05      	cmp	r3, #5
 800164e:	d908      	bls.n	8001662 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2220      	movs	r2, #32
 8001654:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2203      	movs	r2, #3
 800165a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e078      	b.n	8001754 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0301 	and.w	r3, r3, #1
 800166c:	2b00      	cmp	r3, #0
 800166e:	d1e8      	bne.n	8001642 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001678:	697a      	ldr	r2, [r7, #20]
 800167a:	4b38      	ldr	r3, [pc, #224]	; (800175c <HAL_DMA_Init+0x158>)
 800167c:	4013      	ands	r3, r2
 800167e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685a      	ldr	r2, [r3, #4]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800168e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	691b      	ldr	r3, [r3, #16]
 8001694:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800169a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a1b      	ldr	r3, [r3, #32]
 80016ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016ae:	697a      	ldr	r2, [r7, #20]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b8:	2b04      	cmp	r3, #4
 80016ba:	d107      	bne.n	80016cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c4:	4313      	orrs	r3, r2
 80016c6:	697a      	ldr	r2, [r7, #20]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	697a      	ldr	r2, [r7, #20]
 80016d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	695b      	ldr	r3, [r3, #20]
 80016da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	f023 0307 	bic.w	r3, r3, #7
 80016e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e8:	697a      	ldr	r2, [r7, #20]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f2:	2b04      	cmp	r3, #4
 80016f4:	d117      	bne.n	8001726 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016fa:	697a      	ldr	r2, [r7, #20]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001704:	2b00      	cmp	r3, #0
 8001706:	d00e      	beq.n	8001726 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f000 fb67 	bl	8001ddc <DMA_CheckFifoParam>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d008      	beq.n	8001726 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2240      	movs	r2, #64	; 0x40
 8001718:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2201      	movs	r2, #1
 800171e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001722:	2301      	movs	r3, #1
 8001724:	e016      	b.n	8001754 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	697a      	ldr	r2, [r7, #20]
 800172c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f000 fb1e 	bl	8001d70 <DMA_CalcBaseAndBitshift>
 8001734:	4603      	mov	r3, r0
 8001736:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800173c:	223f      	movs	r2, #63	; 0x3f
 800173e:	409a      	lsls	r2, r3
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2201      	movs	r2, #1
 800174e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001752:	2300      	movs	r3, #0
}
 8001754:	4618      	mov	r0, r3
 8001756:	3718      	adds	r7, #24
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	e010803f 	.word	0xe010803f

08001760 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d101      	bne.n	8001772 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e050      	b.n	8001814 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001778:	b2db      	uxtb	r3, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d101      	bne.n	8001782 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800177e:	2302      	movs	r3, #2
 8001780:	e048      	b.n	8001814 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f022 0201 	bic.w	r2, r2, #1
 8001790:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2200      	movs	r2, #0
 80017a0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2200      	movs	r2, #0
 80017a8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2200      	movs	r2, #0
 80017b0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2200      	movs	r2, #0
 80017b8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2221      	movs	r2, #33	; 0x21
 80017c0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f000 fad4 	bl	8001d70 <DMA_CalcBaseAndBitshift>
 80017c8:	4603      	mov	r3, r0
 80017ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017d0:	223f      	movs	r2, #63	; 0x3f
 80017d2:	409a      	lsls	r2, r3
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2200      	movs	r2, #0
 80017f4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2200      	movs	r2, #0
 8001800:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001812:	2300      	movs	r3, #0
}
 8001814:	4618      	mov	r0, r3
 8001816:	3710      	adds	r7, #16
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
 8001828:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800182a:	2300      	movs	r3, #0
 800182c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001832:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800183a:	2b01      	cmp	r3, #1
 800183c:	d101      	bne.n	8001842 <HAL_DMA_Start_IT+0x26>
 800183e:	2302      	movs	r3, #2
 8001840:	e048      	b.n	80018d4 <HAL_DMA_Start_IT+0xb8>
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2201      	movs	r2, #1
 8001846:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001850:	b2db      	uxtb	r3, r3
 8001852:	2b01      	cmp	r3, #1
 8001854:	d137      	bne.n	80018c6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	2202      	movs	r2, #2
 800185a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	2200      	movs	r2, #0
 8001862:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	68b9      	ldr	r1, [r7, #8]
 800186a:	68f8      	ldr	r0, [r7, #12]
 800186c:	f000 fa52 	bl	8001d14 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001874:	223f      	movs	r2, #63	; 0x3f
 8001876:	409a      	lsls	r2, r3
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f042 0216 	orr.w	r2, r2, #22
 800188a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	695a      	ldr	r2, [r3, #20]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800189a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d007      	beq.n	80018b4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f042 0208 	orr.w	r2, r2, #8
 80018b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f042 0201 	orr.w	r2, r2, #1
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	e005      	b.n	80018d2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2200      	movs	r2, #0
 80018ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80018ce:	2302      	movs	r3, #2
 80018d0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80018d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3718      	adds	r7, #24
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80018ea:	f7ff fd3b 	bl	8001364 <HAL_GetTick>
 80018ee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d008      	beq.n	800190e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2280      	movs	r2, #128	; 0x80
 8001900:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e052      	b.n	80019b4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f022 0216 	bic.w	r2, r2, #22
 800191c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	695a      	ldr	r2, [r3, #20]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800192c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	2b00      	cmp	r3, #0
 8001934:	d103      	bne.n	800193e <HAL_DMA_Abort+0x62>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800193a:	2b00      	cmp	r3, #0
 800193c:	d007      	beq.n	800194e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f022 0208 	bic.w	r2, r2, #8
 800194c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f022 0201 	bic.w	r2, r2, #1
 800195c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800195e:	e013      	b.n	8001988 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001960:	f7ff fd00 	bl	8001364 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b05      	cmp	r3, #5
 800196c:	d90c      	bls.n	8001988 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2220      	movs	r2, #32
 8001972:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2203      	movs	r2, #3
 8001980:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	e015      	b.n	80019b4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1e4      	bne.n	8001960 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800199a:	223f      	movs	r2, #63	; 0x3f
 800199c:	409a      	lsls	r2, r3
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2201      	movs	r2, #1
 80019ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80019b2:	2300      	movs	r3, #0
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3710      	adds	r7, #16
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}

080019bc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d004      	beq.n	80019da <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2280      	movs	r2, #128	; 0x80
 80019d4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e00c      	b.n	80019f4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2205      	movs	r2, #5
 80019de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f022 0201 	bic.w	r2, r2, #1
 80019f0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80019f2:	2300      	movs	r3, #0
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001a0c:	4b92      	ldr	r3, [pc, #584]	; (8001c58 <HAL_DMA_IRQHandler+0x258>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a92      	ldr	r2, [pc, #584]	; (8001c5c <HAL_DMA_IRQHandler+0x25c>)
 8001a12:	fba2 2303 	umull	r2, r3, r2, r3
 8001a16:	0a9b      	lsrs	r3, r3, #10
 8001a18:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a2a:	2208      	movs	r2, #8
 8001a2c:	409a      	lsls	r2, r3
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	4013      	ands	r3, r2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d01a      	beq.n	8001a6c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0304 	and.w	r3, r3, #4
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d013      	beq.n	8001a6c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f022 0204 	bic.w	r2, r2, #4
 8001a52:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a58:	2208      	movs	r2, #8
 8001a5a:	409a      	lsls	r2, r3
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a64:	f043 0201 	orr.w	r2, r3, #1
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a70:	2201      	movs	r2, #1
 8001a72:	409a      	lsls	r2, r3
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	4013      	ands	r3, r2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d012      	beq.n	8001aa2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	695b      	ldr	r3, [r3, #20]
 8001a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d00b      	beq.n	8001aa2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a8e:	2201      	movs	r2, #1
 8001a90:	409a      	lsls	r2, r3
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a9a:	f043 0202 	orr.w	r2, r3, #2
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aa6:	2204      	movs	r2, #4
 8001aa8:	409a      	lsls	r2, r3
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	4013      	ands	r3, r2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d012      	beq.n	8001ad8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d00b      	beq.n	8001ad8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ac4:	2204      	movs	r2, #4
 8001ac6:	409a      	lsls	r2, r3
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ad0:	f043 0204 	orr.w	r2, r3, #4
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001adc:	2210      	movs	r2, #16
 8001ade:	409a      	lsls	r2, r3
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d043      	beq.n	8001b70 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0308 	and.w	r3, r3, #8
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d03c      	beq.n	8001b70 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001afa:	2210      	movs	r2, #16
 8001afc:	409a      	lsls	r2, r3
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d018      	beq.n	8001b42 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d108      	bne.n	8001b30 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d024      	beq.n	8001b70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	4798      	blx	r3
 8001b2e:	e01f      	b.n	8001b70 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d01b      	beq.n	8001b70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	4798      	blx	r3
 8001b40:	e016      	b.n	8001b70 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d107      	bne.n	8001b60 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f022 0208 	bic.w	r2, r2, #8
 8001b5e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d003      	beq.n	8001b70 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b74:	2220      	movs	r2, #32
 8001b76:	409a      	lsls	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	f000 808e 	beq.w	8001c9e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0310 	and.w	r3, r3, #16
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	f000 8086 	beq.w	8001c9e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b96:	2220      	movs	r2, #32
 8001b98:	409a      	lsls	r2, r3
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2b05      	cmp	r3, #5
 8001ba8:	d136      	bne.n	8001c18 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f022 0216 	bic.w	r2, r2, #22
 8001bb8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	695a      	ldr	r2, [r3, #20]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bc8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d103      	bne.n	8001bda <HAL_DMA_IRQHandler+0x1da>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d007      	beq.n	8001bea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f022 0208 	bic.w	r2, r2, #8
 8001be8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bee:	223f      	movs	r2, #63	; 0x3f
 8001bf0:	409a      	lsls	r2, r3
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2201      	movs	r2, #1
 8001c02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d07d      	beq.n	8001d0a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	4798      	blx	r3
        }
        return;
 8001c16:	e078      	b.n	8001d0a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d01c      	beq.n	8001c60 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d108      	bne.n	8001c46 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d030      	beq.n	8001c9e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	4798      	blx	r3
 8001c44:	e02b      	b.n	8001c9e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d027      	beq.n	8001c9e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	4798      	blx	r3
 8001c56:	e022      	b.n	8001c9e <HAL_DMA_IRQHandler+0x29e>
 8001c58:	20000000 	.word	0x20000000
 8001c5c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d10f      	bne.n	8001c8e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f022 0210 	bic.w	r2, r2, #16
 8001c7c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d003      	beq.n	8001c9e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d032      	beq.n	8001d0c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d022      	beq.n	8001cf8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2205      	movs	r2, #5
 8001cb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f022 0201 	bic.w	r2, r2, #1
 8001cc8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	60bb      	str	r3, [r7, #8]
 8001cd0:	697a      	ldr	r2, [r7, #20]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d307      	bcc.n	8001ce6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0301 	and.w	r3, r3, #1
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d1f2      	bne.n	8001cca <HAL_DMA_IRQHandler+0x2ca>
 8001ce4:	e000      	b.n	8001ce8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001ce6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d005      	beq.n	8001d0c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	4798      	blx	r3
 8001d08:	e000      	b.n	8001d0c <HAL_DMA_IRQHandler+0x30c>
        return;
 8001d0a:	bf00      	nop
    }
  }
}
 8001d0c:	3718      	adds	r7, #24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop

08001d14 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]
 8001d20:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d30:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	2b40      	cmp	r3, #64	; 0x40
 8001d40:	d108      	bne.n	8001d54 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	68ba      	ldr	r2, [r7, #8]
 8001d50:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001d52:	e007      	b.n	8001d64 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	68ba      	ldr	r2, [r7, #8]
 8001d5a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	60da      	str	r2, [r3, #12]
}
 8001d64:	bf00      	nop
 8001d66:	3714      	adds	r7, #20
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	3b10      	subs	r3, #16
 8001d80:	4a13      	ldr	r2, [pc, #76]	; (8001dd0 <DMA_CalcBaseAndBitshift+0x60>)
 8001d82:	fba2 2303 	umull	r2, r3, r2, r3
 8001d86:	091b      	lsrs	r3, r3, #4
 8001d88:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d8a:	4a12      	ldr	r2, [pc, #72]	; (8001dd4 <DMA_CalcBaseAndBitshift+0x64>)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	4413      	add	r3, r2
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	461a      	mov	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2b03      	cmp	r3, #3
 8001d9c:	d908      	bls.n	8001db0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	461a      	mov	r2, r3
 8001da4:	4b0c      	ldr	r3, [pc, #48]	; (8001dd8 <DMA_CalcBaseAndBitshift+0x68>)
 8001da6:	4013      	ands	r3, r2
 8001da8:	1d1a      	adds	r2, r3, #4
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	659a      	str	r2, [r3, #88]	; 0x58
 8001dae:	e006      	b.n	8001dbe <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	461a      	mov	r2, r3
 8001db6:	4b08      	ldr	r3, [pc, #32]	; (8001dd8 <DMA_CalcBaseAndBitshift+0x68>)
 8001db8:	4013      	ands	r3, r2
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3714      	adds	r7, #20
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	aaaaaaab 	.word	0xaaaaaaab
 8001dd4:	08005f28 	.word	0x08005f28
 8001dd8:	fffffc00 	.word	0xfffffc00

08001ddc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001de4:	2300      	movs	r3, #0
 8001de6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d11f      	bne.n	8001e36 <DMA_CheckFifoParam+0x5a>
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	2b03      	cmp	r3, #3
 8001dfa:	d856      	bhi.n	8001eaa <DMA_CheckFifoParam+0xce>
 8001dfc:	a201      	add	r2, pc, #4	; (adr r2, 8001e04 <DMA_CheckFifoParam+0x28>)
 8001dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e02:	bf00      	nop
 8001e04:	08001e15 	.word	0x08001e15
 8001e08:	08001e27 	.word	0x08001e27
 8001e0c:	08001e15 	.word	0x08001e15
 8001e10:	08001eab 	.word	0x08001eab
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d046      	beq.n	8001eae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e24:	e043      	b.n	8001eae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e2e:	d140      	bne.n	8001eb2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e34:	e03d      	b.n	8001eb2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	699b      	ldr	r3, [r3, #24]
 8001e3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e3e:	d121      	bne.n	8001e84 <DMA_CheckFifoParam+0xa8>
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	2b03      	cmp	r3, #3
 8001e44:	d837      	bhi.n	8001eb6 <DMA_CheckFifoParam+0xda>
 8001e46:	a201      	add	r2, pc, #4	; (adr r2, 8001e4c <DMA_CheckFifoParam+0x70>)
 8001e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e4c:	08001e5d 	.word	0x08001e5d
 8001e50:	08001e63 	.word	0x08001e63
 8001e54:	08001e5d 	.word	0x08001e5d
 8001e58:	08001e75 	.word	0x08001e75
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	73fb      	strb	r3, [r7, #15]
      break;
 8001e60:	e030      	b.n	8001ec4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d025      	beq.n	8001eba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e72:	e022      	b.n	8001eba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e78:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e7c:	d11f      	bne.n	8001ebe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001e82:	e01c      	b.n	8001ebe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d903      	bls.n	8001e92 <DMA_CheckFifoParam+0xb6>
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	2b03      	cmp	r3, #3
 8001e8e:	d003      	beq.n	8001e98 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001e90:	e018      	b.n	8001ec4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	73fb      	strb	r3, [r7, #15]
      break;
 8001e96:	e015      	b.n	8001ec4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d00e      	beq.n	8001ec2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	73fb      	strb	r3, [r7, #15]
      break;
 8001ea8:	e00b      	b.n	8001ec2 <DMA_CheckFifoParam+0xe6>
      break;
 8001eaa:	bf00      	nop
 8001eac:	e00a      	b.n	8001ec4 <DMA_CheckFifoParam+0xe8>
      break;
 8001eae:	bf00      	nop
 8001eb0:	e008      	b.n	8001ec4 <DMA_CheckFifoParam+0xe8>
      break;
 8001eb2:	bf00      	nop
 8001eb4:	e006      	b.n	8001ec4 <DMA_CheckFifoParam+0xe8>
      break;
 8001eb6:	bf00      	nop
 8001eb8:	e004      	b.n	8001ec4 <DMA_CheckFifoParam+0xe8>
      break;
 8001eba:	bf00      	nop
 8001ebc:	e002      	b.n	8001ec4 <DMA_CheckFifoParam+0xe8>
      break;   
 8001ebe:	bf00      	nop
 8001ec0:	e000      	b.n	8001ec4 <DMA_CheckFifoParam+0xe8>
      break;
 8001ec2:	bf00      	nop
    }
  } 
  
  return status; 
 8001ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3714      	adds	r7, #20
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop

08001ed4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001ee6:	4b27      	ldr	r3, [pc, #156]	; (8001f84 <HAL_FLASH_Program+0xb0>)
 8001ee8:	7d1b      	ldrb	r3, [r3, #20]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d101      	bne.n	8001ef2 <HAL_FLASH_Program+0x1e>
 8001eee:	2302      	movs	r3, #2
 8001ef0:	e043      	b.n	8001f7a <HAL_FLASH_Program+0xa6>
 8001ef2:	4b24      	ldr	r3, [pc, #144]	; (8001f84 <HAL_FLASH_Program+0xb0>)
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001ef8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001efc:	f000 f878 	bl	8001ff0 <FLASH_WaitForLastOperation>
 8001f00:	4603      	mov	r3, r0
 8001f02:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001f04:	7dfb      	ldrb	r3, [r7, #23]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d133      	bne.n	8001f72 <HAL_FLASH_Program+0x9e>
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2b03      	cmp	r3, #3
 8001f0e:	d823      	bhi.n	8001f58 <HAL_FLASH_Program+0x84>
 8001f10:	a201      	add	r2, pc, #4	; (adr r2, 8001f18 <HAL_FLASH_Program+0x44>)
 8001f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f16:	bf00      	nop
 8001f18:	08001f29 	.word	0x08001f29
 8001f1c:	08001f35 	.word	0x08001f35
 8001f20:	08001f41 	.word	0x08001f41
 8001f24:	08001f4d 	.word	0x08001f4d
    switch(TypeProgram)
    {
      case FLASH_TYPEPROGRAM_BYTE :
      {
        /*Program byte (8-bit) at a specified address.*/
        FLASH_Program_Byte(Address, (uint8_t) Data);
 8001f28:	783b      	ldrb	r3, [r7, #0]
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	68b8      	ldr	r0, [r7, #8]
 8001f2e:	f000 f921 	bl	8002174 <FLASH_Program_Byte>
        break;
 8001f32:	e012      	b.n	8001f5a <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_HALFWORD :
      {
        /*Program halfword (16-bit) at a specified address.*/
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001f34:	883b      	ldrh	r3, [r7, #0]
 8001f36:	4619      	mov	r1, r3
 8001f38:	68b8      	ldr	r0, [r7, #8]
 8001f3a:	f000 f8f5 	bl	8002128 <FLASH_Program_HalfWord>
        break;
 8001f3e:	e00c      	b.n	8001f5a <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_WORD :
      {
        /*Program word (32-bit) at a specified address.*/
        FLASH_Program_Word(Address, (uint32_t) Data);
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	4619      	mov	r1, r3
 8001f44:	68b8      	ldr	r0, [r7, #8]
 8001f46:	f000 f8c9 	bl	80020dc <FLASH_Program_Word>
        break;
 8001f4a:	e006      	b.n	8001f5a <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_DOUBLEWORD :
      {
        /*Program double word (64-bit) at a specified address.*/
        FLASH_Program_DoubleWord(Address, Data);
 8001f4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f50:	68b8      	ldr	r0, [r7, #8]
 8001f52:	f000 f88d 	bl	8002070 <FLASH_Program_DoubleWord>
        break;
 8001f56:	e000      	b.n	8001f5a <HAL_FLASH_Program+0x86>
      }
      default :
        break;
 8001f58:	bf00      	nop
    }
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001f5a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001f5e:	f000 f847 	bl	8001ff0 <FLASH_WaitForLastOperation>
 8001f62:	4603      	mov	r3, r0
 8001f64:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8001f66:	4b08      	ldr	r3, [pc, #32]	; (8001f88 <HAL_FLASH_Program+0xb4>)
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	4a07      	ldr	r2, [pc, #28]	; (8001f88 <HAL_FLASH_Program+0xb4>)
 8001f6c:	f023 0301 	bic.w	r3, r3, #1
 8001f70:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001f72:	4b04      	ldr	r3, [pc, #16]	; (8001f84 <HAL_FLASH_Program+0xb0>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	751a      	strb	r2, [r3, #20]

  return status;
 8001f78:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3718      	adds	r7, #24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	20000304 	.word	0x20000304
 8001f88:	40023c00 	.word	0x40023c00

08001f8c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001f92:	2300      	movs	r3, #0
 8001f94:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001f96:	4b0b      	ldr	r3, [pc, #44]	; (8001fc4 <HAL_FLASH_Unlock+0x38>)
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	da0b      	bge.n	8001fb6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001f9e:	4b09      	ldr	r3, [pc, #36]	; (8001fc4 <HAL_FLASH_Unlock+0x38>)
 8001fa0:	4a09      	ldr	r2, [pc, #36]	; (8001fc8 <HAL_FLASH_Unlock+0x3c>)
 8001fa2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001fa4:	4b07      	ldr	r3, [pc, #28]	; (8001fc4 <HAL_FLASH_Unlock+0x38>)
 8001fa6:	4a09      	ldr	r2, [pc, #36]	; (8001fcc <HAL_FLASH_Unlock+0x40>)
 8001fa8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001faa:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <HAL_FLASH_Unlock+0x38>)
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	da01      	bge.n	8001fb6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001fb6:	79fb      	ldrb	r3, [r7, #7]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	40023c00 	.word	0x40023c00
 8001fc8:	45670123 	.word	0x45670123
 8001fcc:	cdef89ab 	.word	0xcdef89ab

08001fd0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001fd4:	4b05      	ldr	r3, [pc, #20]	; (8001fec <HAL_FLASH_Lock+0x1c>)
 8001fd6:	691b      	ldr	r3, [r3, #16]
 8001fd8:	4a04      	ldr	r2, [pc, #16]	; (8001fec <HAL_FLASH_Lock+0x1c>)
 8001fda:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001fde:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr
 8001fec:	40023c00 	.word	0x40023c00

08001ff0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001ffc:	4b1a      	ldr	r3, [pc, #104]	; (8002068 <FLASH_WaitForLastOperation+0x78>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	619a      	str	r2, [r3, #24]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8002002:	f7ff f9af 	bl	8001364 <HAL_GetTick>
 8002006:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002008:	e010      	b.n	800202c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002010:	d00c      	beq.n	800202c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d007      	beq.n	8002028 <FLASH_WaitForLastOperation+0x38>
 8002018:	f7ff f9a4 	bl	8001364 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	429a      	cmp	r2, r3
 8002026:	d201      	bcs.n	800202c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e019      	b.n	8002060 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800202c:	4b0f      	ldr	r3, [pc, #60]	; (800206c <FLASH_WaitForLastOperation+0x7c>)
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d1e8      	bne.n	800200a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 8002038:	4b0c      	ldr	r3, [pc, #48]	; (800206c <FLASH_WaitForLastOperation+0x7c>)
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d003      	beq.n	800204c <FLASH_WaitForLastOperation+0x5c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002044:	f000 f8ba 	bl	80021bc <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e009      	b.n	8002060 <FLASH_WaitForLastOperation+0x70>
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800204c:	4b07      	ldr	r3, [pc, #28]	; (800206c <FLASH_WaitForLastOperation+0x7c>)
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	f003 0301 	and.w	r3, r3, #1
 8002054:	2b00      	cmp	r3, #0
 8002056:	d002      	beq.n	800205e <FLASH_WaitForLastOperation+0x6e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002058:	4b04      	ldr	r3, [pc, #16]	; (800206c <FLASH_WaitForLastOperation+0x7c>)
 800205a:	2201      	movs	r2, #1
 800205c:	60da      	str	r2, [r3, #12]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800205e:	2300      	movs	r3, #0
  
}  
 8002060:	4618      	mov	r0, r3
 8002062:	3710      	adds	r7, #16
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	20000304 	.word	0x20000304
 800206c:	40023c00 	.word	0x40023c00

08002070 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 800207c:	4b16      	ldr	r3, [pc, #88]	; (80020d8 <FLASH_Program_DoubleWord+0x68>)
 800207e:	691b      	ldr	r3, [r3, #16]
 8002080:	4a15      	ldr	r2, [pc, #84]	; (80020d8 <FLASH_Program_DoubleWord+0x68>)
 8002082:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002086:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002088:	4b13      	ldr	r3, [pc, #76]	; (80020d8 <FLASH_Program_DoubleWord+0x68>)
 800208a:	691b      	ldr	r3, [r3, #16]
 800208c:	4a12      	ldr	r2, [pc, #72]	; (80020d8 <FLASH_Program_DoubleWord+0x68>)
 800208e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002092:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002094:	4b10      	ldr	r3, [pc, #64]	; (80020d8 <FLASH_Program_DoubleWord+0x68>)
 8002096:	691b      	ldr	r3, [r3, #16]
 8002098:	4a0f      	ldr	r2, [pc, #60]	; (80020d8 <FLASH_Program_DoubleWord+0x68>)
 800209a:	f043 0301 	orr.w	r3, r3, #1
 800209e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80020a6:	f3bf 8f6f 	isb	sy
}
 80020aa:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80020ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80020b0:	f04f 0200 	mov.w	r2, #0
 80020b4:	f04f 0300 	mov.w	r3, #0
 80020b8:	000a      	movs	r2, r1
 80020ba:	2300      	movs	r3, #0
 80020bc:	68f9      	ldr	r1, [r7, #12]
 80020be:	3104      	adds	r1, #4
 80020c0:	4613      	mov	r3, r2
 80020c2:	600b      	str	r3, [r1, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80020c4:	f3bf 8f4f 	dsb	sy
}
 80020c8:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80020ca:	bf00      	nop
 80020cc:	3714      	adds	r7, #20
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	40023c00 	.word	0x40023c00

080020dc <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80020e6:	4b0f      	ldr	r3, [pc, #60]	; (8002124 <FLASH_Program_Word+0x48>)
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	4a0e      	ldr	r2, [pc, #56]	; (8002124 <FLASH_Program_Word+0x48>)
 80020ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020f0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80020f2:	4b0c      	ldr	r3, [pc, #48]	; (8002124 <FLASH_Program_Word+0x48>)
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	4a0b      	ldr	r2, [pc, #44]	; (8002124 <FLASH_Program_Word+0x48>)
 80020f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020fc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80020fe:	4b09      	ldr	r3, [pc, #36]	; (8002124 <FLASH_Program_Word+0x48>)
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	4a08      	ldr	r2, [pc, #32]	; (8002124 <FLASH_Program_Word+0x48>)
 8002104:	f043 0301 	orr.w	r3, r3, #1
 8002108:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002110:	f3bf 8f4f 	dsb	sy
}
 8002114:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8002116:	bf00      	nop
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	40023c00 	.word	0x40023c00

08002128 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	460b      	mov	r3, r1
 8002132:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8002134:	4b0e      	ldr	r3, [pc, #56]	; (8002170 <FLASH_Program_HalfWord+0x48>)
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	4a0d      	ldr	r2, [pc, #52]	; (8002170 <FLASH_Program_HalfWord+0x48>)
 800213a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800213e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002140:	4b0b      	ldr	r3, [pc, #44]	; (8002170 <FLASH_Program_HalfWord+0x48>)
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	4a0a      	ldr	r2, [pc, #40]	; (8002170 <FLASH_Program_HalfWord+0x48>)
 8002146:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800214a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800214c:	4b08      	ldr	r3, [pc, #32]	; (8002170 <FLASH_Program_HalfWord+0x48>)
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	4a07      	ldr	r2, [pc, #28]	; (8002170 <FLASH_Program_HalfWord+0x48>)
 8002152:	f043 0301 	orr.w	r3, r3, #1
 8002156:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	887a      	ldrh	r2, [r7, #2]
 800215c:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800215e:	f3bf 8f4f 	dsb	sy
}
 8002162:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
  
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr
 8002170:	40023c00 	.word	0x40023c00

08002174 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	460b      	mov	r3, r1
 800217e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8002180:	4b0d      	ldr	r3, [pc, #52]	; (80021b8 <FLASH_Program_Byte+0x44>)
 8002182:	691b      	ldr	r3, [r3, #16]
 8002184:	4a0c      	ldr	r2, [pc, #48]	; (80021b8 <FLASH_Program_Byte+0x44>)
 8002186:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800218a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800218c:	4b0a      	ldr	r3, [pc, #40]	; (80021b8 <FLASH_Program_Byte+0x44>)
 800218e:	4a0a      	ldr	r2, [pc, #40]	; (80021b8 <FLASH_Program_Byte+0x44>)
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002194:	4b08      	ldr	r3, [pc, #32]	; (80021b8 <FLASH_Program_Byte+0x44>)
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	4a07      	ldr	r2, [pc, #28]	; (80021b8 <FLASH_Program_Byte+0x44>)
 800219a:	f043 0301 	orr.w	r3, r3, #1
 800219e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	78fa      	ldrb	r2, [r7, #3]
 80021a4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80021a6:	f3bf 8f4f 	dsb	sy
}
 80021aa:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr
 80021b8:	40023c00 	.word	0x40023c00

080021bc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80021c0:	4b21      	ldr	r3, [pc, #132]	; (8002248 <FLASH_SetErrorCode+0x8c>)
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d005      	beq.n	80021d8 <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80021cc:	4b1f      	ldr	r3, [pc, #124]	; (800224c <FLASH_SetErrorCode+0x90>)
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	f043 0320 	orr.w	r3, r3, #32
 80021d4:	4a1d      	ldr	r2, [pc, #116]	; (800224c <FLASH_SetErrorCode+0x90>)
 80021d6:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80021d8:	4b1b      	ldr	r3, [pc, #108]	; (8002248 <FLASH_SetErrorCode+0x8c>)
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	f003 0310 	and.w	r3, r3, #16
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d005      	beq.n	80021f0 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80021e4:	4b19      	ldr	r3, [pc, #100]	; (800224c <FLASH_SetErrorCode+0x90>)
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	f043 0310 	orr.w	r3, r3, #16
 80021ec:	4a17      	ldr	r2, [pc, #92]	; (800224c <FLASH_SetErrorCode+0x90>)
 80021ee:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80021f0:	4b15      	ldr	r3, [pc, #84]	; (8002248 <FLASH_SetErrorCode+0x8c>)
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	f003 0320 	and.w	r3, r3, #32
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d005      	beq.n	8002208 <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80021fc:	4b13      	ldr	r3, [pc, #76]	; (800224c <FLASH_SetErrorCode+0x90>)
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	f043 0308 	orr.w	r3, r3, #8
 8002204:	4a11      	ldr	r2, [pc, #68]	; (800224c <FLASH_SetErrorCode+0x90>)
 8002206:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002208:	4b0f      	ldr	r3, [pc, #60]	; (8002248 <FLASH_SetErrorCode+0x8c>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002210:	2b00      	cmp	r3, #0
 8002212:	d005      	beq.n	8002220 <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002214:	4b0d      	ldr	r3, [pc, #52]	; (800224c <FLASH_SetErrorCode+0x90>)
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	f043 0304 	orr.w	r3, r3, #4
 800221c:	4a0b      	ldr	r2, [pc, #44]	; (800224c <FLASH_SetErrorCode+0x90>)
 800221e:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 8002220:	4b09      	ldr	r3, [pc, #36]	; (8002248 <FLASH_SetErrorCode+0x8c>)
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002228:	2b00      	cmp	r3, #0
 800222a:	d005      	beq.n	8002238 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 800222c:	4b07      	ldr	r3, [pc, #28]	; (800224c <FLASH_SetErrorCode+0x90>)
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	f043 0302 	orr.w	r3, r3, #2
 8002234:	4a05      	ldr	r2, [pc, #20]	; (800224c <FLASH_SetErrorCode+0x90>)
 8002236:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8002238:	4b03      	ldr	r3, [pc, #12]	; (8002248 <FLASH_SetErrorCode+0x8c>)
 800223a:	22f2      	movs	r2, #242	; 0xf2
 800223c:	60da      	str	r2, [r3, #12]
}
 800223e:	bf00      	nop
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr
 8002248:	40023c00 	.word	0x40023c00
 800224c:	20000304 	.word	0x20000304

08002250 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0;
 800225e:	2300      	movs	r3, #0
 8002260:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002262:	4b30      	ldr	r3, [pc, #192]	; (8002324 <HAL_FLASHEx_Erase+0xd4>)
 8002264:	7d1b      	ldrb	r3, [r3, #20]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d101      	bne.n	800226e <HAL_FLASHEx_Erase+0x1e>
 800226a:	2302      	movs	r3, #2
 800226c:	e056      	b.n	800231c <HAL_FLASHEx_Erase+0xcc>
 800226e:	4b2d      	ldr	r3, [pc, #180]	; (8002324 <HAL_FLASHEx_Erase+0xd4>)
 8002270:	2201      	movs	r2, #1
 8002272:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002274:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002278:	f7ff feba 	bl	8001ff0 <FLASH_WaitForLastOperation>
 800227c:	4603      	mov	r3, r0
 800227e:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8002280:	7bfb      	ldrb	r3, [r7, #15]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d146      	bne.n	8002314 <HAL_FLASHEx_Erase+0xc4>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	f04f 32ff 	mov.w	r2, #4294967295
 800228c:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2b01      	cmp	r3, #1
 8002294:	d115      	bne.n	80022c2 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
#if defined (FLASH_OPTCR_nDBANK)      
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	b2da      	uxtb	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	4619      	mov	r1, r3
 80022a2:	4610      	mov	r0, r2
 80022a4:	f000 f844 	bl	8002330 <FLASH_MassErase>
#else
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange);      
#endif /* FLASH_OPTCR_nDBANK */
                      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80022a8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80022ac:	f7ff fea0 	bl	8001ff0 <FLASH_WaitForLastOperation>
 80022b0:	4603      	mov	r3, r0
 80022b2:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80022b4:	4b1c      	ldr	r3, [pc, #112]	; (8002328 <HAL_FLASHEx_Erase+0xd8>)
 80022b6:	691a      	ldr	r2, [r3, #16]
 80022b8:	491b      	ldr	r1, [pc, #108]	; (8002328 <HAL_FLASHEx_Erase+0xd8>)
 80022ba:	4b1c      	ldr	r3, [pc, #112]	; (800232c <HAL_FLASHEx_Erase+0xdc>)
 80022bc:	4013      	ands	r3, r2
 80022be:	610b      	str	r3, [r1, #16]
 80022c0:	e028      	b.n	8002314 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	60bb      	str	r3, [r7, #8]
 80022c8:	e01c      	b.n	8002304 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	4619      	mov	r1, r3
 80022d2:	68b8      	ldr	r0, [r7, #8]
 80022d4:	f000 f868 	bl	80023a8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80022d8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80022dc:	f7ff fe88 	bl	8001ff0 <FLASH_WaitForLastOperation>
 80022e0:	4603      	mov	r3, r0
 80022e2:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER Bit and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 80022e4:	4b10      	ldr	r3, [pc, #64]	; (8002328 <HAL_FLASHEx_Erase+0xd8>)
 80022e6:	691b      	ldr	r3, [r3, #16]
 80022e8:	4a0f      	ldr	r2, [pc, #60]	; (8002328 <HAL_FLASHEx_Erase+0xd8>)
 80022ea:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80022ee:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 80022f0:	7bfb      	ldrb	r3, [r7, #15]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d003      	beq.n	80022fe <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	68ba      	ldr	r2, [r7, #8]
 80022fa:	601a      	str	r2, [r3, #0]
          break;
 80022fc:	e00a      	b.n	8002314 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	3301      	adds	r3, #1
 8002302:	60bb      	str	r3, [r7, #8]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	68da      	ldr	r2, [r3, #12]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	4413      	add	r3, r2
 800230e:	68ba      	ldr	r2, [r7, #8]
 8002310:	429a      	cmp	r2, r3
 8002312:	d3da      	bcc.n	80022ca <HAL_FLASHEx_Erase+0x7a>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002314:	4b03      	ldr	r3, [pc, #12]	; (8002324 <HAL_FLASHEx_Erase+0xd4>)
 8002316:	2200      	movs	r2, #0
 8002318:	751a      	strb	r2, [r3, #20]

  return status;
 800231a:	7bfb      	ldrb	r3, [r7, #15]
}
 800231c:	4618      	mov	r0, r3
 800231e:	3710      	adds	r7, #16
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	20000304 	.word	0x20000304
 8002328:	40023c00 	.word	0x40023c00
 800232c:	ffff7ffb 	.word	0xffff7ffb

08002330 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	4603      	mov	r3, r0
 8002338:	6039      	str	r1, [r7, #0]
 800233a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
 800233c:	4b19      	ldr	r3, [pc, #100]	; (80023a4 <FLASH_MassErase+0x74>)
 800233e:	691b      	ldr	r3, [r3, #16]
 8002340:	4a18      	ldr	r2, [pc, #96]	; (80023a4 <FLASH_MassErase+0x74>)
 8002342:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002346:	6113      	str	r3, [r2, #16]
  if(Banks == FLASH_BANK_BOTH)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	2b03      	cmp	r3, #3
 800234c:	d107      	bne.n	800235e <FLASH_MassErase+0x2e>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 800234e:	4b15      	ldr	r3, [pc, #84]	; (80023a4 <FLASH_MassErase+0x74>)
 8002350:	691a      	ldr	r2, [r3, #16]
 8002352:	4914      	ldr	r1, [pc, #80]	; (80023a4 <FLASH_MassErase+0x74>)
 8002354:	f248 0304 	movw	r3, #32772	; 0x8004
 8002358:	4313      	orrs	r3, r2
 800235a:	610b      	str	r3, [r1, #16]
 800235c:	e00f      	b.n	800237e <FLASH_MassErase+0x4e>
  }
  else if(Banks == FLASH_BANK_2)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	2b02      	cmp	r3, #2
 8002362:	d106      	bne.n	8002372 <FLASH_MassErase+0x42>
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8002364:	4b0f      	ldr	r3, [pc, #60]	; (80023a4 <FLASH_MassErase+0x74>)
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	4a0e      	ldr	r2, [pc, #56]	; (80023a4 <FLASH_MassErase+0x74>)
 800236a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800236e:	6113      	str	r3, [r2, #16]
 8002370:	e005      	b.n	800237e <FLASH_MassErase+0x4e>
  }
  else
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;    
 8002372:	4b0c      	ldr	r3, [pc, #48]	; (80023a4 <FLASH_MassErase+0x74>)
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	4a0b      	ldr	r2, [pc, #44]	; (80023a4 <FLASH_MassErase+0x74>)
 8002378:	f043 0304 	orr.w	r3, r3, #4
 800237c:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 800237e:	4b09      	ldr	r3, [pc, #36]	; (80023a4 <FLASH_MassErase+0x74>)
 8002380:	691a      	ldr	r2, [r3, #16]
 8002382:	79fb      	ldrb	r3, [r7, #7]
 8002384:	021b      	lsls	r3, r3, #8
 8002386:	4313      	orrs	r3, r2
 8002388:	4a06      	ldr	r2, [pc, #24]	; (80023a4 <FLASH_MassErase+0x74>)
 800238a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800238e:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8002390:	f3bf 8f4f 	dsb	sy
}
 8002394:	bf00      	nop
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8002396:	bf00      	nop
 8002398:	370c      	adds	r7, #12
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	40023c00 	.word	0x40023c00

080023a8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	460b      	mov	r3, r1
 80023b2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0;
 80023b4:	2300      	movs	r3, #0
 80023b6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80023b8:	78fb      	ldrb	r3, [r7, #3]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d102      	bne.n	80023c4 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80023be:	2300      	movs	r3, #0
 80023c0:	60fb      	str	r3, [r7, #12]
 80023c2:	e010      	b.n	80023e6 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80023c4:	78fb      	ldrb	r3, [r7, #3]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d103      	bne.n	80023d2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80023ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023ce:	60fb      	str	r3, [r7, #12]
 80023d0:	e009      	b.n	80023e6 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80023d2:	78fb      	ldrb	r3, [r7, #3]
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d103      	bne.n	80023e0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80023d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023dc:	60fb      	str	r3, [r7, #12]
 80023de:	e002      	b.n	80023e6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80023e0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80023e4:	60fb      	str	r3, [r7, #12]
  }
  
  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if(Sector > FLASH_SECTOR_11) 
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2b0b      	cmp	r3, #11
 80023ea:	d902      	bls.n	80023f2 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	3304      	adds	r3, #4
 80023f0:	607b      	str	r3, [r7, #4]
  }  

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 80023f2:	4b15      	ldr	r3, [pc, #84]	; (8002448 <FLASH_Erase_Sector+0xa0>)
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	4a14      	ldr	r2, [pc, #80]	; (8002448 <FLASH_Erase_Sector+0xa0>)
 80023f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023fc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80023fe:	4b12      	ldr	r3, [pc, #72]	; (8002448 <FLASH_Erase_Sector+0xa0>)
 8002400:	691a      	ldr	r2, [r3, #16]
 8002402:	4911      	ldr	r1, [pc, #68]	; (8002448 <FLASH_Erase_Sector+0xa0>)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	4313      	orrs	r3, r2
 8002408:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800240a:	4b0f      	ldr	r3, [pc, #60]	; (8002448 <FLASH_Erase_Sector+0xa0>)
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	4a0e      	ldr	r2, [pc, #56]	; (8002448 <FLASH_Erase_Sector+0xa0>)
 8002410:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002414:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002416:	4b0c      	ldr	r3, [pc, #48]	; (8002448 <FLASH_Erase_Sector+0xa0>)
 8002418:	691a      	ldr	r2, [r3, #16]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	00db      	lsls	r3, r3, #3
 800241e:	4313      	orrs	r3, r2
 8002420:	4a09      	ldr	r2, [pc, #36]	; (8002448 <FLASH_Erase_Sector+0xa0>)
 8002422:	f043 0302 	orr.w	r3, r3, #2
 8002426:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002428:	4b07      	ldr	r3, [pc, #28]	; (8002448 <FLASH_Erase_Sector+0xa0>)
 800242a:	691b      	ldr	r3, [r3, #16]
 800242c:	4a06      	ldr	r2, [pc, #24]	; (8002448 <FLASH_Erase_Sector+0xa0>)
 800242e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002432:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8002434:	f3bf 8f4f 	dsb	sy
}
 8002438:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800243a:	bf00      	nop
 800243c:	3714      	adds	r7, #20
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	40023c00 	.word	0x40023c00

0800244c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800244c:	b480      	push	{r7}
 800244e:	b089      	sub	sp, #36	; 0x24
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002456:	2300      	movs	r3, #0
 8002458:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800245a:	2300      	movs	r3, #0
 800245c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800245e:	2300      	movs	r3, #0
 8002460:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002462:	2300      	movs	r3, #0
 8002464:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002466:	2300      	movs	r3, #0
 8002468:	61fb      	str	r3, [r7, #28]
 800246a:	e175      	b.n	8002758 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800246c:	2201      	movs	r2, #1
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	4013      	ands	r3, r2
 800247e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	429a      	cmp	r2, r3
 8002486:	f040 8164 	bne.w	8002752 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d00b      	beq.n	80024aa <HAL_GPIO_Init+0x5e>
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2b02      	cmp	r3, #2
 8002498:	d007      	beq.n	80024aa <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800249e:	2b11      	cmp	r3, #17
 80024a0:	d003      	beq.n	80024aa <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	2b12      	cmp	r3, #18
 80024a8:	d130      	bne.n	800250c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	2203      	movs	r2, #3
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	43db      	mvns	r3, r3
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	4013      	ands	r3, r2
 80024c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	68da      	ldr	r2, [r3, #12]
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	fa02 f303 	lsl.w	r3, r2, r3
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024e0:	2201      	movs	r2, #1
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	43db      	mvns	r3, r3
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	4013      	ands	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	091b      	lsrs	r3, r3, #4
 80024f6:	f003 0201 	and.w	r2, r3, #1
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	4313      	orrs	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	2203      	movs	r2, #3
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	43db      	mvns	r3, r3
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	4013      	ands	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	689a      	ldr	r2, [r3, #8]
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	4313      	orrs	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	2b02      	cmp	r3, #2
 8002542:	d003      	beq.n	800254c <HAL_GPIO_Init+0x100>
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	2b12      	cmp	r3, #18
 800254a:	d123      	bne.n	8002594 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	08da      	lsrs	r2, r3, #3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3208      	adds	r2, #8
 8002554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002558:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	f003 0307 	and.w	r3, r3, #7
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	220f      	movs	r2, #15
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	43db      	mvns	r3, r3
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	4013      	ands	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	691a      	ldr	r2, [r3, #16]
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	f003 0307 	and.w	r3, r3, #7
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	4313      	orrs	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	08da      	lsrs	r2, r3, #3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	3208      	adds	r2, #8
 800258e:	69b9      	ldr	r1, [r7, #24]
 8002590:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	2203      	movs	r2, #3
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	43db      	mvns	r3, r3
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	4013      	ands	r3, r2
 80025aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f003 0203 	and.w	r2, r3, #3
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	4313      	orrs	r3, r2
 80025c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	f000 80be 	beq.w	8002752 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025d6:	4b66      	ldr	r3, [pc, #408]	; (8002770 <HAL_GPIO_Init+0x324>)
 80025d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025da:	4a65      	ldr	r2, [pc, #404]	; (8002770 <HAL_GPIO_Init+0x324>)
 80025dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025e0:	6453      	str	r3, [r2, #68]	; 0x44
 80025e2:	4b63      	ldr	r3, [pc, #396]	; (8002770 <HAL_GPIO_Init+0x324>)
 80025e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ea:	60fb      	str	r3, [r7, #12]
 80025ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80025ee:	4a61      	ldr	r2, [pc, #388]	; (8002774 <HAL_GPIO_Init+0x328>)
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	089b      	lsrs	r3, r3, #2
 80025f4:	3302      	adds	r3, #2
 80025f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	f003 0303 	and.w	r3, r3, #3
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	220f      	movs	r2, #15
 8002606:	fa02 f303 	lsl.w	r3, r2, r3
 800260a:	43db      	mvns	r3, r3
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	4013      	ands	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a58      	ldr	r2, [pc, #352]	; (8002778 <HAL_GPIO_Init+0x32c>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d037      	beq.n	800268a <HAL_GPIO_Init+0x23e>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a57      	ldr	r2, [pc, #348]	; (800277c <HAL_GPIO_Init+0x330>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d031      	beq.n	8002686 <HAL_GPIO_Init+0x23a>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a56      	ldr	r2, [pc, #344]	; (8002780 <HAL_GPIO_Init+0x334>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d02b      	beq.n	8002682 <HAL_GPIO_Init+0x236>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a55      	ldr	r2, [pc, #340]	; (8002784 <HAL_GPIO_Init+0x338>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d025      	beq.n	800267e <HAL_GPIO_Init+0x232>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a54      	ldr	r2, [pc, #336]	; (8002788 <HAL_GPIO_Init+0x33c>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d01f      	beq.n	800267a <HAL_GPIO_Init+0x22e>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a53      	ldr	r2, [pc, #332]	; (800278c <HAL_GPIO_Init+0x340>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d019      	beq.n	8002676 <HAL_GPIO_Init+0x22a>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a52      	ldr	r2, [pc, #328]	; (8002790 <HAL_GPIO_Init+0x344>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d013      	beq.n	8002672 <HAL_GPIO_Init+0x226>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a51      	ldr	r2, [pc, #324]	; (8002794 <HAL_GPIO_Init+0x348>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d00d      	beq.n	800266e <HAL_GPIO_Init+0x222>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a50      	ldr	r2, [pc, #320]	; (8002798 <HAL_GPIO_Init+0x34c>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d007      	beq.n	800266a <HAL_GPIO_Init+0x21e>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a4f      	ldr	r2, [pc, #316]	; (800279c <HAL_GPIO_Init+0x350>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d101      	bne.n	8002666 <HAL_GPIO_Init+0x21a>
 8002662:	2309      	movs	r3, #9
 8002664:	e012      	b.n	800268c <HAL_GPIO_Init+0x240>
 8002666:	230a      	movs	r3, #10
 8002668:	e010      	b.n	800268c <HAL_GPIO_Init+0x240>
 800266a:	2308      	movs	r3, #8
 800266c:	e00e      	b.n	800268c <HAL_GPIO_Init+0x240>
 800266e:	2307      	movs	r3, #7
 8002670:	e00c      	b.n	800268c <HAL_GPIO_Init+0x240>
 8002672:	2306      	movs	r3, #6
 8002674:	e00a      	b.n	800268c <HAL_GPIO_Init+0x240>
 8002676:	2305      	movs	r3, #5
 8002678:	e008      	b.n	800268c <HAL_GPIO_Init+0x240>
 800267a:	2304      	movs	r3, #4
 800267c:	e006      	b.n	800268c <HAL_GPIO_Init+0x240>
 800267e:	2303      	movs	r3, #3
 8002680:	e004      	b.n	800268c <HAL_GPIO_Init+0x240>
 8002682:	2302      	movs	r3, #2
 8002684:	e002      	b.n	800268c <HAL_GPIO_Init+0x240>
 8002686:	2301      	movs	r3, #1
 8002688:	e000      	b.n	800268c <HAL_GPIO_Init+0x240>
 800268a:	2300      	movs	r3, #0
 800268c:	69fa      	ldr	r2, [r7, #28]
 800268e:	f002 0203 	and.w	r2, r2, #3
 8002692:	0092      	lsls	r2, r2, #2
 8002694:	4093      	lsls	r3, r2
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	4313      	orrs	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800269c:	4935      	ldr	r1, [pc, #212]	; (8002774 <HAL_GPIO_Init+0x328>)
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	089b      	lsrs	r3, r3, #2
 80026a2:	3302      	adds	r3, #2
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026aa:	4b3d      	ldr	r3, [pc, #244]	; (80027a0 <HAL_GPIO_Init+0x354>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	43db      	mvns	r3, r3
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	4013      	ands	r3, r2
 80026b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d003      	beq.n	80026ce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026ce:	4a34      	ldr	r2, [pc, #208]	; (80027a0 <HAL_GPIO_Init+0x354>)
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80026d4:	4b32      	ldr	r3, [pc, #200]	; (80027a0 <HAL_GPIO_Init+0x354>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	43db      	mvns	r3, r3
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	4013      	ands	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d003      	beq.n	80026f8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026f8:	4a29      	ldr	r2, [pc, #164]	; (80027a0 <HAL_GPIO_Init+0x354>)
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026fe:	4b28      	ldr	r3, [pc, #160]	; (80027a0 <HAL_GPIO_Init+0x354>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	43db      	mvns	r3, r3
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	4013      	ands	r3, r2
 800270c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d003      	beq.n	8002722 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	4313      	orrs	r3, r2
 8002720:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002722:	4a1f      	ldr	r2, [pc, #124]	; (80027a0 <HAL_GPIO_Init+0x354>)
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002728:	4b1d      	ldr	r3, [pc, #116]	; (80027a0 <HAL_GPIO_Init+0x354>)
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	43db      	mvns	r3, r3
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	4013      	ands	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d003      	beq.n	800274c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	4313      	orrs	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800274c:	4a14      	ldr	r2, [pc, #80]	; (80027a0 <HAL_GPIO_Init+0x354>)
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	3301      	adds	r3, #1
 8002756:	61fb      	str	r3, [r7, #28]
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	2b0f      	cmp	r3, #15
 800275c:	f67f ae86 	bls.w	800246c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002760:	bf00      	nop
 8002762:	bf00      	nop
 8002764:	3724      	adds	r7, #36	; 0x24
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	40023800 	.word	0x40023800
 8002774:	40013800 	.word	0x40013800
 8002778:	40020000 	.word	0x40020000
 800277c:	40020400 	.word	0x40020400
 8002780:	40020800 	.word	0x40020800
 8002784:	40020c00 	.word	0x40020c00
 8002788:	40021000 	.word	0x40021000
 800278c:	40021400 	.word	0x40021400
 8002790:	40021800 	.word	0x40021800
 8002794:	40021c00 	.word	0x40021c00
 8002798:	40022000 	.word	0x40022000
 800279c:	40022400 	.word	0x40022400
 80027a0:	40013c00 	.word	0x40013c00

080027a4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b087      	sub	sp, #28
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80027ae:	2300      	movs	r3, #0
 80027b0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80027b2:	2300      	movs	r3, #0
 80027b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80027b6:	2300      	movs	r3, #0
 80027b8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80027ba:	2300      	movs	r3, #0
 80027bc:	617b      	str	r3, [r7, #20]
 80027be:	e0d9      	b.n	8002974 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80027c0:	2201      	movs	r2, #1
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80027ca:	683a      	ldr	r2, [r7, #0]
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	4013      	ands	r3, r2
 80027d0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	f040 80c9 	bne.w	800296e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80027dc:	4a6b      	ldr	r2, [pc, #428]	; (800298c <HAL_GPIO_DeInit+0x1e8>)
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	089b      	lsrs	r3, r3, #2
 80027e2:	3302      	adds	r3, #2
 80027e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027e8:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	f003 0303 	and.w	r3, r3, #3
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	220f      	movs	r2, #15
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	68ba      	ldr	r2, [r7, #8]
 80027fa:	4013      	ands	r3, r2
 80027fc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a63      	ldr	r2, [pc, #396]	; (8002990 <HAL_GPIO_DeInit+0x1ec>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d037      	beq.n	8002876 <HAL_GPIO_DeInit+0xd2>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a62      	ldr	r2, [pc, #392]	; (8002994 <HAL_GPIO_DeInit+0x1f0>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d031      	beq.n	8002872 <HAL_GPIO_DeInit+0xce>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a61      	ldr	r2, [pc, #388]	; (8002998 <HAL_GPIO_DeInit+0x1f4>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d02b      	beq.n	800286e <HAL_GPIO_DeInit+0xca>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a60      	ldr	r2, [pc, #384]	; (800299c <HAL_GPIO_DeInit+0x1f8>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d025      	beq.n	800286a <HAL_GPIO_DeInit+0xc6>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a5f      	ldr	r2, [pc, #380]	; (80029a0 <HAL_GPIO_DeInit+0x1fc>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d01f      	beq.n	8002866 <HAL_GPIO_DeInit+0xc2>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a5e      	ldr	r2, [pc, #376]	; (80029a4 <HAL_GPIO_DeInit+0x200>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d019      	beq.n	8002862 <HAL_GPIO_DeInit+0xbe>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a5d      	ldr	r2, [pc, #372]	; (80029a8 <HAL_GPIO_DeInit+0x204>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d013      	beq.n	800285e <HAL_GPIO_DeInit+0xba>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a5c      	ldr	r2, [pc, #368]	; (80029ac <HAL_GPIO_DeInit+0x208>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d00d      	beq.n	800285a <HAL_GPIO_DeInit+0xb6>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a5b      	ldr	r2, [pc, #364]	; (80029b0 <HAL_GPIO_DeInit+0x20c>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d007      	beq.n	8002856 <HAL_GPIO_DeInit+0xb2>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a5a      	ldr	r2, [pc, #360]	; (80029b4 <HAL_GPIO_DeInit+0x210>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d101      	bne.n	8002852 <HAL_GPIO_DeInit+0xae>
 800284e:	2309      	movs	r3, #9
 8002850:	e012      	b.n	8002878 <HAL_GPIO_DeInit+0xd4>
 8002852:	230a      	movs	r3, #10
 8002854:	e010      	b.n	8002878 <HAL_GPIO_DeInit+0xd4>
 8002856:	2308      	movs	r3, #8
 8002858:	e00e      	b.n	8002878 <HAL_GPIO_DeInit+0xd4>
 800285a:	2307      	movs	r3, #7
 800285c:	e00c      	b.n	8002878 <HAL_GPIO_DeInit+0xd4>
 800285e:	2306      	movs	r3, #6
 8002860:	e00a      	b.n	8002878 <HAL_GPIO_DeInit+0xd4>
 8002862:	2305      	movs	r3, #5
 8002864:	e008      	b.n	8002878 <HAL_GPIO_DeInit+0xd4>
 8002866:	2304      	movs	r3, #4
 8002868:	e006      	b.n	8002878 <HAL_GPIO_DeInit+0xd4>
 800286a:	2303      	movs	r3, #3
 800286c:	e004      	b.n	8002878 <HAL_GPIO_DeInit+0xd4>
 800286e:	2302      	movs	r3, #2
 8002870:	e002      	b.n	8002878 <HAL_GPIO_DeInit+0xd4>
 8002872:	2301      	movs	r3, #1
 8002874:	e000      	b.n	8002878 <HAL_GPIO_DeInit+0xd4>
 8002876:	2300      	movs	r3, #0
 8002878:	697a      	ldr	r2, [r7, #20]
 800287a:	f002 0203 	and.w	r2, r2, #3
 800287e:	0092      	lsls	r2, r2, #2
 8002880:	4093      	lsls	r3, r2
 8002882:	68ba      	ldr	r2, [r7, #8]
 8002884:	429a      	cmp	r2, r3
 8002886:	d132      	bne.n	80028ee <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002888:	4b4b      	ldr	r3, [pc, #300]	; (80029b8 <HAL_GPIO_DeInit+0x214>)
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	43db      	mvns	r3, r3
 8002890:	4949      	ldr	r1, [pc, #292]	; (80029b8 <HAL_GPIO_DeInit+0x214>)
 8002892:	4013      	ands	r3, r2
 8002894:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002896:	4b48      	ldr	r3, [pc, #288]	; (80029b8 <HAL_GPIO_DeInit+0x214>)
 8002898:	685a      	ldr	r2, [r3, #4]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	43db      	mvns	r3, r3
 800289e:	4946      	ldr	r1, [pc, #280]	; (80029b8 <HAL_GPIO_DeInit+0x214>)
 80028a0:	4013      	ands	r3, r2
 80028a2:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80028a4:	4b44      	ldr	r3, [pc, #272]	; (80029b8 <HAL_GPIO_DeInit+0x214>)
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	43db      	mvns	r3, r3
 80028ac:	4942      	ldr	r1, [pc, #264]	; (80029b8 <HAL_GPIO_DeInit+0x214>)
 80028ae:	4013      	ands	r3, r2
 80028b0:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80028b2:	4b41      	ldr	r3, [pc, #260]	; (80029b8 <HAL_GPIO_DeInit+0x214>)
 80028b4:	68da      	ldr	r2, [r3, #12]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	43db      	mvns	r3, r3
 80028ba:	493f      	ldr	r1, [pc, #252]	; (80029b8 <HAL_GPIO_DeInit+0x214>)
 80028bc:	4013      	ands	r3, r2
 80028be:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	f003 0303 	and.w	r3, r3, #3
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	220f      	movs	r2, #15
 80028ca:	fa02 f303 	lsl.w	r3, r2, r3
 80028ce:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80028d0:	4a2e      	ldr	r2, [pc, #184]	; (800298c <HAL_GPIO_DeInit+0x1e8>)
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	089b      	lsrs	r3, r3, #2
 80028d6:	3302      	adds	r3, #2
 80028d8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	43da      	mvns	r2, r3
 80028e0:	482a      	ldr	r0, [pc, #168]	; (800298c <HAL_GPIO_DeInit+0x1e8>)
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	089b      	lsrs	r3, r3, #2
 80028e6:	400a      	ands	r2, r1
 80028e8:	3302      	adds	r3, #2
 80028ea:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	2103      	movs	r1, #3
 80028f8:	fa01 f303 	lsl.w	r3, r1, r3
 80028fc:	43db      	mvns	r3, r3
 80028fe:	401a      	ands	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	08da      	lsrs	r2, r3, #3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	3208      	adds	r2, #8
 800290c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	f003 0307 	and.w	r3, r3, #7
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	220f      	movs	r2, #15
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	43db      	mvns	r3, r3
 8002920:	697a      	ldr	r2, [r7, #20]
 8002922:	08d2      	lsrs	r2, r2, #3
 8002924:	4019      	ands	r1, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	3208      	adds	r2, #8
 800292a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	68da      	ldr	r2, [r3, #12]
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	2103      	movs	r1, #3
 8002938:	fa01 f303 	lsl.w	r3, r1, r3
 800293c:	43db      	mvns	r3, r3
 800293e:	401a      	ands	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685a      	ldr	r2, [r3, #4]
 8002948:	2101      	movs	r1, #1
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	fa01 f303 	lsl.w	r3, r1, r3
 8002950:	43db      	mvns	r3, r3
 8002952:	401a      	ands	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689a      	ldr	r2, [r3, #8]
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	2103      	movs	r1, #3
 8002962:	fa01 f303 	lsl.w	r3, r1, r3
 8002966:	43db      	mvns	r3, r3
 8002968:	401a      	ands	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	3301      	adds	r3, #1
 8002972:	617b      	str	r3, [r7, #20]
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	2b0f      	cmp	r3, #15
 8002978:	f67f af22 	bls.w	80027c0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800297c:	bf00      	nop
 800297e:	bf00      	nop
 8002980:	371c      	adds	r7, #28
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	40013800 	.word	0x40013800
 8002990:	40020000 	.word	0x40020000
 8002994:	40020400 	.word	0x40020400
 8002998:	40020800 	.word	0x40020800
 800299c:	40020c00 	.word	0x40020c00
 80029a0:	40021000 	.word	0x40021000
 80029a4:	40021400 	.word	0x40021400
 80029a8:	40021800 	.word	0x40021800
 80029ac:	40021c00 	.word	0x40021c00
 80029b0:	40022000 	.word	0x40022000
 80029b4:	40022400 	.word	0x40022400
 80029b8:	40013c00 	.word	0x40013c00

080029bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	460b      	mov	r3, r1
 80029c6:	807b      	strh	r3, [r7, #2]
 80029c8:	4613      	mov	r3, r2
 80029ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029cc:	787b      	ldrb	r3, [r7, #1]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d003      	beq.n	80029da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029d2:	887a      	ldrh	r2, [r7, #2]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80029d8:	e003      	b.n	80029e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80029da:	887b      	ldrh	r3, [r7, #2]
 80029dc:	041a      	lsls	r2, r3, #16
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	619a      	str	r2, [r3, #24]
}
 80029e2:	bf00      	nop
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr

080029ee <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029ee:	b480      	push	{r7}
 80029f0:	b085      	sub	sp, #20
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
 80029f6:	460b      	mov	r3, r1
 80029f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	695b      	ldr	r3, [r3, #20]
 80029fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a00:	887a      	ldrh	r2, [r7, #2]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	4013      	ands	r3, r2
 8002a06:	041a      	lsls	r2, r3, #16
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	43d9      	mvns	r1, r3
 8002a0c:	887b      	ldrh	r3, [r7, #2]
 8002a0e:	400b      	ands	r3, r1
 8002a10:	431a      	orrs	r2, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	619a      	str	r2, [r3, #24]
}
 8002a16:	bf00      	nop
 8002a18:	3714      	adds	r7, #20
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
	...

08002a24 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a28:	4b05      	ldr	r3, [pc, #20]	; (8002a40 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a04      	ldr	r2, [pc, #16]	; (8002a40 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a32:	6013      	str	r3, [r2, #0]
}
 8002a34:	bf00      	nop
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	40007000 	.word	0x40007000

08002a44 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002a4e:	4b23      	ldr	r3, [pc, #140]	; (8002adc <HAL_PWREx_EnableOverDrive+0x98>)
 8002a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a52:	4a22      	ldr	r2, [pc, #136]	; (8002adc <HAL_PWREx_EnableOverDrive+0x98>)
 8002a54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a58:	6413      	str	r3, [r2, #64]	; 0x40
 8002a5a:	4b20      	ldr	r3, [pc, #128]	; (8002adc <HAL_PWREx_EnableOverDrive+0x98>)
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a62:	603b      	str	r3, [r7, #0]
 8002a64:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002a66:	4b1e      	ldr	r3, [pc, #120]	; (8002ae0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a1d      	ldr	r2, [pc, #116]	; (8002ae0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a70:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a72:	f7fe fc77 	bl	8001364 <HAL_GetTick>
 8002a76:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a78:	e009      	b.n	8002a8e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a7a:	f7fe fc73 	bl	8001364 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a88:	d901      	bls.n	8002a8e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e022      	b.n	8002ad4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a8e:	4b14      	ldr	r3, [pc, #80]	; (8002ae0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a9a:	d1ee      	bne.n	8002a7a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002a9c:	4b10      	ldr	r3, [pc, #64]	; (8002ae0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a0f      	ldr	r2, [pc, #60]	; (8002ae0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002aa2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aa6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002aa8:	f7fe fc5c 	bl	8001364 <HAL_GetTick>
 8002aac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002aae:	e009      	b.n	8002ac4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ab0:	f7fe fc58 	bl	8001364 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002abe:	d901      	bls.n	8002ac4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e007      	b.n	8002ad4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002ac4:	4b06      	ldr	r3, [pc, #24]	; (8002ae0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002acc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ad0:	d1ee      	bne.n	8002ab0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3708      	adds	r7, #8
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	40023800 	.word	0x40023800
 8002ae0:	40007000 	.word	0x40007000

08002ae4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002aec:	2300      	movs	r3, #0
 8002aee:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e29b      	b.n	8003032 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	f000 8087 	beq.w	8002c16 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b08:	4b96      	ldr	r3, [pc, #600]	; (8002d64 <HAL_RCC_OscConfig+0x280>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f003 030c 	and.w	r3, r3, #12
 8002b10:	2b04      	cmp	r3, #4
 8002b12:	d00c      	beq.n	8002b2e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b14:	4b93      	ldr	r3, [pc, #588]	; (8002d64 <HAL_RCC_OscConfig+0x280>)
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f003 030c 	and.w	r3, r3, #12
 8002b1c:	2b08      	cmp	r3, #8
 8002b1e:	d112      	bne.n	8002b46 <HAL_RCC_OscConfig+0x62>
 8002b20:	4b90      	ldr	r3, [pc, #576]	; (8002d64 <HAL_RCC_OscConfig+0x280>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b2c:	d10b      	bne.n	8002b46 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b2e:	4b8d      	ldr	r3, [pc, #564]	; (8002d64 <HAL_RCC_OscConfig+0x280>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d06c      	beq.n	8002c14 <HAL_RCC_OscConfig+0x130>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d168      	bne.n	8002c14 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e275      	b.n	8003032 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b4e:	d106      	bne.n	8002b5e <HAL_RCC_OscConfig+0x7a>
 8002b50:	4b84      	ldr	r3, [pc, #528]	; (8002d64 <HAL_RCC_OscConfig+0x280>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a83      	ldr	r2, [pc, #524]	; (8002d64 <HAL_RCC_OscConfig+0x280>)
 8002b56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b5a:	6013      	str	r3, [r2, #0]
 8002b5c:	e02e      	b.n	8002bbc <HAL_RCC_OscConfig+0xd8>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d10c      	bne.n	8002b80 <HAL_RCC_OscConfig+0x9c>
 8002b66:	4b7f      	ldr	r3, [pc, #508]	; (8002d64 <HAL_RCC_OscConfig+0x280>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a7e      	ldr	r2, [pc, #504]	; (8002d64 <HAL_RCC_OscConfig+0x280>)
 8002b6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b70:	6013      	str	r3, [r2, #0]
 8002b72:	4b7c      	ldr	r3, [pc, #496]	; (8002d64 <HAL_RCC_OscConfig+0x280>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a7b      	ldr	r2, [pc, #492]	; (8002d64 <HAL_RCC_OscConfig+0x280>)
 8002b78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b7c:	6013      	str	r3, [r2, #0]
 8002b7e:	e01d      	b.n	8002bbc <HAL_RCC_OscConfig+0xd8>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b88:	d10c      	bne.n	8002ba4 <HAL_RCC_OscConfig+0xc0>
 8002b8a:	4b76      	ldr	r3, [pc, #472]	; (8002d64 <HAL_RCC_OscConfig+0x280>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a75      	ldr	r2, [pc, #468]	; (8002d64 <HAL_RCC_OscConfig+0x280>)
 8002b90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b94:	6013      	str	r3, [r2, #0]
 8002b96:	4b73      	ldr	r3, [pc, #460]	; (8002d64 <HAL_RCC_OscConfig+0x280>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a72      	ldr	r2, [pc, #456]	; (8002d64 <HAL_RCC_OscConfig+0x280>)
 8002b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ba0:	6013      	str	r3, [r2, #0]
 8002ba2:	e00b      	b.n	8002bbc <HAL_RCC_OscConfig+0xd8>
 8002ba4:	4b6f      	ldr	r3, [pc, #444]	; (8002d64 <HAL_RCC_OscConfig+0x280>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a6e      	ldr	r2, [pc, #440]	; (8002d64 <HAL_RCC_OscConfig+0x280>)
 8002baa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bae:	6013      	str	r3, [r2, #0]
 8002bb0:	4b6c      	ldr	r3, [pc, #432]	; (8002d64 <HAL_RCC_OscConfig+0x280>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a6b      	ldr	r2, [pc, #428]	; (8002d64 <HAL_RCC_OscConfig+0x280>)
 8002bb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d013      	beq.n	8002bec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc4:	f7fe fbce 	bl	8001364 <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bcc:	f7fe fbca 	bl	8001364 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b64      	cmp	r3, #100	; 0x64
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e229      	b.n	8003032 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bde:	4b61      	ldr	r3, [pc, #388]	; (8002d64 <HAL_RCC_OscConfig+0x280>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d0f0      	beq.n	8002bcc <HAL_RCC_OscConfig+0xe8>
 8002bea:	e014      	b.n	8002c16 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bec:	f7fe fbba 	bl	8001364 <HAL_GetTick>
 8002bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bf2:	e008      	b.n	8002c06 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bf4:	f7fe fbb6 	bl	8001364 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b64      	cmp	r3, #100	; 0x64
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e215      	b.n	8003032 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c06:	4b57      	ldr	r3, [pc, #348]	; (8002d64 <HAL_RCC_OscConfig+0x280>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1f0      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x110>
 8002c12:	e000      	b.n	8002c16 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d069      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c22:	4b50      	ldr	r3, [pc, #320]	; (8002d64 <HAL_RCC_OscConfig+0x280>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f003 030c 	and.w	r3, r3, #12
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00b      	beq.n	8002c46 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c2e:	4b4d      	ldr	r3, [pc, #308]	; (8002d64 <HAL_RCC_OscConfig+0x280>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f003 030c 	and.w	r3, r3, #12
 8002c36:	2b08      	cmp	r3, #8
 8002c38:	d11c      	bne.n	8002c74 <HAL_RCC_OscConfig+0x190>
 8002c3a:	4b4a      	ldr	r3, [pc, #296]	; (8002d64 <HAL_RCC_OscConfig+0x280>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d116      	bne.n	8002c74 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c46:	4b47      	ldr	r3, [pc, #284]	; (8002d64 <HAL_RCC_OscConfig+0x280>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d005      	beq.n	8002c5e <HAL_RCC_OscConfig+0x17a>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d001      	beq.n	8002c5e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e1e9      	b.n	8003032 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c5e:	4b41      	ldr	r3, [pc, #260]	; (8002d64 <HAL_RCC_OscConfig+0x280>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	493d      	ldr	r1, [pc, #244]	; (8002d64 <HAL_RCC_OscConfig+0x280>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c72:	e040      	b.n	8002cf6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d023      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c7c:	4b39      	ldr	r3, [pc, #228]	; (8002d64 <HAL_RCC_OscConfig+0x280>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a38      	ldr	r2, [pc, #224]	; (8002d64 <HAL_RCC_OscConfig+0x280>)
 8002c82:	f043 0301 	orr.w	r3, r3, #1
 8002c86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c88:	f7fe fb6c 	bl	8001364 <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c90:	f7fe fb68 	bl	8001364 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e1c7      	b.n	8003032 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ca2:	4b30      	ldr	r3, [pc, #192]	; (8002d64 <HAL_RCC_OscConfig+0x280>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d0f0      	beq.n	8002c90 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cae:	4b2d      	ldr	r3, [pc, #180]	; (8002d64 <HAL_RCC_OscConfig+0x280>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	4929      	ldr	r1, [pc, #164]	; (8002d64 <HAL_RCC_OscConfig+0x280>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	600b      	str	r3, [r1, #0]
 8002cc2:	e018      	b.n	8002cf6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cc4:	4b27      	ldr	r3, [pc, #156]	; (8002d64 <HAL_RCC_OscConfig+0x280>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a26      	ldr	r2, [pc, #152]	; (8002d64 <HAL_RCC_OscConfig+0x280>)
 8002cca:	f023 0301 	bic.w	r3, r3, #1
 8002cce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd0:	f7fe fb48 	bl	8001364 <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cd6:	e008      	b.n	8002cea <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cd8:	f7fe fb44 	bl	8001364 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e1a3      	b.n	8003032 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cea:	4b1e      	ldr	r3, [pc, #120]	; (8002d64 <HAL_RCC_OscConfig+0x280>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d1f0      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0308 	and.w	r3, r3, #8
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d038      	beq.n	8002d74 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	695b      	ldr	r3, [r3, #20]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d019      	beq.n	8002d3e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d0a:	4b16      	ldr	r3, [pc, #88]	; (8002d64 <HAL_RCC_OscConfig+0x280>)
 8002d0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d0e:	4a15      	ldr	r2, [pc, #84]	; (8002d64 <HAL_RCC_OscConfig+0x280>)
 8002d10:	f043 0301 	orr.w	r3, r3, #1
 8002d14:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d16:	f7fe fb25 	bl	8001364 <HAL_GetTick>
 8002d1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d1c:	e008      	b.n	8002d30 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d1e:	f7fe fb21 	bl	8001364 <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d901      	bls.n	8002d30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e180      	b.n	8003032 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d30:	4b0c      	ldr	r3, [pc, #48]	; (8002d64 <HAL_RCC_OscConfig+0x280>)
 8002d32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d0f0      	beq.n	8002d1e <HAL_RCC_OscConfig+0x23a>
 8002d3c:	e01a      	b.n	8002d74 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d3e:	4b09      	ldr	r3, [pc, #36]	; (8002d64 <HAL_RCC_OscConfig+0x280>)
 8002d40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d42:	4a08      	ldr	r2, [pc, #32]	; (8002d64 <HAL_RCC_OscConfig+0x280>)
 8002d44:	f023 0301 	bic.w	r3, r3, #1
 8002d48:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d4a:	f7fe fb0b 	bl	8001364 <HAL_GetTick>
 8002d4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d50:	e00a      	b.n	8002d68 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d52:	f7fe fb07 	bl	8001364 <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d903      	bls.n	8002d68 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e166      	b.n	8003032 <HAL_RCC_OscConfig+0x54e>
 8002d64:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d68:	4b92      	ldr	r3, [pc, #584]	; (8002fb4 <HAL_RCC_OscConfig+0x4d0>)
 8002d6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d6c:	f003 0302 	and.w	r3, r3, #2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d1ee      	bne.n	8002d52 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0304 	and.w	r3, r3, #4
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f000 80a4 	beq.w	8002eca <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d82:	4b8c      	ldr	r3, [pc, #560]	; (8002fb4 <HAL_RCC_OscConfig+0x4d0>)
 8002d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d10d      	bne.n	8002daa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d8e:	4b89      	ldr	r3, [pc, #548]	; (8002fb4 <HAL_RCC_OscConfig+0x4d0>)
 8002d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d92:	4a88      	ldr	r2, [pc, #544]	; (8002fb4 <HAL_RCC_OscConfig+0x4d0>)
 8002d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d98:	6413      	str	r3, [r2, #64]	; 0x40
 8002d9a:	4b86      	ldr	r3, [pc, #536]	; (8002fb4 <HAL_RCC_OscConfig+0x4d0>)
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002da2:	60bb      	str	r3, [r7, #8]
 8002da4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002da6:	2301      	movs	r3, #1
 8002da8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002daa:	4b83      	ldr	r3, [pc, #524]	; (8002fb8 <HAL_RCC_OscConfig+0x4d4>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d118      	bne.n	8002de8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002db6:	4b80      	ldr	r3, [pc, #512]	; (8002fb8 <HAL_RCC_OscConfig+0x4d4>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a7f      	ldr	r2, [pc, #508]	; (8002fb8 <HAL_RCC_OscConfig+0x4d4>)
 8002dbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dc2:	f7fe facf 	bl	8001364 <HAL_GetTick>
 8002dc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dc8:	e008      	b.n	8002ddc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dca:	f7fe facb 	bl	8001364 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	2b64      	cmp	r3, #100	; 0x64
 8002dd6:	d901      	bls.n	8002ddc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e12a      	b.n	8003032 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ddc:	4b76      	ldr	r3, [pc, #472]	; (8002fb8 <HAL_RCC_OscConfig+0x4d4>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d0f0      	beq.n	8002dca <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d106      	bne.n	8002dfe <HAL_RCC_OscConfig+0x31a>
 8002df0:	4b70      	ldr	r3, [pc, #448]	; (8002fb4 <HAL_RCC_OscConfig+0x4d0>)
 8002df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df4:	4a6f      	ldr	r2, [pc, #444]	; (8002fb4 <HAL_RCC_OscConfig+0x4d0>)
 8002df6:	f043 0301 	orr.w	r3, r3, #1
 8002dfa:	6713      	str	r3, [r2, #112]	; 0x70
 8002dfc:	e02d      	b.n	8002e5a <HAL_RCC_OscConfig+0x376>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d10c      	bne.n	8002e20 <HAL_RCC_OscConfig+0x33c>
 8002e06:	4b6b      	ldr	r3, [pc, #428]	; (8002fb4 <HAL_RCC_OscConfig+0x4d0>)
 8002e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e0a:	4a6a      	ldr	r2, [pc, #424]	; (8002fb4 <HAL_RCC_OscConfig+0x4d0>)
 8002e0c:	f023 0301 	bic.w	r3, r3, #1
 8002e10:	6713      	str	r3, [r2, #112]	; 0x70
 8002e12:	4b68      	ldr	r3, [pc, #416]	; (8002fb4 <HAL_RCC_OscConfig+0x4d0>)
 8002e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e16:	4a67      	ldr	r2, [pc, #412]	; (8002fb4 <HAL_RCC_OscConfig+0x4d0>)
 8002e18:	f023 0304 	bic.w	r3, r3, #4
 8002e1c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e1e:	e01c      	b.n	8002e5a <HAL_RCC_OscConfig+0x376>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	2b05      	cmp	r3, #5
 8002e26:	d10c      	bne.n	8002e42 <HAL_RCC_OscConfig+0x35e>
 8002e28:	4b62      	ldr	r3, [pc, #392]	; (8002fb4 <HAL_RCC_OscConfig+0x4d0>)
 8002e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2c:	4a61      	ldr	r2, [pc, #388]	; (8002fb4 <HAL_RCC_OscConfig+0x4d0>)
 8002e2e:	f043 0304 	orr.w	r3, r3, #4
 8002e32:	6713      	str	r3, [r2, #112]	; 0x70
 8002e34:	4b5f      	ldr	r3, [pc, #380]	; (8002fb4 <HAL_RCC_OscConfig+0x4d0>)
 8002e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e38:	4a5e      	ldr	r2, [pc, #376]	; (8002fb4 <HAL_RCC_OscConfig+0x4d0>)
 8002e3a:	f043 0301 	orr.w	r3, r3, #1
 8002e3e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e40:	e00b      	b.n	8002e5a <HAL_RCC_OscConfig+0x376>
 8002e42:	4b5c      	ldr	r3, [pc, #368]	; (8002fb4 <HAL_RCC_OscConfig+0x4d0>)
 8002e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e46:	4a5b      	ldr	r2, [pc, #364]	; (8002fb4 <HAL_RCC_OscConfig+0x4d0>)
 8002e48:	f023 0301 	bic.w	r3, r3, #1
 8002e4c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e4e:	4b59      	ldr	r3, [pc, #356]	; (8002fb4 <HAL_RCC_OscConfig+0x4d0>)
 8002e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e52:	4a58      	ldr	r2, [pc, #352]	; (8002fb4 <HAL_RCC_OscConfig+0x4d0>)
 8002e54:	f023 0304 	bic.w	r3, r3, #4
 8002e58:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d015      	beq.n	8002e8e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e62:	f7fe fa7f 	bl	8001364 <HAL_GetTick>
 8002e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e68:	e00a      	b.n	8002e80 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e6a:	f7fe fa7b 	bl	8001364 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d901      	bls.n	8002e80 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e0d8      	b.n	8003032 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e80:	4b4c      	ldr	r3, [pc, #304]	; (8002fb4 <HAL_RCC_OscConfig+0x4d0>)
 8002e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d0ee      	beq.n	8002e6a <HAL_RCC_OscConfig+0x386>
 8002e8c:	e014      	b.n	8002eb8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e8e:	f7fe fa69 	bl	8001364 <HAL_GetTick>
 8002e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e94:	e00a      	b.n	8002eac <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e96:	f7fe fa65 	bl	8001364 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d901      	bls.n	8002eac <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e0c2      	b.n	8003032 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eac:	4b41      	ldr	r3, [pc, #260]	; (8002fb4 <HAL_RCC_OscConfig+0x4d0>)
 8002eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb0:	f003 0302 	and.w	r3, r3, #2
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1ee      	bne.n	8002e96 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002eb8:	7dfb      	ldrb	r3, [r7, #23]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d105      	bne.n	8002eca <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ebe:	4b3d      	ldr	r3, [pc, #244]	; (8002fb4 <HAL_RCC_OscConfig+0x4d0>)
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	4a3c      	ldr	r2, [pc, #240]	; (8002fb4 <HAL_RCC_OscConfig+0x4d0>)
 8002ec4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ec8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	f000 80ae 	beq.w	8003030 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ed4:	4b37      	ldr	r3, [pc, #220]	; (8002fb4 <HAL_RCC_OscConfig+0x4d0>)
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f003 030c 	and.w	r3, r3, #12
 8002edc:	2b08      	cmp	r3, #8
 8002ede:	d06d      	beq.n	8002fbc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d14b      	bne.n	8002f80 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ee8:	4b32      	ldr	r3, [pc, #200]	; (8002fb4 <HAL_RCC_OscConfig+0x4d0>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a31      	ldr	r2, [pc, #196]	; (8002fb4 <HAL_RCC_OscConfig+0x4d0>)
 8002eee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ef2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef4:	f7fe fa36 	bl	8001364 <HAL_GetTick>
 8002ef8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002efa:	e008      	b.n	8002f0e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002efc:	f7fe fa32 	bl	8001364 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e091      	b.n	8003032 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f0e:	4b29      	ldr	r3, [pc, #164]	; (8002fb4 <HAL_RCC_OscConfig+0x4d0>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1f0      	bne.n	8002efc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	69da      	ldr	r2, [r3, #28]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a1b      	ldr	r3, [r3, #32]
 8002f22:	431a      	orrs	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f28:	019b      	lsls	r3, r3, #6
 8002f2a:	431a      	orrs	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f30:	085b      	lsrs	r3, r3, #1
 8002f32:	3b01      	subs	r3, #1
 8002f34:	041b      	lsls	r3, r3, #16
 8002f36:	431a      	orrs	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3c:	061b      	lsls	r3, r3, #24
 8002f3e:	431a      	orrs	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f44:	071b      	lsls	r3, r3, #28
 8002f46:	491b      	ldr	r1, [pc, #108]	; (8002fb4 <HAL_RCC_OscConfig+0x4d0>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f4c:	4b19      	ldr	r3, [pc, #100]	; (8002fb4 <HAL_RCC_OscConfig+0x4d0>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a18      	ldr	r2, [pc, #96]	; (8002fb4 <HAL_RCC_OscConfig+0x4d0>)
 8002f52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f58:	f7fe fa04 	bl	8001364 <HAL_GetTick>
 8002f5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f5e:	e008      	b.n	8002f72 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f60:	f7fe fa00 	bl	8001364 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e05f      	b.n	8003032 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f72:	4b10      	ldr	r3, [pc, #64]	; (8002fb4 <HAL_RCC_OscConfig+0x4d0>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d0f0      	beq.n	8002f60 <HAL_RCC_OscConfig+0x47c>
 8002f7e:	e057      	b.n	8003030 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f80:	4b0c      	ldr	r3, [pc, #48]	; (8002fb4 <HAL_RCC_OscConfig+0x4d0>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a0b      	ldr	r2, [pc, #44]	; (8002fb4 <HAL_RCC_OscConfig+0x4d0>)
 8002f86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f8c:	f7fe f9ea 	bl	8001364 <HAL_GetTick>
 8002f90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f92:	e008      	b.n	8002fa6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f94:	f7fe f9e6 	bl	8001364 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e045      	b.n	8003032 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fa6:	4b03      	ldr	r3, [pc, #12]	; (8002fb4 <HAL_RCC_OscConfig+0x4d0>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1f0      	bne.n	8002f94 <HAL_RCC_OscConfig+0x4b0>
 8002fb2:	e03d      	b.n	8003030 <HAL_RCC_OscConfig+0x54c>
 8002fb4:	40023800 	.word	0x40023800
 8002fb8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002fbc:	4b1f      	ldr	r3, [pc, #124]	; (800303c <HAL_RCC_OscConfig+0x558>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d030      	beq.n	800302c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d129      	bne.n	800302c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d122      	bne.n	800302c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002fec:	4013      	ands	r3, r2
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ff2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d119      	bne.n	800302c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003002:	085b      	lsrs	r3, r3, #1
 8003004:	3b01      	subs	r3, #1
 8003006:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003008:	429a      	cmp	r2, r3
 800300a:	d10f      	bne.n	800302c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003016:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003018:	429a      	cmp	r2, r3
 800301a:	d107      	bne.n	800302c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003026:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003028:	429a      	cmp	r2, r3
 800302a:	d001      	beq.n	8003030 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e000      	b.n	8003032 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3718      	adds	r7, #24
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	40023800 	.word	0x40023800

08003040 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800304a:	2300      	movs	r3, #0
 800304c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d101      	bne.n	8003058 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e0d0      	b.n	80031fa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003058:	4b6a      	ldr	r3, [pc, #424]	; (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 030f 	and.w	r3, r3, #15
 8003060:	683a      	ldr	r2, [r7, #0]
 8003062:	429a      	cmp	r2, r3
 8003064:	d910      	bls.n	8003088 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003066:	4b67      	ldr	r3, [pc, #412]	; (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f023 020f 	bic.w	r2, r3, #15
 800306e:	4965      	ldr	r1, [pc, #404]	; (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	4313      	orrs	r3, r2
 8003074:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003076:	4b63      	ldr	r3, [pc, #396]	; (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 030f 	and.w	r3, r3, #15
 800307e:	683a      	ldr	r2, [r7, #0]
 8003080:	429a      	cmp	r2, r3
 8003082:	d001      	beq.n	8003088 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e0b8      	b.n	80031fa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d020      	beq.n	80030d6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0304 	and.w	r3, r3, #4
 800309c:	2b00      	cmp	r3, #0
 800309e:	d005      	beq.n	80030ac <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030a0:	4b59      	ldr	r3, [pc, #356]	; (8003208 <HAL_RCC_ClockConfig+0x1c8>)
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	4a58      	ldr	r2, [pc, #352]	; (8003208 <HAL_RCC_ClockConfig+0x1c8>)
 80030a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030aa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0308 	and.w	r3, r3, #8
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d005      	beq.n	80030c4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030b8:	4b53      	ldr	r3, [pc, #332]	; (8003208 <HAL_RCC_ClockConfig+0x1c8>)
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	4a52      	ldr	r2, [pc, #328]	; (8003208 <HAL_RCC_ClockConfig+0x1c8>)
 80030be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030c2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030c4:	4b50      	ldr	r3, [pc, #320]	; (8003208 <HAL_RCC_ClockConfig+0x1c8>)
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	494d      	ldr	r1, [pc, #308]	; (8003208 <HAL_RCC_ClockConfig+0x1c8>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d040      	beq.n	8003164 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d107      	bne.n	80030fa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ea:	4b47      	ldr	r3, [pc, #284]	; (8003208 <HAL_RCC_ClockConfig+0x1c8>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d115      	bne.n	8003122 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e07f      	b.n	80031fa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d107      	bne.n	8003112 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003102:	4b41      	ldr	r3, [pc, #260]	; (8003208 <HAL_RCC_ClockConfig+0x1c8>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d109      	bne.n	8003122 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e073      	b.n	80031fa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003112:	4b3d      	ldr	r3, [pc, #244]	; (8003208 <HAL_RCC_ClockConfig+0x1c8>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d101      	bne.n	8003122 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e06b      	b.n	80031fa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003122:	4b39      	ldr	r3, [pc, #228]	; (8003208 <HAL_RCC_ClockConfig+0x1c8>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f023 0203 	bic.w	r2, r3, #3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	4936      	ldr	r1, [pc, #216]	; (8003208 <HAL_RCC_ClockConfig+0x1c8>)
 8003130:	4313      	orrs	r3, r2
 8003132:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003134:	f7fe f916 	bl	8001364 <HAL_GetTick>
 8003138:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800313a:	e00a      	b.n	8003152 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800313c:	f7fe f912 	bl	8001364 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	f241 3288 	movw	r2, #5000	; 0x1388
 800314a:	4293      	cmp	r3, r2
 800314c:	d901      	bls.n	8003152 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e053      	b.n	80031fa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003152:	4b2d      	ldr	r3, [pc, #180]	; (8003208 <HAL_RCC_ClockConfig+0x1c8>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f003 020c 	and.w	r2, r3, #12
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	429a      	cmp	r2, r3
 8003162:	d1eb      	bne.n	800313c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003164:	4b27      	ldr	r3, [pc, #156]	; (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 030f 	and.w	r3, r3, #15
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	429a      	cmp	r2, r3
 8003170:	d210      	bcs.n	8003194 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003172:	4b24      	ldr	r3, [pc, #144]	; (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f023 020f 	bic.w	r2, r3, #15
 800317a:	4922      	ldr	r1, [pc, #136]	; (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	4313      	orrs	r3, r2
 8003180:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003182:	4b20      	ldr	r3, [pc, #128]	; (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 030f 	and.w	r3, r3, #15
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	429a      	cmp	r2, r3
 800318e:	d001      	beq.n	8003194 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e032      	b.n	80031fa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0304 	and.w	r3, r3, #4
 800319c:	2b00      	cmp	r3, #0
 800319e:	d008      	beq.n	80031b2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031a0:	4b19      	ldr	r3, [pc, #100]	; (8003208 <HAL_RCC_ClockConfig+0x1c8>)
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	4916      	ldr	r1, [pc, #88]	; (8003208 <HAL_RCC_ClockConfig+0x1c8>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0308 	and.w	r3, r3, #8
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d009      	beq.n	80031d2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031be:	4b12      	ldr	r3, [pc, #72]	; (8003208 <HAL_RCC_ClockConfig+0x1c8>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	00db      	lsls	r3, r3, #3
 80031cc:	490e      	ldr	r1, [pc, #56]	; (8003208 <HAL_RCC_ClockConfig+0x1c8>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031d2:	f000 f821 	bl	8003218 <HAL_RCC_GetSysClockFreq>
 80031d6:	4602      	mov	r2, r0
 80031d8:	4b0b      	ldr	r3, [pc, #44]	; (8003208 <HAL_RCC_ClockConfig+0x1c8>)
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	091b      	lsrs	r3, r3, #4
 80031de:	f003 030f 	and.w	r3, r3, #15
 80031e2:	490a      	ldr	r1, [pc, #40]	; (800320c <HAL_RCC_ClockConfig+0x1cc>)
 80031e4:	5ccb      	ldrb	r3, [r1, r3]
 80031e6:	fa22 f303 	lsr.w	r3, r2, r3
 80031ea:	4a09      	ldr	r2, [pc, #36]	; (8003210 <HAL_RCC_ClockConfig+0x1d0>)
 80031ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80031ee:	4b09      	ldr	r3, [pc, #36]	; (8003214 <HAL_RCC_ClockConfig+0x1d4>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7fe f872 	bl	80012dc <HAL_InitTick>

  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	40023c00 	.word	0x40023c00
 8003208:	40023800 	.word	0x40023800
 800320c:	08005f10 	.word	0x08005f10
 8003210:	20000000 	.word	0x20000000
 8003214:	20000004 	.word	0x20000004

08003218 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003218:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800321c:	b084      	sub	sp, #16
 800321e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003220:	2300      	movs	r3, #0
 8003222:	607b      	str	r3, [r7, #4]
 8003224:	2300      	movs	r3, #0
 8003226:	60fb      	str	r3, [r7, #12]
 8003228:	2300      	movs	r3, #0
 800322a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800322c:	2300      	movs	r3, #0
 800322e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003230:	4b67      	ldr	r3, [pc, #412]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f003 030c 	and.w	r3, r3, #12
 8003238:	2b08      	cmp	r3, #8
 800323a:	d00d      	beq.n	8003258 <HAL_RCC_GetSysClockFreq+0x40>
 800323c:	2b08      	cmp	r3, #8
 800323e:	f200 80bd 	bhi.w	80033bc <HAL_RCC_GetSysClockFreq+0x1a4>
 8003242:	2b00      	cmp	r3, #0
 8003244:	d002      	beq.n	800324c <HAL_RCC_GetSysClockFreq+0x34>
 8003246:	2b04      	cmp	r3, #4
 8003248:	d003      	beq.n	8003252 <HAL_RCC_GetSysClockFreq+0x3a>
 800324a:	e0b7      	b.n	80033bc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800324c:	4b61      	ldr	r3, [pc, #388]	; (80033d4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800324e:	60bb      	str	r3, [r7, #8]
      break;
 8003250:	e0b7      	b.n	80033c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003252:	4b61      	ldr	r3, [pc, #388]	; (80033d8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003254:	60bb      	str	r3, [r7, #8]
      break;
 8003256:	e0b4      	b.n	80033c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003258:	4b5d      	ldr	r3, [pc, #372]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003260:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003262:	4b5b      	ldr	r3, [pc, #364]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d04d      	beq.n	800330a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800326e:	4b58      	ldr	r3, [pc, #352]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	099b      	lsrs	r3, r3, #6
 8003274:	461a      	mov	r2, r3
 8003276:	f04f 0300 	mov.w	r3, #0
 800327a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800327e:	f04f 0100 	mov.w	r1, #0
 8003282:	ea02 0800 	and.w	r8, r2, r0
 8003286:	ea03 0901 	and.w	r9, r3, r1
 800328a:	4640      	mov	r0, r8
 800328c:	4649      	mov	r1, r9
 800328e:	f04f 0200 	mov.w	r2, #0
 8003292:	f04f 0300 	mov.w	r3, #0
 8003296:	014b      	lsls	r3, r1, #5
 8003298:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800329c:	0142      	lsls	r2, r0, #5
 800329e:	4610      	mov	r0, r2
 80032a0:	4619      	mov	r1, r3
 80032a2:	ebb0 0008 	subs.w	r0, r0, r8
 80032a6:	eb61 0109 	sbc.w	r1, r1, r9
 80032aa:	f04f 0200 	mov.w	r2, #0
 80032ae:	f04f 0300 	mov.w	r3, #0
 80032b2:	018b      	lsls	r3, r1, #6
 80032b4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80032b8:	0182      	lsls	r2, r0, #6
 80032ba:	1a12      	subs	r2, r2, r0
 80032bc:	eb63 0301 	sbc.w	r3, r3, r1
 80032c0:	f04f 0000 	mov.w	r0, #0
 80032c4:	f04f 0100 	mov.w	r1, #0
 80032c8:	00d9      	lsls	r1, r3, #3
 80032ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80032ce:	00d0      	lsls	r0, r2, #3
 80032d0:	4602      	mov	r2, r0
 80032d2:	460b      	mov	r3, r1
 80032d4:	eb12 0208 	adds.w	r2, r2, r8
 80032d8:	eb43 0309 	adc.w	r3, r3, r9
 80032dc:	f04f 0000 	mov.w	r0, #0
 80032e0:	f04f 0100 	mov.w	r1, #0
 80032e4:	0259      	lsls	r1, r3, #9
 80032e6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80032ea:	0250      	lsls	r0, r2, #9
 80032ec:	4602      	mov	r2, r0
 80032ee:	460b      	mov	r3, r1
 80032f0:	4610      	mov	r0, r2
 80032f2:	4619      	mov	r1, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	461a      	mov	r2, r3
 80032f8:	f04f 0300 	mov.w	r3, #0
 80032fc:	f7fc fff0 	bl	80002e0 <__aeabi_uldivmod>
 8003300:	4602      	mov	r2, r0
 8003302:	460b      	mov	r3, r1
 8003304:	4613      	mov	r3, r2
 8003306:	60fb      	str	r3, [r7, #12]
 8003308:	e04a      	b.n	80033a0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800330a:	4b31      	ldr	r3, [pc, #196]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	099b      	lsrs	r3, r3, #6
 8003310:	461a      	mov	r2, r3
 8003312:	f04f 0300 	mov.w	r3, #0
 8003316:	f240 10ff 	movw	r0, #511	; 0x1ff
 800331a:	f04f 0100 	mov.w	r1, #0
 800331e:	ea02 0400 	and.w	r4, r2, r0
 8003322:	ea03 0501 	and.w	r5, r3, r1
 8003326:	4620      	mov	r0, r4
 8003328:	4629      	mov	r1, r5
 800332a:	f04f 0200 	mov.w	r2, #0
 800332e:	f04f 0300 	mov.w	r3, #0
 8003332:	014b      	lsls	r3, r1, #5
 8003334:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003338:	0142      	lsls	r2, r0, #5
 800333a:	4610      	mov	r0, r2
 800333c:	4619      	mov	r1, r3
 800333e:	1b00      	subs	r0, r0, r4
 8003340:	eb61 0105 	sbc.w	r1, r1, r5
 8003344:	f04f 0200 	mov.w	r2, #0
 8003348:	f04f 0300 	mov.w	r3, #0
 800334c:	018b      	lsls	r3, r1, #6
 800334e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003352:	0182      	lsls	r2, r0, #6
 8003354:	1a12      	subs	r2, r2, r0
 8003356:	eb63 0301 	sbc.w	r3, r3, r1
 800335a:	f04f 0000 	mov.w	r0, #0
 800335e:	f04f 0100 	mov.w	r1, #0
 8003362:	00d9      	lsls	r1, r3, #3
 8003364:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003368:	00d0      	lsls	r0, r2, #3
 800336a:	4602      	mov	r2, r0
 800336c:	460b      	mov	r3, r1
 800336e:	1912      	adds	r2, r2, r4
 8003370:	eb45 0303 	adc.w	r3, r5, r3
 8003374:	f04f 0000 	mov.w	r0, #0
 8003378:	f04f 0100 	mov.w	r1, #0
 800337c:	0299      	lsls	r1, r3, #10
 800337e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003382:	0290      	lsls	r0, r2, #10
 8003384:	4602      	mov	r2, r0
 8003386:	460b      	mov	r3, r1
 8003388:	4610      	mov	r0, r2
 800338a:	4619      	mov	r1, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	461a      	mov	r2, r3
 8003390:	f04f 0300 	mov.w	r3, #0
 8003394:	f7fc ffa4 	bl	80002e0 <__aeabi_uldivmod>
 8003398:	4602      	mov	r2, r0
 800339a:	460b      	mov	r3, r1
 800339c:	4613      	mov	r3, r2
 800339e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80033a0:	4b0b      	ldr	r3, [pc, #44]	; (80033d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	0c1b      	lsrs	r3, r3, #16
 80033a6:	f003 0303 	and.w	r3, r3, #3
 80033aa:	3301      	adds	r3, #1
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b8:	60bb      	str	r3, [r7, #8]
      break;
 80033ba:	e002      	b.n	80033c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033bc:	4b05      	ldr	r3, [pc, #20]	; (80033d4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80033be:	60bb      	str	r3, [r7, #8]
      break;
 80033c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033c2:	68bb      	ldr	r3, [r7, #8]
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3710      	adds	r7, #16
 80033c8:	46bd      	mov	sp, r7
 80033ca:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80033ce:	bf00      	nop
 80033d0:	40023800 	.word	0x40023800
 80033d4:	00f42400 	.word	0x00f42400
 80033d8:	007a1200 	.word	0x007a1200

080033dc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033dc:	b480      	push	{r7}
 80033de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033e0:	4b03      	ldr	r3, [pc, #12]	; (80033f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80033e2:	681b      	ldr	r3, [r3, #0]
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	20000000 	.word	0x20000000

080033f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033f8:	f7ff fff0 	bl	80033dc <HAL_RCC_GetHCLKFreq>
 80033fc:	4602      	mov	r2, r0
 80033fe:	4b05      	ldr	r3, [pc, #20]	; (8003414 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	0a9b      	lsrs	r3, r3, #10
 8003404:	f003 0307 	and.w	r3, r3, #7
 8003408:	4903      	ldr	r1, [pc, #12]	; (8003418 <HAL_RCC_GetPCLK1Freq+0x24>)
 800340a:	5ccb      	ldrb	r3, [r1, r3]
 800340c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003410:	4618      	mov	r0, r3
 8003412:	bd80      	pop	{r7, pc}
 8003414:	40023800 	.word	0x40023800
 8003418:	08005f20 	.word	0x08005f20

0800341c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003420:	f7ff ffdc 	bl	80033dc <HAL_RCC_GetHCLKFreq>
 8003424:	4602      	mov	r2, r0
 8003426:	4b05      	ldr	r3, [pc, #20]	; (800343c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	0b5b      	lsrs	r3, r3, #13
 800342c:	f003 0307 	and.w	r3, r3, #7
 8003430:	4903      	ldr	r1, [pc, #12]	; (8003440 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003432:	5ccb      	ldrb	r3, [r1, r3]
 8003434:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003438:	4618      	mov	r0, r3
 800343a:	bd80      	pop	{r7, pc}
 800343c:	40023800 	.word	0x40023800
 8003440:	08005f20 	.word	0x08005f20

08003444 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b088      	sub	sp, #32
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800344c:	2300      	movs	r3, #0
 800344e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003450:	2300      	movs	r3, #0
 8003452:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003454:	2300      	movs	r3, #0
 8003456:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003458:	2300      	movs	r3, #0
 800345a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800345c:	2300      	movs	r3, #0
 800345e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0301 	and.w	r3, r3, #1
 8003468:	2b00      	cmp	r3, #0
 800346a:	d012      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800346c:	4b69      	ldr	r3, [pc, #420]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	4a68      	ldr	r2, [pc, #416]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003472:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003476:	6093      	str	r3, [r2, #8]
 8003478:	4b66      	ldr	r3, [pc, #408]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800347a:	689a      	ldr	r2, [r3, #8]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003480:	4964      	ldr	r1, [pc, #400]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003482:	4313      	orrs	r3, r2
 8003484:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800348a:	2b00      	cmp	r3, #0
 800348c:	d101      	bne.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800348e:	2301      	movs	r3, #1
 8003490:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d017      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800349e:	4b5d      	ldr	r3, [pc, #372]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ac:	4959      	ldr	r1, [pc, #356]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034bc:	d101      	bne.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80034be:	2301      	movs	r3, #1
 80034c0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80034ca:	2301      	movs	r3, #1
 80034cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d017      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80034da:	4b4e      	ldr	r3, [pc, #312]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034e0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e8:	494a      	ldr	r1, [pc, #296]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034f8:	d101      	bne.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80034fa:	2301      	movs	r3, #1
 80034fc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003506:	2301      	movs	r3, #1
 8003508:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d001      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003516:	2301      	movs	r3, #1
 8003518:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0320 	and.w	r3, r3, #32
 8003522:	2b00      	cmp	r3, #0
 8003524:	f000 808b 	beq.w	800363e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003528:	4b3a      	ldr	r3, [pc, #232]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800352a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352c:	4a39      	ldr	r2, [pc, #228]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800352e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003532:	6413      	str	r3, [r2, #64]	; 0x40
 8003534:	4b37      	ldr	r3, [pc, #220]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800353c:	60bb      	str	r3, [r7, #8]
 800353e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003540:	4b35      	ldr	r3, [pc, #212]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a34      	ldr	r2, [pc, #208]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003546:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800354a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800354c:	f7fd ff0a 	bl	8001364 <HAL_GetTick>
 8003550:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003552:	e008      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003554:	f7fd ff06 	bl	8001364 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b64      	cmp	r3, #100	; 0x64
 8003560:	d901      	bls.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e38f      	b.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003566:	4b2c      	ldr	r3, [pc, #176]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800356e:	2b00      	cmp	r3, #0
 8003570:	d0f0      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003572:	4b28      	ldr	r3, [pc, #160]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003576:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800357a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d035      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003586:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	429a      	cmp	r2, r3
 800358e:	d02e      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003590:	4b20      	ldr	r3, [pc, #128]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003594:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003598:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800359a:	4b1e      	ldr	r3, [pc, #120]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800359c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359e:	4a1d      	ldr	r2, [pc, #116]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035a4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035a6:	4b1b      	ldr	r3, [pc, #108]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035aa:	4a1a      	ldr	r2, [pc, #104]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035b0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80035b2:	4a18      	ldr	r2, [pc, #96]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80035b8:	4b16      	ldr	r3, [pc, #88]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035bc:	f003 0301 	and.w	r3, r3, #1
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d114      	bne.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c4:	f7fd fece 	bl	8001364 <HAL_GetTick>
 80035c8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035ca:	e00a      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035cc:	f7fd feca 	bl	8001364 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035da:	4293      	cmp	r3, r2
 80035dc:	d901      	bls.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e351      	b.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035e2:	4b0c      	ldr	r3, [pc, #48]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d0ee      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035fa:	d111      	bne.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80035fc:	4b05      	ldr	r3, [pc, #20]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003608:	4b04      	ldr	r3, [pc, #16]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800360a:	400b      	ands	r3, r1
 800360c:	4901      	ldr	r1, [pc, #4]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800360e:	4313      	orrs	r3, r2
 8003610:	608b      	str	r3, [r1, #8]
 8003612:	e00b      	b.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003614:	40023800 	.word	0x40023800
 8003618:	40007000 	.word	0x40007000
 800361c:	0ffffcff 	.word	0x0ffffcff
 8003620:	4bb3      	ldr	r3, [pc, #716]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	4ab2      	ldr	r2, [pc, #712]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003626:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800362a:	6093      	str	r3, [r2, #8]
 800362c:	4bb0      	ldr	r3, [pc, #704]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800362e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003634:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003638:	49ad      	ldr	r1, [pc, #692]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800363a:	4313      	orrs	r3, r2
 800363c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0310 	and.w	r3, r3, #16
 8003646:	2b00      	cmp	r3, #0
 8003648:	d010      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800364a:	4ba9      	ldr	r3, [pc, #676]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800364c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003650:	4aa7      	ldr	r2, [pc, #668]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003652:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003656:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800365a:	4ba5      	ldr	r3, [pc, #660]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800365c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003664:	49a2      	ldr	r1, [pc, #648]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003666:	4313      	orrs	r3, r2
 8003668:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d00a      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003678:	4b9d      	ldr	r3, [pc, #628]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800367a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800367e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003686:	499a      	ldr	r1, [pc, #616]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003688:	4313      	orrs	r3, r2
 800368a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00a      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800369a:	4b95      	ldr	r3, [pc, #596]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800369c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036a8:	4991      	ldr	r1, [pc, #580]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d00a      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036bc:	4b8c      	ldr	r3, [pc, #560]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036ca:	4989      	ldr	r1, [pc, #548]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00a      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80036de:	4b84      	ldr	r3, [pc, #528]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ec:	4980      	ldr	r1, [pc, #512]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00a      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003700:	4b7b      	ldr	r3, [pc, #492]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003706:	f023 0203 	bic.w	r2, r3, #3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370e:	4978      	ldr	r1, [pc, #480]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003710:	4313      	orrs	r3, r2
 8003712:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00a      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003722:	4b73      	ldr	r3, [pc, #460]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003728:	f023 020c 	bic.w	r2, r3, #12
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003730:	496f      	ldr	r1, [pc, #444]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003732:	4313      	orrs	r3, r2
 8003734:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00a      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003744:	4b6a      	ldr	r3, [pc, #424]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800374a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003752:	4967      	ldr	r1, [pc, #412]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003754:	4313      	orrs	r3, r2
 8003756:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00a      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003766:	4b62      	ldr	r3, [pc, #392]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800376c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003774:	495e      	ldr	r1, [pc, #376]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003776:	4313      	orrs	r3, r2
 8003778:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00a      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003788:	4b59      	ldr	r3, [pc, #356]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800378a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800378e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003796:	4956      	ldr	r1, [pc, #344]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003798:	4313      	orrs	r3, r2
 800379a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00a      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80037aa:	4b51      	ldr	r3, [pc, #324]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b8:	494d      	ldr	r1, [pc, #308]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d00a      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80037cc:	4b48      	ldr	r3, [pc, #288]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037d2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037da:	4945      	ldr	r1, [pc, #276]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00a      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80037ee:	4b40      	ldr	r3, [pc, #256]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037fc:	493c      	ldr	r1, [pc, #240]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00a      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003810:	4b37      	ldr	r3, [pc, #220]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003816:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800381e:	4934      	ldr	r1, [pc, #208]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003820:	4313      	orrs	r3, r2
 8003822:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d011      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003832:	4b2f      	ldr	r3, [pc, #188]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003838:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003840:	492b      	ldr	r1, [pc, #172]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003842:	4313      	orrs	r3, r2
 8003844:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800384c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003850:	d101      	bne.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003852:	2301      	movs	r3, #1
 8003854:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0308 	and.w	r3, r3, #8
 800385e:	2b00      	cmp	r3, #0
 8003860:	d001      	beq.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003862:	2301      	movs	r3, #1
 8003864:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00a      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003872:	4b1f      	ldr	r3, [pc, #124]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003878:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003880:	491b      	ldr	r1, [pc, #108]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003882:	4313      	orrs	r3, r2
 8003884:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d00b      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003894:	4b16      	ldr	r3, [pc, #88]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800389a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038a4:	4912      	ldr	r1, [pc, #72]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00b      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80038b8:	4b0d      	ldr	r3, [pc, #52]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038be:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038c8:	4909      	ldr	r1, [pc, #36]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00f      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80038dc:	4b04      	ldr	r3, [pc, #16]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038e2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ec:	e002      	b.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80038ee:	bf00      	nop
 80038f0:	40023800 	.word	0x40023800
 80038f4:	4986      	ldr	r1, [pc, #536]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d00b      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003908:	4b81      	ldr	r3, [pc, #516]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800390a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800390e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003918:	497d      	ldr	r1, [pc, #500]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800391a:	4313      	orrs	r3, r2
 800391c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	2b01      	cmp	r3, #1
 8003924:	d006      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800392e:	2b00      	cmp	r3, #0
 8003930:	f000 80d6 	beq.w	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003934:	4b76      	ldr	r3, [pc, #472]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a75      	ldr	r2, [pc, #468]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800393a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800393e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003940:	f7fd fd10 	bl	8001364 <HAL_GetTick>
 8003944:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003946:	e008      	b.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003948:	f7fd fd0c 	bl	8001364 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b64      	cmp	r3, #100	; 0x64
 8003954:	d901      	bls.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e195      	b.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800395a:	4b6d      	ldr	r3, [pc, #436]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1f0      	bne.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b00      	cmp	r3, #0
 8003970:	d021      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003976:	2b00      	cmp	r3, #0
 8003978:	d11d      	bne.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800397a:	4b65      	ldr	r3, [pc, #404]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800397c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003980:	0c1b      	lsrs	r3, r3, #16
 8003982:	f003 0303 	and.w	r3, r3, #3
 8003986:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003988:	4b61      	ldr	r3, [pc, #388]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800398a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800398e:	0e1b      	lsrs	r3, r3, #24
 8003990:	f003 030f 	and.w	r3, r3, #15
 8003994:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	019a      	lsls	r2, r3, #6
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	041b      	lsls	r3, r3, #16
 80039a0:	431a      	orrs	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	061b      	lsls	r3, r3, #24
 80039a6:	431a      	orrs	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	071b      	lsls	r3, r3, #28
 80039ae:	4958      	ldr	r1, [pc, #352]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d004      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x588>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039ca:	d00a      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d02e      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039e0:	d129      	bne.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80039e2:	4b4b      	ldr	r3, [pc, #300]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039e8:	0c1b      	lsrs	r3, r3, #16
 80039ea:	f003 0303 	and.w	r3, r3, #3
 80039ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80039f0:	4b47      	ldr	r3, [pc, #284]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039f6:	0f1b      	lsrs	r3, r3, #28
 80039f8:	f003 0307 	and.w	r3, r3, #7
 80039fc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	019a      	lsls	r2, r3, #6
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	041b      	lsls	r3, r3, #16
 8003a08:	431a      	orrs	r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	061b      	lsls	r3, r3, #24
 8003a10:	431a      	orrs	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	071b      	lsls	r3, r3, #28
 8003a16:	493e      	ldr	r1, [pc, #248]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003a1e:	4b3c      	ldr	r3, [pc, #240]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a24:	f023 021f 	bic.w	r2, r3, #31
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	4938      	ldr	r1, [pc, #224]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a30:	4313      	orrs	r3, r2
 8003a32:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d01d      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a42:	4b33      	ldr	r3, [pc, #204]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a48:	0e1b      	lsrs	r3, r3, #24
 8003a4a:	f003 030f 	and.w	r3, r3, #15
 8003a4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a50:	4b2f      	ldr	r3, [pc, #188]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a56:	0f1b      	lsrs	r3, r3, #28
 8003a58:	f003 0307 	and.w	r3, r3, #7
 8003a5c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	019a      	lsls	r2, r3, #6
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	041b      	lsls	r3, r3, #16
 8003a6a:	431a      	orrs	r2, r3
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	061b      	lsls	r3, r3, #24
 8003a70:	431a      	orrs	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	071b      	lsls	r3, r3, #28
 8003a76:	4926      	ldr	r1, [pc, #152]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d011      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	019a      	lsls	r2, r3, #6
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	041b      	lsls	r3, r3, #16
 8003a96:	431a      	orrs	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	061b      	lsls	r3, r3, #24
 8003a9e:	431a      	orrs	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	071b      	lsls	r3, r3, #28
 8003aa6:	491a      	ldr	r1, [pc, #104]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003aae:	4b18      	ldr	r3, [pc, #96]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a17      	ldr	r2, [pc, #92]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ab4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ab8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003aba:	f7fd fc53 	bl	8001364 <HAL_GetTick>
 8003abe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ac0:	e008      	b.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ac2:	f7fd fc4f 	bl	8001364 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b64      	cmp	r3, #100	; 0x64
 8003ace:	d901      	bls.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e0d8      	b.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ad4:	4b0e      	ldr	r3, [pc, #56]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d0f0      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	f040 80ce 	bne.w	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003ae8:	4b09      	ldr	r3, [pc, #36]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a08      	ldr	r2, [pc, #32]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003aee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003af2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003af4:	f7fd fc36 	bl	8001364 <HAL_GetTick>
 8003af8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003afa:	e00b      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003afc:	f7fd fc32 	bl	8001364 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b64      	cmp	r3, #100	; 0x64
 8003b08:	d904      	bls.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e0bb      	b.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003b0e:	bf00      	nop
 8003b10:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b14:	4b5e      	ldr	r3, [pc, #376]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b20:	d0ec      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d003      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d009      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d02e      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d12a      	bne.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003b4a:	4b51      	ldr	r3, [pc, #324]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b50:	0c1b      	lsrs	r3, r3, #16
 8003b52:	f003 0303 	and.w	r3, r3, #3
 8003b56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003b58:	4b4d      	ldr	r3, [pc, #308]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b5e:	0f1b      	lsrs	r3, r3, #28
 8003b60:	f003 0307 	and.w	r3, r3, #7
 8003b64:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	019a      	lsls	r2, r3, #6
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	041b      	lsls	r3, r3, #16
 8003b70:	431a      	orrs	r2, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	061b      	lsls	r3, r3, #24
 8003b78:	431a      	orrs	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	071b      	lsls	r3, r3, #28
 8003b7e:	4944      	ldr	r1, [pc, #272]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003b86:	4b42      	ldr	r3, [pc, #264]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b8c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b94:	3b01      	subs	r3, #1
 8003b96:	021b      	lsls	r3, r3, #8
 8003b98:	493d      	ldr	r1, [pc, #244]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d022      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bb0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bb4:	d11d      	bne.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003bb6:	4b36      	ldr	r3, [pc, #216]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bbc:	0e1b      	lsrs	r3, r3, #24
 8003bbe:	f003 030f 	and.w	r3, r3, #15
 8003bc2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003bc4:	4b32      	ldr	r3, [pc, #200]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bca:	0f1b      	lsrs	r3, r3, #28
 8003bcc:	f003 0307 	and.w	r3, r3, #7
 8003bd0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	019a      	lsls	r2, r3, #6
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a1b      	ldr	r3, [r3, #32]
 8003bdc:	041b      	lsls	r3, r3, #16
 8003bde:	431a      	orrs	r2, r3
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	061b      	lsls	r3, r3, #24
 8003be4:	431a      	orrs	r2, r3
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	071b      	lsls	r3, r3, #28
 8003bea:	4929      	ldr	r1, [pc, #164]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0308 	and.w	r3, r3, #8
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d028      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003bfe:	4b24      	ldr	r3, [pc, #144]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c04:	0e1b      	lsrs	r3, r3, #24
 8003c06:	f003 030f 	and.w	r3, r3, #15
 8003c0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c0c:	4b20      	ldr	r3, [pc, #128]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c12:	0c1b      	lsrs	r3, r3, #16
 8003c14:	f003 0303 	and.w	r3, r3, #3
 8003c18:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	019a      	lsls	r2, r3, #6
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	041b      	lsls	r3, r3, #16
 8003c24:	431a      	orrs	r2, r3
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	061b      	lsls	r3, r3, #24
 8003c2a:	431a      	orrs	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	69db      	ldr	r3, [r3, #28]
 8003c30:	071b      	lsls	r3, r3, #28
 8003c32:	4917      	ldr	r1, [pc, #92]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003c3a:	4b15      	ldr	r3, [pc, #84]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c48:	4911      	ldr	r1, [pc, #68]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003c50:	4b0f      	ldr	r3, [pc, #60]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a0e      	ldr	r2, [pc, #56]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c5c:	f7fd fb82 	bl	8001364 <HAL_GetTick>
 8003c60:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003c62:	e008      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003c64:	f7fd fb7e 	bl	8001364 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b64      	cmp	r3, #100	; 0x64
 8003c70:	d901      	bls.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e007      	b.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003c76:	4b06      	ldr	r3, [pc, #24]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c82:	d1ef      	bne.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3720      	adds	r7, #32
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	40023800 	.word	0x40023800

08003c94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e040      	b.n	8003d28 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d106      	bne.n	8003cbc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f7fd fa3c 	bl	8001134 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2224      	movs	r2, #36	; 0x24
 8003cc0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f022 0201 	bic.w	r2, r2, #1
 8003cd0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 fb60 	bl	8004398 <UART_SetConfig>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d101      	bne.n	8003ce2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e022      	b.n	8003d28 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d002      	beq.n	8003cf0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 fdb6 	bl	800485c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	685a      	ldr	r2, [r3, #4]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cfe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	689a      	ldr	r2, [r3, #8]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f042 0201 	orr.w	r2, r2, #1
 8003d1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f000 fe3d 	bl	80049a0 <UART_CheckIdleState>
 8003d26:	4603      	mov	r3, r0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3708      	adds	r7, #8
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e02b      	b.n	8003d9a <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2224      	movs	r2, #36	; 0x24
 8003d46:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f022 0201 	bic.w	r2, r2, #1
 8003d56:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2200      	movs	r2, #0
 8003d66:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f7fd fa5f 	bl	8001234 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3708      	adds	r7, #8
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}

08003da2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003da2:	b580      	push	{r7, lr}
 8003da4:	b08a      	sub	sp, #40	; 0x28
 8003da6:	af02      	add	r7, sp, #8
 8003da8:	60f8      	str	r0, [r7, #12]
 8003daa:	60b9      	str	r1, [r7, #8]
 8003dac:	603b      	str	r3, [r7, #0]
 8003dae:	4613      	mov	r3, r2
 8003db0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003db6:	2b20      	cmp	r3, #32
 8003db8:	f040 8081 	bne.w	8003ebe <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d002      	beq.n	8003dc8 <HAL_UART_Transmit+0x26>
 8003dc2:	88fb      	ldrh	r3, [r7, #6]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d101      	bne.n	8003dcc <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e079      	b.n	8003ec0 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d101      	bne.n	8003dda <HAL_UART_Transmit+0x38>
 8003dd6:	2302      	movs	r3, #2
 8003dd8:	e072      	b.n	8003ec0 <HAL_UART_Transmit+0x11e>
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2221      	movs	r2, #33	; 0x21
 8003dee:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003df0:	f7fd fab8 	bl	8001364 <HAL_GetTick>
 8003df4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	88fa      	ldrh	r2, [r7, #6]
 8003dfa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	88fa      	ldrh	r2, [r7, #6]
 8003e02:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e0e:	d108      	bne.n	8003e22 <HAL_UART_Transmit+0x80>
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d104      	bne.n	8003e22 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	61bb      	str	r3, [r7, #24]
 8003e20:	e003      	b.n	8003e2a <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e26:	2300      	movs	r3, #0
 8003e28:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003e32:	e02c      	b.n	8003e8e <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	9300      	str	r3, [sp, #0]
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	2180      	movs	r1, #128	; 0x80
 8003e3e:	68f8      	ldr	r0, [r7, #12]
 8003e40:	f000 fdf7 	bl	8004a32 <UART_WaitOnFlagUntilTimeout>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d001      	beq.n	8003e4e <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e038      	b.n	8003ec0 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d10b      	bne.n	8003e6c <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	881b      	ldrh	r3, [r3, #0]
 8003e58:	461a      	mov	r2, r3
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e62:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	3302      	adds	r3, #2
 8003e68:	61bb      	str	r3, [r7, #24]
 8003e6a:	e007      	b.n	8003e7c <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	781a      	ldrb	r2, [r3, #0]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	3301      	adds	r3, #1
 8003e7a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	3b01      	subs	r3, #1
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1cc      	bne.n	8003e34 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	9300      	str	r3, [sp, #0]
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	2140      	movs	r1, #64	; 0x40
 8003ea4:	68f8      	ldr	r0, [r7, #12]
 8003ea6:	f000 fdc4 	bl	8004a32 <UART_WaitOnFlagUntilTimeout>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d001      	beq.n	8003eb4 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e005      	b.n	8003ec0 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2220      	movs	r2, #32
 8003eb8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	e000      	b.n	8003ec0 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003ebe:	2302      	movs	r3, #2
  }
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3720      	adds	r7, #32
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003eda:	2b20      	cmp	r3, #32
 8003edc:	d12c      	bne.n	8003f38 <HAL_UART_Receive_DMA+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d002      	beq.n	8003eea <HAL_UART_Receive_DMA+0x22>
 8003ee4:	88fb      	ldrh	r3, [r7, #6]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d101      	bne.n	8003eee <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e025      	b.n	8003f3a <HAL_UART_Receive_DMA+0x72>
    }

    __HAL_LOCK(huart);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d101      	bne.n	8003efc <HAL_UART_Receive_DMA+0x34>
 8003ef8:	2302      	movs	r3, #2
 8003efa:	e01e      	b.n	8003f3a <HAL_UART_Receive_DMA+0x72>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d007      	beq.n	8003f28 <HAL_UART_Receive_DMA+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003f26:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003f28:	88fb      	ldrh	r3, [r7, #6]
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	68b9      	ldr	r1, [r7, #8]
 8003f2e:	68f8      	ldr	r0, [r7, #12]
 8003f30:	f000 fdfc 	bl	8004b2c <UART_Start_Receive_DMA>
 8003f34:	4603      	mov	r3, r0
 8003f36:	e000      	b.n	8003f3a <HAL_UART_Receive_DMA+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003f38:	2302      	movs	r3, #2
  }
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3710      	adds	r7, #16
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
	...

08003f44 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b088      	sub	sp, #32
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	69db      	ldr	r3, [r3, #28]
 8003f52:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003f64:	69fa      	ldr	r2, [r7, #28]
 8003f66:	f640 030f 	movw	r3, #2063	; 0x80f
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d113      	bne.n	8003f9c <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	f003 0320 	and.w	r3, r3, #32
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00e      	beq.n	8003f9c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	f003 0320 	and.w	r3, r3, #32
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d009      	beq.n	8003f9c <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	f000 81cc 	beq.w	800432a <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	4798      	blx	r3
      }
      return;
 8003f9a:	e1c6      	b.n	800432a <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	f000 80e3 	beq.w	800416a <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	f003 0301 	and.w	r3, r3, #1
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d105      	bne.n	8003fba <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003fae:	69ba      	ldr	r2, [r7, #24]
 8003fb0:	4ba5      	ldr	r3, [pc, #660]	; (8004248 <HAL_UART_IRQHandler+0x304>)
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f000 80d8 	beq.w	800416a <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	f003 0301 	and.w	r3, r3, #1
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d010      	beq.n	8003fe6 <HAL_UART_IRQHandler+0xa2>
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00b      	beq.n	8003fe6 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fdc:	f043 0201 	orr.w	r2, r3, #1
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	f003 0302 	and.w	r3, r3, #2
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d010      	beq.n	8004012 <HAL_UART_IRQHandler+0xce>
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	f003 0301 	and.w	r3, r3, #1
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00b      	beq.n	8004012 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2202      	movs	r2, #2
 8004000:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004008:	f043 0204 	orr.w	r2, r3, #4
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	f003 0304 	and.w	r3, r3, #4
 8004018:	2b00      	cmp	r3, #0
 800401a:	d010      	beq.n	800403e <HAL_UART_IRQHandler+0xfa>
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	f003 0301 	and.w	r3, r3, #1
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00b      	beq.n	800403e <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2204      	movs	r2, #4
 800402c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004034:	f043 0202 	orr.w	r2, r3, #2
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	f003 0308 	and.w	r3, r3, #8
 8004044:	2b00      	cmp	r3, #0
 8004046:	d015      	beq.n	8004074 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	f003 0320 	and.w	r3, r3, #32
 800404e:	2b00      	cmp	r3, #0
 8004050:	d104      	bne.n	800405c <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004058:	2b00      	cmp	r3, #0
 800405a:	d00b      	beq.n	8004074 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2208      	movs	r2, #8
 8004062:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800406a:	f043 0208 	orr.w	r2, r3, #8
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800407a:	2b00      	cmp	r3, #0
 800407c:	d011      	beq.n	80040a2 <HAL_UART_IRQHandler+0x15e>
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d00c      	beq.n	80040a2 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004090:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004098:	f043 0220 	orr.w	r2, r3, #32
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	f000 8140 	beq.w	800432e <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	f003 0320 	and.w	r3, r3, #32
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00c      	beq.n	80040d2 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	f003 0320 	and.w	r3, r3, #32
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d007      	beq.n	80040d2 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d003      	beq.n	80040d2 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040d8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e4:	2b40      	cmp	r3, #64	; 0x40
 80040e6:	d004      	beq.n	80040f2 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d031      	beq.n	8004156 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 fd9b 	bl	8004c2e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004102:	2b40      	cmp	r3, #64	; 0x40
 8004104:	d123      	bne.n	800414e <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	689a      	ldr	r2, [r3, #8]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004114:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800411a:	2b00      	cmp	r3, #0
 800411c:	d013      	beq.n	8004146 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004122:	4a4a      	ldr	r2, [pc, #296]	; (800424c <HAL_UART_IRQHandler+0x308>)
 8004124:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800412a:	4618      	mov	r0, r3
 800412c:	f7fd fc46 	bl	80019bc <HAL_DMA_Abort_IT>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d017      	beq.n	8004166 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800413a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004140:	4610      	mov	r0, r2
 8004142:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004144:	e00f      	b.n	8004166 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f7fd f89a 	bl	8001280 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800414c:	e00b      	b.n	8004166 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f7fd f896 	bl	8001280 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004154:	e007      	b.n	8004166 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f7fd f892 	bl	8001280 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004164:	e0e3      	b.n	800432e <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004166:	bf00      	nop
    return;
 8004168:	e0e1      	b.n	800432e <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800416e:	2b01      	cmp	r3, #1
 8004170:	f040 80a7 	bne.w	80042c2 <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	f003 0310 	and.w	r3, r3, #16
 800417a:	2b00      	cmp	r3, #0
 800417c:	f000 80a1 	beq.w	80042c2 <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	f003 0310 	and.w	r3, r3, #16
 8004186:	2b00      	cmp	r3, #0
 8004188:	f000 809b 	beq.w	80042c2 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2210      	movs	r2, #16
 8004192:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800419e:	2b40      	cmp	r3, #64	; 0x40
 80041a0:	d156      	bne.n	8004250 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 80041ac:	893b      	ldrh	r3, [r7, #8]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	f000 80bf 	beq.w	8004332 <HAL_UART_IRQHandler+0x3ee>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80041ba:	893a      	ldrh	r2, [r7, #8]
 80041bc:	429a      	cmp	r2, r3
 80041be:	f080 80b8 	bcs.w	8004332 <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	893a      	ldrh	r2, [r7, #8]
 80041c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ce:	69db      	ldr	r3, [r3, #28]
 80041d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041d4:	d02a      	beq.n	800422c <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041e4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	689a      	ldr	r2, [r3, #8]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f022 0201 	bic.w	r2, r2, #1
 80041f4:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	689a      	ldr	r2, [r3, #8]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004204:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2220      	movs	r2, #32
 800420a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f022 0210 	bic.w	r2, r2, #16
 8004220:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004226:	4618      	mov	r0, r3
 8004228:	f7fd fb58 	bl	80018dc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004238:	b29b      	uxth	r3, r3
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	b29b      	uxth	r3, r3
 800423e:	4619      	mov	r1, r3
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 f893 	bl	800436c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004246:	e074      	b.n	8004332 <HAL_UART_IRQHandler+0x3ee>
 8004248:	04000120 	.word	0x04000120
 800424c:	08004dd5 	.word	0x08004dd5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800425c:	b29b      	uxth	r3, r3
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004268:	b29b      	uxth	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	d063      	beq.n	8004336 <HAL_UART_IRQHandler+0x3f2>
          && (nb_rx_data > 0U))
 800426e:	897b      	ldrh	r3, [r7, #10]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d060      	beq.n	8004336 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004282:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	689a      	ldr	r2, [r3, #8]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f022 0201 	bic.w	r2, r2, #1
 8004292:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2220      	movs	r2, #32
 8004298:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f022 0210 	bic.w	r2, r2, #16
 80042b4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80042b6:	897b      	ldrh	r3, [r7, #10]
 80042b8:	4619      	mov	r1, r3
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 f856 	bl	800436c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80042c0:	e039      	b.n	8004336 <HAL_UART_IRQHandler+0x3f2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00d      	beq.n	80042e8 <HAL_UART_IRQHandler+0x3a4>
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d008      	beq.n	80042e8 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80042de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f000 f84f 	bl	8004384 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80042e6:	e029      	b.n	800433c <HAL_UART_IRQHandler+0x3f8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00d      	beq.n	800430e <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d008      	beq.n	800430e <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004300:	2b00      	cmp	r3, #0
 8004302:	d01a      	beq.n	800433a <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	4798      	blx	r3
    }
    return;
 800430c:	e015      	b.n	800433a <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004314:	2b00      	cmp	r3, #0
 8004316:	d011      	beq.n	800433c <HAL_UART_IRQHandler+0x3f8>
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00c      	beq.n	800433c <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 fd6c 	bl	8004e00 <UART_EndTransmit_IT>
    return;
 8004328:	e008      	b.n	800433c <HAL_UART_IRQHandler+0x3f8>
      return;
 800432a:	bf00      	nop
 800432c:	e006      	b.n	800433c <HAL_UART_IRQHandler+0x3f8>
    return;
 800432e:	bf00      	nop
 8004330:	e004      	b.n	800433c <HAL_UART_IRQHandler+0x3f8>
      return;
 8004332:	bf00      	nop
 8004334:	e002      	b.n	800433c <HAL_UART_IRQHandler+0x3f8>
      return;
 8004336:	bf00      	nop
 8004338:	e000      	b.n	800433c <HAL_UART_IRQHandler+0x3f8>
    return;
 800433a:	bf00      	nop
  }

}
 800433c:	3720      	adds	r7, #32
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop

08004344 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004360:	bf00      	nop
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	460b      	mov	r3, r1
 8004376:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004378:	bf00      	nop
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800438c:	bf00      	nop
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b088      	sub	sp, #32
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80043a0:	2300      	movs	r3, #0
 80043a2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	689a      	ldr	r2, [r3, #8]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	431a      	orrs	r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	431a      	orrs	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	69db      	ldr	r3, [r3, #28]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	4ba7      	ldr	r3, [pc, #668]	; (8004660 <UART_SetConfig+0x2c8>)
 80043c4:	4013      	ands	r3, r2
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	6812      	ldr	r2, [r2, #0]
 80043ca:	6979      	ldr	r1, [r7, #20]
 80043cc:	430b      	orrs	r3, r1
 80043ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	68da      	ldr	r2, [r3, #12]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	430a      	orrs	r2, r1
 80043e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a1b      	ldr	r3, [r3, #32]
 80043f0:	697a      	ldr	r2, [r7, #20]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	697a      	ldr	r2, [r7, #20]
 8004406:	430a      	orrs	r2, r1
 8004408:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a95      	ldr	r2, [pc, #596]	; (8004664 <UART_SetConfig+0x2cc>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d120      	bne.n	8004456 <UART_SetConfig+0xbe>
 8004414:	4b94      	ldr	r3, [pc, #592]	; (8004668 <UART_SetConfig+0x2d0>)
 8004416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800441a:	f003 0303 	and.w	r3, r3, #3
 800441e:	2b03      	cmp	r3, #3
 8004420:	d816      	bhi.n	8004450 <UART_SetConfig+0xb8>
 8004422:	a201      	add	r2, pc, #4	; (adr r2, 8004428 <UART_SetConfig+0x90>)
 8004424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004428:	08004439 	.word	0x08004439
 800442c:	08004445 	.word	0x08004445
 8004430:	0800443f 	.word	0x0800443f
 8004434:	0800444b 	.word	0x0800444b
 8004438:	2301      	movs	r3, #1
 800443a:	77fb      	strb	r3, [r7, #31]
 800443c:	e14f      	b.n	80046de <UART_SetConfig+0x346>
 800443e:	2302      	movs	r3, #2
 8004440:	77fb      	strb	r3, [r7, #31]
 8004442:	e14c      	b.n	80046de <UART_SetConfig+0x346>
 8004444:	2304      	movs	r3, #4
 8004446:	77fb      	strb	r3, [r7, #31]
 8004448:	e149      	b.n	80046de <UART_SetConfig+0x346>
 800444a:	2308      	movs	r3, #8
 800444c:	77fb      	strb	r3, [r7, #31]
 800444e:	e146      	b.n	80046de <UART_SetConfig+0x346>
 8004450:	2310      	movs	r3, #16
 8004452:	77fb      	strb	r3, [r7, #31]
 8004454:	e143      	b.n	80046de <UART_SetConfig+0x346>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a84      	ldr	r2, [pc, #528]	; (800466c <UART_SetConfig+0x2d4>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d132      	bne.n	80044c6 <UART_SetConfig+0x12e>
 8004460:	4b81      	ldr	r3, [pc, #516]	; (8004668 <UART_SetConfig+0x2d0>)
 8004462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004466:	f003 030c 	and.w	r3, r3, #12
 800446a:	2b0c      	cmp	r3, #12
 800446c:	d828      	bhi.n	80044c0 <UART_SetConfig+0x128>
 800446e:	a201      	add	r2, pc, #4	; (adr r2, 8004474 <UART_SetConfig+0xdc>)
 8004470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004474:	080044a9 	.word	0x080044a9
 8004478:	080044c1 	.word	0x080044c1
 800447c:	080044c1 	.word	0x080044c1
 8004480:	080044c1 	.word	0x080044c1
 8004484:	080044b5 	.word	0x080044b5
 8004488:	080044c1 	.word	0x080044c1
 800448c:	080044c1 	.word	0x080044c1
 8004490:	080044c1 	.word	0x080044c1
 8004494:	080044af 	.word	0x080044af
 8004498:	080044c1 	.word	0x080044c1
 800449c:	080044c1 	.word	0x080044c1
 80044a0:	080044c1 	.word	0x080044c1
 80044a4:	080044bb 	.word	0x080044bb
 80044a8:	2300      	movs	r3, #0
 80044aa:	77fb      	strb	r3, [r7, #31]
 80044ac:	e117      	b.n	80046de <UART_SetConfig+0x346>
 80044ae:	2302      	movs	r3, #2
 80044b0:	77fb      	strb	r3, [r7, #31]
 80044b2:	e114      	b.n	80046de <UART_SetConfig+0x346>
 80044b4:	2304      	movs	r3, #4
 80044b6:	77fb      	strb	r3, [r7, #31]
 80044b8:	e111      	b.n	80046de <UART_SetConfig+0x346>
 80044ba:	2308      	movs	r3, #8
 80044bc:	77fb      	strb	r3, [r7, #31]
 80044be:	e10e      	b.n	80046de <UART_SetConfig+0x346>
 80044c0:	2310      	movs	r3, #16
 80044c2:	77fb      	strb	r3, [r7, #31]
 80044c4:	e10b      	b.n	80046de <UART_SetConfig+0x346>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a69      	ldr	r2, [pc, #420]	; (8004670 <UART_SetConfig+0x2d8>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d120      	bne.n	8004512 <UART_SetConfig+0x17a>
 80044d0:	4b65      	ldr	r3, [pc, #404]	; (8004668 <UART_SetConfig+0x2d0>)
 80044d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80044da:	2b30      	cmp	r3, #48	; 0x30
 80044dc:	d013      	beq.n	8004506 <UART_SetConfig+0x16e>
 80044de:	2b30      	cmp	r3, #48	; 0x30
 80044e0:	d814      	bhi.n	800450c <UART_SetConfig+0x174>
 80044e2:	2b20      	cmp	r3, #32
 80044e4:	d009      	beq.n	80044fa <UART_SetConfig+0x162>
 80044e6:	2b20      	cmp	r3, #32
 80044e8:	d810      	bhi.n	800450c <UART_SetConfig+0x174>
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d002      	beq.n	80044f4 <UART_SetConfig+0x15c>
 80044ee:	2b10      	cmp	r3, #16
 80044f0:	d006      	beq.n	8004500 <UART_SetConfig+0x168>
 80044f2:	e00b      	b.n	800450c <UART_SetConfig+0x174>
 80044f4:	2300      	movs	r3, #0
 80044f6:	77fb      	strb	r3, [r7, #31]
 80044f8:	e0f1      	b.n	80046de <UART_SetConfig+0x346>
 80044fa:	2302      	movs	r3, #2
 80044fc:	77fb      	strb	r3, [r7, #31]
 80044fe:	e0ee      	b.n	80046de <UART_SetConfig+0x346>
 8004500:	2304      	movs	r3, #4
 8004502:	77fb      	strb	r3, [r7, #31]
 8004504:	e0eb      	b.n	80046de <UART_SetConfig+0x346>
 8004506:	2308      	movs	r3, #8
 8004508:	77fb      	strb	r3, [r7, #31]
 800450a:	e0e8      	b.n	80046de <UART_SetConfig+0x346>
 800450c:	2310      	movs	r3, #16
 800450e:	77fb      	strb	r3, [r7, #31]
 8004510:	e0e5      	b.n	80046de <UART_SetConfig+0x346>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a57      	ldr	r2, [pc, #348]	; (8004674 <UART_SetConfig+0x2dc>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d120      	bne.n	800455e <UART_SetConfig+0x1c6>
 800451c:	4b52      	ldr	r3, [pc, #328]	; (8004668 <UART_SetConfig+0x2d0>)
 800451e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004522:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004526:	2bc0      	cmp	r3, #192	; 0xc0
 8004528:	d013      	beq.n	8004552 <UART_SetConfig+0x1ba>
 800452a:	2bc0      	cmp	r3, #192	; 0xc0
 800452c:	d814      	bhi.n	8004558 <UART_SetConfig+0x1c0>
 800452e:	2b80      	cmp	r3, #128	; 0x80
 8004530:	d009      	beq.n	8004546 <UART_SetConfig+0x1ae>
 8004532:	2b80      	cmp	r3, #128	; 0x80
 8004534:	d810      	bhi.n	8004558 <UART_SetConfig+0x1c0>
 8004536:	2b00      	cmp	r3, #0
 8004538:	d002      	beq.n	8004540 <UART_SetConfig+0x1a8>
 800453a:	2b40      	cmp	r3, #64	; 0x40
 800453c:	d006      	beq.n	800454c <UART_SetConfig+0x1b4>
 800453e:	e00b      	b.n	8004558 <UART_SetConfig+0x1c0>
 8004540:	2300      	movs	r3, #0
 8004542:	77fb      	strb	r3, [r7, #31]
 8004544:	e0cb      	b.n	80046de <UART_SetConfig+0x346>
 8004546:	2302      	movs	r3, #2
 8004548:	77fb      	strb	r3, [r7, #31]
 800454a:	e0c8      	b.n	80046de <UART_SetConfig+0x346>
 800454c:	2304      	movs	r3, #4
 800454e:	77fb      	strb	r3, [r7, #31]
 8004550:	e0c5      	b.n	80046de <UART_SetConfig+0x346>
 8004552:	2308      	movs	r3, #8
 8004554:	77fb      	strb	r3, [r7, #31]
 8004556:	e0c2      	b.n	80046de <UART_SetConfig+0x346>
 8004558:	2310      	movs	r3, #16
 800455a:	77fb      	strb	r3, [r7, #31]
 800455c:	e0bf      	b.n	80046de <UART_SetConfig+0x346>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a45      	ldr	r2, [pc, #276]	; (8004678 <UART_SetConfig+0x2e0>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d125      	bne.n	80045b4 <UART_SetConfig+0x21c>
 8004568:	4b3f      	ldr	r3, [pc, #252]	; (8004668 <UART_SetConfig+0x2d0>)
 800456a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800456e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004572:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004576:	d017      	beq.n	80045a8 <UART_SetConfig+0x210>
 8004578:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800457c:	d817      	bhi.n	80045ae <UART_SetConfig+0x216>
 800457e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004582:	d00b      	beq.n	800459c <UART_SetConfig+0x204>
 8004584:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004588:	d811      	bhi.n	80045ae <UART_SetConfig+0x216>
 800458a:	2b00      	cmp	r3, #0
 800458c:	d003      	beq.n	8004596 <UART_SetConfig+0x1fe>
 800458e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004592:	d006      	beq.n	80045a2 <UART_SetConfig+0x20a>
 8004594:	e00b      	b.n	80045ae <UART_SetConfig+0x216>
 8004596:	2300      	movs	r3, #0
 8004598:	77fb      	strb	r3, [r7, #31]
 800459a:	e0a0      	b.n	80046de <UART_SetConfig+0x346>
 800459c:	2302      	movs	r3, #2
 800459e:	77fb      	strb	r3, [r7, #31]
 80045a0:	e09d      	b.n	80046de <UART_SetConfig+0x346>
 80045a2:	2304      	movs	r3, #4
 80045a4:	77fb      	strb	r3, [r7, #31]
 80045a6:	e09a      	b.n	80046de <UART_SetConfig+0x346>
 80045a8:	2308      	movs	r3, #8
 80045aa:	77fb      	strb	r3, [r7, #31]
 80045ac:	e097      	b.n	80046de <UART_SetConfig+0x346>
 80045ae:	2310      	movs	r3, #16
 80045b0:	77fb      	strb	r3, [r7, #31]
 80045b2:	e094      	b.n	80046de <UART_SetConfig+0x346>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a30      	ldr	r2, [pc, #192]	; (800467c <UART_SetConfig+0x2e4>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d125      	bne.n	800460a <UART_SetConfig+0x272>
 80045be:	4b2a      	ldr	r3, [pc, #168]	; (8004668 <UART_SetConfig+0x2d0>)
 80045c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80045c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80045cc:	d017      	beq.n	80045fe <UART_SetConfig+0x266>
 80045ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80045d2:	d817      	bhi.n	8004604 <UART_SetConfig+0x26c>
 80045d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045d8:	d00b      	beq.n	80045f2 <UART_SetConfig+0x25a>
 80045da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045de:	d811      	bhi.n	8004604 <UART_SetConfig+0x26c>
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d003      	beq.n	80045ec <UART_SetConfig+0x254>
 80045e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045e8:	d006      	beq.n	80045f8 <UART_SetConfig+0x260>
 80045ea:	e00b      	b.n	8004604 <UART_SetConfig+0x26c>
 80045ec:	2301      	movs	r3, #1
 80045ee:	77fb      	strb	r3, [r7, #31]
 80045f0:	e075      	b.n	80046de <UART_SetConfig+0x346>
 80045f2:	2302      	movs	r3, #2
 80045f4:	77fb      	strb	r3, [r7, #31]
 80045f6:	e072      	b.n	80046de <UART_SetConfig+0x346>
 80045f8:	2304      	movs	r3, #4
 80045fa:	77fb      	strb	r3, [r7, #31]
 80045fc:	e06f      	b.n	80046de <UART_SetConfig+0x346>
 80045fe:	2308      	movs	r3, #8
 8004600:	77fb      	strb	r3, [r7, #31]
 8004602:	e06c      	b.n	80046de <UART_SetConfig+0x346>
 8004604:	2310      	movs	r3, #16
 8004606:	77fb      	strb	r3, [r7, #31]
 8004608:	e069      	b.n	80046de <UART_SetConfig+0x346>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a1c      	ldr	r2, [pc, #112]	; (8004680 <UART_SetConfig+0x2e8>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d137      	bne.n	8004684 <UART_SetConfig+0x2ec>
 8004614:	4b14      	ldr	r3, [pc, #80]	; (8004668 <UART_SetConfig+0x2d0>)
 8004616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800461a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800461e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004622:	d017      	beq.n	8004654 <UART_SetConfig+0x2bc>
 8004624:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004628:	d817      	bhi.n	800465a <UART_SetConfig+0x2c2>
 800462a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800462e:	d00b      	beq.n	8004648 <UART_SetConfig+0x2b0>
 8004630:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004634:	d811      	bhi.n	800465a <UART_SetConfig+0x2c2>
 8004636:	2b00      	cmp	r3, #0
 8004638:	d003      	beq.n	8004642 <UART_SetConfig+0x2aa>
 800463a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800463e:	d006      	beq.n	800464e <UART_SetConfig+0x2b6>
 8004640:	e00b      	b.n	800465a <UART_SetConfig+0x2c2>
 8004642:	2300      	movs	r3, #0
 8004644:	77fb      	strb	r3, [r7, #31]
 8004646:	e04a      	b.n	80046de <UART_SetConfig+0x346>
 8004648:	2302      	movs	r3, #2
 800464a:	77fb      	strb	r3, [r7, #31]
 800464c:	e047      	b.n	80046de <UART_SetConfig+0x346>
 800464e:	2304      	movs	r3, #4
 8004650:	77fb      	strb	r3, [r7, #31]
 8004652:	e044      	b.n	80046de <UART_SetConfig+0x346>
 8004654:	2308      	movs	r3, #8
 8004656:	77fb      	strb	r3, [r7, #31]
 8004658:	e041      	b.n	80046de <UART_SetConfig+0x346>
 800465a:	2310      	movs	r3, #16
 800465c:	77fb      	strb	r3, [r7, #31]
 800465e:	e03e      	b.n	80046de <UART_SetConfig+0x346>
 8004660:	efff69f3 	.word	0xefff69f3
 8004664:	40011000 	.word	0x40011000
 8004668:	40023800 	.word	0x40023800
 800466c:	40004400 	.word	0x40004400
 8004670:	40004800 	.word	0x40004800
 8004674:	40004c00 	.word	0x40004c00
 8004678:	40005000 	.word	0x40005000
 800467c:	40011400 	.word	0x40011400
 8004680:	40007800 	.word	0x40007800
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a71      	ldr	r2, [pc, #452]	; (8004850 <UART_SetConfig+0x4b8>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d125      	bne.n	80046da <UART_SetConfig+0x342>
 800468e:	4b71      	ldr	r3, [pc, #452]	; (8004854 <UART_SetConfig+0x4bc>)
 8004690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004694:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004698:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800469c:	d017      	beq.n	80046ce <UART_SetConfig+0x336>
 800469e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80046a2:	d817      	bhi.n	80046d4 <UART_SetConfig+0x33c>
 80046a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046a8:	d00b      	beq.n	80046c2 <UART_SetConfig+0x32a>
 80046aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046ae:	d811      	bhi.n	80046d4 <UART_SetConfig+0x33c>
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d003      	beq.n	80046bc <UART_SetConfig+0x324>
 80046b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046b8:	d006      	beq.n	80046c8 <UART_SetConfig+0x330>
 80046ba:	e00b      	b.n	80046d4 <UART_SetConfig+0x33c>
 80046bc:	2300      	movs	r3, #0
 80046be:	77fb      	strb	r3, [r7, #31]
 80046c0:	e00d      	b.n	80046de <UART_SetConfig+0x346>
 80046c2:	2302      	movs	r3, #2
 80046c4:	77fb      	strb	r3, [r7, #31]
 80046c6:	e00a      	b.n	80046de <UART_SetConfig+0x346>
 80046c8:	2304      	movs	r3, #4
 80046ca:	77fb      	strb	r3, [r7, #31]
 80046cc:	e007      	b.n	80046de <UART_SetConfig+0x346>
 80046ce:	2308      	movs	r3, #8
 80046d0:	77fb      	strb	r3, [r7, #31]
 80046d2:	e004      	b.n	80046de <UART_SetConfig+0x346>
 80046d4:	2310      	movs	r3, #16
 80046d6:	77fb      	strb	r3, [r7, #31]
 80046d8:	e001      	b.n	80046de <UART_SetConfig+0x346>
 80046da:	2310      	movs	r3, #16
 80046dc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	69db      	ldr	r3, [r3, #28]
 80046e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046e6:	d15b      	bne.n	80047a0 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80046e8:	7ffb      	ldrb	r3, [r7, #31]
 80046ea:	2b08      	cmp	r3, #8
 80046ec:	d827      	bhi.n	800473e <UART_SetConfig+0x3a6>
 80046ee:	a201      	add	r2, pc, #4	; (adr r2, 80046f4 <UART_SetConfig+0x35c>)
 80046f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f4:	08004719 	.word	0x08004719
 80046f8:	08004721 	.word	0x08004721
 80046fc:	08004729 	.word	0x08004729
 8004700:	0800473f 	.word	0x0800473f
 8004704:	0800472f 	.word	0x0800472f
 8004708:	0800473f 	.word	0x0800473f
 800470c:	0800473f 	.word	0x0800473f
 8004710:	0800473f 	.word	0x0800473f
 8004714:	08004737 	.word	0x08004737
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004718:	f7fe fe6c 	bl	80033f4 <HAL_RCC_GetPCLK1Freq>
 800471c:	61b8      	str	r0, [r7, #24]
        break;
 800471e:	e013      	b.n	8004748 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004720:	f7fe fe7c 	bl	800341c <HAL_RCC_GetPCLK2Freq>
 8004724:	61b8      	str	r0, [r7, #24]
        break;
 8004726:	e00f      	b.n	8004748 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004728:	4b4b      	ldr	r3, [pc, #300]	; (8004858 <UART_SetConfig+0x4c0>)
 800472a:	61bb      	str	r3, [r7, #24]
        break;
 800472c:	e00c      	b.n	8004748 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800472e:	f7fe fd73 	bl	8003218 <HAL_RCC_GetSysClockFreq>
 8004732:	61b8      	str	r0, [r7, #24]
        break;
 8004734:	e008      	b.n	8004748 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004736:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800473a:	61bb      	str	r3, [r7, #24]
        break;
 800473c:	e004      	b.n	8004748 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800473e:	2300      	movs	r3, #0
 8004740:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	77bb      	strb	r3, [r7, #30]
        break;
 8004746:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d074      	beq.n	8004838 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	005a      	lsls	r2, r3, #1
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	085b      	lsrs	r3, r3, #1
 8004758:	441a      	add	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004762:	b29b      	uxth	r3, r3
 8004764:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	2b0f      	cmp	r3, #15
 800476a:	d916      	bls.n	800479a <UART_SetConfig+0x402>
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004772:	d212      	bcs.n	800479a <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	b29b      	uxth	r3, r3
 8004778:	f023 030f 	bic.w	r3, r3, #15
 800477c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	085b      	lsrs	r3, r3, #1
 8004782:	b29b      	uxth	r3, r3
 8004784:	f003 0307 	and.w	r3, r3, #7
 8004788:	b29a      	uxth	r2, r3
 800478a:	89fb      	ldrh	r3, [r7, #14]
 800478c:	4313      	orrs	r3, r2
 800478e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	89fa      	ldrh	r2, [r7, #14]
 8004796:	60da      	str	r2, [r3, #12]
 8004798:	e04e      	b.n	8004838 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	77bb      	strb	r3, [r7, #30]
 800479e:	e04b      	b.n	8004838 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80047a0:	7ffb      	ldrb	r3, [r7, #31]
 80047a2:	2b08      	cmp	r3, #8
 80047a4:	d827      	bhi.n	80047f6 <UART_SetConfig+0x45e>
 80047a6:	a201      	add	r2, pc, #4	; (adr r2, 80047ac <UART_SetConfig+0x414>)
 80047a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ac:	080047d1 	.word	0x080047d1
 80047b0:	080047d9 	.word	0x080047d9
 80047b4:	080047e1 	.word	0x080047e1
 80047b8:	080047f7 	.word	0x080047f7
 80047bc:	080047e7 	.word	0x080047e7
 80047c0:	080047f7 	.word	0x080047f7
 80047c4:	080047f7 	.word	0x080047f7
 80047c8:	080047f7 	.word	0x080047f7
 80047cc:	080047ef 	.word	0x080047ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047d0:	f7fe fe10 	bl	80033f4 <HAL_RCC_GetPCLK1Freq>
 80047d4:	61b8      	str	r0, [r7, #24]
        break;
 80047d6:	e013      	b.n	8004800 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047d8:	f7fe fe20 	bl	800341c <HAL_RCC_GetPCLK2Freq>
 80047dc:	61b8      	str	r0, [r7, #24]
        break;
 80047de:	e00f      	b.n	8004800 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047e0:	4b1d      	ldr	r3, [pc, #116]	; (8004858 <UART_SetConfig+0x4c0>)
 80047e2:	61bb      	str	r3, [r7, #24]
        break;
 80047e4:	e00c      	b.n	8004800 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047e6:	f7fe fd17 	bl	8003218 <HAL_RCC_GetSysClockFreq>
 80047ea:	61b8      	str	r0, [r7, #24]
        break;
 80047ec:	e008      	b.n	8004800 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047f2:	61bb      	str	r3, [r7, #24]
        break;
 80047f4:	e004      	b.n	8004800 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80047f6:	2300      	movs	r3, #0
 80047f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	77bb      	strb	r3, [r7, #30]
        break;
 80047fe:	bf00      	nop
    }

    if (pclk != 0U)
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d018      	beq.n	8004838 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	085a      	lsrs	r2, r3, #1
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	441a      	add	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	fbb2 f3f3 	udiv	r3, r2, r3
 8004818:	b29b      	uxth	r3, r3
 800481a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	2b0f      	cmp	r3, #15
 8004820:	d908      	bls.n	8004834 <UART_SetConfig+0x49c>
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004828:	d204      	bcs.n	8004834 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	693a      	ldr	r2, [r7, #16]
 8004830:	60da      	str	r2, [r3, #12]
 8004832:	e001      	b.n	8004838 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004844:	7fbb      	ldrb	r3, [r7, #30]
}
 8004846:	4618      	mov	r0, r3
 8004848:	3720      	adds	r7, #32
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	40007c00 	.word	0x40007c00
 8004854:	40023800 	.word	0x40023800
 8004858:	00f42400 	.word	0x00f42400

0800485c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004868:	f003 0301 	and.w	r3, r3, #1
 800486c:	2b00      	cmp	r3, #0
 800486e:	d00a      	beq.n	8004886 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	430a      	orrs	r2, r1
 8004884:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488a:	f003 0302 	and.w	r3, r3, #2
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00a      	beq.n	80048a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	430a      	orrs	r2, r1
 80048a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ac:	f003 0304 	and.w	r3, r3, #4
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d00a      	beq.n	80048ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	430a      	orrs	r2, r1
 80048c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ce:	f003 0308 	and.w	r3, r3, #8
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00a      	beq.n	80048ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	430a      	orrs	r2, r1
 80048ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f0:	f003 0310 	and.w	r3, r3, #16
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d00a      	beq.n	800490e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	430a      	orrs	r2, r1
 800490c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004912:	f003 0320 	and.w	r3, r3, #32
 8004916:	2b00      	cmp	r3, #0
 8004918:	d00a      	beq.n	8004930 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	430a      	orrs	r2, r1
 800492e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004938:	2b00      	cmp	r3, #0
 800493a:	d01a      	beq.n	8004972 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	430a      	orrs	r2, r1
 8004950:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004956:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800495a:	d10a      	bne.n	8004972 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	430a      	orrs	r2, r1
 8004970:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00a      	beq.n	8004994 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	430a      	orrs	r2, r1
 8004992:	605a      	str	r2, [r3, #4]
  }
}
 8004994:	bf00      	nop
 8004996:	370c      	adds	r7, #12
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b086      	sub	sp, #24
 80049a4:	af02      	add	r7, sp, #8
 80049a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80049b0:	f7fc fcd8 	bl	8001364 <HAL_GetTick>
 80049b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0308 	and.w	r3, r3, #8
 80049c0:	2b08      	cmp	r3, #8
 80049c2:	d10e      	bne.n	80049e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049c8:	9300      	str	r3, [sp, #0]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 f82d 	bl	8004a32 <UART_WaitOnFlagUntilTimeout>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d001      	beq.n	80049e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e023      	b.n	8004a2a <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0304 	and.w	r3, r3, #4
 80049ec:	2b04      	cmp	r3, #4
 80049ee:	d10e      	bne.n	8004a0e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049f4:	9300      	str	r3, [sp, #0]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 f817 	bl	8004a32 <UART_WaitOnFlagUntilTimeout>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d001      	beq.n	8004a0e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e00d      	b.n	8004a2a <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2220      	movs	r2, #32
 8004a12:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2220      	movs	r2, #32
 8004a18:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004a28:	2300      	movs	r3, #0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3710      	adds	r7, #16
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}

08004a32 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a32:	b580      	push	{r7, lr}
 8004a34:	b084      	sub	sp, #16
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	60f8      	str	r0, [r7, #12]
 8004a3a:	60b9      	str	r1, [r7, #8]
 8004a3c:	603b      	str	r3, [r7, #0]
 8004a3e:	4613      	mov	r3, r2
 8004a40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a42:	e05e      	b.n	8004b02 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a4a:	d05a      	beq.n	8004b02 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a4c:	f7fc fc8a 	bl	8001364 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	69ba      	ldr	r2, [r7, #24]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d302      	bcc.n	8004a62 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d11b      	bne.n	8004a9a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004a70:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	689a      	ldr	r2, [r3, #8]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f022 0201 	bic.w	r2, r2, #1
 8004a80:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2220      	movs	r2, #32
 8004a86:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2220      	movs	r2, #32
 8004a8c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	e043      	b.n	8004b22 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0304 	and.w	r3, r3, #4
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d02c      	beq.n	8004b02 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	69db      	ldr	r3, [r3, #28]
 8004aae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ab2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ab6:	d124      	bne.n	8004b02 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ac0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004ad0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	689a      	ldr	r2, [r3, #8]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f022 0201 	bic.w	r2, r2, #1
 8004ae0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2220      	movs	r2, #32
 8004ae6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2220      	movs	r2, #32
 8004aec:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2220      	movs	r2, #32
 8004af2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e00f      	b.n	8004b22 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	69da      	ldr	r2, [r3, #28]
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	68ba      	ldr	r2, [r7, #8]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	bf0c      	ite	eq
 8004b12:	2301      	moveq	r3, #1
 8004b14:	2300      	movne	r3, #0
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	461a      	mov	r2, r3
 8004b1a:	79fb      	ldrb	r3, [r7, #7]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d091      	beq.n	8004a44 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3710      	adds	r7, #16
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
	...

08004b2c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	4613      	mov	r3, r2
 8004b38:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	68ba      	ldr	r2, [r7, #8]
 8004b3e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	88fa      	ldrh	r2, [r7, #6]
 8004b44:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2222      	movs	r2, #34	; 0x22
 8004b54:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d02b      	beq.n	8004bb6 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b62:	4a25      	ldr	r2, [pc, #148]	; (8004bf8 <UART_Start_Receive_DMA+0xcc>)
 8004b64:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b6a:	4a24      	ldr	r2, [pc, #144]	; (8004bfc <UART_Start_Receive_DMA+0xd0>)
 8004b6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b72:	4a23      	ldr	r2, [pc, #140]	; (8004c00 <UART_Start_Receive_DMA+0xd4>)
 8004b74:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	3324      	adds	r3, #36	; 0x24
 8004b88:	4619      	mov	r1, r3
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b8e:	461a      	mov	r2, r3
 8004b90:	88fb      	ldrh	r3, [r7, #6]
 8004b92:	f7fc fe43 	bl	800181c <HAL_DMA_Start_IT>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d00c      	beq.n	8004bb6 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2210      	movs	r2, #16
 8004ba0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2220      	movs	r2, #32
 8004bb0:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e01c      	b.n	8004bf0 <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bcc:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	689a      	ldr	r2, [r3, #8]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f042 0201 	orr.w	r2, r2, #1
 8004bdc:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	689a      	ldr	r2, [r3, #8]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bec:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3710      	adds	r7, #16
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	08004c8d 	.word	0x08004c8d
 8004bfc:	08004d21 	.word	0x08004d21
 8004c00:	08004d59 	.word	0x08004d59

08004c04 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004c1a:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2220      	movs	r2, #32
 8004c20:	679a      	str	r2, [r3, #120]	; 0x78
}
 8004c22:	bf00      	nop
 8004c24:	370c      	adds	r7, #12
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr

08004c2e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c2e:	b480      	push	{r7}
 8004c30:	b083      	sub	sp, #12
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004c44:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	689a      	ldr	r2, [r3, #8]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f022 0201 	bic.w	r2, r2, #1
 8004c54:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d107      	bne.n	8004c6e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f022 0210 	bic.w	r2, r2, #16
 8004c6c:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2220      	movs	r2, #32
 8004c72:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004c80:	bf00      	nop
 8004c82:	370c      	adds	r7, #12
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c98:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	69db      	ldr	r3, [r3, #28]
 8004c9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ca2:	d02a      	beq.n	8004cfa <UART_DMAReceiveCplt+0x6e>
  {
    huart->RxXferCount = 0U;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004cba:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	689a      	ldr	r2, [r3, #8]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f022 0201 	bic.w	r2, r2, #1
 8004cca:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	689a      	ldr	r2, [r3, #8]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cda:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2220      	movs	r2, #32
 8004ce0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d107      	bne.n	8004cfa <UART_DMAReceiveCplt+0x6e>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f022 0210 	bic.w	r2, r2, #16
 8004cf8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d107      	bne.n	8004d12 <UART_DMAReceiveCplt+0x86>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004d08:	4619      	mov	r1, r3
 8004d0a:	68f8      	ldr	r0, [r7, #12]
 8004d0c:	f7ff fb2e 	bl	800436c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004d10:	e002      	b.n	8004d18 <UART_DMAReceiveCplt+0x8c>
    HAL_UART_RxCpltCallback(huart);
 8004d12:	68f8      	ldr	r0, [r7, #12]
 8004d14:	f7fc faca 	bl	80012ac <HAL_UART_RxCpltCallback>
}
 8004d18:	bf00      	nop
 8004d1a:	3710      	adds	r7, #16
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d2c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d109      	bne.n	8004d4a <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004d3c:	085b      	lsrs	r3, r3, #1
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	4619      	mov	r1, r3
 8004d42:	68f8      	ldr	r0, [r7, #12]
 8004d44:	f7ff fb12 	bl	800436c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004d48:	e002      	b.n	8004d50 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8004d4a:	68f8      	ldr	r0, [r7, #12]
 8004d4c:	f7ff fb04 	bl	8004358 <HAL_UART_RxHalfCpltCallback>
}
 8004d50:	bf00      	nop
 8004d52:	3710      	adds	r7, #16
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b086      	sub	sp, #24
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d64:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d6a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d70:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d7c:	2b80      	cmp	r3, #128	; 0x80
 8004d7e:	d109      	bne.n	8004d94 <UART_DMAError+0x3c>
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	2b21      	cmp	r3, #33	; 0x21
 8004d84:	d106      	bne.n	8004d94 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8004d8e:	6978      	ldr	r0, [r7, #20]
 8004d90:	f7ff ff38 	bl	8004c04 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d9e:	2b40      	cmp	r3, #64	; 0x40
 8004da0:	d109      	bne.n	8004db6 <UART_DMAError+0x5e>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2b22      	cmp	r3, #34	; 0x22
 8004da6:	d106      	bne.n	8004db6 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8004db0:	6978      	ldr	r0, [r7, #20]
 8004db2:	f7ff ff3c 	bl	8004c2e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dbc:	f043 0210 	orr.w	r2, r3, #16
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004dc6:	6978      	ldr	r0, [r7, #20]
 8004dc8:	f7fc fa5a 	bl	8001280 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004dcc:	bf00      	nop
 8004dce:	3718      	adds	r7, #24
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004df2:	68f8      	ldr	r0, [r7, #12]
 8004df4:	f7fc fa44 	bl	8001280 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004df8:	bf00      	nop
 8004dfa:	3710      	adds	r7, #16
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b082      	sub	sp, #8
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e16:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2220      	movs	r2, #32
 8004e1c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f7ff fa8d 	bl	8004344 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e2a:	bf00      	nop
 8004e2c:	3708      	adds	r7, #8
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
	...

08004e34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004e34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004e6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004e38:	480d      	ldr	r0, [pc, #52]	; (8004e70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004e3a:	490e      	ldr	r1, [pc, #56]	; (8004e74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004e3c:	4a0e      	ldr	r2, [pc, #56]	; (8004e78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004e3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004e40:	e002      	b.n	8004e48 <LoopCopyDataInit>

08004e42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004e42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004e44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004e46:	3304      	adds	r3, #4

08004e48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004e48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004e4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004e4c:	d3f9      	bcc.n	8004e42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004e4e:	4a0b      	ldr	r2, [pc, #44]	; (8004e7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004e50:	4c0b      	ldr	r4, [pc, #44]	; (8004e80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004e52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004e54:	e001      	b.n	8004e5a <LoopFillZerobss>

08004e56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004e56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004e58:	3204      	adds	r2, #4

08004e5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004e5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004e5c:	d3fb      	bcc.n	8004e56 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004e5e:	f7fb fc1d 	bl	800069c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004e62:	f000 f817 	bl	8004e94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004e66:	f7fb febb 	bl	8000be0 <main>
  bx  lr    
 8004e6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004e6c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8004e70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004e74:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8004e78:	08005fd8 	.word	0x08005fd8
  ldr r2, =_sbss
 8004e7c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8004e80:	20000330 	.word	0x20000330

08004e84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004e84:	e7fe      	b.n	8004e84 <ADC_IRQHandler>
	...

08004e88 <__errno>:
 8004e88:	4b01      	ldr	r3, [pc, #4]	; (8004e90 <__errno+0x8>)
 8004e8a:	6818      	ldr	r0, [r3, #0]
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	2000000c 	.word	0x2000000c

08004e94 <__libc_init_array>:
 8004e94:	b570      	push	{r4, r5, r6, lr}
 8004e96:	4d0d      	ldr	r5, [pc, #52]	; (8004ecc <__libc_init_array+0x38>)
 8004e98:	4c0d      	ldr	r4, [pc, #52]	; (8004ed0 <__libc_init_array+0x3c>)
 8004e9a:	1b64      	subs	r4, r4, r5
 8004e9c:	10a4      	asrs	r4, r4, #2
 8004e9e:	2600      	movs	r6, #0
 8004ea0:	42a6      	cmp	r6, r4
 8004ea2:	d109      	bne.n	8004eb8 <__libc_init_array+0x24>
 8004ea4:	4d0b      	ldr	r5, [pc, #44]	; (8004ed4 <__libc_init_array+0x40>)
 8004ea6:	4c0c      	ldr	r4, [pc, #48]	; (8004ed8 <__libc_init_array+0x44>)
 8004ea8:	f000 ffec 	bl	8005e84 <_init>
 8004eac:	1b64      	subs	r4, r4, r5
 8004eae:	10a4      	asrs	r4, r4, #2
 8004eb0:	2600      	movs	r6, #0
 8004eb2:	42a6      	cmp	r6, r4
 8004eb4:	d105      	bne.n	8004ec2 <__libc_init_array+0x2e>
 8004eb6:	bd70      	pop	{r4, r5, r6, pc}
 8004eb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ebc:	4798      	blx	r3
 8004ebe:	3601      	adds	r6, #1
 8004ec0:	e7ee      	b.n	8004ea0 <__libc_init_array+0xc>
 8004ec2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ec6:	4798      	blx	r3
 8004ec8:	3601      	adds	r6, #1
 8004eca:	e7f2      	b.n	8004eb2 <__libc_init_array+0x1e>
 8004ecc:	08005fd0 	.word	0x08005fd0
 8004ed0:	08005fd0 	.word	0x08005fd0
 8004ed4:	08005fd0 	.word	0x08005fd0
 8004ed8:	08005fd4 	.word	0x08005fd4

08004edc <memset>:
 8004edc:	4402      	add	r2, r0
 8004ede:	4603      	mov	r3, r0
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d100      	bne.n	8004ee6 <memset+0xa>
 8004ee4:	4770      	bx	lr
 8004ee6:	f803 1b01 	strb.w	r1, [r3], #1
 8004eea:	e7f9      	b.n	8004ee0 <memset+0x4>

08004eec <iprintf>:
 8004eec:	b40f      	push	{r0, r1, r2, r3}
 8004eee:	4b0a      	ldr	r3, [pc, #40]	; (8004f18 <iprintf+0x2c>)
 8004ef0:	b513      	push	{r0, r1, r4, lr}
 8004ef2:	681c      	ldr	r4, [r3, #0]
 8004ef4:	b124      	cbz	r4, 8004f00 <iprintf+0x14>
 8004ef6:	69a3      	ldr	r3, [r4, #24]
 8004ef8:	b913      	cbnz	r3, 8004f00 <iprintf+0x14>
 8004efa:	4620      	mov	r0, r4
 8004efc:	f000 fa5e 	bl	80053bc <__sinit>
 8004f00:	ab05      	add	r3, sp, #20
 8004f02:	9a04      	ldr	r2, [sp, #16]
 8004f04:	68a1      	ldr	r1, [r4, #8]
 8004f06:	9301      	str	r3, [sp, #4]
 8004f08:	4620      	mov	r0, r4
 8004f0a:	f000 fc2f 	bl	800576c <_vfiprintf_r>
 8004f0e:	b002      	add	sp, #8
 8004f10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f14:	b004      	add	sp, #16
 8004f16:	4770      	bx	lr
 8004f18:	2000000c 	.word	0x2000000c

08004f1c <_puts_r>:
 8004f1c:	b570      	push	{r4, r5, r6, lr}
 8004f1e:	460e      	mov	r6, r1
 8004f20:	4605      	mov	r5, r0
 8004f22:	b118      	cbz	r0, 8004f2c <_puts_r+0x10>
 8004f24:	6983      	ldr	r3, [r0, #24]
 8004f26:	b90b      	cbnz	r3, 8004f2c <_puts_r+0x10>
 8004f28:	f000 fa48 	bl	80053bc <__sinit>
 8004f2c:	69ab      	ldr	r3, [r5, #24]
 8004f2e:	68ac      	ldr	r4, [r5, #8]
 8004f30:	b913      	cbnz	r3, 8004f38 <_puts_r+0x1c>
 8004f32:	4628      	mov	r0, r5
 8004f34:	f000 fa42 	bl	80053bc <__sinit>
 8004f38:	4b2c      	ldr	r3, [pc, #176]	; (8004fec <_puts_r+0xd0>)
 8004f3a:	429c      	cmp	r4, r3
 8004f3c:	d120      	bne.n	8004f80 <_puts_r+0x64>
 8004f3e:	686c      	ldr	r4, [r5, #4]
 8004f40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f42:	07db      	lsls	r3, r3, #31
 8004f44:	d405      	bmi.n	8004f52 <_puts_r+0x36>
 8004f46:	89a3      	ldrh	r3, [r4, #12]
 8004f48:	0598      	lsls	r0, r3, #22
 8004f4a:	d402      	bmi.n	8004f52 <_puts_r+0x36>
 8004f4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f4e:	f000 fad3 	bl	80054f8 <__retarget_lock_acquire_recursive>
 8004f52:	89a3      	ldrh	r3, [r4, #12]
 8004f54:	0719      	lsls	r1, r3, #28
 8004f56:	d51d      	bpl.n	8004f94 <_puts_r+0x78>
 8004f58:	6923      	ldr	r3, [r4, #16]
 8004f5a:	b1db      	cbz	r3, 8004f94 <_puts_r+0x78>
 8004f5c:	3e01      	subs	r6, #1
 8004f5e:	68a3      	ldr	r3, [r4, #8]
 8004f60:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004f64:	3b01      	subs	r3, #1
 8004f66:	60a3      	str	r3, [r4, #8]
 8004f68:	bb39      	cbnz	r1, 8004fba <_puts_r+0x9e>
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	da38      	bge.n	8004fe0 <_puts_r+0xc4>
 8004f6e:	4622      	mov	r2, r4
 8004f70:	210a      	movs	r1, #10
 8004f72:	4628      	mov	r0, r5
 8004f74:	f000 f848 	bl	8005008 <__swbuf_r>
 8004f78:	3001      	adds	r0, #1
 8004f7a:	d011      	beq.n	8004fa0 <_puts_r+0x84>
 8004f7c:	250a      	movs	r5, #10
 8004f7e:	e011      	b.n	8004fa4 <_puts_r+0x88>
 8004f80:	4b1b      	ldr	r3, [pc, #108]	; (8004ff0 <_puts_r+0xd4>)
 8004f82:	429c      	cmp	r4, r3
 8004f84:	d101      	bne.n	8004f8a <_puts_r+0x6e>
 8004f86:	68ac      	ldr	r4, [r5, #8]
 8004f88:	e7da      	b.n	8004f40 <_puts_r+0x24>
 8004f8a:	4b1a      	ldr	r3, [pc, #104]	; (8004ff4 <_puts_r+0xd8>)
 8004f8c:	429c      	cmp	r4, r3
 8004f8e:	bf08      	it	eq
 8004f90:	68ec      	ldreq	r4, [r5, #12]
 8004f92:	e7d5      	b.n	8004f40 <_puts_r+0x24>
 8004f94:	4621      	mov	r1, r4
 8004f96:	4628      	mov	r0, r5
 8004f98:	f000 f888 	bl	80050ac <__swsetup_r>
 8004f9c:	2800      	cmp	r0, #0
 8004f9e:	d0dd      	beq.n	8004f5c <_puts_r+0x40>
 8004fa0:	f04f 35ff 	mov.w	r5, #4294967295
 8004fa4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004fa6:	07da      	lsls	r2, r3, #31
 8004fa8:	d405      	bmi.n	8004fb6 <_puts_r+0x9a>
 8004faa:	89a3      	ldrh	r3, [r4, #12]
 8004fac:	059b      	lsls	r3, r3, #22
 8004fae:	d402      	bmi.n	8004fb6 <_puts_r+0x9a>
 8004fb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004fb2:	f000 faa2 	bl	80054fa <__retarget_lock_release_recursive>
 8004fb6:	4628      	mov	r0, r5
 8004fb8:	bd70      	pop	{r4, r5, r6, pc}
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	da04      	bge.n	8004fc8 <_puts_r+0xac>
 8004fbe:	69a2      	ldr	r2, [r4, #24]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	dc06      	bgt.n	8004fd2 <_puts_r+0xb6>
 8004fc4:	290a      	cmp	r1, #10
 8004fc6:	d004      	beq.n	8004fd2 <_puts_r+0xb6>
 8004fc8:	6823      	ldr	r3, [r4, #0]
 8004fca:	1c5a      	adds	r2, r3, #1
 8004fcc:	6022      	str	r2, [r4, #0]
 8004fce:	7019      	strb	r1, [r3, #0]
 8004fd0:	e7c5      	b.n	8004f5e <_puts_r+0x42>
 8004fd2:	4622      	mov	r2, r4
 8004fd4:	4628      	mov	r0, r5
 8004fd6:	f000 f817 	bl	8005008 <__swbuf_r>
 8004fda:	3001      	adds	r0, #1
 8004fdc:	d1bf      	bne.n	8004f5e <_puts_r+0x42>
 8004fde:	e7df      	b.n	8004fa0 <_puts_r+0x84>
 8004fe0:	6823      	ldr	r3, [r4, #0]
 8004fe2:	250a      	movs	r5, #10
 8004fe4:	1c5a      	adds	r2, r3, #1
 8004fe6:	6022      	str	r2, [r4, #0]
 8004fe8:	701d      	strb	r5, [r3, #0]
 8004fea:	e7db      	b.n	8004fa4 <_puts_r+0x88>
 8004fec:	08005f54 	.word	0x08005f54
 8004ff0:	08005f74 	.word	0x08005f74
 8004ff4:	08005f34 	.word	0x08005f34

08004ff8 <puts>:
 8004ff8:	4b02      	ldr	r3, [pc, #8]	; (8005004 <puts+0xc>)
 8004ffa:	4601      	mov	r1, r0
 8004ffc:	6818      	ldr	r0, [r3, #0]
 8004ffe:	f7ff bf8d 	b.w	8004f1c <_puts_r>
 8005002:	bf00      	nop
 8005004:	2000000c 	.word	0x2000000c

08005008 <__swbuf_r>:
 8005008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800500a:	460e      	mov	r6, r1
 800500c:	4614      	mov	r4, r2
 800500e:	4605      	mov	r5, r0
 8005010:	b118      	cbz	r0, 800501a <__swbuf_r+0x12>
 8005012:	6983      	ldr	r3, [r0, #24]
 8005014:	b90b      	cbnz	r3, 800501a <__swbuf_r+0x12>
 8005016:	f000 f9d1 	bl	80053bc <__sinit>
 800501a:	4b21      	ldr	r3, [pc, #132]	; (80050a0 <__swbuf_r+0x98>)
 800501c:	429c      	cmp	r4, r3
 800501e:	d12b      	bne.n	8005078 <__swbuf_r+0x70>
 8005020:	686c      	ldr	r4, [r5, #4]
 8005022:	69a3      	ldr	r3, [r4, #24]
 8005024:	60a3      	str	r3, [r4, #8]
 8005026:	89a3      	ldrh	r3, [r4, #12]
 8005028:	071a      	lsls	r2, r3, #28
 800502a:	d52f      	bpl.n	800508c <__swbuf_r+0x84>
 800502c:	6923      	ldr	r3, [r4, #16]
 800502e:	b36b      	cbz	r3, 800508c <__swbuf_r+0x84>
 8005030:	6923      	ldr	r3, [r4, #16]
 8005032:	6820      	ldr	r0, [r4, #0]
 8005034:	1ac0      	subs	r0, r0, r3
 8005036:	6963      	ldr	r3, [r4, #20]
 8005038:	b2f6      	uxtb	r6, r6
 800503a:	4283      	cmp	r3, r0
 800503c:	4637      	mov	r7, r6
 800503e:	dc04      	bgt.n	800504a <__swbuf_r+0x42>
 8005040:	4621      	mov	r1, r4
 8005042:	4628      	mov	r0, r5
 8005044:	f000 f926 	bl	8005294 <_fflush_r>
 8005048:	bb30      	cbnz	r0, 8005098 <__swbuf_r+0x90>
 800504a:	68a3      	ldr	r3, [r4, #8]
 800504c:	3b01      	subs	r3, #1
 800504e:	60a3      	str	r3, [r4, #8]
 8005050:	6823      	ldr	r3, [r4, #0]
 8005052:	1c5a      	adds	r2, r3, #1
 8005054:	6022      	str	r2, [r4, #0]
 8005056:	701e      	strb	r6, [r3, #0]
 8005058:	6963      	ldr	r3, [r4, #20]
 800505a:	3001      	adds	r0, #1
 800505c:	4283      	cmp	r3, r0
 800505e:	d004      	beq.n	800506a <__swbuf_r+0x62>
 8005060:	89a3      	ldrh	r3, [r4, #12]
 8005062:	07db      	lsls	r3, r3, #31
 8005064:	d506      	bpl.n	8005074 <__swbuf_r+0x6c>
 8005066:	2e0a      	cmp	r6, #10
 8005068:	d104      	bne.n	8005074 <__swbuf_r+0x6c>
 800506a:	4621      	mov	r1, r4
 800506c:	4628      	mov	r0, r5
 800506e:	f000 f911 	bl	8005294 <_fflush_r>
 8005072:	b988      	cbnz	r0, 8005098 <__swbuf_r+0x90>
 8005074:	4638      	mov	r0, r7
 8005076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005078:	4b0a      	ldr	r3, [pc, #40]	; (80050a4 <__swbuf_r+0x9c>)
 800507a:	429c      	cmp	r4, r3
 800507c:	d101      	bne.n	8005082 <__swbuf_r+0x7a>
 800507e:	68ac      	ldr	r4, [r5, #8]
 8005080:	e7cf      	b.n	8005022 <__swbuf_r+0x1a>
 8005082:	4b09      	ldr	r3, [pc, #36]	; (80050a8 <__swbuf_r+0xa0>)
 8005084:	429c      	cmp	r4, r3
 8005086:	bf08      	it	eq
 8005088:	68ec      	ldreq	r4, [r5, #12]
 800508a:	e7ca      	b.n	8005022 <__swbuf_r+0x1a>
 800508c:	4621      	mov	r1, r4
 800508e:	4628      	mov	r0, r5
 8005090:	f000 f80c 	bl	80050ac <__swsetup_r>
 8005094:	2800      	cmp	r0, #0
 8005096:	d0cb      	beq.n	8005030 <__swbuf_r+0x28>
 8005098:	f04f 37ff 	mov.w	r7, #4294967295
 800509c:	e7ea      	b.n	8005074 <__swbuf_r+0x6c>
 800509e:	bf00      	nop
 80050a0:	08005f54 	.word	0x08005f54
 80050a4:	08005f74 	.word	0x08005f74
 80050a8:	08005f34 	.word	0x08005f34

080050ac <__swsetup_r>:
 80050ac:	4b32      	ldr	r3, [pc, #200]	; (8005178 <__swsetup_r+0xcc>)
 80050ae:	b570      	push	{r4, r5, r6, lr}
 80050b0:	681d      	ldr	r5, [r3, #0]
 80050b2:	4606      	mov	r6, r0
 80050b4:	460c      	mov	r4, r1
 80050b6:	b125      	cbz	r5, 80050c2 <__swsetup_r+0x16>
 80050b8:	69ab      	ldr	r3, [r5, #24]
 80050ba:	b913      	cbnz	r3, 80050c2 <__swsetup_r+0x16>
 80050bc:	4628      	mov	r0, r5
 80050be:	f000 f97d 	bl	80053bc <__sinit>
 80050c2:	4b2e      	ldr	r3, [pc, #184]	; (800517c <__swsetup_r+0xd0>)
 80050c4:	429c      	cmp	r4, r3
 80050c6:	d10f      	bne.n	80050e8 <__swsetup_r+0x3c>
 80050c8:	686c      	ldr	r4, [r5, #4]
 80050ca:	89a3      	ldrh	r3, [r4, #12]
 80050cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80050d0:	0719      	lsls	r1, r3, #28
 80050d2:	d42c      	bmi.n	800512e <__swsetup_r+0x82>
 80050d4:	06dd      	lsls	r5, r3, #27
 80050d6:	d411      	bmi.n	80050fc <__swsetup_r+0x50>
 80050d8:	2309      	movs	r3, #9
 80050da:	6033      	str	r3, [r6, #0]
 80050dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80050e0:	81a3      	strh	r3, [r4, #12]
 80050e2:	f04f 30ff 	mov.w	r0, #4294967295
 80050e6:	e03e      	b.n	8005166 <__swsetup_r+0xba>
 80050e8:	4b25      	ldr	r3, [pc, #148]	; (8005180 <__swsetup_r+0xd4>)
 80050ea:	429c      	cmp	r4, r3
 80050ec:	d101      	bne.n	80050f2 <__swsetup_r+0x46>
 80050ee:	68ac      	ldr	r4, [r5, #8]
 80050f0:	e7eb      	b.n	80050ca <__swsetup_r+0x1e>
 80050f2:	4b24      	ldr	r3, [pc, #144]	; (8005184 <__swsetup_r+0xd8>)
 80050f4:	429c      	cmp	r4, r3
 80050f6:	bf08      	it	eq
 80050f8:	68ec      	ldreq	r4, [r5, #12]
 80050fa:	e7e6      	b.n	80050ca <__swsetup_r+0x1e>
 80050fc:	0758      	lsls	r0, r3, #29
 80050fe:	d512      	bpl.n	8005126 <__swsetup_r+0x7a>
 8005100:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005102:	b141      	cbz	r1, 8005116 <__swsetup_r+0x6a>
 8005104:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005108:	4299      	cmp	r1, r3
 800510a:	d002      	beq.n	8005112 <__swsetup_r+0x66>
 800510c:	4630      	mov	r0, r6
 800510e:	f000 fa59 	bl	80055c4 <_free_r>
 8005112:	2300      	movs	r3, #0
 8005114:	6363      	str	r3, [r4, #52]	; 0x34
 8005116:	89a3      	ldrh	r3, [r4, #12]
 8005118:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800511c:	81a3      	strh	r3, [r4, #12]
 800511e:	2300      	movs	r3, #0
 8005120:	6063      	str	r3, [r4, #4]
 8005122:	6923      	ldr	r3, [r4, #16]
 8005124:	6023      	str	r3, [r4, #0]
 8005126:	89a3      	ldrh	r3, [r4, #12]
 8005128:	f043 0308 	orr.w	r3, r3, #8
 800512c:	81a3      	strh	r3, [r4, #12]
 800512e:	6923      	ldr	r3, [r4, #16]
 8005130:	b94b      	cbnz	r3, 8005146 <__swsetup_r+0x9a>
 8005132:	89a3      	ldrh	r3, [r4, #12]
 8005134:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005138:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800513c:	d003      	beq.n	8005146 <__swsetup_r+0x9a>
 800513e:	4621      	mov	r1, r4
 8005140:	4630      	mov	r0, r6
 8005142:	f000 f9ff 	bl	8005544 <__smakebuf_r>
 8005146:	89a0      	ldrh	r0, [r4, #12]
 8005148:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800514c:	f010 0301 	ands.w	r3, r0, #1
 8005150:	d00a      	beq.n	8005168 <__swsetup_r+0xbc>
 8005152:	2300      	movs	r3, #0
 8005154:	60a3      	str	r3, [r4, #8]
 8005156:	6963      	ldr	r3, [r4, #20]
 8005158:	425b      	negs	r3, r3
 800515a:	61a3      	str	r3, [r4, #24]
 800515c:	6923      	ldr	r3, [r4, #16]
 800515e:	b943      	cbnz	r3, 8005172 <__swsetup_r+0xc6>
 8005160:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005164:	d1ba      	bne.n	80050dc <__swsetup_r+0x30>
 8005166:	bd70      	pop	{r4, r5, r6, pc}
 8005168:	0781      	lsls	r1, r0, #30
 800516a:	bf58      	it	pl
 800516c:	6963      	ldrpl	r3, [r4, #20]
 800516e:	60a3      	str	r3, [r4, #8]
 8005170:	e7f4      	b.n	800515c <__swsetup_r+0xb0>
 8005172:	2000      	movs	r0, #0
 8005174:	e7f7      	b.n	8005166 <__swsetup_r+0xba>
 8005176:	bf00      	nop
 8005178:	2000000c 	.word	0x2000000c
 800517c:	08005f54 	.word	0x08005f54
 8005180:	08005f74 	.word	0x08005f74
 8005184:	08005f34 	.word	0x08005f34

08005188 <__sflush_r>:
 8005188:	898a      	ldrh	r2, [r1, #12]
 800518a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800518e:	4605      	mov	r5, r0
 8005190:	0710      	lsls	r0, r2, #28
 8005192:	460c      	mov	r4, r1
 8005194:	d458      	bmi.n	8005248 <__sflush_r+0xc0>
 8005196:	684b      	ldr	r3, [r1, #4]
 8005198:	2b00      	cmp	r3, #0
 800519a:	dc05      	bgt.n	80051a8 <__sflush_r+0x20>
 800519c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800519e:	2b00      	cmp	r3, #0
 80051a0:	dc02      	bgt.n	80051a8 <__sflush_r+0x20>
 80051a2:	2000      	movs	r0, #0
 80051a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80051aa:	2e00      	cmp	r6, #0
 80051ac:	d0f9      	beq.n	80051a2 <__sflush_r+0x1a>
 80051ae:	2300      	movs	r3, #0
 80051b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80051b4:	682f      	ldr	r7, [r5, #0]
 80051b6:	602b      	str	r3, [r5, #0]
 80051b8:	d032      	beq.n	8005220 <__sflush_r+0x98>
 80051ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80051bc:	89a3      	ldrh	r3, [r4, #12]
 80051be:	075a      	lsls	r2, r3, #29
 80051c0:	d505      	bpl.n	80051ce <__sflush_r+0x46>
 80051c2:	6863      	ldr	r3, [r4, #4]
 80051c4:	1ac0      	subs	r0, r0, r3
 80051c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80051c8:	b10b      	cbz	r3, 80051ce <__sflush_r+0x46>
 80051ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80051cc:	1ac0      	subs	r0, r0, r3
 80051ce:	2300      	movs	r3, #0
 80051d0:	4602      	mov	r2, r0
 80051d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80051d4:	6a21      	ldr	r1, [r4, #32]
 80051d6:	4628      	mov	r0, r5
 80051d8:	47b0      	blx	r6
 80051da:	1c43      	adds	r3, r0, #1
 80051dc:	89a3      	ldrh	r3, [r4, #12]
 80051de:	d106      	bne.n	80051ee <__sflush_r+0x66>
 80051e0:	6829      	ldr	r1, [r5, #0]
 80051e2:	291d      	cmp	r1, #29
 80051e4:	d82c      	bhi.n	8005240 <__sflush_r+0xb8>
 80051e6:	4a2a      	ldr	r2, [pc, #168]	; (8005290 <__sflush_r+0x108>)
 80051e8:	40ca      	lsrs	r2, r1
 80051ea:	07d6      	lsls	r6, r2, #31
 80051ec:	d528      	bpl.n	8005240 <__sflush_r+0xb8>
 80051ee:	2200      	movs	r2, #0
 80051f0:	6062      	str	r2, [r4, #4]
 80051f2:	04d9      	lsls	r1, r3, #19
 80051f4:	6922      	ldr	r2, [r4, #16]
 80051f6:	6022      	str	r2, [r4, #0]
 80051f8:	d504      	bpl.n	8005204 <__sflush_r+0x7c>
 80051fa:	1c42      	adds	r2, r0, #1
 80051fc:	d101      	bne.n	8005202 <__sflush_r+0x7a>
 80051fe:	682b      	ldr	r3, [r5, #0]
 8005200:	b903      	cbnz	r3, 8005204 <__sflush_r+0x7c>
 8005202:	6560      	str	r0, [r4, #84]	; 0x54
 8005204:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005206:	602f      	str	r7, [r5, #0]
 8005208:	2900      	cmp	r1, #0
 800520a:	d0ca      	beq.n	80051a2 <__sflush_r+0x1a>
 800520c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005210:	4299      	cmp	r1, r3
 8005212:	d002      	beq.n	800521a <__sflush_r+0x92>
 8005214:	4628      	mov	r0, r5
 8005216:	f000 f9d5 	bl	80055c4 <_free_r>
 800521a:	2000      	movs	r0, #0
 800521c:	6360      	str	r0, [r4, #52]	; 0x34
 800521e:	e7c1      	b.n	80051a4 <__sflush_r+0x1c>
 8005220:	6a21      	ldr	r1, [r4, #32]
 8005222:	2301      	movs	r3, #1
 8005224:	4628      	mov	r0, r5
 8005226:	47b0      	blx	r6
 8005228:	1c41      	adds	r1, r0, #1
 800522a:	d1c7      	bne.n	80051bc <__sflush_r+0x34>
 800522c:	682b      	ldr	r3, [r5, #0]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d0c4      	beq.n	80051bc <__sflush_r+0x34>
 8005232:	2b1d      	cmp	r3, #29
 8005234:	d001      	beq.n	800523a <__sflush_r+0xb2>
 8005236:	2b16      	cmp	r3, #22
 8005238:	d101      	bne.n	800523e <__sflush_r+0xb6>
 800523a:	602f      	str	r7, [r5, #0]
 800523c:	e7b1      	b.n	80051a2 <__sflush_r+0x1a>
 800523e:	89a3      	ldrh	r3, [r4, #12]
 8005240:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005244:	81a3      	strh	r3, [r4, #12]
 8005246:	e7ad      	b.n	80051a4 <__sflush_r+0x1c>
 8005248:	690f      	ldr	r7, [r1, #16]
 800524a:	2f00      	cmp	r7, #0
 800524c:	d0a9      	beq.n	80051a2 <__sflush_r+0x1a>
 800524e:	0793      	lsls	r3, r2, #30
 8005250:	680e      	ldr	r6, [r1, #0]
 8005252:	bf08      	it	eq
 8005254:	694b      	ldreq	r3, [r1, #20]
 8005256:	600f      	str	r7, [r1, #0]
 8005258:	bf18      	it	ne
 800525a:	2300      	movne	r3, #0
 800525c:	eba6 0807 	sub.w	r8, r6, r7
 8005260:	608b      	str	r3, [r1, #8]
 8005262:	f1b8 0f00 	cmp.w	r8, #0
 8005266:	dd9c      	ble.n	80051a2 <__sflush_r+0x1a>
 8005268:	6a21      	ldr	r1, [r4, #32]
 800526a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800526c:	4643      	mov	r3, r8
 800526e:	463a      	mov	r2, r7
 8005270:	4628      	mov	r0, r5
 8005272:	47b0      	blx	r6
 8005274:	2800      	cmp	r0, #0
 8005276:	dc06      	bgt.n	8005286 <__sflush_r+0xfe>
 8005278:	89a3      	ldrh	r3, [r4, #12]
 800527a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800527e:	81a3      	strh	r3, [r4, #12]
 8005280:	f04f 30ff 	mov.w	r0, #4294967295
 8005284:	e78e      	b.n	80051a4 <__sflush_r+0x1c>
 8005286:	4407      	add	r7, r0
 8005288:	eba8 0800 	sub.w	r8, r8, r0
 800528c:	e7e9      	b.n	8005262 <__sflush_r+0xda>
 800528e:	bf00      	nop
 8005290:	20400001 	.word	0x20400001

08005294 <_fflush_r>:
 8005294:	b538      	push	{r3, r4, r5, lr}
 8005296:	690b      	ldr	r3, [r1, #16]
 8005298:	4605      	mov	r5, r0
 800529a:	460c      	mov	r4, r1
 800529c:	b913      	cbnz	r3, 80052a4 <_fflush_r+0x10>
 800529e:	2500      	movs	r5, #0
 80052a0:	4628      	mov	r0, r5
 80052a2:	bd38      	pop	{r3, r4, r5, pc}
 80052a4:	b118      	cbz	r0, 80052ae <_fflush_r+0x1a>
 80052a6:	6983      	ldr	r3, [r0, #24]
 80052a8:	b90b      	cbnz	r3, 80052ae <_fflush_r+0x1a>
 80052aa:	f000 f887 	bl	80053bc <__sinit>
 80052ae:	4b14      	ldr	r3, [pc, #80]	; (8005300 <_fflush_r+0x6c>)
 80052b0:	429c      	cmp	r4, r3
 80052b2:	d11b      	bne.n	80052ec <_fflush_r+0x58>
 80052b4:	686c      	ldr	r4, [r5, #4]
 80052b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d0ef      	beq.n	800529e <_fflush_r+0xa>
 80052be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80052c0:	07d0      	lsls	r0, r2, #31
 80052c2:	d404      	bmi.n	80052ce <_fflush_r+0x3a>
 80052c4:	0599      	lsls	r1, r3, #22
 80052c6:	d402      	bmi.n	80052ce <_fflush_r+0x3a>
 80052c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052ca:	f000 f915 	bl	80054f8 <__retarget_lock_acquire_recursive>
 80052ce:	4628      	mov	r0, r5
 80052d0:	4621      	mov	r1, r4
 80052d2:	f7ff ff59 	bl	8005188 <__sflush_r>
 80052d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80052d8:	07da      	lsls	r2, r3, #31
 80052da:	4605      	mov	r5, r0
 80052dc:	d4e0      	bmi.n	80052a0 <_fflush_r+0xc>
 80052de:	89a3      	ldrh	r3, [r4, #12]
 80052e0:	059b      	lsls	r3, r3, #22
 80052e2:	d4dd      	bmi.n	80052a0 <_fflush_r+0xc>
 80052e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052e6:	f000 f908 	bl	80054fa <__retarget_lock_release_recursive>
 80052ea:	e7d9      	b.n	80052a0 <_fflush_r+0xc>
 80052ec:	4b05      	ldr	r3, [pc, #20]	; (8005304 <_fflush_r+0x70>)
 80052ee:	429c      	cmp	r4, r3
 80052f0:	d101      	bne.n	80052f6 <_fflush_r+0x62>
 80052f2:	68ac      	ldr	r4, [r5, #8]
 80052f4:	e7df      	b.n	80052b6 <_fflush_r+0x22>
 80052f6:	4b04      	ldr	r3, [pc, #16]	; (8005308 <_fflush_r+0x74>)
 80052f8:	429c      	cmp	r4, r3
 80052fa:	bf08      	it	eq
 80052fc:	68ec      	ldreq	r4, [r5, #12]
 80052fe:	e7da      	b.n	80052b6 <_fflush_r+0x22>
 8005300:	08005f54 	.word	0x08005f54
 8005304:	08005f74 	.word	0x08005f74
 8005308:	08005f34 	.word	0x08005f34

0800530c <std>:
 800530c:	2300      	movs	r3, #0
 800530e:	b510      	push	{r4, lr}
 8005310:	4604      	mov	r4, r0
 8005312:	e9c0 3300 	strd	r3, r3, [r0]
 8005316:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800531a:	6083      	str	r3, [r0, #8]
 800531c:	8181      	strh	r1, [r0, #12]
 800531e:	6643      	str	r3, [r0, #100]	; 0x64
 8005320:	81c2      	strh	r2, [r0, #14]
 8005322:	6183      	str	r3, [r0, #24]
 8005324:	4619      	mov	r1, r3
 8005326:	2208      	movs	r2, #8
 8005328:	305c      	adds	r0, #92	; 0x5c
 800532a:	f7ff fdd7 	bl	8004edc <memset>
 800532e:	4b05      	ldr	r3, [pc, #20]	; (8005344 <std+0x38>)
 8005330:	6263      	str	r3, [r4, #36]	; 0x24
 8005332:	4b05      	ldr	r3, [pc, #20]	; (8005348 <std+0x3c>)
 8005334:	62a3      	str	r3, [r4, #40]	; 0x28
 8005336:	4b05      	ldr	r3, [pc, #20]	; (800534c <std+0x40>)
 8005338:	62e3      	str	r3, [r4, #44]	; 0x2c
 800533a:	4b05      	ldr	r3, [pc, #20]	; (8005350 <std+0x44>)
 800533c:	6224      	str	r4, [r4, #32]
 800533e:	6323      	str	r3, [r4, #48]	; 0x30
 8005340:	bd10      	pop	{r4, pc}
 8005342:	bf00      	nop
 8005344:	08005d15 	.word	0x08005d15
 8005348:	08005d37 	.word	0x08005d37
 800534c:	08005d6f 	.word	0x08005d6f
 8005350:	08005d93 	.word	0x08005d93

08005354 <_cleanup_r>:
 8005354:	4901      	ldr	r1, [pc, #4]	; (800535c <_cleanup_r+0x8>)
 8005356:	f000 b8af 	b.w	80054b8 <_fwalk_reent>
 800535a:	bf00      	nop
 800535c:	08005295 	.word	0x08005295

08005360 <__sfmoreglue>:
 8005360:	b570      	push	{r4, r5, r6, lr}
 8005362:	1e4a      	subs	r2, r1, #1
 8005364:	2568      	movs	r5, #104	; 0x68
 8005366:	4355      	muls	r5, r2
 8005368:	460e      	mov	r6, r1
 800536a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800536e:	f000 f979 	bl	8005664 <_malloc_r>
 8005372:	4604      	mov	r4, r0
 8005374:	b140      	cbz	r0, 8005388 <__sfmoreglue+0x28>
 8005376:	2100      	movs	r1, #0
 8005378:	e9c0 1600 	strd	r1, r6, [r0]
 800537c:	300c      	adds	r0, #12
 800537e:	60a0      	str	r0, [r4, #8]
 8005380:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005384:	f7ff fdaa 	bl	8004edc <memset>
 8005388:	4620      	mov	r0, r4
 800538a:	bd70      	pop	{r4, r5, r6, pc}

0800538c <__sfp_lock_acquire>:
 800538c:	4801      	ldr	r0, [pc, #4]	; (8005394 <__sfp_lock_acquire+0x8>)
 800538e:	f000 b8b3 	b.w	80054f8 <__retarget_lock_acquire_recursive>
 8005392:	bf00      	nop
 8005394:	20000328 	.word	0x20000328

08005398 <__sfp_lock_release>:
 8005398:	4801      	ldr	r0, [pc, #4]	; (80053a0 <__sfp_lock_release+0x8>)
 800539a:	f000 b8ae 	b.w	80054fa <__retarget_lock_release_recursive>
 800539e:	bf00      	nop
 80053a0:	20000328 	.word	0x20000328

080053a4 <__sinit_lock_acquire>:
 80053a4:	4801      	ldr	r0, [pc, #4]	; (80053ac <__sinit_lock_acquire+0x8>)
 80053a6:	f000 b8a7 	b.w	80054f8 <__retarget_lock_acquire_recursive>
 80053aa:	bf00      	nop
 80053ac:	20000323 	.word	0x20000323

080053b0 <__sinit_lock_release>:
 80053b0:	4801      	ldr	r0, [pc, #4]	; (80053b8 <__sinit_lock_release+0x8>)
 80053b2:	f000 b8a2 	b.w	80054fa <__retarget_lock_release_recursive>
 80053b6:	bf00      	nop
 80053b8:	20000323 	.word	0x20000323

080053bc <__sinit>:
 80053bc:	b510      	push	{r4, lr}
 80053be:	4604      	mov	r4, r0
 80053c0:	f7ff fff0 	bl	80053a4 <__sinit_lock_acquire>
 80053c4:	69a3      	ldr	r3, [r4, #24]
 80053c6:	b11b      	cbz	r3, 80053d0 <__sinit+0x14>
 80053c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053cc:	f7ff bff0 	b.w	80053b0 <__sinit_lock_release>
 80053d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80053d4:	6523      	str	r3, [r4, #80]	; 0x50
 80053d6:	4b13      	ldr	r3, [pc, #76]	; (8005424 <__sinit+0x68>)
 80053d8:	4a13      	ldr	r2, [pc, #76]	; (8005428 <__sinit+0x6c>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	62a2      	str	r2, [r4, #40]	; 0x28
 80053de:	42a3      	cmp	r3, r4
 80053e0:	bf04      	itt	eq
 80053e2:	2301      	moveq	r3, #1
 80053e4:	61a3      	streq	r3, [r4, #24]
 80053e6:	4620      	mov	r0, r4
 80053e8:	f000 f820 	bl	800542c <__sfp>
 80053ec:	6060      	str	r0, [r4, #4]
 80053ee:	4620      	mov	r0, r4
 80053f0:	f000 f81c 	bl	800542c <__sfp>
 80053f4:	60a0      	str	r0, [r4, #8]
 80053f6:	4620      	mov	r0, r4
 80053f8:	f000 f818 	bl	800542c <__sfp>
 80053fc:	2200      	movs	r2, #0
 80053fe:	60e0      	str	r0, [r4, #12]
 8005400:	2104      	movs	r1, #4
 8005402:	6860      	ldr	r0, [r4, #4]
 8005404:	f7ff ff82 	bl	800530c <std>
 8005408:	68a0      	ldr	r0, [r4, #8]
 800540a:	2201      	movs	r2, #1
 800540c:	2109      	movs	r1, #9
 800540e:	f7ff ff7d 	bl	800530c <std>
 8005412:	68e0      	ldr	r0, [r4, #12]
 8005414:	2202      	movs	r2, #2
 8005416:	2112      	movs	r1, #18
 8005418:	f7ff ff78 	bl	800530c <std>
 800541c:	2301      	movs	r3, #1
 800541e:	61a3      	str	r3, [r4, #24]
 8005420:	e7d2      	b.n	80053c8 <__sinit+0xc>
 8005422:	bf00      	nop
 8005424:	08005f30 	.word	0x08005f30
 8005428:	08005355 	.word	0x08005355

0800542c <__sfp>:
 800542c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800542e:	4607      	mov	r7, r0
 8005430:	f7ff ffac 	bl	800538c <__sfp_lock_acquire>
 8005434:	4b1e      	ldr	r3, [pc, #120]	; (80054b0 <__sfp+0x84>)
 8005436:	681e      	ldr	r6, [r3, #0]
 8005438:	69b3      	ldr	r3, [r6, #24]
 800543a:	b913      	cbnz	r3, 8005442 <__sfp+0x16>
 800543c:	4630      	mov	r0, r6
 800543e:	f7ff ffbd 	bl	80053bc <__sinit>
 8005442:	3648      	adds	r6, #72	; 0x48
 8005444:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005448:	3b01      	subs	r3, #1
 800544a:	d503      	bpl.n	8005454 <__sfp+0x28>
 800544c:	6833      	ldr	r3, [r6, #0]
 800544e:	b30b      	cbz	r3, 8005494 <__sfp+0x68>
 8005450:	6836      	ldr	r6, [r6, #0]
 8005452:	e7f7      	b.n	8005444 <__sfp+0x18>
 8005454:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005458:	b9d5      	cbnz	r5, 8005490 <__sfp+0x64>
 800545a:	4b16      	ldr	r3, [pc, #88]	; (80054b4 <__sfp+0x88>)
 800545c:	60e3      	str	r3, [r4, #12]
 800545e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005462:	6665      	str	r5, [r4, #100]	; 0x64
 8005464:	f000 f847 	bl	80054f6 <__retarget_lock_init_recursive>
 8005468:	f7ff ff96 	bl	8005398 <__sfp_lock_release>
 800546c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005470:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005474:	6025      	str	r5, [r4, #0]
 8005476:	61a5      	str	r5, [r4, #24]
 8005478:	2208      	movs	r2, #8
 800547a:	4629      	mov	r1, r5
 800547c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005480:	f7ff fd2c 	bl	8004edc <memset>
 8005484:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005488:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800548c:	4620      	mov	r0, r4
 800548e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005490:	3468      	adds	r4, #104	; 0x68
 8005492:	e7d9      	b.n	8005448 <__sfp+0x1c>
 8005494:	2104      	movs	r1, #4
 8005496:	4638      	mov	r0, r7
 8005498:	f7ff ff62 	bl	8005360 <__sfmoreglue>
 800549c:	4604      	mov	r4, r0
 800549e:	6030      	str	r0, [r6, #0]
 80054a0:	2800      	cmp	r0, #0
 80054a2:	d1d5      	bne.n	8005450 <__sfp+0x24>
 80054a4:	f7ff ff78 	bl	8005398 <__sfp_lock_release>
 80054a8:	230c      	movs	r3, #12
 80054aa:	603b      	str	r3, [r7, #0]
 80054ac:	e7ee      	b.n	800548c <__sfp+0x60>
 80054ae:	bf00      	nop
 80054b0:	08005f30 	.word	0x08005f30
 80054b4:	ffff0001 	.word	0xffff0001

080054b8 <_fwalk_reent>:
 80054b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054bc:	4606      	mov	r6, r0
 80054be:	4688      	mov	r8, r1
 80054c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80054c4:	2700      	movs	r7, #0
 80054c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80054ca:	f1b9 0901 	subs.w	r9, r9, #1
 80054ce:	d505      	bpl.n	80054dc <_fwalk_reent+0x24>
 80054d0:	6824      	ldr	r4, [r4, #0]
 80054d2:	2c00      	cmp	r4, #0
 80054d4:	d1f7      	bne.n	80054c6 <_fwalk_reent+0xe>
 80054d6:	4638      	mov	r0, r7
 80054d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054dc:	89ab      	ldrh	r3, [r5, #12]
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d907      	bls.n	80054f2 <_fwalk_reent+0x3a>
 80054e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80054e6:	3301      	adds	r3, #1
 80054e8:	d003      	beq.n	80054f2 <_fwalk_reent+0x3a>
 80054ea:	4629      	mov	r1, r5
 80054ec:	4630      	mov	r0, r6
 80054ee:	47c0      	blx	r8
 80054f0:	4307      	orrs	r7, r0
 80054f2:	3568      	adds	r5, #104	; 0x68
 80054f4:	e7e9      	b.n	80054ca <_fwalk_reent+0x12>

080054f6 <__retarget_lock_init_recursive>:
 80054f6:	4770      	bx	lr

080054f8 <__retarget_lock_acquire_recursive>:
 80054f8:	4770      	bx	lr

080054fa <__retarget_lock_release_recursive>:
 80054fa:	4770      	bx	lr

080054fc <__swhatbuf_r>:
 80054fc:	b570      	push	{r4, r5, r6, lr}
 80054fe:	460e      	mov	r6, r1
 8005500:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005504:	2900      	cmp	r1, #0
 8005506:	b096      	sub	sp, #88	; 0x58
 8005508:	4614      	mov	r4, r2
 800550a:	461d      	mov	r5, r3
 800550c:	da07      	bge.n	800551e <__swhatbuf_r+0x22>
 800550e:	2300      	movs	r3, #0
 8005510:	602b      	str	r3, [r5, #0]
 8005512:	89b3      	ldrh	r3, [r6, #12]
 8005514:	061a      	lsls	r2, r3, #24
 8005516:	d410      	bmi.n	800553a <__swhatbuf_r+0x3e>
 8005518:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800551c:	e00e      	b.n	800553c <__swhatbuf_r+0x40>
 800551e:	466a      	mov	r2, sp
 8005520:	f000 fc5e 	bl	8005de0 <_fstat_r>
 8005524:	2800      	cmp	r0, #0
 8005526:	dbf2      	blt.n	800550e <__swhatbuf_r+0x12>
 8005528:	9a01      	ldr	r2, [sp, #4]
 800552a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800552e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005532:	425a      	negs	r2, r3
 8005534:	415a      	adcs	r2, r3
 8005536:	602a      	str	r2, [r5, #0]
 8005538:	e7ee      	b.n	8005518 <__swhatbuf_r+0x1c>
 800553a:	2340      	movs	r3, #64	; 0x40
 800553c:	2000      	movs	r0, #0
 800553e:	6023      	str	r3, [r4, #0]
 8005540:	b016      	add	sp, #88	; 0x58
 8005542:	bd70      	pop	{r4, r5, r6, pc}

08005544 <__smakebuf_r>:
 8005544:	898b      	ldrh	r3, [r1, #12]
 8005546:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005548:	079d      	lsls	r5, r3, #30
 800554a:	4606      	mov	r6, r0
 800554c:	460c      	mov	r4, r1
 800554e:	d507      	bpl.n	8005560 <__smakebuf_r+0x1c>
 8005550:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005554:	6023      	str	r3, [r4, #0]
 8005556:	6123      	str	r3, [r4, #16]
 8005558:	2301      	movs	r3, #1
 800555a:	6163      	str	r3, [r4, #20]
 800555c:	b002      	add	sp, #8
 800555e:	bd70      	pop	{r4, r5, r6, pc}
 8005560:	ab01      	add	r3, sp, #4
 8005562:	466a      	mov	r2, sp
 8005564:	f7ff ffca 	bl	80054fc <__swhatbuf_r>
 8005568:	9900      	ldr	r1, [sp, #0]
 800556a:	4605      	mov	r5, r0
 800556c:	4630      	mov	r0, r6
 800556e:	f000 f879 	bl	8005664 <_malloc_r>
 8005572:	b948      	cbnz	r0, 8005588 <__smakebuf_r+0x44>
 8005574:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005578:	059a      	lsls	r2, r3, #22
 800557a:	d4ef      	bmi.n	800555c <__smakebuf_r+0x18>
 800557c:	f023 0303 	bic.w	r3, r3, #3
 8005580:	f043 0302 	orr.w	r3, r3, #2
 8005584:	81a3      	strh	r3, [r4, #12]
 8005586:	e7e3      	b.n	8005550 <__smakebuf_r+0xc>
 8005588:	4b0d      	ldr	r3, [pc, #52]	; (80055c0 <__smakebuf_r+0x7c>)
 800558a:	62b3      	str	r3, [r6, #40]	; 0x28
 800558c:	89a3      	ldrh	r3, [r4, #12]
 800558e:	6020      	str	r0, [r4, #0]
 8005590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005594:	81a3      	strh	r3, [r4, #12]
 8005596:	9b00      	ldr	r3, [sp, #0]
 8005598:	6163      	str	r3, [r4, #20]
 800559a:	9b01      	ldr	r3, [sp, #4]
 800559c:	6120      	str	r0, [r4, #16]
 800559e:	b15b      	cbz	r3, 80055b8 <__smakebuf_r+0x74>
 80055a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055a4:	4630      	mov	r0, r6
 80055a6:	f000 fc2d 	bl	8005e04 <_isatty_r>
 80055aa:	b128      	cbz	r0, 80055b8 <__smakebuf_r+0x74>
 80055ac:	89a3      	ldrh	r3, [r4, #12]
 80055ae:	f023 0303 	bic.w	r3, r3, #3
 80055b2:	f043 0301 	orr.w	r3, r3, #1
 80055b6:	81a3      	strh	r3, [r4, #12]
 80055b8:	89a0      	ldrh	r0, [r4, #12]
 80055ba:	4305      	orrs	r5, r0
 80055bc:	81a5      	strh	r5, [r4, #12]
 80055be:	e7cd      	b.n	800555c <__smakebuf_r+0x18>
 80055c0:	08005355 	.word	0x08005355

080055c4 <_free_r>:
 80055c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80055c6:	2900      	cmp	r1, #0
 80055c8:	d048      	beq.n	800565c <_free_r+0x98>
 80055ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055ce:	9001      	str	r0, [sp, #4]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	f1a1 0404 	sub.w	r4, r1, #4
 80055d6:	bfb8      	it	lt
 80055d8:	18e4      	addlt	r4, r4, r3
 80055da:	f000 fc35 	bl	8005e48 <__malloc_lock>
 80055de:	4a20      	ldr	r2, [pc, #128]	; (8005660 <_free_r+0x9c>)
 80055e0:	9801      	ldr	r0, [sp, #4]
 80055e2:	6813      	ldr	r3, [r2, #0]
 80055e4:	4615      	mov	r5, r2
 80055e6:	b933      	cbnz	r3, 80055f6 <_free_r+0x32>
 80055e8:	6063      	str	r3, [r4, #4]
 80055ea:	6014      	str	r4, [r2, #0]
 80055ec:	b003      	add	sp, #12
 80055ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80055f2:	f000 bc2f 	b.w	8005e54 <__malloc_unlock>
 80055f6:	42a3      	cmp	r3, r4
 80055f8:	d90b      	bls.n	8005612 <_free_r+0x4e>
 80055fa:	6821      	ldr	r1, [r4, #0]
 80055fc:	1862      	adds	r2, r4, r1
 80055fe:	4293      	cmp	r3, r2
 8005600:	bf04      	itt	eq
 8005602:	681a      	ldreq	r2, [r3, #0]
 8005604:	685b      	ldreq	r3, [r3, #4]
 8005606:	6063      	str	r3, [r4, #4]
 8005608:	bf04      	itt	eq
 800560a:	1852      	addeq	r2, r2, r1
 800560c:	6022      	streq	r2, [r4, #0]
 800560e:	602c      	str	r4, [r5, #0]
 8005610:	e7ec      	b.n	80055ec <_free_r+0x28>
 8005612:	461a      	mov	r2, r3
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	b10b      	cbz	r3, 800561c <_free_r+0x58>
 8005618:	42a3      	cmp	r3, r4
 800561a:	d9fa      	bls.n	8005612 <_free_r+0x4e>
 800561c:	6811      	ldr	r1, [r2, #0]
 800561e:	1855      	adds	r5, r2, r1
 8005620:	42a5      	cmp	r5, r4
 8005622:	d10b      	bne.n	800563c <_free_r+0x78>
 8005624:	6824      	ldr	r4, [r4, #0]
 8005626:	4421      	add	r1, r4
 8005628:	1854      	adds	r4, r2, r1
 800562a:	42a3      	cmp	r3, r4
 800562c:	6011      	str	r1, [r2, #0]
 800562e:	d1dd      	bne.n	80055ec <_free_r+0x28>
 8005630:	681c      	ldr	r4, [r3, #0]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	6053      	str	r3, [r2, #4]
 8005636:	4421      	add	r1, r4
 8005638:	6011      	str	r1, [r2, #0]
 800563a:	e7d7      	b.n	80055ec <_free_r+0x28>
 800563c:	d902      	bls.n	8005644 <_free_r+0x80>
 800563e:	230c      	movs	r3, #12
 8005640:	6003      	str	r3, [r0, #0]
 8005642:	e7d3      	b.n	80055ec <_free_r+0x28>
 8005644:	6825      	ldr	r5, [r4, #0]
 8005646:	1961      	adds	r1, r4, r5
 8005648:	428b      	cmp	r3, r1
 800564a:	bf04      	itt	eq
 800564c:	6819      	ldreq	r1, [r3, #0]
 800564e:	685b      	ldreq	r3, [r3, #4]
 8005650:	6063      	str	r3, [r4, #4]
 8005652:	bf04      	itt	eq
 8005654:	1949      	addeq	r1, r1, r5
 8005656:	6021      	streq	r1, [r4, #0]
 8005658:	6054      	str	r4, [r2, #4]
 800565a:	e7c7      	b.n	80055ec <_free_r+0x28>
 800565c:	b003      	add	sp, #12
 800565e:	bd30      	pop	{r4, r5, pc}
 8005660:	20000214 	.word	0x20000214

08005664 <_malloc_r>:
 8005664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005666:	1ccd      	adds	r5, r1, #3
 8005668:	f025 0503 	bic.w	r5, r5, #3
 800566c:	3508      	adds	r5, #8
 800566e:	2d0c      	cmp	r5, #12
 8005670:	bf38      	it	cc
 8005672:	250c      	movcc	r5, #12
 8005674:	2d00      	cmp	r5, #0
 8005676:	4606      	mov	r6, r0
 8005678:	db01      	blt.n	800567e <_malloc_r+0x1a>
 800567a:	42a9      	cmp	r1, r5
 800567c:	d903      	bls.n	8005686 <_malloc_r+0x22>
 800567e:	230c      	movs	r3, #12
 8005680:	6033      	str	r3, [r6, #0]
 8005682:	2000      	movs	r0, #0
 8005684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005686:	f000 fbdf 	bl	8005e48 <__malloc_lock>
 800568a:	4921      	ldr	r1, [pc, #132]	; (8005710 <_malloc_r+0xac>)
 800568c:	680a      	ldr	r2, [r1, #0]
 800568e:	4614      	mov	r4, r2
 8005690:	b99c      	cbnz	r4, 80056ba <_malloc_r+0x56>
 8005692:	4f20      	ldr	r7, [pc, #128]	; (8005714 <_malloc_r+0xb0>)
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	b923      	cbnz	r3, 80056a2 <_malloc_r+0x3e>
 8005698:	4621      	mov	r1, r4
 800569a:	4630      	mov	r0, r6
 800569c:	f000 fb2a 	bl	8005cf4 <_sbrk_r>
 80056a0:	6038      	str	r0, [r7, #0]
 80056a2:	4629      	mov	r1, r5
 80056a4:	4630      	mov	r0, r6
 80056a6:	f000 fb25 	bl	8005cf4 <_sbrk_r>
 80056aa:	1c43      	adds	r3, r0, #1
 80056ac:	d123      	bne.n	80056f6 <_malloc_r+0x92>
 80056ae:	230c      	movs	r3, #12
 80056b0:	6033      	str	r3, [r6, #0]
 80056b2:	4630      	mov	r0, r6
 80056b4:	f000 fbce 	bl	8005e54 <__malloc_unlock>
 80056b8:	e7e3      	b.n	8005682 <_malloc_r+0x1e>
 80056ba:	6823      	ldr	r3, [r4, #0]
 80056bc:	1b5b      	subs	r3, r3, r5
 80056be:	d417      	bmi.n	80056f0 <_malloc_r+0x8c>
 80056c0:	2b0b      	cmp	r3, #11
 80056c2:	d903      	bls.n	80056cc <_malloc_r+0x68>
 80056c4:	6023      	str	r3, [r4, #0]
 80056c6:	441c      	add	r4, r3
 80056c8:	6025      	str	r5, [r4, #0]
 80056ca:	e004      	b.n	80056d6 <_malloc_r+0x72>
 80056cc:	6863      	ldr	r3, [r4, #4]
 80056ce:	42a2      	cmp	r2, r4
 80056d0:	bf0c      	ite	eq
 80056d2:	600b      	streq	r3, [r1, #0]
 80056d4:	6053      	strne	r3, [r2, #4]
 80056d6:	4630      	mov	r0, r6
 80056d8:	f000 fbbc 	bl	8005e54 <__malloc_unlock>
 80056dc:	f104 000b 	add.w	r0, r4, #11
 80056e0:	1d23      	adds	r3, r4, #4
 80056e2:	f020 0007 	bic.w	r0, r0, #7
 80056e6:	1ac2      	subs	r2, r0, r3
 80056e8:	d0cc      	beq.n	8005684 <_malloc_r+0x20>
 80056ea:	1a1b      	subs	r3, r3, r0
 80056ec:	50a3      	str	r3, [r4, r2]
 80056ee:	e7c9      	b.n	8005684 <_malloc_r+0x20>
 80056f0:	4622      	mov	r2, r4
 80056f2:	6864      	ldr	r4, [r4, #4]
 80056f4:	e7cc      	b.n	8005690 <_malloc_r+0x2c>
 80056f6:	1cc4      	adds	r4, r0, #3
 80056f8:	f024 0403 	bic.w	r4, r4, #3
 80056fc:	42a0      	cmp	r0, r4
 80056fe:	d0e3      	beq.n	80056c8 <_malloc_r+0x64>
 8005700:	1a21      	subs	r1, r4, r0
 8005702:	4630      	mov	r0, r6
 8005704:	f000 faf6 	bl	8005cf4 <_sbrk_r>
 8005708:	3001      	adds	r0, #1
 800570a:	d1dd      	bne.n	80056c8 <_malloc_r+0x64>
 800570c:	e7cf      	b.n	80056ae <_malloc_r+0x4a>
 800570e:	bf00      	nop
 8005710:	20000214 	.word	0x20000214
 8005714:	20000218 	.word	0x20000218

08005718 <__sfputc_r>:
 8005718:	6893      	ldr	r3, [r2, #8]
 800571a:	3b01      	subs	r3, #1
 800571c:	2b00      	cmp	r3, #0
 800571e:	b410      	push	{r4}
 8005720:	6093      	str	r3, [r2, #8]
 8005722:	da08      	bge.n	8005736 <__sfputc_r+0x1e>
 8005724:	6994      	ldr	r4, [r2, #24]
 8005726:	42a3      	cmp	r3, r4
 8005728:	db01      	blt.n	800572e <__sfputc_r+0x16>
 800572a:	290a      	cmp	r1, #10
 800572c:	d103      	bne.n	8005736 <__sfputc_r+0x1e>
 800572e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005732:	f7ff bc69 	b.w	8005008 <__swbuf_r>
 8005736:	6813      	ldr	r3, [r2, #0]
 8005738:	1c58      	adds	r0, r3, #1
 800573a:	6010      	str	r0, [r2, #0]
 800573c:	7019      	strb	r1, [r3, #0]
 800573e:	4608      	mov	r0, r1
 8005740:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005744:	4770      	bx	lr

08005746 <__sfputs_r>:
 8005746:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005748:	4606      	mov	r6, r0
 800574a:	460f      	mov	r7, r1
 800574c:	4614      	mov	r4, r2
 800574e:	18d5      	adds	r5, r2, r3
 8005750:	42ac      	cmp	r4, r5
 8005752:	d101      	bne.n	8005758 <__sfputs_r+0x12>
 8005754:	2000      	movs	r0, #0
 8005756:	e007      	b.n	8005768 <__sfputs_r+0x22>
 8005758:	f814 1b01 	ldrb.w	r1, [r4], #1
 800575c:	463a      	mov	r2, r7
 800575e:	4630      	mov	r0, r6
 8005760:	f7ff ffda 	bl	8005718 <__sfputc_r>
 8005764:	1c43      	adds	r3, r0, #1
 8005766:	d1f3      	bne.n	8005750 <__sfputs_r+0xa>
 8005768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800576c <_vfiprintf_r>:
 800576c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005770:	460d      	mov	r5, r1
 8005772:	b09d      	sub	sp, #116	; 0x74
 8005774:	4614      	mov	r4, r2
 8005776:	4698      	mov	r8, r3
 8005778:	4606      	mov	r6, r0
 800577a:	b118      	cbz	r0, 8005784 <_vfiprintf_r+0x18>
 800577c:	6983      	ldr	r3, [r0, #24]
 800577e:	b90b      	cbnz	r3, 8005784 <_vfiprintf_r+0x18>
 8005780:	f7ff fe1c 	bl	80053bc <__sinit>
 8005784:	4b89      	ldr	r3, [pc, #548]	; (80059ac <_vfiprintf_r+0x240>)
 8005786:	429d      	cmp	r5, r3
 8005788:	d11b      	bne.n	80057c2 <_vfiprintf_r+0x56>
 800578a:	6875      	ldr	r5, [r6, #4]
 800578c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800578e:	07d9      	lsls	r1, r3, #31
 8005790:	d405      	bmi.n	800579e <_vfiprintf_r+0x32>
 8005792:	89ab      	ldrh	r3, [r5, #12]
 8005794:	059a      	lsls	r2, r3, #22
 8005796:	d402      	bmi.n	800579e <_vfiprintf_r+0x32>
 8005798:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800579a:	f7ff fead 	bl	80054f8 <__retarget_lock_acquire_recursive>
 800579e:	89ab      	ldrh	r3, [r5, #12]
 80057a0:	071b      	lsls	r3, r3, #28
 80057a2:	d501      	bpl.n	80057a8 <_vfiprintf_r+0x3c>
 80057a4:	692b      	ldr	r3, [r5, #16]
 80057a6:	b9eb      	cbnz	r3, 80057e4 <_vfiprintf_r+0x78>
 80057a8:	4629      	mov	r1, r5
 80057aa:	4630      	mov	r0, r6
 80057ac:	f7ff fc7e 	bl	80050ac <__swsetup_r>
 80057b0:	b1c0      	cbz	r0, 80057e4 <_vfiprintf_r+0x78>
 80057b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80057b4:	07dc      	lsls	r4, r3, #31
 80057b6:	d50e      	bpl.n	80057d6 <_vfiprintf_r+0x6a>
 80057b8:	f04f 30ff 	mov.w	r0, #4294967295
 80057bc:	b01d      	add	sp, #116	; 0x74
 80057be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057c2:	4b7b      	ldr	r3, [pc, #492]	; (80059b0 <_vfiprintf_r+0x244>)
 80057c4:	429d      	cmp	r5, r3
 80057c6:	d101      	bne.n	80057cc <_vfiprintf_r+0x60>
 80057c8:	68b5      	ldr	r5, [r6, #8]
 80057ca:	e7df      	b.n	800578c <_vfiprintf_r+0x20>
 80057cc:	4b79      	ldr	r3, [pc, #484]	; (80059b4 <_vfiprintf_r+0x248>)
 80057ce:	429d      	cmp	r5, r3
 80057d0:	bf08      	it	eq
 80057d2:	68f5      	ldreq	r5, [r6, #12]
 80057d4:	e7da      	b.n	800578c <_vfiprintf_r+0x20>
 80057d6:	89ab      	ldrh	r3, [r5, #12]
 80057d8:	0598      	lsls	r0, r3, #22
 80057da:	d4ed      	bmi.n	80057b8 <_vfiprintf_r+0x4c>
 80057dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80057de:	f7ff fe8c 	bl	80054fa <__retarget_lock_release_recursive>
 80057e2:	e7e9      	b.n	80057b8 <_vfiprintf_r+0x4c>
 80057e4:	2300      	movs	r3, #0
 80057e6:	9309      	str	r3, [sp, #36]	; 0x24
 80057e8:	2320      	movs	r3, #32
 80057ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80057ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80057f2:	2330      	movs	r3, #48	; 0x30
 80057f4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80059b8 <_vfiprintf_r+0x24c>
 80057f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80057fc:	f04f 0901 	mov.w	r9, #1
 8005800:	4623      	mov	r3, r4
 8005802:	469a      	mov	sl, r3
 8005804:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005808:	b10a      	cbz	r2, 800580e <_vfiprintf_r+0xa2>
 800580a:	2a25      	cmp	r2, #37	; 0x25
 800580c:	d1f9      	bne.n	8005802 <_vfiprintf_r+0x96>
 800580e:	ebba 0b04 	subs.w	fp, sl, r4
 8005812:	d00b      	beq.n	800582c <_vfiprintf_r+0xc0>
 8005814:	465b      	mov	r3, fp
 8005816:	4622      	mov	r2, r4
 8005818:	4629      	mov	r1, r5
 800581a:	4630      	mov	r0, r6
 800581c:	f7ff ff93 	bl	8005746 <__sfputs_r>
 8005820:	3001      	adds	r0, #1
 8005822:	f000 80aa 	beq.w	800597a <_vfiprintf_r+0x20e>
 8005826:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005828:	445a      	add	r2, fp
 800582a:	9209      	str	r2, [sp, #36]	; 0x24
 800582c:	f89a 3000 	ldrb.w	r3, [sl]
 8005830:	2b00      	cmp	r3, #0
 8005832:	f000 80a2 	beq.w	800597a <_vfiprintf_r+0x20e>
 8005836:	2300      	movs	r3, #0
 8005838:	f04f 32ff 	mov.w	r2, #4294967295
 800583c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005840:	f10a 0a01 	add.w	sl, sl, #1
 8005844:	9304      	str	r3, [sp, #16]
 8005846:	9307      	str	r3, [sp, #28]
 8005848:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800584c:	931a      	str	r3, [sp, #104]	; 0x68
 800584e:	4654      	mov	r4, sl
 8005850:	2205      	movs	r2, #5
 8005852:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005856:	4858      	ldr	r0, [pc, #352]	; (80059b8 <_vfiprintf_r+0x24c>)
 8005858:	f7fa fcf2 	bl	8000240 <memchr>
 800585c:	9a04      	ldr	r2, [sp, #16]
 800585e:	b9d8      	cbnz	r0, 8005898 <_vfiprintf_r+0x12c>
 8005860:	06d1      	lsls	r1, r2, #27
 8005862:	bf44      	itt	mi
 8005864:	2320      	movmi	r3, #32
 8005866:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800586a:	0713      	lsls	r3, r2, #28
 800586c:	bf44      	itt	mi
 800586e:	232b      	movmi	r3, #43	; 0x2b
 8005870:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005874:	f89a 3000 	ldrb.w	r3, [sl]
 8005878:	2b2a      	cmp	r3, #42	; 0x2a
 800587a:	d015      	beq.n	80058a8 <_vfiprintf_r+0x13c>
 800587c:	9a07      	ldr	r2, [sp, #28]
 800587e:	4654      	mov	r4, sl
 8005880:	2000      	movs	r0, #0
 8005882:	f04f 0c0a 	mov.w	ip, #10
 8005886:	4621      	mov	r1, r4
 8005888:	f811 3b01 	ldrb.w	r3, [r1], #1
 800588c:	3b30      	subs	r3, #48	; 0x30
 800588e:	2b09      	cmp	r3, #9
 8005890:	d94e      	bls.n	8005930 <_vfiprintf_r+0x1c4>
 8005892:	b1b0      	cbz	r0, 80058c2 <_vfiprintf_r+0x156>
 8005894:	9207      	str	r2, [sp, #28]
 8005896:	e014      	b.n	80058c2 <_vfiprintf_r+0x156>
 8005898:	eba0 0308 	sub.w	r3, r0, r8
 800589c:	fa09 f303 	lsl.w	r3, r9, r3
 80058a0:	4313      	orrs	r3, r2
 80058a2:	9304      	str	r3, [sp, #16]
 80058a4:	46a2      	mov	sl, r4
 80058a6:	e7d2      	b.n	800584e <_vfiprintf_r+0xe2>
 80058a8:	9b03      	ldr	r3, [sp, #12]
 80058aa:	1d19      	adds	r1, r3, #4
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	9103      	str	r1, [sp, #12]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	bfbb      	ittet	lt
 80058b4:	425b      	neglt	r3, r3
 80058b6:	f042 0202 	orrlt.w	r2, r2, #2
 80058ba:	9307      	strge	r3, [sp, #28]
 80058bc:	9307      	strlt	r3, [sp, #28]
 80058be:	bfb8      	it	lt
 80058c0:	9204      	strlt	r2, [sp, #16]
 80058c2:	7823      	ldrb	r3, [r4, #0]
 80058c4:	2b2e      	cmp	r3, #46	; 0x2e
 80058c6:	d10c      	bne.n	80058e2 <_vfiprintf_r+0x176>
 80058c8:	7863      	ldrb	r3, [r4, #1]
 80058ca:	2b2a      	cmp	r3, #42	; 0x2a
 80058cc:	d135      	bne.n	800593a <_vfiprintf_r+0x1ce>
 80058ce:	9b03      	ldr	r3, [sp, #12]
 80058d0:	1d1a      	adds	r2, r3, #4
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	9203      	str	r2, [sp, #12]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	bfb8      	it	lt
 80058da:	f04f 33ff 	movlt.w	r3, #4294967295
 80058de:	3402      	adds	r4, #2
 80058e0:	9305      	str	r3, [sp, #20]
 80058e2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80059c8 <_vfiprintf_r+0x25c>
 80058e6:	7821      	ldrb	r1, [r4, #0]
 80058e8:	2203      	movs	r2, #3
 80058ea:	4650      	mov	r0, sl
 80058ec:	f7fa fca8 	bl	8000240 <memchr>
 80058f0:	b140      	cbz	r0, 8005904 <_vfiprintf_r+0x198>
 80058f2:	2340      	movs	r3, #64	; 0x40
 80058f4:	eba0 000a 	sub.w	r0, r0, sl
 80058f8:	fa03 f000 	lsl.w	r0, r3, r0
 80058fc:	9b04      	ldr	r3, [sp, #16]
 80058fe:	4303      	orrs	r3, r0
 8005900:	3401      	adds	r4, #1
 8005902:	9304      	str	r3, [sp, #16]
 8005904:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005908:	482c      	ldr	r0, [pc, #176]	; (80059bc <_vfiprintf_r+0x250>)
 800590a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800590e:	2206      	movs	r2, #6
 8005910:	f7fa fc96 	bl	8000240 <memchr>
 8005914:	2800      	cmp	r0, #0
 8005916:	d03f      	beq.n	8005998 <_vfiprintf_r+0x22c>
 8005918:	4b29      	ldr	r3, [pc, #164]	; (80059c0 <_vfiprintf_r+0x254>)
 800591a:	bb1b      	cbnz	r3, 8005964 <_vfiprintf_r+0x1f8>
 800591c:	9b03      	ldr	r3, [sp, #12]
 800591e:	3307      	adds	r3, #7
 8005920:	f023 0307 	bic.w	r3, r3, #7
 8005924:	3308      	adds	r3, #8
 8005926:	9303      	str	r3, [sp, #12]
 8005928:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800592a:	443b      	add	r3, r7
 800592c:	9309      	str	r3, [sp, #36]	; 0x24
 800592e:	e767      	b.n	8005800 <_vfiprintf_r+0x94>
 8005930:	fb0c 3202 	mla	r2, ip, r2, r3
 8005934:	460c      	mov	r4, r1
 8005936:	2001      	movs	r0, #1
 8005938:	e7a5      	b.n	8005886 <_vfiprintf_r+0x11a>
 800593a:	2300      	movs	r3, #0
 800593c:	3401      	adds	r4, #1
 800593e:	9305      	str	r3, [sp, #20]
 8005940:	4619      	mov	r1, r3
 8005942:	f04f 0c0a 	mov.w	ip, #10
 8005946:	4620      	mov	r0, r4
 8005948:	f810 2b01 	ldrb.w	r2, [r0], #1
 800594c:	3a30      	subs	r2, #48	; 0x30
 800594e:	2a09      	cmp	r2, #9
 8005950:	d903      	bls.n	800595a <_vfiprintf_r+0x1ee>
 8005952:	2b00      	cmp	r3, #0
 8005954:	d0c5      	beq.n	80058e2 <_vfiprintf_r+0x176>
 8005956:	9105      	str	r1, [sp, #20]
 8005958:	e7c3      	b.n	80058e2 <_vfiprintf_r+0x176>
 800595a:	fb0c 2101 	mla	r1, ip, r1, r2
 800595e:	4604      	mov	r4, r0
 8005960:	2301      	movs	r3, #1
 8005962:	e7f0      	b.n	8005946 <_vfiprintf_r+0x1da>
 8005964:	ab03      	add	r3, sp, #12
 8005966:	9300      	str	r3, [sp, #0]
 8005968:	462a      	mov	r2, r5
 800596a:	4b16      	ldr	r3, [pc, #88]	; (80059c4 <_vfiprintf_r+0x258>)
 800596c:	a904      	add	r1, sp, #16
 800596e:	4630      	mov	r0, r6
 8005970:	f3af 8000 	nop.w
 8005974:	4607      	mov	r7, r0
 8005976:	1c78      	adds	r0, r7, #1
 8005978:	d1d6      	bne.n	8005928 <_vfiprintf_r+0x1bc>
 800597a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800597c:	07d9      	lsls	r1, r3, #31
 800597e:	d405      	bmi.n	800598c <_vfiprintf_r+0x220>
 8005980:	89ab      	ldrh	r3, [r5, #12]
 8005982:	059a      	lsls	r2, r3, #22
 8005984:	d402      	bmi.n	800598c <_vfiprintf_r+0x220>
 8005986:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005988:	f7ff fdb7 	bl	80054fa <__retarget_lock_release_recursive>
 800598c:	89ab      	ldrh	r3, [r5, #12]
 800598e:	065b      	lsls	r3, r3, #25
 8005990:	f53f af12 	bmi.w	80057b8 <_vfiprintf_r+0x4c>
 8005994:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005996:	e711      	b.n	80057bc <_vfiprintf_r+0x50>
 8005998:	ab03      	add	r3, sp, #12
 800599a:	9300      	str	r3, [sp, #0]
 800599c:	462a      	mov	r2, r5
 800599e:	4b09      	ldr	r3, [pc, #36]	; (80059c4 <_vfiprintf_r+0x258>)
 80059a0:	a904      	add	r1, sp, #16
 80059a2:	4630      	mov	r0, r6
 80059a4:	f000 f880 	bl	8005aa8 <_printf_i>
 80059a8:	e7e4      	b.n	8005974 <_vfiprintf_r+0x208>
 80059aa:	bf00      	nop
 80059ac:	08005f54 	.word	0x08005f54
 80059b0:	08005f74 	.word	0x08005f74
 80059b4:	08005f34 	.word	0x08005f34
 80059b8:	08005f94 	.word	0x08005f94
 80059bc:	08005f9e 	.word	0x08005f9e
 80059c0:	00000000 	.word	0x00000000
 80059c4:	08005747 	.word	0x08005747
 80059c8:	08005f9a 	.word	0x08005f9a

080059cc <_printf_common>:
 80059cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059d0:	4616      	mov	r6, r2
 80059d2:	4699      	mov	r9, r3
 80059d4:	688a      	ldr	r2, [r1, #8]
 80059d6:	690b      	ldr	r3, [r1, #16]
 80059d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80059dc:	4293      	cmp	r3, r2
 80059de:	bfb8      	it	lt
 80059e0:	4613      	movlt	r3, r2
 80059e2:	6033      	str	r3, [r6, #0]
 80059e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80059e8:	4607      	mov	r7, r0
 80059ea:	460c      	mov	r4, r1
 80059ec:	b10a      	cbz	r2, 80059f2 <_printf_common+0x26>
 80059ee:	3301      	adds	r3, #1
 80059f0:	6033      	str	r3, [r6, #0]
 80059f2:	6823      	ldr	r3, [r4, #0]
 80059f4:	0699      	lsls	r1, r3, #26
 80059f6:	bf42      	ittt	mi
 80059f8:	6833      	ldrmi	r3, [r6, #0]
 80059fa:	3302      	addmi	r3, #2
 80059fc:	6033      	strmi	r3, [r6, #0]
 80059fe:	6825      	ldr	r5, [r4, #0]
 8005a00:	f015 0506 	ands.w	r5, r5, #6
 8005a04:	d106      	bne.n	8005a14 <_printf_common+0x48>
 8005a06:	f104 0a19 	add.w	sl, r4, #25
 8005a0a:	68e3      	ldr	r3, [r4, #12]
 8005a0c:	6832      	ldr	r2, [r6, #0]
 8005a0e:	1a9b      	subs	r3, r3, r2
 8005a10:	42ab      	cmp	r3, r5
 8005a12:	dc26      	bgt.n	8005a62 <_printf_common+0x96>
 8005a14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a18:	1e13      	subs	r3, r2, #0
 8005a1a:	6822      	ldr	r2, [r4, #0]
 8005a1c:	bf18      	it	ne
 8005a1e:	2301      	movne	r3, #1
 8005a20:	0692      	lsls	r2, r2, #26
 8005a22:	d42b      	bmi.n	8005a7c <_printf_common+0xb0>
 8005a24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a28:	4649      	mov	r1, r9
 8005a2a:	4638      	mov	r0, r7
 8005a2c:	47c0      	blx	r8
 8005a2e:	3001      	adds	r0, #1
 8005a30:	d01e      	beq.n	8005a70 <_printf_common+0xa4>
 8005a32:	6823      	ldr	r3, [r4, #0]
 8005a34:	68e5      	ldr	r5, [r4, #12]
 8005a36:	6832      	ldr	r2, [r6, #0]
 8005a38:	f003 0306 	and.w	r3, r3, #6
 8005a3c:	2b04      	cmp	r3, #4
 8005a3e:	bf08      	it	eq
 8005a40:	1aad      	subeq	r5, r5, r2
 8005a42:	68a3      	ldr	r3, [r4, #8]
 8005a44:	6922      	ldr	r2, [r4, #16]
 8005a46:	bf0c      	ite	eq
 8005a48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a4c:	2500      	movne	r5, #0
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	bfc4      	itt	gt
 8005a52:	1a9b      	subgt	r3, r3, r2
 8005a54:	18ed      	addgt	r5, r5, r3
 8005a56:	2600      	movs	r6, #0
 8005a58:	341a      	adds	r4, #26
 8005a5a:	42b5      	cmp	r5, r6
 8005a5c:	d11a      	bne.n	8005a94 <_printf_common+0xc8>
 8005a5e:	2000      	movs	r0, #0
 8005a60:	e008      	b.n	8005a74 <_printf_common+0xa8>
 8005a62:	2301      	movs	r3, #1
 8005a64:	4652      	mov	r2, sl
 8005a66:	4649      	mov	r1, r9
 8005a68:	4638      	mov	r0, r7
 8005a6a:	47c0      	blx	r8
 8005a6c:	3001      	adds	r0, #1
 8005a6e:	d103      	bne.n	8005a78 <_printf_common+0xac>
 8005a70:	f04f 30ff 	mov.w	r0, #4294967295
 8005a74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a78:	3501      	adds	r5, #1
 8005a7a:	e7c6      	b.n	8005a0a <_printf_common+0x3e>
 8005a7c:	18e1      	adds	r1, r4, r3
 8005a7e:	1c5a      	adds	r2, r3, #1
 8005a80:	2030      	movs	r0, #48	; 0x30
 8005a82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a86:	4422      	add	r2, r4
 8005a88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a90:	3302      	adds	r3, #2
 8005a92:	e7c7      	b.n	8005a24 <_printf_common+0x58>
 8005a94:	2301      	movs	r3, #1
 8005a96:	4622      	mov	r2, r4
 8005a98:	4649      	mov	r1, r9
 8005a9a:	4638      	mov	r0, r7
 8005a9c:	47c0      	blx	r8
 8005a9e:	3001      	adds	r0, #1
 8005aa0:	d0e6      	beq.n	8005a70 <_printf_common+0xa4>
 8005aa2:	3601      	adds	r6, #1
 8005aa4:	e7d9      	b.n	8005a5a <_printf_common+0x8e>
	...

08005aa8 <_printf_i>:
 8005aa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005aac:	460c      	mov	r4, r1
 8005aae:	4691      	mov	r9, r2
 8005ab0:	7e27      	ldrb	r7, [r4, #24]
 8005ab2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005ab4:	2f78      	cmp	r7, #120	; 0x78
 8005ab6:	4680      	mov	r8, r0
 8005ab8:	469a      	mov	sl, r3
 8005aba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005abe:	d807      	bhi.n	8005ad0 <_printf_i+0x28>
 8005ac0:	2f62      	cmp	r7, #98	; 0x62
 8005ac2:	d80a      	bhi.n	8005ada <_printf_i+0x32>
 8005ac4:	2f00      	cmp	r7, #0
 8005ac6:	f000 80d8 	beq.w	8005c7a <_printf_i+0x1d2>
 8005aca:	2f58      	cmp	r7, #88	; 0x58
 8005acc:	f000 80a3 	beq.w	8005c16 <_printf_i+0x16e>
 8005ad0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005ad4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ad8:	e03a      	b.n	8005b50 <_printf_i+0xa8>
 8005ada:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ade:	2b15      	cmp	r3, #21
 8005ae0:	d8f6      	bhi.n	8005ad0 <_printf_i+0x28>
 8005ae2:	a001      	add	r0, pc, #4	; (adr r0, 8005ae8 <_printf_i+0x40>)
 8005ae4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005ae8:	08005b41 	.word	0x08005b41
 8005aec:	08005b55 	.word	0x08005b55
 8005af0:	08005ad1 	.word	0x08005ad1
 8005af4:	08005ad1 	.word	0x08005ad1
 8005af8:	08005ad1 	.word	0x08005ad1
 8005afc:	08005ad1 	.word	0x08005ad1
 8005b00:	08005b55 	.word	0x08005b55
 8005b04:	08005ad1 	.word	0x08005ad1
 8005b08:	08005ad1 	.word	0x08005ad1
 8005b0c:	08005ad1 	.word	0x08005ad1
 8005b10:	08005ad1 	.word	0x08005ad1
 8005b14:	08005c61 	.word	0x08005c61
 8005b18:	08005b85 	.word	0x08005b85
 8005b1c:	08005c43 	.word	0x08005c43
 8005b20:	08005ad1 	.word	0x08005ad1
 8005b24:	08005ad1 	.word	0x08005ad1
 8005b28:	08005c83 	.word	0x08005c83
 8005b2c:	08005ad1 	.word	0x08005ad1
 8005b30:	08005b85 	.word	0x08005b85
 8005b34:	08005ad1 	.word	0x08005ad1
 8005b38:	08005ad1 	.word	0x08005ad1
 8005b3c:	08005c4b 	.word	0x08005c4b
 8005b40:	680b      	ldr	r3, [r1, #0]
 8005b42:	1d1a      	adds	r2, r3, #4
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	600a      	str	r2, [r1, #0]
 8005b48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005b4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b50:	2301      	movs	r3, #1
 8005b52:	e0a3      	b.n	8005c9c <_printf_i+0x1f4>
 8005b54:	6825      	ldr	r5, [r4, #0]
 8005b56:	6808      	ldr	r0, [r1, #0]
 8005b58:	062e      	lsls	r6, r5, #24
 8005b5a:	f100 0304 	add.w	r3, r0, #4
 8005b5e:	d50a      	bpl.n	8005b76 <_printf_i+0xce>
 8005b60:	6805      	ldr	r5, [r0, #0]
 8005b62:	600b      	str	r3, [r1, #0]
 8005b64:	2d00      	cmp	r5, #0
 8005b66:	da03      	bge.n	8005b70 <_printf_i+0xc8>
 8005b68:	232d      	movs	r3, #45	; 0x2d
 8005b6a:	426d      	negs	r5, r5
 8005b6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b70:	485e      	ldr	r0, [pc, #376]	; (8005cec <_printf_i+0x244>)
 8005b72:	230a      	movs	r3, #10
 8005b74:	e019      	b.n	8005baa <_printf_i+0x102>
 8005b76:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005b7a:	6805      	ldr	r5, [r0, #0]
 8005b7c:	600b      	str	r3, [r1, #0]
 8005b7e:	bf18      	it	ne
 8005b80:	b22d      	sxthne	r5, r5
 8005b82:	e7ef      	b.n	8005b64 <_printf_i+0xbc>
 8005b84:	680b      	ldr	r3, [r1, #0]
 8005b86:	6825      	ldr	r5, [r4, #0]
 8005b88:	1d18      	adds	r0, r3, #4
 8005b8a:	6008      	str	r0, [r1, #0]
 8005b8c:	0628      	lsls	r0, r5, #24
 8005b8e:	d501      	bpl.n	8005b94 <_printf_i+0xec>
 8005b90:	681d      	ldr	r5, [r3, #0]
 8005b92:	e002      	b.n	8005b9a <_printf_i+0xf2>
 8005b94:	0669      	lsls	r1, r5, #25
 8005b96:	d5fb      	bpl.n	8005b90 <_printf_i+0xe8>
 8005b98:	881d      	ldrh	r5, [r3, #0]
 8005b9a:	4854      	ldr	r0, [pc, #336]	; (8005cec <_printf_i+0x244>)
 8005b9c:	2f6f      	cmp	r7, #111	; 0x6f
 8005b9e:	bf0c      	ite	eq
 8005ba0:	2308      	moveq	r3, #8
 8005ba2:	230a      	movne	r3, #10
 8005ba4:	2100      	movs	r1, #0
 8005ba6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005baa:	6866      	ldr	r6, [r4, #4]
 8005bac:	60a6      	str	r6, [r4, #8]
 8005bae:	2e00      	cmp	r6, #0
 8005bb0:	bfa2      	ittt	ge
 8005bb2:	6821      	ldrge	r1, [r4, #0]
 8005bb4:	f021 0104 	bicge.w	r1, r1, #4
 8005bb8:	6021      	strge	r1, [r4, #0]
 8005bba:	b90d      	cbnz	r5, 8005bc0 <_printf_i+0x118>
 8005bbc:	2e00      	cmp	r6, #0
 8005bbe:	d04d      	beq.n	8005c5c <_printf_i+0x1b4>
 8005bc0:	4616      	mov	r6, r2
 8005bc2:	fbb5 f1f3 	udiv	r1, r5, r3
 8005bc6:	fb03 5711 	mls	r7, r3, r1, r5
 8005bca:	5dc7      	ldrb	r7, [r0, r7]
 8005bcc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005bd0:	462f      	mov	r7, r5
 8005bd2:	42bb      	cmp	r3, r7
 8005bd4:	460d      	mov	r5, r1
 8005bd6:	d9f4      	bls.n	8005bc2 <_printf_i+0x11a>
 8005bd8:	2b08      	cmp	r3, #8
 8005bda:	d10b      	bne.n	8005bf4 <_printf_i+0x14c>
 8005bdc:	6823      	ldr	r3, [r4, #0]
 8005bde:	07df      	lsls	r7, r3, #31
 8005be0:	d508      	bpl.n	8005bf4 <_printf_i+0x14c>
 8005be2:	6923      	ldr	r3, [r4, #16]
 8005be4:	6861      	ldr	r1, [r4, #4]
 8005be6:	4299      	cmp	r1, r3
 8005be8:	bfde      	ittt	le
 8005bea:	2330      	movle	r3, #48	; 0x30
 8005bec:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005bf0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005bf4:	1b92      	subs	r2, r2, r6
 8005bf6:	6122      	str	r2, [r4, #16]
 8005bf8:	f8cd a000 	str.w	sl, [sp]
 8005bfc:	464b      	mov	r3, r9
 8005bfe:	aa03      	add	r2, sp, #12
 8005c00:	4621      	mov	r1, r4
 8005c02:	4640      	mov	r0, r8
 8005c04:	f7ff fee2 	bl	80059cc <_printf_common>
 8005c08:	3001      	adds	r0, #1
 8005c0a:	d14c      	bne.n	8005ca6 <_printf_i+0x1fe>
 8005c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c10:	b004      	add	sp, #16
 8005c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c16:	4835      	ldr	r0, [pc, #212]	; (8005cec <_printf_i+0x244>)
 8005c18:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005c1c:	6823      	ldr	r3, [r4, #0]
 8005c1e:	680e      	ldr	r6, [r1, #0]
 8005c20:	061f      	lsls	r7, r3, #24
 8005c22:	f856 5b04 	ldr.w	r5, [r6], #4
 8005c26:	600e      	str	r6, [r1, #0]
 8005c28:	d514      	bpl.n	8005c54 <_printf_i+0x1ac>
 8005c2a:	07d9      	lsls	r1, r3, #31
 8005c2c:	bf44      	itt	mi
 8005c2e:	f043 0320 	orrmi.w	r3, r3, #32
 8005c32:	6023      	strmi	r3, [r4, #0]
 8005c34:	b91d      	cbnz	r5, 8005c3e <_printf_i+0x196>
 8005c36:	6823      	ldr	r3, [r4, #0]
 8005c38:	f023 0320 	bic.w	r3, r3, #32
 8005c3c:	6023      	str	r3, [r4, #0]
 8005c3e:	2310      	movs	r3, #16
 8005c40:	e7b0      	b.n	8005ba4 <_printf_i+0xfc>
 8005c42:	6823      	ldr	r3, [r4, #0]
 8005c44:	f043 0320 	orr.w	r3, r3, #32
 8005c48:	6023      	str	r3, [r4, #0]
 8005c4a:	2378      	movs	r3, #120	; 0x78
 8005c4c:	4828      	ldr	r0, [pc, #160]	; (8005cf0 <_printf_i+0x248>)
 8005c4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c52:	e7e3      	b.n	8005c1c <_printf_i+0x174>
 8005c54:	065e      	lsls	r6, r3, #25
 8005c56:	bf48      	it	mi
 8005c58:	b2ad      	uxthmi	r5, r5
 8005c5a:	e7e6      	b.n	8005c2a <_printf_i+0x182>
 8005c5c:	4616      	mov	r6, r2
 8005c5e:	e7bb      	b.n	8005bd8 <_printf_i+0x130>
 8005c60:	680b      	ldr	r3, [r1, #0]
 8005c62:	6826      	ldr	r6, [r4, #0]
 8005c64:	6960      	ldr	r0, [r4, #20]
 8005c66:	1d1d      	adds	r5, r3, #4
 8005c68:	600d      	str	r5, [r1, #0]
 8005c6a:	0635      	lsls	r5, r6, #24
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	d501      	bpl.n	8005c74 <_printf_i+0x1cc>
 8005c70:	6018      	str	r0, [r3, #0]
 8005c72:	e002      	b.n	8005c7a <_printf_i+0x1d2>
 8005c74:	0671      	lsls	r1, r6, #25
 8005c76:	d5fb      	bpl.n	8005c70 <_printf_i+0x1c8>
 8005c78:	8018      	strh	r0, [r3, #0]
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	6123      	str	r3, [r4, #16]
 8005c7e:	4616      	mov	r6, r2
 8005c80:	e7ba      	b.n	8005bf8 <_printf_i+0x150>
 8005c82:	680b      	ldr	r3, [r1, #0]
 8005c84:	1d1a      	adds	r2, r3, #4
 8005c86:	600a      	str	r2, [r1, #0]
 8005c88:	681e      	ldr	r6, [r3, #0]
 8005c8a:	6862      	ldr	r2, [r4, #4]
 8005c8c:	2100      	movs	r1, #0
 8005c8e:	4630      	mov	r0, r6
 8005c90:	f7fa fad6 	bl	8000240 <memchr>
 8005c94:	b108      	cbz	r0, 8005c9a <_printf_i+0x1f2>
 8005c96:	1b80      	subs	r0, r0, r6
 8005c98:	6060      	str	r0, [r4, #4]
 8005c9a:	6863      	ldr	r3, [r4, #4]
 8005c9c:	6123      	str	r3, [r4, #16]
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ca4:	e7a8      	b.n	8005bf8 <_printf_i+0x150>
 8005ca6:	6923      	ldr	r3, [r4, #16]
 8005ca8:	4632      	mov	r2, r6
 8005caa:	4649      	mov	r1, r9
 8005cac:	4640      	mov	r0, r8
 8005cae:	47d0      	blx	sl
 8005cb0:	3001      	adds	r0, #1
 8005cb2:	d0ab      	beq.n	8005c0c <_printf_i+0x164>
 8005cb4:	6823      	ldr	r3, [r4, #0]
 8005cb6:	079b      	lsls	r3, r3, #30
 8005cb8:	d413      	bmi.n	8005ce2 <_printf_i+0x23a>
 8005cba:	68e0      	ldr	r0, [r4, #12]
 8005cbc:	9b03      	ldr	r3, [sp, #12]
 8005cbe:	4298      	cmp	r0, r3
 8005cc0:	bfb8      	it	lt
 8005cc2:	4618      	movlt	r0, r3
 8005cc4:	e7a4      	b.n	8005c10 <_printf_i+0x168>
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	4632      	mov	r2, r6
 8005cca:	4649      	mov	r1, r9
 8005ccc:	4640      	mov	r0, r8
 8005cce:	47d0      	blx	sl
 8005cd0:	3001      	adds	r0, #1
 8005cd2:	d09b      	beq.n	8005c0c <_printf_i+0x164>
 8005cd4:	3501      	adds	r5, #1
 8005cd6:	68e3      	ldr	r3, [r4, #12]
 8005cd8:	9903      	ldr	r1, [sp, #12]
 8005cda:	1a5b      	subs	r3, r3, r1
 8005cdc:	42ab      	cmp	r3, r5
 8005cde:	dcf2      	bgt.n	8005cc6 <_printf_i+0x21e>
 8005ce0:	e7eb      	b.n	8005cba <_printf_i+0x212>
 8005ce2:	2500      	movs	r5, #0
 8005ce4:	f104 0619 	add.w	r6, r4, #25
 8005ce8:	e7f5      	b.n	8005cd6 <_printf_i+0x22e>
 8005cea:	bf00      	nop
 8005cec:	08005fa5 	.word	0x08005fa5
 8005cf0:	08005fb6 	.word	0x08005fb6

08005cf4 <_sbrk_r>:
 8005cf4:	b538      	push	{r3, r4, r5, lr}
 8005cf6:	4d06      	ldr	r5, [pc, #24]	; (8005d10 <_sbrk_r+0x1c>)
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	4604      	mov	r4, r0
 8005cfc:	4608      	mov	r0, r1
 8005cfe:	602b      	str	r3, [r5, #0]
 8005d00:	f7fb f8f2 	bl	8000ee8 <_sbrk>
 8005d04:	1c43      	adds	r3, r0, #1
 8005d06:	d102      	bne.n	8005d0e <_sbrk_r+0x1a>
 8005d08:	682b      	ldr	r3, [r5, #0]
 8005d0a:	b103      	cbz	r3, 8005d0e <_sbrk_r+0x1a>
 8005d0c:	6023      	str	r3, [r4, #0]
 8005d0e:	bd38      	pop	{r3, r4, r5, pc}
 8005d10:	2000032c 	.word	0x2000032c

08005d14 <__sread>:
 8005d14:	b510      	push	{r4, lr}
 8005d16:	460c      	mov	r4, r1
 8005d18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d1c:	f000 f8a0 	bl	8005e60 <_read_r>
 8005d20:	2800      	cmp	r0, #0
 8005d22:	bfab      	itete	ge
 8005d24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005d26:	89a3      	ldrhlt	r3, [r4, #12]
 8005d28:	181b      	addge	r3, r3, r0
 8005d2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005d2e:	bfac      	ite	ge
 8005d30:	6563      	strge	r3, [r4, #84]	; 0x54
 8005d32:	81a3      	strhlt	r3, [r4, #12]
 8005d34:	bd10      	pop	{r4, pc}

08005d36 <__swrite>:
 8005d36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d3a:	461f      	mov	r7, r3
 8005d3c:	898b      	ldrh	r3, [r1, #12]
 8005d3e:	05db      	lsls	r3, r3, #23
 8005d40:	4605      	mov	r5, r0
 8005d42:	460c      	mov	r4, r1
 8005d44:	4616      	mov	r6, r2
 8005d46:	d505      	bpl.n	8005d54 <__swrite+0x1e>
 8005d48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d4c:	2302      	movs	r3, #2
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f000 f868 	bl	8005e24 <_lseek_r>
 8005d54:	89a3      	ldrh	r3, [r4, #12]
 8005d56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d5e:	81a3      	strh	r3, [r4, #12]
 8005d60:	4632      	mov	r2, r6
 8005d62:	463b      	mov	r3, r7
 8005d64:	4628      	mov	r0, r5
 8005d66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d6a:	f000 b817 	b.w	8005d9c <_write_r>

08005d6e <__sseek>:
 8005d6e:	b510      	push	{r4, lr}
 8005d70:	460c      	mov	r4, r1
 8005d72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d76:	f000 f855 	bl	8005e24 <_lseek_r>
 8005d7a:	1c43      	adds	r3, r0, #1
 8005d7c:	89a3      	ldrh	r3, [r4, #12]
 8005d7e:	bf15      	itete	ne
 8005d80:	6560      	strne	r0, [r4, #84]	; 0x54
 8005d82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005d86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005d8a:	81a3      	strheq	r3, [r4, #12]
 8005d8c:	bf18      	it	ne
 8005d8e:	81a3      	strhne	r3, [r4, #12]
 8005d90:	bd10      	pop	{r4, pc}

08005d92 <__sclose>:
 8005d92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d96:	f000 b813 	b.w	8005dc0 <_close_r>
	...

08005d9c <_write_r>:
 8005d9c:	b538      	push	{r3, r4, r5, lr}
 8005d9e:	4d07      	ldr	r5, [pc, #28]	; (8005dbc <_write_r+0x20>)
 8005da0:	4604      	mov	r4, r0
 8005da2:	4608      	mov	r0, r1
 8005da4:	4611      	mov	r1, r2
 8005da6:	2200      	movs	r2, #0
 8005da8:	602a      	str	r2, [r5, #0]
 8005daa:	461a      	mov	r2, r3
 8005dac:	f7fb f84b 	bl	8000e46 <_write>
 8005db0:	1c43      	adds	r3, r0, #1
 8005db2:	d102      	bne.n	8005dba <_write_r+0x1e>
 8005db4:	682b      	ldr	r3, [r5, #0]
 8005db6:	b103      	cbz	r3, 8005dba <_write_r+0x1e>
 8005db8:	6023      	str	r3, [r4, #0]
 8005dba:	bd38      	pop	{r3, r4, r5, pc}
 8005dbc:	2000032c 	.word	0x2000032c

08005dc0 <_close_r>:
 8005dc0:	b538      	push	{r3, r4, r5, lr}
 8005dc2:	4d06      	ldr	r5, [pc, #24]	; (8005ddc <_close_r+0x1c>)
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	4604      	mov	r4, r0
 8005dc8:	4608      	mov	r0, r1
 8005dca:	602b      	str	r3, [r5, #0]
 8005dcc:	f7fb f857 	bl	8000e7e <_close>
 8005dd0:	1c43      	adds	r3, r0, #1
 8005dd2:	d102      	bne.n	8005dda <_close_r+0x1a>
 8005dd4:	682b      	ldr	r3, [r5, #0]
 8005dd6:	b103      	cbz	r3, 8005dda <_close_r+0x1a>
 8005dd8:	6023      	str	r3, [r4, #0]
 8005dda:	bd38      	pop	{r3, r4, r5, pc}
 8005ddc:	2000032c 	.word	0x2000032c

08005de0 <_fstat_r>:
 8005de0:	b538      	push	{r3, r4, r5, lr}
 8005de2:	4d07      	ldr	r5, [pc, #28]	; (8005e00 <_fstat_r+0x20>)
 8005de4:	2300      	movs	r3, #0
 8005de6:	4604      	mov	r4, r0
 8005de8:	4608      	mov	r0, r1
 8005dea:	4611      	mov	r1, r2
 8005dec:	602b      	str	r3, [r5, #0]
 8005dee:	f7fb f852 	bl	8000e96 <_fstat>
 8005df2:	1c43      	adds	r3, r0, #1
 8005df4:	d102      	bne.n	8005dfc <_fstat_r+0x1c>
 8005df6:	682b      	ldr	r3, [r5, #0]
 8005df8:	b103      	cbz	r3, 8005dfc <_fstat_r+0x1c>
 8005dfa:	6023      	str	r3, [r4, #0]
 8005dfc:	bd38      	pop	{r3, r4, r5, pc}
 8005dfe:	bf00      	nop
 8005e00:	2000032c 	.word	0x2000032c

08005e04 <_isatty_r>:
 8005e04:	b538      	push	{r3, r4, r5, lr}
 8005e06:	4d06      	ldr	r5, [pc, #24]	; (8005e20 <_isatty_r+0x1c>)
 8005e08:	2300      	movs	r3, #0
 8005e0a:	4604      	mov	r4, r0
 8005e0c:	4608      	mov	r0, r1
 8005e0e:	602b      	str	r3, [r5, #0]
 8005e10:	f7fb f851 	bl	8000eb6 <_isatty>
 8005e14:	1c43      	adds	r3, r0, #1
 8005e16:	d102      	bne.n	8005e1e <_isatty_r+0x1a>
 8005e18:	682b      	ldr	r3, [r5, #0]
 8005e1a:	b103      	cbz	r3, 8005e1e <_isatty_r+0x1a>
 8005e1c:	6023      	str	r3, [r4, #0]
 8005e1e:	bd38      	pop	{r3, r4, r5, pc}
 8005e20:	2000032c 	.word	0x2000032c

08005e24 <_lseek_r>:
 8005e24:	b538      	push	{r3, r4, r5, lr}
 8005e26:	4d07      	ldr	r5, [pc, #28]	; (8005e44 <_lseek_r+0x20>)
 8005e28:	4604      	mov	r4, r0
 8005e2a:	4608      	mov	r0, r1
 8005e2c:	4611      	mov	r1, r2
 8005e2e:	2200      	movs	r2, #0
 8005e30:	602a      	str	r2, [r5, #0]
 8005e32:	461a      	mov	r2, r3
 8005e34:	f7fb f84a 	bl	8000ecc <_lseek>
 8005e38:	1c43      	adds	r3, r0, #1
 8005e3a:	d102      	bne.n	8005e42 <_lseek_r+0x1e>
 8005e3c:	682b      	ldr	r3, [r5, #0]
 8005e3e:	b103      	cbz	r3, 8005e42 <_lseek_r+0x1e>
 8005e40:	6023      	str	r3, [r4, #0]
 8005e42:	bd38      	pop	{r3, r4, r5, pc}
 8005e44:	2000032c 	.word	0x2000032c

08005e48 <__malloc_lock>:
 8005e48:	4801      	ldr	r0, [pc, #4]	; (8005e50 <__malloc_lock+0x8>)
 8005e4a:	f7ff bb55 	b.w	80054f8 <__retarget_lock_acquire_recursive>
 8005e4e:	bf00      	nop
 8005e50:	20000324 	.word	0x20000324

08005e54 <__malloc_unlock>:
 8005e54:	4801      	ldr	r0, [pc, #4]	; (8005e5c <__malloc_unlock+0x8>)
 8005e56:	f7ff bb50 	b.w	80054fa <__retarget_lock_release_recursive>
 8005e5a:	bf00      	nop
 8005e5c:	20000324 	.word	0x20000324

08005e60 <_read_r>:
 8005e60:	b538      	push	{r3, r4, r5, lr}
 8005e62:	4d07      	ldr	r5, [pc, #28]	; (8005e80 <_read_r+0x20>)
 8005e64:	4604      	mov	r4, r0
 8005e66:	4608      	mov	r0, r1
 8005e68:	4611      	mov	r1, r2
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	602a      	str	r2, [r5, #0]
 8005e6e:	461a      	mov	r2, r3
 8005e70:	f7fa ffcc 	bl	8000e0c <_read>
 8005e74:	1c43      	adds	r3, r0, #1
 8005e76:	d102      	bne.n	8005e7e <_read_r+0x1e>
 8005e78:	682b      	ldr	r3, [r5, #0]
 8005e7a:	b103      	cbz	r3, 8005e7e <_read_r+0x1e>
 8005e7c:	6023      	str	r3, [r4, #0]
 8005e7e:	bd38      	pop	{r3, r4, r5, pc}
 8005e80:	2000032c 	.word	0x2000032c

08005e84 <_init>:
 8005e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e86:	bf00      	nop
 8005e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e8a:	bc08      	pop	{r3}
 8005e8c:	469e      	mov	lr, r3
 8005e8e:	4770      	bx	lr

08005e90 <_fini>:
 8005e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e92:	bf00      	nop
 8005e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e96:	bc08      	pop	{r3}
 8005e98:	469e      	mov	lr, r3
 8005e9a:	4770      	bx	lr
